/** @internal */
// eslint-disable-next-line import/export
var PredefinedColorSpace;
(function (PredefinedColorSpace) {
	PredefinedColorSpace["SRGB"] = "srgb";
})(PredefinedColorSpace || (PredefinedColorSpace = {}));
/** @internal */
// eslint-disable-next-line import/export
var PowerPreference;
(function (PowerPreference) {
	PowerPreference["LowPower"] = "low-power";
	PowerPreference["HighPerformance"] = "high-performance";
})(PowerPreference || (PowerPreference = {}));
/** @internal */
var FeatureName;
(function (FeatureName) {
	FeatureName["DepthClipControl"] = "depth-clip-control";
	FeatureName["Depth24UnormStencil8"] = "depth24unorm-stencil8";
	FeatureName["Depth32FloatStencil8"] = "depth32float-stencil8";
	FeatureName["TextureCompressionBC"] = "texture-compression-bc";
	FeatureName["TextureCompressionETC2"] = "texture-compression-etc2";
	FeatureName["TextureCompressionASTC"] = "texture-compression-astc";
	FeatureName["TimestampQuery"] = "timestamp-query";
	FeatureName["IndirectFirstInstance"] = "indirect-first-instance";
	FeatureName["ShaderF16"] = "shader-f16";
	FeatureName["BGRA8UnormStorage"] = "bgra8unorm-storage";
})(FeatureName || (FeatureName = {}));
/** @internal */
var BufferUsage;
(function (BufferUsage) {
	BufferUsage[(BufferUsage["MapRead"] = 1)] = "MapRead";
	BufferUsage[(BufferUsage["MapWrite"] = 2)] = "MapWrite";
	BufferUsage[(BufferUsage["CopySrc"] = 4)] = "CopySrc";
	BufferUsage[(BufferUsage["CopyDst"] = 8)] = "CopyDst";
	BufferUsage[(BufferUsage["Index"] = 16)] = "Index";
	BufferUsage[(BufferUsage["Vertex"] = 32)] = "Vertex";
	BufferUsage[(BufferUsage["Uniform"] = 64)] = "Uniform";
	BufferUsage[(BufferUsage["Storage"] = 128)] = "Storage";
	BufferUsage[(BufferUsage["Indirect"] = 256)] = "Indirect";
	BufferUsage[(BufferUsage["QueryResolve"] = 512)] = "QueryResolve";
})(BufferUsage || (BufferUsage = {}));
/** @internal */
var MapMode;
(function (MapMode) {
	MapMode[(MapMode["Read"] = 1)] = "Read";
	MapMode[(MapMode["Write"] = 2)] = "Write";
})(MapMode || (MapMode = {}));
/** @internal */
var TextureDimension;
(function (TextureDimension) {
	TextureDimension["E1d"] = "1d";
	TextureDimension["E2d"] = "2d";
	TextureDimension["E3d"] = "3d";
})(TextureDimension || (TextureDimension = {}));
/** @internal */
var TextureUsage;
(function (TextureUsage) {
	TextureUsage[(TextureUsage["CopySrc"] = 1)] = "CopySrc";
	TextureUsage[(TextureUsage["CopyDst"] = 2)] = "CopyDst";
	TextureUsage[(TextureUsage["TextureBinding"] = 4)] = "TextureBinding";
	TextureUsage[(TextureUsage["StorageBinding"] = 8)] = "StorageBinding";
	TextureUsage[(TextureUsage["RenderAttachment"] = 16)] = "RenderAttachment";
})(TextureUsage || (TextureUsage = {}));
/** @internal */
var TextureViewDimension;
(function (TextureViewDimension) {
	TextureViewDimension["E1d"] = "1d";
	TextureViewDimension["E2d"] = "2d";
	TextureViewDimension["E2dArray"] = "2d-array";
	TextureViewDimension["Cube"] = "cube";
	TextureViewDimension["CubeArray"] = "cube-array";
	TextureViewDimension["E3d"] = "3d";
})(TextureViewDimension || (TextureViewDimension = {}));
/** @internal */
var TextureAspect;
(function (TextureAspect) {
	TextureAspect["All"] = "all";
	TextureAspect["StencilOnly"] = "stencil-only";
	TextureAspect["DepthOnly"] = "depth-only";
})(TextureAspect || (TextureAspect = {}));
/**
 * Comments taken from https://github.com/gfx-rs/wgpu/blob/master/wgpu-types/src/lib.rs
 * @internal
 */
var TextureFormat;
(function (TextureFormat) {
	// 8-bit formats
	TextureFormat["R8Unorm"] = "r8unorm";
	TextureFormat["R8Snorm"] = "r8snorm";
	TextureFormat["R8Uint"] = "r8uint";
	TextureFormat["R8Sint"] = "r8sint";
	// 16-bit formats
	TextureFormat["R16Uint"] = "r16uint";
	TextureFormat["R16Sint"] = "r16sint";
	TextureFormat["R16Float"] = "r16float";
	TextureFormat["RG8Unorm"] = "rg8unorm";
	TextureFormat["RG8Snorm"] = "rg8snorm";
	TextureFormat["RG8Uint"] = "rg8uint";
	TextureFormat["RG8Sint"] = "rg8sint";
	// 32-bit formats
	TextureFormat["R32Uint"] = "r32uint";
	TextureFormat["R32Sint"] = "r32sint";
	TextureFormat["R32Float"] = "r32float";
	TextureFormat["RG16Uint"] = "rg16uint";
	TextureFormat["RG16Sint"] = "rg16sint";
	TextureFormat["RG16Float"] = "rg16float";
	TextureFormat["RGBA8Unorm"] = "rgba8unorm";
	TextureFormat["RGBA8UnormSRGB"] = "rgba8unorm-srgb";
	TextureFormat["RGBA8Snorm"] = "rgba8snorm";
	TextureFormat["RGBA8Uint"] = "rgba8uint";
	TextureFormat["RGBA8Sint"] = "rgba8sint";
	TextureFormat["BGRA8Unorm"] = "bgra8unorm";
	TextureFormat["BGRA8UnormSRGB"] = "bgra8unorm-srgb";
	// Packed 32-bit formats
	TextureFormat["RGB9E5UFloat"] = "rgb9e5ufloat";
	TextureFormat["RGB10A2Unorm"] = "rgb10a2unorm";
	TextureFormat["RG11B10UFloat"] = "rg11b10ufloat";
	// 64-bit formats
	TextureFormat["RG32Uint"] = "rg32uint";
	TextureFormat["RG32Sint"] = "rg32sint";
	TextureFormat["RG32Float"] = "rg32float";
	TextureFormat["RGBA16Uint"] = "rgba16uint";
	TextureFormat["RGBA16Sint"] = "rgba16sint";
	TextureFormat["RGBA16Float"] = "rgba16float";
	// 128-bit formats
	TextureFormat["RGBA32Uint"] = "rgba32uint";
	TextureFormat["RGBA32Sint"] = "rgba32sint";
	TextureFormat["RGBA32Float"] = "rgba32float";
	// Depth and stencil formats
	TextureFormat["Stencil8"] = "stencil8";
	TextureFormat["Depth16Unorm"] = "depth16unorm";
	TextureFormat["Depth24Plus"] = "depth24plus";
	TextureFormat["Depth24PlusStencil8"] = "depth24plus-stencil8";
	TextureFormat["Depth32Float"] = "depth32float";
	// BC compressed formats usable if "texture-compression-bc" is both
	// supported by the device/user agent and enabled in requestDevice.
	TextureFormat["BC1RGBAUnorm"] = "bc1-rgba-unorm";
	TextureFormat["BC1RGBAUnormSRGB"] = "bc1-rgba-unorm-srgb";
	TextureFormat["BC2RGBAUnorm"] = "bc2-rgba-unorm";
	TextureFormat["BC2RGBAUnormSRGB"] = "bc2-rgba-unorm-srgb";
	TextureFormat["BC3RGBAUnorm"] = "bc3-rgba-unorm";
	TextureFormat["BC3RGBAUnormSRGB"] = "bc3-rgba-unorm-srgb";
	TextureFormat["BC4RUnorm"] = "bc4-r-unorm";
	TextureFormat["BC4RSnorm"] = "bc4-r-snorm";
	TextureFormat["BC5RGUnorm"] = "bc5-rg-unorm";
	TextureFormat["BC5RGSnorm"] = "bc5-rg-snorm";
	TextureFormat["BC6HRGBUFloat"] = "bc6h-rgb-ufloat";
	TextureFormat["BC6HRGBFloat"] = "bc6h-rgb-float";
	TextureFormat["BC7RGBAUnorm"] = "bc7-rgba-unorm";
	TextureFormat["BC7RGBAUnormSRGB"] = "bc7-rgba-unorm-srgb";
	// ETC2 compressed formats usable if "texture-compression-etc2" is both
	// supported by the device/user agent and enabled in requestDevice.
	TextureFormat["ETC2RGB8Unorm"] = "etc2-rgb8unorm";
	TextureFormat["ETC2RGB8UnormSRGB"] = "etc2-rgb8unorm-srgb";
	TextureFormat["ETC2RGB8A1Unorm"] = "etc2-rgb8a1unorm";
	TextureFormat["ETC2RGB8A1UnormSRGB"] = "etc2-rgb8a1unorm-srgb";
	TextureFormat["ETC2RGBA8Unorm"] = "etc2-rgba8unorm";
	TextureFormat["ETC2RGBA8UnormSRGB"] = "etc2-rgba8unorm-srgb";
	TextureFormat["EACR11Unorm"] = "eac-r11unorm";
	TextureFormat["EACR11Snorm"] = "eac-r11snorm";
	TextureFormat["EACRG11Unorm"] = "eac-rg11unorm";
	TextureFormat["EACRG11Snorm"] = "eac-rg11snorm";
	// ASTC compressed formats usable if "texture-compression-astc" is both
	// supported by the device/user agent and enabled in requestDevice.
	TextureFormat["ASTC4x4Unorm"] = "astc-4x4-unorm";
	TextureFormat["ASTC4x4UnormSRGB"] = "astc-4x4-unorm-srgb";
	TextureFormat["ASTC5x4Unorm"] = "astc-5x4-unorm";
	TextureFormat["ASTC5x4UnormSRGB"] = "astc-5x4-unorm-srgb";
	TextureFormat["ASTC5x5Unorm"] = "astc-5x5-unorm";
	TextureFormat["ASTC5x5UnormSRGB"] = "astc-5x5-unorm-srgb";
	TextureFormat["ASTC6x5Unorm"] = "astc-6x5-unorm";
	TextureFormat["ASTC6x5UnormSRGB"] = "astc-6x5-unorm-srgb";
	TextureFormat["ASTC6x6Unorm"] = "astc-6x6-unorm";
	TextureFormat["ASTC6x6UnormSRGB"] = "astc-6x6-unorm-srgb";
	TextureFormat["ASTC8x5Unorm"] = "astc-8x5-unorm";
	TextureFormat["ASTC8x5UnormSRGB"] = "astc-8x5-unorm-srgb";
	TextureFormat["ASTC8x6Unorm"] = "astc-8x6-unorm";
	TextureFormat["ASTC8x6UnormSRGB"] = "astc-8x6-unorm-srgb";
	TextureFormat["ASTC8x8Unorm"] = "astc-8x8-unorm";
	TextureFormat["ASTC8x8UnormSRGB"] = "astc-8x8-unorm-srgb";
	TextureFormat["ASTC10x5Unorm"] = "astc-10x5-unorm";
	TextureFormat["ASTC10x5UnormSRGB"] = "astc-10x5-unorm-srgb";
	TextureFormat["ASTC10x6Unorm"] = "astc-10x6-unorm";
	TextureFormat["ASTC10x6UnormSRGB"] = "astc-10x6-unorm-srgb";
	TextureFormat["ASTC10x8Unorm"] = "astc-10x8-unorm";
	TextureFormat["ASTC10x8UnormSRGB"] = "astc-10x8-unorm-srgb";
	TextureFormat["ASTC10x10Unorm"] = "astc-10x10-unorm";
	TextureFormat["ASTC10x10UnormSRGB"] = "astc-10x10-unorm-srgb";
	TextureFormat["ASTC12x10Unorm"] = "astc-12x10-unorm";
	TextureFormat["ASTC12x10UnormSRGB"] = "astc-12x10-unorm-srgb";
	TextureFormat["ASTC12x12Unorm"] = "astc-12x12-unorm";
	TextureFormat["ASTC12x12UnormSRGB"] = "astc-12x12-unorm-srgb";
	// "depth24unorm-stencil8" feature
	TextureFormat["Depth24UnormStencil8"] = "depth24unorm-stencil8";
	// "depth32float-stencil8" feature
	TextureFormat["Depth32FloatStencil8"] = "depth32float-stencil8";
})(TextureFormat || (TextureFormat = {}));
/** @internal */
var AddressMode;
(function (AddressMode) {
	AddressMode["ClampToEdge"] = "clamp-to-edge";
	AddressMode["Repeat"] = "repeat";
	AddressMode["MirrorRepeat"] = "mirror-repeat";
})(AddressMode || (AddressMode = {}));
/** @internal */
var FilterMode;
(function (FilterMode) {
	FilterMode["Nearest"] = "nearest";
	FilterMode["Linear"] = "linear";
})(FilterMode || (FilterMode = {}));
/** @internal */
var CompareFunction;
(function (CompareFunction) {
	CompareFunction["Never"] = "never";
	CompareFunction["Less"] = "less";
	CompareFunction["Equal"] = "equal";
	CompareFunction["LessEqual"] = "less-equal";
	CompareFunction["Greater"] = "greater";
	CompareFunction["NotEqual"] = "not-equal";
	CompareFunction["GreaterEqual"] = "greater-equal";
	CompareFunction["Always"] = "always";
})(CompareFunction || (CompareFunction = {}));
/** @internal */
var ShaderStage;
(function (ShaderStage) {
	ShaderStage[(ShaderStage["Vertex"] = 1)] = "Vertex";
	ShaderStage[(ShaderStage["Fragment"] = 2)] = "Fragment";
	ShaderStage[(ShaderStage["Compute"] = 4)] = "Compute";
})(ShaderStage || (ShaderStage = {}));
/** @internal */
var BufferBindingType;
(function (BufferBindingType) {
	BufferBindingType["Uniform"] = "uniform";
	BufferBindingType["Storage"] = "storage";
	BufferBindingType["ReadOnlyStorage"] = "read-only-storage";
})(BufferBindingType || (BufferBindingType = {}));
/** @internal */
var SamplerBindingType;
(function (SamplerBindingType) {
	SamplerBindingType["Filtering"] = "filtering";
	SamplerBindingType["NonFiltering"] = "non-filtering";
	SamplerBindingType["Comparison"] = "comparison";
})(SamplerBindingType || (SamplerBindingType = {}));
/** @internal */
var TextureSampleType;
(function (TextureSampleType) {
	TextureSampleType["Float"] = "float";
	TextureSampleType["UnfilterableFloat"] = "unfilterable-float";
	TextureSampleType["Depth"] = "depth";
	TextureSampleType["Sint"] = "sint";
	TextureSampleType["Uint"] = "uint";
})(TextureSampleType || (TextureSampleType = {}));
/** @internal */
var StorageTextureAccess;
(function (StorageTextureAccess) {
	StorageTextureAccess["WriteOnly"] = "write-only";
})(StorageTextureAccess || (StorageTextureAccess = {}));
/** @internal */
var CompilationMessageType;
(function (CompilationMessageType) {
	CompilationMessageType["Error"] = "error";
	CompilationMessageType["Warning"] = "warning";
	CompilationMessageType["Info"] = "info";
})(CompilationMessageType || (CompilationMessageType = {}));
/** @internal */
var AutoLayoutMode;
(function (AutoLayoutMode) {
	AutoLayoutMode["Auto"] = "auto";
})(AutoLayoutMode || (AutoLayoutMode = {}));
/** @internal */
var PrimitiveTopology;
(function (PrimitiveTopology) {
	PrimitiveTopology["PointList"] = "point-list";
	PrimitiveTopology["LineList"] = "line-list";
	PrimitiveTopology["LineStrip"] = "line-strip";
	PrimitiveTopology["TriangleList"] = "triangle-list";
	PrimitiveTopology["TriangleStrip"] = "triangle-strip";
})(PrimitiveTopology || (PrimitiveTopology = {}));
/** @internal */
var FrontFace;
(function (FrontFace) {
	FrontFace["CCW"] = "ccw";
	FrontFace["CW"] = "cw";
})(FrontFace || (FrontFace = {}));
/** @internal */
var CullMode;
(function (CullMode) {
	CullMode["None"] = "none";
	CullMode["Front"] = "front";
	CullMode["Back"] = "back";
})(CullMode || (CullMode = {}));
/** @internal */
var ColorWriteFlags;
(function (ColorWriteFlags) {
	ColorWriteFlags[(ColorWriteFlags["Red"] = 1)] = "Red";
	ColorWriteFlags[(ColorWriteFlags["Green"] = 2)] = "Green";
	ColorWriteFlags[(ColorWriteFlags["Blue"] = 4)] = "Blue";
	ColorWriteFlags[(ColorWriteFlags["Alpha"] = 8)] = "Alpha";
	ColorWriteFlags[(ColorWriteFlags["All"] = 15)] = "All";
})(ColorWriteFlags || (ColorWriteFlags = {}));
/** @internal */
var BlendFactor;
(function (BlendFactor) {
	BlendFactor["Zero"] = "zero";
	BlendFactor["One"] = "one";
	BlendFactor["Src"] = "src";
	BlendFactor["OneMinusSrc"] = "one-minus-src";
	BlendFactor["SrcAlpha"] = "src-alpha";
	BlendFactor["OneMinusSrcAlpha"] = "one-minus-src-alpha";
	BlendFactor["Dst"] = "dst";
	BlendFactor["OneMinusDst"] = "one-minus-dst";
	BlendFactor["DstAlpha"] = "dst-alpha";
	BlendFactor["OneMinusDstAlpha"] = "one-minus-dst-alpha";
	BlendFactor["SrcAlphaSaturated"] = "src-alpha-saturated";
	BlendFactor["Constant"] = "constant";
	BlendFactor["OneMinusConstant"] = "one-minus-constant";
})(BlendFactor || (BlendFactor = {}));
/** @internal */
var BlendOperation;
(function (BlendOperation) {
	BlendOperation["Add"] = "add";
	BlendOperation["Subtract"] = "subtract";
	BlendOperation["ReverseSubtract"] = "reverse-subtract";
	BlendOperation["Min"] = "min";
	BlendOperation["Max"] = "max";
})(BlendOperation || (BlendOperation = {}));
/** @internal */
var StencilOperation;
(function (StencilOperation) {
	StencilOperation["Keep"] = "keep";
	StencilOperation["Zero"] = "zero";
	StencilOperation["Replace"] = "replace";
	StencilOperation["Invert"] = "invert";
	StencilOperation["IncrementClamp"] = "increment-clamp";
	StencilOperation["DecrementClamp"] = "decrement-clamp";
	StencilOperation["IncrementWrap"] = "increment-wrap";
	StencilOperation["DecrementWrap"] = "decrement-wrap";
})(StencilOperation || (StencilOperation = {}));
/** @internal */
var IndexFormat;
(function (IndexFormat) {
	IndexFormat["Uint16"] = "uint16";
	IndexFormat["Uint32"] = "uint32";
})(IndexFormat || (IndexFormat = {}));
/** @internal */
var VertexFormat;
(function (VertexFormat) {
	VertexFormat["Uint8x2"] = "uint8x2";
	VertexFormat["Uint8x4"] = "uint8x4";
	VertexFormat["Sint8x2"] = "sint8x2";
	VertexFormat["Sint8x4"] = "sint8x4";
	VertexFormat["Unorm8x2"] = "unorm8x2";
	VertexFormat["Unorm8x4"] = "unorm8x4";
	VertexFormat["Snorm8x2"] = "snorm8x2";
	VertexFormat["Snorm8x4"] = "snorm8x4";
	VertexFormat["Uint16x2"] = "uint16x2";
	VertexFormat["Uint16x4"] = "uint16x4";
	VertexFormat["Sint16x2"] = "sint16x2";
	VertexFormat["Sint16x4"] = "sint16x4";
	VertexFormat["Unorm16x2"] = "unorm16x2";
	VertexFormat["Unorm16x4"] = "unorm16x4";
	VertexFormat["Snorm16x2"] = "snorm16x2";
	VertexFormat["Snorm16x4"] = "snorm16x4";
	VertexFormat["Float16x2"] = "float16x2";
	VertexFormat["Float16x4"] = "float16x4";
	VertexFormat["Float32"] = "float32";
	VertexFormat["Float32x2"] = "float32x2";
	VertexFormat["Float32x3"] = "float32x3";
	VertexFormat["Float32x4"] = "float32x4";
	VertexFormat["Uint32"] = "uint32";
	VertexFormat["Uint32x2"] = "uint32x2";
	VertexFormat["Uint32x3"] = "uint32x3";
	VertexFormat["Uint32x4"] = "uint32x4";
	VertexFormat["Sint32"] = "sint32";
	VertexFormat["Sint32x2"] = "sint32x2";
	VertexFormat["Sint32x3"] = "sint32x3";
	VertexFormat["Sint32x4"] = "sint32x4";
})(VertexFormat || (VertexFormat = {}));
/** @internal */
var InputStepMode;
(function (InputStepMode) {
	InputStepMode["Vertex"] = "vertex";
	InputStepMode["Instance"] = "instance";
})(InputStepMode || (InputStepMode = {}));
/** @internal */
var ComputePassTimestampLocation;
(function (ComputePassTimestampLocation) {
	ComputePassTimestampLocation["Beginning"] = "beginning";
	ComputePassTimestampLocation["End"] = "end";
})(ComputePassTimestampLocation || (ComputePassTimestampLocation = {}));
/** @internal */
var RenderPassTimestampLocation;
(function (RenderPassTimestampLocation) {
	RenderPassTimestampLocation["Beginning"] = "beginning";
	RenderPassTimestampLocation["End"] = "end";
})(RenderPassTimestampLocation || (RenderPassTimestampLocation = {}));
/** @internal */
var LoadOp;
(function (LoadOp) {
	LoadOp["Load"] = "load";
	LoadOp["Clear"] = "clear";
})(LoadOp || (LoadOp = {}));
/** @internal */
var StoreOp;
(function (StoreOp) {
	StoreOp["Store"] = "store";
	StoreOp["Discard"] = "discard";
})(StoreOp || (StoreOp = {}));
/** @internal */
var QueryType;
(function (QueryType) {
	QueryType["Occlusion"] = "occlusion";
	QueryType["Timestamp"] = "timestamp";
})(QueryType || (QueryType = {}));
/** @internal */
var CanvasAlphaMode;
(function (CanvasAlphaMode) {
	CanvasAlphaMode["Opaque"] = "opaque";
	CanvasAlphaMode["Premultiplied"] = "premultiplied";
})(CanvasAlphaMode || (CanvasAlphaMode = {}));
/** @internal */
var DeviceLostReason;
(function (DeviceLostReason) {
	DeviceLostReason["Destroyed"] = "destroyed";
})(DeviceLostReason || (DeviceLostReason = {}));
/** @internal */
var ErrorFilter;
(function (ErrorFilter) {
	ErrorFilter["OutOfMemory"] = "out-of-memory";
	ErrorFilter["Validation"] = "validation";
})(ErrorFilter || (ErrorFilter = {}));
var GPUColorWrite;
(function (GPUColorWrite) {
	GPUColorWrite[(GPUColorWrite["Red"] = 1)] = "Red";
	GPUColorWrite[(GPUColorWrite["Green"] = 2)] = "Green";
	GPUColorWrite[(GPUColorWrite["Blue"] = 4)] = "Blue";
	GPUColorWrite[(GPUColorWrite["Alpha"] = 8)] = "Alpha";
	GPUColorWrite[(GPUColorWrite["All"] = 15)] = "All";
})(GPUColorWrite || (GPUColorWrite = {}));
var CommandSubType;
(function (CommandSubType) {
	CommandSubType["Shadow"] = "shadow";
	CommandSubType["Pick"] = "pick";
})(CommandSubType || (CommandSubType = {}));
var Intersect;
(function (Intersect) {
	Intersect[(Intersect["OUTSIDE"] = -1)] = "OUTSIDE";
	Intersect[(Intersect["INTERSECTING"] = 0)] = "INTERSECTING";
	Intersect[(Intersect["INSIDE"] = 1)] = "INSIDE";
})(Intersect || (Intersect = {}));

class Buffer {
	constructor(label, device, usage, data, size) {
		this.device = device;
		this.usage = usage;
		this.data = data;
		this.size = size != undefined ? (size + 3) & ~3 : (data.byteLength + 3) & ~3; // 4 bytes alignments (because of the upload which requires this)
		this.gpuBuffer = device.createBuffer({
			label: label || "",
			size: this.size,
			usage
		});
		if (data) this.setSubData(0, data, this.size);
	}
	static create(label, device, usage, data, size) {
		return new Buffer(label, device, usage, data, size);
	}
	static createVertexBuffer(label, device, data) {
		return new Buffer(label, device, BufferUsage.Vertex | BufferUsage.CopyDst, data, data.byteLength);
	}
	static createIndexBuffer(label, device, data) {
		return new Buffer(label, device, BufferUsage.Index | BufferUsage.CopyDst, data);
	}
	static createUniformBuffer(label, device, size, usage) {
		return new Buffer(label, device, usage, null, size);
	}
	static getBufferType(usage) {
		switch (usage) {
			case BufferUsage.Uniform:
				break;
			case BufferUsage.Storage:
				break;
		}
	}
	// https://github.com/gpuweb/gpuweb/blob/main/design/BufferOperations.md
	setSubData(offset, data, size) {
		const srcArrayBuffer = data.buffer;
		const byteCount = size ?? srcArrayBuffer.byteLength;
		const srcBuffer = this.device.createBuffer({
			mappedAtCreation: true,
			size: byteCount,
			usage: GPUBufferUsage.COPY_SRC
		});
		const arrayBuffer = srcBuffer.getMappedRange();
		new Uint16Array(arrayBuffer).set(new Uint16Array(srcArrayBuffer)); // memcpy
		srcBuffer.unmap();
		this.copyToBuffer(srcBuffer, offset, byteCount);
		srcBuffer.destroy();
	}
	copyToBuffer(srcBuffer, offset, byteCount) {
		const commandEncoder = this.device.createCommandEncoder();
		commandEncoder.copyBufferToBuffer(srcBuffer, 0, this.gpuBuffer, offset, byteCount);
		this.device.queue.submit([commandEncoder.finish()]);
	}
	copyToTexture(bytesPerRow, rowsPerImage, destination, extent) {
		const commandEncoder = this.device.createCommandEncoder();
		commandEncoder.copyBufferToTexture(
			{
				buffer: this.gpuBuffer,
				bytesPerRow,
				rowsPerImage
			},
			destination,
			extent
		);
		this.device.queue.submit([commandEncoder.finish()]);
	}
	destroy() {
		this.gpuBuffer.destroy();
	}
}

class DrawCommand {
	constructor(options) {
		this.type = options.type;
		this.shaderData = options.shaderData;
		this.renderTarget = options.renderTarget;
		this.vertexBuffer = options.vertexBuffer;
		this.indexBuffer = options.indexBuffer;
		this.renderState = options.renderState;
		this.queryIndex = options.queryIndex;
		this.count = options.count;
		this.instances = options.instances;
		this.dispatch = options.dispatch;
		this.shaderSource = options.shaderSource;
		this.dirty = options.dirty;
		this.light = options.light;
		this.modelMatrix = options.modelMatrix;
	}
	shallowClone(material) {
		if (material) {
			return new DrawCommand({
				vertexBuffer: this.vertexBuffer,
				indexBuffer: this.indexBuffer,
				shaderData: material.shaderData,
				instances: this.instances,
				count: this.count,
				renderState: material.renderState,
				shaderSource: material.shaderSource,
				type: "render",
				light: material.light,
				modelMatrix: this.modelMatrix
			});
		}
	}
}

const GPUCanvasCompositingAlphaMode = {
	Opaque: "opaque",
	Premultiplied: "premultiplied"
};

class MipmapGenerator {
	constructor(device) {
		this.device = device;
		this.sampler = device.createSampler({ minFilter: "linear" });
		// We'll need a new pipeline for every texture format used.
		this.pipelines = {};
	}
	getMipmapPipeline(format) {
		let pipeline = this.pipelines[format];
		if (!pipeline) {
			// Shader modules is shared between all pipelines, so only create once.
			if (!this.mipmapShaderModule) {
				this.mipmapShaderModule = this.device.createShaderModule({
					code: `
              var<private> pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(
                vec2<f32>(-1.0, -1.0), vec2<f32>(-1.0, 3.0), vec2<f32>(3.0, -1.0));
              struct VertexOutput {
                @builtin(position) position : vec4<f32>,
                @location(0) texCoord : vec2<f32>,
              };
              @vertex
              fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {
                var output : VertexOutput;
                output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);
                output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);
                return output;
              }
              @group(0) @binding(0) var imgSampler : sampler;
              @group(0) @binding(1) var img : texture_2d<f32>;
              @fragment
              fn fragmentMain(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {
                return textureSample(img, imgSampler, texCoord);
              }
            `
				});
			}
			pipeline = this.device.createRenderPipeline({
				layout: "auto",
				vertex: {
					module: this.mipmapShaderModule,
					entryPoint: "vertexMain"
				},
				fragment: {
					module: this.mipmapShaderModule,
					entryPoint: "fragmentMain",
					targets: [{ format }]
				}
			});
			this.pipelines[format] = pipeline;
		}
		return pipeline;
	}
	/**
	 * Generates mipmaps for the given GPUTexture from the data in level 0.
	 *
	 * @param {module:External.GPUTexture} texture - Texture to generate mipmaps for.
	 * @param {object} textureDescriptor - GPUTextureDescriptor the texture was created with.
	 * @returns {module:External.GPUTexture} - The originally passed texture
	 */
	generateMipmap(sourceTexture) {
		const texture = sourceTexture.gpuTexture;
		const textureDescriptor = sourceTexture.textureProp;
		// TODO: Does this need to handle sRGB formats differently?
		const pipeline = this.getMipmapPipeline(textureDescriptor.format);
		if (textureDescriptor.dimension == "3d" || textureDescriptor.dimension == "1d") {
			throw new Error("Generating mipmaps for non-2d textures is currently unsupported!");
		}
		let mipTexture = texture;
		const arrayLayerCount = textureDescriptor.size.depth || 1; // Only valid for 2D textures.
		// If the texture was created with RENDER_ATTACHMENT usage we can render directly between mip levels.
		const renderToSource = textureDescriptor.usage & GPUTextureUsage.RENDER_ATTACHMENT;
		if (!renderToSource) {
			// Otherwise we have to use a separate texture to render into. It can be one mip level smaller than the source
			// texture, since we already have the top level.
			const mipTextureDescriptor = {
				size: {
					width: Math.ceil(textureDescriptor.size.width / 2),
					height: Math.ceil(textureDescriptor.size.height / 2),
					depthOrArrayLayers: arrayLayerCount
				},
				format: textureDescriptor.format,
				usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,
				mipLevelCount: textureDescriptor.mipLevelCount - 1
			};
			mipTexture = this.device.createTexture(mipTextureDescriptor);
		}
		const commandEncoder = this.device.createCommandEncoder({});
		// TODO: Consider making this static.
		const bindGroupLayout = pipeline.getBindGroupLayout(0);
		for (let arrayLayer = 0; arrayLayer < arrayLayerCount; ++arrayLayer) {
			let srcView = texture.createView({
				baseMipLevel: 0,
				mipLevelCount: 1,
				dimension: "2d",
				baseArrayLayer: arrayLayer,
				arrayLayerCount: 1
			});
			let dstMipLevel = renderToSource ? 1 : 0;
			for (let i = 1; i < textureDescriptor.mipLevelCount; ++i) {
				const dstView = mipTexture.createView({
					baseMipLevel: dstMipLevel++,
					mipLevelCount: 1,
					dimension: "2d",
					baseArrayLayer: arrayLayer,
					arrayLayerCount: 1
				});
				const passEncoder = commandEncoder.beginRenderPass({
					colorAttachments: [
						{
							view: dstView,
							loadOp: "clear",
							storeOp: "store"
						}
					]
				});
				const bindGroup = this.device.createBindGroup({
					layout: bindGroupLayout,
					entries: [
						{
							binding: 0,
							resource: this.sampler
						},
						{
							binding: 1,
							resource: srcView
						}
					]
				});
				passEncoder.setPipeline(pipeline);
				passEncoder.setBindGroup(0, bindGroup);
				passEncoder.draw(3, 1, 0, 0);
				passEncoder.end();
				srcView = dstView;
			}
		}
		// If we didn't render to the source texture, finish by copying the mip results from the temporary mipmap texture
		// to the source.
		if (!renderToSource) {
			const mipLevelSize = {
				width: Math.ceil(textureDescriptor.size.width / 2),
				height: Math.ceil(textureDescriptor.size.height / 2),
				depthOrArrayLayers: arrayLayerCount
			};
			for (let i = 1; i < textureDescriptor.mipLevelCount; ++i) {
				commandEncoder.copyTextureToTexture(
					{
						texture: mipTexture,
						mipLevel: i - 1
					},
					{
						texture: texture,
						mipLevel: i
					},
					mipLevelSize
				);
				mipLevelSize.width = Math.ceil(mipLevelSize.width / 2);
				mipLevelSize.height = Math.ceil(mipLevelSize.height / 2);
			}
		}
		this.device.queue.submit([commandEncoder.finish()]);
		if (!renderToSource) {
			mipTexture.destroy();
		}
		return texture;
	}
}

const pipelineLayoutCache = new Map();
class PipelineLayout {
	constructor(device, label, groupLayouts = [], index) {
		this.groupLayouts = groupLayouts;
		this.index = index || 0;
		this.gpuPipelineLayout = device.createPipelineLayout({
			label: label,
			bindGroupLayouts: groupLayouts.map((layout) => {
				return layout.gpuBindGroupLayout;
			})
		});
	}
	static getPipelineLayoutFromCache(device, label, groupLayouts) {
		if (pipelineLayoutCache.has(label)) {
			return pipelineLayoutCache.get(label);
		} else {
			const bindGroupLayout = new PipelineLayout(device, label, groupLayouts);
			pipelineLayoutCache.set(label, bindGroupLayout);
			return bindGroupLayout;
		}
	}
}

const renderPipelines = new Map();
const computePipelines = new Map();
class Pipeline {
	constructor(type, device, descriptor) {
		this.type = type;
		this.descriptor = descriptor;
		this.device = device;
		this.createPipeline();
	}
	createPipeline() {
		if (this.type == "render") {
			this.gpuPipeline = this.device.createRenderPipeline(this.descriptor);
		} else {
			this.gpuPipeline = this.device.createComputePipeline(this.descriptor);
		}
	}
	bind(passEncoder) {
		if (this.type == "render") {
			passEncoder.setPipeline(this.gpuPipeline);
		} else {
			passEncoder.setPipeline(this.gpuPipeline);
		}
	}
	static getRenderPipelineFromCache(device, drawComand, groupLayouts) {
		const { renderState, shaderSource } = drawComand;
		const rsStr = JSON.stringify(renderState);
		const combineStr = shaderSource.uid.concat(rsStr);
		const hashId = stringToHash(combineStr);
		const combineLayouts = groupLayouts.sort((layout1, layout2) => layout1.index - layout2.index);
		let pipeline = renderPipelines.get(hashId);
		if (!pipeline) {
			const descriptor = Pipeline.getPipelineDescriptor(
				device,
				drawComand,
				renderState,
				combineLayouts,
				hashId.toString()
			);
			pipeline = new Pipeline("render", device, descriptor);
			renderPipelines.set(hashId, pipeline);
		}
		return pipeline;
	}
	static getComputePipelineFromCache(device, drawComand, groupLayouts) {
		const { shaderSource } = drawComand;
		const hashId = stringToHash(shaderSource.uid);
		let pipeline = computePipelines.get(hashId);
		if (!pipeline) {
			const { shaderSource } = drawComand;
			pipeline = device.createComputePipeline({
				layout: PipelineLayout.getPipelineLayoutFromCache(device, hashId.toString(), groupLayouts)
					.gpuPipelineLayout,
				compute: {
					module: shaderSource.createShaderModule(device),
					entryPoint: shaderSource.computeMain
				}
			});
			computePipelines.set(hashId, pipeline);
		}
		return pipeline;
	}
	static getPipelineDescriptor(device, drawComand, renderState, groupLayouts, hashId) {
		const { vertexBuffer, shaderSource } = drawComand;
		const { vert, frag } = shaderSource.createShaderModule(device);
		const pipelineDec = {
			layout: PipelineLayout.getPipelineLayoutFromCache(device, hashId, groupLayouts).gpuPipelineLayout
		};
		if (vert)
			pipelineDec.vertex = {
				module: vert,
				entryPoint: shaderSource.vertEntryPoint,
				buffers: vertexBuffer.getBufferDes()
			};
		if (renderState.primitive) pipelineDec.primitive = renderState.primitive.getGPUPrimitiveDec();
		if (renderState.depthStencil) pipelineDec.depthStencil = renderState.depthStencil.getGPUDepthStencilDec();
		if (renderState.multisample) pipelineDec.multisample = renderState.multisample.getMultiSampleDec();
		if (frag)
			pipelineDec.fragment = {
				module: frag,
				entryPoint: shaderSource.fragEntryPoint,
				targets: renderState.targets.map((target) => {
					return target.getGPUTargetDec();
				})
			};
		return pipelineDec;
	}
}
// Borrowed from https://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
function stringToHash(str) {
	let hash = 0;
	if (str.length == 0) return hash;
	for (let i = 0; i < str.length; i++) {
		const char = str.charCodeAt(i);
		hash = (hash << 5) - hash + char;
		hash = hash & hash; // Convert to 32bit integer
	}
	return hash;
}

function defined(value) {
	return value !== undefined && value !== null;
}

/*
  https://github.com/banksean wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace
  so it's better encapsulated. Now you can have multiple random number generators
  and they won't stomp all over eachother's state.

  If you want to use this as a substitute for Math.random(), use the random()
  method like so:

  var m = new MersenneTwister();
  var randomNumber = m.random();

  You can also call the other genrand_{foo}() methods on the instance.

  If you want to use a specific seed in order to get a repeatable random
  sequence, pass an integer into the constructor:

  var m = new MersenneTwister(123);

  and that will always produce the same random sequence.

  Sean McCullough (banksean@gmail.com)
*/

/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_seed(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

var MersenneTwister = function (seed) {
	if (seed == undefined) {
		seed = new Date().getTime();
	}

	/* Period parameters */
	this.N = 624;
	this.M = 397;
	this.MATRIX_A = 0x9908b0df; /* constant vector a */
	this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
	this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

	this.mt = new Array(this.N); /* the array for the state vector */
	this.mti = this.N + 1; /* mti==N+1 means mt[N] is not initialized */

	if (seed.constructor == Array) {
		this.init_by_array(seed, seed.length);
	} else {
		this.init_seed(seed);
	}
};

/* initializes mt[N] with a seed */
/* origin name init_genrand */
MersenneTwister.prototype.init_seed = function (s) {
	this.mt[0] = s >>> 0;
	for (this.mti = 1; this.mti < this.N; this.mti++) {
		var s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);
		this.mt[this.mti] = ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + this.mti;
		/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
		/* In the previous versions, MSBs of the seed affect   */
		/* only MSBs of the array mt[].                        */
		/* 2002/01/09 modified by Makoto Matsumoto             */
		this.mt[this.mti] >>>= 0;
		/* for >32 bit machines */
	}
};

/* initialize by an array with array-length */
/* init_key is the array for initializing keys */
/* key_length is its length */
/* slight change for C++, 2004/2/26 */
MersenneTwister.prototype.init_by_array = function (init_key, key_length) {
	var i, j, k;
	this.init_seed(19650218);
	i = 1;
	j = 0;
	k = this.N > key_length ? this.N : key_length;
	for (; k; k--) {
		var s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
		this.mt[i] =
			(this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + (s & 0x0000ffff) * 1664525)) +
			init_key[j] +
			j; /* non linear */
		this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		i++;
		j++;
		if (i >= this.N) {
			this.mt[0] = this.mt[this.N - 1];
			i = 1;
		}
		if (j >= key_length) j = 0;
	}
	for (k = this.N - 1; k; k--) {
		var s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
		this.mt[i] =
			(this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) -
			i; /* non linear */
		this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		i++;
		if (i >= this.N) {
			this.mt[0] = this.mt[this.N - 1];
			i = 1;
		}
	}

	this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
};

/* generates a random number on [0,0xffffffff]-interval */
/* origin name genrand_int32 */
MersenneTwister.prototype.random_int = function () {
	var y;
	var mag01 = new Array(0x0, this.MATRIX_A);
	/* mag01[x] = x * MATRIX_A  for x=0,1 */

	if (this.mti >= this.N) {
		/* generate N words at one time */
		var kk;

		if (this.mti == this.N + 1)
			/* if init_seed() has not been called, */
			this.init_seed(5489); /* a default initial seed is used */

		for (kk = 0; kk < this.N - this.M; kk++) {
			y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);
			this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
		}
		for (; kk < this.N - 1; kk++) {
			y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);
			this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
		}
		y = (this.mt[this.N - 1] & this.UPPER_MASK) | (this.mt[0] & this.LOWER_MASK);
		this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];

		this.mti = 0;
	}

	y = this.mt[this.mti++];

	/* Tempering */
	y ^= y >>> 11;
	y ^= (y << 7) & 0x9d2c5680;
	y ^= (y << 15) & 0xefc60000;
	y ^= y >>> 18;

	return y >>> 0;
};

/* generates a random number on [0,0x7fffffff]-interval */
/* origin name genrand_int31 */
MersenneTwister.prototype.random_int31 = function () {
	return this.random_int() >>> 1;
};

/* generates a random number on [0,1]-real-interval */
/* origin name genrand_real1 */
MersenneTwister.prototype.random_incl = function () {
	return this.random_int() * (1.0 / 4294967295.0);
	/* divided by 2^32-1 */
};

/* generates a random number on [0,1)-real-interval */
MersenneTwister.prototype.random = function () {
	return this.random_int() * (1.0 / 4294967296.0);
	/* divided by 2^32 */
};

/* generates a random number on (0,1)-real-interval */
/* origin name genrand_real3 */
MersenneTwister.prototype.random_excl = function () {
	return (this.random_int() + 0.5) * (1.0 / 4294967296.0);
	/* divided by 2^32 */
};

/* generates a random number on [0,1) with 53-bit resolution*/
/* origin name genrand_res53 */
MersenneTwister.prototype.random_long = function () {
	var a = this.random_int() >>> 5,
		b = this.random_int() >>> 6;
	return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
};

/* These real versions are due to Isaku Wada, 2002/01/09 added */

var mersenneTwister = MersenneTwister;

function defaultValue(a, b) {
	if (a !== undefined && a !== null) {
		return a;
	}
	return b;
}
/**
 * A frozen empty object that can be used as the default value for options passed as
 * an object literal.
 * @type {Object}
 * @memberof defaultValue
 */
defaultValue.EMPTY_OBJECT = Object.freeze({});

class GMath {
	static signNotZero(value) {
		return value < 0.0 ? -1.0 : 1.0;
	}
	static toSNorm(value, rangeMaximum) {
		rangeMaximum = defaultValue(rangeMaximum, 255);
		return Math.round((GMath.clamp(value, -1.0, 1.0) * 0.5 + 0.5) * rangeMaximum);
	}
	static fromSNorm(value, rangeMaximum) {
		rangeMaximum = defaultValue(rangeMaximum, 255);
		return (GMath.clamp(value, 0.0, rangeMaximum) / rangeMaximum) * 2.0 - 1.0;
	}
	static normalize(value, rangeMinimum, rangeMaximum) {
		rangeMaximum = Math.max(rangeMaximum - rangeMinimum, 0.0);
		return rangeMaximum === 0.0 ? 0.0 : GMath.clamp((value - rangeMinimum) / rangeMaximum, 0.0, 1.0);
	}
	static lerp(p, q, time) {
		return (1.0 - time) * p + time * q;
	}
	static toRadians(degrees) {
		if (!defined(degrees)) {
			throw new Error("degrees is required.");
		}
		return degrees * GMath.RADIANS_PER_DEGREE;
	}
	static toDegrees(radians) {
		if (!defined(radians)) {
			throw new Error("radians is required.");
		}
		return radians * GMath.DEGREES_PER_RADIAN;
	}
	static negativePiToPi(angle) {
		if (!defined(angle)) {
			throw new Error("angle is required.");
		}
		if (angle >= -GMath.PI && angle <= GMath.PI) {
			// Early exit if the input is already inside the range. This avoids
			// unnecessary math which could introduce floating point error.
			return angle;
		}
		return GMath.zeroToTwoPi(angle + GMath.PI) - GMath.PI;
	}
	static zeroToTwoPi(angle) {
		if (!defined(angle)) {
			throw new Error("angle is required.");
		}
		if (angle >= 0 && angle <= GMath.TWO_PI) {
			// Early exit if the input is already inside the range. This avoids
			// unnecessary math which could introduce floating point error.
			return angle;
		}
		const mod = GMath.mod(angle, GMath.TWO_PI);
		if (Math.abs(mod) < GMath.EPSILON14 && Math.abs(angle) > GMath.EPSILON14) {
			return GMath.TWO_PI;
		}
		return mod;
	}
	static mod(m, n) {
		if (!defined(m)) {
			throw new Error("m is required.");
		}
		if (!defined(n)) {
			throw new Error("n is required.");
		}
		if (n === 0.0) {
			throw new Error("divisor cannot be 0.");
		}
		if (GMath.sign(m) === GMath.sign(n) && Math.abs(m) < Math.abs(n)) {
			// Early exit if the input does not need to be modded. This avoids
			// unnecessary math which could introduce floating point error.
			return m;
		}
		return ((m % n) + n) % n;
	}
	static equalsEpsilon(left, right, relativeEpsilon, absoluteEpsilon = relativeEpsilon) {
		if (!defined(left)) {
			throw new Error("left is required.");
		}
		if (!defined(right)) {
			throw new Error("right is required.");
		}
		relativeEpsilon = defaultValue(relativeEpsilon, 0.0);
		absoluteEpsilon = defaultValue(absoluteEpsilon, relativeEpsilon);
		const absDiff = Math.abs(left - right);
		return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));
	}
	static lessThan(left, right, absoluteEpsilon = 0) {
		if (!defined(left)) {
			throw new Error("first is required.");
		}
		if (!defined(right)) {
			throw new Error("second is required.");
		}
		if (!defined(absoluteEpsilon)) {
			throw new Error("absoluteEpsilon is required.");
		}
		return left - right < -absoluteEpsilon;
	}
	static lessThanOrEquals(left, right, absoluteEpsilon = 0) {
		if (!defined(left)) {
			throw new Error("first is required.");
		}
		if (!defined(right)) {
			throw new Error("second is required.");
		}
		if (!defined(absoluteEpsilon)) {
			throw new Error("absoluteEpsilon is required.");
		}
		return left - right < absoluteEpsilon;
	}
	static greaterThan(left, right, absoluteEpsilon = 0) {
		if (!defined(left)) {
			throw new Error("first is required.");
		}
		if (!defined(right)) {
			throw new Error("second is required.");
		}
		if (!defined(absoluteEpsilon)) {
			throw new Error("absoluteEpsilon is required.");
		}
		return left - right > absoluteEpsilon;
	}
	static greaterThanOrEquals(left, right, absoluteEpsilon = 0) {
		if (!defined(left)) {
			throw new Error("first is required.");
		}
		if (!defined(right)) {
			throw new Error("second is required.");
		}
		if (!defined(absoluteEpsilon)) {
			throw new Error("absoluteEpsilon is required.");
		}
		return left - right > -absoluteEpsilon;
	}
	static isPowerOfTwo(n) {
		//>>includeStart('debug', pragmas.debug);
		if (typeof n !== "number" || n < 0 || n > 4294967295) {
			throw new Error("A number between 0 and (2^32)-1 is required.");
		}
		//>>includeEnd('debug');
		return n !== 0 && (n & (n - 1)) === 0;
	}
	static nextPowerOfTwo(n) {
		if (typeof n !== "number" || n < 0 || n > 2147483648) {
			throw new Error("A number between 0 and 2^31 is required.");
		}
		// From http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2
		--n;
		n |= n >> 1;
		n |= n >> 2;
		n |= n >> 4;
		n |= n >> 8;
		n |= n >> 16;
		++n;
		return n;
	}
	static previousPowerOfTwo(n) {
		if (typeof n !== "number" || n < 0 || n > 4294967295) {
			throw new Error("A number between 0 and (2^32)-1 is required.");
		}
		n |= n >> 1;
		n |= n >> 2;
		n |= n >> 4;
		n |= n >> 8;
		n |= n >> 16;
		n |= n >> 32;
		// The previous bitwise operations implicitly convert to signed 32-bit. Use `>>>` to convert to unsigned
		n = (n >>> 0) - (n >>> 1);
		return n;
	}
	static clamp(value, min, max) {
		return value < min ? min : value > max ? max : value;
	}
	/**
	 * @private
	 */
	static fog(distanceToCamera, density) {
		const scalar = distanceToCamera * density;
		return 1.0 - Math.exp(-(scalar * scalar));
	}
}
GMath.EPSILON1 = 0.1;
GMath.EPSILON2 = 0.01;
GMath.EPSILON3 = 0.001;
GMath.EPSILON4 = 0.0001;
GMath.EPSILON5 = 0.00001;
GMath.EPSILON6 = 0.000001;
GMath.EPSILON7 = 0.0000001;
GMath.EPSILON8 = 0.00000001;
GMath.EPSILON9 = 0.000000001;
GMath.EPSILON10 = 0.0000000001;
GMath.EPSILON11 = 0.00000000001;
GMath.EPSILON12 = 0.000000000001;
GMath.EPSILON13 = 0.0000000000001;
GMath.EPSILON14 = 0.00000000000001;
GMath.EPSILON15 = 0.000000000000001;
GMath.EPSILON16 = 0.0000000000000001;
GMath.EPSILON17 = 0.00000000000000001;
GMath.EPSILON18 = 0.000000000000000001;
GMath.EPSILON19 = 0.0000000000000000001;
GMath.EPSILON20 = 0.00000000000000000001;
GMath.EPSILON21 = 0.000000000000000000001;
GMath.GRAVITATIONALPARAMETER = 3.986004418e14;
GMath.SIXTY_FOUR_KILOBYTES = 64 * 1024;
GMath.FOUR_GIGABYTES = 4 * 1024 * 1024 * 1024;
// eslint-disable-next-line es/no-math-sign
GMath.sign = defaultValue(Math.sign, function sign(value) {
	value = +value; // coerce to number
	if (value === 0 || value !== value) {
		// zero or NaN
		return value;
	}
	return value > 0 ? 1 : -1;
});
// eslint-disable-next-line es/no-math-sinh
GMath.sinh = defaultValue(Math.sinh, function sinh(value) {
	return (Math.exp(value) - Math.exp(-value)) / 2.0;
});
// eslint-disable-next-line es/no-math-cosh
GMath.cosh = defaultValue(Math.cosh, function cosh(value) {
	return (Math.exp(value) + Math.exp(-value)) / 2.0;
});
GMath.PI = Math.PI;
GMath.ONE_OVER_PI = 1.0 / Math.PI;
GMath.PI_OVER_TWO = Math.PI / 2.0;
GMath.PI_OVER_THREE = Math.PI / 3.0;
GMath.PI_OVER_FOUR = Math.PI / 4.0;
GMath.PI_OVER_SIX = Math.PI / 6.0;
GMath.THREE_PI_OVER_TWO = (3.0 * Math.PI) / 2.0;
GMath.TWO_PI = 2.0 * Math.PI;
GMath.ONE_OVER_TWO_PI = 1.0 / (2.0 * Math.PI);
GMath.RADIANS_PER_DEGREE = Math.PI / 180.0;
GMath.DEGREES_PER_RADIAN = 180.0 / Math.PI;
GMath.RADIANS_PER_ARCSECOND = GMath.RADIANS_PER_DEGREE / 3600.0;
GMath.nextRandomNumber = function () {
	return randomNumberGenerator.random();
};
GMath.randomBetween = function (min, max) {
	return GMath.nextRandomNumber() * (max - min) + min;
};
GMath.acosClamped = function (value) {
	if (!defined(value)) {
		throw new Error("value is required.");
	}
	return Math.acos(GMath.clamp(value, -1.0, 1.0));
};
GMath.asinClamped = function (value) {
	if (!defined(value)) {
		throw new Error("value is required.");
	}
	return Math.asin(GMath.clamp(value, -1.0, 1.0));
};
GMath.chordLength = function (angle, radius) {
	if (!defined(angle)) {
		throw new Error("angle is required.");
	}
	if (!defined(radius)) {
		throw new Error("radius is required.");
	}
	return 2.0 * radius * Math.sin(angle * 0.5);
};
GMath.logBase = function (number, base) {
	if (!defined(number)) {
		throw new Error("number is required.");
	}
	if (!defined(base)) {
		throw new Error("base is required.");
	}
	return Math.log(number) / Math.log(base);
};
// eslint-disable-next-line es/no-math-cbrt
GMath.cbrt = defaultValue(Math.cbrt, function cbrt(number) {
	const result = Math.pow(Math.abs(number), 1.0 / 3.0);
	return number < 0.0 ? -result : result;
});
// eslint-disable-next-line es/no-math-log2
GMath.log2 = defaultValue(Math.log2, function log2(number) {
	return Math.log(number) * Math.LOG2E;
});
let randomNumberGenerator = new mersenneTwister();

class Vector4 {
	constructor(x = 0, y = 0, z = 0, w = 0) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	set(x, y, z, w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	toArray() {
		return [this.x, this.y, this.z, this.w];
	}
	clone(result) {
		return Vector4.clone(this, result);
	}
	equals(right) {
		return Vector4.equals(this, right);
	}
	equalsEpsilon(right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return Vector4.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);
	}
	toString() {
		return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;
	}
	fromBufferAttribute(attribute, index) {
		this.x = attribute.getX(index);
		this.y = attribute.getY(index);
		this.z = attribute.getZ(index);
		this.w = attribute.getW(index);
		return this;
	}
	static fromElements(x, y, z, w, result) {
		if (!defined(result)) {
			return new Vector4(x, y, z, w);
		}
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static clone(cartesian, result) {
		if (!defined(cartesian)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Vector4(cartesian.x, cartesian.y, cartesian.z, cartesian.w);
		}
		result.x = cartesian.x;
		result.y = cartesian.y;
		result.z = cartesian.z;
		result.w = cartesian.w;
		return result;
	}
	static maximumComponent(cartesian) {
		return Math.max(cartesian.x, cartesian.y, cartesian.z, cartesian.w);
	}
	static minimumComponent(cartesian) {
		return Math.min(cartesian.x, cartesian.y, cartesian.z, cartesian.w);
	}
	static minimumByComponent(first, second, result) {
		result.x = Math.min(first.x, second.x);
		result.y = Math.min(first.y, second.y);
		result.z = Math.min(first.z, second.z);
		result.w = Math.min(first.w, second.w);
		return result;
	}
	static maximumByComponent(first, second, result) {
		result.x = Math.max(first.x, second.x);
		result.y = Math.max(first.y, second.y);
		result.z = Math.max(first.z, second.z);
		result.w = Math.max(first.w, second.w);
		return result;
	}
	static clamp(value, min, max, result) {
		const x = GMath.clamp(value.x, min.x, max.x);
		const y = GMath.clamp(value.y, min.y, max.y);
		const z = GMath.clamp(value.z, min.z, max.z);
		const w = GMath.clamp(value.w, min.w, max.w);
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static magnitudeSquared(cartesian) {
		return (
			cartesian.x * cartesian.x +
			cartesian.y * cartesian.y +
			cartesian.z * cartesian.z +
			cartesian.w * cartesian.w
		);
	}
	static magnitude(cartesian) {
		return Math.sqrt(Vector4.magnitudeSquared(cartesian));
	}
	static distance(left, right) {
		Vector4.subtract(left, right, distanceScratch$2);
		return Vector4.magnitude(distanceScratch$2);
	}
	static distanceSquared(left, right) {
		Vector4.subtract(left, right, distanceScratch$2);
		return Vector4.magnitudeSquared(distanceScratch$2);
	}
	static normalize(cartesian, result) {
		const magnitude = Vector4.magnitude(cartesian);
		result.x = cartesian.x / magnitude;
		result.y = cartesian.y / magnitude;
		result.z = cartesian.z / magnitude;
		result.w = cartesian.w / magnitude;
		//>>includeStart('debug', pragmas.debug);
		if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z) || isNaN(result.w)) {
			throw new Error("normalized result is not a number");
		}
		//>>includeEnd('debug');
		return result;
	}
	static dot(left, right) {
		return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
	}
	static multiplyComponents(left, right, result) {
		result.x = left.x * right.x;
		result.y = left.y * right.y;
		result.z = left.z * right.z;
		result.w = left.w * right.w;
		return result;
	}
	static divideComponents(left, right, result) {
		result.x = left.x / right.x;
		result.y = left.y / right.y;
		result.z = left.z / right.z;
		result.w = left.w / right.w;
		return result;
	}
	static add(left, right, result) {
		result.x = left.x + right.x;
		result.y = left.y + right.y;
		result.z = left.z + right.z;
		result.w = left.w + right.w;
		return result;
	}
	static subtract(left, right, result) {
		result.x = left.x - right.x;
		result.y = left.y - right.y;
		result.z = left.z - right.z;
		result.w = left.w - right.w;
		return result;
	}
	static multiplyByScalar(cartesian, scalar, result) {
		result.x = cartesian.x * scalar;
		result.y = cartesian.y * scalar;
		result.z = cartesian.z * scalar;
		result.w = cartesian.w * scalar;
		return result;
	}
	static divideByScalar(cartesian, scalar, result) {
		result.x = cartesian.x / scalar;
		result.y = cartesian.y / scalar;
		result.z = cartesian.z / scalar;
		result.w = cartesian.w / scalar;
		return result;
	}
	static negate(cartesian, result) {
		result.x = -cartesian.x;
		result.y = -cartesian.y;
		result.z = -cartesian.z;
		result.w = -cartesian.w;
		return result;
	}
	static abs(cartesian, result) {
		result.x = Math.abs(cartesian.x);
		result.y = Math.abs(cartesian.y);
		result.z = Math.abs(cartesian.z);
		result.w = Math.abs(cartesian.w);
		return result;
	}
	static lerp(start, end, t, result) {
		Vector4.multiplyByScalar(end, t, lerpScratch$3);
		result = Vector4.multiplyByScalar(start, 1.0 - t, result);
		return Vector4.add(lerpScratch$3, result, result);
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				left.x === right.x &&
				left.y === right.y &&
				left.z === right.z &&
				left.w === right.w)
		);
	}
	static equalsArray(cartesian, array, offset) {
		return (
			cartesian.x === array[offset] &&
			cartesian.y === array[offset + 1] &&
			cartesian.z === array[offset + 2] &&
			cartesian.w === array[offset + 3]
		);
	}
	static equalsEpsilon(left, right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				GMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.w, right.w, relativeEpsilon, absoluteEpsilon))
		);
	}
}
Vector4.ZERO = Object.freeze(new Vector4(0.0, 0.0, 0.0, 0.0));
Vector4.ONE = Object.freeze(new Vector4(1.0, 1.0, 1.0, 1.0));
Vector4.UNIT_X = Object.freeze(new Vector4(1.0, 0.0, 0.0, 0.0));
Vector4.UNIT_Y = Object.freeze(new Vector4(0.0, 1.0, 0.0, 0.0));
Vector4.UNIT_Z = Object.freeze(new Vector4(0.0, 0.0, 1.0, 0.0));
Vector4.UNIT_W = Object.freeze(new Vector4(0.0, 0.0, 0.0, 1.0));
// scratchU8Array and scratchF32Array are views into the same buffer
const scratchF32Array = new Float32Array(1);
new Uint8Array(scratchF32Array.buffer);
const testU32 = new Uint32Array([0x11223344]);
const testU8 = new Uint8Array(testU32.buffer);
testU8[0] === 0x44;
const distanceScratch$2 = new Vector4();
const lerpScratch$3 = new Vector4();
new Vector4();

class Vector3 {
	constructor(x = 0, y = 0, z = 0) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	set(x, y, z) {
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	toArray() {
		return [this.x, this.y, this.z];
	}
	copy(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		return this;
	}
	lerp(end, t) {
		Vector3.lerp(this, end, t, this);
		return this;
	}
	add(v) {
		Vector3.add(this, v, this);
		return this;
	}
	addScaledVector(v, s) {
		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		return this;
	}
	subtract(v) {
		Vector3.subtract(this, v, this);
		return this;
	}
	applyQuaternion(q) {
		const x = this.x,
			y = this.y,
			z = this.z;
		const qx = q.x,
			qy = q.y,
			qz = q.z,
			qw = q.w;
		// calculate quat * vector
		const ix = qw * x + qy * z - qz * y;
		const iy = qw * y + qz * x - qx * z;
		const iz = qw * z + qx * y - qy * x;
		const iw = -qx * x - qy * y - qz * z;
		// calculate result * inverse quat
		this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
		this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
		this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
		return this;
	}
	setFromMatrixColumn(m, index) {
		return this.fromArray(m, index * 4);
	}
	fromArray(array, offset = 0) {
		this.x = array[offset];
		this.y = array[offset + 1];
		this.z = array[offset + 2];
		return this;
	}
	multiplyByScalar(scale) {
		Vector3.multiplyByScalar(this, scale, this);
		return this;
	}
	clone() {
		return Vector3.clone(this, new Vector3());
	}
	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	applyMatrix4(matrix) {
		const x = this.x,
			y = this.y,
			z = this.z;
		const e = matrix;
		const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
		this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
		this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
		this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
		return this;
	}
	applyMatrix3(matrix) {
		let x = this.x,
			y = this.y,
			z = this.z;
		this.x = x * matrix[0] + y * matrix[3] + z * matrix[6];
		this.y = x * matrix[1] + y * matrix[4] + z * matrix[7];
		this.z = x * matrix[2] + y * matrix[5] + z * matrix[8];
		return this;
	}
	transformDirection(matrix) {
		const x = this.x,
			y = this.y,
			z = this.z;
		const e = matrix;
		this.x = e[0] * x + e[4] * y + e[8] * z;
		this.y = e[1] * x + e[5] * y + e[9] * z;
		this.z = e[2] * x + e[6] * y + e[10] * z;
		return this.normalize();
	}
	setFromMatrixPosition(matrix) {
		const e = matrix;
		this.x = e[12];
		this.y = e[13];
		this.z = e[14];
		return this;
	}
	normalize() {
		Vector3.normalize(this, this);
		return this;
	}
	equals(right) {
		return Vector3.equals(this, right);
	}
	equalsEpsilon(right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return Vector3.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);
	}
	toString() {
		return `(${this.x}, ${this.y}, ${this.z})`;
	}
	fromBufferAttribute(attribute, index) {
		this.x = attribute.getX(index);
		this.y = attribute.getY(index);
		this.z = attribute.getZ(index);
		return this;
	}
	static fromVector4(vec4, result) {
		result.x = vec4.x;
		result.y = vec4.y;
		result.z = vec4.z;
		return result;
	}
	static fromSpherical(spherical, result) {
		if (!defined(result)) {
			result = new Vector3();
		}
		const { phi, radius, theta } = spherical;
		const sinPhiRadius = Math.sin(phi) * radius;
		result.x = sinPhiRadius * Math.sin(theta);
		result.y = Math.cos(phi) * radius;
		result.z = sinPhiRadius * Math.cos(theta);
		return result;
	}
	static fromElements(x, y, z, result) {
		if (!defined(result)) {
			return new Vector3(x, y, z);
		}
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static clone(cartesian, result = new Vector3()) {
		if (!defined(cartesian)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Vector3(cartesian.x, cartesian.y, cartesian.z);
		}
		result.x = cartesian.x;
		result.y = cartesian.y;
		result.z = cartesian.z;
		return result;
	}
	static maximumComponent(cartesian) {
		return Math.max(cartesian.x, cartesian.y, cartesian.z);
	}
	static minimumComponent(cartesian) {
		return Math.min(cartesian.x, cartesian.y, cartesian.z);
	}
	static minimumByComponent(first, second, result) {
		result.x = Math.min(first.x, second.x);
		result.y = Math.min(first.y, second.y);
		result.z = Math.min(first.z, second.z);
		return result;
	}
	static maximumByComponent(first, second, result) {
		result.x = Math.max(first.x, second.x);
		result.y = Math.max(first.y, second.y);
		result.z = Math.max(first.z, second.z);
		return result;
	}
	static clamp(value, min, max, result) {
		const x = GMath.clamp(value.x, min.x, max.x);
		const y = GMath.clamp(value.y, min.y, max.y);
		const z = GMath.clamp(value.z, min.z, max.z);
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static magnitudeSquared(cartesian) {
		return cartesian.x * cartesian.x + cartesian.y * cartesian.y + cartesian.z * cartesian.z;
	}
	static magnitude(cartesian) {
		return Math.sqrt(Vector3.magnitudeSquared(cartesian));
	}
	static distance(left, right) {
		Vector3.subtract(left, right, distanceScratch$1);
		return Vector3.magnitude(distanceScratch$1);
	}
	static distanceSquared(left, right) {
		Vector3.subtract(left, right, distanceScratch$1);
		return Vector3.magnitudeSquared(distanceScratch$1);
	}
	static normalize(cartesian, result) {
		const magnitude = Vector3.magnitude(cartesian);
		result.x = cartesian.x / magnitude;
		result.y = cartesian.y / magnitude;
		result.z = cartesian.z / magnitude;
		if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z)) {
			throw new Error("normalized result is not a number");
		}
		return result;
	}
	static dot(left, right) {
		return left.x * right.x + left.y * right.y + left.z * right.z;
	}
	static multiplyComponents(left, right, result) {
		result.x = left.x * right.x;
		result.y = left.y * right.y;
		result.z = left.z * right.z;
		return result;
	}
	static divideComponents(left, right, result) {
		result.x = left.x / right.x;
		result.y = left.y / right.y;
		result.z = left.z / right.z;
		return result;
	}
	static add(left, right, result) {
		result.x = left.x + right.x;
		result.y = left.y + right.y;
		result.z = left.z + right.z;
		return result;
	}
	static subtract(left, right, result) {
		result.x = left.x - right.x;
		result.y = left.y - right.y;
		result.z = left.z - right.z;
		return result;
	}
	static multiplyByScalar(cartesian, scalar, result) {
		result.x = cartesian.x * scalar;
		result.y = cartesian.y * scalar;
		result.z = cartesian.z * scalar;
		return result;
	}
	static divideByScalar(cartesian, scalar, result) {
		result.x = cartesian.x / scalar;
		result.y = cartesian.y / scalar;
		result.z = cartesian.z / scalar;
		return result;
	}
	static negate(cartesian, result) {
		result.x = -cartesian.x;
		result.y = -cartesian.y;
		result.z = -cartesian.z;
		return result;
	}
	static abs(cartesian, result) {
		result.x = Math.abs(cartesian.x);
		result.y = Math.abs(cartesian.y);
		result.z = Math.abs(cartesian.z);
		return result;
	}
	static lerp(start, end, t, result) {
		Vector3.multiplyByScalar(end, t, lerpScratch$2);
		result = Vector3.multiplyByScalar(start, 1.0 - t, result);
		return Vector3.add(lerpScratch$2, result, result);
	}
	static angleBetween(left, right) {
		Vector3.normalize(left, angleBetweenScratch$1);
		Vector3.normalize(right, angleBetweenScratch2$1);
		const cosine = Vector3.dot(angleBetweenScratch$1, angleBetweenScratch2$1);
		const sine = Vector3.magnitude(
			Vector3.cross(angleBetweenScratch$1, angleBetweenScratch2$1, angleBetweenScratch$1)
		);
		return Math.atan2(sine, cosine);
	}
	static mostOrthogonalAxis(cartesian, result) {
		const f = Vector3.normalize(cartesian, mostOrthogonalAxisScratch$1);
		Vector3.abs(f, f);
		if (f.x <= f.y) {
			if (f.x <= f.z) {
				result = Vector3.clone(Vector3.UNIT_X, result);
			} else {
				result = Vector3.clone(Vector3.UNIT_Z, result);
			}
		} else if (f.y <= f.z) {
			result = Vector3.clone(Vector3.UNIT_Y, result);
		} else {
			result = Vector3.clone(Vector3.UNIT_Z, result);
		}
		return result;
	}
	static projectVector(a, b, result) {
		const scalar = Vector3.dot(a, b) / Vector3.dot(b, b);
		return Vector3.multiplyByScalar(b, scalar, result);
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) && defined(right) && left.x === right.x && left.y === right.y && left.z === right.z)
		);
	}
	/**
	 * @private
	 */
	static equalsArray(cartesian, array, offset) {
		return cartesian.x === array[offset] && cartesian.y === array[offset + 1] && cartesian.z === array[offset + 2];
	}
	static equalsEpsilon(left, right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				GMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon))
		);
	}
	static cross(left, right, result) {
		const leftX = left.x;
		const leftY = left.y;
		const leftZ = left.z;
		const rightX = right.x;
		const rightY = right.y;
		const rightZ = right.z;
		const x = leftY * rightZ - leftZ * rightY;
		const y = leftZ * rightX - leftX * rightZ;
		const z = leftX * rightY - leftY * rightX;
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
}
Vector3.ZERO = Object.freeze(new Vector3(0.0, 0.0, 0.0));
Vector3.ONE = Object.freeze(new Vector3(1.0, 1.0, 1.0));
Vector3.UNIT_X = Object.freeze(new Vector3(1.0, 0.0, 0.0));
Vector3.UNIT_Y = Object.freeze(new Vector3(0.0, 1.0, 0.0));
Vector3.UNIT_Z = Object.freeze(new Vector3(0.0, 0.0, 1.0));
Vector3.midpoint = function (left, right, result) {
	result.x = (left.x + right.x) * 0.5;
	result.y = (left.y + right.y) * 0.5;
	result.z = (left.z + right.z) * 0.5;
	return result;
};
const distanceScratch$1 = new Vector3();
const lerpScratch$2 = new Vector3();
const angleBetweenScratch$1 = new Vector3();
const angleBetweenScratch2$1 = new Vector3();
const mostOrthogonalAxisScratch$1 = new Vector3();

class Light {
	constructor(color, intensity) {
		this._color = Vector3.multiplyByScalar(color, intensity, new Vector3());
		this._intensity = intensity;
		this._position = new Vector3(0, 1, 0);
		this._target = new Vector3();
		this.positionDirty = true;
		this.targetDirty = true;
		this.colorDirty = true;
		this.shadowDirty = true;
		this.intensityDirty = true;
		this._shadow = null;
		this.isLight = true;
	}
	get position() {
		return this._position;
	}
	set position(value) {
		this.positionDirty = true;
		this._position = value;
	}
	get target() {
		return this._target;
	}
	set target(value) {
		this.targetDirty = true;
		this._target = value;
	}
	get color() {
		return this._color;
	}
	set color(value) {
		this.colorDirty = true;
		this._color = value;
	}
	set intensity(value) {
		this.color = Vector3.multiplyByScalar(this.color, value, new Vector3());
		this.intensityDirty = true;
		this._intensity = value;
	}
	get intensity() {
		return this._intensity;
	}
	get shadow() {
		return this._shadow;
	}
	set shadow(value) {
		this.shadowDirty = true;
		this._shadow = value;
	}
}

class AmbientLight extends Light {
	constructor(color, intensity) {
		super(color, intensity);
		this.type = "ambient";
		this._colorAndIntensity = new Vector4(color.x, color.y, color.z, intensity);
	}
	get ColorAndIntensity() {
		this._colorAndIntensity.set(this.color.x, this.color.y, this.color.z, this.intensity);
		return this._colorAndIntensity;
	}
}
//light.color ).multiplyScalar( light.intensity * scaleFactor );

//#rgba
const rgbaMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;
//#rrggbbaa
const rrggbbaaMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;
//rgb(), rgba(), or rgb%()
const rgbParenthesesMatcher = /^rgba?\(\s*([0-9.]+%?)\s*,\s*([0-9.]+%?)\s*,\s*([0-9.]+%?)(?:\s*,\s*([0-9.]+))?\s*\)$/i;
//hsl() or hsla()
const hslParenthesesMatcher = /^hsla?\(\s*([0-9.]+)\s*,\s*([0-9.]+%)\s*,\s*([0-9.]+%)(?:\s*,\s*([0-9.]+))?\s*\)$/i;
function hue2rgb(m1, m2, h) {
	if (h < 0) {
		h += 1;
	}
	if (h > 1) {
		h -= 1;
	}
	if (h * 6 < 1) {
		return m1 + (m2 - m1) * 6 * h;
	}
	if (h * 2 < 1) {
		return m2;
	}
	if (h * 3 < 2) {
		return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	}
	return m1;
}
class Color {
	constructor(red = 1.0, green = 1.0, blue = 1.0) {
		/**
		 * The red component.
		 * @type {Number}
		 * @default 1.0
		 */
		this.red = red;
		/**
		 * The green component.
		 * @type {Number}
		 * @default 1.0
		 */
		this.green = green;
		/**
		 * The blue component.
		 * @type {Number}
		 * @default 1.0
		 */
		this.blue = blue;
	}
	set(value) {
		if (typeof value === "string") {
			Color.fromCssColorString(value, this);
		}
		return this;
	}
	toArray() {
		return [this.red, this.green, this.blue];
	}
	clone(result) {
		return Color.clone(this, result);
	}
	equals(other) {
		return Color.equals(this, other);
	}
	toCssHexString() {
		let r = Color.floatToByte(this.red).toString(16);
		if (r.length < 2) {
			r = `0${r}`;
		}
		let g = Color.floatToByte(this.green).toString(16);
		if (g.length < 2) {
			g = `0${g}`;
		}
		let b = Color.floatToByte(this.blue).toString(16);
		if (b.length < 2) {
			b = `0${b}`;
		}
		return `#${r}${g}${b}`;
	}
	toBytes(result) {
		const red = Color.floatToByte(this.red);
		const green = Color.floatToByte(this.green);
		const blue = Color.floatToByte(this.blue);
		if (!defined(result)) {
			return [red, green, blue];
		}
		result[0] = red;
		result[1] = green;
		result[2] = blue;
		return result;
	}
	static fromBytes(red, green, blue, result) {
		red = Color.byteToFloat(defaultValue(red, 255.0));
		green = Color.byteToFloat(defaultValue(green, 255.0));
		blue = Color.byteToFloat(defaultValue(blue, 255.0));
		if (!defined(result)) {
			return new Color(red, green, blue);
		}
		result.red = red;
		result.green = green;
		result.blue = blue;
		return result;
	}
	static fromHsl(hue, saturation, lightness, result) {
		hue = defaultValue(hue, 0.0) % 1.0;
		saturation = defaultValue(saturation, 0.0);
		lightness = defaultValue(lightness, 0.0);
		let red = lightness;
		let green = lightness;
		let blue = lightness;
		if (saturation !== 0) {
			let m2;
			if (lightness < 0.5) {
				m2 = lightness * (1 + saturation);
			} else {
				m2 = lightness + saturation - lightness * saturation;
			}
			const m1 = 2.0 * lightness - m2;
			red = hue2rgb(m1, m2, hue + 1 / 3);
			green = hue2rgb(m1, m2, hue);
			blue = hue2rgb(m1, m2, hue - 1 / 3);
		}
		if (!defined(result)) {
			return new Color(red, green, blue);
		}
		result.red = red;
		result.green = green;
		result.blue = blue;
		return result;
	}
	/**
	 * Creates a random color using the provided options. For reproducible random colors, you should
	 * call {@link GMath#setRandomNumberSeed} once at the beginning of your application.
	 *
	 * @param {Object} [options] Object with the following properties:
	 * @param {Number} [options.red] If specified, the red component to use instead of a randomized value.
	 * @param {Number} [options.minimumRed=0.0] The maximum red value to generate if none was specified.
	 * @param {Number} [options.maximumRed=1.0] The minimum red value to generate if none was specified.
	 * @param {Number} [options.green] If specified, the green component to use instead of a randomized value.
	 * @param {Number} [options.minimumGreen=0.0] The maximum green value to generate if none was specified.
	 * @param {Number} [options.maximumGreen=1.0] The minimum green value to generate if none was specified.
	 * @param {Number} [options.blue] If specified, the blue component to use instead of a randomized value.
	 * @param {Number} [options.minimumBlue=0.0] The maximum blue value to generate if none was specified.
	 * @param {Number} [options.maximumBlue=1.0] The minimum blue value to generate if none was specified.
	 * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.
	 * @returns {Color} The modified result parameter or a new instance if result was undefined.
	 *
	 * @example
	 * //Create a completely random color
	 * const color = Color.fromRandom();
	 *
	 * //Create a random shade of yellow.
	 * const color1 = Color.fromRandom({
	 *     red : 1.0,
	 *     green : 1.0,
	 * });
	 *
	 * //Create a random bright color.
	 * const color2 = Color.fromRandom({
	 *     minimumRed : 0.75,
	 *     minimumGreen : 0.75,
	 *     minimumBlue : 0.75,
	 * });
	 */
	static fromRandom(options, result) {
		options = defaultValue(options, defaultValue.EMPTY_OBJECT);
		let red = options.red;
		if (!defined(red)) {
			const minimumRed = defaultValue(options.minimumRed, 0);
			const maximumRed = defaultValue(options.maximumRed, 1.0);
			red = minimumRed + GMath.nextRandomNumber() * (maximumRed - minimumRed);
		}
		let green = options.green;
		if (!defined(green)) {
			const minimumGreen = defaultValue(options.minimumGreen, 0);
			const maximumGreen = defaultValue(options.maximumGreen, 1.0);
			green = minimumGreen + GMath.nextRandomNumber() * (maximumGreen - minimumGreen);
		}
		let blue = options.blue;
		if (!defined(blue)) {
			const minimumBlue = defaultValue(options.minimumBlue, 0);
			const maximumBlue = defaultValue(options.maximumBlue, 1.0);
			blue = minimumBlue + GMath.nextRandomNumber() * (maximumBlue - minimumBlue);
		}
		if (!defined(result)) {
			return new Color(red, green, blue);
		}
		result.red = red;
		result.green = green;
		result.blue = blue;
		return result;
	}
	static fromCssColorString(color, result = new Color()) {
		// Remove all whitespaces from the color string
		color = color.replace(/\s/g, "");
		const namedColor = Color[color.toUpperCase()];
		if (defined(namedColor)) {
			Color.clone(namedColor, result);
			return result;
		}
		let matches = rgbaMatcher.exec(color);
		if (matches !== null) {
			result.red = parseInt(matches[1], 16) / 15;
			result.green = parseInt(matches[2], 16) / 15.0;
			result.blue = parseInt(matches[3], 16) / 15.0;
			return result;
		}
		matches = rrggbbaaMatcher.exec(color);
		if (matches !== null) {
			result.red = parseInt(matches[1], 16) / 255.0;
			result.green = parseInt(matches[2], 16) / 255.0;
			result.blue = parseInt(matches[3], 16) / 255.0;
			return result;
		}
		matches = rgbParenthesesMatcher.exec(color);
		if (matches !== null) {
			result.red = parseFloat(matches[1]) / ("%" === matches[1].substr(-1) ? 100.0 : 255.0);
			result.green = parseFloat(matches[2]) / ("%" === matches[2].substr(-1) ? 100.0 : 255.0);
			result.blue = parseFloat(matches[3]) / ("%" === matches[3].substr(-1) ? 100.0 : 255.0);
			return result;
		}
		matches = hslParenthesesMatcher.exec(color);
		if (matches !== null) {
			return Color.fromHsl(
				parseFloat(matches[1]) / 360.0,
				parseFloat(matches[2]) / 100.0,
				parseFloat(matches[3]) / 100.0,
				result
			);
		}
		result = undefined;
		return result;
	}
	static byteToFloat(value) {
		return value / 255.0;
	}
	static floatToByte(value) {
		return value === 1.0 ? 255.0 : (value * 256.0) | 0;
	}
	static clone(color, result) {
		if (!defined(color)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Color(color.red, color.green, color.blue);
		}
		result.red = color.red;
		result.green = color.green;
		result.blue = color.blue;
		return result;
	}
	static equals(left, right) {
		return (
			left === right || //
			(defined(left) && //
				defined(right) && //
				left.red === right.red && //
				left.green === right.green && //
				left.blue === right.blue)
		);
	}
	/**
	 * @private
	 */
	static equalsArray(color, array, offset) {
		return color.red === array[offset] && color.green === array[offset + 1] && color.blue === array[offset + 2];
	}
}

/**
 * A 2D Cartesian point.
 * @alias Vector2
 * @constructor
 *
 * @param {Number} [x=0.0] The X component.
 * @param {Number} [y=0.0] The Y component.
 *
 */
class Vector2 {
	constructor(x = 0.0, y = 0.0) {
		this.x = x;
		this.y = y;
		this.x = x;
		this.y = y;
	}
	set(x, y) {
		this.x = x;
		this.y = y;
		return this;
	}
	toArray() {
		return [this.x, this.y];
	}
	clone(result) {
		return Vector2.clone(this, result);
	}
	equals(right) {
		return Vector2.equals(this, right);
	}
	equalsEpsilon(right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return Vector2.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);
	}
	toString() {
		return `(${this.x}, ${this.y})`;
	}
	fromBufferAttribute(attribute, index) {
		this.x = attribute.getX(index);
		this.y = attribute.getY(index);
		return this;
	}
	applyMatrix3(matrix3) {
		const x = this.x,
			y = this.y;
		this.x = matrix3[0] * x + matrix3[3] * y + matrix3[6];
		this.y = matrix3[1] * x + matrix3[4] * y + matrix3[7];
		return this;
	}
	static fromElements(x, y, result) {
		if (!defined(result)) {
			return new Vector2(x, y);
		}
		result.x = x;
		result.y = y;
		return result;
	}
	static clone(cartesian, result) {
		if (!defined(cartesian)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Vector2(cartesian.x, cartesian.y);
		}
		result.x = cartesian.x;
		result.y = cartesian.y;
		return result;
	}
	static maximumComponent(cartesian) {
		return Math.max(cartesian.x, cartesian.y);
	}
	static minimumComponent(cartesian) {
		return Math.min(cartesian.x, cartesian.y);
	}
	static minimumByComponent(first, second, result) {
		result.x = Math.min(first.x, second.x);
		result.y = Math.min(first.y, second.y);
		return result;
	}
	static maximumByComponent(first, second, result) {
		result.x = Math.max(first.x, second.x);
		result.y = Math.max(first.y, second.y);
		return result;
	}
	static clamp(value, min, max, result) {
		const x = GMath.clamp(value.x, min.x, max.x);
		const y = GMath.clamp(value.y, min.y, max.y);
		result.x = x;
		result.y = y;
		return result;
	}
	static magnitudeSquared(cartesian) {
		return cartesian.x * cartesian.x + cartesian.y * cartesian.y;
	}
	static magnitude(cartesian) {
		return Math.sqrt(Vector2.magnitudeSquared(cartesian));
	}
	static distance(left, right) {
		Vector2.subtract(left, right, distanceScratch);
		return Vector2.magnitude(distanceScratch);
	}
	static distanceSquared(left, right) {
		Vector2.subtract(left, right, distanceScratch);
		return Vector2.magnitudeSquared(distanceScratch);
	}
	static normalize(cartesian, result) {
		const magnitude = Vector2.magnitude(cartesian);
		result.x = cartesian.x / magnitude;
		result.y = cartesian.y / magnitude;
		//>>includeStart('debug', pragmas.debug);
		if (isNaN(result.x) || isNaN(result.y)) {
			throw new Error("normalized result is not a number");
		}
		//>>includeEnd('debug');
		return result;
	}
	static dot(left, right) {
		return left.x * right.x + left.y * right.y;
	}
	static cross(left, right) {
		return left.x * right.y - left.y * right.x;
	}
	static multiplyComponents(left, right, result) {
		result.x = left.x * right.x;
		result.y = left.y * right.y;
		return result;
	}
	static divideComponents(left, right, result) {
		result.x = left.x / right.x;
		result.y = left.y / right.y;
		return result;
	}
	static add(left, right, result) {
		result.x = left.x + right.x;
		result.y = left.y + right.y;
		return result;
	}
	static subtract(left, right, result) {
		result.x = left.x - right.x;
		result.y = left.y - right.y;
		return result;
	}
	static multiplyByScalar(cartesian, scalar, result) {
		result.x = cartesian.x * scalar;
		result.y = cartesian.y * scalar;
		return result;
	}
	static divideByScalar(cartesian, scalar, result) {
		result.x = cartesian.x / scalar;
		result.y = cartesian.y / scalar;
		return result;
	}
	static negate(cartesian, result) {
		result.x = -cartesian.x;
		result.y = -cartesian.y;
		return result;
	}
	static abs(cartesian, result) {
		result.x = Math.abs(cartesian.x);
		result.y = Math.abs(cartesian.y);
		return result;
	}
	static lerp(start, end, t, result) {
		Vector2.multiplyByScalar(end, t, lerpScratch$1);
		result = Vector2.multiplyByScalar(start, 1.0 - t, result);
		return Vector2.add(lerpScratch$1, result, result);
	}
	static angleBetween(left, right) {
		Vector2.normalize(left, angleBetweenScratch);
		Vector2.normalize(right, angleBetweenScratch2);
		return GMath.acosClamped(Vector2.dot(angleBetweenScratch, angleBetweenScratch2));
	}
	static mostOrthogonalAxis(cartesian, result) {
		const f = Vector2.normalize(cartesian, mostOrthogonalAxisScratch);
		Vector2.abs(f, f);
		if (f.x <= f.y) {
			result = Vector2.clone(Vector2.UNIT_X, result);
		} else {
			result = Vector2.clone(Vector2.UNIT_Y, result);
		}
		return result;
	}
	static equals(left, right) {
		return left === right || (defined(left) && defined(right) && left.x === right.x && left.y === right.y);
	}
	/**
	 * @private
	 */
	static equalsArray(cartesian, array, offset) {
		return cartesian.x === array[offset] && cartesian.y === array[offset + 1];
	}
	static equalsEpsilon(left, right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				GMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon))
		);
	}
}
Vector2.ZERO = Object.freeze(new Vector2(0.0, 0.0));
Vector2.ONE = Object.freeze(new Vector2(1.0, 1.0));
Vector2.UNIT_X = Object.freeze(new Vector2(1.0, 0.0));
Vector2.UNIT_Y = Object.freeze(new Vector2(0.0, 1.0));
const distanceScratch = new Vector2();
const lerpScratch$1 = new Vector2();
const angleBetweenScratch = new Vector2();
const angleBetweenScratch2 = new Vector2();
const mostOrthogonalAxisScratch = new Vector2();

/**
 * A 2x2 matrix, indexable as a column-major order array.
 * @param {Number} [column0Row0=0.0] The value for column 0, row 0.
 * @param {Number} [column1Row0=0.0] The value for column 1, row 0.
 * @param {Number} [column0Row1=0.0] The value for column 0, row 1.
 * @param {Number} [column1Row1=0.0] The value for column 1, row 1.
 */
class Matrix2 {
	constructor(column0Row0 = 0, column1Row0 = 0, column0Row1 = 0, column1Row1 = 0) {
		this[0] = column0Row0;
		this[1] = column0Row1;
		this[2] = column1Row0;
		this[3] = column1Row1;
	}
	static clone(matrix, result) {
		if (!defined(matrix)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Matrix2(matrix[0], matrix[2], matrix[1], matrix[3]);
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		return result;
	}
	static fromColumnMajorArray(values, result) {
		return Matrix2.clone(values, result);
	}
	static fromRowMajorArray(values, result) {
		if (!defined(result)) {
			return new Matrix2(values[0], values[1], values[2], values[3]);
		}
		result[0] = values[0];
		result[1] = values[2];
		result[2] = values[1];
		result[3] = values[3];
		return result;
	}
	static fromScale(scale, result) {
		if (!defined(result)) {
			return new Matrix2(scale.x, 0.0, 0.0, scale.y);
		}
		result[0] = scale.x;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = scale.y;
		return result;
	}
	static fromRotation(angle, result) {
		const cosAngle = Math.cos(angle);
		const sinAngle = Math.sin(angle);
		if (!defined(result)) {
			return new Matrix2(cosAngle, -sinAngle, sinAngle, cosAngle);
		}
		result[0] = cosAngle;
		result[1] = sinAngle;
		result[2] = -sinAngle;
		result[3] = cosAngle;
		return result;
	}
	toArray() {
		const result = [];
		Matrix2.toArray(this, result);
		return result;
	}
	static toArray(matrix, result) {
		if (!defined(result)) {
			return [matrix[0], matrix[1], matrix[2], matrix[3]];
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		return result;
	}
	static getElementIndex(column, row) {
		return column * 2 + row;
	}
	static getColumn(matrix, index, result) {
		const startIndex = index * 2;
		const x = matrix[startIndex];
		const y = matrix[startIndex + 1];
		result.x = x;
		result.y = y;
		return result;
	}
	static setColumn(matrix, index, cartesian, result) {
		result = Matrix2.clone(matrix, result);
		const startIndex = index * 2;
		result[startIndex] = cartesian.x;
		result[startIndex + 1] = cartesian.y;
		return result;
	}
	static getRow(matrix, index, result) {
		const x = matrix[index];
		const y = matrix[index + 2];
		result.x = x;
		result.y = y;
		return result;
	}
	static setRow(matrix, index, cartesian, result) {
		result = Matrix2.clone(matrix, result);
		result[index] = cartesian.x;
		result[index + 2] = cartesian.y;
		return result;
	}
	static setScale(matrix, scale, result) {
		const existingScale = Matrix2.getScale(matrix, scaleScratch1$2);
		const scaleRatioX = scale.x / existingScale.x;
		const scaleRatioY = scale.y / existingScale.y;
		result[0] = matrix[0] * scaleRatioX;
		result[1] = matrix[1] * scaleRatioX;
		result[2] = matrix[2] * scaleRatioY;
		result[3] = matrix[3] * scaleRatioY;
		return result;
	}
	static getScale(matrix, result) {
		result.x = Vector2.magnitude(Vector2.fromElements(matrix[0], matrix[1], scratchColumn$2));
		result.y = Vector2.magnitude(Vector2.fromElements(matrix[2], matrix[3], scratchColumn$2));
		return result;
	}
	static getMaximumScale(matrix) {
		Matrix2.getScale(matrix, scaleScratch3$2);
		return Vector2.maximumComponent(scaleScratch3$2);
	}
	static setRotation(matrix, rotation, result) {
		const scale = Matrix2.getScale(matrix, scaleScratch4$2);
		result[0] = rotation[0] * scale.x;
		result[1] = rotation[1] * scale.x;
		result[2] = rotation[2] * scale.y;
		result[3] = rotation[3] * scale.y;
		return result;
	}
	static getRotation(matrix, result) {
		const scale = Matrix2.getScale(matrix, scaleScratch5$2);
		result[0] = matrix[0] / scale.x;
		result[1] = matrix[1] / scale.x;
		result[2] = matrix[2] / scale.y;
		result[3] = matrix[3] / scale.y;
		return result;
	}
	static multiply(left, right, result) {
		const column0Row0 = left[0] * right[0] + left[2] * right[1];
		const column1Row0 = left[0] * right[2] + left[2] * right[3];
		const column0Row1 = left[1] * right[0] + left[3] * right[1];
		const column1Row1 = left[1] * right[2] + left[3] * right[3];
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column1Row0;
		result[3] = column1Row1;
		return result;
	}
	static add(left, right, result) {
		result[0] = left[0] + right[0];
		result[1] = left[1] + right[1];
		result[2] = left[2] + right[2];
		result[3] = left[3] + right[3];
		return result;
	}
	static subtract(left, right, result) {
		result[0] = left[0] - right[0];
		result[1] = left[1] - right[1];
		result[2] = left[2] - right[2];
		result[3] = left[3] - right[3];
		return result;
	}
	static multiplyByVector(matrix, cartesian, result) {
		const x = matrix[0] * cartesian.x + matrix[2] * cartesian.y;
		const y = matrix[1] * cartesian.x + matrix[3] * cartesian.y;
		result.x = x;
		result.y = y;
		return result;
	}
	static multiplyByScalar(matrix, scalar, result) {
		result[0] = matrix[0] * scalar;
		result[1] = matrix[1] * scalar;
		result[2] = matrix[2] * scalar;
		result[3] = matrix[3] * scalar;
		return result;
	}
	static multiplyByScale(matrix, scale, result) {
		result[0] = matrix[0] * scale.x;
		result[1] = matrix[1] * scale.x;
		result[2] = matrix[2] * scale.y;
		result[3] = matrix[3] * scale.y;
		return result;
	}
	static negate(matrix, result) {
		result[0] = -matrix[0];
		result[1] = -matrix[1];
		result[2] = -matrix[2];
		result[3] = -matrix[3];
		return result;
	}
	static transpose(matrix, result) {
		const column0Row0 = matrix[0];
		const column0Row1 = matrix[2];
		const column1Row0 = matrix[1];
		const column1Row1 = matrix[3];
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column1Row0;
		result[3] = column1Row1;
		return result;
	}
	static abs(matrix, result) {
		result[0] = Math.abs(matrix[0]);
		result[1] = Math.abs(matrix[1]);
		result[2] = Math.abs(matrix[2]);
		result[3] = Math.abs(matrix[3]);
		return result;
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				left[0] === right[0] &&
				left[1] === right[1] &&
				left[2] === right[2] &&
				left[3] === right[3])
		);
	}
	/**
	 * @private
	 */
	static equalsArray(matrix, array, offset) {
		return (
			matrix[0] === array[offset] &&
			matrix[1] === array[offset + 1] &&
			matrix[2] === array[offset + 2] &&
			matrix[3] === array[offset + 3]
		);
	}
	static equalsEpsilon(left, right, epsilon = 0) {
		epsilon = defaultValue(epsilon, 0);
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				Math.abs(left[0] - right[0]) <= epsilon &&
				Math.abs(left[1] - right[1]) <= epsilon &&
				Math.abs(left[2] - right[2]) <= epsilon &&
				Math.abs(left[3] - right[3]) <= epsilon)
		);
	}
	clone(result) {
		return Matrix2.clone(this, result);
	}
	equals(right) {
		return Matrix2.equals(this, right);
	}
	equalsEpsilon(right, epsilon = 0) {
		return Matrix2.equalsEpsilon(this, right, epsilon);
	}
	toString() {
		return `(${this[0]}, ${this[2]})\n` + `(${this[1]}, ${this[3]})`;
	}
}
Matrix2.IDENTITY = Object.freeze(new Matrix2(1.0, 0.0, 0.0, 1.0));
Matrix2.ZERO = Object.freeze(new Matrix2(0.0, 0.0, 0.0, 0.0));
const scaleScratch1$2 = new Vector2();
new Vector2();
const scaleScratch3$2 = new Vector2();
const scaleScratch4$2 = new Vector2();
const scratchColumn$2 = new Vector2();
const scaleScratch5$2 = new Vector2();

/**
 * A 3x3 matrix, indexable as a column-major order array.
 * @param {Number} [column0Row0=0.0] The value for column 0, row 0.
 * @param {Number} [column1Row0=0.0] The value for column 1, row 0.
 * @param {Number} [column2Row0=0.0] The value for column 2, row 0.
 * @param {Number} [column0Row1=0.0] The value for column 0, row 1.
 * @param {Number} [column1Row1=0.0] The value for column 1, row 1.
 * @param {Number} [column2Row1=0.0] The value for column 2, row 1.
 * @param {Number} [column0Row2=0.0] The value for column 0, row 2.
 * @param {Number} [column1Row2=0.0] The value for column 1, row 2.
 * @param {Number} [column2Row2=0.0] The value for column 2, row 2.
 */
class Matrix3 {
	constructor(
		column0Row0 = 0,
		column1Row0 = 0,
		column2Row0 = 0,
		column0Row1 = 0,
		column1Row1 = 0,
		column2Row1 = 0,
		column0Row2 = 0,
		column1Row2 = 0,
		column2Row2 = 0
	) {
		this[0] = column0Row0;
		this[1] = column0Row1;
		this[2] = column0Row2;
		this[3] = column1Row0;
		this[4] = column1Row1;
		this[5] = column1Row2;
		this[6] = column2Row0;
		this[7] = column2Row1;
		this[8] = column2Row2;
	}
	setFromMatrix4(matrix) {
		this[0] = matrix[0];
		this[1] = matrix[1];
		this[2] = matrix[2];
		this[3] = matrix[4];
		this[4] = matrix[5];
		this[5] = matrix[2];
		this[6] = matrix[8];
		this[7] = matrix[9];
		this[8] = matrix[10];
		return this;
	}
	getNormalMatrix(matrix4) {
		this.setFromMatrix4(matrix4);
		Matrix3.inverse(this, this);
		Matrix3.transpose(this, this);
		return this;
	}
	static clone(matrix, result) {
		if (!defined(matrix)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Matrix3(
				matrix[0],
				matrix[3],
				matrix[6],
				matrix[1],
				matrix[4],
				matrix[7],
				matrix[2],
				matrix[5],
				matrix[8]
			);
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		return result;
	}
	static fromColumnMajorArray(values, result) {
		if (!defined(result)) {
			result = new Matrix3();
		}
		return Matrix3.clone(values, result);
	}
	static fromRowMajorArray(values, result) {
		if (!defined(result)) {
			return new Matrix3(
				values[0],
				values[1],
				values[2],
				values[3],
				values[4],
				values[5],
				values[6],
				values[7],
				values[8]
			);
		}
		result[0] = values[0];
		result[1] = values[3];
		result[2] = values[6];
		result[3] = values[1];
		result[4] = values[4];
		result[5] = values[7];
		result[6] = values[2];
		result[7] = values[5];
		result[8] = values[8];
		return result;
	}
	static fromQuaternion(quaternion, result) {
		const x2 = quaternion.x * quaternion.x;
		const xy = quaternion.x * quaternion.y;
		const xz = quaternion.x * quaternion.z;
		const xw = quaternion.x * quaternion.w;
		const y2 = quaternion.y * quaternion.y;
		const yz = quaternion.y * quaternion.z;
		const yw = quaternion.y * quaternion.w;
		const z2 = quaternion.z * quaternion.z;
		const zw = quaternion.z * quaternion.w;
		const w2 = quaternion.w * quaternion.w;
		const m00 = x2 - y2 - z2 + w2;
		const m01 = 2.0 * (xy - zw);
		const m02 = 2.0 * (xz + yw);
		const m10 = 2.0 * (xy + zw);
		const m11 = -x2 + y2 - z2 + w2;
		const m12 = 2.0 * (yz - xw);
		const m20 = 2.0 * (xz - yw);
		const m21 = 2.0 * (yz + xw);
		const m22 = -x2 - y2 + z2 + w2;
		if (!defined(result)) {
			return new Matrix3(m00, m01, m02, m10, m11, m12, m20, m21, m22);
		}
		result[0] = m00;
		result[1] = m10;
		result[2] = m20;
		result[3] = m01;
		result[4] = m11;
		result[5] = m21;
		result[6] = m02;
		result[7] = m12;
		result[8] = m22;
		return result;
	}
	static fromScale(scale, result) {
		if (!defined(result)) {
			return new Matrix3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);
		}
		result[0] = scale.x;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = scale.y;
		result[5] = 0.0;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = scale.z;
		return result;
	}
	static fromRotationX(angle, result) {
		const cosAngle = Math.cos(angle);
		const sinAngle = Math.sin(angle);
		if (!defined(result)) {
			return new Matrix3(1.0, 0.0, 0.0, 0.0, cosAngle, -sinAngle, 0.0, sinAngle, cosAngle);
		}
		result[0] = 1.0;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = cosAngle;
		result[5] = sinAngle;
		result[6] = 0.0;
		result[7] = -sinAngle;
		result[8] = cosAngle;
		return result;
	}
	static fromRotationY(angle, result) {
		const cosAngle = Math.cos(angle);
		const sinAngle = Math.sin(angle);
		if (!defined(result)) {
			return new Matrix3(cosAngle, 0.0, sinAngle, 0.0, 1.0, 0.0, -sinAngle, 0.0, cosAngle);
		}
		result[0] = cosAngle;
		result[1] = 0.0;
		result[2] = -sinAngle;
		result[3] = 0.0;
		result[4] = 1.0;
		result[5] = 0.0;
		result[6] = sinAngle;
		result[7] = 0.0;
		result[8] = cosAngle;
		return result;
	}
	static fromRotationZstatic(angle, result) {
		const cosAngle = Math.cos(angle);
		const sinAngle = Math.sin(angle);
		if (!defined(result)) {
			return new Matrix3(cosAngle, -sinAngle, 0.0, sinAngle, cosAngle, 0.0, 0.0, 0.0, 1.0);
		}
		result[0] = cosAngle;
		result[1] = sinAngle;
		result[2] = 0.0;
		result[3] = -sinAngle;
		result[4] = cosAngle;
		result[5] = 0.0;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = 1.0;
		return result;
	}
	toArray() {
		const result = [];
		Matrix3.toArray(this, result);
		return result;
	}
	static toArray(matrix, result) {
		if (!defined(result)) {
			return [matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5], matrix[6], matrix[7], matrix[8]];
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		return result;
	}
	static getElementIndex(column, row) {
		return column * 3 + row;
	}
	static getColumn(matrix, index, result) {
		const startIndex = index * 3;
		const x = matrix[startIndex];
		const y = matrix[startIndex + 1];
		const z = matrix[startIndex + 2];
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static setColumn(matrix, index, cartesian, result) {
		result = Matrix3.clone(matrix, result);
		const startIndex = index * 3;
		result[startIndex] = cartesian.x;
		result[startIndex + 1] = cartesian.y;
		result[startIndex + 2] = cartesian.z;
		return result;
	}
	static getRow(matrix, index, result) {
		const x = matrix[index];
		const y = matrix[index + 3];
		const z = matrix[index + 6];
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static setRow(matrix, index, cartesian, result) {
		result = Matrix3.clone(matrix, result);
		result[index] = cartesian.x;
		result[index + 3] = cartesian.y;
		result[index + 6] = cartesian.z;
		return result;
	}
	static setScale(matrix, scale, result) {
		const existingScale = Matrix3.getScale(matrix, scaleScratch1$1);
		const scaleRatioX = scale.x / existingScale.x;
		const scaleRatioY = scale.y / existingScale.y;
		const scaleRatioZ = scale.z / existingScale.z;
		result[0] = matrix[0] * scaleRatioX;
		result[1] = matrix[1] * scaleRatioX;
		result[2] = matrix[2] * scaleRatioX;
		result[3] = matrix[3] * scaleRatioY;
		result[4] = matrix[4] * scaleRatioY;
		result[5] = matrix[5] * scaleRatioY;
		result[6] = matrix[6] * scaleRatioZ;
		result[7] = matrix[7] * scaleRatioZ;
		result[8] = matrix[8] * scaleRatioZ;
		return result;
	}
	static getScale(matrix, result) {
		result.x = Vector3.magnitude(Vector3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn$1));
		result.y = Vector3.magnitude(Vector3.fromElements(matrix[3], matrix[4], matrix[5], scratchColumn$1));
		result.z = Vector3.magnitude(Vector3.fromElements(matrix[6], matrix[7], matrix[8], scratchColumn$1));
		return result;
	}
	static getMaximumScale(matrix) {
		Matrix3.getScale(matrix, scaleScratch3$1);
		return Vector3.maximumComponent(scaleScratch3$1);
	}
	static setRotation(matrix, rotation, result) {
		const scale = Matrix3.getScale(matrix, scaleScratch4$1);
		result[0] = rotation[0] * scale.x;
		result[1] = rotation[1] * scale.x;
		result[2] = rotation[2] * scale.x;
		result[3] = rotation[3] * scale.y;
		result[4] = rotation[4] * scale.y;
		result[5] = rotation[5] * scale.y;
		result[6] = rotation[6] * scale.z;
		result[7] = rotation[7] * scale.z;
		result[8] = rotation[8] * scale.z;
		return result;
	}
	static getRotation(matrix, result) {
		const scale = Matrix3.getScale(matrix, scaleScratch5$1);
		result[0] = matrix[0] / scale.x;
		result[1] = matrix[1] / scale.x;
		result[2] = matrix[2] / scale.x;
		result[3] = matrix[3] / scale.y;
		result[4] = matrix[4] / scale.y;
		result[5] = matrix[5] / scale.y;
		result[6] = matrix[6] / scale.z;
		result[7] = matrix[7] / scale.z;
		result[8] = matrix[8] / scale.z;
		return result;
	}
	static multiply(left, right, result) {
		const column0Row0 = left[0] * right[0] + left[3] * right[1] + left[6] * right[2];
		const column0Row1 = left[1] * right[0] + left[4] * right[1] + left[7] * right[2];
		const column0Row2 = left[2] * right[0] + left[5] * right[1] + left[8] * right[2];
		const column1Row0 = left[0] * right[3] + left[3] * right[4] + left[6] * right[5];
		const column1Row1 = left[1] * right[3] + left[4] * right[4] + left[7] * right[5];
		const column1Row2 = left[2] * right[3] + left[5] * right[4] + left[8] * right[5];
		const column2Row0 = left[0] * right[6] + left[3] * right[7] + left[6] * right[8];
		const column2Row1 = left[1] * right[6] + left[4] * right[7] + left[7] * right[8];
		const column2Row2 = left[2] * right[6] + left[5] * right[7] + left[8] * right[8];
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = column1Row0;
		result[4] = column1Row1;
		result[5] = column1Row2;
		result[6] = column2Row0;
		result[7] = column2Row1;
		result[8] = column2Row2;
		return result;
	}
	static add(left, right, result) {
		result[0] = left[0] + right[0];
		result[1] = left[1] + right[1];
		result[2] = left[2] + right[2];
		result[3] = left[3] + right[3];
		result[4] = left[4] + right[4];
		result[5] = left[5] + right[5];
		result[6] = left[6] + right[6];
		result[7] = left[7] + right[7];
		result[8] = left[8] + right[8];
		return result;
	}
	static subtract(left, right, result) {
		result[0] = left[0] - right[0];
		result[1] = left[1] - right[1];
		result[2] = left[2] - right[2];
		result[3] = left[3] - right[3];
		result[4] = left[4] - right[4];
		result[5] = left[5] - right[5];
		result[6] = left[6] - right[6];
		result[7] = left[7] - right[7];
		result[8] = left[8] - right[8];
		return result;
	}
	static multiplyByVector(matrix, cartesian, result) {
		const vX = cartesian.x;
		const vY = cartesian.y;
		const vZ = cartesian.z;
		const x = matrix[0] * vX + matrix[3] * vY + matrix[6] * vZ;
		const y = matrix[1] * vX + matrix[4] * vY + matrix[7] * vZ;
		const z = matrix[2] * vX + matrix[5] * vY + matrix[8] * vZ;
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static multiplyByScalar(matrix, scalar, result) {
		result[0] = matrix[0] * scalar;
		result[1] = matrix[1] * scalar;
		result[2] = matrix[2] * scalar;
		result[3] = matrix[3] * scalar;
		result[4] = matrix[4] * scalar;
		result[5] = matrix[5] * scalar;
		result[6] = matrix[6] * scalar;
		result[7] = matrix[7] * scalar;
		result[8] = matrix[8] * scalar;
		return result;
	}
	static multiplyByScale(matrix, scale, result) {
		result[0] = matrix[0] * scale.x;
		result[1] = matrix[1] * scale.x;
		result[2] = matrix[2] * scale.x;
		result[3] = matrix[3] * scale.y;
		result[4] = matrix[4] * scale.y;
		result[5] = matrix[5] * scale.y;
		result[6] = matrix[6] * scale.z;
		result[7] = matrix[7] * scale.z;
		result[8] = matrix[8] * scale.z;
		return result;
	}
	static negate(matrix, result) {
		result[0] = -matrix[0];
		result[1] = -matrix[1];
		result[2] = -matrix[2];
		result[3] = -matrix[3];
		result[4] = -matrix[4];
		result[5] = -matrix[5];
		result[6] = -matrix[6];
		result[7] = -matrix[7];
		result[8] = -matrix[8];
		return result;
	}
	static transpose(matrix, result) {
		const column0Row0 = matrix[0];
		const column0Row1 = matrix[3];
		const column0Row2 = matrix[6];
		const column1Row0 = matrix[1];
		const column1Row1 = matrix[4];
		const column1Row2 = matrix[7];
		const column2Row0 = matrix[2];
		const column2Row1 = matrix[5];
		const column2Row2 = matrix[8];
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = column1Row0;
		result[4] = column1Row1;
		result[5] = column1Row2;
		result[6] = column2Row0;
		result[7] = column2Row1;
		result[8] = column2Row2;
		return result;
	}
	static abs(matrix, result) {
		result[0] = Math.abs(matrix[0]);
		result[1] = Math.abs(matrix[1]);
		result[2] = Math.abs(matrix[2]);
		result[3] = Math.abs(matrix[3]);
		result[4] = Math.abs(matrix[4]);
		result[5] = Math.abs(matrix[5]);
		result[6] = Math.abs(matrix[6]);
		result[7] = Math.abs(matrix[7]);
		result[8] = Math.abs(matrix[8]);
		return result;
	}
	static determinant(matrix) {
		const m11 = matrix[0];
		const m21 = matrix[3];
		const m31 = matrix[6];
		const m12 = matrix[1];
		const m22 = matrix[4];
		const m32 = matrix[7];
		const m13 = matrix[2];
		const m23 = matrix[5];
		const m33 = matrix[8];
		return m11 * (m22 * m33 - m23 * m32) + m12 * (m23 * m31 - m21 * m33) + m13 * (m21 * m32 - m22 * m31);
	}
	static inverse(matrix, result) {
		const m11 = matrix[0];
		const m21 = matrix[1];
		const m31 = matrix[2];
		const m12 = matrix[3];
		const m22 = matrix[4];
		const m32 = matrix[5];
		const m13 = matrix[6];
		const m23 = matrix[7];
		const m33 = matrix[8];
		const determinant = Matrix3.determinant(matrix);
		//>>includeStart('debug', pragmas.debug);
		if (Math.abs(determinant) <= GMath.EPSILON15) {
			throw new Error("matrix is not invertible");
		}
		//>>includeEnd('debug');
		result[0] = m22 * m33 - m23 * m32;
		result[1] = m23 * m31 - m21 * m33;
		result[2] = m21 * m32 - m22 * m31;
		result[3] = m13 * m32 - m12 * m33;
		result[4] = m11 * m33 - m13 * m31;
		result[5] = m12 * m31 - m11 * m32;
		result[6] = m12 * m23 - m13 * m22;
		result[7] = m13 * m21 - m11 * m23;
		result[8] = m11 * m22 - m12 * m21;
		const scale = 1.0 / determinant;
		return Matrix3.multiplyByScalar(result, scale, result);
	}
	static inverseTranspose(matrix, result) {
		return Matrix3.inverse(Matrix3.transpose(matrix, scratchTransposeMatrix$1), result);
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				left[0] === right[0] &&
				left[1] === right[1] &&
				left[2] === right[2] &&
				left[3] === right[3] &&
				left[4] === right[4] &&
				left[5] === right[5] &&
				left[6] === right[6] &&
				left[7] === right[7] &&
				left[8] === right[8])
		);
	}
	static equalsEpsilon(left, right, epsilon = 0) {
		epsilon = defaultValue(epsilon, 0);
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				Math.abs(left[0] - right[0]) <= epsilon &&
				Math.abs(left[1] - right[1]) <= epsilon &&
				Math.abs(left[2] - right[2]) <= epsilon &&
				Math.abs(left[3] - right[3]) <= epsilon &&
				Math.abs(left[4] - right[4]) <= epsilon &&
				Math.abs(left[5] - right[5]) <= epsilon &&
				Math.abs(left[6] - right[6]) <= epsilon &&
				Math.abs(left[7] - right[7]) <= epsilon &&
				Math.abs(left[8] - right[8]) <= epsilon)
		);
	}
	clone(result) {
		return Matrix3.clone(this, result);
	}
	equals(right) {
		return Matrix3.equals(this, right);
	}
	/**
	 * @private
	 */
	equalsArray(matrix, array, offset) {
		return (
			matrix[0] === array[offset] &&
			matrix[1] === array[offset + 1] &&
			matrix[2] === array[offset + 2] &&
			matrix[3] === array[offset + 3] &&
			matrix[4] === array[offset + 4] &&
			matrix[5] === array[offset + 5] &&
			matrix[6] === array[offset + 6] &&
			matrix[7] === array[offset + 7] &&
			matrix[8] === array[offset + 8]
		);
	}
	/**
	 * Compares this matrix to the provided matrix componentwise and returns
	 * <code>true</code> if they are within the provided epsilon,
	 * <code>false</code> otherwise.
	 *
	 * @param {Matrix3} [right] The right hand side matrix.
	 * @param {Number} [epsilon=0] The epsilon to use for equality testing.
	 * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.
	 */
	equalsEpsilon(right, epsilon) {
		return Matrix3.equalsEpsilon(this, right, epsilon);
	}
	toString() {
		return (
			`(${this[0]}, ${this[3]}, ${this[6]})\n` +
			`(${this[1]}, ${this[4]}, ${this[7]})\n` +
			`(${this[2]}, ${this[5]}, ${this[8]})`
		);
	}
}
Matrix3.IDENTITY = Object.freeze(new Matrix3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0));
Matrix3.ZERO = Object.freeze(new Matrix3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
const scaleScratch1$1 = new Vector3();
new Vector3();
const scratchColumn$1 = new Vector3();
const scaleScratch3$1 = new Vector3();
const scaleScratch4$1 = new Vector3();
const scaleScratch5$1 = new Vector3();
const scratchTransposeMatrix$1 = new Matrix3();

class Matrix4 {
	/**
	 * A 4x4 matrix, indexable as a column-major order array.
	 * @param {Number} [column0Row0=0.0] The value for column 0, row 0.
	 * @param {Number} [column1Row0=0.0] The value for column 1, row 0.
	 * @param {Number} [column2Row0=0.0] The value for column 2, row 0.
	 * @param {Number} [column3Row0=0.0] The value for column 3, row 0.
	 * @param {Number} [column0Row1=0.0] The value for column 0, row 1.
	 * @param {Number} [column1Row1=0.0] The value for column 1, row 1.
	 * @param {Number} [column2Row1=0.0] The value for column 2, row 1.
	 * @param {Number} [column3Row1=0.0] The value for column 3, row 1.
	 * @param {Number} [column0Row2=0.0] The value for column 0, row 2.
	 * @param {Number} [column1Row2=0.0] The value for column 1, row 2.
	 * @param {Number} [column2Row2=0.0] The value for column 2, row 2.
	 * @param {Number} [column3Row2=0.0] The value for column 3, row 2.
	 * @param {Number} [column0Row3=0.0] The value for column 0, row 3.
	 * @param {Number} [column1Row3=0.0] The value for column 1, row 3.
	 * @param {Number} [column2Row3=0.0] The value for column 2, row 3.
	 * @param {Number} [column3Row3=0.0] The value for column 3, row 3.
	 */
	constructor(
		column0Row0 = 0,
		column1Row0 = 0,
		column2Row0 = 0,
		column3Row0 = 0,
		column0Row1 = 0,
		column1Row1 = 0,
		column2Row1 = 0,
		column3Row1 = 0,
		column0Row2 = 0,
		column1Row2 = 0,
		column2Row2 = 0,
		column3Row2 = 0,
		column0Row3 = 0,
		column1Row3 = 0,
		column2Row3 = 0,
		column3Row3 = 0
	) {
		this[0] = column0Row0;
		this[1] = column0Row1;
		this[2] = column0Row2;
		this[3] = column0Row3;
		this[4] = column1Row0;
		this[5] = column1Row1;
		this[6] = column1Row2;
		this[7] = column1Row3;
		this[8] = column2Row0;
		this[9] = column2Row1;
		this[10] = column2Row2;
		this[11] = column2Row3;
		this[12] = column3Row0;
		this[13] = column3Row1;
		this[14] = column3Row2;
		this[15] = column3Row3;
	}
	//????
	clone(result) {
		return Matrix4.clone(this, result);
	}
	equals(right) {
		return Matrix4.equals(this, right);
	}
	equalsEpsilon(right, epsilon = 0) {
		return Matrix4.equalsEpsilon(this, right, epsilon);
	}
	lookAt(eye, target, up) {
		const matrix = this;
		Vector3.subtract(eye, target, z);
		if (z.length() === 0) {
			// eye and target are in the same position
			z.z = 1;
		}
		z.normalize();
		Vector3.cross(up, z, x);
		if (x.length() === 0) {
			// up and z are parallel
			if (Math.abs(up.z) === 1) {
				z.x += 0.0001;
			} else {
				z.z += 0.0001;
			}
			z.normalize();
			Vector3.cross(up, z, x);
		}
		x.normalize();
		Vector3.cross(z, x, y);
		matrix[0] = x.x;
		matrix[4] = y.x;
		matrix[8] = z.x;
		matrix[1] = x.y;
		matrix[5] = y.y;
		matrix[9] = z.y;
		matrix[2] = x.z;
		matrix[6] = y.z;
		matrix[10] = z.z;
		return this;
	}
	toString() {
		return (
			`(${this[0]}, ${this[4]}, ${this[8]}, ${this[12]})\n` +
			`(${this[1]}, ${this[5]}, ${this[9]}, ${this[13]})\n` +
			`(${this[2]}, ${this[6]}, ${this[10]}, ${this[14]})\n` +
			`(${this[3]}, ${this[7]}, ${this[11]}, ${this[15]})`
		);
	}
	static clone(matrix, result) {
		if (!defined(matrix)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Matrix4(
				matrix[0],
				matrix[4],
				matrix[8],
				matrix[12],
				matrix[1],
				matrix[5],
				matrix[9],
				matrix[13],
				matrix[2],
				matrix[6],
				matrix[10],
				matrix[14],
				matrix[3],
				matrix[7],
				matrix[11],
				matrix[15]
			);
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		result[9] = matrix[9];
		result[10] = matrix[10];
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static fromColumnMajorArray(values, result) {
		return Matrix4.clone(values, result);
	}
	static fromRowMajorArray(values, result) {
		if (!defined(result)) {
			return new Matrix4(
				values[0],
				values[1],
				values[2],
				values[3],
				values[4],
				values[5],
				values[6],
				values[7],
				values[8],
				values[9],
				values[10],
				values[11],
				values[12],
				values[13],
				values[14],
				values[15]
			);
		}
		result[0] = values[0];
		result[1] = values[4];
		result[2] = values[8];
		result[3] = values[12];
		result[4] = values[1];
		result[5] = values[5];
		result[6] = values[9];
		result[7] = values[13];
		result[8] = values[2];
		result[9] = values[6];
		result[10] = values[10];
		result[11] = values[14];
		result[12] = values[3];
		result[13] = values[7];
		result[14] = values[11];
		result[15] = values[15];
		return result;
	}
	static fromRotationTranslation(rotation, translation, result) {
		translation = defaultValue(translation, Vector3.ZERO);
		if (!defined(result)) {
			return new Matrix4(
				rotation[0],
				rotation[3],
				rotation[6],
				translation.x,
				rotation[1],
				rotation[4],
				rotation[7],
				translation.y,
				rotation[2],
				rotation[5],
				rotation[8],
				translation.z,
				0.0,
				0.0,
				0.0,
				1.0
			);
		}
		result[0] = rotation[0];
		result[1] = rotation[1];
		result[2] = rotation[2];
		result[3] = 0.0;
		result[4] = rotation[3];
		result[5] = rotation[4];
		result[6] = rotation[5];
		result[7] = 0.0;
		result[8] = rotation[6];
		result[9] = rotation[7];
		result[10] = rotation[8];
		result[11] = 0.0;
		result[12] = translation.x;
		result[13] = translation.y;
		result[14] = translation.z;
		result[15] = 1.0;
		return result;
	}
	static fromTranslationQuaternionRotationScale(translation, rotation, scale, result) {
		if (!defined(result)) {
			result = new Matrix4();
		}
		const scaleX = scale.x;
		const scaleY = scale.y;
		const scaleZ = scale.z;
		const x2 = rotation.x * rotation.x;
		const xy = rotation.x * rotation.y;
		const xz = rotation.x * rotation.z;
		const xw = rotation.x * rotation.w;
		const y2 = rotation.y * rotation.y;
		const yz = rotation.y * rotation.z;
		const yw = rotation.y * rotation.w;
		const z2 = rotation.z * rotation.z;
		const zw = rotation.z * rotation.w;
		const w2 = rotation.w * rotation.w;
		const m00 = x2 - y2 - z2 + w2;
		const m01 = 2.0 * (xy - zw);
		const m02 = 2.0 * (xz + yw);
		const m10 = 2.0 * (xy + zw);
		const m11 = -x2 + y2 - z2 + w2;
		const m12 = 2.0 * (yz - xw);
		const m20 = 2.0 * (xz - yw);
		const m21 = 2.0 * (yz + xw);
		const m22 = -x2 - y2 + z2 + w2;
		result[0] = m00 * scaleX;
		result[1] = m10 * scaleX;
		result[2] = m20 * scaleX;
		result[3] = 0.0;
		result[4] = m01 * scaleY;
		result[5] = m11 * scaleY;
		result[6] = m21 * scaleY;
		result[7] = 0.0;
		result[8] = m02 * scaleZ;
		result[9] = m12 * scaleZ;
		result[10] = m22 * scaleZ;
		result[11] = 0.0;
		result[12] = translation.x;
		result[13] = translation.y;
		result[14] = translation.z;
		result[15] = 1.0;
		return result;
	}
	static fromTranslationRotationScale(translationRotationScale, result) {
		return Matrix4.fromTranslationQuaternionRotationScale(
			translationRotationScale.translation,
			translationRotationScale.rotation,
			translationRotationScale.scale,
			result
		);
	}
	static fromTranslation(translation, result) {
		return Matrix4.fromRotationTranslation(Matrix3.IDENTITY, translation, result);
	}
	static fromScale(scale, result) {
		if (!defined(result)) {
			return new Matrix4(
				scale.x,
				0.0,
				0.0,
				0.0,
				0.0,
				scale.y,
				0.0,
				0.0,
				0.0,
				0.0,
				scale.z,
				0.0,
				0.0,
				0.0,
				0.0,
				1.0
			);
		}
		result[0] = scale.x;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = 0.0;
		result[5] = scale.y;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = 0.0;
		result[9] = 0.0;
		result[10] = scale.z;
		result[11] = 0.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = 0.0;
		result[15] = 1.0;
		return result;
	}
	static fromRotation(rotation, result) {
		if (!defined(result)) {
			result = new Matrix4();
		}
		result[0] = rotation[0];
		result[1] = rotation[1];
		result[2] = rotation[2];
		result[3] = 0.0;
		result[4] = rotation[3];
		result[5] = rotation[4];
		result[6] = rotation[5];
		result[7] = 0.0;
		result[8] = rotation[6];
		result[9] = rotation[7];
		result[10] = rotation[8];
		result[11] = 0.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = 0.0;
		result[15] = 1.0;
		return result;
	}
	static makePerspective(left, right, top, bottom, near, far) {
		// from three.js
		const matrix = new Matrix4();
		const x = (2 * near) / (right - left);
		const y = (2 * near) / (top - bottom);
		const a = (right + left) / (right - left);
		const b = (top + bottom) / (top - bottom);
		const c = -far / (far - near);
		const d = (-far * near) / (far - near);
		matrix[0] = x;
		matrix[4] = 0;
		matrix[8] = a;
		matrix[12] = 0;
		matrix[1] = 0;
		matrix[5] = y;
		matrix[9] = b;
		matrix[13] = 0;
		matrix[2] = 0;
		matrix[6] = 0;
		matrix[10] = c;
		matrix[14] = d;
		matrix[3] = 0;
		matrix[7] = 0;
		matrix[11] = -1;
		matrix[15] = 0;
		return matrix;
	}
	static makeOrthographic(left, right, top, bottom, near, far) {
		const matrix = new Matrix4();
		const w = 1.0 / (right - left);
		const h = 1.0 / (top - bottom);
		const p = 1.0 / (far - near);
		const x = (right + left) * w;
		const y = (top + bottom) * h;
		const z = near * p;
		matrix[0] = 2 * w;
		matrix[4] = 0;
		matrix[8] = 0;
		matrix[12] = -x;
		matrix[1] = 0;
		matrix[5] = 2 * h;
		matrix[9] = 0;
		matrix[13] = -y;
		matrix[2] = 0;
		matrix[6] = 0;
		matrix[10] = -1 * p;
		matrix[14] = -z;
		matrix[3] = 0;
		matrix[7] = 0;
		matrix[11] = 0;
		matrix[15] = 1;
		return matrix;
	}
	toArray() {
		const result = [];
		Matrix4.toArray(this, result);
		return result;
	}
	/**
	 * Computes an Array from the provided Matrix4 instance.
	 * The array will be in column-major order.
	 * @example
	 * //create an array from an instance of Matrix4
	 * // m = [10.0, 14.0, 18.0, 22.0]
	 * //     [11.0, 15.0, 19.0, 23.0]
	 * //     [12.0, 16.0, 20.0, 24.0]
	 * //     [13.0, 17.0, 21.0, 25.0]
	 * const a = Matrix4.toArray(m);
	 *
	 * // m remains the same
	 * //creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]
	 */
	static toArray(matrix, result) {
		if (!defined(result)) {
			return [
				matrix[0],
				matrix[1],
				matrix[2],
				matrix[3],
				matrix[4],
				matrix[5],
				matrix[6],
				matrix[7],
				matrix[8],
				matrix[9],
				matrix[10],
				matrix[11],
				matrix[12],
				matrix[13],
				matrix[14],
				matrix[15]
			];
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		result[9] = matrix[9];
		result[10] = matrix[10];
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static getElementIndex(column, row) {
		return column * 4 + row;
	}
	static getColumn(matrix, index, result) {
		const startIndex = index * 4;
		const x = matrix[startIndex];
		const y = matrix[startIndex + 1];
		const z = matrix[startIndex + 2];
		const w = matrix[startIndex + 3];
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static setColumn(matrix, index, cartesian, result) {
		result = Matrix4.clone(matrix, result);
		const startIndex = index * 4;
		result[startIndex] = cartesian.x;
		result[startIndex + 1] = cartesian.y;
		result[startIndex + 2] = cartesian.z;
		result[startIndex + 3] = cartesian.w;
		return result;
	}
	static getRow(matrix, index, result) {
		const x = matrix[index];
		const y = matrix[index + 4];
		const z = matrix[index + 8];
		const w = matrix[index + 12];
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static setRow(matrix, index, cartesian, result) {
		result = Matrix4.clone(matrix, result);
		result[index] = cartesian.x;
		result[index + 4] = cartesian.y;
		result[index + 8] = cartesian.z;
		result[index + 12] = cartesian.w;
		return result;
	}
	static setTranslation(matrix, translation, result) {
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		result[9] = matrix[9];
		result[10] = matrix[10];
		result[11] = matrix[11];
		result[12] = translation.x;
		result[13] = translation.y;
		result[14] = translation.z;
		result[15] = matrix[15];
		return result;
	}
	static setScale(matrix, scale, result) {
		const existingScale = Matrix4.getScale(matrix, scaleScratch1);
		const scaleRatioX = scale.x / existingScale.x;
		const scaleRatioY = scale.y / existingScale.y;
		const scaleRatioZ = scale.z / existingScale.z;
		result[0] = matrix[0] * scaleRatioX;
		result[1] = matrix[1] * scaleRatioX;
		result[2] = matrix[2] * scaleRatioX;
		result[3] = matrix[3];
		result[4] = matrix[4] * scaleRatioY;
		result[5] = matrix[5] * scaleRatioY;
		result[6] = matrix[6] * scaleRatioY;
		result[7] = matrix[7];
		result[8] = matrix[8] * scaleRatioZ;
		result[9] = matrix[9] * scaleRatioZ;
		result[10] = matrix[10] * scaleRatioZ;
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static getScale(matrix, result) {
		result.x = Vector3.magnitude(Vector3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));
		result.y = Vector3.magnitude(Vector3.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn));
		result.z = Vector3.magnitude(Vector3.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn));
		return result;
	}
	static getMaximumScale(matrix) {
		Matrix4.getScale(matrix, scaleScratch3);
		return Vector3.maximumComponent(scaleScratch3);
	}
	static setRotation(matrix, rotation, result) {
		const scale = Matrix4.getScale(matrix, scaleScratch4);
		result[0] = rotation[0] * scale.x;
		result[1] = rotation[1] * scale.x;
		result[2] = rotation[2] * scale.x;
		result[3] = matrix[3];
		result[4] = rotation[3] * scale.y;
		result[5] = rotation[4] * scale.y;
		result[6] = rotation[5] * scale.y;
		result[7] = matrix[7];
		result[8] = rotation[6] * scale.z;
		result[9] = rotation[7] * scale.z;
		result[10] = rotation[8] * scale.z;
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static getRotation(matrix, result) {
		const scale = Matrix4.getScale(matrix, scaleScratch5);
		result[0] = matrix[0] / scale.x;
		result[1] = matrix[1] / scale.x;
		result[2] = matrix[2] / scale.x;
		result[3] = matrix[4] / scale.y;
		result[4] = matrix[5] / scale.y;
		result[5] = matrix[6] / scale.y;
		result[6] = matrix[8] / scale.z;
		result[7] = matrix[9] / scale.z;
		result[8] = matrix[10] / scale.z;
		return result;
	}
	static multiply(left, right, result) {
		const left0 = left[0];
		const left1 = left[1];
		const left2 = left[2];
		const left3 = left[3];
		const left4 = left[4];
		const left5 = left[5];
		const left6 = left[6];
		const left7 = left[7];
		const left8 = left[8];
		const left9 = left[9];
		const left10 = left[10];
		const left11 = left[11];
		const left12 = left[12];
		const left13 = left[13];
		const left14 = left[14];
		const left15 = left[15];
		const right0 = right[0];
		const right1 = right[1];
		const right2 = right[2];
		const right3 = right[3];
		const right4 = right[4];
		const right5 = right[5];
		const right6 = right[6];
		const right7 = right[7];
		const right8 = right[8];
		const right9 = right[9];
		const right10 = right[10];
		const right11 = right[11];
		const right12 = right[12];
		const right13 = right[13];
		const right14 = right[14];
		const right15 = right[15];
		const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;
		const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;
		const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;
		const column0Row3 = left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;
		const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;
		const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;
		const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;
		const column1Row3 = left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;
		const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;
		const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;
		const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;
		const column2Row3 = left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;
		const column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;
		const column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;
		const column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;
		const column3Row3 = left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = column0Row3;
		result[4] = column1Row0;
		result[5] = column1Row1;
		result[6] = column1Row2;
		result[7] = column1Row3;
		result[8] = column2Row0;
		result[9] = column2Row1;
		result[10] = column2Row2;
		result[11] = column2Row3;
		result[12] = column3Row0;
		result[13] = column3Row1;
		result[14] = column3Row2;
		result[15] = column3Row3;
		return result;
	}
	static add(left, right, result) {
		result[0] = left[0] + right[0];
		result[1] = left[1] + right[1];
		result[2] = left[2] + right[2];
		result[3] = left[3] + right[3];
		result[4] = left[4] + right[4];
		result[5] = left[5] + right[5];
		result[6] = left[6] + right[6];
		result[7] = left[7] + right[7];
		result[8] = left[8] + right[8];
		result[9] = left[9] + right[9];
		result[10] = left[10] + right[10];
		result[11] = left[11] + right[11];
		result[12] = left[12] + right[12];
		result[13] = left[13] + right[13];
		result[14] = left[14] + right[14];
		result[15] = left[15] + right[15];
		return result;
	}
	static subtract(left, right, result) {
		result[0] = left[0] - right[0];
		result[1] = left[1] - right[1];
		result[2] = left[2] - right[2];
		result[3] = left[3] - right[3];
		result[4] = left[4] - right[4];
		result[5] = left[5] - right[5];
		result[6] = left[6] - right[6];
		result[7] = left[7] - right[7];
		result[8] = left[8] - right[8];
		result[9] = left[9] - right[9];
		result[10] = left[10] - right[10];
		result[11] = left[11] - right[11];
		result[12] = left[12] - right[12];
		result[13] = left[13] - right[13];
		result[14] = left[14] - right[14];
		result[15] = left[15] - right[15];
		return result;
	}
	static multiplyTransformation(left, right, result) {
		const left0 = left[0];
		const left1 = left[1];
		const left2 = left[2];
		const left4 = left[4];
		const left5 = left[5];
		const left6 = left[6];
		const left8 = left[8];
		const left9 = left[9];
		const left10 = left[10];
		const left12 = left[12];
		const left13 = left[13];
		const left14 = left[14];
		const right0 = right[0];
		const right1 = right[1];
		const right2 = right[2];
		const right4 = right[4];
		const right5 = right[5];
		const right6 = right[6];
		const right8 = right[8];
		const right9 = right[9];
		const right10 = right[10];
		const right12 = right[12];
		const right13 = right[13];
		const right14 = right[14];
		const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;
		const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;
		const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;
		const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;
		const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;
		const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;
		const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;
		const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;
		const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;
		const column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12;
		const column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13;
		const column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14;
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = 0.0;
		result[4] = column1Row0;
		result[5] = column1Row1;
		result[6] = column1Row2;
		result[7] = 0.0;
		result[8] = column2Row0;
		result[9] = column2Row1;
		result[10] = column2Row2;
		result[11] = 0.0;
		result[12] = column3Row0;
		result[13] = column3Row1;
		result[14] = column3Row2;
		result[15] = 1.0;
		return result;
	}
	static multiplyByMatrix3(matrix, rotation, result) {
		const left0 = matrix[0];
		const left1 = matrix[1];
		const left2 = matrix[2];
		const left4 = matrix[4];
		const left5 = matrix[5];
		const left6 = matrix[6];
		const left8 = matrix[8];
		const left9 = matrix[9];
		const left10 = matrix[10];
		const right0 = rotation[0];
		const right1 = rotation[1];
		const right2 = rotation[2];
		const right4 = rotation[3];
		const right5 = rotation[4];
		const right6 = rotation[5];
		const right8 = rotation[6];
		const right9 = rotation[7];
		const right10 = rotation[8];
		const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;
		const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;
		const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;
		const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;
		const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;
		const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;
		const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;
		const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;
		const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = 0.0;
		result[4] = column1Row0;
		result[5] = column1Row1;
		result[6] = column1Row2;
		result[7] = 0.0;
		result[8] = column2Row0;
		result[9] = column2Row1;
		result[10] = column2Row2;
		result[11] = 0.0;
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static multiplyByTranslation(matrix, translation, result) {
		const x = translation.x;
		const y = translation.y;
		const z = translation.z;
		const tx = x * matrix[0] + y * matrix[4] + z * matrix[8] + matrix[12];
		const ty = x * matrix[1] + y * matrix[5] + z * matrix[9] + matrix[13];
		const tz = x * matrix[2] + y * matrix[6] + z * matrix[10] + matrix[14];
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		result[9] = matrix[9];
		result[10] = matrix[10];
		result[11] = matrix[11];
		result[12] = tx;
		result[13] = ty;
		result[14] = tz;
		result[15] = matrix[15];
		return result;
	}
	static multiplyByScale(matrix, scale, result) {
		const scaleX = scale.x;
		const scaleY = scale.y;
		const scaleZ = scale.z;
		// Faster than Vector3.equals
		if (scaleX === 1.0 && scaleY === 1.0 && scaleZ === 1.0) {
			return Matrix4.clone(matrix, result);
		}
		result[0] = scaleX * matrix[0];
		result[1] = scaleX * matrix[1];
		result[2] = scaleX * matrix[2];
		result[3] = matrix[3];
		result[4] = scaleY * matrix[4];
		result[5] = scaleY * matrix[5];
		result[6] = scaleY * matrix[6];
		result[7] = matrix[7];
		result[8] = scaleZ * matrix[8];
		result[9] = scaleZ * matrix[9];
		result[10] = scaleZ * matrix[10];
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static multiplyByUniformScale(matrix, scale, result) {
		result[0] = matrix[0] * scale;
		result[1] = matrix[1] * scale;
		result[2] = matrix[2] * scale;
		result[3] = matrix[3];
		result[4] = matrix[4] * scale;
		result[5] = matrix[5] * scale;
		result[6] = matrix[6] * scale;
		result[7] = matrix[7];
		result[8] = matrix[8] * scale;
		result[9] = matrix[9] * scale;
		result[10] = matrix[10] * scale;
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static multiplyByVector(matrix, cartesian, result) {
		const vX = cartesian.x;
		const vY = cartesian.y;
		const vZ = cartesian.z;
		const vW = cartesian.w;
		const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;
		const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;
		const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;
		const w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static multiplyByPointAsVector(matrix, cartesian, result) {
		const vX = cartesian.x;
		const vY = cartesian.y;
		const vZ = cartesian.z;
		const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;
		const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;
		const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static multiplyByPoint(matrix, cartesian, result) {
		const vX = cartesian.x;
		const vY = cartesian.y;
		const vZ = cartesian.z;
		const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];
		const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];
		const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static multiplyByScalar(matrix, scalar, result) {
		result[0] = matrix[0] * scalar;
		result[1] = matrix[1] * scalar;
		result[2] = matrix[2] * scalar;
		result[3] = matrix[3] * scalar;
		result[4] = matrix[4] * scalar;
		result[5] = matrix[5] * scalar;
		result[6] = matrix[6] * scalar;
		result[7] = matrix[7] * scalar;
		result[8] = matrix[8] * scalar;
		result[9] = matrix[9] * scalar;
		result[10] = matrix[10] * scalar;
		result[11] = matrix[11] * scalar;
		result[12] = matrix[12] * scalar;
		result[13] = matrix[13] * scalar;
		result[14] = matrix[14] * scalar;
		result[15] = matrix[15] * scalar;
		return result;
	}
	static negate(matrix, result) {
		result[0] = -matrix[0];
		result[1] = -matrix[1];
		result[2] = -matrix[2];
		result[3] = -matrix[3];
		result[4] = -matrix[4];
		result[5] = -matrix[5];
		result[6] = -matrix[6];
		result[7] = -matrix[7];
		result[8] = -matrix[8];
		result[9] = -matrix[9];
		result[10] = -matrix[10];
		result[11] = -matrix[11];
		result[12] = -matrix[12];
		result[13] = -matrix[13];
		result[14] = -matrix[14];
		result[15] = -matrix[15];
		return result;
	}
	static transpose(matrix, result) {
		const matrix1 = matrix[1];
		const matrix2 = matrix[2];
		const matrix3 = matrix[3];
		const matrix6 = matrix[6];
		const matrix7 = matrix[7];
		const matrix11 = matrix[11];
		result[0] = matrix[0];
		result[1] = matrix[4];
		result[2] = matrix[8];
		result[3] = matrix[12];
		result[4] = matrix1;
		result[5] = matrix[5];
		result[6] = matrix[9];
		result[7] = matrix[13];
		result[8] = matrix2;
		result[9] = matrix6;
		result[10] = matrix[10];
		result[11] = matrix[14];
		result[12] = matrix3;
		result[13] = matrix7;
		result[14] = matrix11;
		result[15] = matrix[15];
		return result;
	}
	static abs(matrix, result) {
		result[0] = Math.abs(matrix[0]);
		result[1] = Math.abs(matrix[1]);
		result[2] = Math.abs(matrix[2]);
		result[3] = Math.abs(matrix[3]);
		result[4] = Math.abs(matrix[4]);
		result[5] = Math.abs(matrix[5]);
		result[6] = Math.abs(matrix[6]);
		result[7] = Math.abs(matrix[7]);
		result[8] = Math.abs(matrix[8]);
		result[9] = Math.abs(matrix[9]);
		result[10] = Math.abs(matrix[10]);
		result[11] = Math.abs(matrix[11]);
		result[12] = Math.abs(matrix[12]);
		result[13] = Math.abs(matrix[13]);
		result[14] = Math.abs(matrix[14]);
		result[15] = Math.abs(matrix[15]);
		return result;
	}
	static equals(left, right) {
		// Given that most matrices will be transformation matrices, the elements
		// are tested in order such that the test is likely to fail as early
		// as possible.  I _think_ this is just as friendly to the L1 cache
		// as testing in index order.  It is certainty faster in practice.
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				// Translation
				left[12] === right[12] &&
				left[13] === right[13] &&
				left[14] === right[14] &&
				// Rotation/scale
				left[0] === right[0] &&
				left[1] === right[1] &&
				left[2] === right[2] &&
				left[4] === right[4] &&
				left[5] === right[5] &&
				left[6] === right[6] &&
				left[8] === right[8] &&
				left[9] === right[9] &&
				left[10] === right[10] &&
				// Bottom row
				left[3] === right[3] &&
				left[7] === right[7] &&
				left[11] === right[11] &&
				left[15] === right[15])
		);
	}
	static equalsEpsilon(left, right, epsilon) {
		epsilon = defaultValue(epsilon, 0);
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				Math.abs(left[0] - right[0]) <= epsilon &&
				Math.abs(left[1] - right[1]) <= epsilon &&
				Math.abs(left[2] - right[2]) <= epsilon &&
				Math.abs(left[3] - right[3]) <= epsilon &&
				Math.abs(left[4] - right[4]) <= epsilon &&
				Math.abs(left[5] - right[5]) <= epsilon &&
				Math.abs(left[6] - right[6]) <= epsilon &&
				Math.abs(left[7] - right[7]) <= epsilon &&
				Math.abs(left[8] - right[8]) <= epsilon &&
				Math.abs(left[9] - right[9]) <= epsilon &&
				Math.abs(left[10] - right[10]) <= epsilon &&
				Math.abs(left[11] - right[11]) <= epsilon &&
				Math.abs(left[12] - right[12]) <= epsilon &&
				Math.abs(left[13] - right[13]) <= epsilon &&
				Math.abs(left[14] - right[14]) <= epsilon &&
				Math.abs(left[15] - right[15]) <= epsilon)
		);
	}
	static getTranslation(matrix, result) {
		result.x = matrix[12];
		result.y = matrix[13];
		result.z = matrix[14];
		return result;
	}
	static getMatrix3(matrix, result) {
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[4];
		result[4] = matrix[5];
		result[5] = matrix[6];
		result[6] = matrix[8];
		result[7] = matrix[9];
		result[8] = matrix[10];
		return result;
	}
	static inverse(matrix, result) {
		//
		// Ported from:
		//   ftp://download.intel.com/design/PentiumIII/sml/24504301.pdf
		//
		const src0 = matrix[0];
		const src1 = matrix[4];
		const src2 = matrix[8];
		const src3 = matrix[12];
		const src4 = matrix[1];
		const src5 = matrix[5];
		const src6 = matrix[9];
		const src7 = matrix[13];
		const src8 = matrix[2];
		const src9 = matrix[6];
		const src10 = matrix[10];
		const src11 = matrix[14];
		const src12 = matrix[3];
		const src13 = matrix[7];
		const src14 = matrix[11];
		const src15 = matrix[15];
		// calculate pairs for first 8 elements (cofactors)
		let tmp0 = src10 * src15;
		let tmp1 = src11 * src14;
		let tmp2 = src9 * src15;
		let tmp3 = src11 * src13;
		let tmp4 = src9 * src14;
		let tmp5 = src10 * src13;
		let tmp6 = src8 * src15;
		let tmp7 = src11 * src12;
		let tmp8 = src8 * src14;
		let tmp9 = src10 * src12;
		let tmp10 = src8 * src13;
		let tmp11 = src9 * src12;
		// calculate first 8 elements (cofactors)
		const dst0 = tmp0 * src5 + tmp3 * src6 + tmp4 * src7 - (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);
		const dst1 = tmp1 * src4 + tmp6 * src6 + tmp9 * src7 - (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);
		const dst2 = tmp2 * src4 + tmp7 * src5 + tmp10 * src7 - (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);
		const dst3 = tmp5 * src4 + tmp8 * src5 + tmp11 * src6 - (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);
		const dst4 = tmp1 * src1 + tmp2 * src2 + tmp5 * src3 - (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);
		const dst5 = tmp0 * src0 + tmp7 * src2 + tmp8 * src3 - (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);
		const dst6 = tmp3 * src0 + tmp6 * src1 + tmp11 * src3 - (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);
		const dst7 = tmp4 * src0 + tmp9 * src1 + tmp10 * src2 - (tmp5 * src0 + tmp8 * src1 + tmp11 * src2);
		// calculate pairs for second 8 elements (cofactors)
		tmp0 = src2 * src7;
		tmp1 = src3 * src6;
		tmp2 = src1 * src7;
		tmp3 = src3 * src5;
		tmp4 = src1 * src6;
		tmp5 = src2 * src5;
		tmp6 = src0 * src7;
		tmp7 = src3 * src4;
		tmp8 = src0 * src6;
		tmp9 = src2 * src4;
		tmp10 = src0 * src5;
		tmp11 = src1 * src4;
		// calculate second 8 elements (cofactors)
		const dst8 = tmp0 * src13 + tmp3 * src14 + tmp4 * src15 - (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);
		const dst9 = tmp1 * src12 + tmp6 * src14 + tmp9 * src15 - (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);
		const dst10 = tmp2 * src12 + tmp7 * src13 + tmp10 * src15 - (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);
		const dst11 = tmp5 * src12 + tmp8 * src13 + tmp11 * src14 - (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);
		const dst12 = tmp2 * src10 + tmp5 * src11 + tmp1 * src9 - (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);
		const dst13 = tmp8 * src11 + tmp0 * src8 + tmp7 * src10 - (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);
		const dst14 = tmp6 * src9 + tmp11 * src11 + tmp3 * src8 - (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);
		const dst15 = tmp10 * src10 + tmp4 * src8 + tmp9 * src9 - (tmp8 * src9 + tmp11 * src10 + tmp5 * src8);
		// calculate determinant
		let det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;
		if (Math.abs(det) < GMath.EPSILON21) {
			// Special case for a zero scale matrix that can occur, for example,
			// when a model's node has a [0, 0, 0] scale.
			if (
				Matrix3.equalsEpsilon(
					Matrix4.getMatrix3(matrix, scratchInverseRotation),
					scratchMatrix3Zero,
					GMath.EPSILON7
				) &&
				Vector4.equals(Matrix4.getRow(matrix, 3, scratchBottomRow), scratchExpectedBottomRow)
			) {
				result[0] = 0.0;
				result[1] = 0.0;
				result[2] = 0.0;
				result[3] = 0.0;
				result[4] = 0.0;
				result[5] = 0.0;
				result[6] = 0.0;
				result[7] = 0.0;
				result[8] = 0.0;
				result[9] = 0.0;
				result[10] = 0.0;
				result[11] = 0.0;
				result[12] = -matrix[12];
				result[13] = -matrix[13];
				result[14] = -matrix[14];
				result[15] = 1.0;
				return result;
			}
			throw new Error("matrix is not invertible because its determinate is zero.");
		}
		// calculate matrix inverse
		det = 1.0 / det;
		result[0] = dst0 * det;
		result[1] = dst1 * det;
		result[2] = dst2 * det;
		result[3] = dst3 * det;
		result[4] = dst4 * det;
		result[5] = dst5 * det;
		result[6] = dst6 * det;
		result[7] = dst7 * det;
		result[8] = dst8 * det;
		result[9] = dst9 * det;
		result[10] = dst10 * det;
		result[11] = dst11 * det;
		result[12] = dst12 * det;
		result[13] = dst13 * det;
		result[14] = dst14 * det;
		result[15] = dst15 * det;
		return result;
	}
	static inverseTransformation(matrix, result) {
		//This function is an optimized version of the below 4 lines.
		//const rT = Matrix3.transpose(Matrix4.getMatrix3(matrix));
		//const rTN = Matrix3.negate(rT);
		//const rTT = Matrix3.multiplyByVector(rTN, Matrix4.getTranslation(matrix));
		//return Matrix4.fromRotationTranslation(rT, rTT, result);
		const matrix0 = matrix[0];
		const matrix1 = matrix[1];
		const matrix2 = matrix[2];
		const matrix4 = matrix[4];
		const matrix5 = matrix[5];
		const matrix6 = matrix[6];
		const matrix8 = matrix[8];
		const matrix9 = matrix[9];
		const matrix10 = matrix[10];
		const vX = matrix[12];
		const vY = matrix[13];
		const vZ = matrix[14];
		const x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;
		const y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;
		const z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;
		result[0] = matrix0;
		result[1] = matrix4;
		result[2] = matrix8;
		result[3] = 0.0;
		result[4] = matrix1;
		result[5] = matrix5;
		result[6] = matrix9;
		result[7] = 0.0;
		result[8] = matrix2;
		result[9] = matrix6;
		result[10] = matrix10;
		result[11] = 0.0;
		result[12] = x;
		result[13] = y;
		result[14] = z;
		result[15] = 1.0;
		return result;
	}
	static inverseTranspose(matrix, result) {
		return Matrix4.inverse(Matrix4.transpose(matrix, scratchTransposeMatrix), result);
	}
	/**
	 * @private
	 */
	static equalsArray(matrix, array, offset) {
		return (
			matrix[0] === array[offset] &&
			matrix[1] === array[offset + 1] &&
			matrix[2] === array[offset + 2] &&
			matrix[3] === array[offset + 3] &&
			matrix[4] === array[offset + 4] &&
			matrix[5] === array[offset + 5] &&
			matrix[6] === array[offset + 6] &&
			matrix[7] === array[offset + 7] &&
			matrix[8] === array[offset + 8] &&
			matrix[9] === array[offset + 9] &&
			matrix[10] === array[offset + 10] &&
			matrix[11] === array[offset + 11] &&
			matrix[12] === array[offset + 12] &&
			matrix[13] === array[offset + 13] &&
			matrix[14] === array[offset + 14] &&
			matrix[15] === array[offset + 15]
		);
	}
}
Matrix4.IDENTITY = Object.freeze(
	new Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)
);
Matrix4.ZERO = Object.freeze(
	new Matrix4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
);
const scratchTransposeMatrix = new Matrix4();
new Vector3();
new Vector3();
new Vector3();
const scaleScratch1 = new Vector3();
new Vector3();
const scratchColumn = new Vector3();
const scaleScratch3 = new Vector3();
const scaleScratch4 = new Vector3();
const scaleScratch5 = new Vector3();
const scratchInverseRotation = new Matrix3();
const scratchMatrix3Zero = new Matrix3();
const scratchBottomRow = new Vector4();
const scratchExpectedBottomRow = new Vector4(0.0, 0.0, 0.0, 1.0);
const x = new Vector3();
const y = new Vector3();
const z = new Vector3();

class Uniform {
	constructor(uniformName, cb, binding, offset) {
		this.name = uniformName;
		this.cb = cb;
		this.binding = defaultValue(binding, 0);
		this.offset = defaultValue(offset, 0);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.type = "number";
	}
	setBuffer(array, offset = 0) {
		for (let i = 0; i < array.length; i++) {
			this.buffer[i + offset] = array[i];
		}
	}
	set() {
		return undefined;
	}
	getValue() {
		let result;
		const cbType = typeof this.cb;
		switch (cbType) {
			case "object":
				result = this.cb[this.name] || this.cb;
				break;
			case "function":
				//@ts-ignore
				result = this.cb();
				break;
			case "number":
				result = this.cb;
				break;
			default:
				throw new Error("type is error");
		}
		return result;
	}
}
class UniformFloat extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = 0;
		this.byteSize = 4;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 1);
		this.type = "vec1";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		if (this.value !== this._value) {
			this._value = this.value;
			this.buffer[0] = this.value;
			return true;
		}
		return false;
	}
}
UniformFloat.align = 4;
class UniformFloatVec2 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Vector2();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 2);
		this.byteSize = 8;
		this.type = "vec2";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Vector2.equals(v, this._value)) {
			Vector2.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformFloatVec2.align = 8;
class UniformFloatVec3 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Vector3();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 3);
		this.byteSize = 12;
		this.type = "vec3";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Vector3.equals(v, this._value)) {
			Vector3.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformFloatVec3.align = 16;
class UniformFloatVec4 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Vector4();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 4);
		this.byteSize = 16;
		this.type = "vec4";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Vector4.equals(v, this._value)) {
			Vector4.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformFloatVec4.align = 16;
class UniformColor extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Color();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 3);
		this.byteSize = 12;
		this.type = "vec3";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Color.equals(v, this._value)) {
			Color.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformColor.align = 16;
class UniformMat2 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, offset);
		this.value = undefined;
		this._value = new Matrix2();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 4);
		this.byteSize = 16;
		this.type = "mat2";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Matrix2.equals(v, this._value)) {
			Matrix2.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformMat2.align = 8;
class UniformMat3 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Matrix3();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 9);
		this.byteSize = 48;
		this.type = "mat3";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Matrix3.equals(v, this._value)) {
			Matrix3.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformMat3.align = 16;
class UniformMat4 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Matrix4();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 16);
		this.byteSize = 64;
		this.type = "mat4";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Matrix4.equals(v, this._value)) {
			Matrix4.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformMat4.align = 16;
class UniformMatrix4Array extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.byteSize = count * 64;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "mat4-array";
	}
	set() {
		this.value = this.cb();
		for (let i = 0; i < this.value.length; i++) {
			this.setBuffer(this.value[i].toArray(), i * 16);
		}
		return true;
	}
}
UniformMatrix4Array.align = 16;
class UniformFloatArray extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, count);
		this.byteSize = 4 * count;
		this.type = "float-array";
	}
	set() {
		this.value = this.cb();
		for (let i = 0; i < this.value.length; i++) {
			this.buffer[i] = this.value[i];
		}
		return true;
	}
}
UniformFloatArray.align = 4;
class UniformVec2Array extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.byteSize = count * 8;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "vec2-array";
	}
	set() {
		this.value = this.cb();
		let j = 0;
		for (let i = 0; i < this.value.length; i++) {
			this.buffer[j] = this.value[i].x;
			this.buffer[j + 1] = this.value[i].y;
			j += 2;
		}
		return true;
	}
}
UniformVec2Array.align = 8;
class UniformVec3Array extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.byteSize = count * 16;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "vec3-array";
	}
	set() {
		this.value = this.cb();
		let j = 0;
		for (let i = 0; i < this.value.length; i++) {
			this.buffer[j] = this.value[i].x;
			this.buffer[j + 1] = this.value[i].y;
			this.buffer[j + 2] = this.value[i].z;
			this.buffer[j + 3] = 0;
			j += 4;
		}
		return true;
	}
}
UniformVec3Array.align = 16;
class UniformVec4Array extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.byteSize = count * 16;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "vec4-array";
	}
	set() {
		this.value = this.cb();
		let j = 0;
		for (let i = 0; i < this.value.length; i++) {
			this.buffer[j] = this.value[i].x;
			this.buffer[j + 1] = this.value[i].y;
			this.buffer[j + 2] = this.value[i].z;
			this.buffer[j + 3] = this.value[i].w;
			j += 4;
		}
		return true;
	}
}
UniformVec4Array.align = 16;
class UniformTexture extends Uniform {
	constructor(uniformName, binding, texture) {
		super(uniformName);
		this.binding = binding;
		this.type = "texture";
		this.visibility = ShaderStage.Fragment;
		this._texture = texture;
	}
	get layoutType() {
		return this.texture?.layoutType || "not yet bind";
	}
	bind(context) {
		this.texture = this._texture instanceof Function ? this._texture() : this._texture;
		this.texture.update(context);
	}
}
class UniformSampler extends Uniform {
	constructor(uniformName, binding, sampler) {
		super(uniformName);
		this.name = uniformName;
		this.binding = binding;
		this.type = "sampler";
		this.visibility = ShaderStage.Fragment;
		this._sampler = sampler;
	}
	get layoutType() {
		return this.sampler?.layoutType || "not yet bind";
	}
	bind(context) {
		this.sampler = this._sampler instanceof Function ? this._sampler() : this._sampler;
		this.sampler.update(context);
	}
}
class UniformSpotLights extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.cb = cb;
		this.byteSize = count * 64;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "spotsLight";
		this.visibility = ShaderStage.Fragment;
		this.dirty = false;
	}
	set() {
		this.lights = this.cb();
		this.lights.forEach((spotLight, index) => {
			this.setSubData(spotLight, index);
		});
		return this.dirty;
	}
	setSubData(spotLight, index) {
		const offset = index * 16;
		if (spotLight.positionDirty) {
			this.dirty = setDataToTypeArray(this.buffer, spotLight.position.toArray(), offset + 0); //byteOffset=0;
		}
		if (spotLight.distanceDirty) {
			this.dirty = setDataToTypeArray(this.buffer, spotLight.distance, offset + 3); //byteOffset=12;
		}
		if (spotLight.dirtectDirty) {
			this.dirty = setDataToTypeArray(this.buffer, spotLight.directional.toArray(), offset + 4); //byteOffset=16;
		}
		if (spotLight.coneCosDirty) {
			this.dirty = setDataToTypeArray(this.buffer, spotLight.coneCos, offset + 7); //byteOffset=28;
		}
		if (spotLight.colorDirty) {
			this.dirty = setDataToTypeArray(this.buffer, spotLight.color.toArray(), offset + 8); //byteOffset=32;
		}
		if (spotLight.penumbraCosDirty) {
			this.dirty = setDataToTypeArray(this.buffer, spotLight.penumbraCos, offset + 11); //byteOffset=44;
		}
		if (spotLight.decayDirty) {
			this.dirty = setDataToTypeArray(this.buffer, spotLight.decay, offset + 12); //byteOffset=48;
		}
		spotLight.positionDirty = false;
		spotLight.distanceDirty = false;
		spotLight.dirtectDirty = false;
		spotLight.coneCosDirty = false;
		spotLight.colorDirty = false;
		spotLight.penumbraCosDirty = false;
		spotLight.decayDirty = false;
	}
}
UniformSpotLights.align = 16;
class UniformSpotLightShadows extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.cb = cb;
		const bytesPerElement = Float32Array.BYTES_PER_ELEMENT;
		this._subDataSize = 18;
		this.byteSize = count * this._subDataSize * bytesPerElement;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "spotLightShadows";
		this.visibility = ShaderStage.Fragment;
		this._nearValue = null;
		this._farValue = null;
	}
	set() {
		this.lights = this.cb();
		this.lights.forEach((spotLight, index) => {
			this.setSubData(spotLight, index);
		});
		return this.dirty;
	}
	setSubData(spotLight, index) {
		const offset = index * this._subDataSize;
		if (spotLight.positionDirty || spotLight.targetDirty || spotLight.shadow.camera.projectMatrixDirty) {
			spotLight.shadow.update(spotLight);
			this.dirty = setDataToTypeArray(this.buffer, spotLight.shadow.camera.vpMatrix.toArray(), offset + 0); //byteOffset=0;
		}
		const nearValue = spotLight.shadow.camera.near;
		if (nearValue != this._nearValue) {
			this._nearValue = nearValue;
			this.dirty = setDataToTypeArray(this.buffer, this._nearValue, offset + 16); //byteOffset=0;
		}
		const farValue = spotLight.shadow.camera.far;
		if (farValue != this._farValue) {
			this._farValue = farValue;
			this.dirty = setDataToTypeArray(this.buffer, this._farValue, offset + 17); //byteOffset=0;
		}
	}
}
UniformSpotLightShadows.align = 16;
class UniformPointLights extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.cb = cb;
		this.byteSize = count * 32;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "pointsLight";
		this.visibility = ShaderStage.Fragment;
	}
	set() {
		this.lights = this.cb();
		this.lights.forEach((pointLight, index) => {
			this.setSubData(pointLight, index);
		});
		return this.dirty;
	}
	setSubData(pointLight, index) {
		const offset = index * 8;
		if (pointLight.positionDirty) {
			pointLight.positionDirty = false;
			this.dirty = setDataToTypeArray(this.buffer, pointLight.position.toArray(), offset + 0); //byteOffset=0;
		}
		if (pointLight.distanceDirty) {
			pointLight.distanceDirty = false;
			this.dirty = setDataToTypeArray(this.buffer, pointLight.distance, offset + 3); //byteOffset=12;
		}
		if (pointLight.colorDirty) {
			pointLight.colorDirty = false;
			this.dirty = setDataToTypeArray(this.buffer, pointLight.color.toArray(), offset + 4); //byteOffset=32;
		}
		if (pointLight.decayDirty) {
			pointLight.decayDirty = false;
			this.dirty = setDataToTypeArray(this.buffer, pointLight.decay, offset + 7); //byteOffset=12;
		}
	}
}
UniformPointLights.align = 16;
class UniformPointLightShadows extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.cb = cb;
		const bytesPerElement = Float32Array.BYTES_PER_ELEMENT;
		this._subDataSize = 18;
		this.byteSize = count * bytesPerElement * this._subDataSize;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "pointLightShadows";
		this.visibility = ShaderStage.Fragment;
		this._nearValue = null;
		this._farValue = null;
	}
	set() {
		this.lights = this.cb();
		this.lights.forEach((pointLight, index) => {
			this.setSubData(pointLight, index);
		});
		return this.dirty;
	}
	setSubData(pointLight, index) {
		const offset = index * this._subDataSize;
		if (pointLight.positionDirty) {
			// TODO:未完成更新
			pointLight.shadow.update(pointLight);
			this.dirty = setDataToTypeArray(this.buffer, pointLight.shadow.camera.vpMatrix.toArray(), offset + 0); //byteOffset=0;
		}
		const nearValue = pointLight.shadow.camera.near;
		if (nearValue != this._nearValue) {
			this._nearValue = nearValue;
			this.dirty = setDataToTypeArray(this.buffer, this._nearValue, offset + 16); //byteOffset=0;
		}
		const farValue = pointLight.shadow.camera.far;
		if (farValue != this._farValue) {
			this._farValue = farValue;
			this.dirty = setDataToTypeArray(this.buffer, this._farValue, offset + 17); //byteOffset=0;
		}
	}
}
UniformPointLightShadows.align = 16;
class UniformDirtectLights extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.cb = cb;
		this.byteSize = count * 32;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "dirtectLights";
		this.visibility = ShaderStage.Fragment;
	}
	set() {
		this.lights = this.cb();
		this.lights.forEach((directionalLight, index) => {
			this.setSubData(directionalLight, index);
		});
		return this.dirty;
	}
	setSubData(directionalLight, index) {
		const offset = index * 8;
		if (directionalLight.dirtectDirty) {
			directionalLight.dirtectDirty = false;
			this.dirty = setDataToTypeArray(this.buffer, directionalLight.directional.toArray(), offset + 0); //byteOffset=16;
		}
		if (directionalLight.colorDirty) {
			directionalLight.colorDirty = false;
			this.dirty = setDataToTypeArray(this.buffer, directionalLight.color.toArray(), offset + 4); //byteOffset=32;
		}
	}
}
UniformDirtectLights.align = 16;
class UniformDirtectLightShadows extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.cb = cb;
		const bytesPerElement = Float32Array.BYTES_PER_ELEMENT;
		this._subDataSize = 16;
		this.byteSize = count * bytesPerElement * this._subDataSize;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "dirtectLightShadows";
		this.visibility = ShaderStage.Fragment;
	}
	set() {
		this.lights = this.cb();
		this.lights.forEach((directionalLight, index) => {
			this.setSubData(directionalLight, index);
		});
		return this.dirty;
	}
	setSubData(directionalLight, index) {
		const offset = index * this._subDataSize;
		if (directionalLight.dirtectDirty) {
			directionalLight.shadow.update(directionalLight);
			this.dirty = setDataToTypeArray(this.buffer, directionalLight.shadow.camera.vpMatrix.toArray(), offset + 0); //byteOffset=16;
		}
	}
}
UniformDirtectLightShadows.align = 16;
function setDataToTypeArray(buffer, data, offset) {
	if (Array.isArray(data)) {
		data.forEach((value, index) => {
			buffer[index + offset] = value;
		});
	} else {
		buffer[offset] = data;
	}
	return true;
}

class BindGroupEntity {
	constructor(options) {
		this.binding = options.binding;
		this.resource = options.resource;
	}
	getGPUGroupEntity() {
		return {
			binding: this.binding,
			resource: this.resource
		};
	}
}

class BindGroupLayoutEntry {
	constructor(options) {
		this.binding = options.binding;
		this.visibility = options.visibility;
		this.buffer = options.buffer;
		this.sampler = options.sampler;
		this.texture = options.texture;
		this.storageTexture = options.storageTexture;
		this.externalTexture = options.storageTexture;
	}
	getGPULayoutEntity() {
		return {
			binding: this.binding,
			visibility: this.visibility,
			buffer: this.buffer,
			sampler: this.sampler,
			texture: this.texture,
			storageTexture: this.storageTexture
		};
	}
}

const layoutCache = new Map();
class BindGroupLayout {
	constructor(device, label, entries = [], index = 0) {
		this.entries = entries;
		this.index = index || 0;
		this.gpuBindGroupLayout = device.createBindGroupLayout({
			label: label,
			entries: entries.map(({ visibility, buffer, sampler, texture, storageTexture, binding }) => ({
				binding,
				visibility,
				buffer,
				sampler,
				texture,
				storageTexture
			}))
		});
	}
	static getBindGroupLayoutFromCache(device, label, entires, index) {
		if (layoutCache.has(label)) {
			return layoutCache.get(label);
		} else {
			const bindGroupLayout = new BindGroupLayout(device, label, entires, index);
			layoutCache.set(label, bindGroupLayout);
			return bindGroupLayout;
		}
	}
	static removeBindGroupLayoutFromCache(bindGroupLayout) {
		layoutCache.delete(bindGroupLayout);
	}
}

const bindGroupCache = new Map();
class BindGroup {
	constructor(options) {
		this.index = options.index || 0;
		this.gpuBindGroup = options.device.createBindGroup({
			label: options.label,
			layout: options.layout.gpuBindGroupLayout,
			entries: options.entires.map((entity) => ({
				binding: entity.binding,
				resource: entity.resource
			}))
		});
	}
	bind(passEncoder) {
		passEncoder.setBindGroup(this.index, this.gpuBindGroup);
	}
	destroy() {
		this.gpuBindGroup = undefined;
		this.device = undefined;
	}
	static getBindGroupFromCache(options) {
		if (bindGroupCache.has(options.label)) {
			return bindGroupCache.get(options.label);
		} else {
			//@ts-ignore
			const bindGroup = new BindGroup(options);
			bindGroupCache.set(options.label, bindGroup);
			return bindGroup;
		}
	}
	static removeBindGroupFromCache(bindGroup) {
		bindGroupCache.delete(bindGroup);
	}
}

class ShaderData {
	constructor(label, size, layoutIndex, groupIndex) {
		this.label = label;
		this.currentBinding = 0;
		this.defineDirty = true;
		this.defines = {};
		this._uniforms = new Map();
		this.groupIndex = defaultValue(groupIndex, 0);
		this.layoutIndex = defaultValue(layoutIndex, 0);
	}
	setUniformBuffer(name, uniformBuffer) {
		if (this._uniforms.get(name)) return;
		uniformBuffer.binding = this.currentBinding;
		this.setDefine(name.concat("Binding"), this.currentBinding);
		this.currentBinding += 1;
		this._uniforms.set(name, uniformBuffer);
	}
	setTexture(name, value, binding) {
		if (this._uniforms.get(name)) return;
		const uniform = new UniformTexture(name, this.currentBinding, value);
		this.setDefine(name.concat("Binding"), this.currentBinding);
		this.currentBinding += 1;
		this._uniforms.set(name, uniform);
	}
	setSampler(name, value, binding) {
		if (this._uniforms.get(name)) return;
		const uniform = new UniformSampler(name, this.currentBinding, value);
		this.setDefine(name.concat("Binding"), this.currentBinding);
		this.currentBinding += 1;
		this._uniforms.set(name, uniform);
	}
	setDefine(name, value) {
		if (this.defines[name] === undefined) {
			this.defineDirty = true;
			this.defines[name] = value;
		} else {
			if (this.defines[name] === value) {
				return;
			} else {
				this.defineDirty = true;
				this.defines[name] = value;
			}
		}
	}
	replaceUniformBufferValue(name, value) {
		this._uniforms.forEach((uniform) => {
			if (uniform?.isUniformBuffer) {
				uniform.replaceUniformValue(name, value);
			}
		});
	}
	bind(context, passEncoder) {
		this.uploadUniform(context);
		if (!this.groupLayout)
			this.groupLayout = this.createBindGroupLayout(context.device, this.label, this.layoutIndex);
		if (!this.bindGroup) this.bindGroup = this.createBindGroup(context.device, this.label, this.groupIndex);
		this.bindGroup.bind(passEncoder);
	}
	destroy() {
		this._uniforms.forEach((uniform) => {
			if (uniform.destroy) uniform?.destroy();
		});
		this.label = undefined;
		this.currentBinding = 1;
		this.defineDirty = true;
		this.defines = undefined;
		this._uniforms.clear();
		BindGroupLayout.removeBindGroupLayoutFromCache(this.groupLayout);
		this.bindGroup = undefined;
	}
	createBindGroup(device, label, groupIndex) {
		const groupEntities = this.createBindGroupEntity();
		const bindGroup = new BindGroup({
			label: label,
			entires: groupEntities,
			device: device,
			layout: this.groupLayout,
			index: groupIndex || 0 //后续改成groupIndex
		});
		return bindGroup;
	}
	createBindGroupLayout(device, label, layoutIndex) {
		const layoutEntities = this.createBindGroupLayoutEntry();
		const groupLayout = BindGroupLayout.getBindGroupLayoutFromCache(
			device,
			label,
			layoutEntities,
			layoutIndex || 0
		);
		return groupLayout;
	}
	uploadUniform(context) {
		this._uniforms.forEach((uniform) => {
			uniform.bind(context);
		});
	}
	createBindGroupLayoutEntry() {
		const result = new Map();
		this._uniforms.forEach((uniform) => {
			if (!result.has(uniform.binding)) {
				result.set(uniform.binding, this.createOneLayoutEntry(uniform));
			}
		});
		const lauoutEntityArray = [];
		result.forEach((value) => {
			lauoutEntityArray.push(value);
		});
		return lauoutEntityArray;
	}
	createBindGroupEntity() {
		const result = new Map();
		this._uniforms.forEach((uniform) => {
			if (!result.has(uniform.binding)) {
				result.set(uniform.binding, this.creayeOneGroupEntity(uniform));
			}
		});
		const groupEntityArray = [];
		result.forEach((value) => {
			groupEntityArray.push(value);
		});
		return groupEntityArray;
	}
	createOneLayoutEntry(uniform) {
		let layoutEntity;
		if (uniform.type === "uniform" || uniform.type === "read-only-storage") {
			layoutEntity = new BindGroupLayoutEntry({
				binding: uniform.binding,
				buffer: uniform.layoutType,
				visibility: uniform.visibility
			});
		} else if (uniform.type === "texture") {
			layoutEntity = new BindGroupLayoutEntry({
				binding: uniform.binding,
				visibility: uniform.visibility,
				texture: uniform.layoutType
			});
		} else if (uniform.type === "sampler") {
			layoutEntity = new BindGroupLayoutEntry({
				binding: uniform.binding,
				visibility: uniform.visibility,
				sampler: uniform.layoutType
			});
		}
		return layoutEntity;
	}
	creayeOneGroupEntity(uniform) {
		let groupEntity;
		if (uniform.type === "uniform" || uniform.type === "read-only-storage") {
			groupEntity = new BindGroupEntity({
				binding: uniform.binding,
				resource: {
					buffer: uniform.buffer.gpuBuffer,
					offset: uniform.offset,
					size: uniform.bufferSize
				}
			});
		} else if (uniform.type === "texture") {
			groupEntity = new BindGroupEntity({
				binding: uniform.binding,
				resource: uniform.texture.textureView
			});
		} else if (uniform.type === "sampler") {
			groupEntity = new BindGroupEntity({
				binding: uniform.binding,
				resource: uniform.sampler.gpuSampler
			});
		}
		return groupEntity;
	}
}

class UniformBuffer {
	constructor(label, type, usage, size, dataBuffer) {
		this.type = defaultValue(type, "uniform");
		this.label = defaultValue(label, "");
		(this.hasDynamicOffset = false), (this.minBindingSize = 0);
		this.binding = 0;
		this.visibility = ShaderStage.Fragment | ShaderStage.Vertex;
		this.usage = defaultValue(usage, BufferUsage.Uniform | BufferUsage.CopyDst);
		this._uniformStruct = new Map();
		this.uniformDirty = true;
		this._bufferSize = size;
		this.offset = 0;
		this.dataBuffer = defaultValue(dataBuffer, new Float32Array(defaultValue(this._bufferSize, 400)));
		this.byteOffset = 0;
		this.isUniformBuffer = true;
	}
	get layoutType() {
		return {
			type: this.type,
			hasDynamicOffset: this.hasDynamicOffset,
			minBindingSize: this.minBindingSize
		};
	}
	get bufferSize() {
		return defaultValue(this._bufferSize, this.uniformsSize * 4);
	}
	get uniformsSize() {
		//https://gpuweb.github.io/gpuweb/wgsl/#address-space-layout-constraints
		return Math.ceil(this.byteOffset / 16) * 16;
	}
	bind(context) {
		this._uniformStruct.forEach((uniform) => {
			const result = uniform.set();
			if (uniform?.dirty != undefined) uniform.dirty = false;
			if (result != undefined && this.uniformDirty == false) this.uniformDirty = result;
		});
		if (this.uniformDirty) {
			this.uniformDirty = false;
			if (!this.buffer)
				this.buffer = Buffer.createUniformBuffer(this.label, context.device, this.bufferSize, this.usage);
			this.buffer.setSubData(0, this.dataBuffer.slice(0, defaultValue(this?.bufferSize / 4, this.uniformsSize)));
		}
	}
	getUniformBufferStruct() {
		let uniformStruct = `struct MaterialUniform {\n `;
		this._uniformStruct.forEach((uniform) => {
			uniformStruct += this.createUniformString(uniform);
		});
		uniformStruct += `}\n`;
		return uniformStruct;
	}
	createUniformString(uniform) {
		let result = ``;
		switch (uniform.type) {
			case "vec1":
				result = `${uniform.name} :f32,\n`;
				break;
			case "vec2":
				result = `${uniform.name} :vec2<f32>,\n`;
				break;
			case "vec3":
				result = `${uniform.name} :vec3<f32>,\n`;
				break;
			case "vec4":
				result = `${uniform.name} :vec4<f32>,\n`;
				break;
			case "mat2":
				result = `${uniform.name} :mat2x2<f32>,\n`;
				break;
			case "mat3":
				result = `${uniform.name} :mat3x3<f32>,\n`;
				break;
			case "mat4":
				result = `${uniform.name} :mat4x4<f32>,\n`;
				break;
		}
		return result;
	}
	setFloat(name, value, binding) {
		if (this._uniformStruct.get(name)) return;
		const uniform = new UniformFloat(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setFloatVec2(name, value, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformFloatVec2.align);
		const uniform = new UniformFloatVec2(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setFloatVec3(name, value, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformFloatVec3.align);
		const uniform = new UniformFloatVec3(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setColor(name, value, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformColor.align);
		const uniform = new UniformColor(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setFloatVec4(name, value, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformFloatVec4.align);
		const uniform = new UniformFloatVec4(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setMatrix2(name, value, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformMat2.align);
		const uniform = new UniformMat2(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setMatrix3(name, value, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformMat3.align);
		const uniform = new UniformMat3(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setMatrix4(name, value, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformMat4.align);
		const uniform = new UniformMat4(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setMatrix4Array(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformMatrix4Array.align);
		const uniform = new UniformMatrix4Array(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	replaceUniformValue(name, value) {
		const uniform = this._uniformStruct.get(name);
		if (!uniform) console.error("not find uniform");
		uniform.cb = value;
	}
	// uniformBuffer.setVec3Array('test',()=>{return [new Vector3(1,0,0),new Vector3(1,0.8,0.5)]},2);
	// uniformBuffer.setFloatArray('test1',()=>{return [0.5,0.5,1.0]},3);
	// uniformBuffer.setVec4Array('test4',()=>{return [new Vector4(0.5,0.6,0.2,1.0),new Vector4(0.5,0.8,0.8,1.0)]},2);
	// uniformBuffer.setVec2Array('test2',()=>{return [new Vector2(0.5,0.6),new Vector2(0.5,0.8,)]},2);
	setFloatArray(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformFloatArray.align);
		const uniform = new UniformFloatArray(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setVec2Array(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformVec2Array.align);
		const uniform = new UniformVec2Array(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setVec3Array(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformVec3Array.align);
		const uniform = new UniformVec3Array(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setVec4Array(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformVec4Array.align);
		const uniform = new UniformVec4Array(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setSpotLights(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformSpotLights.align);
		const uniform = new UniformSpotLights(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setPointLights(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformPointLights.align);
		const uniform = new UniformPointLights(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setDirtectLights(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformDirtectLights.align);
		const uniform = new UniformDirtectLights(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setSpotLightShadows(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformSpotLightShadows.align);
		const uniform = new UniformSpotLightShadows(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setPointLightShadows(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformPointLightShadows.align);
		const uniform = new UniformPointLightShadows(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setDirtectLightShadows(name, value, count, binding) {
		if (this._uniformStruct.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformDirtectLightShadows.align);
		const uniform = new UniformDirtectLightShadows(
			name,
			this.dataBuffer,
			this.byteOffset,
			value,
			binding,
			0,
			count
		);
		this._uniformStruct.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	checkUniformOffset(byteSize, Align) {
		//from https://gpuweb.github.io/gpuweb/wgsl/#address-space-layout-constraints
		return Math.ceil(byteSize / Align) * Align - byteSize;
	}
	destroy() {
		this?.buffer?.destroy();
	}
}

class Texture {
	constructor(textureProp) {
		this.textureProp = Object.assign(
			{
				format: TextureFormat.RGBA8Unorm,
				usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
				dataIsTexture: false
			},
			textureProp
		);
		this.sampler = textureProp.sampler;
		this.dirty = true;
		this.fixedSize = textureProp.fixedSize || false;
	}
	get layoutType() {
		const { viewFormats, sampleType, sampleCount } = this.textureProp;
		// const
		return {
			sampleType: defaultValue(sampleType, "float"),
			viewDimension: defaultValue(viewFormats, "2d"),
			multisampled: sampleCount && sampleCount > 1 ? true : false
		};
	}
	get textureView() {
		if (!this._textureView)
			this._textureView = this.gpuTexture.createView({
				dimension: defaultValue(this.textureProp.viewFormats, "2d")
			});
		return this._textureView;
	}
	update(context) {
		if (!this.context) this.context = context;
		if (this.dirty) {
			this.checkNeedCreateTexture();
			this.dirty = false;
			if (this.textureProp.data) {
				if (Array.isArray(this.textureProp.data)) {
					this.textureProp.data.forEach((imageData) => {
						this.setData(imageData);
					});
				} else {
					this.setData(this.textureProp.data);
				}
			}
			if (this.textureProp.needMipMap) {
				this.gpuTexture = context.mipmapTools.generateMipmap(this);
			}
			if (this.sampler) this.sampler.update(context);
		}
	}
	setData(options) {
		const {
			source,
			width = options.source.width,
			height = options.source.height,
			depth = 1,
			sourceX = 0,
			sourceY = 0,
			mipLevel = 0,
			x = 0,
			y = 0,
			z = 0,
			aspect = "all",
			colorSpace = "srgb",
			premultipliedAlpha = false
		} = options;
		if (source instanceof Texture) {
			let commandEncoder = this.context.device.createCommandEncoder();
			commandEncoder.copyTextureToTexture(
				{
					texture: source.gpuTexture,
					origin: [sourceX, sourceY]
					// aspect
				},
				{
					texture: this.gpuTexture,
					origin: { x: 0, y: 0, z },
					mipLevel
					// aspect
				},
				{
					width,
					height,
					depthOrArrayLayers: 1
				}
			);
			this.context.device.queue.submit([commandEncoder.finish()]);
			commandEncoder = null;
		} else {
			this.context.device.queue.copyExternalImageToTexture(
				{
					source,
					origin: [sourceX, sourceY]
				},
				{
					texture: this.gpuTexture,
					origin: [x, y, z],
					mipLevel,
					aspect,
					colorSpace,
					premultipliedAlpha
				},
				[width, height, depth]
			);
		}
	}
	setSize(width, height, depth) {
		if (this.fixedSize) return;
		this.textureProp.size.width = width;
		this.textureProp.size.height = height;
		if (depth) this.textureProp.size.depth = depth;
		this.dirty = true;
	}
	destroy() {
		this.gpuTexture.destroy();
	}
	createGPUTexture() {
		if (typeof this.textureProp.format === "number") {
			throw new Error("number format");
		}
		const { width, height, depth } = this.textureProp.size;
		return this.context.device.createTexture({
			label: this.textureProp?.label || "undefined",
			size: [width, height, depth],
			dimension: this.textureProp.dimension || "2d",
			format: this.textureProp.format,
			usage: this.textureProp.usage,
			mipLevelCount: this.textureProp.mipLevelCount || 1,
			sampleCount: this.textureProp.sampleCount || 1
		});
	}
	checkNeedCreateTexture() {
		const { width, height, depth } = this.textureProp.size;
		if (this.gpuTexture) {
			if (width != this.gpuTexture.width || height != this.gpuTexture.height) {
				this._textureView = undefined;
				this.gpuTexture.destroy();
				this.gpuTexture = this.createGPUTexture();
			}
		} else {
			this.gpuTexture = this.createGPUTexture();
		}
	}
}

class Sampler {
	constructor(
		descriptor,
		layoutType = {
			type: "filtering"
		}
	) {
		this.descriptor = descriptor;
		this.descriptor = {};
		Object.assign(
			this.descriptor,
			{
				magFilter: "linear",
				minFilter: "linear",
				// mipmapFilter: "linear",
				addressModeU: "clamp-to-edge",
				addressModeV: "clamp-to-edge"
				// addressModeW: "clamp-to-edge",
			},
			descriptor
		);
		this.layoutType = layoutType;
	}
	update(context) {
		if (!this.gpuSampler) this.gpuSampler = context.device.createSampler(this.descriptor);
	}
}
Sampler.baseSampler = new Sampler({
	magFilter: "linear",
	minFilter: "linear"
});

class LightManger {
	constructor(options) {
		this.spotLights = [];
		this.pointLights = [];
		this.directLights = [];
		this.ambientLight = new AmbientLight(new Vector3(1.0, 1.0, 1.0), 0.2);
		this.lightCountDirty = true;
		this.openShadow = options.openShadow;
	}
	update(frameState, camera) {
		this.checkLightShadowState();
		this.updateLight(camera);
	}
	add(light) {
		this.lightCountDirty = true;
		if (light.type == "ambient") {
			this.ambientLight = light;
		} else if (light.type == "directional") {
			this.directLights.push(light);
		} else if (light.type == "point") {
			this.pointLights.push(light);
		} else if (light.type == "spot") {
			this.spotLights.push(light);
		}
	}
	remove(light) {
		this.lightCountDirty = true;
		if (light.type == "ambient") {
			this.ambientLight = new AmbientLight(new Vector3(1.0, 1.0, 1.0), 1.0);
		} else if (light.type == "directional") {
			this.directLights.splice(this.directLights.indexOf(light), 1);
		} else if (light.type == "point") {
			this.pointLights.splice(this.pointLights.indexOf(light), 1);
		} else if (light.type == "spot") {
			this.spotLights.splice(this.spotLights.indexOf(light), 1);
		}
	}
	checkLightShadowState() {
		const lights = this.getAllLights();
		for (let i = 0; i < lights.length; i++) {
			const light = lights[i];
			if (light.shadowDirty) {
				light.shadowDirty = false;
				this.lightCountDirty = true;
			}
		}
	}
	updateLightShadow() {
		if (this.spotLightShadowMapTextureArray) this.spotLightShadowMapTextureArray.dirty = true;
		if (this.pointLightShadowMapTextureArray) this.pointLightShadowMapTextureArray.dirty = true;
		if (this.directLightShadowMapTextureArray) this.directLightShadowMapTextureArray.dirty = true;
	}
	updateLight(camera) {
		if (this.lightCountDirty) {
			this.lightCountDirty = false;
			if (this.lightShaderData) this.lightShaderData.destroy();
			this.createLightShaderData();
		}
	}
	createLightShaderData() {
		this.lightShaderData = new ShaderData("light", 0, 2, 2);
		this.lightUniformBuffer = new UniformBuffer(
			"light",
			"read-only-storage",
			BufferUsage.Storage | BufferUsage.CopyDst
		);
		this.lightShaderData.setDefine("spotLightsCount", this.spotLights.length);
		this.lightShaderData.setDefine("pointLightsCount", this.pointLights.length);
		this.lightShaderData.setDefine("dirtectLightsCount", this.directLights.length);
		this.lightShaderData.setDefine("ambientLightCount", 1);
		if (this.ambientLight)
			this.lightUniformBuffer.setFloatVec4("ambientLight", () => {
				return this.ambientLight.ColorAndIntensity;
			});
		if (this.spotLights.length) {
			//初始化聚光灯
			this.lightUniformBuffer.setSpotLights(
				"spotLights",
				() => {
					return this.spotLights;
				},
				this.spotLights.length
			);
		}
		if (this.pointLights.length) {
			//点光源
			this.lightUniformBuffer.setPointLights(
				"pointLights",
				() => {
					return this.pointLights;
				},
				this.pointLights.length
			);
		}
		if (this.directLights.length) {
			//方向光
			this.lightUniformBuffer.setDirtectLights(
				"directLights",
				() => {
					return this.directLights;
				},
				this.directLights.length
			);
		}
		shadowShaderData: {
			if (this.openShadow) {
				const spotLightShadowMapTextureArray = (this.spotLightShadowMapTextureArray =
					this.createShadowMapTextureArray(this.spotLights));
				const pointLightShadowMapTextureArray = (this.pointLightShadowMapTextureArray =
					this.createShadowMapTextureArray(this.pointLights));
				const directLightShadowMapTextureArray = (this.directLightShadowMapTextureArray =
					this.createShadowMapTextureArray(this.directLights));
				if (
					!spotLightShadowMapTextureArray &&
					!pointLightShadowMapTextureArray &&
					!directLightShadowMapTextureArray
				)
					break shadowShaderData;
				//define
				this.lightShaderData.setDefine("openShadow", this.openShadow);
				//shadowUniformBuffer
				this.shadowUniformBuffer = new UniformBuffer(
					"shadow",
					"read-only-storage",
					BufferUsage.Storage | BufferUsage.CopyDst
				);
				//matrix,near,far...
				const spotLightWithShadowCount = this.setShadowUniform(
					"spotLightShadows",
					this.spotLights,
					"setSpotLightShadows"
				);
				const pointLightWithShadowCount = this.setShadowUniform(
					"pointLightShadows",
					this.pointLights,
					"setPointLightShadows"
				);
				const directLightWithShadowCount = this.setShadowUniform(
					"directLightShadows",
					this.directLights,
					"setDirtectLightShadows"
				);
				this.lightShaderData.setUniformBuffer("shadow", this.shadowUniformBuffer);
				this.lightShaderData.setDefine("spotLightShadowMapsCount", spotLightWithShadowCount);
				this.lightShaderData.setDefine("pointLightShadowMapsCount", pointLightWithShadowCount);
				this.lightShaderData.setDefine("directLightShadowMapsCount", directLightWithShadowCount);
				//texture,sample
				if (spotLightShadowMapTextureArray !== undefined) {
					if (spotLightShadowMapTextureArray.textureProp.size.depth != spotLightWithShadowCount)
						console.warn("spotLightShadowMap align has problem");
					this.lightShaderData.setTexture("spotLightShadowMapTextureArray", spotLightShadowMapTextureArray);
				}
				if (pointLightShadowMapTextureArray !== undefined) {
					if (pointLightShadowMapTextureArray.textureProp.size.depth != pointLightWithShadowCount)
						console.warn("pointLightShadowMap align has problem");
					this.lightShaderData.setTexture("pointLightShadowMapTextureArray", pointLightShadowMapTextureArray);
				}
				if (directLightShadowMapTextureArray !== undefined) {
					if (directLightShadowMapTextureArray.textureProp.size.depth != directLightWithShadowCount)
						console.warn("directLightShadowMap align has problem");
					this.lightShaderData.setTexture(
						"directLightShadowMapTextureArray",
						directLightShadowMapTextureArray
					);
					// this._testTexture = directLightShadowMapTextureArray
				}
				this.lightShaderData.setSampler(
					"shadowSampler",
					new Sampler({ compare: CompareFunction.Less }, { type: SamplerBindingType.Comparison })
				);
			}
		}
		this.lightShaderData.setUniformBuffer("light", this.lightUniformBuffer);
	}
	getAllLights() {
		const result = [];
		return result.concat(this.spotLights, this.pointLights, this.directLights);
	}
	destroy() {
		this.lightShaderData.destroy();
		this.lightUniformBuffer.destroy();
	}
	createShadowMapTextureArray(lights) {
		if (lights.length <= 0) return undefined;
		const shadowMapSources = [];
		for (let i = 0; i < lights.length; i++) {
			const light = lights[i];
			if (light.shadow) {
				const shadowMapTexture = light.shadow.getShadowMapTexture();
				const shadowMapSource = {
					source: shadowMapTexture,
					width: shadowMapTexture.textureProp.size.width,
					height: shadowMapTexture.textureProp.size.height,
					depth: 1,
					x: 0,
					y: 0,
					z: i
				};
				shadowMapSources.push(shadowMapSource);
			}
		}
		if (shadowMapSources.length <= 0) return undefined;
		const shadowMapTextureArray = new Texture({
			size: {
				width: shadowMapSources[0].width,
				height: shadowMapSources[0].height,
				depth: shadowMapSources.length
			},
			fixedSize: true,
			sampleType: TextureSampleType.Depth,
			format: TextureFormat.Depth24Plus,
			usage: TextureUsage.TextureBinding | TextureUsage.CopyDst,
			data: shadowMapSources,
			viewFormats: TextureViewDimension.E2dArray
		});
		return shadowMapTextureArray;
	}
	setShadowUniform(uniformName, lights, functionName) {
		if (lights.length) {
			const lightWithShadowArray = [];
			for (let i = 0; i < lights.length; i++) {
				const light = lights[i];
				if (!light.shadow) continue;
				lightWithShadowArray.push(light);
			}
			this.shadowUniformBuffer[functionName](
				uniformName,
				() => {
					return lightWithShadowArray;
				},
				lightWithShadowArray.length
			);
			return lightWithShadowArray.length;
		}
	}
}

class Context {
	constructor({ canvas, container, context, pixelRatio } = {}) {
		if (!container.clientWidth || !container.clientHeight) throw new Error("container width or height illegality");
		this.canvas = canvas || document.createElement("canvas");
		// this.canvas.style.display = "block";
		this.pixelRatio = pixelRatio || window.devicePixelRatio || 1;
		const width = container.clientWidth * this.pixelRatio;
		const height = container.clientHeight * this.pixelRatio;
		this.canvas.width = width;
		this.canvas.height = height;
		this.canvas.style.width = container.clientWidth + "px";
		this.canvas.style.height = container.clientHeight + "px";
		container.appendChild(this.canvas);
		this.context = context || this.canvas.getContext("webgpu");
		this.device = undefined;
		this._openShadow = true;
		this.lightManger = new LightManger({ openShadow: this._openShadow });
	}
	async init(requestAdapter = {}, deviceDescriptor = {}, presentationContextDescriptor = {}) {
		try {
			if (!this.context) {
				throw new Error(`Failed to instantiate "webgpu" context.`);
			}
			if (!navigator.gpu) {
				throw new Error(`Missing "navigator.gpu".`);
			}
			this.adapter = await navigator.gpu.requestAdapter();
			this.device = await this.adapter.requestDevice();
			this.presentationSize = {
				width: this.canvas.clientWidth * this.pixelRatio,
				height: this.canvas.clientHeight * this.pixelRatio,
				depth: 1
			};
			this.presentationFormat = navigator.gpu.getPreferredCanvasFormat();
			this.device.addEventListener("uncapturederror", (error) => {
				console.error(error);
				//State.error = true;
			});
			this.mipmapTools = new MipmapGenerator(this.device);
			this.context.configure({
				device: this.device,
				format: this.presentationFormat,
				usage: TextureUsage.RenderAttachment,
				alphaMode: "opaque",
				...presentationContextDescriptor
			});
			this._viewPort = {
				x: 0,
				y: 0,
				width: this.canvas.clientWidth * this.pixelRatio,
				height: this.canvas.clientHeight * this.pixelRatio
			};
			this._scissorTestEnabled = false;
		} catch (error) {
			console.error(error);
			return false;
		}
		return true;
	}
	setViewPort(x, y, width, height) {
		this._viewPort = { x, y, width, height };
	}
	setScissorTest(x, y, width, height) {
		this._scissorTestEnabled = true;
		this._scissorTest = { x, y, width, height };
	}
	resize(width, height, presentationContextDescriptor = {}) {
		const w = width * this.pixelRatio;
		const h = height * this.pixelRatio;
		this.canvas.style.width = w + "px";
		this.canvas.style.height = h + "px";
		this.canvas.width = w;
		this.canvas.height = h;
		this.presentationSize = {
			width: w,
			height: h,
			depth: 1
		};
		this.context.configure({
			device: this.device,
			format: navigator.gpu.getPreferredCanvasFormat(),
			usage: TextureUsage.RenderAttachment,
			alphaMode: GPUCanvasCompositingAlphaMode.Premultiplied,
			...presentationContextDescriptor
		});
	}
	render(command, passEncoder, camera) {
		const grouplayouts = [];
		if (command.shaderData) {
			if (command.modelMatrix) command.shaderData.replaceUniformBufferValue("modelMatrix", command.modelMatrix);
			command.shaderData.bind(this, passEncoder);
		}
		//设置系统
		if (camera) {
			camera.shaderData.bind(this, passEncoder);
			grouplayouts.push(camera.shaderData.groupLayout);
			if (command.shaderSource) command.shaderSource.setDefines(camera.shaderData.defines);
		}
		if (command.light && this.lightManger.lightShaderData) {
			this.lightManger.lightShaderData.bind(this, passEncoder);
			grouplayouts.push(this.lightManger.lightShaderData.groupLayout);
			if (command.shaderSource) command.shaderSource.setDefines(this.lightManger.lightShaderData.defines);
		}
		if (command.renderState) command.renderState.bind(passEncoder, this);
		if (command.vertexBuffer) command.vertexBuffer.bind(this.device, passEncoder);
		if (command.indexBuffer) command.indexBuffer.bind(this.device, passEncoder);
		const pipeline = Pipeline.getRenderPipelineFromCache(
			this.device,
			command,
			grouplayouts.concat(command.shaderData.groupLayout)
		);
		pipeline.bind(passEncoder);
		if (command.indexBuffer) {
			passEncoder.drawIndexed(command.count || 0, command.instances || 1, 0, 0, 0);
		} else if (command.count) {
			passEncoder.draw(command.count, command.instances || 1, 0, 0);
		}
	}
	compute(command, passEncoder) {
		const pipeline = Pipeline.getComputePipelineFromCache(this.device, command, [command.shaderData.groupLayout]);
		pipeline.bind(passEncoder);
		const { x, y, z } = command.dispatch;
		passEncoder.dispatchWorkgroups(x, y, z);
	}
}

class RenderState {
	constructor() {
		this.scissorTest = undefined;
		this.viewport = undefined;
		this.depthStencil = undefined;
		this.blendConstant = undefined;
		this.stencilReference = 0;
		this.multisample = undefined;
		this.primitive = undefined;
		this.stencilEnabled = false;
		this.scissorTestEnabled = false;
		this.targets = undefined;
	}
	bind(passEncoder, context) {
		// const {width,height}=context.presentationSize;
		// this.setViewPort(400,0,400,900);
		// this.setScissorRect(400,0,400,900)
		// if (this.stencilReference) passEncoder.setStencilReference(this.stencilReference);
		// if (this.viewport.equalsAndUpdateCache(cacheViewPort)) {
		// 	const { x, y, width, height, minDepth, maxDepth } = this.viewport;
		// passEncoder.setViewport(0, 0, 400, 400, 0, 1);
		//}
		if (this.blendConstant) passEncoder.setBlendConstant(this.blendConstant);
		// if (this.scissorTest.equalsAndUpdateCache(cacheScissorTest)) {
		// 	const { x, y, width, height } = this.scissorTest;
		// 	passEncoder.setScissorRect(x, y, width, height);
		// }
	}
	setViewPort(x, y, width, height, minDepth = 0, maxDepth = 1) {
		if (this.viewport) {
			this.viewport.set(x, y, width, height, minDepth, maxDepth);
		} else {
			this.viewport = new ViewPort(x, y, width, height, minDepth, maxDepth);
		}
	}
	setScissorRect(x, y, width, height) {
		if (this.scissorTest) {
			this.scissorTest.set(x, y, width, height);
		} else {
			this.scissorTest = new ScissorTest(x, y, width, height);
		}
	}
	destroy() {
		this.scissorTest = undefined;
		this.viewport = undefined;
		this.depthStencil = undefined;
		this.blendConstant = undefined;
		this.stencilReference = -1;
		this.multisample = undefined;
		this.primitive = undefined;
		this.stencilEnabled = false;
		this.scissorTestEnabled = false;
	}
}
class ScissorTest {
	constructor(x = 0, y = 0, width = 0, height = 0, variable = true) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.variable = variable;
	}
	set(x, y, width, height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	equalsAndUpdateCache(scissorTest) {
		const { x, y, width, height } = scissorTest;
		if (this.x != x || this.y != y || this.width != width || this.height != height) {
			scissorTest.set(this.x, this.y, this.width, this.height);
			return true;
		}
		return false;
	}
}
class ViewPort {
	constructor(x = 0, y = 0, width = 0, height = 0, minDepth = 0, maxDepth = 1, variable = true) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.minDepth = minDepth;
		this.maxDepth = maxDepth;
		this.variable = variable;
	}
	set(x, y, width, height, minDepth = 0, maxDepth = 1) {
		if (!this.variable) return;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.minDepth = minDepth;
		this.maxDepth = maxDepth;
	}
	equalsAndUpdateCache(viewPort) {
		const { x, y, width, height, minDepth, maxDepth } = viewPort;
		if (
			this.x != x ||
			this.y != y ||
			this.width != width ||
			this.height != height ||
			this.minDepth != minDepth ||
			this.maxDepth != maxDepth
		) {
			viewPort.set(this.x, this.y, this.width, this.height, this.minDepth, this.maxDepth);
			return true;
		}
		return false;
	}
}
class Primitive {
	constructor(topology, cullMode, frontFace, unclippedDepth) {
		this.frontFace = defaultValue(frontFace, FrontFace.CCW);
		this.cullMode = defaultValue(cullMode, CullMode.None);
		this.unclippedDepth = defaultValue(unclippedDepth, false);
		this.topology = defaultValue(topology, PrimitiveTopology.TriangleList);
	}
	getGPUPrimitiveDec() {
		return {
			frontFace: this.frontFace,
			cullMode: this.cullMode,
			unclippedDepth: this.unclippedDepth,
			topology: this.topology
		};
	}
}
class DepthStencil {
	constructor(options) {
		this.format = defaultValue(options?.format, TextureFormat.Depth24Plus);
		this.depthWriteEnabled = defaultValue(options?.depthWriteEnabled, true);
		this.depthCompare = defaultValue(options?.depthCompare, CompareFunction.Less);
		this.stencilReadMask = defaultValue(options?.stencilReadMask, 0xffffffff);
		this.stencilWriteMask = defaultValue(options?.stencilWriteMask, 0xffffffff);
		this.stencilFrontCompare = defaultValue(options?.stencilFrontCompare, CompareFunction.Always);
		this.stencilFrontFailOp = defaultValue(options?.stencilFrontFailOp, StencilOperation.Keep);
		this.stencilFrontDepthFailOp = defaultValue(options?.stencilFrontDepthFailOp, StencilOperation.Keep);
		this.stencilFrontPassOp = defaultValue(options?.stencilFrontPassOp, StencilOperation.Keep);
		this.stencilBackCompare = defaultValue(options?.stencilBackCompare, CompareFunction.Always);
		this.stencilBackFailOp = defaultValue(options?.stencilBackFailOp, StencilOperation.Keep);
		this.stencilBackDepthFailOp = defaultValue(options?.stencilBackDepthFailOp, StencilOperation.Keep);
		this.stencilBackPassOp = defaultValue(options?.stencilBackPassOp, StencilOperation.Keep);
		this.depthBias = defaultValue(options?.depthBias, 0);
		this.depthBiasSlopeScale = defaultValue(options?.depthBiasSlopeScale, 0);
		this.depthBiasClamp = defaultValue(options?.depthBiasClamp, 0);
	}
	getGPUDepthStencilDec() {
		return {
			format: this.format,
			depthWriteEnabled: this.depthWriteEnabled,
			depthCompare: this.depthCompare,
			stencilReadMask: this.stencilReadMask,
			stencilWriteMask: this.stencilWriteMask,
			stencilFront: {
				compare: this.stencilFrontCompare,
				failOp: this.stencilFrontFailOp,
				depthFailOp: this.stencilFrontDepthFailOp,
				passOp: this.stencilFrontPassOp
			},
			stencilBack: {
				compare: this.stencilBackCompare,
				failOp: this.stencilBackFailOp,
				depthFailOp: this.stencilBackDepthFailOp,
				passOp: this.stencilBackPassOp
			},
			depthBias: this.depthBias,
			depthBiasSlopeScale: this.depthBiasSlopeScale,
			depthBiasClamp: this.depthBiasClamp
		};
	}
}
class Target {
	constructor(options) {
		this.format = defaultValue(options?.format, TextureFormat.BGRA8Unorm);
		this.blendColorOperation = defaultValue(options?.blendColorOperation, BlendOperation.Add);
		this.blendColorSrcFactor = defaultValue(options?.blendColorSrcFactor, BlendFactor?.SrcAlpha);
		this.blendColorDstFactor = defaultValue(options?.blendColorDstFactor, BlendFactor.OneMinusSrcAlpha);
		this.blendAlphaOperation = defaultValue(options?.blendAlphaOperation, BlendOperation.Add);
		this.blendAlphaSrcFactor = defaultValue(options?.blendAlphaSrcFactor, BlendFactor.One);
		this.blendAlphaDstFactor = defaultValue(options?.blendAlphaDstFactor, BlendFactor.One);
		this.writeMask = defaultValue(options?.writeMask, GPUColorWrite.All);
	}
	getGPUTargetDec() {
		return {
			format: this.format,
			blend: {
				color: {
					operation: this.blendColorOperation,
					srcFactor: this.blendColorSrcFactor,
					dstFactor: this.blendColorDstFactor
				},
				alpha: {
					operation: this.blendAlphaOperation,
					srcFactor: this.blendAlphaSrcFactor,
					dstFactor: this.blendAlphaDstFactor
				}
			},
			writeMask: this.writeMask
		};
	}
}
new ViewPort();
new ScissorTest();

class Attachment {
	constructor(value, options) {
		this.value = value;
		this.op = "clear";
		this.storeOp = "store";
		Object.assign(this, options);
	}
}

class Attribute {
	constructor(name, value, itemSize) {
		this.name = name;
		this.value = value;
		this.itemSize = itemSize;
		this.name = name;
		this.offset = 0;
		this.shaderLocation = 0;
	}
	getGPUAttribute() {
		return {
			shaderLocation: this.shaderLocation,
			format: this.format,
			offset: this.offset
		};
	}
	destroy() {
		this.value = [];
	}
	applyMatrix3(matrix3) {
		if (this.itemSize === 2) {
			for (let i = 0, l = this.value.length / this.itemSize; i < l; i++) {
				Attribute.v2.fromBufferAttribute(this, i);
				Attribute.v2.applyMatrix3(matrix3);
				this.setXY(i, Attribute.v2.x, Attribute.v2.y);
			}
		} else if (this.itemSize === 3) {
			for (let i = 0, l = this.value.length / this.itemSize; i < l; i++) {
				Attribute.v3.fromBufferAttribute(this, i);
				Attribute.v3.applyMatrix3(matrix3);
				this.setXYZ(i, Attribute.v3.x, Attribute.v3.y, Attribute.v3.z);
			}
		}
		return this;
	}
	applyMatrix4(matrix4) {
		for (let i = 0, l = this.value.length / this.itemSize; i < l; i++) {
			Attribute.v3.fromBufferAttribute(this, i);
			Attribute.v3.applyMatrix4(matrix4);
			this.setXYZ(i, Attribute.v3.x, Attribute.v3.y, Attribute.v3.z);
		}
		return this;
	}
	setX(index, x) {
		this.value[index * this.itemSize] = x;
		return this;
	}
	getX(index) {
		let x = this.value[index * this.itemSize];
		return x;
	}
	setY(index, y) {
		this.value[index * this.itemSize + 1] = y;
		return this;
	}
	getY(index) {
		let y = this.value[index * this.itemSize + 1];
		return y;
	}
	setZ(index, z) {
		this.value[index * this.itemSize + 2] = z;
		return this;
	}
	getZ(index) {
		let z = this.value[index * this.itemSize + 2];
		return z;
	}
	getW(index) {
		let w = this.value[index * this.itemSize + 3];
		return w;
	}
	setXY(index, x, y) {
		index *= this.itemSize;
		this.value[index + 0] = x;
		this.value[index + 1] = y;
		return this;
	}
	setXYZ(index, x, y, z) {
		index *= this.itemSize;
		this.value[index + 0] = x;
		this.value[index + 1] = y;
		this.value[index + 2] = z;
		return this;
	}
	setXYZW(index, x, y, z, w) {
		index *= this.itemSize;
		this.value[index + 0] = x;
		this.value[index + 1] = y;
		this.value[index + 2] = z;
		this.value[index + 3] = w;
		return this;
	}
}
Attribute.v3 = new Vector3();
Attribute.v2 = new Vector2();
class Float32Attribute extends Attribute {
	constructor(name, value, itemSize) {
		super(name, value, itemSize);
		this.format = getAttributeFormat("float32", itemSize);
		this.attributeByteSize = Float32Array.BYTES_PER_ELEMENT * itemSize;
	}
}
function getAttributeFormat(type, itemSize) {
	const key = `${type}x${itemSize}`;
	let format;
	switch (key) {
		case "float32":
			format = VertexFormat.Float32;
			break;
		case "float32x2":
			format = VertexFormat.Float32x2;
			break;
		case "float32x3":
			format = VertexFormat.Float32x3;
			break;
		case "float32x4":
			format = VertexFormat.Float32x4;
			break;
	}
	return format;
}

// @ts-nocheck
/**
 * A set of 4-dimensional coordinates used to represent rotation in 3-dimensional space.
 * @alias Quaternion
 * @constructor
 *
 * @param {Number} [x=0.0] The X component.
 * @param {Number} [y=0.0] The Y component.
 * @param {Number} [z=0.0] The Z component.
 * @param {Number} [w=0.0] The W component.
 *
 * @see PackableForInterpolation
 */
class Quaternion {
	constructor(x = 0, y = 0, z = 0, w = 1) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	set(x, y, z, w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	normalize() {
		const inverseMagnitude = 1.0 / Quaternion.magnitude(this);
		const x = this.x * inverseMagnitude;
		const y = this.y * inverseMagnitude;
		const z = this.z * inverseMagnitude;
		const w = this.w * inverseMagnitude;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	invert() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
		return this;
	}
	dot(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	}
	setFromUnitVectors(vFrom, vTo) {
		// assumes direction vectors vFrom and vTo are normalized
		let r = Vector3.dot(vFrom, vTo) + 1;
		if (r < Number.EPSILON) {
			// vFrom and vTo point in opposite directions
			r = 0;
			if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
				this.x = -vFrom.y;
				this.y = vFrom.x;
				this.z = 0;
				this.w = r;
			} else {
				this.x = 0;
				this.y = -vFrom.z;
				this.z = vFrom.y;
				this.w = r;
			}
		} else {
			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
			this._w = r;
		}
		return this.normalize();
	}
	setFromRotationMatrix(matrix) {
		const te = matrix,
			m11 = te[0],
			m12 = te[4],
			m13 = te[8],
			m21 = te[1],
			m22 = te[5],
			m23 = te[9],
			m31 = te[2],
			m32 = te[6],
			m33 = te[10],
			trace = m11 + m22 + m33;
		if (trace > 0) {
			const s = 0.5 / Math.sqrt(trace + 1.0);
			this.w = 0.25 / s;
			this.x = (m32 - m23) * s;
			this.y = (m13 - m31) * s;
			this.z = (m21 - m12) * s;
		} else if (m11 > m22 && m11 > m33) {
			const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
			this.w = (m32 - m23) / s;
			this.x = 0.25 * s;
			this.y = (m12 + m21) / s;
			this.z = (m13 + m31) / s;
		} else if (m22 > m33) {
			const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
			this.w = (m13 - m31) / s;
			this.x = (m12 + m21) / s;
			this.y = 0.25 * s;
			this.z = (m23 + m32) / s;
		} else {
			const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
			this.w = (m21 - m12) / s;
			this.x = (m13 + m31) / s;
			this.y = (m23 + m32) / s;
			this.z = 0.25 * s;
		}
		return this;
	}
	clone() {
		return Quaternion.clone(this, this);
	}
	equals(right) {
		return Quaternion.equals(this, right);
	}
	equalsEpsilon(right, epsilon = 0) {
		return Quaternion.equalsEpsilon(this, right, epsilon);
	}
	static fromAxisAngle(axis, angle) {
		const halfAngle = angle / 2.0;
		const s = Math.sin(halfAngle);
		fromAxisAngleScratch = Vector3.normalize(axis, fromAxisAngleScratch);
		const x = fromAxisAngleScratch.x * s;
		const y = fromAxisAngleScratch.y * s;
		const z = fromAxisAngleScratch.z * s;
		const w = Math.cos(halfAngle);
		// if (!defined(result)) {
		//   return
		// }
		let result = new Quaternion(x, y, z, w);
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static fromRotationMatrix(matrix, result) {
		let root;
		let x;
		let y;
		let z;
		let w;
		const m00 = matrix[Matrix3.COLUMN0ROW0];
		const m11 = matrix[Matrix3.COLUMN1ROW1];
		const m22 = matrix[Matrix3.COLUMN2ROW2];
		const trace = m00 + m11 + m22;
		if (trace > 0.0) {
			// |w| > 1/2, may as well choose w > 1/2
			root = Math.sqrt(trace + 1.0); // 2w
			w = 0.5 * root;
			root = 0.5 / root; // 1/(4w)
			x = (matrix[Matrix3.COLUMN1ROW2] - matrix[Matrix3.COLUMN2ROW1]) * root;
			y = (matrix[Matrix3.COLUMN2ROW0] - matrix[Matrix3.COLUMN0ROW2]) * root;
			z = (matrix[Matrix3.COLUMN0ROW1] - matrix[Matrix3.COLUMN1ROW0]) * root;
		} else {
			// |w| <= 1/2
			const next = fromRotationMatrixNext;
			let i = 0;
			if (m11 > m00) {
				i = 1;
			}
			if (m22 > m00 && m22 > m11) {
				i = 2;
			}
			const j = next[i];
			const k = next[j];
			root = Math.sqrt(
				matrix[Matrix3.getElementIndex(i, i)] -
					matrix[Matrix3.getElementIndex(j, j)] -
					matrix[Matrix3.getElementIndex(k, k)] +
					1.0
			);
			const quat = fromRotationMatrixQuat;
			quat[i] = 0.5 * root;
			root = 0.5 / root;
			w = (matrix[Matrix3.getElementIndex(k, j)] - matrix[Matrix3.getElementIndex(j, k)]) * root;
			quat[j] = (matrix[Matrix3.getElementIndex(j, i)] + matrix[Matrix3.getElementIndex(i, j)]) * root;
			quat[k] = (matrix[Matrix3.getElementIndex(k, i)] + matrix[Matrix3.getElementIndex(i, k)]) * root;
			x = -quat[0];
			y = -quat[1];
			z = -quat[2];
		}
		if (!defined(result)) {
			return new Quaternion(x, y, z, w);
		}
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static clone(quaternion, result) {
		if (!defined(quaternion)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Quaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w);
		}
		result.x = quaternion.x;
		result.y = quaternion.y;
		result.z = quaternion.z;
		result.w = quaternion.w;
		return result;
	}
	static conjugate(quaternion, result) {
		result.x = -quaternion.x;
		result.y = -quaternion.y;
		result.z = -quaternion.z;
		result.w = quaternion.w;
		return result;
	}
	static magnitudeSquared(quaternion) {
		return (
			quaternion.x * quaternion.x +
			quaternion.y * quaternion.y +
			quaternion.z * quaternion.z +
			quaternion.w * quaternion.w
		);
	}
	static magnitude(quaternion) {
		return Math.sqrt(Quaternion.magnitudeSquared(quaternion));
	}
	static normalize(quaternion, result) {
		const inverseMagnitude = 1.0 / Quaternion.magnitude(quaternion);
		const x = quaternion.x * inverseMagnitude;
		const y = quaternion.y * inverseMagnitude;
		const z = quaternion.z * inverseMagnitude;
		const w = quaternion.w * inverseMagnitude;
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static inverse(quaternion, result) {
		const magnitudeSquared = Quaternion.magnitudeSquared(quaternion);
		result = Quaternion.conjugate(quaternion, result);
		return Quaternion.multiplyByScalar(result, 1.0 / magnitudeSquared, result);
	}
	static add(left, right, result) {
		result.x = left.x + right.x;
		result.y = left.y + right.y;
		result.z = left.z + right.z;
		result.w = left.w + right.w;
		return result;
	}
	static subtract(left, right, result) {
		result.x = left.x - right.x;
		result.y = left.y - right.y;
		result.z = left.z - right.z;
		result.w = left.w - right.w;
		return result;
	}
	static negate(quaternion, result) {
		result.x = -quaternion.x;
		result.y = -quaternion.y;
		result.z = -quaternion.z;
		result.w = -quaternion.w;
		return result;
	}
	static dot(left, right) {
		return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
	}
	static multiply(left, right, result) {
		const leftX = left.x;
		const leftY = left.y;
		const leftZ = left.z;
		const leftW = left.w;
		const rightX = right.x;
		const rightY = right.y;
		const rightZ = right.z;
		const rightW = right.w;
		const x = leftW * rightX + leftX * rightW + leftY * rightZ - leftZ * rightY;
		const y = leftW * rightY - leftX * rightZ + leftY * rightW + leftZ * rightX;
		const z = leftW * rightZ + leftX * rightY - leftY * rightX + leftZ * rightW;
		const w = leftW * rightW - leftX * rightX - leftY * rightY - leftZ * rightZ;
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static multiplyByScalar(quaternion, scalar, result) {
		result.x = quaternion.x * scalar;
		result.y = quaternion.y * scalar;
		result.z = quaternion.z * scalar;
		result.w = quaternion.w * scalar;
		return result;
	}
	static divideByScalar(quaternion, scalar, result) {
		result.x = quaternion.x / scalar;
		result.y = quaternion.y / scalar;
		result.z = quaternion.z / scalar;
		result.w = quaternion.w / scalar;
		return result;
	}
	static computeAxis(quaternion, result) {
		const w = quaternion.w;
		if (Math.abs(w - 1.0) < GMath.EPSILON6) {
			result.x = result.y = result.z = 0;
			return result;
		}
		const scalar = 1.0 / Math.sqrt(1.0 - w * w);
		result.x = quaternion.x * scalar;
		result.y = quaternion.y * scalar;
		result.z = quaternion.z * scalar;
		return result;
	}
	static computeAngle(quaternion) {
		if (Math.abs(quaternion.w - 1.0) < GMath.EPSILON6) {
			return 0.0;
		}
		return 2.0 * Math.acos(quaternion.w);
	}
	static lerp(start, end, t, result) {
		lerpScratch = Quaternion.multiplyByScalar(end, t, lerpScratch);
		result = Quaternion.multiplyByScalar(start, 1.0 - t, result);
		return Quaternion.add(lerpScratch, result, result);
	}
	static slerp(start, end, t, result) {
		let dot = Quaternion.dot(start, end);
		// The angle between start must be acute. Since q and -q represent
		// the same rotation, negate q to get the acute angle.
		let r = end;
		if (dot < 0.0) {
			dot = -dot;
			r = slerpEndNegated = Quaternion.negate(end, slerpEndNegated);
		}
		// dot > 0, as the dot product approaches 1, the angle between the
		// quaternions vanishes. use linear interpolation.
		if (1.0 - dot < GMath.EPSILON6) {
			return Quaternion.lerp(start, r, t, result);
		}
		const theta = Math.acos(dot);
		slerpScaledP = Quaternion.multiplyByScalar(start, Math.sin((1 - t) * theta), slerpScaledP);
		slerpScaledR = Quaternion.multiplyByScalar(r, Math.sin(t * theta), slerpScaledR);
		result = Quaternion.add(slerpScaledP, slerpScaledR, result);
		return Quaternion.multiplyByScalar(result, 1.0 / Math.sin(theta), result);
	}
	static computeInnerQuadrangle(q0, q1, q2, result) {
		const qInv = Quaternion.conjugate(q1, squadScratchQuaternion0);
		Quaternion.multiply(qInv, q2, squadScratchQuaternion1);
		const cart0 = Quaternion.log(squadScratchQuaternion1, squadScratchCartesian0);
		Quaternion.multiply(qInv, q0, squadScratchQuaternion1);
		const cart1 = Quaternion.log(squadScratchQuaternion1, squadScratchCartesian1);
		Vector3.add(cart0, cart1, cart0);
		Vector3.multiplyByScalar(cart0, 0.25, cart0);
		Vector3.negate(cart0, cart0);
		Quaternion.exp(cart0, squadScratchQuaternion0);
		return Quaternion.multiply(q1, squadScratchQuaternion0, result);
	}
	static squad(q0, q1, s0, s1, t, result) {
		const slerp0 = Quaternion.slerp(q0, q1, t, squadScratchQuaternion0);
		const slerp1 = Quaternion.slerp(s0, s1, t, squadScratchQuaternion1);
		return Quaternion.slerp(slerp0, slerp1, 2.0 * t * (1.0 - t), result);
	}
	static fastSlerp(start, end, t, result) {
		let x = Quaternion.dot(start, end);
		let sign;
		if (x >= 0) {
			sign = 1.0;
		} else {
			sign = -1.0;
			x = -x;
		}
		const xm1 = x - 1.0;
		const d = 1.0 - t;
		const sqrT = t * t;
		const sqrD = d * d;
		for (let i = 7; i >= 0; --i) {
			bT[i] = (u[i] * sqrT - v[i]) * xm1;
			bD[i] = (u[i] * sqrD - v[i]) * xm1;
		}
		const cT =
			sign *
			t *
			(1.0 +
				bT[0] *
					(1.0 +
						bT[1] *
							(1.0 +
								bT[2] *
									(1.0 + bT[3] * (1.0 + bT[4] * (1.0 + bT[5] * (1.0 + bT[6] * (1.0 + bT[7]))))))));
		const cD =
			d *
			(1.0 +
				bD[0] *
					(1.0 +
						bD[1] *
							(1.0 +
								bD[2] *
									(1.0 + bD[3] * (1.0 + bD[4] * (1.0 + bD[5] * (1.0 + bD[6] * (1.0 + bD[7]))))))));
		const temp = Quaternion.multiplyByScalar(start, cD, fastSlerpScratchQuaternion);
		Quaternion.multiplyByScalar(end, cT, result);
		return Quaternion.add(temp, result, result);
	}
	static fastSquad(q0, q1, s0, s1, t, result) {
		const slerp0 = Quaternion.fastSlerp(q0, q1, t, squadScratchQuaternion0);
		const slerp1 = Quaternion.fastSlerp(s0, s1, t, squadScratchQuaternion1);
		return Quaternion.fastSlerp(slerp0, slerp1, 2.0 * t * (1.0 - t), result);
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				left.x === right.x &&
				left.y === right.y &&
				left.z === right.z &&
				left.w === right.w)
		);
	}
	static equalsEpsilon(left, right, epsilon = 0) {
		epsilon = defaultValue(epsilon, 0);
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				Math.abs(left.x - right.x) <= epsilon &&
				Math.abs(left.y - right.y) <= epsilon &&
				Math.abs(left.z - right.z) <= epsilon &&
				Math.abs(left.w - right.w) <= epsilon)
		);
	}
	static log(quaternion, result) {
		const theta = GMath.acosClamped(quaternion.w);
		let thetaOverSinTheta = 0.0;
		if (theta !== 0.0) {
			thetaOverSinTheta = theta / Math.sin(theta);
		}
		return Vector3.multiplyByScalar(quaternion, thetaOverSinTheta, result);
	}
	static exp(cartesian, result) {
		const theta = Vector3.magnitude(cartesian);
		let sinThetaOverTheta = 0.0;
		if (theta !== 0.0) {
			sinThetaOverTheta = Math.sin(theta) / theta;
		}
		result.x = cartesian.x * sinThetaOverTheta;
		result.y = cartesian.y * sinThetaOverTheta;
		result.z = cartesian.z * sinThetaOverTheta;
		result.w = Math.cos(theta);
		return result;
	}
}
Quaternion.ZERO = Object.freeze(new Quaternion(0.0, 0.0, 0.0, 0.0));
Quaternion.IDENTITY = Object.freeze(new Quaternion(0.0, 0.0, 0.0, 1.0));
let fromAxisAngleScratch = new Vector3();
const fromRotationMatrixNext = [1, 2, 0];
const fromRotationMatrixQuat = new Array(3);
new Quaternion();
new Quaternion();
new Quaternion();
new Quaternion();
new Vector3();
new Vector3();
new Quaternion();
new Quaternion();
new Quaternion();
let lerpScratch = new Quaternion();
let slerpEndNegated = new Quaternion();
let slerpScaledP = new Quaternion();
let slerpScaledR = new Quaternion();
const fastSlerpScratchQuaternion = new Quaternion();
// eslint-disable-next-line no-loss-of-precision
const opmu = 1.90110745351730037;
const u = new Float32Array(8);
const v = new Float32Array(8);
const bT = new Float32Array(8);
const bD = new Float32Array(8);
for (let i = 0; i < 7; ++i) {
	const s = i + 1.0;
	const t = 2.0 * s + 1.0;
	u[i] = 1.0 / (s * t);
	v[i] = s / t;
}
u[7] = opmu / (8.0 * 17.0);
v[7] = (opmu * 8.0) / 17.0;
const squadScratchCartesian0 = new Vector3();
const squadScratchCartesian1 = new Vector3();
const squadScratchQuaternion0 = new Quaternion();
const squadScratchQuaternion1 = new Quaternion();

class RenderObject {
	constructor() {
		this._position = new Vector3();
		this._scale = new Vector3(1, 1, 1);
		this._quaternion = new Quaternion();
		this.modelMatrix = Matrix4.clone(Matrix4.IDENTITY, new Matrix4());
		this._normalMatrix = Matrix4.clone(Matrix4.IDENTITY, new Matrix4());
		this.up = new Vector3(0, 1, 0);
	}
	get normalMatrix() {
		return this._normalMatrix;
	}
	get position() {
		return this._position;
	}
	get scale() {
		return this._scale;
	}
	get quaternion() {
		return this._quaternion;
	}
	updateNormalMatrix() {
		Matrix4.inverse(this.modelMatrix, this._normalMatrix);
		Matrix4.transpose(this._normalMatrix, this._normalMatrix);
	}
	updateMatrix(matrix) {
		Matrix4.fromTranslationQuaternionRotationScale(this.position, this.quaternion, this.scale, this.modelMatrix);
		if (matrix) Matrix4.multiply(this.modelMatrix, matrix, this.modelMatrix);
		this.updateNormalMatrix();
	}
	lookAt(x, y, z) {
		_target.set(x, y, z);
		if (this.isCamera || this.isLight) {
			_m1.lookAt(this.position, _target, this.up);
		} else {
			_m1.lookAt(_target, this.position, this.up);
		}
		this.quaternion.setFromRotationMatrix(_m1);
	}
	rotateOnAxis(axis, angle) {
		const quat = Quaternion.fromAxisAngle(axis, angle);
		Quaternion.multiply(this.quaternion, quat, this.quaternion);
	}
	rotateX(angle) {
		return this.rotateOnAxis(_xAxis, angle);
	}
	rotateY(angle) {
		return this.rotateOnAxis(_yAxis, angle);
	}
	rotateZ(angle) {
		return this.rotateOnAxis(_zAxis, angle);
	}
}
const _xAxis = new Vector3(1, 0, 0);
const _yAxis = new Vector3(0, 1, 0);
const _zAxis = new Vector3(0, 0, 1);
const _m1 = new Matrix4();
const _target = new Vector3();
new Matrix3();
new Matrix4();

class Mesh extends RenderObject {
	constructor(geometry, material) {
		super();
		this.geometry = geometry;
		this.material = material;
		this.type = "mesh";
		this.isMesh = true;
		this.subCommands = {};
	}
	get ready() {
		return this.material.ready;
	}
	update(frameState, camera, matrix) {
		//update matrix
		this.updateMatrix(matrix);
		//create
		this.geometry.update(frameState);
		this.material.update(frameState, this);
		// update boundingSphere
		this.geometry.boundingSphere.update(this.modelMatrix);
		this.material.shaderSource.setDefines(frameState.defines);
		this.distanceToCamera = this.geometry.boundingSphere.distanceToCamera(camera);
		const visibility = frameState.cullingVolume.computeVisibility(this.geometry.boundingSphere);
		//视锥剔除
		if (visibility === Intersect.INTERSECTING || visibility === Intersect.INSIDE) {
			if (this.material.transparent) {
				frameState.renderQueue.transparent.push(this);
			} else {
				frameState.renderQueue.opaque.push(this);
			}
		}
	}
	beforeRender() {}
	afterRender() {}
	getDrawCommand(overrideMaterial, commandSubType) {
		if (!this.drawCommand || this.material.dirty) {
			this.material.shaderSource.setDefines(
				Object.assign(this.material.shaderData.defines, this.geometry.defines)
			);
			if (this.material.dirty) this.material.dirty = false;
			this.drawCommand = new DrawCommand({
				vertexBuffer: this.geometry.vertBuffer,
				indexBuffer: this.geometry.indexBuffer,
				shaderData: this.material.shaderData,
				instances: this.instances,
				count: this.geometry.count,
				renderState: this.material.renderState,
				shaderSource: this.material.shaderSource,
				type: "render",
				light: this.material.light,
				modelMatrix: this.modelMatrix
			});
		}
		if (overrideMaterial) {
			if (!this.subCommands[commandSubType]) {
				const copyMat = overrideMaterial.clone();
				overrideMaterial.update();
				copyMat.update();
				if (copyMat.dirty) copyMat.dirty = false;
				this.subCommands[commandSubType] = this.drawCommand.shallowClone(copyMat);
			}
			return this.subCommands[commandSubType];
		}
		return this.drawCommand;
	}
	destroy() {
		this.geometry.destroy();
		this.material.destroy();
	}
}

class BoundingSphere {
	constructor(center = new Vector3(0, 0, 0), radius = 0) {
		this.center = center;
		this.radius = radius;
		this.originCenter = this.center.clone();
		this.originRadius = radius;
	}
	/**
	 * @param {Vector3[]} [positions] An array of points that the bounding sphere will enclose.  Each point must have <code>x</code>, <code>y</code>, and <code>z</code> properties.
	 * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.
	 */
	static fromPoints(positions) {
		let result = new BoundingSphere();
		if (!defined(positions) || positions.length === 0) {
			result.center = Vector3.clone(Vector3.ZERO, result.center);
			result.radius = 0.0;
			return result;
		}
		const currentPos = Vector3.clone(positions[0], fromPointsCurrentPos);
		const xMin = Vector3.clone(currentPos, fromPointsXMin);
		const yMin = Vector3.clone(currentPos, fromPointsYMin);
		const zMin = Vector3.clone(currentPos, fromPointsZMin);
		const xMax = Vector3.clone(currentPos, fromPointsXMax);
		const yMax = Vector3.clone(currentPos, fromPointsYMax);
		const zMax = Vector3.clone(currentPos, fromPointsZMax);
		const numPositions = positions.length;
		let i;
		for (i = 1; i < numPositions; i++) {
			Vector3.clone(positions[i], currentPos);
			const x = currentPos.x;
			const y = currentPos.y;
			const z = currentPos.z;
			// Store points containing the the smallest and largest components
			if (x < xMin.x) {
				Vector3.clone(currentPos, xMin);
			}
			if (x > xMax.x) {
				Vector3.clone(currentPos, xMax);
			}
			if (y < yMin.y) {
				Vector3.clone(currentPos, yMin);
			}
			if (y > yMax.y) {
				Vector3.clone(currentPos, yMax);
			}
			if (z < zMin.z) {
				Vector3.clone(currentPos, zMin);
			}
			if (z > zMax.z) {
				Vector3.clone(currentPos, zMax);
			}
		}
		// Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).
		const xSpan = Vector3.magnitudeSquared(Vector3.subtract(xMax, xMin, fromPointsScratch));
		const ySpan = Vector3.magnitudeSquared(Vector3.subtract(yMax, yMin, fromPointsScratch));
		const zSpan = Vector3.magnitudeSquared(Vector3.subtract(zMax, zMin, fromPointsScratch));
		// Set the diameter endpoints to the largest span.
		let diameter1 = xMin;
		let diameter2 = xMax;
		let maxSpan = xSpan;
		if (ySpan > maxSpan) {
			maxSpan = ySpan;
			diameter1 = yMin;
			diameter2 = yMax;
		}
		if (zSpan > maxSpan) {
			maxSpan = zSpan;
			diameter1 = zMin;
			diameter2 = zMax;
		}
		// Calculate the center of the initial sphere found by Ritter's algorithm
		const ritterCenter = fromPointsRitterCenter;
		ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;
		ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;
		ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;
		// Calculate the radius of the initial sphere found by Ritter's algorithm
		let radiusSquared = Vector3.magnitudeSquared(Vector3.subtract(diameter2, ritterCenter, fromPointsScratch));
		let ritterRadius = Math.sqrt(radiusSquared);
		// Find the center of the sphere found using the Naive method.
		const minBoxPt = fromPointsMinBoxPt;
		minBoxPt.x = xMin.x;
		minBoxPt.y = yMin.y;
		minBoxPt.z = zMin.z;
		const maxBoxPt = fromPointsMaxBoxPt;
		maxBoxPt.x = xMax.x;
		maxBoxPt.y = yMax.y;
		maxBoxPt.z = zMax.z;
		const naiveCenter = Vector3.midpoint(minBoxPt, maxBoxPt, fromPointsNaiveCenterScratch);
		// Begin 2nd pass to find naive radius and modify the ritter sphere.
		let naiveRadius = 0;
		for (i = 0; i < numPositions; i++) {
			Vector3.clone(positions[i], currentPos);
			// Find the furthest point from the naive center to calculate the naive radius.
			const r = Vector3.magnitude(Vector3.subtract(currentPos, naiveCenter, fromPointsScratch));
			if (r > naiveRadius) {
				naiveRadius = r;
			}
			// Make adjustments to the Ritter Sphere to include all points.
			const oldCenterToPointSquared = Vector3.magnitudeSquared(
				Vector3.subtract(currentPos, ritterCenter, fromPointsScratch)
			);
			if (oldCenterToPointSquared > radiusSquared) {
				const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);
				// Calculate new radius to include the point that lies outside
				ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;
				radiusSquared = ritterRadius * ritterRadius;
				// Calculate center of new Ritter sphere
				const oldToNew = oldCenterToPoint - ritterRadius;
				ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;
				ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;
				ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;
			}
		}
		if (ritterRadius < naiveRadius) {
			Vector3.clone(ritterCenter, result.center);
			result.radius = ritterRadius;
		} else {
			Vector3.clone(naiveCenter, result.center);
			result.radius = naiveRadius;
		}
		return result;
	}
	/**
	 * Computes a tight-fitting bounding sphere enclosing a list of 3D points, where the points are
	 * stored in a flat array in X, Y, Z, order.  The bounding sphere is computed by running two
	 * algorithms, a naive algorithm and Ritter's algorithm. The smaller of the two spheres is used to
	 * ensure a tight fit.
	 *
	 * @param {Number[]} [positions] An array of points that the bounding sphere will enclose.  Each point
	 *        is formed from three elements in the array in the order X, Y, Z.
	 * @param {Vector3} [center=Vector3.ZERO] The position to which the positions are relative, which need not be the
	 *        origin of the coordinate system.  This is useful when the positions are to be used for
	 *        relative-to-center (RTC) rendering.
	 * @param {Number} [stride=3] The number of array elements per vertex.  It must be at least 3, but it may
	 *        be higher.  Regardless of the value of this parameter, the X coordinate of the first position
	 *        is at array index 0, the Y coordinate is at array index 1, and the Z coordinate is at array index
	 *        2.  When stride is 3, the X coordinate of the next position then begins at array index 3.  If
	 *        the stride is 5, however, two array elements are skipped and the next position begins at array
	 *        index 5.
	 * @param {BoundingSphere} [result] The object onto which to store the result.
	 * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.
	 *
	 * @example
	 * // Compute the bounding sphere from 3 positions, each specified relative to a center.
	 * // In addition to the X, Y, and Z coordinates, the points array contains two additional
	 * // elements per point which are ignored for the purpose of computing the bounding sphere.
	 * const center = new Vector3(1.0, 2.0, 3.0);
	 * const points = [1.0, 2.0, 3.0, 0.1, 0.2,
	 *               4.0, 5.0, 6.0, 0.1, 0.2,
	 *               7.0, 8.0, 9.0, 0.1, 0.2];
	 * const sphere = BoundingSphere.fromVertices(points, center, 5);
	 *
	 */
	static fromVertices(positions, center = Vector3.ZERO, stride = 3) {
		const result = new BoundingSphere();
		if (!defined(positions) || positions.length === 0) {
			result.center = Vector3.clone(Vector3.ZERO, result.center);
			result.radius = 0.0;
			return result;
		}
		center = defaultValue(center, Vector3.ZERO);
		stride = defaultValue(stride, 3);
		const currentPos = fromPointsCurrentPos;
		currentPos.x = positions[0] + center.x;
		currentPos.y = positions[1] + center.y;
		currentPos.z = positions[2] + center.z;
		const xMin = Vector3.clone(currentPos, fromPointsXMin);
		const yMin = Vector3.clone(currentPos, fromPointsYMin);
		const zMin = Vector3.clone(currentPos, fromPointsZMin);
		const xMax = Vector3.clone(currentPos, fromPointsXMax);
		const yMax = Vector3.clone(currentPos, fromPointsYMax);
		const zMax = Vector3.clone(currentPos, fromPointsZMax);
		const numElements = positions.length;
		let i;
		for (i = 0; i < numElements; i += stride) {
			const x = positions[i] + center.x;
			const y = positions[i + 1] + center.y;
			const z = positions[i + 2] + center.z;
			currentPos.x = x;
			currentPos.y = y;
			currentPos.z = z;
			// Store points containing the the smallest and largest components
			if (x < xMin.x) {
				Vector3.clone(currentPos, xMin);
			}
			if (x > xMax.x) {
				Vector3.clone(currentPos, xMax);
			}
			if (y < yMin.y) {
				Vector3.clone(currentPos, yMin);
			}
			if (y > yMax.y) {
				Vector3.clone(currentPos, yMax);
			}
			if (z < zMin.z) {
				Vector3.clone(currentPos, zMin);
			}
			if (z > zMax.z) {
				Vector3.clone(currentPos, zMax);
			}
		}
		// Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).
		const xSpan = Vector3.magnitudeSquared(Vector3.subtract(xMax, xMin, fromPointsScratch));
		const ySpan = Vector3.magnitudeSquared(Vector3.subtract(yMax, yMin, fromPointsScratch));
		const zSpan = Vector3.magnitudeSquared(Vector3.subtract(zMax, zMin, fromPointsScratch));
		// Set the diameter endpoints to the largest span.
		let diameter1 = xMin;
		let diameter2 = xMax;
		let maxSpan = xSpan;
		if (ySpan > maxSpan) {
			maxSpan = ySpan;
			diameter1 = yMin;
			diameter2 = yMax;
		}
		if (zSpan > maxSpan) {
			maxSpan = zSpan;
			diameter1 = zMin;
			diameter2 = zMax;
		}
		// Calculate the center of the initial sphere found by Ritter's algorithm
		const ritterCenter = fromPointsRitterCenter;
		ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;
		ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;
		ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;
		// Calculate the radius of the initial sphere found by Ritter's algorithm
		let radiusSquared = Vector3.magnitudeSquared(Vector3.subtract(diameter2, ritterCenter, fromPointsScratch));
		let ritterRadius = Math.sqrt(radiusSquared);
		// Find the center of the sphere found using the Naive method.
		const minBoxPt = fromPointsMinBoxPt;
		minBoxPt.x = xMin.x;
		minBoxPt.y = yMin.y;
		minBoxPt.z = zMin.z;
		const maxBoxPt = fromPointsMaxBoxPt;
		maxBoxPt.x = xMax.x;
		maxBoxPt.y = yMax.y;
		maxBoxPt.z = zMax.z;
		const naiveCenter = Vector3.midpoint(minBoxPt, maxBoxPt, fromPointsNaiveCenterScratch);
		// Begin 2nd pass to find naive radius and modify the ritter sphere.
		let naiveRadius = 0;
		for (i = 0; i < numElements; i += stride) {
			currentPos.x = positions[i] + center.x;
			currentPos.y = positions[i + 1] + center.y;
			currentPos.z = positions[i + 2] + center.z;
			// Find the furthest point from the naive center to calculate the naive radius.
			const r = Vector3.magnitude(Vector3.subtract(currentPos, naiveCenter, fromPointsScratch));
			if (r > naiveRadius) {
				naiveRadius = r;
			}
			// Make adjustments to the Ritter Sphere to include all points.
			const oldCenterToPointSquared = Vector3.magnitudeSquared(
				Vector3.subtract(currentPos, ritterCenter, fromPointsScratch)
			);
			if (oldCenterToPointSquared > radiusSquared) {
				const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);
				// Calculate new radius to include the point that lies outside
				ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;
				radiusSquared = ritterRadius * ritterRadius;
				// Calculate center of new Ritter sphere
				const oldToNew = oldCenterToPoint - ritterRadius;
				ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;
				ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;
				ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;
			}
		}
		if (ritterRadius < naiveRadius) {
			Vector3.clone(ritterCenter, result.center);
			result.radius = ritterRadius;
		} else {
			Vector3.clone(naiveCenter, result.center);
			result.radius = naiveRadius;
		}
		return result;
	}
	intersectPlane(plane) {
		const center = this.center;
		const radius = this.radius;
		const normal = plane.normal;
		const distanceToPlane = Vector3.dot(normal, center) + plane.distance;
		if (distanceToPlane < -radius) {
			// The center point is negative side of the plane normal
			return Intersect.OUTSIDE;
		} else if (distanceToPlane < radius) {
			// The center point is positive side of the plane, but radius extends beyond it; partial overlap
			return Intersect.INTERSECTING;
		}
		return Intersect.INSIDE;
	}
	update(transform) {
		Matrix4.multiplyByPoint(transform, this.originCenter, this.center);
		this.radius = Matrix4.getMaximumScale(transform) * this.originRadius;
	}
	distanceToCamera(camera) {
		return Math.max(0.0, Vector3.distance(this.center, camera.position) - this.radius);
	}
}
const fromPointsXMin = new Vector3();
const fromPointsYMin = new Vector3();
const fromPointsZMin = new Vector3();
const fromPointsXMax = new Vector3();
const fromPointsYMax = new Vector3();
const fromPointsZMax = new Vector3();
const fromPointsCurrentPos = new Vector3();
const fromPointsScratch = new Vector3();
const fromPointsRitterCenter = new Vector3();
const fromPointsMinBoxPt = new Vector3();
const fromPointsMaxBoxPt = new Vector3();
const fromPointsNaiveCenterScratch = new Vector3();

class VertextBuffer {
	constructor(label, attributes, index, stepMode) {
		this.index = index || 0;
		this.attributes = attributes || undefined;
		this.stepMode = InputStepMode.Vertex;
		this.dirty = true;
		this.label = label;
	}
	getBufferDes() {
		return [
			{
				arrayStride: this.arrayStride,
				stepMode: this.stepMode,
				attributes: this.attributes.getGPUAttributes()
			}
		];
	}
	setAttributes(attributes) {
		this.attributes = attributes;
		this.dirty = true;
	}
	bind(device, passEncoder) {
		if (this.dirty) {
			this.dirty = false;
			const { arrayStride, typeArray } = this.attributes.getMeregeAtrributeValues();
			this.arrayStride =
				arrayStride.reduce(function (sum, item, index, arr) {
					return (sum += item);
				}, 0) * typeArray.BYTES_PER_ELEMENT;
			this.buffer = Buffer.createVertexBuffer(this.label, device, typeArray);
		}
		passEncoder.setVertexBuffer(this.index, this.buffer.gpuBuffer);
	}
	destroy() {
		this.buffer.destroy();
	}
}

class Attributes {
	constructor() {
		this._attributes = new Map();
		this.shaderLocation = 0;
		this.offset = 0;
	}
	getAttribute(name) {
		return this._attributes.get(name);
	}
	setAttribute(attribute) {
		if (this._attributes.has(attribute.name)) return;
		attribute.shaderLocation = this.shaderLocation;
		this.shaderLocation += 1;
		attribute.offset = this.offset;
		this.offset += attribute.attributeByteSize;
		this._attributes.set(attribute.name, attribute);
	}
	getGPUAttributes() {
		const result = [];
		this._attributes.forEach((attribute) => {
			result.push(attribute.getGPUAttribute());
		});
		return result;
	}
	getMeregeAtrributeValues() {
		const arrayStride = [];
		const arrays = [];
		this._attributes.forEach((attribute) => {
			arrayStride.push(attribute.itemSize);
			arrays.push(attribute.value);
		});
		return {
			arrayStride,
			typeArray: this.interleaveTypedArray(Float32Array, arrayStride, ...arrays)
		};
	}
	destroy() {
		this._attributes.forEach((attribute) => {
			attribute.destroy();
		});
	}
	/**
	 * Interleave n typed arrays
	 * @alias module:interleaveTypedArray
	 * @param {TypedArray} ResultConstructor Returned typed array constructor
	 * @param {Array} elements Number of elements to group for each typed array
	 * @param {...TypedArray} arrays Arrays to interleave
	 * @returns {TypedArray}
	 */
	interleaveTypedArray(ResultConstructor, elements, ...arrays) {
		const totalLength = arrays.reduce((total, arr) => total + arr.length, 0);
		const result = new ResultConstructor(totalLength);
		const stride = elements.reduce((a, b) => a + b);
		for (let i = 0; i < totalLength; i++) {
			let offset = 0;
			for (let j = 0; j < elements.length; j++) {
				for (let k = 0; k < elements[j]; k++) {
					result[i * stride + offset] = arrays[j][elements[j] * i + k];
					offset++;
				}
			}
		}
		return result;
	}
}

class IndexBuffer {
	constructor(label, indices) {
		this.label = label;
		this.indices = indices;
		this.indexFormat = IndexFormat.Uint16;
		this.dirty = true;
	}
	setIndices(indices) {
		this.indices = indices;
		this.dirty = true;
	}
	bind(device, passEncoder) {
		if (this.dirty) {
			this.dirty = false;
			this.buffer = Buffer.createIndexBuffer(
				this.label,
				device,
				this.indexFormat == IndexFormat.Uint16 ? new Uint16Array(this.indices) : new Uint32Array(this.indices)
			);
		}
		passEncoder.setIndexBuffer(this.buffer.gpuBuffer, this.indexFormat);
	}
	destroy() {
		this.buffer.destroy();
	}
}

/**
 * Merges two objects, copying their properties onto a new combined object. When two objects have the same
 * property, the value of the property on the first object is used.  If either object is undefined,
 * it will be treated as an empty object.
 *
 * @example
 * const object1 = {
 *     propOne : 1,
 *     propTwo : {
 *         value1 : 10
 *     }
 * }
 * const object2 = {
 *     propTwo : 2
 * }
 * const final = Cesium.combine(object1, object2);
 *
 * // final === {
 * //     propOne : 1,
 * //     propTwo : {
 * //         value1 : 10
 * //     }
 * // }
 *
 * @param {Object} [object1] The first object to merge.
 * @param {Object} [object2] The second object to merge.
 * @param {Boolean} [deep=false] Perform a recursive merge.
 * @returns {Object} The combined object containing all properties from both objects.
 *
 * @function
 */
function combine(object1, object2, deep) {
	deep = defaultValue(deep, false);
	const result = {};
	const object1Defined = defined(object1);
	const object2Defined = defined(object2);
	let property;
	let object1Value;
	let object2Value;
	if (object1Defined) {
		for (property in object1) {
			if (object1.hasOwnProperty(property)) {
				object1Value = object1[property];
				if (object2Defined && deep && typeof object1Value === "object" && object2.hasOwnProperty(property)) {
					object2Value = object2[property];
					if (typeof object2Value === "object") {
						result[property] = combine(object1Value, object2Value, deep);
					} else {
						result[property] = object1Value;
					}
				} else {
					result[property] = object1Value;
				}
			}
		}
	}
	if (object2Defined) {
		for (property in object2) {
			if (object2.hasOwnProperty(property) && !result.hasOwnProperty(property)) {
				object2Value = object2[property];
				result[property] = object2Value;
			}
		}
	}
	return result;
}

class Geometry {
	get defines() {
		return this._defines;
	}
	set defines(value) {
		this.definesDirty = true;
		this._defines = combine(value, this._defines, false);
	}
	constructor(options) {
		this.type = options.type || undefined;
		this.boundingSphere = undefined;
		this.dirty = false;
		this.definesDirty = true;
		this.locationIndex = 0;
		this.attributes = new Attributes();
		this.vertBuffer = new VertextBuffer(this.type, this.attributes, 0);
		this._defines = {};
		this.normals = [];
		this.uvs = [];
		this.positions = [];
		this.indices = [];
		this.tangents = [];
	}
	getAttribute(name) {
		return this.attributes.getAttribute(name);
	}
	setAttribute(attribute) {
		if (!this._defines[attribute?.name?.concat("Location")]) {
			this._defines[attribute?.name?.concat("Location")] = this.locationIndex;
			this.locationIndex += 1;
		}
		this.attributes.setAttribute(attribute);
	}
	setIndice(indices) {
		this.indices = indices;
		if (!this.indexBuffer) this.indexBuffer = new IndexBuffer(this.type + "IndexBuffer");
		this.indexBuffer.setIndices(indices);
	}
	update(frameState) {}
	computeBoundingSphere(positions) {
		this.boundingSphere = BoundingSphere.fromVertices(this.positions, new Vector3(0, 0, 0), 3);
	}
	/**
	 * Calculate mesh tangent.
	 * @remark need to set positions(with or not with indices), normals, uv before calculation.
	 * @remark based on http://foundationsofgameenginedev.com/FGED2-sample.pdf
	 */
	calculateTangents() {
		if (!this.normals || !this.uvs) {
			throw "Set normal and uv before calculation.";
		}
		const { indices, positions, normals, uvs } = this;
		const tempPos0 = new Vector3(),
			tempPos1 = new Vector3(),
			tempPos2 = new Vector3(),
			tempUV0 = new Vector2(),
			tempUV1 = new Vector2(),
			tempUV2 = new Vector2();
		const e1 = new Vector3(),
			e2 = new Vector3(),
			t = new Vector3(),
			b = new Vector3(),
			temp = new Vector3();
		const vertexCount = this.indices.length;
		const triangleCount = indices ? indices.length / 3 : positions.length / 3;
		const tangents = new Array(vertexCount);
		const biTangents = new Array(vertexCount);
		this.tangents = [];
		for (let i = 0; i < vertexCount; i++) {
			tangents[i] = new Vector4();
			biTangents[i] = new Vector3();
		}
		// Calculate tangent and bi-tangent for each triangle and add to all three vertices.
		for (let k = 0; k < triangleCount; k++) {
			let i0 = 3 * k;
			let i1 = 3 * k + 1;
			let i2 = 3 * k + 2;
			if (indices) {
				i0 = indices[i0];
				i1 = indices[i1];
				i2 = indices[i2];
			}
			const p0 = tempPos0.set(positions[i0], positions[i0 + 1], positions[i0 + 2]);
			const p1 = tempPos1.set(positions[i1], positions[i1 + 1], positions[i1 + 2]);
			const p2 = tempPos2.set(positions[i2], positions[i2 + 1], positions[i2 + 2]);
			const w0 = tempUV0.set(uvs[i0], uvs[i0 + 1]);
			const w1 = tempUV1.set(uvs[i1], uvs[i1 + 1]);
			const w2 = tempUV2.set(uvs[i2], uvs[i2 + 1]);
			Vector3.subtract(p1, p0, e1);
			Vector3.subtract(p2, p0, e2);
			const x1 = w1.x - w0.x;
			const x2 = w2.x - w0.x;
			const y1 = w1.y - w0.y;
			const y2 = w2.y - w0.y;
			const r = 1.0 / (x1 * y2 - x2 * y1);
			Vector3.multiplyByScalar(e1, y2 * r, t);
			Vector3.multiplyByScalar(e2, y1 * r, temp);
			Vector3.subtract(t, temp, t);
			Vector3.multiplyByScalar(e2, x1 * r, b);
			Vector3.multiplyByScalar(e1, x2 * r, temp);
			Vector3.subtract(b, temp, b);
			let tangent = tangents[i0];
			tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1.0);
			tangent = tangents[i1];
			tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1.0);
			tangent = tangents[i2];
			tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1.0);
			biTangents[i0].add(b);
			biTangents[i1].add(b);
			biTangents[i2].add(b);
		}
		// Orthonormalize each tangent and calculate the handedness.
		for (let i = 0; i < vertexCount; i++) {
			const n = new Vector3(normals[3 * i], normals[3 * i + 1], normals[3 * i + 2]);
			const b = biTangents[i];
			const tangent = tangents[i];
			t.set(tangent.x, tangent.y, tangent.z);
			Vector3.cross(t, b, temp);
			const w = Vector3.dot(temp, n) > 0.0 ? 1 : -1;
			Vector3.multiplyByScalar(n, Vector3.dot(t, n), temp);
			Vector3.subtract(t, temp, t);
			Vector3.normalize(t, t);
			// t.normalize();
			tangent.set(t.x, t.y, t.z, w);
			this.tangents.push(t.x, t.y, t.z, w);
		}
		// this.setTangents(tangents);
	}
	destroy() {
		this?.indexBuffer.destroy();
		this.vertBuffer.destroy();
		this.attributes.destroy();
		this.normals = null;
		this.uvs = null;
		this.positions = null;
		this.indices = null;
		this.tangents = null;
		this.boundingSphere = undefined;
	}
}

const preprocessorSymbols = /#([^\s]*)(\s*)/gm;
// Template literal tag that handles simple preprocessor symbols for WGSL
// shaders. Supports #if/elif/else/endif statements.
function wgslParseDefines(strings, ...values) {
	const stateStack = [];
	let state = { frag: "", elseIsValid: false, expression: true };
	let depth = 1;
	for (let i = 0; i < strings.length; ++i) {
		const frag = strings[i];
		const matchedSymbols = frag.matchAll(preprocessorSymbols);
		let lastIndex = 0;
		let valueConsumed = false;
		for (const match of matchedSymbols) {
			state.frag += frag.substring(lastIndex, match.index);
			switch (match[1]) {
				case "if":
					if (match.index + match[0].length != frag.length) {
						throw new Error("#if must be immediately followed by a template expression (ie: ${value})");
					}
					valueConsumed = true;
					stateStack.push(state);
					depth++;
					state = { frag: "", elseIsValid: true, expression: !!values[i] };
					break;
				case "elif":
					if (match.index + match[0].length != frag.length) {
						throw new Error("#elif must be immediately followed by a template expression (ie: ${value})");
					} else if (!state.elseIsValid) {
						throw new Error("#elif not preceeded by an #if or #elif");
					}
					valueConsumed = true;
					if (state.expression && stateStack.length != depth) {
						stateStack.push(state);
					}
					state = { frag: "", elseIsValid: true, expression: !!values[i] };
					break;
				case "else":
					if (!state.elseIsValid) {
						throw new Error("#else not preceeded by an #if or #elif");
					}
					if (state.expression && stateStack.length != depth) {
						stateStack.push(state);
					}
					state = { frag: match[2], elseIsValid: false, expression: true };
					break;
				case "endif":
					if (!stateStack.length) {
						throw new Error("#endif not preceeded by an #if");
					}
					const branchState = stateStack.length == depth ? stateStack.pop() : state;
					state = stateStack.pop();
					depth--;
					if (branchState.expression) {
						state.frag += branchState.frag;
					}
					state.frag += match[2];
					break;
				default:
					// Unknown preprocessor symbol. Emit it back into the output frag unchanged.
					state.frag += match[0];
					break;
			}
			lastIndex = match.index + match[0].length;
		}
		// If the frag didn't end on one of the preprocessor symbols append the rest of it here.
		if (lastIndex != frag.length) {
			state.frag += frag.substring(lastIndex, frag.length);
		}
		// If the next value wasn't consumed by the preprocessor symbol, append it here.
		if (!valueConsumed && values.length > i) {
			state.frag += values[i];
		}
	}
	if (stateStack.length) {
		throw new Error("Mismatched #if/#endif count");
	}
	return state.frag;
}

function light(defines) {
	return wgslParseDefines` 
    struct ReflectedLight {
        ambient: vec3<f32>,
        directDiffuse:vec3<f32>,
        directSpecular:vec3<f32>,
        indirectDiffuse:vec3<f32>,
        indirectSpecular:vec3<f32>,
    }; 
    struct IncidentLight {
        color: vec3<f32>,
        direction: vec3<f32>,
        visible: bool,
    };
    struct Geometry {
        position: vec3<f32>,
        normal: vec3<f32>,
        viewDir: vec3<f32>,
        dotNV:f32,
        #if ${defines.USE_CLEARCOAT}
            vec3 clearcoatNormal;
        #endif
    };

    #if ${defines.spotLightsCount > 0}
        struct SpotLight {
            position: vec3<f32>,
            distance: f32,
            direction: vec3<f32>,
            coneCos: f32,
            color: vec3<f32>,
            penumbraCos: f32,
            decay: f32,
        };
        fn getSpotLightInfo(spotLight:SpotLight,worldPos:vec3<f32>,shininess:f32,N:vec3<f32>,V:vec3<f32>)->ReflectedLight{
                var direction:vec3<f32> = spotLight.position - worldPos;
                var lightColor:ReflectedLight;
                let lightDistance:f32 = length(direction);
                direction = normalize(direction);
                let angleCos:f32 = dot( direction, spotLight.direction );
                let decay:f32 = clamp(1.0 - pow(lightDistance/spotLight.distance, spotLight.decay), 0.0, 1.0);
                let spotEffect:f32 = smoothstep( spotLight.penumbraCos, spotLight.coneCos, angleCos );
                let decayTotal:f32 = decay * spotEffect;
                let d:f32 = max( dot( N, direction ), 0.0 )  * decayTotal;
                lightColor.directDiffuse= spotLight.color * d;
                let halfDir:vec3<f32> = normalize( V + direction );
                let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess ) * decayTotal;
                lightColor.directSpecular= spotLight.color * s;
                return lightColor;
        }
        fn getSpotLightIncidentLight(spotLight:SpotLight, geometry:Geometry)->IncidentLight {
            var incidentLight:IncidentLight;
            let lVector:vec3<f32> = spotLight.position - geometry.position;
            incidentLight.direction = normalize( lVector );
    
            let lightDistance:f32 = length( lVector );
            let angleCos:f32 = dot( incidentLight.direction, spotLight.direction );
    
            let spotEffect:f32 = smoothstep( spotLight.penumbraCos, spotLight.coneCos, angleCos );
            let decayEffect:f32 = clamp(1.0 - pow(lightDistance/spotLight.distance, 4.0), 0.0, 1.0);
    
            incidentLight.color=spotLight.color*spotEffect * decayEffect; 
            return  incidentLight;
        }

    #endif 

    #if ${defines.pointLightsCount > 0}
        struct PointLight {
            position: vec3<f32>,
            distance: f32,
            color: vec3<f32>,
            decay: f32,
        };
        fn getPointLightInfo(pointLight:PointLight,worldPos:vec3<f32>,shininess:f32,N:vec3<f32>,V:vec3<f32>)->ReflectedLight{
            var lightColor:ReflectedLight;
            var direction:vec3<f32> = worldPos - pointLight.position;
            let dist:f32 = length( direction );
            direction = normalize(direction);
            let decay = clamp(1.0 - pow(dist / pointLight.distance, pointLight.decay), 0.0, 1.0);
    
            let d =  max( dot( N, -direction ), 0.0 ) * decay;
            lightColor.directDiffuse = pointLight.color * d;
    
            let halfDir:vec3<f32> = normalize( V - direction );
            let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess )  * decay;
            lightColor.directSpecular = pointLight.color * s;
            return lightColor;
        }
        fn getPointLightIncidentLight(pointLight:PointLight, geometry:Geometry)->IncidentLight {
            var incidentLight:IncidentLight;
            let lVector:vec3<f32> = pointLight.position-geometry.position;
            incidentLight.direction= normalize( lVector );
            let lightDistance:f32 = length( lVector );
            // let weight:f32=1.0 - pow(lightDistance/pointLight.distance, 4.0);
            incidentLight.color=pointLight.color*clamp(1.0 - pow(lightDistance/pointLight.distance, 4.0), 0.0, 1.0);
            return incidentLight;
        }
    #endif
    #if ${defines.dirtectLightsCount > 0}
        struct DirectionalLight {
            direction: vec3<f32>,
            color: vec3<f32>,
        };
        fn getDirectLightInfo(directionalLight:DirectionalLight,shininess:f32,N:vec3<f32>,V:vec3<f32>)->ReflectedLight{
            var lightColor:ReflectedLight;
            let d:f32 = max(dot(N, -directionalLight.direction), 0.0);
            lightColor.directDiffuse += directionalLight.color * d;
    
            let halfDir:vec3<f32> = normalize( V - directionalLight.direction );
            let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess );
            lightColor.directSpecular += directionalLight.color * s;
            return lightColor;
        }
        fn getDirectionalDirectLightIncidentLight(directionalLight:DirectionalLight,geometry:Geometry)->IncidentLight {
            var incidentLight:IncidentLight;
            incidentLight.color = directionalLight.color;
            incidentLight.direction = normalize(directionalLight.direction);
            return incidentLight;         
        }
    #endif

    #if ${defines.openShadow} 
        struct LightInfo {
            direction: vec3<f32>,
        };
        
        fn linearizeDepth(depth: f32, near: f32, far: f32)->f32 {
            return 2 * (near * far) / (far + near - depth * (far - near));
        }

        fn getShadowValue(shadowMapArray:texture_depth_2d_array, shadowSampler:sampler_comparison, lightPos:vec4<f32>, geometry:Geometry, lightInfo:LightInfo, index:u32, isPerspectiveCamera: bool, near: f32, far: f32)->f32 {
            var visibility = 0.0;
            var projectPos: vec3<f32> = lightPos.xyz / lightPos.w;
            var shadowPos: vec3<f32> = vec3(projectPos.xy * vec2(0.5, -0.5) + vec2(0.5), projectPos.z);
            var d:f32 = dot(geometry.normal, -lightInfo.direction);
            var bias = max(0.012 * (1.0 - d), 0.001) / lightPos.w;
            let oneOverShadowDepthTextureSize = 1.0 / 1024.0;
            // var depth = select(shadowPos.z, (linearizeDepth(shadowPos.z, near, far) - near) / (far- near), isPerspectiveCamera);
            var depth = shadowPos.z;
            for (var y = -1; y <= 1; y++) {
                for (var x = -1; x <= 1; x++) {
                    let offset = vec2<f32>(vec2(x, y)) * oneOverShadowDepthTextureSize;
                
                    visibility += textureSampleCompare(
                        shadowMapArray, shadowSampler,
                        shadowPos.xy + offset, index, depth - bias);
                }
            }
            visibility /= 9.0;
            var inFrustum = shadowPos.x >= 0.0 && shadowPos.x <= 1.0 && shadowPos.y >= 0.0 && shadowPos.y <= 1.0;
            if (!inFrustum || depth > 1.0) {
                visibility = 1.0;
            }
            return visibility;
        }
    #endif

    #if ${
		defines.ambientLightCount || defines.spotLightsCount || defines.pointLightsCount || defines.dirtectLightsCount
	}
        struct LightUniforms{
            #if ${defines.ambientLightCount}
                ambient:vec4<f32>,
            #endif
            #if ${defines.spotLightsCount}
                spotLights:array<SpotLight,${defines.spotLightsCount}>,
            #endif
            #if ${defines.pointLightsCount}
                pointLights:array<PointLight,${defines.pointLightsCount}>,
            #endif
            #if ${defines.dirtectLightsCount}
                dirtectLights:array<DirectionalLight,${defines.dirtectLightsCount}>,
            #endif
        }
        @group(2) @binding(${defines.lightBinding}) var<storage, read> lightUniforms: LightUniforms;

        #if ${defines.openShadow}
            #if ${defines.spotLightShadowMapsCount}
                struct SpotLightShadow {
                    shadowCameraVPMatrixArray: mat4x4<f32>,
                    shadowCameraNear: f32,
                    shadowCameraFar: f32
                }
            #endif
            #if ${defines.pointLightShadowMapsCount}
                struct PointLightShadow {
                    shadowCameraVPMatrixArray: mat4x4<f32>,
                    shadowCameraNear: f32,
                    shadowCameraFar: f32
                }
            #endif
            #if ${defines.directLightShadowMapsCount}
                struct DirectLightShadow {
                    shadowCameraVPMatrixArray: mat4x4<f32>,
                }
            #endif
            struct ShadowUniforms{
                #if ${defines.spotLightShadowMapsCount}
                    spotLightShadows:array<SpotLightShadow,${defines.spotLightShadowMapsCount}>,
                #endif
                #if ${defines.pointLightShadowMapsCount}
                    pointLightShadows:array<PointLightShadow,${defines.pointLightShadowMapsCount}>,
                #endif
                #if ${defines.directLightShadowMapsCount}
                    directLightShadows:array<DirectLightShadow,${defines.directLightShadowMapsCount}>,
                #endif
            }
            @group(2) @binding(${defines.shadowBinding}) var<storage, read> shadowUniforms: ShadowUniforms;

            #if ${defines.spotLightShadowMapTextureArrayBinding}
                @group(2) @binding(${
					defines.spotLightShadowMapTextureArrayBinding
				}) var spotLightShadowMapTextureArray: texture_depth_2d_array;
            #endif
            #if ${defines.pointLightShadowMapTextureArrayBinding}
                @group(2) @binding(${
					defines.pointLightShadowMapTextureArrayBinding
				}) var pointLightShadowMapTextureArray: texture_depth_2d_array;
            #endif
            #if ${defines.directLightShadowMapTextureArrayBinding}
                @group(2) @binding(${
					defines.directLightShadowMapTextureArrayBinding
				}) var directLightShadowMapTextureArray: texture_depth_2d_array;
            #endif
            @group(2) @binding(${defines.shadowSamplerBinding}) var shadowSampler: sampler_comparison;
        #endif

    #endif
    #if ${defines.materialPhong}
        fn parseLights(geometry:Geometry,shininess:f32)->ReflectedLight {
    #elif ${defines.materialPbr}
        fn parseLights(geometry:Geometry,material:PhysicalMaterial)->ReflectedLight{
    #endif
        var reflectedLight:ReflectedLight;
        var shadowValue:f32 = 1.0;
        #if ${defines.ambientLightCount > 0}
            //处理环境光
            var ambientColor:vec3<f32> = lightUniforms.ambient.xyz * lightUniforms.ambient.w;
            reflectedLight.ambient += ambientColor;
        #endif

        #if ${defines.spotLightsCount > 0}
            //处理聚光灯
            var spotLight:SpotLight;
            for (var k = 0u; k < ${defines.spotLightsCount}; k = k + 1u) {
                spotLight= lightUniforms.spotLights[k];
                #if ${defines.materialPhong && defines.openShadow && defines.spotLightShadowMapsCount}
                    if k < textureNumLayers(spotLightShadowMapTextureArray) {
                        var spotLightShadow:SpotLightShadow = shadowUniforms.spotLightShadows[k];
                        var lightPos: vec4<f32> = spotLightShadow.shadowCameraVPMatrixArray * vec4<f32>(geometry.position,1.0);
                        var lightInfo:LightInfo;
                        lightInfo.direction = normalize(geometry.position - spotLight.position);
                    
                        shadowValue = getShadowValue(spotLightShadowMapTextureArray, shadowSampler, lightPos, geometry, lightInfo, k, true,
                            spotLightShadow.shadowCameraNear, spotLightShadow.shadowCameraFar);
                    }
                    spotLight.color *= shadowValue;
                #endif
                #if ${defines.materialPhong}
                    let spReflectedLight=getSpotLightInfo(spotLight,geometry.position,shininess,geometry.normal,geometry.viewDir);
                #elif ${defines.materialPbr}
                    let incidentLight=getSpotLightIncidentLight(spotLight,geometry);
                    let spReflectedLight=direct_Physical(incidentLight, geometry, material);
                #endif

                reflectedLight.directDiffuse+=spReflectedLight.directDiffuse;
                reflectedLight.directSpecular+=spReflectedLight.directSpecular;
            }
        #endif
        #if ${defines.pointLightsCount > 0}
            //处理点光源
            var pointLight:PointLight;
            for (var j= 0u; j < ${defines.pointLightsCount};j = j + 1u) {
                pointLight = lightUniforms.pointLights[j];
                #if ${defines.materialPhong && defines.openShadow && defines.pointLightShadowMapsCount}
                    if j < textureNumLayers(pointLightShadowMapTextureArray) {
                        var pointLightShadow:PointLightShadow = shadowUniforms.pointLightShadows[j];
                        var lightPos: vec4<f32> = pointLightShadow.shadowCameraVPMatrixArray * vec4<f32>(geometry.position,1.0);
                        var lightInfo:LightInfo;
                        lightInfo.direction = normalize(geometry.position - pointLight.position);

                        shadowValue = getShadowValue(pointLightShadowMapTextureArray, shadowSampler, lightPos, geometry, lightInfo, j, true,
                             pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar);
                    }
                    pointLight.color *= shadowValue;
                #endif
                #if ${defines.materialPhong}
                    let poiReflectedLight=getPointLightInfo(pointLight,geometry.position,shininess,geometry.normal,geometry.viewDir);
                #elif ${defines.materialPbr}
                   let incidentLight=getPointLightIncidentLight(pointLight,geometry);
                   let poiReflectedLight=direct_Physical(incidentLight, geometry, material);
                #endif

                reflectedLight.directDiffuse+=poiReflectedLight.directDiffuse;
                reflectedLight.directSpecular+=poiReflectedLight.directSpecular;
            }
        #endif
        #if ${defines.dirtectLightsCount > 0}
            //处理方向光
            var directionalLight:DirectionalLight;
            for (var i= 0u; i <${defines.dirtectLightsCount}; i = i + 1u) {
                directionalLight = lightUniforms.dirtectLights[i];
                #if ${defines.materialPhong && defines.openShadow && defines.directLightShadowMapsCount}
                    if i < textureNumLayers(directLightShadowMapTextureArray) {
                        var directLightShadow:DirectLightShadow = shadowUniforms.directLightShadows[i];
                        var lightPos: vec4<f32> = directLightShadow.shadowCameraVPMatrixArray * vec4<f32>(geometry.position,1.0);
                        var lightInfo:LightInfo;
                        lightInfo.direction = directionalLight.direction;
                            
                        shadowValue = getShadowValue(directLightShadowMapTextureArray, shadowSampler, lightPos, geometry, lightInfo, i, false, 0, 0);
                    }
                    directionalLight.color *= shadowValue;
                #endif
            
                #if ${defines.materialPhong}
                    let dirReflectedLight=getDirectLightInfo(directionalLight,shininess,geometry.normal,geometry.viewDir);
                #elif ${defines.materialPbr}
                    let incidentLight=getDirectionalDirectLightIncidentLight(directionalLight,geometry);
                    let dirReflectedLight=direct_Physical(incidentLight, geometry, material);
                #endif

                reflectedLight.directDiffuse+=dirReflectedLight.directDiffuse;
                reflectedLight.directSpecular+=dirReflectedLight.directSpecular;
            }
        #endif
        return reflectedLight;
    }`;
}

function lightCommon(defines) {
	return wgslParseDefines`
    struct ReflectedLight {
        directDiffuse:vec3<f32>,
        directSpecular:vec3<f32>,
        indirectDiffuse:vec3<f32>,
        indirectSpecular:vec3<f32>,
    };
    struct Geometry {
        position: vec3<f32>,
        normal: vec3<f32>,
        viewDir: vec3<f32>,
        #if ${defines.USE_CLEARCOAT}
            vec3 clearcoatNormal;
        #endif
    };
    fn getAmbientLightIrradiance(ambientLightColor: vec3<f32>) -> vec3<f32> {
        let irradiance = ambientLightColor;
        return irradiance;
    }
    fn getDistanceAttenuation(lightDistance: f32, cutoffDistance: f32, decayExponent: f32) -> f32 {
        if (cutoffDistance > 0.0 && decayExponent > 0.0) {
            let x:f32 = saturate(- lightDistance / cutoffDistance + 1.0);
            return pow(x, decayExponent);
        }
        return 1.0;
    }
    fn getSpotAttenuation(coneCosine: f32, penumbraCosine: f32, angleCosine: f32) -> f32 {
        return smoothstep(coneCosine, penumbraCosine, angleCosine);
    }
    fn shGetIrradianceAt( normal:vec3<f32>, shCoefficients:array<vec3<f32>,9>)->vec3<f32> {
        let x:f32 = normal.x; 
        let y:f32 = normal.y; 
        let z:f32 = normal.z;
        var result:vec3<f32> = shCoefficients[ 0 ] * 0.886227;
        result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
        result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
        result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
        result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
        result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
        result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
        result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
        result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
        return result;
    }
    fn inverseTransformDirection( dir:vec3<f32>, matrix:mat4x4<f32> )->vec3<f32> {
        return normalize( ( vec4<f32>( dir, 0.0 ) * matrix ).xyz );
    }
 `;
}

function brdf(defines) {
	return wgslParseDefines`
        #if ${defines.USE_SHEEN}
                fn D_Charlie( roughness:f32,dotNH:f32 )->f32 {
                    let alpha:f32 = pow2( roughness );
                    let invAlpha:f32 = 1.0 / alpha;
                    let cos2h:f32 = dotNH * dotNH;
                    let sin2h:f32 = max( 1.0 - cos2h, 0.0078125 );
                    return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
                }
                fn V_Neubelt( dotNV:f32, dotNL:f32 )->f32 {
                    return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
                }
                fn BRDF_Sheen(lightDir:vec3<f32>, viewDir:vec3<f32>, normal:vec3<f32>,sheenColor:vec3<f32>,sheenRoughness:f32 )->vec3<f32> {
                    let halfDir:vec3<f32> = normalize( lightDir + viewDir );
                    let dotNL:f32 = saturate( dot( normal, lightDir ) );
                    let dotNV:f32 = saturate( dot( normal, viewDir ) );
                    let dotNH:f32 = saturate( dot( normal, halfDir ) );
                    let D:f32 = D_Charlie( sheenRoughness, dotNH );
                    let V:f32 = V_Neubelt( dotNV, dotNL );
                    return sheenColor * ( D * V );
                }
        #endif
        fn BRDF_Lambert(diffuseColor:vec3<f32>)->vec3<f32> {

            return RECIPROCAL_PI * diffuseColor;

        } // validated

        fn F_Schlick( f0:vec3<f32>, dotVH:f32 )->vec3<f32> {

            // Original approximation by Christophe Schlick '94
            // float fresnel = pow( 1.0 - dotVH, 5.0 );

            // Optimized variant (presented by Epic at SIGGRAPH '13)
            // https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
           let fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
           return ( 1.0 - f0 ) * fresnel + f0;

        } // validated

        fn Schlick_to_F0(f:vec3<f32>, f90:f32, dotVH:f32 )->vec3<f32> {
            let x:f32 = clamp( 1.0 - dotVH, 0.0, 1.0 );
            let x2:f32 = x * x;
            let x5:f32 = clamp( x * x2 * x2, 0.0, 0.9999 );

            return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
        }
        fn V_GGX_SmithCorrelated( alpha:f32, dotNL:f32,dotNV:f32 )->f32 {

            let a2 :f32= pow2( alpha );

            let gv:f32 = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
            let gl:f32 = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );

            return 0.5 / max((gv + gl), 0.000000001 );

        }
        fn D_GGX( alpha:f32, dotNH:f32 )->f32 {

            let a2:f32 = pow2( alpha );

            let denom:f32 = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1

            return RECIPROCAL_PI * a2 / pow2( denom );

        }
        fn BRDF_GGX( lightDir:vec3<f32>, viewDir:vec3<f32>, normal:vec3<f32>, f0:vec3<f32>,  roughness:f32 )->vec3<f32> {

            let alpha:f32 = pow2( roughness ); // UE4's roughness

            let halfDir = normalize( lightDir + viewDir );

            let dotNL:f32 = saturate( dot( normal, lightDir ) );
            let dotNV:f32 = saturate( dot( normal, viewDir ) );
            let dotNH:f32 = saturate( dot( normal, halfDir ) );
            let dotVH:f32 = saturate( dot( lightDir, halfDir ) );

            let F = F_Schlick( f0,  dotVH );

            let V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );

            let D = D_GGX( alpha, dotNH );

            return F * ( V * D );

        }
        fn direct_Physical( directLight:IncidentLight, geometry:Geometry,material:PhysicalMaterial)->ReflectedLight {
            var reflectedLight:ReflectedLight;
            let dotNL:f32 = saturate(dot( geometry.normal,geometry.viewDir));
            let irradiance:vec3<f32> = dotNL * directLight.color*3.1415926;
            reflectedLight.directSpecular = irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.roughness );
            reflectedLight.directDiffuse = irradiance * BRDF_Lambert( material.diffuseColor );
            return reflectedLight;
        }
  `;
}

function pbrFunction(defines) {
	return wgslParseDefines`

    #if ${defines.DITHERING}
        fn dithering(color:vec3<f32> )->vec3<f32> {
            let grid_position:f32 = rand( gl_FragCoord.xy );
            let dither_shift_RGB:vec3<f32> = vec3<f32>( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
            dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
            return color + dither_shift_RGB;
        }
    #endif

    #if ${defines.USE_IRIDESCENCE}
        fn BRDF_GGX_Iridescence( lightDir:vec3<f32>, viewDir:vec3<f32>,normal:vec3<f32>, f0:vec3<f32>, f90:f32,iridescence:f32, iridescenceFresnel:vec3<f32>,roughness:f32 )->vec3<f32> {
            let alpha:f32 = pow2( roughness );
            let halfDir:vec3<f32> = normalize( lightDir + viewDir );
            let dotNL:f32 = saturate( dot( normal, lightDir ) );
            let dotNV:f32 = saturate( dot( normal, viewDir ) );
            let dotNH:f32 = saturate( dot( normal, halfDir ) );
            let dotVH:f32 = saturate( dot( viewDir, halfDir ) );
            let F:vec3<f32> = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );
            let V:f32 = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
            let D:f32 = D_GGX( alpha, dotNH );
            return F * ( V * D );
        }
    #endif

    #if ${defines.USE_SHEEN}
        fn D_Charlie( roughness:f32,dotNH:f32 )->f32 {
            let alpha:f32 = pow2( roughness );
            let invAlpha:f32 = 1.0 / alpha;
            let cos2h:f32 = dotNH * dotNH;
            let sin2h:f32 = max( 1.0 - cos2h, 0.0078125 );
            return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
        }
        fn V_Neubelt( dotNV:f32, dotNL:f32 )->f32 {
            return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
        }
        fn BRDF_Sheen(lightDir:vec3<f32>, viewDir:vec3<f32>, normal:vec3<f32>,sheenColor:vec3<f32>,sheenRoughness:f32 )->vec3<f32> {
            let halfDir:vec3<f32> = normalize( lightDir + viewDir );
            let dotNL:f32 = saturate( dot( normal, lightDir ) );
            let dotNV:f32 = saturate( dot( normal, viewDir ) );
            let dotNH:f32 = saturate( dot( normal, halfDir ) );
            let D:f32 = D_Charlie( sheenRoughness, dotNH );
            let V:f32 = V_Neubelt( dotNV, dotNL );
            return sheenColor * ( D * V );
        }
    #endif

    #if ${defines.USE_IRIDESCENCE}
        let XYZ_TO_REC709: mat3x3<f32> = mat3x3<f32>(
        3.2404542, -0.9692660, 0.0556434, -1.5371385, 1.8760108, -0.2040259, -0.4985314, 0.0415560, 1.0572252
        );
        fn Fresnel0ToIor( fresnel0:vec3<f32> )->vec3<f32> {
            let sqrtF0:vec3<f32> = sqrt( fresnel0 );
            return ( vec3<f32>( 1.0 ) + sqrtF0 ) / ( vec3<f32>( 1.0 ) - sqrtF0 );
        }
        fn IorToFresnel0(transmittedIor:vec3<f32>,incidentIor:f32 )->vec3<f32> {
            return pow2Vector( ( transmittedIor - vec3<f32>( incidentIor ) ) / ( transmittedIor + vec3<f32>( incidentIor ) ) );
        }
        fn IorToFresnel0(transmittedIor:f32, incidentIor:f32 )->f32 {
            return pow2Vector( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
        }
        fn evalSensitivity(OPD:f32,shift:vec3<f32> )->vec3<f32> {
            let phase:f32 = 2.0 * PI * OPD * 1.0e-9;
            let val:vec3<f32> = vec3<f32>( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
            let pos:vec3<f32> = vec3<f32>( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
            let vart:vec3<f32> = vec3<f32>( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
            let xyz:vec3<f32> = val * sqrt( 2.0 * PI * vart ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * vart );
            xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
            xyz /= 1.0685e-7;
            let rgb:vec3<f32> = XYZ_TO_REC709 * xyz;
            return rgb;
        }
        fn evalIridescence(outsideIOR:f32, eta2:f32,cosTheta1:f32,thinFilmThickness:f32,baseF0:vec3<f32> )->vec3<f32> {
            var I:vec3<f32>;
            let iridescenceIOR:f32 = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
            let sinTheta2Sq:f32 = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
            let cosTheta2Sq:f32 = 1.0 - sinTheta2Sq;
            if ( cosTheta2Sq < 0.0 ) {
                return vec3<f32>( 1.0 );
            }
            let cosTheta2:f32 = sqrt( cosTheta2Sq );
            let R0:f32 = IorToFresnel0( iridescenceIOR, outsideIOR );
            let R12:f32 = F_Schlick( R0, 1.0, cosTheta1 );
            let R21:f32 = R12;
            let T121:f32 = 1.0 - R12;
            let phi12:f32 = 0.0;
            if ( iridescenceIOR < outsideIOR ) phi12 = PI;
            let phi21:f32 = PI - phi12;
            let baseIOR:vec3<f32> = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );
            let R1:vec3<f32> = IorToFresnel0( baseIOR, iridescenceIOR );
            let R23:vec3<f32> = F_Schlick( R1, 1.0, cosTheta2 );
            let phi23:vec3<f32> = vec3<f32>( 0.0 );
            if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
            if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
            if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
            let OPD:f32 = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
            let phi:vec3<f32> = vec3<f32>( phi21 ) + phi23;
            let R123:vec3<f32> = clamp( R12 * R23, 1e-5, 0.9999 );
            let r123:vec3<f32> = sqrt( R123 );
            let Rs:vec3<f32> = pow2( T121 ) * R23 / ( vec3<f32>( 1.0 ) - R123 );
            let C0:vec3<f32> = R12 + Rs;
            I = C0;
            let Cm:vec3<f32> = Rs - T121;
            for ( let m : u32 = 1;m <= 2; ++ m ) {
                Cm *= r123;
                Sm:vec3<f32> = 2.0 * evalSensitivity( f32( m ) * OPD, f32( m ) * phi );
                I += Cm * Sm;
            }
            return max( I, vec3<f32>( 0.0 ) );
        }
    #endif
    const clearcoatSpecular:vec3<f32> = vec3<f32>( 0.0 );
    const sheenSpecular:vec3<f32> = vec3<f32>( 0.0 );

    fn IBLSheenBRDF( normal:vec3<f32>, viewDir:vec3<f32>, roughness:f32 )->f32 {
        let dotNV:f32 = saturate( dot( normal, viewDir ) );
        let r2:f32 = roughness * roughness;
        let a:f32 =select(-8.48 * r2 + 14.3 * roughness - 9.95,-339.2 * r2 + 161.4 * roughness - 25.9,roughness < 0.25);
        //let a:f32 = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
        let b:f32=select(1.97 * r2 - 3.27 * roughness + 0.72,44.0 * r2 - 23.7 * roughness + 3.26, roughness < 0.25);
        //let b:f32 = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
        //let DG:f32 = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
        let DG:f32 = exp( a * dotNV + b ) + select(0.1 * ( roughness - 0.25 ),0.0,roughness < 0.25);
        return saturate( DG * RECIPROCAL_PI );
    }
    fn DFGApprox( specularColor:vec3<f32>, roughness:f32,dotNV:f32 )->vec3<f32> {
        const c0:vec4<f32> = vec4<f32>( - 1, - 0.0275, - 0.572, 0.022 );
        let c1:vec4<f32> = vec4<f32>( 1, 0.0425, 1.04, - 0.04 );
        let r:vec4<f32> = roughness * c0 + c1;
        let a004:f32 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
        let fab:vec2<f32> = vec2<f32>( - 1.04, 1.04 ) * a004 + r.zw;
        return specularColor * fab.x + fab.y;
    }
    fn EnvironmentBRDF( normal:vec3<f32>,viewDir:vec3<f32>,specularColor:vec3<f32>, specularF90:f32,roughness:f32 )->vec3<f32> {
        let fab:vec2<f32> = DFGApprox( normal, viewDir, roughness );
        return specularColor * fab.x + specularF90 * fab.y;
    }


    fn computeSpecularOcclusion( dotNV:f32, ambientOcclusion:f32, roughness:f32 )->f32 {
        return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
    }
    #if ${defines.USE_TRANSMISSION}

    fn getVolumeTransmissionRay( n:vec3<f32>, v:vec3<f32>, thickness:f32, ior:f32, modelMatrix:mat4x4:f32)->vec3<f32> {
        var refractionVector:vec3<f32> = refract( - v, normalize( n ), 1.0 / ior );
        var modelScale:vec3<f32>;
        modelScale.x = length( vec3<f32>( modelMatrix[0].xyz ) );
        modelScale.y = length( vec3<f32>( modelMatrix[1].xyz ) );
        modelScale.z = length( vec3<f32>( modelMatrix[2].xyz ) );
        return normalize( refractionVector ) * thickness * modelScale;
    }
    fn applyIorToRoughness(roughness:f32, ior:f32 )->f32 {
        return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
    }
    fn getTransmissionSample( fragCoord:vec2<f32>, roughness:f32,ior:f32 )->vec4<f32> {
        let framebufferLod:f32 = log2( materialUniform.transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
        return textureSampleLevel(transmissionSamplerTexture,baseSampler,fragCoord.xy, framebufferLod);

    }
    fn applyVolumeAttenuation( radiance:vec3<vec3>, transmissionDistance:f32,attenuationColor:vec3<f32>,attenuationDistance:f32 )->vec3<f32> {
        if ( isinf( attenuationDistance ) ) {
            return radiance;
        }
        else {
            let attenuationCoefficient:vec3<f32> = -log( attenuationColor ) / attenuationDistance;
            let transmittance:vec3<f32> = exp( - attenuationCoefficient * transmissionDistance );
            return transmittance * radiance;
        }
    
    }
    fn getIBLVolumeRefraction( n:vec3<f32>,v:vec3<f32>, roughness:f32, diffuseColor:vec3<f32>,specularColor:vec3<f32>, specularF90:f32,position:vec3<f32>, modelMatrix:mat4x4<f32>, viewMatrix:mat4x4<f32>,projMatrix:mat4x4<f32>,ior:f32, thickness:f32,attenuationColor:vec3<f32>,attenuationDistance:f32 )->vec4<f32> {
        let transmissionRay:vec3<f32> = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
        let refractedRayExit:vec3<f32> = position + transmissionRay;
        let ndcPos:vec4<f32> = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
        let refractionCoords:vec2<f32> = ndcPos.xy / ndcPos.w;
        refractionCoords += 1.0;
        refractionCoords /= 2.0;
        let transmittedLight:vec4<f32> = getTransmissionSample( refractionCoords, roughness, ior );
        let attenuatedColor:vec3<f32> = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
        let F:vec3<f32> = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
        return vec4<f32>( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
    }
    #endif

    #if ${defines.USE_BUMPTEXTURE}
        fn dHdxy_fwd()->vec2<f32> {
            let dSTdx:vec2<f32> = dpdx( vUv );
            let dSTdy:vec2<f32> = dpdy( vUv );

            let Hll:f32 = materialUniform.bumpScale * textureSample(bumpTexture, baseSampler, vUv).x;
            let dBx:f32 = materialUniform.bumpScale * textureSample(bumpTexture, baseSampler, vUv + dSTdx).x - Hll;
            let dBy:f32 = materialUniform.bumpScale * textureSample(bumpTexture, baseSampler, vUv + dSTdy).x - Hll;
            return vec2<f32>( dBx, dBy );
        }
        fn perturbNormalArb( surf_pos:vec3<f32>, surf_norm:vec3<f32>, dHdxy:vec2<f32>, faceDirection:f32 )->vec3<f32> {
            let vSigmaX:vec3<f32> = dpdx( surf_pos.xyz );
            let vSigmaY:vec3<f32> = dpdy( surf_pos.xyz );
            let vN:vec3<f32> = surf_norm;
            let R1:vec3<f32> = cross( vSigmaY, vN );
            let R2:vec3<f32> = cross( vN, vSigmaX );
            let fDet:f32 = dot( vSigmaX, R1 ) * faceDirection;
            let vGrad:vec3<f32> = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
            return normalize( abs( fDet ) * surf_norm - vGrad );
        }
    #endif

    //! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALTEXTURE ) || defined ( USE_CLEARCOAT_NORMALTEXTURE ) )
    #if ${(!defines.USE_TANGENT && defines.TANGENTSPACE_NORMALTEXTURE) || defines.USE_CLEARCOAT_NORMALTEXTURE}
    fn perturbNormal2Arb( eye_pos:vec3<f32>, surf_norm:vec3<f32>, textureN:vec3<f32>, faceDirection:f32 )->vec3<f32> {
        let q0:vec3<f32> = dpdx( eye_pos.xyz );
        let q1:vec3<f32> = dpdy( eye_pos.xyz );
        let st0:vec2<f32> = dpdx( vUv.st );
        let st1:vec2<f32> = dpdy( vUv.st );
        let N:vec3<f32> = surf_norm;
        let q1perp:vec3<f32> = cross( q1, N );
        let q0perp:vec3<f32> = cross( N, q0 );
        let T:vec3<f32> = q1perp * st0.x + q0perp * st1.x;
        let B:vec3<f32> = q1perp * st0.y + q0perp * st1.y;
        let det:f32 = max( dot( T, T ), dot( B, B ) );
        let scale:f32 = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
        return normalize( T * ( textureN.x * scale ) + B * ( textureN.y * scale ) + N * textureN.z );
    }
    #endif
    struct MultiAndSingleScatter{
        multiScatter:vec3<f32>,
        singleScatter:vec3<f32>
    }
   #if ${defines.USE_IRIDESCENCE}
   ////////inout vec3 singleScatter, inout vec3 multiScatter
       fn computeMultiscatteringIridescence( normal:vec3<f32>, viewDir:vec3<f32>, specularColor:vec3<f32>, specularF90:f32, iridescence:f32,iridescenceF0:vec3<f32>, roughness:f32 )->MultiAndSingleScatter {
   #else
   ////////inout vec3 singleScatter, inout vec3 multiScatter
       fn computeMultiscattering( normal:vec3<f32>,viewDir:vec3<f32>, specularColor:vec3<f32>, specularF90:f32, roughness:f32)->MultiAndSingleScatter {
   #endif
   let fab:vec2<f32> = DFGApprox( normal, viewDir, roughness );

   var multiAndSingleScatter:MultiAndSingleScatter;

   #if ${defines.USE_IRIDESCENCE}
       let Fr:vec3<f32> = mix( specularColor, iridescenceF0, iridescence );
   #else
       let Fr:vec3<f32> = specularColor;
   #endif
       let FssEss:vec3<f32> = Fr * fab.x + specularF90 * fab.y;
       let Ess:f32 = fab.x + fab.y;
       let Ems:f32 = 1.0 - Ess;
       let Favg:vec3<f32> = Fr + ( 1.0 - Fr ) * 0.047619;
       let Fms:vec3<f32> = FssEss * Favg / ( 1.0 - Ems * Favg );
    //    singleScatter += FssEss;
    //    multiScatter += Fms * Ems;
       multiAndSingleScatter.multiScatter=Fms * Ems;
       multiAndSingleScatter.singleScatter=FssEss;
       return multiAndSingleScatter;
   }
   //直接光照
   fn RE_Direct_Physical( directLight:IncidentLight, geometry:GeometricContext,  material:PhysicalMaterial)->ReflectedLight {
       var reflectedLight:ReflectedLight;
       let dotNL:f32 = saturate(dot( geometry.normal, directLight.direction));
       let irradiance:vec3<f32> = dotNL * directLight.color;
       #if ${defines.USE_CLEARCOAT}
           let dotNLcc:f32 = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
           let ccIrradiance:vec3<f32> = dotNLcc * directLight.color;
           clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
       #endif

       #if ${defines.USE_SHEEN}
           sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
       #endif

       #if ${defines.USE_IRIDESCENCE}
           reflectedLight.directSpecular = irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );
       #else
           reflectedLight.directSpecular = irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
       #endif
       reflectedLight.directDiffuse = irradiance * BRDF_Lambert( material.diffuseColor );
       return reflectedLight;
   }
   //间接光照
   fn RE_IndirectDiffuse_Physical( irradiance:vec3<f32>, geometry:GeometricContext, material:PhysicalMaterial )->ReflectedLight {
       var reflectedLight:ReflectedLight;
       reflectedLight.indirectDiffuse = irradiance * BRDF_Lambert( material.diffuseColor );
       return reflectedLight;
   }
   //间接高光
   fn RE_IndirectSpecular_Physical( radiance:vec3<f32>, irradiance:vec3<f32>, clearcoatRadiance:vec3<f32>, geometry:GeometricContext, material:PhysicalMaterial)->ReflectedLight {
       var reflectedLight:ReflectedLight;
       #if ${defines.USE_CLEARCOAT}
           clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
       #endif
       #if ${defines.USE_SHEEN}
           sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
       #endif
       var singleScattering:vec3<f32>;
       var multiScattering:vec3<f32>;
       let cosineWeightedIrradiance:vec3<f32> = irradiance * RECIPROCAL_PI;
       var tempMultiAndSingleScatter:MultiAndSingleScatter;
       #if ${defines.USE_IRIDESCENCE}
             tempMultiAndSingleScatter=computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );
       #else
            tempMultiAndSingleScatter= computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness );
       #endif
       singleScattering=tempMultiAndSingleScatter.singleScatter; 
       multiScattering=tempMultiAndSingleScatter.multiScatter;
       let totalScattering:vec3<f32> = singleScattering + multiScattering;
       let diffuse:vec3<f32> = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
       reflectedLight.indirectSpecular = radiance * singleScattering;
       reflectedLight.indirectSpecular = multiScattering * cosineWeightedIrradiance;
       reflectedLight.indirectDiffuse = diffuse * cosineWeightedIrradiance;
       return reflectedLight;
   }
   `;
}

function pbrStruct(defines) {
	return wgslParseDefines`
        struct MaterialUniform{

            modelMatrix: mat4x4<f32>,
    
            diffuse:vec3<f32>,
    
            opacity:f32,
    
            normalMatrix: mat3x3<f32>,
    
            emissive:vec3<f32>,
    
            roughness:f32,
    
            metalness:f32,
    
            #if ${defines.TONE_MAPPING}
                toneMappingExposure:f32,
            #endif
           
            #if ${defines.SPECULAR}
    
                 specularColor:vec3<f32>,
    
                 specularIntensity:f32,
            #endif
            
            #if ${defines.USE_SHEEN}
    
                sheenColor:vec3<f32>,
    
                sheenRoughness:f32,
            #endif

            #if ${defines.USE_TRANSMISSION}
    
                attenuationColor:vec3<f32>,
    
                transmission:f32,
    
                transmissionSamplerSize:vec2<f32>,
    
                thickness:f32,
    
                attenuationDistance:f32,
                
            #endif

            #if ${defines.USE_SKINNING}
    
                bindMatrix:mat4x4<f32>,
    
                bindMatrixInverse:mat4x4<f32>,
    
                boneTextureSize:u32,
            #endif

            #if ${defines.USE_NORMALTEXTURE}
                 normalScale:vec2<f32>,
            #endif
    
            #if ${defines.IOR}
                ior:f32,
            #endif
    
            #if ${defines.USE_CLEARCOAT}
    
                #if ${defines.USE_CLEARCOAT_NORMALTEXTURE}
                    clearcoatNormalScale:vec2<f32>,
                #endif
    
                 clearcoat:f32,
    
                 clearcoatRoughness:f32,
            #endif
    
            #if ${defines.USE_IRIDESCENCE}
                iridescence:f32,
    
                iridescenceIOR:f32,
    
                iridescenceThicknessMinimum:f32,
    
                iridescenceThicknessMaximum:f32,
    
            #endif

            #if ${defines.USE_AOTEXTURE}
                 aoTextureIntensity:f32,
            #endif

            #if ${defines.USE_LIGHTTEXTURE}
                 lightTextureIntensity:f32,
            #endif
    
            #if ${defines.USE_ENVTEXTURE}
                envTextureIntensity:f32,
    
                flipEnvTexture:f32,
            #endif

            #if ${defines.USE_BUMPTEXTURE}
                bumpScale:f32;
            #endif

            #if ${defines.USE_DISPLACEMENTTEXTURE}
    
                displacementScale:f32,
    
                displacementBias:f32,
            #endif
            
            #if ${defines.USE_MORPHTARGETS}
    
                morphTargetBaseInfluence:f32,
    
                #if ${defines.MORPHTARGETS_TEXTURE} 
    
                    morphTargetsTextureSize:vec2<u32>,
    
                    MORPHTARGETS_COUNT:u32,
    
                #endif
    
                morphTargetInfluences:array<f32>,
                    
            #endif
        }

   `;
}

function pbrTexture(defines) {
	return wgslParseDefines`        
            #if ${defines.USE_BUMPTEXTURE}
                @group(0) @binding(${defines.bumpTextureBinding}) var bumpTexture: texture_2d<f32>;
            #endif
            #if ${defines.USE_TRANSMISSION}
                #if ${defines.USE_TRANSMISSIONTEXTURE}
                    @group(0) @binding(${defines.transmissionTextureBinding}) var transmissionTexture: texture_2d<f32>;
                #endif
                #if ${defines.USE_THICKNESSTEXTURE}
                    @group(0) @binding(${defines.thicknessTextureBinding}) var thicknessTexture: texture_2d<f32>;
                #endif
                @group(0) @binding(${defines.transmissionSamplerTextureBinding}) var transmissionSamplerTexture: texture_2d<f32>;
            #endif
            #if ${defines.USE_ENVTEXTURE}
                @group(0) @binding(${defines.envTextureBinding}) var envTexture: texture_cube<f32>;
            #endif
            #if ${defines.USE_NORMALTEXTURE}
                @group(0) @binding(${defines.normalTextureBinding}) var normalTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_CLEARCOATTEXTURE}
                @group(0) @binding(${defines.clearcoatTextureBinding}) var clearcoatTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_CLEARCOAT_ROUGHNESSTEXTURE}
                @group(0) @binding(${defines.clearcoatRclearcoatRoughnessTextureBinding}) var clearcoatRoughnessTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_CLEARCOAT_NORMALTEXTURE}
                @group(0) @binding(${defines.clearcoatNormalTextureBinding}) var clearcoatNormalTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_IRIDESCENCETEXTURE}
                @group(0) @binding(${defines.iridescenceTextureBinding}) var iridescenceTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_IRIDESCENCE_THICKNESSTEXTURE}
                @group(0) @binding(${defines.iridescenceThicknessTextureBinding}) var iridescenceThicknessTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_ROUGHNESSTEXTURE}
                @group(0) @binding(${defines.roughnessTextureBinding}) var roughnessTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_METALNESSTEXTURE}
                @group(0) @binding(${defines.metalnessTextureBinding}) var metalnessTexture: texture_2d<f32>;
            #endif

            #if ${defines.SPECULAR}
                #if ${defines.USE_SPECULARINTENSITYTEXTURE}
                    @group(0) @binding(${defines.specularIntensityTextureBinding}) var specularIntensityTexture: texture_2d<f32>;
                #endif

                #if ${defines.USE_SPECULARCOLORTEXTURE}
                    @group(0) @binding(${defines.specularColorTextureBinding}) var specularColorTexture: texture_2d<f32>;
                #endif
            #endif

            #if ${defines.USE_SHEEN}
                #if ${defines.USE_SHEENCOLORTEXTURE}
                    @group(0) @binding(${defines.sheenColorTextureBinding}) var sheenColorTexture: texture_2d<f32>;
                #endif
                #if ${defines.USE_SHEENROUGHNESSTEXTURE}
                    @group(0) @binding(${defines.sheenRoughnessTextureBinding}) var sheenRoughnessTexture: texture_2d<f32>;
                #endif
            #endif

            #if ${defines.USE_TEXTURE}
                @group(0) @binding(${defines.baseSamplerBinding}) var baseSampler: sampler;
                @group(0) @binding(${defines.baseTextureBinding}) var baseTexture: texture_2d<f32>;
            #endif

            #if ${defines.USE_ALPHATEXTURE}
                @group(0) @binding(${defines.alphaTextureBinding}) var alphaTexture: texture_2d<f32>;
            #endif

            #if ${defines.USE_AOTEXTURE}
                @group(0) @binding(${defines.aoTextureBinding}) var aoTexture: texture_2d<f32>;
                
            #endif
            #if ${defines.USE_LIGHTTEXTURE}
                @group(0) @binding(${defines.lightTextureBinding}) var lightTexture: texture_2d<f32>;
            #endif

            #if ${defines.USE_EMISSIVETEXTURE}
                @group(0) @binding(${defines.emissiveTextureBinding}) var emissiveTexture: texture_2d<f32>;
            #endif
     `;
}

function pbrUtils(defines) {
	return wgslParseDefines`
    const PI:f32= 3.141592653589793;
    const PI2:f32= 6.283185307179586;
    const PI_HALF:f32= 1.5707963267948966;
    const RECIPROCAL_PI:f32= 0.3183098861837907;
    const RECIPROCAL_PI2:f32= 0.15915494309189535;
    const EPSILON:f32= 1e-6;

    fn pow2(x:f32 )->f32 {
        return x*x;
    }
    fn pow2Vector(x:vec3<f32> )->vec3<f32> {
        return x*x;
    }
    fn pow3( x:f32 )->f32 {
        return x*x*x;
    }
    fn pow4( x:f32 )->f32 {
        let x2:f32 = x*x;
        return x2*x2;
    }
    fn max3( v:vec3<f32> )->f32 {
        return max( max( v.x, v.y ), v.z );
    }
    fn average(v:vec3<f32> )->f32 {
        return dot( v, vec3<f32>( 0.3333333 ) );
    }
    fn rand( uv:vec2<f32> )->f32 {
        let a:f32 = 12.9898;
        let b:f32 = 78.233;
        let c:f32 = 43758.5453;
        let dt:f32 = dot( uv.xy, vec2<f32>( a, b ) );
        let sn:f32 = dt % PI;
        return fract( sin( sn ) * c );
    }
    fn transformDirection( dir:vec3<f32>, matrix:mat4x4<f32> )->vec3<f32> {
        return normalize( ( matrix * vec4<f32>( dir, 0.0 ) ).xyz );
    }

    fn transposeMat3( m:mat3x3<f32> )->mat3x3<f32> {
        var tmp:mat3x3<f32>;
        tmp[ 0 ] = vec3<f32>( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
        tmp[ 1 ] = vec3<f32>( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
        tmp[ 2 ] = vec3<f32>( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
        return tmp;
    }
    fn luminance( rgb:vec3<f32> )->f32 {
        let weights:vec3<f32> = vec3<f32>(0.2126729, 0.7151522, 0.0721750 );
        return dot( weights, rgb );
    }
    fn LinearToneMapping( color:vec3<f32>,toneMappingExposure:f32  )->vec3<f32> {
        return toneMappingExposure * color;
    }

    fn ReinhardToneMapping( color:vec3<f32>,toneMappingExposure:f32 )->vec3<f32> {
        var tempColor:vec3<f32>;
        tempColor=color;
        tempColor *= toneMappingExposure;
        return saturate( tempColor / ( vec3<f32>( 1.0 ) + tempColor ) );
    }
    fn CustomToneMapping( color:vec3<f32> )->vec3<f32> {
        return color;
    }
    fn toneMapping( color:vec3<f32>,toneMappingExposure:f32  )->vec3<f32> {
        return ReinhardToneMapping( color,toneMappingExposure );
    }

    fn LinearToLinear( value:vec4<f32> )->vec4<f32> {
        return value;
    }
    fn lessThanEqual(a:vec3<f32>,b:vec3<f32>)->vec3<f32>{
       let xValue:f32=select(b.x,a.x,a.x<=b.x);
       let yValue:f32=select(b.y,a.y,a.y<=b.y);
       let zValue:f32=select(b.z,a.z,a.z<=b.z);
       return vec3<f32>(xValue,yValue,zValue);    
    }
    fn LinearTosRGB( value:vec4<f32> )->vec4<f32> {
        return vec4<f32>( mix( pow( value.rgb, vec3<f32>( 0.41666 ) ) * 1.055 - vec3<f32>( 0.055 ), value.rgb * 12.92, vec3<f32>( lessThanEqual( value.rgb, vec3<f32>( 0.0031308 ) ) ) ), value.a );
    }
    fn linearToOutputTexel(value:vec4<f32> )->vec4<f32> {
        return LinearTosRGB( value );
    }
    `;
}

function phongFunction(defines) {
	return `
    fn G_BlinnPhong_Implicit( )->f32 {

        // geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)
        return 0.25;

    }
    fn D_BlinnPhong( shininess:f32, dotNH:f32 )->f32 {

        return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow(dotNH, shininess);

    }
    fn BRDF_BlinnPhong( lightDir:vec3<f32>, viewDir:vec3<f32>, normal:vec3<f32>, specularColor:vec3<f32>, shininess:f32 )->vec3<f32> {

        let  halfDir = normalize( lightDir + viewDir );

        let  dotNH:f32 = saturate( dot( normal, halfDir ) );
        let dotVH:f32 = saturate( dot( viewDir, halfDir ) );

        let F = F_Schlick( specularColor, 1.0, dotVH );

        let G:f32 = G_BlinnPhong_Implicit( );

        let D = D_BlinnPhong( shininess, dotNH );

        return F * ( G * D );

    } 
    fn RE_Direct_BlinnPhong(  directLight:IncidentLight,geometry:GeometricContext, material:BlinnPhongMaterial )->ReflectedLight{
        var reflectedLight:ReflectedLight; 
        let dotNL:f32 = saturate(dot(geometry.normal, directLight.direction));
        let irradiance:vec3<f32> = dotNL*directLight.color;

        reflectedLight.directDiffuse= irradiance * BRDF_Lambert( material.diffuseColor );

        reflectedLight.directSpecular= irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
        return reflectedLight;
    }
    fn RE_IndirectDiffuse_BlinnPhong( irradiance:vec3<f32>, geometry:GeometricContext, material:BlinnPhongMaterial)->ReflectedLight {
        var reflectedLight:ReflectedLight; 
        reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
        return reflectedLight;
    }
    `;
}

function phongUtils(defines) {
	return `
   struct BlinnPhongMaterial {
        diffuseColor:vec3<f32>,
        specularColor:vec3<f32>,
        specularShininess:f32,
        specularStrength:f32,
    };
    const RECIPROCAL_PI:f32= 0.3183098861837907;
   fn pow2( x:f32 )->f32 { return x*x; }
   fn pow3( x:f32 )->f32 { return x*x*x; }
   fn pow4(x:f32 )->f32 { let x2 = x*x; return x2*x2; }
   fn max3( v:vec3<f32> )->f32 { return max( max( v.x, v.y ), v.z ); }
   fn average(v:vec3<f32> )->f32 { 
       let result=vec3<f32>( 0.3333333,  0.3333333, 0.3333333);
       return dot( v,result ); 
   }
   `;
}

function environment(defines) {
	return wgslParseDefines`
   #if ${defines.ENVTEXTURE_TYPE_CUBE_UV}
        const cubeUV_minMipLevel:f32= 4.0;
        const cubeUV_minTileSize:f32= 16.0;
        const CUBEUV_MAX_MIP:f32=6.0;
        const CUBEUV_TEXEL_WIDTH:f32=1.0/256.0;
        const CUBEUV_TEXEL_HEIGHT:f32=1.0/256.0;
        fn getFace(direction:vec3<f32> )->f32 {
            let absDirection:vec3<f32> = abs( direction );
            var face:f32 = - 1.0;
            if ( absDirection.x > absDirection.z ) {
                if ( absDirection.x > absDirection.y ){
                    face =select(3.0,0.0,direction.x > 0.0);
                }else{
                    face =select(4.0,1.0,direction.y > 0.0);
                }
                
            }
            else {
                if ( absDirection.z > absDirection.y ){
                    face =select(5.0,2.0,direction.z > 0.0);
                }else{
                    face =select(4.0,1.0,direction.y > 0.0);
                }       
            }
            return face;
        }
        fn getUV( direction:vec3<f32>, face:f32 )->vec2<f32> {
            var uv:vec2<f32>;
            if ( face == 0.0 ) {
                uv = vec2<f32>( direction.z, direction.y ) / abs( direction.x );
            }
            else if ( face == 1.0 ) {
                uv = vec2<f32>( - direction.x, - direction.z ) / abs( direction.y );
            }
            else if ( face == 2.0 ) {
                uv = vec2<f32>( - direction.x, direction.y ) / abs( direction.z );
            }
            else if ( face == 3.0 ) {
                uv = vec2<f32>( - direction.z, direction.y ) / abs( direction.x );
            }
            else if ( face == 4.0 ) {
                uv = vec2<f32>( - direction.x, direction.z ) / abs( direction.y );
            }
            else {
                uv = vec2<f32>( direction.x, direction.y ) / abs( direction.z );
            }
            return 0.5 * ( uv + 1.0 );
        }
        fn bilinearCubeUV(envTexture:texture_cube<f32>,baseSampler:sampler,direction:vec3<f32>, mipInt:f32 )->vec3<f32> {
            var face:f32 = getFace( direction );
            let filterInt:f32 = max( cubeUV_minMipLevel - mipInt, 0.0 );
            let tempMipInt = max( mipInt, cubeUV_minMipLevel );
            let faceSize:f32 = exp2( tempMipInt );
            var uv:vec2<f32> = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
            if ( face > 2.0 ) {
                uv.y += faceSize;
                face -= 3.0;
            }
            uv.x += face * faceSize;
            uv.x += filterInt * 3.0 * cubeUV_minTileSize;
            uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
            uv.x *= CUBEUV_TEXEL_WIDTH;
            uv.y *= CUBEUV_TEXEL_HEIGHT;
            return textureSample(envTexture,baseSampler,direction).rgb;
        }
        const cubeUV_r0:f32= 1.0;
        const cubeUV_v0:f32= 0.339;
        const cubeUV_m0:f32= - 2.0;
        const cubeUV_r1:f32= 0.8;
        const cubeUV_v1:f32= 0.276;
        const cubeUV_m1:f32= - 1.0;
        const cubeUV_r4:f32= 0.4;
        const cubeUV_v4:f32= 0.046;
        const cubeUV_m4:f32= 2.0;
        const cubeUV_r5:f32= 0.305;
        const cubeUV_v5:f32= 0.016;
        const cubeUV_m5:f32= 3.0;
        const cubeUV_r6:f32= 0.21;
        const cubeUV_v6:f32= 0.0038;
        const cubeUV_m6:f32= 4.0;
        fn roughnessToMip( roughness:f32)->f32 {
            var mip:f32 = 0.0;
            if ( roughness >= cubeUV_r1 ) {
                mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
            }
            else if ( roughness >= cubeUV_r4 ) {
                mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
            }
            else if ( roughness >= cubeUV_r5 ) {
                mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
            }
            else if ( roughness >= cubeUV_r6 ) {
                mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
            }
            else {
                mip = - 2.0 * log2( 1.16 * roughness );
            }
            return mip;
        }
        fn textureCubeUV(envTexture:texture_cube<f32>, baseSampler:sampler,sampleDir:vec3<f32>,roughness:f32 )->vec4<f32> {
            let mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
            let mipF = fract( mip );
            let mipInt = floor( mip );
            let color0:vec3<f32> = bilinearCubeUV( envTexture,baseSampler,sampleDir, mipInt );
            if ( mipF == 0.0 ) {
                return vec4<f32>(color0, 1.0 );
            }
            else {
                let color1:vec3<f32> = bilinearCubeUV( envTexture,baseSampler, sampleDir, mipInt + 1.0 );
                return vec4<f32>(mix( color0, color1, mipF ), 1.0 );
            }
        
        }
   #endif
   #if ${defines.USE_ENVTEXTURE}
        fn getIBLIrradiance( normal:vec3<f32>,baseSampler:sampler,viewMatrix:mat4x4<f32>)->vec3<f32> {
            #if ${defines.ENVTEXTURE_TYPE_CUBE_UV}
                let worldNormal:vec3<f32> = inverseTransformDirection( normal, viewMatrix );
                let envTextureColor:vec4<f32> = textureCubeUV( envTexture,baseSampler, worldNormal, 1.0 );
                return PI * envTextureColor.rgb * materialUniform.envTextureIntensity;
            #else
                return vec3<f32>( 0.0 );
            #endif
        }
        fn getIBLRadiance( viewDir:vec3<f32>,baseSampler:sampler,viewMatrix:mat4x4<f32>,normal:vec3<f32>, roughness:f32 )->vec3<f32> {
            #if ${defines.ENVTEXTURE_TYPE_CUBE_UV}
                var reflectVec:vec3<f32> = reflect( - viewDir, normal );
                reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
                reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
                let envTextureColor:vec4<f32> = textureCubeUV( envTexture,baseSampler, reflectVec, roughness );
                return envTextureColor.rgb * materialUniform.envTextureIntensity;
            #else
                return vec3<f32>( 0.0 );
            #endif
            }
    #endif
   `;
}

function blinn_phong(defines) {
	return `
       fn getPointLightInfo(pointLight:PointLight,worldPos:vec3<f32>,shininess:f32,N:vec3<f32>,V:vec3<f32>)->vec3<f32>{
        var color=vec3<f32>(0.0,0.0,0.0);
        var direction:vec3<f32> = worldPos - pointLight.position;
        let dist:f32 = length( direction );
        direction = normalize(direction);
        let decay = clamp(1.0 - pow(dist / pointLight.distance, 4.0), 0.0, 1.0);

        let d =  max( dot( N, -direction ), 0.0 ) * decay;
        color += pointLight.color * d;

        let halfDir:vec3<f32> = normalize( V - direction );
        let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess )  * decay;
        color += pointLight.color * s;
        return color;
       }
       fn getSpotLightInfo(spotLight:SpotLight,worldPos:vec3<f32>,shininess:f32,N:vec3<f32>,V:vec3<f32>)->vec3<f32>{
        var color=vec3<f32>(0.0,0.0,0.0);
            var direction:vec3<f32> = spotLight.position - worldPos;
            let lightDistance:f32 = length(direction);
            direction = normalize(direction);
            let angleCos:f32 = dot( direction, -spotLight.direction );
            let decay:f32 = clamp(1.0 - pow(lightDistance/spotLight.distance, 4.0), 0.0, 1.0);
            let spotEffect:f32 = smoothstep( spotLight.penumbraCos, spotLight.coneCos, angleCos );
            let decayTotal:f32 = decay * spotEffect;
            let d:f32 = max( dot( N, direction ), 0.0 )  * decayTotal;
            color += spotLight.color * d;
            let halfDir:vec3<f32> = normalize( V + direction );
            let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess ) * decayTotal;
            color += spotLight.color * s;
            return color;
       }
    struct DirectionalLight {
        direction: vec3<f32>,
        color: vec3<f32>,
    };
      fn getDirectLightInfo(directionalLight:DirectionalLight,shininess:f32,N:vec3<f32>,V:vec3<f32>)->vec3<f32>{
        var color=vec3<f32>(0.0,0.0,0.0);
        let d:f32 = max(dot(N, -directionalLight.direction), 0.0);
        color += directionalLight.color * d;

        let halfDir:vec3<f32> = normalize( V - directionalLight.direction );
        let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess );
        color += directionalLight.color * s;
        return color;
       }
    `;
}

function ibl(defines) {
	return wgslParseDefines`
  fn getLightProbeRadiance( viewDir:vec3<f32>,normal:vec3<f32>, roughness:f32 )->vec3<f32>{
    var reflectVec:vec3<f32> = reflect( -viewDir, normal );
    reflectVec.x = -reflectVec.x; // TextureCube is left-hand,so x need inverse
    let mipCount:f32 = 10.0; // resolution of 256x256
    let lod:f32 = roughness * mipCount;
    let specularLight:vec3<f32> = textureSampleLevel(specularEnvTexture,specularEnvSampler, reflectVec, lod).rgb;
    return specularLight;
  }
  fn getLightProbeIrradiance( lightProbe:array<vec3<f32>,9>, normal:vec3<f32>)->vec3<f32> {
    var worldNormal:vec3<f32> = normal;
    worldNormal.x = -normal.x;
    var irradiance:vec3<f32> = lightProbe[0];
    irradiance+=lightProbe[1] * (normal.y);
    irradiance+=lightProbe[2] * (normal.z) ;
    irradiance+=lightProbe[3] * (normal.x) ;

    irradiance+=lightProbe[4] * (normal.y * normal.x) ;
    irradiance+=lightProbe[5] * (normal.y * normal.z) ;
    irradiance+=lightProbe[6] * (3.0 * normal.z * normal.z - 1.0);
    irradiance+=lightProbe[7] * (normal.z * normal.x) ;
    irradiance+=lightProbe[8] * (normal.x * normal.x - normal.y * normal.y);

    return max(irradiance, vec3<f32>(0.0,0.0,0.0));
  }
  fn DFGApprox( specularColor:vec3<f32>, roughness:f32,dotNV:f32 )->vec3<f32> {
    const c0:vec4<f32> = vec4<f32>( - 1, - 0.0275, - 0.572, 0.022 );
    let c1:vec4<f32> = vec4<f32>( 1, 0.0425, 1.04, - 0.04 );
    let r:vec4<f32> = roughness * c0 + c1;
    let a004:f32 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
    let fab:vec2<f32> = vec2<f32>( - 1.04, 1.04 ) * a004 + r.zw;
    return specularColor * fab.x + fab.y;
  }
  //间接光照
  fn indirectDiffuse_Physical(geometry:Geometry, material:PhysicalMaterial )->ReflectedLight {
      var reflectedLight:ReflectedLight;
      var irradiance:vec3<f32> = lightUniforms.ambient.xyz*lightUniforms.ambient.w;
      irradiance *= PI;
      reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
      return reflectedLight;
  }
  //间接高光
  fn indirectSpecular_Physical(geometry:Geometry, material:PhysicalMaterial)->ReflectedLight {
      var reflectedLight:ReflectedLight;
      // IBL specular
      let radiance:vec3<f32> = getLightProbeRadiance(geometry.viewDir, geometry.normal, material.roughness);
      let radianceAttenuation:f32 = 1.0;
      reflectedLight.indirectSpecular += radianceAttenuation * radiance * DFGApprox(material.specularColor, material.roughness, geometry.dotNV );
      return reflectedLight;
    }
  `;
}

function getNormal(defines) {
	return wgslParseDefines`
      fn getNormal(input:VertInput)->vec3<f32>{
        var normal:vec3<f32>;
        #if ${defines.HAS_NORMAL}
            normal= input.normal;
        #else
          let pos_dx = dpdx(input.worldPos);
          let pos_dy = dpdy(input.worldPos);
          normal = normalize( cross(pos_dy, pos_dx) );
        #endif
        return normal*(f32(input.frontFacing) * 2.0 - 1.0);
      }
    `;
}
function getNormalByNormalTexture(defines) {
	return wgslParseDefines`
      fn getNormalByNormalTexture(input:VertInput)->vec3<f32>{
        var n:vec3<f32> = textureSample(normalTexture,normalSampler, input.uv).rgb;
        let tbn:mat3x3<f32> =getTBN(input);
        n = normalize(tbn * (2.0 * n - vec3(1.0)));
        n=n*(f32(input.frontFacing) * 2.0 - 1.0);
        return n;
      }
    `;
}
function getTBN(defines) {
	return wgslParseDefines`
        fn getTBN(input:VertInput)->mat3x3<f32>{
        #if ${defines.HAS_TANGENT}
            let tbn:mat3x3<f32> = input.tbn;
        #else
            let normal:vec3<f32> =normalize(input.normal);
            let uv:vec2<f32> = select(-input.uv,input.uv,input.frontFacing);
              // ref: http://www.thetenthplanet.de/archives/1180
              // get edge vectors of the pixel triangle
              let dp1:vec3<f32> =  vec3<f32>(dpdx(input.worldPos.x), dpdx(input.worldPos.y), dpdx(input.worldPos.z));
              let dp2:vec3<f32> =  vec3<f32>(dpdy(input.worldPos.x), dpdy(input.worldPos.y), dpdy(input.worldPos.z));
              let duv1:vec2<f32> = dpdx(uv);
              let duv2:vec2<f32> = dpdy(uv);

              // solve the linear system
              let dp2perp:vec3<f32> = cross(dp2, normal);
              let dp1perp:vec3<f32> = cross(normal, dp1);
              let tangent:vec3<f32> = dp2perp * duv1.x + dp1perp * duv2.x;
              let binormal:vec3<f32> = dp2perp * duv1.y + dp1perp * duv2.y;
              // construct a scale-invariant frame 
              let result:f32=max(dot(tangent, tangent), dot(binormal, binormal));
              let invmax:f32 = 1.0/sqrt(result);
              let tbn:mat3x3<f32> = mat3x3<f32>(tangent * invmax, binormal * invmax, normal);
        #endif
        return tbn;
      }
  `;
}

const ShaderChunk = {
	light: light,
	brdf: brdf,
	phongFunction: phongFunction,
	phongUtils: phongUtils,
	lightCommon: lightCommon,
	pbrStruct: pbrStruct,
	pbrFunction: pbrFunction,
	pbrTexture: pbrTexture,
	pbrUtils: pbrUtils,
	environment: environment,
	blinn_phong: blinn_phong,
	getNormal: getNormal,
	getTBN: getTBN,
	getNormalByNormalTexture: getNormalByNormalTexture,
	ibl: ibl
};

function phongVert(defines) {
	return `
      struct VertexOutput {
            @builtin(position) position: vec4<f32>,
            @location(0) uv: vec2<f32>,
            @location(1) view: vec3<f32>, // Vector from vertex to camera.
            @location(2) worldPos: vec3<f32>,
            @location(3) color: vec4<f32>,
            @location(4) normal: vec3<f32>,
            @location(5) viewPosition: vec3<f32>,
      };
      struct MaterialUniform {
            modelMatrix: mat4x4<f32>,
            color: vec3<f32>,
            opacity:f32,
            normalMatrix: mat4x4<f32>,
            emissive:vec3<f32>,
            specular:vec3<f32>,
            shininess:f32,
      }
      struct SystemUniform {
            projectionMatrix: mat4x4<f32>,
            viewMatrix: mat4x4<f32>,
            inverseViewMatrix: mat4x4<f32>,
            cameraPosition: vec3<f32>,
      }; 

      @binding(${defines.phongBinding}) @group(0) var<uniform> selfUniform : MaterialUniform;
      @binding(${defines.cameraBinding}) @group(1) var<uniform> systemUniform : SystemUniform;

      struct VertexInput {
            @location(${defines.positionLocation}) position: vec3<f32>,       
            @location(${defines.normalLocation}) normal: vec3<f32>,
            @location(${defines.uvLocation}) uv: vec2<f32>,
      }
      @vertex
      fn main(input: VertexInput) -> VertexOutput {
            var output: VertexOutput;
            output.uv = input.uv;
            let modelPos=selfUniform.modelMatrix *vec4<f32>(input.position,1.0);
            output.worldPos = modelPos.xyz/modelPos.w;
            let vNormalView = selfUniform.normalMatrix * vec4<f32>(input.normal,0.0);
            output.normal =  vNormalView.xyz;
            output.view = systemUniform.cameraPosition.xyz - modelPos.xyz;
            let viewPosition=systemUniform.viewMatrix * modelPos;
            output.viewPosition = -viewPosition.xyz;
            output.position = systemUniform.projectionMatrix * systemUniform.viewMatrix * modelPos;
            return output;
      }`;
}

function phongFrag(defines) {
	return wgslParseDefines`  
  struct VertInput {
      @builtin(position) position: vec4<f32>,
      @builtin(front_facing) frontFacing: bool,
      @location(0) uv: vec2<f32>,
      @location(1) view: vec3<f32>, // Vector from vertex to camera.
      @location(2) worldPos: vec3<f32>,
      @location(3) color: vec4<f32>,
      @location(4) normal: vec3<f32>,
      @location(5) viewPosition: vec3<f32>,
    };
    
    struct MaterialUniform {
      modelMatrix: mat4x4<f32>,
      color: vec3<f32>,
      opacity:f32,
      normalMatrix: mat4x4<f32>,
      emissive:vec3<f32>,
      shininess:f32,
      specular:vec3<f32>,      
   }
   struct SystemUniform {
      projectionMatrix: mat4x4<f32>,
      viewMatrix: mat4x4<f32>,
      inverseViewMatrix: mat4x4<f32>,
      cameraPosition: vec3<f32>,
  }; 

    #if${defines.USE_COLORTEXTURE}
      @group(0) @binding(${defines.baseColorSamplerBinding}) var baseColorSampler: sampler;
      @group(0) @binding(${defines.baseColorTextureBinding}) var baseColorTexture: texture_2d<f32>;
    #endif
    #if ${defines.USE_NORMALTEXTURE}
      @group(0) @binding(${defines.normalTextureBinding}) var normalTexture: texture_2d<f32>;
      @group(0) @binding(${defines.normalSamplerBinding}) var normalSampler: sampler;
    #endif
    @binding(${defines.phongBinding}) @group(0) var<uniform> materialUniform : MaterialUniform;
    @binding(${defines.cameraBinding}) @group(1) var<uniform> systemUniform : SystemUniform;
    #if ${defines.USE_NORMALTEXTURE}
      #include <getTBN>
      #include <getNormalByNormalTexture>
    #else
        #include <getNormal>
    #endif

    #include <light>

    @fragment
    fn main(input:VertInput) -> @location(0) vec4<f32> {
        var totalEmissiveRadiance:vec3<f32> = materialUniform.emissive;
        var color:vec4<f32>;
        #if${defines.USE_COLORTEXTURE}
            color= vec4<f32>(textureSample(baseColorTexture, baseColorSampler, input.uv).rgb+materialUniform.color,materialUniform.opacity);
        #else
            color=vec4<f32>(materialUniform.color,materialUniform.opacity);
        #endif     
        let  V:vec3<f32> =  normalize( systemUniform.cameraPosition - input.worldPos);
        #if ${defines.USE_NORMALTEXTURE}
            let N:vec3<f32> = getNormalByNormalTexture(input);  
        #else
            let N:vec3<f32> = getNormal(input);
        #endif
        var geometry:Geometry;
        geometry.normal=N;
        geometry.viewDir=V;
        geometry.position=input.worldPos;
        let lightColor:ReflectedLight=parseLights(geometry,materialUniform.shininess);
        // var finnalColor:vec3<f32>=color.xyz + (lightColor.directDiffuse + lightColor.directSpecular + lightColor.ambient);
        var finnalColor:vec3<f32>=color.xyz * (lightColor.directDiffuse + lightColor.directSpecular + lightColor.ambient);

        return vec4<f32>(finnalColor,color.a);
    }`;
}

// import Color from "../../math/Color";
function colorFrag(defines) {
	return `
    struct VertexOutput {
        @builtin(position) position: vec4<f32>,
        @location(0) color: vec4<f32>,
    };
    @fragment
    fn main(input:VertexOutput) -> @location(0) vec4<f32> {
      return input.color;
    }
    `;
}

function colorVert(defines) {
	return `
   struct VertexInput {
        @location(${defines.positionLocation}) position: vec3<f32>,       
        @location(${defines.colorLocation}) color: vec4<f32>,
   }
   struct VertexOutput {
        @builtin(position) position: vec4<f32>,
        @location(0) color: vec4<f32>,
    };
   struct SelfUniform {
      modelMatrix: mat4x4<f32>,
   }
   struct SystemUniform {
      projectionMatrix: mat4x4<f32>,
      viewMatrix: mat4x4<f32>,
      inverseViewMatrix: mat4x4<f32>,
      cameraPosition: vec3<f32>,
   }; 
   @binding(${defines.colorBinding}) @group(0) var<uniform> selfUniform : SelfUniform;
   @binding(${defines.cameraBinding}) @group(1) var<uniform> systemUniform : SystemUniform;
   @vertex
   fn main(input: VertexInput) -> VertexOutput {
    var output:VertexOutput;
    output.color=input.color;
    output.position = systemUniform.projectionMatrix * systemUniform.viewMatrix *selfUniform.modelMatrix*vec4<f32>(input.position,1.0);
    return output;
   }
   `;
}

function pbrFrag(defines) {
	return wgslParseDefines`
    #include <lightCommon>
    #include <light>
    #include <brdf>
    #include <pbrStruct>
    #include <pbrUtils>
    #include <pbrFunction>
    #include <pbrTexture>
    #include <environment>
    struct SystemUniform {
        projectionMatrix: mat4x4<f32>,
        viewMatrix: mat4x4<f32>,
        inverseViewMatrix: mat4x4<f32>,
        cameraPosition: vec3<f32>,
    }; 
    // uniform vec3 lightProbe[9],
////////////////////////////////////
struct VertexOutput {
    @builtin(position) position: vec4<f32>,
    @builtin(front_facing) is_front: bool,
    @location(0) vUv: vec2<f32>,
    @location(1) vViewPosition: vec3<f32>, // Vector from vertex to camera.
    @location(2) vWorldPosition: vec3<f32>,
    @location(3) vNormal: vec3<f32>,
    // 可选
    #if ${defines.USE_LIGHTTEXTURE || defines.USE_AOTEXTURE}
        @location(${defines.vUv2OutLocation}) vUv2: vec2<f32>,
    #endif

    #if ${defines.USE_COLOR_ALPHA}
        @location(${defines.vColorOutLocation}) vColor: vec4<f32>,
    #elif ${defines.USE_COLOR || defines.USE_INSTANCING_COLOR}
        @location(${defines.vColorOutLocation}) vColor: vec3<f32>,
    #endif

    #if ${defines.USE_TANGENT}
        @location(${defines.vTangentOutLocation}) vTangent: vec3<f32>,
        @location(${defines.vBitangentOutLocation}) vBitangent: vec3<f32>,
    #endif
};
        struct PhysicalMaterial {
             diffuseColor:vec3<f32>,
             roughness:f32,
             specularColor:vec3<f32>,
             specularF90:f32,
            #if ${defines.USE_CLEARCOAT}
                clearcoat:f32,
                clearcoatRoughness:f32,
                clearcoatF0:vec3<f32>,
                clearcoatF90:f32,
            #endif

            #if ${defines.USE_IRIDESCENCE}
                iridescence:f32,
                iridescenceIOR:f32,
                iridescenceThickness:f32,
                iridescenceFresnel:vec3<f32>,
                iridescenceF0:vec3<f32>,
            #endif

            #if ${defines.USE_SHEEN}
                sheenColor:vec3<f32>,
                sheenRoughness:f32,
            #endif

            #if ${defines.IOR}
                 ior:f32,
            #endif

            #if ${defines.USE_TRANSMISSION}
                transmission:f32,
                transmissionAlpha:f32,
                thickness:f32,
                attenuationDistance:f32,
                attenuationColor:vec3<f32>,
            #endif
        };
@binding(0) @group(0) var<uniform> materialUniform : MaterialUniform;
@binding(0) @group(1) var<uniform> systemUniform : SystemUniform;
@fragment
fn main(input:VertexOutput)-> @location(0) vec4<f32> {
        var diffuseColor:vec4<f32> = vec4(materialUniform.diffuse, materialUniform.opacity );
       // ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
        var reflectedLight:ReflectedLight;
        var totalEmissiveRadiance:vec3<f32> = materialUniform.emissive;
        #if ${defines.USE_TEXTURE}
            var sampledDiffuseColor:vec4<f32> =textureSample(baseTexture, baseSampler, input.vUv);
            #if ${defines.DECODE_VIDEO_TEXTURE}
                sampledDiffuseColor = vec4<f32>( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3<f32>( 0.0521327014 ), vec3<f32>( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3<f32>( lessThanEqual( sampledDiffuseColor.rgb, vec3<f32>( 0.04045 ) ) ) ), sampledDiffuseColor.w );
            #endif

            diffuseColor *= sampledDiffuseColor;
        #endif

        var roughnessFactor:f32 = materialUniform.roughness;
    
        #if ${defines.USE_ROUGHNESSTEXTURE}
            let texelRoughness:vec4<f32>=textureSample(roughnessTexture, baseSampler, input.vUv);
            roughnessFactor *= texelRoughness.g;
        #endif

        var metalnessFactor:f32 = materialUniform.metalness;
    
        #if ${defines.USE_METALNESSTEXTURE}
            let texelMetalness:vec4<f32> =textureSample(metalnessTexture, baseSampler, input.vUv);
            metalnessFactor *= texelMetalness.b;
        #endif

        let faceDirection:f32 =select(-1.0,1.0,input.is_front);
        #if ${defines.FLAT_SHADED}
            let fdx:vec3<f32> = dpdx( input.vViewPosition );
            let fdy:vec3<f32> = dpdy( input.vViewPosition );
            let normal:vec3<f32> = normalize( cross( fdy, fdx ) );
        #else
            let normal:vec3<f32> = normalize( input.vNormal );
            #if ${defines.DOUBLE_SIDED}
                normal = normal * faceDirection;
            #endif
            #if ${defines.USE_TANGENT}
                let tangent:vec3<f32> = normalize( input.vTangent );
                let bitangent:vec3<f32> = normalize( input.vBitangent );
                #if ${defines.DOUBLE_SIDED}
                    tangent = tangent * faceDirection;
                    bitangent = bitangent * faceDirection;
                #endif
                #if ${defines.TANGENTSPACE_NORMALTEXTURE || defines.USE_CLEARCOAT_NORMALTEXTURE}
                    let vTBN:mat3x3<f32> = mat3x3<f32>( tangent, bitangent, normal );
                #endif
            #endif
        #endif
    
        let geometryNormal:vec3<f32> = normal;

        #if ${defines.OBJECTSPACE_NORMALTEXTURE}
            normal =textureSample(normalTexture, baseSampler, input.vUv).xyz * 2.0 - 1.0;
            #if ${defines.FLIP_SIDED}
                normal = - normal;
            #endif
            #if ${defines.DOUBLE_SIDED}
                normal = normal * faceDirection;
            #endif

            normal = normalize(materialUniform.normalMatrix * normal );

            #elif ${defines.TANGENTSPACE_NORMALTEXTURE}
            let tempMapN:vec3<f32> =textureSample(normalTexture, baseSampler, input.vUv).xyz * 2.0 - 1.0;
            let mapN:vec3<f32> =tempMapN.xy *= materialUniform.normalScale;
            #if ${defines.USE_TANGENT}
                normal = normalize( vTBN * mapN );
            #else
                normal = perturbNormal2Arb( - input.vViewPosition, normal, mapN, faceDirection );
            #endif

            #elif ${defines.USE_BUMPTEXTURE}

                normal = perturbNormalArb( - input.vViewPosition, normal, dHdxy_fwd(), faceDirection );
        #endif

        #if ${defines.USE_CLEARCOAT}
            var clearcoatNormal:vec3<f32> = geometryNormal;
        #endif
        #if ${defines.USE_CLEARCOAT_NORMALTEXTURE}
            var clearcoatMapN:vec3<f32> =textureSample(clearcoatNormalTexture, baseSampler, input.vUv).xyz * 2.0 - 1.0;
            clearcoatMapN.xy *= materialUniform.clearcoatNormalScale;
            #if ${defines.USE_TANGENT}
                clearcoatNormal = normalize( vTBN * clearcoatMapN );
            #else
                clearcoatNormal = perturbNormal2Arb( - input.vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
            #endif
        #endif
        #if ${defines.USE_EMISSIVETEXTURE}
            let emissiveColor:vec4<f32> =textureSample(emissiveTexture, baseSampler, input.vUv);
            totalEmissiveRadiance *= emissiveColor.rgb;
        #endif

        var material:PhysicalMaterial;
        material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
        let dxy:vec3<f32> = max( abs( dpdx( geometryNormal ) ), abs( dpdy( geometryNormal ) ) );
        let geometryRoughness:f32 = max( max( dxy.x, dxy.y ), dxy.z );
        material.roughness = max( roughnessFactor, 0.0525 );
        material.roughness += geometryRoughness;
        material.roughness = min( material.roughness, 1.0 );

        #if ${defines.IOR}
            material.ior = materialUniform.ior;
            #if ${defines.SPECULAR}
                let specularIntensityFactor:f32 = materialUniform.specularIntensity;
                let specularColorFactor:vec3<f32> = materialUniform.specularColor;
                #if ${defines.USE_SPECULARINTENSITYTEXTURE}
                    specularIntensityFactor *=textureSample(specularIntensityTexture, baseSampler, input.vUv).a;
                #endif

                #if ${defines.USE_SPECULARCOLORTEXTURE}
                    specularColorFactor *=textureSample(specularColorTexture, baseSampler, input.vUv).rgb;
                #endif

                material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
            #else
                let specularIntensityFactor:f32 = 1.0;
                let specularColorFactor:vec3<f32> = vec3<f32>( 1.0 );
                material.specularF90 = 1.0;
            #endif
            material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
        #else
            material.specularColor = mix( vec3<f32>( 0.04 ), diffuseColor.rgb, metalnessFactor );
            material.specularF90 = 1.0;
        #endif
        #if ${defines.USE_CLEARCOAT}
            material.clearcoat = materialUniform.clearcoat;
            material.clearcoatRoughness = materialUniform.clearcoatRoughness;
            material.clearcoatF0 = vec3<f32>( 0.04 );
            material.clearcoatF90 = 1.0;
            #if ${defines.USE_CLEARCOATTEXTURE}
                material.clearcoat *=textureSample(clearcoatTexture, baseSampler, input.vUv).x;
            #endif
            #if ${defines.USE_CLEARCOAT_ROUGHNESSTEXTURE}
                material.clearcoatRoughness *=textureSample(clearcoatRoughnessTexture, baseSampler, input.vUv).y;
            #endif
            material.clearcoat = saturate( material.clearcoat );
            material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
            material.clearcoatRoughness += geometryRoughness;
            material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
        #endif
        #if ${defines.USE_IRIDESCENCE}
            material.iridescence = materialUniform.iridescence;
            material.iridescenceIOR = materialUniform.iridescenceIOR;
            #if ${defines.USE_IRIDESCENCETEXTURE}
                material.iridescence *=textureSample(iridescenceTexture, baseSampler, input.vUv).r;
            #endif
            #if ${defines.USE_IRIDESCENCE_THICKNESSTEXTURE}
                material.iridescenceThickness = (materialUniform.iridescenceThicknessMaximum - materialUniform.iridescenceThicknessMinimum) * textureSample(iridescenceThicknessTexture, baseSampler, input.vUv).g + materialUniform.iridescenceThicknessMinimum;
            #else
                material.iridescenceThickness = materialUniform.iridescenceThicknessMaximum;
            #endif
        #endif
        #if ${defines.USE_SHEEN}
            material.sheenColor = materialUniform.sheenColor;
            #if ${defines.USE_SHEENCOLORTEXTURE}
                material.sheenColor *=textureSample(sheenColorTexture, baseSampler, input.vUv).rgb;
            #endif
            material.sheenRoughness = clamp( materialUniform.sheenRoughness, 0.07, 1.0 );
            #if ${defines.USE_SHEENROUGHNESSTEXTURE}
                material.sheenRoughness *=textureSample(sheenRoughnessTexture, baseSampler, input.vUv).a;
            #endif
        #endif
        
        var geometry:GeometricContext;
        geometry.position = - input.vViewPosition;
        geometry.normal = normal;
       // geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( input.vViewPosition );
        geometry.viewDir = normalize( input.vViewPosition); 

        #if ${defines.USE_CLEARCOAT}
            geometry.clearcoatNormal = clearcoatNormal;
        #endif

        #if ${defines.USE_IRIDESCENCE}
            let dotNVi:f32 = saturate( dot( normal, geometry.viewDir ) );
            if ( material.iridescenceThickness == 0.0 ) {
                material.iridescence = 0.0;
            }
            else {
                material.iridescence = saturate( material.iridescence );
            }
            if ( material.iridescence > 0.0 ) {
                material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
                material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
            }
        #endif

        var iblIrradiance:vec3<f32> = vec3<f32>( 0.0 );
        var irradiance:vec3<f32> = getAmbientLightIrradiance(commonLightsParms.ambient);
        //irradiance += getLightProbeIrradiance( lightProbe, geometry.normal,systemUniform.viewMatrix );

        var radiance:vec3<f32> = vec3<f32>( 0.0 );
        var clearcoatRadiance:vec3<f32> = vec3<f32>( 0.0 );

        #if ${defines.USE_LIGHTTEXTURE}
            let lightMapTexel:vec4<f32> =textureSample(lightTexture, baseSampler, input.vUv2);
            let lightMapIrradiance:vec3<f32> = lightMapTexel.rgb * materialUniform.lightTextureIntensity;
            irradiance += lightMapIrradiance;
        #endif
        //&& defines.STANDARD&&defines.ENVTEXTURE_TYPE_CUBE_UV
        #if ${defines.USE_ENVTEXTURE} 
            iblIrradiance += getIBLIrradiance( geometry.normal,baseSampler,systemUniform.viewMatrix );
        #endif
        #if ${defines.USE_ENVTEXTURE}
            radiance += getIBLRadiance( geometry.viewDir,baseSampler,systemUniform.viewMatrix, geometry.normal, materialUniform.roughness );
            #if ${defines.USE_CLEARCOAT}
                clearcoatRadiance += getIBLRadiance( geometry.viewDir,baseSampler,systemUniform.viewMatrix, geometry.clearcoatNormal, material.clearcoatRoughness );
            #endif
        #endif
        //直接光照
            let dirReflectedLight:ReflectedLight= parseLights(geometry,material);
            reflectedLight.directDiffuse +=dirReflectedLight.directDiffuse;
            reflectedLight.directSpecular +=dirReflectedLight.directSpecular;
        //间接漫反射
            let indirectDiffuseLight:ReflectedLight= RE_IndirectDiffuse_Physical( irradiance, geometry, material);
            reflectedLight.directDiffuse +=indirectDiffuseLight.indirectDiffuse;
            reflectedLight.directSpecular +=indirectDiffuseLight.indirectSpecular;
        //间接高光
            let indirectSpecularLight:ReflectedLight=RE_IndirectSpecular_Physical( radiance, iblIrradiance, clearcoatRadiance, geometry, material);
            reflectedLight.directDiffuse +=indirectSpecularLight.indirectDiffuse;
            reflectedLight.directSpecular +=indirectSpecularLight.indirectSpecular;
        //环境光遮蔽
        #if ${defines.USE_AOTEXTURE}
            let ambientOcclusion:f32 = (textureSample(aoTexture, baseSampler, input.vUv2).r - 1.0 ) * materialUniform.aoTextureIntensity + 1.0;

            reflectedLight.indirectDiffuse *= ambientOcclusion;
            //&&defines.STANDARD
            #if ${defines.USE_ENVTEXTURE} 
                let dotNV:f32 = saturate( dot( geometry.normal, geometry.viewDir ) );
                reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
            #endif
        #endif

        var totalDiffuse:vec3<f32> = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
        var totalSpecular:vec3<f32> = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
        //透射
        #if ${defines.USE_TRANSMISSION}
            material.transmission = materialUniform.transmission;
            material.transmissionAlpha = 1.0;
            material.thickness = materialUniform.thickness;
            material.attenuationDistance = materialUniform.attenuationDistance;
            material.attenuationColor = materialUniform.attenuationColor;
            #if ${defines.USE_TRANSMISSIONTEXTURE}
                material.transmission *=textureSample(transmissionTexture, baseSampler, input.vUv).r;
            #endif
            #if ${defines.USE_THICKNESSTEXTURE}
                material.thickness *=textureSample(thicknessTexture, baseSampler, input.vUv).g;
            #endif
            let pos:vec3<f32> = vWorldPosition;
            let v:vec3<f32> = normalize( cameraPosition - pos );
            let n:vec3<f32> = inverseTransformDirection( normal, systemUniform.viewMatrix );
            let transmission:vec4<f32> = getIBLVolumeRefraction(
            n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90, pos, modelMatrix, systemUniform.viewMatrix, systemUniform.projectionMatrix, material.ior, material.thickness, material.attenuationColor, material.attenuationDistance );
            material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
            totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
        #endif

        let outgoingLight:vec3<f32> = totalDiffuse + totalSpecular + totalEmissiveRadiance;

        #if ${defines.USE_SHEEN}
            let sheenEnergyComp:f32 = 1.0 - 0.157 * max3( material.sheenColor );
            outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
        #endif

        #if ${defines.USE_CLEARCOAT}
            let dotNVcc:f32 = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
            let Fcc:vec3<f32> = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
            outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
        #endif

        #if ${defines.USE_TRANSMISSION}
            diffuseColor.a *= material.transmissionAlpha + 0.1;
        #endif

        var finnalColor:vec4<f32>;
        finnalColor = vec4<f32>( outgoingLight, diffuseColor.a );
        #if ${defines.TONE_MAPPING}
           finnalColor.rgb = toneMapping( finnalColor.rgb,materialUniform.toneMappingExposure );
        #endif

          finnalColor = linearToOutputTexel( finnalColor);

        #if ${defines.PREMULTIPLIED_ALPHA}
            finnalColor.rgb *= finnalColor.a;
        #endif
        #if ${defines.DITHERING}
            finnalColor.rgb = dithering( finnalColor.rgb );
        #endif
        return finnalColor;
    }`;
}

function pbrVert(defines) {
	return wgslParseDefines`
    #include <pbrStruct>
    struct VertexOutput {
        @builtin(position) position: vec4<f32>,
        @location(0) vUv: vec2<f32>,
        @location(1) vViewPosition: vec3<f32>, // Vector from vertex to camera.
        @location(2) vWorldPosition: vec3<f32>,
        @location(3) vNormal: vec3<f32>,
        // 可选
        #if ${defines.USE_LIGHTTEXTURE || defines.USE_AOTEXTURE}
            @location(${defines.vUv2OutLocation}) vUv2: vec2<f32>,
        #endif

        #if ${defines.USE_COLOR_ALPHA}
            @location(${defines.vColorOutLocation}) vColor: vec4<f32>,
        #elif ${defines.USE_COLOR || defines.USE_INSTANCING_COLOR}
            @location(${defines.vColorOutLocation}) vColor: vec3<f32>,
        #endif

        #if ${defines.USE_TANGENT}
            @location(${defines.vTangentOutLocation}) vTangent: vec3<f32>,
            @location(${defines.vBitangentOutLocation}) vBitangent: vec3<f32>,
        #endif
    };
    struct GlobalUniform {
        projectionMatrix: mat4x4<f32>,
        viewMatrix: mat4x4<f32>,
        inverseViewMatrix: mat4x4<f32>,
        cameraPosition: vec3<f32>,
    };

    //texture and sampler
    // @group(0) @binding(${defines.samplerBinding}) var baseSampler: sampler;
    #if ${defines.USE_SKINNING}
        //uniform highp sampler2D boneTexture;
        @group(0) @binding(${defines.boneTextureBinding}) var boneTexture: texture_2d<f32>;
    #endif

    #if ${defines.USE_DISPLACEMENTTEXTURE}
        //uniform sampler2D displacementMap;
        @group(0) @binding(${defines.displacementTextureBinding}) var displacementMap: texture_2d<f32>;
    #endif

    #if ${defines.MORPHTARGETS_TEXTURE}
        //uniform sampler2DArray morphTargetsTexture;
        @group(0) @binding(${defines.morphTargetsTextureBinding}) var morphTargetsTexture: texture_2d_array<f32>;
    #endif

    struct VertexInput {
        @location(0) position: vec3<f32>,  

        @location(1) normal: vec3<f32>,

        @location(2) uv: vec2<f32>,
        #if ${defines.USE_LIGHTTEXTURE || defines.USE_AOTEXTURE}
            @location(${defines.uv2Location}) uv2:vec2<f32>,
        #endif
        #if ${defines.USE_INSTANCING}
            @location(${defines.instanceMatrixLocation}) instanceMatrix:mat4x4<f32>,
        #endif
        #if ${defines.USE_INSTANCING_COLOR}
            @location(${defines.instanceColorLocation}) instanceColor:vec3<f32>,
        #endif
        
        #if ${defines.USE_TANGENT}
            @location(${defines.tangentLocation}) tangent:vec4<f32>,
        #endif
        #if ${defines.USE_COLOR_ALPHA}
            @location(${defines.colorLocation}) color:vec4<f32>,
        #elif ${defines.USE_COLOR}
            @location(${defines.colorLocation}) color:vec3<f32>,
        #endif

        #if ${defines.USE_MORPHTARGETS && !defines.MORPHTARGETS_TEXTURE}
            @location(${defines.morphTarget0Location}) morphTarget0:vec3<f32>,

            @location(${defines.morphTarget1Location}) morphTarget1:vec3<f32>,

            @location(${defines.morphTarget2Location}) morphTarget2:vec3<f32>,

            @location(${defines.morphTarget3Location}) morphTarget3:vec3<f32>,
            #if ${defines.USE_MORPHNORMALS}
                @location(${defines.morphNormal0Location}) morphNormal0:vec3<f32>,

                @location(${defines.morphNormal1Location}) morphNormal1:vec3<f32>,

                @location(${defines.morphNormal2Location}) morphNormal2:vec3<f32>,

                @location(${defines.morphNormal3Location}) morphNormal3:vec3<f32>,
            #else
                @location(${defines.morphTarget4Location}) morphTarget4:vec3<f32>,

                @location(${defines.morphTarget5Location}) morphTarget5:vec3<f32>,

                @location(${defines.morphTarget6Location}) morphTarget6:vec3<f32>,

                @location(${defines.morphTarget7Location}) morphTarget7:vec3<f32>,
            #endif
        #endif
        #if ${defines.USE_SKINNING}
            @location(${defines.skinIndexLocation}) skinIndex:vec4<f32>,
            @location(${defines.skinWeightLocation}) skinWeight:vec4<f32>,
        #endif
  }

    #if ${defines.MORPHTARGETS_TEXTURE}
        fn getMorph( vertexIndex:u32, morphTargetIndex:u32,offset:u32 )->vec4<f32> {
            let texelIndex:u32 = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
            let y:u32 = texelIndex / materialUniform.morphTargetsTextureSize.x;
            let x:u32 = texelIndex - y * materialUniform.morphTargetsTextureSize.x;
            let morphUV:vec3<u32> = vec3<u32>( x, y, morphTargetIndex );
            //textureLoad
            //return texelFetch( morphTargetsTexture, morphUV, 0 );
            return textureLoad( morphTargetsTexture, morphUV, 0 );
        }
    #endif
    #if ${defines.USE_SKINNING}
        fn getBoneMatrix( i:f32 )->mat4x4<f32> {
            let j:f32 = i * 4.0;
            let x:f32 = j%f32( materialUniform.boneTextureSize );
            let y:f32 = floor( j / f32( materialUniform.boneTextureSize ) );
            let dx:f32 = 1.0 / f32( materialUniform.boneTextureSize );
            let dy:f32 = 1.0 / f32( materialUniform.boneTextureSize );
            y = dy * ( y + 0.5 );
            
            let v1:vec4<f32> = textureSample(boneTexture, baseSampler, vec2<f32>( dx * ( x + 0.5 ), y ) );
            let v2:vec4<f32> = textureSample(boneTexture, baseSampler, vec2<f32>( dx * ( x + 1.5 ), y ) );
            let v3:vec4<f32> = textureSample(boneTexture, baseSampler, vec2<f32>( dx * ( x + 2.5 ), y ) );
            let v4:vec4<f32> = textureSample(boneTexture, baseSampler, vec2<f32>( dx * ( x + 3.5 ), y ) );
            let bone:mat4x4<f32> = mat4x4<f32>( v1, v2, v3, v4 );
            return bone;
        }
    #endif

    @binding(0) @group(0) var<uniform> materialUniform : MaterialUniform;
    @binding(0) @group(1) var<uniform> globalUniform : GlobalUniform;
    @vertex
    fn main(input:VertexInput)->VertexOutput {
        var vertexOutput:VertexOutput;
        #if ${defines.USE_TEXTURE}
            vertexOutput.vUv = input.uv;
        #endif
        #if ${defines.USE_LIGHTTEXTURE || defines.USE_AOTEXTURE}
            vertexOutput.vUv2 input.uv2;
        #endif
        #if ${defines.USE_COLOR_ALPHA}
            vertexOutput.vColor = vec4( 1.0 );
            #elif ${defines.USE_COLOR || defines.USE_INSTANCING_COLOR}
            vertexOutput.vColor = vec3( 1.0 );
        #endif
        #if ${defines.USE_COLOR}
            vertexOutput.vColor *= input.color;
        #endif
        #if ${defines.USE_INSTANCING_COLOR}
            vertexOutput.vColor.xyz *= input.instanceColor.xyz;
        #endif
        #if ${defines.USE_MORPHCOLORS && defines.MORPHTARGETS_TEXTURE}
            vertexOutput.vColor *= materialUniform.morphTargetBaseInfluence;
            for (let i : u32 = 0u; i < materialUniform.MORPHTARGETS_COUNT; i = i + 1u ) {
                #if ${defines.USE_COLOR_ALPHA}
                    if ( materialUniform.morphTargetInfluences[ i ] ! = 0.0 ) vertexOutput.vColor += getMorph( gl_VertexID, i, 2 ) * materialUniform.morphTargetInfluences[ i ];
                    #elif ${defines.USE_COLOR}
                    if ( materialUniform.morphTargetInfluences[ i ] ! = 0.0 ) vertexOutput.vColor += getMorph( gl_VertexID, i, 2 ).rgb * materialUniform.morphTargetInfluences[ i ];
                #endif
            }
        #endif
        var objectNormal:vec3<f32> = vec3<f32>(input.normal);
        #if ${defines.USE_TANGENT}
            let objectTangent:vec3<f32> = vec3<f32>( input.tangent.xyz );
        #endif
        #if ${defines.USE_MORPHNORMALS}
            objectNormal *= materialUniform.morphTargetBaseInfluence;
            #if ${defines.MORPHTARGETS_TEXTURE}
                for ( let i : u32 = 0u; i < materialUniform.MORPHTARGETS_COUNT; i = i + 1u) {
                    if ( materialUniform.morphTargetInfluences[ i ] ! = 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * materialUniform.morphTargetInfluences[ i ];
                }
            #else
                objectNormal += morphNormal0 * materialUniform.morphTargetInfluences[ 0 ];
                objectNormal += morphNormal1 * materialUniform.morphTargetInfluences[ 1 ];
                objectNormal += morphNormal2 * materialUniform.morphTargetInfluences[ 2 ];
                objectNormal += morphNormal3 * materialUniform.morphTargetInfluences[ 3 ];
            #endif
        #endif
        #if ${defines.USE_SKINNING}
            let boneMatX:mat4x4<f32> = getBoneMatrix( input.skinIndex.x );
            let boneMatY:mat4x4<f32> = getBoneMatrix( input.skinIndex.y );
            let boneMatZ:mat4x4<f32> = getBoneMatrix( input.skinIndex.z );
            let boneMatW:mat4x4<f32> = getBoneMatrix( input.skinIndex.w );
        #endif
        #if ${defines.USE_SKINNING}
            let skinMatrix:mat4x4<f32> = mat4x4<f32>( 0.0 );
            skinMatrix += input.skinWeight.x * boneMatX;
            skinMatrix += input.skinWeight.y * boneMatY;
            skinMatrix += input.skinWeight.z * boneMatZ;
            skinMatrix += input.skinWeight.w * boneMatW;
            skinMatrix = materialUniform.bindMatrixInverse * skinMatrix * materialUniform.bindMatrix;
            objectNormal = vec4<f32>( skinMatrix * vec4<f32>( objectNormal, 0.0 ) ).xyz;
            #if ${defines.USE_TANGENT}
                objectTangent = vec4<f32>( skinMatrix * vec4<f32>( objectTangent, 0.0 ) ).xyz;
            #endif
        #endif
        var transformedNormal:vec3<f32> = objectNormal;
        // transformedNormal+=vec3<f32>(0.0);
        #if ${defines.USE_INSTANCING}
            let m:mat3x3<f32> = mat3x3<f32>( input.instanceMatrix );
            transformedNormal /= vec3<f32>( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
            transformedNormal = m * transformedNormal;
        #endif
        transformedNormal = materialUniform.normalMatrix * transformedNormal;
        #if ${defines.FLIP_SIDED}
            transformedNormal = - transformedNormal;
        #endif
        #if ${defines.USE_TANGENT}
            let transformedTangent:vec3<f32> = (globalUniform.viewMatrix*materialUniform.modelMatrix * vec4<f32>( objectTangent, 0.0 ) ).xyz;
            #if ${defines.FLIP_SIDED}
                transformedTangent = - transformedTangent;
            #endif
        #endif
        vertexOutput.vNormal = normalize( transformedNormal );
        #if ${defines.FLAT_SHADED}
            #if ${defines.USE_TANGENT}
                vTangent = normalize( transformedTangent );
                vBitangent = normalize( cross( vNormal, vTangent ) * input.tangent.w );
            #endif
        #endif
        let transformed:vec3<f32> = vec3<f32>( input.position );
        #if ${defines.USE_MORPHTARGETS}
            transformed *= materialUniform.morphTargetBaseInfluence;
            #if ${defines.MORPHTARGETS_TEXTURE}
                for ( let i : u32 = 0u; i < materialUniform.MORPHTARGETS_COUNT; i = i + 1u ) {
                    if ( materialUniform.morphTargetInfluences[ i ] ! = 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
                }
            #else
                transformed += input.morphTarget0 * materialUniform.morphTargetInfluences[ 0 ];
                transformed += input.morphTarget1 * materialUniform.morphTargetInfluences[ 1 ];
                transformed += input.morphTarget2 * materialUniform.morphTargetInfluences[ 2 ];
                transformed += input.morphTarget3 * materialUniform.morphTargetInfluences[ 3 ];
                #if ${defines.USE_MORPHNORMALS}
                    transformed += input.morphTarget4 * materialUniform.morphTargetInfluences[ 4 ];
                    transformed += input.morphTarget5 * materialUniform.morphTargetInfluences[ 5 ];
                    transformed += input.morphTarget6 * materialUniform.morphTargetInfluences[ 6 ];
                    transformed += input.morphTarget7 * materialUniform.morphTargetInfluences[ 7 ];
                #endif
            #endif
        #endif
        #if ${defines.USE_SKINNING}
            let skinVertex:vec4<f32> = materialUniform.bindMatrix * vec4<f32>( transformed, 1.0 );
            let skinned:vec4<f32> = vec4<f32>( 0.0 );
            skinned += boneMatX * skinVertex * input.skinWeight.x;
            skinned += boneMatY * skinVertex * input.skinWeight.y;
            skinned += boneMatZ * skinVertex * input.skinWeight.z;
            skinned += boneMatW * skinVertex * input.skinWeight.w;
            transformed = ( materialUniform.bindMatrixInverse * skinned ).xyz;
        #endif
        #if ${defines.USE_DISPLACEMENTTEXTURE} 
            transformed += normalize( objectNormal ) * (textureSample(displacementMap, baseSampler, vUv).x * materialUniform.displacementScale + materialUniform.displacementBias );
        #endif
        var mvPosition:vec4<f32> = vec4<f32>( transformed, 1.0 );
        #if ${defines.USE_INSTANCING}
            mvPosition = input.instanceMatrix * mvPosition;
        #endif
        mvPosition = globalUniform.viewMatrix*materialUniform.modelMatrix * mvPosition;
        vertexOutput.position = globalUniform.projectionMatrix * mvPosition;
        vertexOutput.vViewPosition = - mvPosition.xyz/mvPosition.w;
        #if ${defines.USE_ENVTEXTURE || defines.DISTANCE || defines.USE_TRANSMISSION} 
            var worldPosition:vec4<f32> = vec4<f32>( transformed, 1.0 );
            #if ${defines.USE_INSTANCING}
                worldPosition = input.instanceMatrix * worldPosition;
            #endif
            worldPosition = materialUniform.modelMatrix * worldPosition;
        #endif
        #if ${defines.USE_TRANSMISSION}
            vertexOutput.vWorldPosition = worldPosition.xyz;
        #endif
        return vertexOutput;
    }
    `;
}

function skyBoxFrag(defines) {
	return `
    fn lessThanEqual(a:vec3<f32>,b:vec3<f32>)->vec3<f32>{
        let xValue:f32=select(b.x,a.x,a.x<=b.x);
        let yValue:f32=select(b.y,a.y,a.y<=b.y);
        let zValue:f32=select(b.z,a.z,a.z<=b.z);
        return vec3<f32>(xValue,yValue,zValue);    
     }
    fn LinearTosRGB( value:vec4<f32> )->vec4<f32> {
        return vec4<f32>( mix( pow( value.rgb, vec3<f32>( 0.41666 ) ) * 1.055 - vec3<f32>( 0.055 ), value.rgb * 12.92, vec3<f32>( lessThanEqual( value.rgb, vec3<f32>( 0.0031308 ) ) ) ), value.a );
    }
  struct FragmentInput {
    @location(0) texCoord : vec3<f32>
  };
  @group(0) @binding(2) var defaultSampler: sampler;
  @group(0) @binding(1) var skyboxTexture: texture_cube<f32>;
  @fragment
  fn main(input : FragmentInput) -> @location(0) vec4<f32> {
    let color = textureSample(skyboxTexture, defaultSampler, input.texCoord);
    return LinearTosRGB(color);
  }
`;
}

function skyBoxVert(defines) {
	return `
   struct SystemUniform {
       projectionMatrix: mat4x4<f32>,
       viewMatrix: mat4x4<f32>,
       inverseViewMatrix: mat4x4<f32>,
       cameraPosition: vec3<f32>,
   }; 
   struct MaterialUniform {
    modelMatrix: mat4x4<f32>,
 }
   @binding(${defines.skyboxBinding}) @group(0) var<uniform> selfUniform : MaterialUniform;
   @binding(${defines.cameraBinding}) @group(1) var<uniform> systemUniform : SystemUniform;
     struct VertexInput {
       @location(${defines.positionLocation}) position : vec3<f32>,
     };
     struct VertexOutput {
       @builtin(position) position : vec4<f32>,
       @location(0) texCoord : vec3<f32>,
     };
     @vertex
     fn main(input : VertexInput) -> VertexOutput {
       var output : VertexOutput;
       output.texCoord = input.position.xyz;
       var modelView = systemUniform.viewMatrix;
       // Drop the translation portion of the modelView matrix
       modelView[3] = vec4(0.0, 0.0, 0.0, modelView[3].w);
       output.position = systemUniform.projectionMatrix * modelView * vec4<f32>(input.position,1.0);
       // Returning the W component for both Z and W forces the geometry depth to
       // the far plane. When combined with a depth func of "less-equal" this makes
       // the sky write to any depth fragment that has not been written to yet.
       output.position = output.position.xyww;
       return output;
     }
   `;
}

function quadFrag(defines) {
	return `
    @group(0) @binding(1) var baseSampler: sampler;
    @group(0) @binding(0) var colorTexture: texture_2d<f32>;
    struct VertexOutput {
        @builtin(position) position: vec4<f32>,
        @location(0) uv: vec2<f32>,
    };
    @fragment
    fn main(input:VertexOutput) -> @location(0) vec4<f32> {
      return textureSample(colorTexture, baseSampler, vec2<f32>(input.uv.x,1.0-input.uv.y));
    }
    `;
}

function quadVert(defines) {
	return `
    struct VertexInput {
         @location(${defines.positionLocation}) position: vec2<f32>,       
    }
    struct VertexOutput {
         @builtin(position) position: vec4<f32>,
         @location(0) uv: vec2<f32>,
     };
    @vertex
    fn main(input: VertexInput) -> VertexOutput {
     var output:VertexOutput;
     output.uv = input.position * 0.5 + 0.5;
     output.position = vec4<f32>(input.position, 0.0, 1.0);;
     return output;
    }
    `;
}

function pbr_vs(defines) {
	return wgslParseDefines`
   struct MaterialUniform {
        modelMatrix: mat4x4<f32>,
        color: vec3<f32>,
        opacity:f32,
        normalMatrix: mat4x4<f32>,
        emissive:vec3<f32>,
        metallic:f32,
        roughness:f32,
        #if ${defines.USE_NORMALTEXTURE}
            normalTextureScale:vec2<f32>,
        #endif
        #if ${defines.USE_AOTEXTURE}
            occlusionStrength:f32,
        #endif
        #if ${defines.HAS_SKIN} 
             jointMatrixCount:f32,
             jointMatrixs:array<mat4x4>,
        #endif
   }

   struct SystemUniform {
        projectionMatrix: mat4x4<f32>,
        viewMatrix: mat4x4<f32>,
        inverseViewMatrix: mat4x4<f32>,
        cameraPosition: vec3<f32>,
   }; 
   
   struct VertexInput {
        @location(${defines.positionLocation}) position: vec3<f32>,       
        @location(${defines.normalLocation}) normal: vec3<f32>,
        #if${defines.HAS_COLOR} 
            @location(${defines.colorLocation}) color: vec3<f32>,
        #endif
        #if ${defines.HAS_UV}
            @location(${defines.uvLocation}) uv: vec2<f32>,
        #endif
        #if${defines.HAS_SKIN} 
            @location(${defines.joint0Location}) joint0:vec4<f32>;
            @location(${defines.weight0Location}) weight0:vec4<f32>;
            #if${defines.SKIN_VEC8}
                @location(${defines.joint1Location}) joint1:vec4<f32>;
                @location(${defines.weight1Location}) weight1:vec4:<f32>;
            #endif
        #endif
   }
    struct VertexOutput {
        @builtin(position) position:vec4<f32>,
        @location(0) worldPos:vec3<f32>,
        @location(1) normal:vec3<f32>,
        #if ${defines.HAS_UV}
            @location(2) uv:vec2<f32>
        #endif
    }  

    @binding(${defines.pbrBinding}) @group(0) var<uniform> materialUniform : MaterialUniform;
    @binding(${defines.cameraBinding}) @group(1) var<uniform> systemUniform : SystemUniform;
    @vertex
   fn main(input: VertexInput)-> VertexOutput
   {
       #if ${defines.HAS_SKIN} 
            var skinMatrix:mat4x4<f32> = 
                   input.weight0.x * materialUniform.jointMatrixs[u32(input.joint0.x)] +
                   input.weight0.y * materialUniform.jointMatrixs[u32(input.joint0.y)] +
                   input.weight0.z * materialUniform.jointMatrixs[u32(input.joint0.z)] +
                   input.weight0.w * materialUniform.jointMatrixs[u32(input.joint0.w)];
           #if ${defines.SKIN_VEC8} 
               skinMatrix +=
                   input.weight1.x * materialUniform.jointMatrixs[u32(joint1.x)] +
                   input.weight1.y * materialUniform.jointMatrixs[u32(joint1.y)] +
                   input.weight1.z * materialUniform.jointMatrixs[u32(joint1.z)] +
                   input.weight1.w * materialUniform.jointMatrixs[u32(joint1.w)];
           #endif
        #endif
        var output: VertexOutput;
        #if ${defines.HAS_UV}
            output.uv = input.uv;
        #endif
        #if ${defines.HAS_SKIN} 
            output.normal = normalize((materialUniform.normalMatrix * transpose(inverse(skinMatrix)) * vec4<f32>(input.normal, 0.0)).xyz);
            let pos:vec4<f32> = systemUniform.viewMatrix *materialUniform.modelMatrix*skinMatrix * vec4<f32>(input.position, 1.0);
            output.position = systemUniform.projectionMatrix * systemUniform.viewMatrix*materialUniform.modelMatrix * skinMatrix * vec4<f32>(input.position,1.0);
        #else
            let vNormalView = materialUniform.normalMatrix * vec4<f32>(input.normal,0.0);
            output.normal = vNormalView.xyz;
            let pos:vec4<f32>=systemUniform.viewMatrix *materialUniform.modelMatrix*vec4<f32>(input.position, 1.0);
            output.position = systemUniform.projectionMatrix * systemUniform.viewMatrix *materialUniform.modelMatrix* vec4<f32>(input.position, 1.0);
        #endif      
        // output.worldPos = pos.xyz/pos.w; 
        let modelPos=materialUniform.modelMatrix *vec4<f32>(input.position,1.0);
        output.worldPos = modelPos.xyz/modelPos.w;
        return output;   
   }
   `;
}

function pbr_fs(defines) {
	return wgslParseDefines`
        // reference: https://github.com/KhronosGroup/glTF-WebGL-PBR/blob/master/shaders/pbr-frag.glsl
        #include <pbrUtils>
        #include <light>
        #include <brdf>
        struct MaterialUniform {
            modelMatrix: mat4x4<f32>,
            color: vec3<f32>,
            opacity:f32,
            normalMatrix: mat4x4<f32>,
            emissive:vec3<f32>,
            metallic:f32,
            roughness:f32,
            #if ${defines.USE_NORMALTEXTURE}
                normalTextureScale:vec2<f32>,
            #endif
            #if ${defines.USE_AOTEXTURE}
                occlusionStrength:f32,
            #endif
         }
         struct SystemUniform {
            projectionMatrix: mat4x4<f32>,
            viewMatrix: mat4x4<f32>,
            inverseViewMatrix: mat4x4<f32>,
            cameraPosition: vec3<f32>,
        }; 
        struct VertInput {
            @builtin(front_facing) frontFacing: bool,
            @location(0) worldPos:vec3<f32>,
            @location(1) normal:vec3<f32>,
            #if ${defines.HAS_UV}
                @location(2) uv:vec2<f32>
            #endif
        }    
        struct PhysicalMaterial {
            diffuseColor:vec3<f32>,
            roughness:f32,
            specularColor:vec3<f32>,
           #if ${defines.USE_CLEARCOAT}
               clearcoat:f32,
               clearcoatRoughness:f32,
               clearcoatF0:vec3<f32>,
               clearcoatF90:f32,
           #endif

           #if ${defines.USE_IRIDESCENCE}
               iridescence:f32,
               iridescenceIOR:f32,
               iridescenceThickness:f32,
               iridescenceFresnel:vec3<f32>,
               iridescenceF0:vec3<f32>,
           #endif

           #if ${defines.USE_SHEEN}
               sheenColor:vec3<f32>,
               sheenRoughness:f32,
           #endif

           #if ${defines.IOR}
                ior:f32,
           #endif

           #if ${defines.USE_TRANSMISSION}
               transmission:f32,
               transmissionAlpha:f32,
               thickness:f32,
               attenuationDistance:f32,
               attenuationColor:vec3<f32>,
           #endif
       };
        const M_PI:f32 = 3.141592653589793;
        const c_MinRoughness:f32 = 0.04;
        @binding(${defines.pbrBinding}) @group(0) var<uniform> materialUniform : MaterialUniform;
        @binding(${defines.cameraBinding}) @group(1) var<uniform> systemUniform : SystemUniform;
        // IBL
        #if ${defines.USE_IBL}
            @group(0) @binding(${defines.specularEnvTextureBinding}) var specularEnvTexture: texture_cube<f32>;
            @group(0) @binding(${defines.specularEnvSamplerBinding}) var specularEnvSampler: sampler;
        #endif
        #if ${defines.USE_TEXTURE}
           @group(0) @binding(${defines.baseColorTextureBinding}) var baseColorTexture: texture_2d<f32>;
           @group(0) @binding(${defines.baseColorSamplerBinding}) var baseColorSampler: sampler;
        #endif
        // normal map
        #if ${defines.USE_NORMALTEXTURE}
          @group(0) @binding(${defines.normalTextureBinding}) var normalTexture: texture_2d<f32>;
          @group(0) @binding(${defines.normalSamplerBinding}) var normalSampler: sampler;
        #endif
        // emmisve map
        #if ${defines.USE_EMISSIVETEXTURE}
            @group(0) @binding(${defines.emissiveTextureBinding}) var emissiveTexture: texture_2d<f32>;
            @group(0) @binding(${defines.emissiveSamplerBinding}) var emissiveSampler: sampler;
        #endif

        // metal roughness
        #if ${defines.USE_METALNESSTEXTURE}
             @group(0) @binding(${
					defines.metalnessRoughnessTextureBinding
				}) var metalnessRoughnessTexture: texture_2d<f32>;
             @group(0) @binding(${defines.metalnessRoughnessSamplerBinding}) var metalnessRoughnessSampler: sampler;
        #endif
        // occlusion texture
        #if ${defines.USE_AOTEXTURE}
             @group(0) @binding(${defines.aoTextureBinding}) var aoTexture: texture_2d<f32>;
             @group(0) @binding(${defines.aoSamplerBinding}) var aoSampler: sampler;
        #endif
        #if ${defines.USE_NORMALTEXTURE}
            #include <getTBN>
            #include <getNormalByNormalTexture>
        #else
            #include <getNormal>
        #endif
        #if ${defines.USE_IBL}
            #include <ibl>
        #endif
        @fragment
        fn main(input:VertInput) -> @location(0) vec4<f32> 
        {
            var perceptualRoughness:f32 = materialUniform.roughness;
            var metallic:f32 = materialUniform.metallic;

            #if ${defines.USE_METALNESSTEXTURE}
                let mrSample:vec4<f32> = textureSample(metalnessRoughnessTexture,metalnessRoughnessSampler, input.uv);
                perceptualRoughness = mrSample.g * perceptualRoughness;
                metallic = mrSample.b * metallic;
            #endif
            perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
            metallic = clamp(metallic, 0.0, 1.0);
            let alphaRoughness:f32 = perceptualRoughness * perceptualRoughness;


            // The albedo may be defined from a base texture or a flat color
            #if ${defines.USE_TEXTURE}
                let baseColor:vec4<f32> = textureSample(baseColorTexture,baseColorSampler, input.uv) ;
            #else
                let baseColor:vec4<f32> = vec4<f32>(materialUniform.color,1.0);
            #endif

            #if ${defines.USE_NORMALTEXTURE}
                let n:vec3<f32> = getNormalByNormalTexture(input);  
            #else
                let n:vec3<f32> = getNormal(input);
            #endif
            var material:PhysicalMaterial;
            material.diffuseColor=baseColor.rgb*( 1.0 - metallic );
            material.roughness=perceptualRoughness;
            material.specularColor=mix( vec3<f32>( 0.04), baseColor.rgb, metallic );
            var geometry:Geometry;
            geometry.normal=n;
            geometry.viewDir=normalize(systemUniform.cameraPosition - input.worldPos);
            geometry.position=input.worldPos;
            geometry.dotNV = saturate(dot(geometry.normal, geometry.viewDir) );
            //light shading
            var reflectedLight=parseLights(geometry,material);
            var color=reflectedLight.directDiffuse+reflectedLight.directSpecular;
            //IBL
            #if ${defines.USE_IBL && defines.HAS_UV}
                var reflectedLightDiffuse=indirectDiffuse_Physical(geometry,material);
                var reflectedLightSpecular=indirectSpecular_Physical(geometry,material);
                color+=reflectedLightDiffuse.indirectDiffuse;
                color+=reflectedLightSpecular.indirectSpecular;
            #endif
            #if ${defines.USE_AOTEXTURE}
                let ao:f32 = textureSample(aoTexture,aoSampler, input.uv).r;
                color = mix(color, color * ao, materialUniform.occlusionStrength);
            #endif

            #if ${defines.USE_EMISSIVETEXTURE}
                let emissive:vec3<f32> = textureSample(emissiveTexture, emissiveSampler,input.uv).rgb ;
                color += emissive;
            #endif
       return vec4<f32>(color, baseColor.a);
    }
   `;
}

function Blur(defines) {
	return `
    struct FragInput {
        @location(0) uv: vec2<f32>,
    }
    struct BlurUniforms {
        direction:vec2<f32>,
    }
    fn gaussianPdf(x:f32, sigma:f32)->f32 {
        return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;
    }
    @group(0) @binding(0)  var<uniform> blurUniforms : BlurUniforms;
    @group(0) @binding({{tDiffuseBinding}}) var tDiffuse: texture_2d<f32>;
    @group(0) @binding({{tSamplerBinding}}) var tSampler: sampler;
    @fragment
    fn main(input:FragInput) -> @location(0) vec4<f32> {
        let invSize:vec2<f32> = vec2<f32>(1.0,1.0) / vec2<f32>(textureDimensions(tDiffuse));
        let fSigma:f32 =f32(${defines.SIGMA});
        var weightSum:f32 = gaussianPdf(0.0, fSigma);
        let baseColor=textureSample(tDiffuse, tSampler, input.uv);
        var diffuseSum:vec3<f32> = baseColor.rgb * weightSum;
        let uvOffset:vec2<f32> = blurUniforms.direction * invSize;
        for( var i : u32 = 1; i < ${defines.KERNEL_RADIUS};i = i + 1 ) {
            let x:f32 = f32(i);
            let w:f32 = gaussianPdf(x, fSigma);
            let sample1:vec3<f32>=textureSample(tDiffuse, tSampler, input.uv+ uvOffset*x).rgb;
            let sample2:vec3<f32>=textureSample(tDiffuse, tSampler, input.uv- uvOffset*x).rgb;
            diffuseSum =diffuseSum+ (sample2+sample2)* w;
            weightSum += 2.0 * w;
        }
        diffuseSum/=weightSum;
      return vec4<f32>(diffuseSum,baseColor.a);
    }
  `;
}

function LuminosityHigh(defines) {
	return `
    struct LuminosityUniforms{
        luminosityThreshold:f32,
        smoothWidth:f32,
        defaultColor:vec3<f32>,
        defaultOpacity:f32,
    }
    struct FragInput {
        @location(0) uv: vec2<f32>,
    };
    @group(0) @binding(0)  var<uniform> luminosityUniforms : LuminosityUniforms;
    @group(0) @binding({{tDiffuseBinding}}) var tDiffuse: texture_2d<f32>;
    @group(0) @binding({{tSamplerBinding}}) var tSampler: sampler;
    @fragment
    fn main(input:FragInput)-> @location(0) vec4<f32> {

        let texel:vec4<f32> = textureSample(tDiffuse, tSampler, input.uv);

        let luma:vec3<f32> = vec3<f32>( 0.299,0.587,0.114 );

        let v:f32 = dot( texel.xyz, luma );

        let outputColor:vec4<f32> = vec4<f32>( luminosityUniforms.defaultColor.rgb, luminosityUniforms.defaultOpacity );

        let alpha:f32 = smoothstep( luminosityUniforms.luminosityThreshold, luminosityUniforms.luminosityThreshold + luminosityUniforms.smoothWidth, v );

       return mix( outputColor, texel, alpha );
    }
    `;
}

function blendFrag(defines) {
	return `
    struct FragInput {
        @location(0) uv: vec2<f32>,
    };
    @group(0) @binding({{tDiffuseBinding}}) var tDiffuse: texture_2d<f32>;
    @group(0) @binding({{baseColorTextureBinding}}) var baseColorTexture: texture_2d<f32>;
    @group(0) @binding({{tSamplerBinding}}) var tSampler: sampler;
    @fragment
    fn main(input:FragInput) -> @location(0) vec4<f32> {
        let postColor:vec4<f32> = textureSample(tDiffuse, tSampler, input.uv);
        let baseColor:vec4<f32> = textureSample(baseColorTexture, tSampler, input.uv);
      return baseColor+postColor;
    }   
    `;
}

function reduceComma(shader) {
	//对所有的include处理
	const str = resolveIncludes(shader);
	return str;
}
const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
let currentDefines = {};
const shaders = {
	phong: {
		frag: phongFrag,
		vert: phongVert
	},
	color: {
		frag: colorFrag,
		vert: colorVert
	},
	pbr: {
		frag: pbrFrag,
		vert: pbrVert
	},
	skybox: {
		frag: skyBoxFrag,
		vert: skyBoxVert
	},
	resolve: {
		frag: quadFrag,
		vert: quadVert
	},
	pbr_mat: {
		frag: pbr_fs,
		vert: pbr_vs
	},
	blur: {
		frag: Blur,
		vert: quadVert
	},
	luminosityHigh: {
		frag: LuminosityHigh,
		vert: quadVert
	},
	blend: {
		frag: blendFrag,
		vert: quadVert
	}
};
function resolveIncludes(string) {
	return string.replace(includePattern, includeReplacer);
}
function includeReplacer(match, include) {
	const excute = ShaderChunk[include];
	if (excute === undefined) {
		throw new Error(`Can not resolve #include <${include}>`);
	}
	const result = excute(currentDefines);
	return resolveIncludes(result);
}
function getVertFrag(type, defines = {}) {
	const excuteFunc = shaders[type];
	currentDefines = defines;
	return {
		vert: reduceComma(excuteFunc.vert(currentDefines)),
		frag: reduceComma(excuteFunc.frag(currentDefines))
	};
}

class ShaderSource {
	constructor(options) {
		this.type = options.type;
		this.defines = options.defines;
		this.custom = defaultValue(options.custom, false);
		this.dirty = true;
		if (options.render) {
			this.render = true;
			this.vertEntryPoint = options.vertMain || "main";
			this.fragEntryPoint = options.fragMain || "main";
			this.vert = options.vert || undefined;
			this.frag = options.frag || undefined;
		} else {
			this.compute = options.compute || undefined;
			this.computeMain = options.computeMain || "main";
		}
	}
	get uid() {
		this._uid = this.type.concat(JSON.stringify(this.defines));
		return this._uid;
	}
	updateShaderStr() {
		if (this.custom) {
			if (this.compute) {
				this.compute = this.compute(this.defines);
			} else {
				this.vert = this.vert instanceof Function ? this.vert(this.defines) : this.vert;
				this.frag = this.frag instanceof Function ? this.frag(this.defines) : this.frag;
			}
		} else {
			const source = getVertFrag(this.type, this.defines);
			this.vert = source.vert;
			this.frag = source.frag;
		}
	}
	setDefines(defines) {
		this.dirty = true;
		this.defines = Object.assign(this.defines, defines);
	}
	createShaderModule(device) {
		if (this.dirty) {
			this.updateShaderStr();
			this.dirty = false;
		}
		if (this.render) {
			const vert = this.vert
				? device.createShaderModule({
						code: this.vert
				  })
				: undefined;
			const frag = this.frag
				? device.createShaderModule({
						code: this.frag
				  })
				: undefined;
			return { vert, frag };
		} else {
			const compute = device.createShaderModule({
				code: this.compute
			});
			return compute;
		}
	}
	static replaceMain(source, renamedMain) {
		renamedMain = `void ${renamedMain}()`;
		return source.replace(/void\s+main\s*\(\s*(?:void)?\s*\)/g, renamedMain);
	}
	static compileCustomShaderbackUp(template, defines) {
		const reg = /\{\{(\w+)\}\}/;
		if (reg.test(template)) {
			const name = reg.exec(template)[1];
			template = template.replace(reg, defines[name]);
			return ShaderSource.compileCustomShader(template, defines);
		}
		return template;
	}
	static compileCustomShader(template, defines) {
		const reg = /\${(\w+).(\w+)}/;
		if (reg.test(template)) {
			const regValue = reg.exec(template);
			const define = regValue[2];
			const name = regValue[0];
			template = template.replace(name, defines[define]);
			return ShaderSource.compileCustomShader(template, defines);
		}
		return template;
	}
}

class Material {
	constructor() {
		this.label = undefined;
		this.type = undefined;
		this.baseTexture = undefined;
		this.baseSampler = undefined;
		this._diffuse = new Color(0.0, 0.0, 0.0);
		this._opacity = 1.0;
		//Buffer
		this.shaderData = undefined;
		this.shaderSource = undefined;
		this.dirty = true;
		this._emissive = new Color(0.0, 0.0, 0);
		this._emissiveIntensity = 1.0;
		this._doubleSided = true;
		this.light = false;
		this.ready = false;
		this.init();
	}
	set wireframe(value) {
		this.renderState.primitive.topology = value ? PrimitiveTopology.LineList : PrimitiveTopology.TriangleList;
	}
	get doubleSided() {
		return this._doubleSided;
	}
	set doubleSided(value) {
		this._renderState.primitive.cullMode = value ? CullMode.None : CullMode.Back;
		this._doubleSided = value;
	}
	get renderState() {
		return this._renderState;
	}
	set renderState(value) {
		this._renderState = value;
	}
	get diffuse() {
		return this._diffuse;
	}
	set diffuse(v) {
		this._diffuse = v;
	}
	get emissive() {
		return this._emissive;
	}
	set emissive(v) {
		this._emissive = v;
	}
	get emissiveIntensity() {
		return this._emissiveIntensity;
	}
	set emissiveIntensity(v) {
		this._emissiveIntensity = v;
	}
	get opacity() {
		return this._opacity;
	}
	set opacity(v) {
		this._opacity = v;
	}
	onBeforeRender() {}
	onBeforeCompile() {}
	clone() {
		return null;
	}
	update(frameState, mesh) {}
	createShaderData(mesh, frameState) {
		if (this.shaderData) this.shaderData.destroy();
		this.shaderData = new ShaderData(this.type, 0);
		this.ready = true;
	}
	init() {
		//默认渲染状态
		const primitive = new Primitive();
		const target = new Target();
		const depthStencil = new DepthStencil();
		this._renderState = new RenderState();
		this._renderState.primitive = primitive;
		this._renderState.targets = [target];
		this._renderState.depthStencil = depthStencil;
	}
	destroy() {
		this.label = undefined;
		this.type = undefined;
		this.baseTexture = undefined;
		this.baseSampler = undefined;
		this.color = undefined;
	}
}

class ColorMaterial extends Material {
	constructor() {
		super();
		this.type = "color";
		this.shaderSource = new ShaderSource({
			type: this.type,
			render: true,
			defines: {}
		});
	}
	update(frameState, mesh) {
		if (!this.shaderData || this.dirty) this.createShaderData(mesh);
		const uniformBuffer = new UniformBuffer("color");
		uniformBuffer.setMatrix4("modelMatrix", () => {
			return null;
		});
		this.shaderData.setUniformBuffer("color", uniformBuffer);
	}
}

class Axes extends Mesh {
	constructor() {
		super();
		this.distanceToCamera = 10;
		this.material = new ColorMaterial();
		this.material.wireframe = true;
		this.init();
	}
	update(frameState) {
		this.updateMatrix();
		this.material.update(frameState, this);
		frameState.renderQueue.opaque.push(this);
	}
	init() {
		const position = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1];
		const colors = [1, 0, 0, 1, 1, 0.5, 0.5, 1, 0, 1, 0, 1, 0.5, 1, 0.5, 1, 0, 0, 1, 1, 0.5, 0.5, 1, 1];
		const indices = [0, 1, 2, 3, 4, 5];
		this.geometry = new Geometry({});
		this.geometry.setAttribute(new Float32Attribute("position", position, 3));
		this.geometry.setAttribute(new Float32Attribute("color", colors, 4));
		this.geometry.setIndice(indices);
		this.geometry.count = indices.length;
	}
}

class SkyBoxGeometry extends Geometry {
	constructor() {
		super({
			type: "skyBoxGeometry"
		});
		this.init();
	}
	update(frameState) {
		frameState.context;
	}
	init() {
		this.positions = [
			1.0,
			1.0,
			1.0,
			-1.0,
			1.0,
			1.0,
			1.0,
			-1.0,
			1.0,
			-1.0,
			-1.0,
			1.0,
			1.0,
			1.0,
			-1.0,
			-1.0,
			1.0,
			-1.0,
			1.0,
			-1.0,
			-1.0,
			-1.0,
			-1.0,
			-1.0 // 7
		];
		this.indices = [
			// PosX (Right)
			0, 2, 4, 6, 4, 2,
			// NegX (Left)
			5, 3, 1, 3, 5, 7,
			// PosY (Top)
			4, 1, 0, 1, 4, 5,
			// NegY (Bottom)
			2, 3, 6, 7, 6, 3,
			// PosZ (Front)
			0, 1, 2, 3, 2, 1,
			// NegZ (Back)
			6, 5, 4, 5, 6, 7
		];
		this.setAttribute(new Float32Attribute("position", this.positions, 3));
		this.setIndice(this.indices);
		this.count = this.indices.length;
	}
}

async function CubeTextureLoader(urls) {
	const promises = urls.map((src) => {
		const img = document.createElement("img");
		img.src = src;
		return img.decode().then(() => createImageBitmap(img));
	});
	const images = await Promise.all(promises);
	await Promise.all(images);
	const baseSampler = new Sampler({
		magFilter: "linear",
		minFilter: "linear"
	});
	const data = images.map((image, i) => {
		return {
			source: image,
			width: image.width,
			height: image.height,
			depth: 1,
			x: 0,
			y: 0,
			z: i
		};
	});
	const baseTexture = new Texture({
		size: {
			width: images[0].width,
			height: images[0].height,
			depth: 6
		},
		format: "rgba8unorm",
		usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
		sampler: baseSampler,
		data,
		viewFormats: "cube",
		mipLevelCount: 6,
		needMipMap: true
	});
	return {
		texture: baseTexture,
		sampler: baseSampler
	};
}

function returnTrue() {
	return true;
}
function destroyObject(object) {
	// message =message||"This object was destroyed, i.e., destroy() was called.";
	function throwOnDestroyed() {
		throw new Error("This object was destroyed, i.e., destroy() was called.");
	}
	for (const key in object) {
		if (typeof object[key] === "function") {
			object[key] = throwOnDestroyed;
		}
	}
	object.isDestroyed = returnTrue;
	return undefined;
}

class TextureCache {
	constructor() {
		this._numberOfTextures = 0;
		this._textures = new Map();
		this._numberOfTextures = 0;
		this._texturesToRelease = new Map();
		this.defaultSampler = new Sampler({
			magFilter: "linear",
			minFilter: "linear",
			addressModeU: "repeat",
			addressModeV: "repeat"
		});
	}
	get numberOfTextures() {
		return this._numberOfTextures;
	}
	getTexture(keyword) {
		const cachedTexture = this._textures.get(keyword);
		if (!defined(cachedTexture)) {
			return undefined;
		}
		// No longer want to release this if it was previously released.
		delete this._texturesToRelease[keyword];
		++cachedTexture.count;
		return cachedTexture.texture;
	}
	addTexture(keyword, texture) {
		const cachedTexture = {
			texture: texture,
			count: 1
		};
		texture.finalDestroy = texture.destroy;
		const that = this;
		texture.destroy = function () {
			if (--cachedTexture.count === 0) {
				that._texturesToRelease.set(keyword, cachedTexture);
			}
		};
		this._textures.set(keyword, cachedTexture);
		++this._numberOfTextures;
	}
	releasedTextures() {
		this._texturesToRelease.forEach((cacheTexture) => {
			cacheTexture.texture?.finalDestroy();
			--this._numberOfTextures;
		});
		this._texturesToRelease.clear();
	}
	destroy() {
		this._textures.forEach((cachedTexture) => {
			cachedTexture.texture?.finalDestroy();
		});
		return destroyObject(this);
	}
}
const textureCache = new TextureCache();

class SkyBoxMaterial extends Material {
	constructor() {
		super();
		this.type = "skybox";
		this.shaderSource = new ShaderSource({
			type: this.type,
			render: true,
			defines: {}
		});
		this.loadFish = false;
		this.renderState.depthStencil.depthWriteEnabled = false;
		this.renderState.depthStencil.depthCompare = CompareFunction.LessEqual;
	}
	async loadTexture(urls) {
		const result = await CubeTextureLoader(urls);
		this.loadFish = true;
		textureCache.addTexture("specular", result.texture);
		this.baseTexture = result.texture;
		this.baseSampler = result.sampler;
	}
	update(frameState, mesh) {
		if (!this.loadFish) return;
		if (!this.shaderData) {
			this.createShaderData(mesh);
		}
	}
	createShaderData(mesh) {
		super.createShaderData(mesh);
		const uniformBuffer = new UniformBuffer("skybox");
		uniformBuffer.setMatrix4("modelMatrix", () => {
			return null;
		});
		this.shaderData.setUniformBuffer("skybox", uniformBuffer);
		this.shaderData.setTexture("baseTexture", this.baseTexture);
		this.shaderData.setSampler("baseSampler", this.baseSampler);
	}
}

class SkyBox extends Mesh {
	constructor(urls) {
		super();
		this.distanceToCamera = 10;
		this.material = new SkyBoxMaterial();
		if (urls) this.material.loadTexture(urls);
		this.geometry = new SkyBoxGeometry();
		this.isSkyBox = true;
	}
	update(frameState) {
		this.updateMatrix();
		this.geometry.update(frameState);
		this.material.update(frameState, this);
		frameState.renderQueue.pre.push(this);
	}
}

/**
 * Two times PI.
 * @constant {number}
 */
function createBox(options) {
	options = options || {};
	let dimensions = options.dimensions || [1, 1, 1];
	let position = options.position || [-dimensions[0] / 2, -dimensions[1] / 2, -dimensions[2] / 2];
	let x = position[0];
	let y = position[1];
	let z = position[2];
	let width = dimensions[0];
	let height = dimensions[1];
	let depth = dimensions[2];
	let fbl = { x: x, y: y, z: z + depth };
	let fbr = { x: x + width, y: y, z: z + depth };
	let ftl = { x: x, y: y + height, z: z + depth };
	let ftr = { x: x + width, y: y + height, z: z + depth };
	let bbl = { x: x, y: y, z: z };
	let bbr = { x: x + width, y: y, z: z };
	let btl = { x: x, y: y + height, z: z };
	let btr = { x: x + width, y: y + height, z: z };
	let positions = [
		//front
		fbl.x,
		fbl.y,
		fbl.z,
		fbr.x,
		fbr.y,
		fbr.z,
		ftl.x,
		ftl.y,
		ftl.z,
		ftl.x,
		ftl.y,
		ftl.z,
		fbr.x,
		fbr.y,
		fbr.z,
		ftr.x,
		ftr.y,
		ftr.z,
		//right
		fbr.x,
		fbr.y,
		fbr.z,
		bbr.x,
		bbr.y,
		bbr.z,
		ftr.x,
		ftr.y,
		ftr.z,
		ftr.x,
		ftr.y,
		ftr.z,
		bbr.x,
		bbr.y,
		bbr.z,
		btr.x,
		btr.y,
		btr.z,
		//back
		fbr.x,
		bbr.y,
		bbr.z,
		bbl.x,
		bbl.y,
		bbl.z,
		btr.x,
		btr.y,
		btr.z,
		btr.x,
		btr.y,
		btr.z,
		bbl.x,
		bbl.y,
		bbl.z,
		btl.x,
		btl.y,
		btl.z,
		//left
		bbl.x,
		bbl.y,
		bbl.z,
		fbl.x,
		fbl.y,
		fbl.z,
		btl.x,
		btl.y,
		btl.z,
		btl.x,
		btl.y,
		btl.z,
		fbl.x,
		fbl.y,
		fbl.z,
		ftl.x,
		ftl.y,
		ftl.z,
		//top
		ftl.x,
		ftl.y,
		ftl.z,
		ftr.x,
		ftr.y,
		ftr.z,
		btl.x,
		btl.y,
		btl.z,
		btl.x,
		btl.y,
		btl.z,
		ftr.x,
		ftr.y,
		ftr.z,
		btr.x,
		btr.y,
		btr.z,
		//bottom
		bbl.x,
		bbl.y,
		bbl.z,
		bbr.x,
		bbr.y,
		bbr.z,
		fbl.x,
		fbl.y,
		fbl.z,
		fbl.x,
		fbl.y,
		fbl.z,
		bbr.x,
		bbr.y,
		bbr.z,
		fbr.x,
		fbr.y,
		fbr.z
	];
	let uvs = [
		//front
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//right
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//back
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//left
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//top
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//bottom
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1
	];
	let normals = [
		// front
		0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
		// right
		1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
		// back
		0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
		// left
		-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
		// top
		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
		// bottom
		0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0
	];
	return {
		positions: positions,
		normals: normals,
		uvs: uvs
	};
}
function createSphere(options) {
	options = options || {};
	let longBands = options.longBands || 32;
	let latBands = options.latBands || 32;
	let radius = options.radius || 1;
	let lat_step = Math.PI / latBands;
	let long_step = (2 * Math.PI) / longBands;
	let num_positions = longBands * latBands * 4;
	let num_indices = longBands * latBands * 6;
	let lat_angle, long_angle;
	let positions = new Array(num_positions * 3);
	let normals = new Array(num_positions * 3);
	let uvs = new Array(num_positions * 2);
	let indices = new Array(num_indices);
	let x1, x2, x3, x4, y1, y2, z1, z2, z3, z4, u1, u2, v1, v2;
	let i, j;
	let k = 0,
		l = 0;
	let vi, ti;
	for (i = 0; i < latBands; i++) {
		lat_angle = i * lat_step;
		y1 = Math.cos(lat_angle);
		y2 = Math.cos(lat_angle + lat_step);
		for (j = 0; j < longBands; j++) {
			long_angle = j * long_step;
			x1 = Math.sin(lat_angle) * Math.cos(long_angle);
			x2 = Math.sin(lat_angle) * Math.cos(long_angle + long_step);
			x3 = Math.sin(lat_angle + lat_step) * Math.cos(long_angle);
			x4 = Math.sin(lat_angle + lat_step) * Math.cos(long_angle + long_step);
			z1 = Math.sin(lat_angle) * Math.sin(long_angle);
			z2 = Math.sin(lat_angle) * Math.sin(long_angle + long_step);
			z3 = Math.sin(lat_angle + lat_step) * Math.sin(long_angle);
			z4 = Math.sin(lat_angle + lat_step) * Math.sin(long_angle + long_step);
			u1 = 1 - j / longBands;
			u2 = 1 - (j + 1) / longBands;
			v1 = 1 - i / latBands;
			v2 = 1 - (i + 1) / latBands;
			vi = k * 3;
			ti = k * 2;
			positions[vi] = x1 * radius;
			positions[vi + 1] = y1 * radius;
			positions[vi + 2] = z1 * radius; //v0
			positions[vi + 3] = x2 * radius;
			positions[vi + 4] = y1 * radius;
			positions[vi + 5] = z2 * radius; //v1
			positions[vi + 6] = x3 * radius;
			positions[vi + 7] = y2 * radius;
			positions[vi + 8] = z3 * radius; // v2
			positions[vi + 9] = x4 * radius;
			positions[vi + 10] = y2 * radius;
			positions[vi + 11] = z4 * radius; // v3
			normals[vi] = x1;
			normals[vi + 1] = y1;
			normals[vi + 2] = z1;
			normals[vi + 3] = x2;
			normals[vi + 4] = y1;
			normals[vi + 5] = z2;
			normals[vi + 6] = x3;
			normals[vi + 7] = y2;
			normals[vi + 8] = z3;
			normals[vi + 9] = x4;
			normals[vi + 10] = y2;
			normals[vi + 11] = z4;
			uvs[ti] = u1;
			uvs[ti + 1] = v1;
			uvs[ti + 2] = u2;
			uvs[ti + 3] = v1;
			uvs[ti + 4] = u1;
			uvs[ti + 5] = v2;
			uvs[ti + 6] = u2;
			uvs[ti + 7] = v2;
			indices[l] = k;
			indices[l + 1] = k + 1;
			indices[l + 2] = k + 2;
			indices[l + 3] = k + 2;
			indices[l + 4] = k + 1;
			indices[l + 5] = k + 3;
			k += 4;
			l += 6;
		}
	}
	return {
		positions: positions,
		normals: normals,
		uvs: uvs,
		indices: indices
	};
}

class SphereGeometry extends Geometry {
	constructor(radius) {
		super({
			type: "sphereGeometry"
		});
		this.defines = {
			HAS_NORMAL: true
		};
		this.radius = radius;
		this.init();
	}
	init() {
		const { positions, normals, uvs, indices } = createSphere({ radius: this.radius });
		this.positions = positions;
		this.normals = normals;
		this.uvs = uvs;
		this.indices = indices;
		this.computeBoundingSphere(this.positions);
		this.setAttribute(new Float32Attribute("position", this.positions, 3));
		this.setAttribute(new Float32Attribute("normal", this.normals, 3));
		this.setAttribute(new Float32Attribute("uv", this.uvs, 2));
		this.setIndice(this.indices);
		this.count = this.indices.length;
	}
}

class BoxGeometry extends Geometry {
	constructor(width = 10, height = 10, depth = 10) {
		super({
			type: "boxGeometry"
		});
		this.width = width;
		this.height = height;
		this.depth = depth;
		this.defines = {
			HAS_NORMAL: true
		};
		this.init();
	}
	init() {
		//generate pos uv normal so on
		const { positions, normals, uvs } = createBox({
			dimensions: [this.depth, this.width, this.height]
		});
		this.positions = positions;
		this.normals = normals;
		this.uvs = uvs;
		this.computeBoundingSphere(this.positions);
		this.setAttribute(new Float32Attribute("position", this.positions, 3));
		this.setAttribute(new Float32Attribute("normal", this.normals, 3));
		this.setAttribute(new Float32Attribute("uv", this.uvs, 2));
		this.count = 36;
	}
	update(frameState) {}
}

class TorusKnotGeometry extends Geometry {
	constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {
		super({
			type: "torusKnotGeometry"
		});
		this.defines = {
			HAS_NORMAL: true
		};
		this.radius = radius;
		this.tube = tube;
		this.tubularSegments = tubularSegments;
		this.radialSegments = radialSegments;
		this.p = p;
		this.q = q;
		this.indices = [];
		this.positions = [];
		this.normals = [];
		this.uvs = [];
		this.createGeometry();
		this.computeBoundingSphere(this.positions);
		this.init();
	}
	update(frameState) {
		frameState.context;
	}
	init() {
		this.setAttribute(new Float32Attribute("position", this.positions, 3));
		this.setAttribute(new Float32Attribute("normal", this.normals, 3));
		this.setAttribute(new Float32Attribute("uv", this.uvs, 2));
		this.setIndice(this.indices);
		this.count = this.indices.length;
	}
	createGeometry() {
		const tubularSegments = Math.floor(this.tubularSegments);
		const radialSegments = Math.floor(this.radialSegments);
		// helper variables
		const vertex = new Vector3();
		const normal = new Vector3();
		const P1 = new Vector3();
		const P2 = new Vector3();
		const B = new Vector3();
		const T = new Vector3();
		const N = new Vector3();
		// generate vertices, normals and uvs
		for (let i = 0; i <= tubularSegments; ++i) {
			// the radian "u" is used to calculate the position on the torus curve of the current tubular segment
			const u = (i / tubularSegments) * this.p * Math.PI * 2;
			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
			calculatePositionOnCurve(u, this.p, this.q, this.radius, P1);
			calculatePositionOnCurve(u + 0.01, this.p, this.q, this.radius, P2);
			// calculate orthonormal basis
			Vector3.subtract(P2, P1, T);
			// T.subVectors( P2, P1 );
			Vector3.add(P2, P1, N);
			// N.addVectors( P2, P1 );
			Vector3.cross(T, N, B);
			//B.crossVectors( T, N );
			Vector3.cross(B, T, N);
			// N.crossVectors( B, T );
			// normalize B, N. T can be ignored, we don't use it
			B.normalize();
			N.normalize();
			for (let j = 0; j <= radialSegments; ++j) {
				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
				const v = (j / radialSegments) * Math.PI * 2;
				const cx = -this.tube * Math.cos(v);
				const cy = this.tube * Math.sin(v);
				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve
				vertex.x = P1.x + (cx * N.x + cy * B.x);
				vertex.y = P1.y + (cx * N.y + cy * B.y);
				vertex.z = P1.z + (cx * N.z + cy * B.z);
				this.positions.push(vertex.x, vertex.y, vertex.z);
				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
				Vector3.subtract(vertex, P1, normal);
				normal.normalize();
				this.normals.push(normal.x, normal.y, normal.z);
				// uv
				this.uvs.push(i / tubularSegments);
				this.uvs.push(j / radialSegments);
			}
		}
		// generate indices
		for (let j = 1; j <= tubularSegments; j++) {
			for (let i = 1; i <= radialSegments; i++) {
				// indices
				const a = (radialSegments + 1) * (j - 1) + (i - 1);
				const b = (radialSegments + 1) * j + (i - 1);
				const c = (radialSegments + 1) * j + i;
				const d = (radialSegments + 1) * (j - 1) + i;
				// faces
				this.indices.push(a, b, d);
				this.indices.push(b, c, d);
			}
		}
	}
}
function calculatePositionOnCurve(u, p, q, radius, position) {
	const cu = Math.cos(u);
	const su = Math.sin(u);
	const quOverP = (q / p) * u;
	const cs = Math.cos(quOverP);
	position.x = radius * (2 + cs) * 0.5 * cu;
	position.y = radius * (2 + cs) * su * 0.5;
	position.z = radius * Math.sin(quOverP) * 0.5;
}

class PlaneGeometry extends Geometry {
	constructor(width = 10, height = 10) {
		super({
			type: "planeGeometry"
		});
		this.width = width;
		this.height = height;
		this.defines = {
			HAS_NORMAL: true
		};
		this.init();
	}
	init() {
		//generate pos uv normal so on
		const { indices, normals, uvs, vertices } = this.createGrid(this.width, this.height);
		this.positions = vertices;
		this.normals = normals;
		this.uvs = uvs;
		this.indices = indices;
		this.computeBoundingSphere(this.positions);
		this.setAttribute(new Float32Attribute("position", this.positions, 3));
		this.setAttribute(new Float32Attribute("normal", this.normals, 3));
		this.setAttribute(new Float32Attribute("uv", this.uvs, 2));
		this.setIndice(indices);
		this.count = this.indices.length;
		// this.count = 36;
	}
	update(frameState) {}
	createGrid(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
		const width_half = width / 2;
		const height_half = height / 2;
		const gridX = Math.floor(widthSegments);
		const gridY = Math.floor(heightSegments);
		const gridX1 = gridX + 1;
		const gridY1 = gridY + 1;
		const segment_width = width / gridX;
		const segment_height = height / gridY;
		//
		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];
		for (let iy = 0; iy < gridY1; iy++) {
			const y = iy * segment_height - height_half;
			for (let ix = 0; ix < gridX1; ix++) {
				const x = ix * segment_width - width_half;
				vertices.push(x, -y, 0);
				normals.push(0, 0, 1);
				uvs.push(ix / gridX);
				uvs.push(1 - iy / gridY);
			}
		}
		for (let iy = 0; iy < gridY; iy++) {
			for (let ix = 0; ix < gridX; ix++) {
				const a = ix + gridX1 * iy;
				const b = ix + gridX1 * (iy + 1);
				const c = ix + 1 + gridX1 * (iy + 1);
				const d = ix + 1 + gridX1 * iy;
				indices.push(a, b, d);
				indices.push(b, c, d);
			}
		}
		return { indices, normals, uvs, vertices };
	}
}

class BlinnPhongMaterial extends Material {
	constructor() {
		super();
		this.type = "phong";
		this.color = new Color(1.0, 0.0, 0.0);
		this.shaderSource = new ShaderSource({
			type: this.type,
			render: true,
			defines: {
				materialPhong: true
			}
		});
		this.light = true;
		this.specular = new Color(1.0, 1.0, 1.0);
		this.shininess = 30.0;
		this.baseTexture = undefined;
		this.baseSampler = undefined;
	}
	update(frameState, mesh) {
		if (!this.shaderData || this.dirty) this.createShaderData(mesh);
	}
	createShaderData(mesh) {
		super.createShaderData(mesh);
		const uniformBuffer = new UniformBuffer("phong");
		uniformBuffer.setMatrix4("modelMatrix", () => {
			return null;
		});
		uniformBuffer.setColor("color", this);
		uniformBuffer.setFloat("opacity", this);
		uniformBuffer.setMatrix4("normalMtrix", () => {
			return mesh.normalMatrix;
		});
		uniformBuffer.setColor("emissive", this);
		uniformBuffer.setFloat("shininess", this);
		uniformBuffer.setColor("specular", this);
		this.shaderData.setUniformBuffer("phong", uniformBuffer);
		if (this.baseTexture) {
			this.shaderData.setDefine("USE_COLORTEXTURE", true);
			this.shaderData.setTexture("baseColorTexture", this.baseTexture);
			this.shaderData.setSampler("baseColorSampler", this.baseSampler || textureCache.defaultSampler);
		}
		if (this.normalTexture) {
			this.shaderData.setDefine("USE_NORMALTEXTURE", true);
			this.shaderData.setTexture("normalTexture", this.normalTexture);
			this.shaderData.setSampler("normalSampler", this.normalSampler || textureCache.defaultSampler);
		}
	}
	destroy() {}
}

class PbrMaterial extends Material {
	get roughness() {
		return this._roughness;
	}
	set roughness(value) {
		this._roughness = value;
	}
	get metalness() {
		return this._metalness;
	}
	set metalness(v) {
		this._metalness = v;
	}
	get aoTextureIntensity() {
		return this._aoTextureIntensity;
	}
	set aoTextureIntensity(v) {
		this._aoTextureIntensity = v;
	}
	get normalScale() {
		if (this.renderState && this.renderState.primitive) {
			if (this.renderState.primitive.cullMode == CullMode.Back) {
				return Vector2.negate(this._normalScale, new Vector2());
			}
		}
		return this._normalScale;
	}
	set normalScale(v) {
		this._normalScale = v;
	}
	set IBLRender(value) {
		this._IBLRender = value;
		this.shaderSource.setDefines({
			USE_IBL: this._IBLRender
		});
		this.dirty = true;
	}
	constructor() {
		super();
		this.type = "pbr_mat";
		this._roughness = 0.1;
		this._metalness = 0.1;
		this._aoTextureIntensity = 1.0;
		this.light = true;
		this._normalScale = new Vector2(1, 1);
		this._IBLRender = true;
		this.shaderSource = new ShaderSource({
			type: this.type,
			render: true,
			defines: {
				materialPbr: true,
				USE_IBL: this._IBLRender
			}
		});
	}
	update(frameState, mesh) {
		if (!textureCache.getTexture("specular")) return;
		if (!this.shaderData || this.dirty) {
			this.createShaderData(mesh, frameState);
		}
	}
	createShaderData(mesh, frameState) {
		super.createShaderData(mesh);
		const uniformBuffer = new UniformBuffer("pbr");
		uniformBuffer.setMatrix4("modelMatrix", () => {
			return mesh.modelMatrix;
		});
		uniformBuffer.setColor("color", this);
		uniformBuffer.setFloat("opacity", this);
		uniformBuffer.setMatrix4("normalMtrix", () => {
			return mesh.normalMatrix;
		});
		uniformBuffer.setColor("emissive", this);
		uniformBuffer.setFloat("metalness", this);
		uniformBuffer.setFloat("roughness", this);
		this.shaderData.setUniformBuffer("pbr", uniformBuffer);
		this.specularEnvTexture = textureCache.getTexture("specular");
		if (this.baseTexture) {
			this.shaderData.setDefine("USE_TEXTURE", true);
			this.shaderData.setTexture("baseColorTexture", this.baseTexture);
			this.shaderData.setSampler("baseColorSampler", this.baseSampler || textureCache.defaultSampler);
		}
		if (this.metalnessRoughnessTexture) {
			this.shaderData.setDefine("USE_METALNESSTEXTURE", true);
			this.shaderData.setTexture("metalnessRoughnessTexture", this.metalnessRoughnessTexture);
			this.shaderData.setSampler(
				"metalnessRoughnessSampler",
				this.metalnessRoughnessSampler || textureCache.defaultSampler
			);
		}
		if (this.normalTexture) {
			uniformBuffer.setFloatVec2("normalScale", this);
			this.shaderData.setDefine("USE_NORMALTEXTURE", true);
			this.shaderData.setTexture("normalTexture", this.normalTexture);
			this.shaderData.setSampler("normalSampler", this.normalSampler || textureCache.defaultSampler);
		}
		if (this.aoTexture) {
			this.shaderData.setDefine("USE_AOTEXTURE", true);
			this.shaderData.setTexture("aoTexture", this.aoTexture);
			this.shaderData.setSampler("aoSampler", this.aoSampler || textureCache.defaultSampler);
			uniformBuffer.setFloat("aoTextureIntensity", this);
		}
		if (this.emissiveTexture) {
			this.shaderData.setDefine("USE_EMISSIVETEXTURE", true);
			this.shaderData.setTexture("emissiveTexture", this.emissiveTexture);
			this.shaderData.setSampler("emissiveSampler", this.emissiveSampler || textureCache.defaultSampler);
		}
		if (this.specularEnvTexture && this._IBLRender) {
			this.shaderData.setTexture("specularEnvTexture", this.specularEnvTexture);
			this.shaderData.setSampler("specularEnvSampler", this.specularEnvSampler || textureCache.defaultSampler);
		}
	}
	destroy() {}
}

const uniformArrayNames = ["float-array", "vec2-array", "vec3-array", "vec4-array"];
function checkContainFloatType(uniforms) {
	let result = 0;
	let hasArraytype = false;
	const uniformsNames = Object.getOwnPropertyNames(uniforms);
	uniformsNames.map((uniformsName) => {
		if (uniforms[uniformsName].type == "texture" || uniforms[uniformsName].type == "sampler") {
			result += 0;
		} else {
			if (
				uniformArrayNames.find((name) => {
					return name === uniforms[uniformsName].type;
				})
			) {
				hasArraytype = true;
			} else {
				result += 1;
			}
		}
	});
	return {
		hasFloat: result,
		hasArraytype
	};
}
function addUniformToShaderData(name, uniform, uniforms, shaderData, uniformBuffer) {
	switch (uniform.type) {
		case "float":
			uniformBuffer.setFloat(name, () => {
				return uniforms[name].value;
			});
			break;
		case "vec2":
			uniformBuffer.setFloatVec2(name, () => {
				return uniforms[name].value;
			});
			break;
		case "vec3":
			uniformBuffer.setFloatVec3(name, () => {
				return uniforms[name].value;
			});
			break;
		case "color":
			uniformBuffer.setColor(name, () => {
				return uniforms[name].value;
			});
			break;
		case "vec4":
			uniformBuffer.setFloatVec4(name, () => {
				return uniforms[name].value;
			});
		case "mat2":
			uniformBuffer.setMatrix2(name, () => {
				return uniforms[name].value;
			});
			break;
		case "mat3":
			uniformBuffer.setMatrix3(name, () => {
				return uniforms[name].value;
			});
		case "mat4":
			uniformBuffer.setMatrix4(name, () => {
				return uniforms[name].value;
			});
			break;
		case "float-array":
			uniformBuffer.setFloatArray(
				name,
				() => {
					return uniforms[name].value;
				},
				uniforms[name].value.length
			);
			break;
		case "vec2-array":
			uniformBuffer.setVec2Array(
				name,
				() => {
					return uniforms[name].value;
				},
				uniforms[name].value.length
			);
			break;
		case "vec3-array":
			uniformBuffer.setVec3Array(
				name,
				() => {
					return uniforms[name].value;
				},
				uniforms[name].value.length
			);
			break;
		case "vec4-array":
			uniformBuffer.setVec4Array(
				name,
				() => {
					return uniforms[name].value;
				},
				uniforms[name].value.length
			);
			break;
		case "texture":
			shaderData.setTexture(name, () => {
				return uniforms[name].value;
			});
			break;
		case "sampler":
			shaderData.setSampler(name, () => {
				return uniforms[name].value;
			});
			break;
		default:
			throw new Error("not match unifrom type");
	}
}

class ShaderMaterial extends Material {
	constructor(options) {
		super();
		const { type, frag, vert, defines, light } = options;
		this.type = type;
		this.shaderMaterialParms = options;
		this.shaderSource = new ShaderSource({
			type,
			frag,
			vert,
			custom: true,
			defines: defaultValue(defines, {}),
			render: true
		});
		this.uniforms = options.uniforms;
		this.uniformBuffer = undefined;
		this.light = light || false;
	}
	update(frameState, mesh) {
		if (!this.shaderData || this.dirty) this.createShaderData(mesh);
	}
	clone() {
		return new ShaderMaterial(this.shaderMaterialParms);
	}
	createShaderData(mesh) {
		super.createShaderData(mesh);
		let result = checkContainFloatType(this.uniforms);
		if (result.hasFloat) {
			this.uniformBuffer = result.hasArraytype
				? new UniformBuffer(this.type, "read-only-storage", BufferUsage.Storage | BufferUsage.CopyDst)
				: new UniformBuffer(this.type);
			this.shaderData.setUniformBuffer(this.type, this.uniformBuffer);
		}
		const uniformsNames = Object.getOwnPropertyNames(this.uniforms);
		uniformsNames.map((uniformsName) => {
			addUniformToShaderData(
				uniformsName,
				this.uniforms[uniformsName],
				this.uniforms,
				this.shaderData,
				this.uniformBuffer
			);
		});
	}
}

class EventDispatcher {
	constructor() {}
	addEventListener(type, listener) {
		if (this._listeners === undefined) this._listeners = {};
		const listeners = this._listeners;
		if (listeners[type] === undefined) {
			listeners[type] = [];
		}
		if (listeners[type].indexOf(listener) === -1) {
			listeners[type].push(listener);
		}
	}
	hasEventListener(type, listener) {
		if (this._listeners === undefined) return false;
		const listeners = this._listeners;
		return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
	}
	removeEventListener(type, listener) {
		if (this._listeners === undefined) return;
		const listeners = this._listeners;
		const listenerArray = listeners[type];
		if (listenerArray !== undefined) {
			const index = listenerArray.indexOf(listener);
			if (index !== -1) {
				listenerArray.splice(index, 1);
			}
		}
	}
	dispatchEvent(event) {
		if (this._listeners === undefined) return;
		const listeners = this._listeners;
		const listenerArray = listeners[event.type];
		if (listenerArray !== undefined) {
			event.target = this;
			const array = listenerArray.slice(0);
			for (let i = 0, l = array.length; i < l; i++) {
				array[i].call(this, event);
			}
			event.target = null;
		}
	}
}

class RenderQueue {
	constructor() {
		this.pre = [];
		this.opaque = [];
		this.transparent = [];
		this.computes = [];
	}
	sort() {
		RenderQueue.sort(this.opaque, 0, this.opaque.length, RenderQueue._compareFromNearToFar);
		RenderQueue.sort(this.transparent, 0, this.transparent.length, RenderQueue._compareFromFarToNear);
	}
	opaqueRender(camera, context, passEncoder, replaceMaterial, commandSubType) {
		this.opaque.map((mesh) => {
			if (!mesh.ready) return;
			mesh.beforeRender();
			RenderQueue.excuteCommand(
				mesh.getDrawCommand(replaceMaterial, commandSubType),
				context,
				passEncoder,
				camera
			);
			mesh.afterRender();
		});
	}
	transparentRender(camera, context, passEncoder, replaceMaterial, commandSubType) {
		this.transparent.map((mesh) => {
			if (!mesh.ready) return;
			mesh.beforeRender();
			RenderQueue.excuteCommand(
				mesh.getDrawCommand(replaceMaterial, commandSubType),
				context,
				passEncoder,
				camera
			);
			mesh.afterRender();
		});
	}
	computeRender(context, passEncoder) {
		this.computes.map((compute) => {
			RenderQueue.excuteCompute(compute.getCommand(), context, passEncoder);
		});
	}
	preRender(camera, context, passEncoder, replaceMaterial) {
		this.pre.map((mesh) => {
			if (!mesh.ready) return;
			mesh.beforeRender();
			RenderQueue.excuteCommand(mesh.getDrawCommand(), context, passEncoder, camera);
			mesh.afterRender();
		});
	}
	static excuteCommand(command, context, passEncoder, camera) {
		if (command.renderTarget) {
			const currentRenderPassEncoder = command.renderTarget.beginRenderPassEncoder(context);
			context.render(command, currentRenderPassEncoder, camera);
			command.renderTarget.endRenderPassEncoder();
		} else {
			context.render(command, passEncoder, camera);
		}
	}
	static excuteCompute(command, context, passEncoder) {
		context.compute(command, passEncoder);
	}
	reset() {
		this.pre = [];
		this.opaque = [];
		this.transparent = [];
		this.computes = [];
	}
	static _compareFromNearToFar(a, b) {
		return a.priority - b.priority || a.distanceToCamera - b.distanceToCamera;
	}
	static _compareFromFarToNear(a, b) {
		return a.priority - b.priority || b.distanceToCamera - a.distanceToCamera;
	}
	//according to camera distance
	static sort(insatnce, from, to, compareFunc) {
		RenderQueue._quickSort(insatnce, from, to, compareFunc);
	}
	//from https://github.com/oasis-engine/engine/blob/main/packages/core/src/RenderPipeline/RenderQueue.ts
	static _quickSort(a, from, to, compareFunc) {
		while (true) {
			// Insertion sort is faster for short arrays.
			if (to - from <= 10) {
				RenderQueue._insertionSort(a, from, to, compareFunc);
				return;
			}
			const third_index = (from + to) >> 1;
			// Find a pivot as the median of first, last and middle element.
			let v0 = a[from];
			let v1 = a[to - 1];
			let v2 = a[third_index];
			const c01 = compareFunc(v0, v1);
			if (c01 > 0) {
				// v1 < v0, so swap them.
				const tmp = v0;
				v0 = v1;
				v1 = tmp;
			} // v0 <= v1.
			const c02 = compareFunc(v0, v2);
			if (c02 >= 0) {
				// v2 <= v0 <= v1.
				const tmp = v0;
				v0 = v2;
				v2 = v1;
				v1 = tmp;
			} else {
				// v0 <= v1 && v0 < v2
				const c12 = compareFunc(v1, v2);
				if (c12 > 0) {
					// v0 <= v2 < v1
					const tmp = v1;
					v1 = v2;
					v2 = tmp;
				}
			}
			// v0 <= v1 <= v2
			a[from] = v0;
			a[to - 1] = v2;
			const pivot = v1;
			let low_end = from + 1; // Upper bound of elements lower than pivot.
			let high_start = to - 1; // Lower bound of elements greater than pivot.
			a[third_index] = a[low_end];
			a[low_end] = pivot;
			// From low_end to i are elements equal to pivot.
			// From i to high_start are elements that haven't been compared yet.
			partition: for (let i = low_end + 1; i < high_start; i++) {
				let element = a[i];
				let order = compareFunc(element, pivot);
				if (order < 0) {
					a[i] = a[low_end];
					a[low_end] = element;
					low_end++;
				} else if (order > 0) {
					do {
						high_start--;
						if (high_start == i) break partition;
						const top_elem = a[high_start];
						order = compareFunc(top_elem, pivot);
					} while (order > 0);
					a[i] = a[high_start];
					a[high_start] = element;
					if (order < 0) {
						element = a[i];
						a[i] = a[low_end];
						a[low_end] = element;
						low_end++;
					}
				}
			}
			if (to - high_start < low_end - from) {
				this._quickSort(a, high_start, to, compareFunc);
				to = low_end;
			} else {
				this._quickSort(a, from, low_end, compareFunc);
				from = high_start;
			}
		}
	}
	static _insertionSort(a, from, to, compareFunc) {
		for (let i = from + 1; i < to; i++) {
			let j;
			const element = a[i];
			for (j = i - 1; j >= from; j--) {
				const tmp = a[j];
				const order = compareFunc(tmp, element);
				if (order > 0) {
					a[j + 1] = tmp;
				} else {
					break;
				}
			}
			a[j + 1] = element;
		}
	}
}

class FrameState {
	constructor(context) {
		this.context = context;
		this.renderQueue = new RenderQueue();
		this.geometryMemory = 0;
		this.textureMemory = 0;
		this.frameNumber = 0;
		this._defines = {};
		this.definesDirty = true;
	}
	get defines() {
		return this._defines;
	}
	set defines(value) {
		this.definesDirty = true;
		this._defines = combine(value, this._defines, false);
	}
	update(camera) {
		this.renderQueue.reset();
		this.cullingVolume = camera.getCullingVolume();
		this.frameNumber += 1;
	}
}

function createGuid() {
	// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
	return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
		const r = (Math.random() * 16) | 0;
		const v = c === "x" ? r : (r & 0x3) | 0x8;
		return v.toString(16);
	});
}

class PrimitiveManger {
	constructor() {
		this._list = [];
		this._guid = createGuid();
	}
	get length() {
		return this._list.length;
	}
	update(frameState, camera) {
		this._list.map((instance) => {
			instance.update(frameState, camera);
		});
	}
	add(instance, index) {
		if (this.contains(instance)) return;
		const hasIndex = defined(index);
		if (!defined(instance)) {
			throw new Error("instance is required.");
		}
		if (hasIndex) {
			if (index < 0) {
				throw new Error("index must be greater than or equal to zero.");
			} else if (index > this._list.length) {
				throw new Error("index must be less than or equal to the number of primitives.");
			}
		}
		const external = (instance._external = instance._external || {});
		const composites = (external._composites = external._composites || {});
		composites[this._guid] = {
			collection: this
		};
		if (!hasIndex) {
			this._list.push(instance);
		} else {
			this._list.splice(index, 0, instance);
		}
		return instance;
	}
	remove(instance) {
		if (this.contains(instance)) {
			const index = this._list.indexOf(instance);
			if (index !== -1) {
				this._list.splice(index, 1);
				delete instance._external._composites[this._guid];
				instance.destroy();
				return true;
			}
		}
		return false;
	}
	contains(instance) {
		return !!(
			defined(instance) &&
			instance._external &&
			instance._external._composites &&
			instance._external._composites[this._guid]
		);
	}
}

class Pass {
	constructor(context) {
		this.context = context;
	}
	render(frameState) {}
	beforeRender() {
		this.passRenderEncoder = this.renderTarget.beginRenderPassEncoder(this.context);
		if (this.computeTarget) this.passComputeEncoder = this.computeTarget.beginComputePassEncoder(this.context);
	}
	getColorTexture(index = 0) {
		return this.renderTarget.getColorTexture(index);
	}
	getDepthTexture() {
		return this.renderTarget.getDepthTexture();
	}
	afterRender() {
		this.renderTarget.endRenderPassEncoder();
		if (this.computeTarget) this.computeTarget.endComputePassEncoder();
	}
}

class RenderTarget {
	constructor(type, colorAttachments, depthAttachment, stencilAttachment, querySet) {
		this.type = type;
		this.colorAttachments = colorAttachments;
		this.depthAttachment = depthAttachment;
		this.stencilAttachment = stencilAttachment;
		this.querySet = querySet;
		this.renderEncoder = undefined;
		this.computeEncoder = undefined;
		this._renderPassDescriptor = undefined;
		this.commandEncoder = undefined;
		this.context = undefined;
	}
	get renderPassDescriptor() {
		this._renderPassDescriptor = this.getRenderPassDescriptor();
		return this._renderPassDescriptor;
	}
	getColorTexture(index = 0) {
		const colAtt = this.colorAttachments[index];
		if (colAtt) {
			return colAtt.texture;
		} else {
			return null;
		}
	}
	getDepthTexture() {
		if (this.depthAttachment) {
			return this.depthAttachment.texture;
		}
	}
	getRenderPassDescriptor() {
		this.checkSize();
		this.depthAttachment?.texture?.update(this.context);
		return {
			...(this.colorAttachments && {
				colorAttachments: this.colorAttachments.map((colorAttachment) => {
					colorAttachment?.texture?.update && colorAttachment?.texture?.update(this.context);
					return {
						view:
							//暂时这么写
							colorAttachment.texture.textureView || undefined,
						resolveTarget:
							colorAttachment.resolveTarget != undefined
								? colorAttachment.resolveTarget.textureView
								: undefined,
						clearValue: colorAttachment.value,
						loadOp: colorAttachment.op,
						storeOp: colorAttachment.storeOp
					};
				})
			}),
			...((this.depthAttachment || this.stencilAttachment) && {
				depthStencilAttachment: {
					view: this.depthAttachment?.texture?.textureView || undefined,
					depthLoadOp: this.depthAttachment?.op || "clear",
					depthClearValue: this.depthAttachment?.value || 1.0,
					depthStoreOp: this.depthAttachment?.storeOp || "store"
					// stencilLoadOp: this.stencilAttachment?.op || "clear",
					// stencilClearValue: this.stencilAttachment?.value || 0,
					// stencilStoreOp: this.stencilAttachment?.storeOp || "store",
				}
			})
		};
	}
	beginRenderPassEncoder(context) {
		if (!this.context) this.context = context;
		const { device } = this.context;
		this.commandEncoder = device.createCommandEncoder();
		this.renderEncoder = this.commandEncoder.beginRenderPass(this.renderPassDescriptor);
		return this.renderEncoder;
	}
	endRenderPassEncoder() {
		this.renderEncoder?.end();
		this.context.device.queue.submit([this.commandEncoder.finish()]);
		this.commandEncoder = null;
		this.renderEncoder = null;
	}
	beginComputePassEncoder(context) {
		if (!this.context) this.context = context;
		const { device } = this.context;
		this.commandEncoder = device.createCommandEncoder();
		this.computeEncoder = this.commandEncoder.beginComputePass();
		return this.computeEncoder;
	}
	endComputePassEncoder() {
		this.computeEncoder?.end();
		this.context.device.queue.submit([this.commandEncoder.finish()]);
		this.commandEncoder = null;
		this.renderEncoder = null;
	}
	checkSize() {
		const { width, height, depth } = this.context.presentationSize;
		if (this.depthAttachment.texture) {
			const size = this.depthAttachment?.texture?.textureProp?.size;
			if (width != size?.width || height != size?.height || depth != size?.depth) {
				this.depthAttachment.texture.setSize(width, height, depth);
			}
		}
		if (this.colorAttachments) {
			this.colorAttachments.forEach((colorAttachment) => {
				if (colorAttachment.texture) {
					const size = colorAttachment?.texture?.textureProp?.size;
					if (size && (width != size?.width || height != size?.height || depth != size?.depth))
						colorAttachment.texture.setSize(width, height, depth);
				}
			});
		}
	}
	destroy() {
		if (this.colorAttachments) {
			this.colorAttachments.forEach((colorAttachment) => {
				if (colorAttachment.texture) {
					colorAttachment.texture.destroy();
				}
			});
		}
		if (this.depthAttachment.texture) this.depthAttachment.texture.destroy();
	}
}

class BasicPass extends Pass {
	constructor(context) {
		super(context);
		this.init(context);
	}
	render(frameState, camera) {
		const { renderQueue } = frameState;
		renderQueue.sort();
		renderQueue.preRender(camera, this.context, this.passRenderEncoder);
		renderQueue.transparentRender(camera, this.context, this.passRenderEncoder);
		renderQueue.opaqueRender(camera, this.context, this.passRenderEncoder);
	}
	init(context) {
		this.createRenderTarget(context);
	}
	createRenderTarget(context) {
		const { width, height, depth } = this.context.presentationSize;
		const colorTexture = new Texture({
			label: "basicPassColor",
			size: { width, height, depth },
			format: this.context.presentationFormat,
			usage: TextureUsage.RenderAttachment | TextureUsage.TextureBinding
		});
		const depthTexture = new Texture({
			label: "basicPassDepth",
			size: { width, height, depth },
			format: TextureFormat.Depth24Plus,
			usage: TextureUsage.RenderAttachment
		});
		const colorAttachment = new Attachment({ r: 0.0, g: 0.0, b: 0.0, a: 0.0 }, { texture: colorTexture });
		const depthAttachment = new Attachment(1.0, { texture: depthTexture });
		this.renderTarget = new RenderTarget("render", [colorAttachment], depthAttachment);
	}
}

class ShadowPass extends Pass {
	constructor(context) {
		super(context);
		this.init(context);
	}
	render(frameState, camera) {
		const { renderQueue, context } = frameState;
		const lights = context.lightManger.getAllLights();
		if (lights.length === 0) return;
		for (let i = 0; i < lights.length; i++) {
			const light = lights[i];
			const shadow = light.shadow;
			if (!shadow) continue;
			// this._testTexture = context.lightManger._testTexture
			this.setRenderTarget(shadow);
			super.beforeRender();
			renderQueue.sort();
			// renderQueue.preRender(shadow.camera, this.context, this.passRenderEncoder);
			renderQueue.transparentRender(
				shadow.camera,
				this.context,
				this.passRenderEncoder,
				this.shadowMaterial,
				CommandSubType.Shadow
			);
			renderQueue.opaqueRender(
				shadow.camera,
				this.context,
				this.passRenderEncoder,
				this.shadowMaterial,
				CommandSubType.Shadow
			);
			super.afterRender();
		}
		context.lightManger.updateLightShadow();
	}
	// getDepthTexture(): Texture {
	// 	return this._testTexture;
	// }
	setRenderTarget(shadow) {
		this.renderTarget.depthAttachment.texture = shadow.getShadowMapTexture();
	}
	init(context) {
		this.createRenderTarget(context);
		this.createShadowMaterial();
	}
	createRenderTarget(context) {
		const depthAttachment = new Attachment(1.0, { texture: undefined });
		this.renderTarget = new RenderTarget("render", [], depthAttachment);
	}
	createShadowMaterial() {
		const colorShader = getVertFrag("color", {
			colorBinding: 0,
			cameraBinding: 0,
			positionLocation: 0,
			colorLocation: 1
		});
		this.shadowMaterial = new ShaderMaterial({
			type: "shadowMaterial",
			uniforms: {
				modelMatrix: { type: "mat4", value: null }
			},
			vert: colorShader.vert,
			frag: undefined,
			light: true
		});
	}
}

class ForwardRenderLine {
	constructor(context) {
		this.context = context;
		this.basicPass = new BasicPass(context);
		this.shadowPass = new ShadowPass(context);
		// const bloom=new BloomPostEffect({
		// 	width,
		// 	height,
		// 	strength:0.3,
		// 	radius:0.3,
		// 	threshold:0.5
		// });
		// this.postEffectCollection.add(bloom)
	}
	getOutputTexture() {
		return this.basicPass.getColorTexture(0);
		// return this.shadowPass.getDepthTexture()
	}
	render(frameState, camera) {
		this.shadowPass.render(frameState, camera);
		this.basicPass.beforeRender();
		this.basicPass.render(frameState, camera);
		this.basicPass.afterRender();
	}
	destroy() {
		this.basicPass = undefined;
	}
}

class ResolveFrame {
	constructor() {
		this.geometry = new Geometry({});
		this.geometry.setAttribute(
			new Float32Attribute("position", [-1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0], 2)
		);
		this.geometry.count = 6;
		const shader = getVertFrag("resolve", { positionLocation: 0 });
		this.material = new ShaderMaterial({
			type: "resolve",
			frag: shader.frag,
			vert: shader.vert,
			uniforms: {
				texture: {
					type: "texture",
					value: undefined
				},
				sampler: {
					type: "sampler",
					value: new Sampler({
						magFilter: "linear",
						minFilter: "linear"
					})
				}
			}
		});
		this.quadMesh = new Mesh(this.geometry, this.material);
	}
	render(context, colorTexture) {
		if (!this.canvasRenderTarget) this.initRenderTarget(context);
		// this.material
		this.material.uniforms.texture.value = colorTexture;
		//@ts-ignore
		this.canvasRenderTarget.colorAttachments[0].texture = {
			textureView: context.context.getCurrentTexture().createView()
		};
		this.material.update(undefined, this.quadMesh);
		const drawComand = this.quadMesh.getDrawCommand();
		const currentRenderPassEncoder = this.canvasRenderTarget.beginRenderPassEncoder(context);
		context.render(drawComand, currentRenderPassEncoder);
		this.canvasRenderTarget.endRenderPassEncoder();
	}
	initRenderTarget(context) {
		const { width, height, depth } = context.presentationSize;
		const colorAttachment = new Attachment(
			{ r: 0.0, g: 0.0, b: 0.0, a: 0 },
			{
				//@ts-ignore
				texture: {
					textureView: undefined
				}
			}
		);
		const depthTexture = new Texture({
			label: "resolveDepth",
			size: { width, height, depth },
			format: TextureFormat.Depth24Plus,
			usage: TextureUsage.RenderAttachment
		});
		const depthAttachment = new Attachment(1.0, { texture: depthTexture });
		this.canvasRenderTarget = new RenderTarget("render", [colorAttachment], depthAttachment);
	}
}

class PostEffectCollection {
	constructor() {
		this._postEffects = new Map();
		this.currentColorTexture = undefined;
		this.resolveFrame = new ResolveFrame();
	}
	add(postEffect) {
		this._postEffects.set(postEffect.id, postEffect);
	}
	remove(postEffect) {
		this._postEffects.delete(postEffect.id);
		postEffect.destroy();
	}
	render(context, colorTexture) {
		this.currentColorTexture = colorTexture;
		this._postEffects.forEach((postEffect) => {
			this.currentColorTexture = postEffect.render(context, this.currentColorTexture);
		});
		this.resolveFrame.render(context, this.currentColorTexture);
	}
	setResolveFrameDirty(value) {
		this.resolveFrame.material.dirty = value;
	}
	postEffectsSort() {
		//this._postEffects.sort()
	}
}

class Scene extends EventDispatcher {
	constructor(options) {
		super();
		this.container =
			options.container instanceof HTMLDivElement
				? options.container
				: document.getElementById(options.container);
		this.primitiveManger = new PrimitiveManger();
		this.postEffectCollection = new PostEffectCollection();
		this.context = new Context({
			canvas: null,
			container: this.container,
			pixelRatio: 1
		});
		this.requestAdapter = options.requestAdapter || {};
		this.deviceDescriptor = options.deviceDescriptor || {};
		this.presentationContextDescriptor = options.presentationContextDescriptor;
		this.ready = false;
		this.inited = false;
	}
	async init() {
		await this.context.init(this.requestAdapter, this.deviceDescriptor, this.presentationContextDescriptor);
		this.currentRenderPipeline = new ForwardRenderLine(this.context);
		this.frameState = new FrameState(this.context);
		this.viewport = {
			x: 0,
			y: 0,
			width: this.context.presentationSize.width,
			height: this.context.presentationSize.height
		};
		this.ready = true;
	}
	add(instance) {
		if (instance?.isMesh) {
			this.primitiveManger.add(instance);
		} else if (instance?.isLight) {
			this.context.lightManger.add(instance);
		} else if (instance?.isPostEffect) {
			this.postEffectCollection.add(instance);
		}
	}
	remove(instance) {
		if (instance?.isMesh) {
			this.primitiveManger.remove(instance);
		} else if (instance?.isLight) {
			this.context.lightManger.remove(instance);
		} else if (instance?.isPostEffect) {
			this.postEffectCollection.remove(instance);
		}
	}
	setCamera(camera) {
		this.camera = camera;
	}
	resize(width, height) {
		this.context.resize(width, height);
		this.postEffectCollection.setResolveFrameDirty(true);
	}
	async render() {
		if (!this.inited) {
			this.inited = true;
			await this.init();
			this.update();
		} else {
			this.update();
		}
	}
	update() {
		if (!this.ready) return;
		//释放纹理
		textureCache.releasedTextures();
		//更新相机
		this.frameState.viewport = this.viewport;
		this.frameState.update(this.camera);
		//更新灯光
		this.context.lightManger.update(this.frameState, this.camera);
		//update primitive and select
		this.primitiveManger.update(this.frameState, this.camera);
		//selct renderPipeline
		this.currentRenderPipeline.render(this.frameState, this.camera);
		//后处理
		this.postEffectCollection.render(this.context, this.currentRenderPipeline.getOutputTexture());
	}
}

class PostEffect {
	constructor(width, height, id) {
		this.width = width;
		this.height = height;
		this.initDefaultParms();
		this.id = id;
		this.priority = 0;
		this.isPostEffect = true;
	}
	render(context, colorTexture) {
		return null;
	}
	destroy() {}
	renderMesh(context) {
		this.fullScreenQuad.material.dirty = true;
		this.fullScreenQuad.material.update();
		const drawComand = this.fullScreenQuad.getDrawCommand();
		const currentRenderPassEncoder = this.currentRenderTarget.beginRenderPassEncoder(context);
		context.render(drawComand, currentRenderPassEncoder);
		this.currentRenderTarget.endRenderPassEncoder();
	}
	initDefaultParms() {
		const geometry = new Geometry({});
		geometry.setAttribute(
			new Float32Attribute("position", [-1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0], 2)
		);
		geometry.count = 6;
		//rs
		const primitive = new Primitive();
		const target = new Target();
		// target.format=TextureFormat.RGBA8Unorm
		const renderState = new RenderState();
		renderState.primitive = primitive;
		renderState.targets = [target];
		this.renderState = renderState;
		this.fullScreenQuad = new Mesh(geometry);
		this.defaultSampler = new Sampler();
	}
}

class BloomPostEffect extends PostEffect {
	constructor(options) {
		super(options.width, options.height, "bloom");
		this.strength = options.strength;
		this.radius = options.radius;
		this.threshold = options.threshold;
		this.init();
	}
	destroy() {
		this.renderTargetBright.destroy();
	}
	render(context, colorTexture) {
		// 1. Extract Bright Areas
		this.currentRenderTarget = this.renderTargetBright;
		this.highPassUniforms.tDiffuse.value = colorTexture;
		this.fullScreenQuad.material = this.materialHighPassFilter;
		this.renderMesh(context);
		// 2. Blur All the mips progressively
		let inputRenderTarget = this.renderTargetBright;
		for (let i = 0; i < this.nMips; i++) {
			this.fullScreenQuad.material = this.separableBlurMaterials[i];
			this.separableBlurMaterials[i].uniforms.tDiffuse.value = inputRenderTarget.getColorTexture();
			this.separableBlurMaterials[i].uniforms.direction.value = BloomPostEffect.BlurDirectionX;
			this.currentRenderTarget = this.renderTargetsHorizontal[i];
			this.renderMesh(context);
			this.fullScreenQuad.material = this.separableBlurYMaterials[i];
			this.separableBlurYMaterials[i].uniforms.tDiffuse.value = this.renderTargetsHorizontal[i].getColorTexture();
			this.separableBlurYMaterials[i].uniforms.direction.value = BloomPostEffect.BlurDirectionY;
			this.currentRenderTarget = this.renderTargetsVertical[i];
			this.renderMesh(context);
			inputRenderTarget = this.renderTargetsVertical[i];
		}
		// Composite All the mips
		this.fullScreenQuad.material = this.compositeMaterial;
		this.currentRenderTarget = this.renderTargetsHorizontal[0];
		this.renderMesh(context);
		//blend
		this.blendUniforms.baseColorTexture.value = colorTexture;
		this.fullScreenQuad.material = this.blendMaterial;
		this.currentRenderTarget = this.blendTarget;
		this.renderMesh(context);
		return this.currentRenderTarget.getColorTexture();
	}
	init() {
		this.renderTargetsHorizontal = [];
		this.renderTargetsVertical = [];
		this.nMips = 5;
		let resx = Math.round(this.width / 2);
		let resy = Math.round(this.height / 2);
		this.renderTargetBright = new RenderTarget("render", [this.createColorAttachment(resx, resy)]);
		for (let i = 0; i < this.nMips; i++) {
			const renderTargetHorizonal = new RenderTarget("render", [this.createColorAttachment(resx, resy)]);
			this.renderTargetsHorizontal.push(renderTargetHorizonal);
			const renderTargetVertical = new RenderTarget("render", [this.createColorAttachment(resx, resy)]);
			this.renderTargetsVertical.push(renderTargetVertical);
			resx = Math.round(resx / 2);
			resy = Math.round(resy / 2);
		}
		// luminosity high pass material
		this.highPassUniforms = {
			tDiffuse: { type: "texture", value: null },
			tSampler: {
				type: "sampler",
				value: this.defaultSampler
			},
			luminosityThreshol: { type: "float", value: this.threshold },
			smoothWidth: { type: "float", value: 0.01 },
			defaultColor: { type: "color", value: new Color(0.0, 0, 0) },
			defaultOpacity: { type: "float", value: 1.0 }
		};
		const shader = getVertFrag("luminosityHigh", { positionLocation: 0 });
		this.materialHighPassFilter = new ShaderMaterial({
			type: "bloom",
			uniforms: this.highPassUniforms,
			vert: shader.vert,
			frag: shader.frag
		});
		// Gaussian Blur Materials
		this.materialHighPassFilter.renderState = this.renderState;
		this.separableBlurMaterials = [];
		this.separableBlurYMaterials = [];
		const kernelSizeArray = [3, 5, 7, 9, 11];
		resx = Math.round(this.width / 2);
		resy = Math.round(this.height / 2);
		for (let i = 0; i < this.nMips; i++) {
			this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i], "BlurMaterial" + i));
			this.separableBlurYMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i], "BlurMaterialY" + i));
			resx = Math.round(resx / 2);
			resy = Math.round(resy / 2);
		}
		// Composite material
		this.compositeMaterial = this.getCompositeMaterial(this.nMips, "compositeMaterial");
		this.compositeMaterial.renderState = this.renderState;
		this.blendUniforms = {
			tDiffuse: { type: "texture", value: this.renderTargetsHorizontal[0].getColorTexture() },
			baseColorTexture: { type: "texture", value: null },
			tSampler: {
				type: "sampler",
				value: this.defaultSampler
			}
		};
		const blendShader = getVertFrag("blend", { positionLocation: 0 });
		this.blendMaterial = new ShaderMaterial({
			type: "postBlend",
			uniforms: this.blendUniforms,
			vert: blendShader.vert,
			frag: blendShader.frag
		});
		this.blendMaterial.renderState = this.renderState;
		this.blendTarget = new RenderTarget("render", [this.createColorAttachment(this.width, this.height)]);
	}
	createColorAttachment(width, height) {
		const colorTexture = new Texture({
			size: { width, height, depth: 1 },
			format: TextureFormat.BGRA8Unorm,
			usage: TextureUsage.RenderAttachment | TextureUsage.TextureBinding
		});
		const colorAttachment = new Attachment({ r: 0.0, g: 0.0, b: 0.0, a: 0.0 }, { texture: colorTexture });
		return colorAttachment;
	}
	getCompositeMaterial(nMips, type) {
		//@ts-nocheck
		return new ShaderMaterial({
			type,
			uniforms: {
				blurTexture1: { type: "texture", value: this.renderTargetsVertical[0].getColorTexture() },
				blurTexture2: { type: "texture", value: this.renderTargetsVertical[1].getColorTexture() },
				blurTexture3: { type: "texture", value: this.renderTargetsVertical[2].getColorTexture() },
				blurTexture4: { type: "texture", value: this.renderTargetsVertical[3].getColorTexture() },
				blurTexture5: { type: "texture", value: this.renderTargetsVertical[4].getColorTexture() },
				tSampler: {
					type: "sampler",
					value: this.defaultSampler
				},
				bloomStrength: { type: "float", value: this.strength },
				bloomRadius: { type: "float", value: this.radius },
				bloomFactors: { type: "float-array", value: [1.0, 0.8, 0.6, 0.4, 0.2] },
				bloomTintColors: {
					type: "vec3-array",
					value: [
						new Vector3(1, 1, 1),
						new Vector3(1, 1, 1),
						new Vector3(1, 1, 1),
						new Vector3(1, 1, 1),
						new Vector3(1, 1, 1)
					]
				}
			},
			vert: (defines) => {},
			frag: (defines) => {
				`
                struct FragInput {
                    @location(0) uv: vec2<f32>,
                };
                struct BloomUniforms{
                    bloomStrength:f32,
                    bloomRadius:f32,
                    bloomFactors : array<f32,5>,
                    bloomTintColors : array<vec3<f32>,5>
                }  
                @group(0) @binding(0)  var<storage, read> bloomUniforms : BloomUniforms;

                @group(0) @binding(${defines.blurTexture1Binding}) var blurTexture1: texture_2d<f32>;
                @group(0) @binding(${defines.blurTexture2Binding}) var blurTexture2: texture_2d<f32>;
                @group(0) @binding(${defines.blurTexture3Binding}) var blurTexture3: texture_2d<f32>;
                @group(0) @binding(${defines.blurTexture4Binding}) var blurTexture4: texture_2d<f32>;
                @group(0) @binding(${defines.blurTexture5Binding}) var blurTexture5: texture_2d<f32>;
                @group(0) @binding(${defines.tSamplerBinding}}) var tSampler: sampler;

				fn lerpBloomFactor(factor:f32)->f32 {
					let mirrorFactor:f32 = 1.2 - factor;
					return mix(factor, mirrorFactor, bloomUniforms.bloomRadius);
				}
                @fragment
				fn main(input:FragInput)-> @location(0) vec4<f32>  {
					return bloomUniforms.bloomStrength * ( lerpBloomFactor(bloomUniforms.bloomFactors[0]) * vec4(bloomUniforms.bloomTintColors[0], 1.0) * textureSample(blurTexture1, tSampler, input.uv) +
						lerpBloomFactor(bloomUniforms.bloomFactors[1]) * vec4<f32>(bloomUniforms.bloomTintColors[1], 1.0) * textureSample(blurTexture2, tSampler, input.uv) +
						lerpBloomFactor(bloomUniforms.bloomFactors[2]) * vec4<f32>(bloomUniforms.bloomTintColors[2], 1.0) * textureSample(blurTexture3, tSampler, input.uv) +
						lerpBloomFactor(bloomUniforms.bloomFactors[3]) * vec4<f32>(bloomUniforms.bloomTintColors[3], 1.0) * textureSample(blurTexture4, tSampler, input.uv) +
						lerpBloomFactor(bloomUniforms.bloomFactors[4]) * vec4<f32>(bloomUniforms.bloomTintColors[4], 1.0) * textureSample(blurTexture5, tSampler, input.uv) );
				}`;
			}
		});
	}
	getSeperableBlurMaterial(kernelRadius, type) {
		const shader = getVertFrag("blur", {
			KERNEL_RADIUS: kernelRadius,
			SIGMA: kernelRadius,
			positionLocation: 0
		});
		const mat = new ShaderMaterial({
			type,
			uniforms: {
				tDiffuse: { type: "texture", value: null },
				direction: { type: "vec2", value: new Vector2(0.0, 0.0) },
				tSampler: {
					type: "sampler",
					value: this.defaultSampler
				}
			},
			vert: shader.vert,
			frag: shader.frag
		});
		mat.renderState = this.renderState;
		return mat;
	}
}
BloomPostEffect.BlurDirectionX = new Vector2(1.0, 0.0);
BloomPostEffect.BlurDirectionY = new Vector2(0.0, 1.0);

/**
 * A plane in Hessian Normal Form defined by
 * <pre>
 * ax + by + cz + d = 0
 * </pre>
 * where (a, b, c) is the plane's <code>normal</code>, d is the signed
 * <code>distance</code> to the plane, and (x, y, z) is any point on
 * the plane.
 *
 * @alias Plane
 * @constructor
 *
 * @param {Vector3} normal The plane's normal (normalized).
 * @param {Number} distance The shortest distance from the origin to the plane.  The sign of
 * @example
 * // The plane x=0
 * const plane = new Plane(Vector3.UNIT_X, 0.0);
 *
 * @exception {DeveloperError} Normal must be normalized
 */
class Plane {
	constructor(normal, distance) {
		this.normal = Vector3.clone(normal);
		this.distance = distance;
	}
	normalize() {
		const inverseNormalLength = 1.0 / this.normal.length();
		this.normal = Vector3.multiplyByScalar(this.normal, inverseNormalLength, this.normal);
		this.distance *= inverseNormalLength;
		return this;
	}
	static fromPointNormal(point, normal, result) {
		if (!GMath.equalsEpsilon(Vector3.magnitude(normal), 1.0, GMath.EPSILON6)) {
			throw new Error("normal must be normalized.");
		}
		//>>includeEnd('debug');
		const distance = -Vector3.dot(normal, point);
		if (!defined(result)) {
			return new Plane(normal, distance);
		}
		Vector3.clone(normal, result.normal);
		result.distance = distance;
		return result;
	}
	static fromVector4(coefficients, result) {
		const normal = Vector3.fromVector4(coefficients, scratchNormal);
		const distance = coefficients.w;
		//>>includeStart('debug', pragmas.debug);
		if (!GMath.equalsEpsilon(Vector3.magnitude(normal), 1.0, GMath.EPSILON6)) {
			throw new Error("normal must be normalized.");
		}
		//>>includeEnd('debug');
		if (!defined(result)) {
			return new Plane(normal, distance);
		}
		Vector3.clone(normal, result.normal);
		result.distance = distance;
		return result;
	}
	static getPointDistance(plane, point) {
		return Vector3.dot(plane.normal, point) + plane.distance;
	}
	static projectPointOntoPlane(plane, point, result) {
		if (!defined(result)) {
			result = new Vector3();
		}
		// projectedPoint = point - (normal.point + scale) * normal
		const pointDistance = Plane.getPointDistance(plane, point);
		const scaledNormal = Vector3.multiplyByScalar(plane.normal, pointDistance, scratchCartesian);
		return Vector3.subtract(point, scaledNormal, result);
	}
	static transform(plane, transform, result) {
		const normal = plane.normal;
		const distance = plane.distance;
		const inverseTranspose = Matrix4.inverseTranspose(transform, scratchInverseTranspose);
		let planeAsCartesian4 = Vector4.fromElements(normal.x, normal.y, normal.z, distance, scratchPlaneCartesian4);
		planeAsCartesian4 = Matrix4.multiplyByVector(inverseTranspose, planeAsCartesian4, planeAsCartesian4);
		// Convert the transformed plane to Hessian Normal Form
		const transformedNormal = Vector3.fromVector4(planeAsCartesian4, scratchTransformNormal);
		planeAsCartesian4 = Vector4.divideByScalar(
			planeAsCartesian4,
			Vector3.magnitude(transformedNormal),
			planeAsCartesian4
		);
		return Plane.fromVector4(planeAsCartesian4, result);
	}
	static clone(plane, result) {
		if (!defined(result)) {
			return new Plane(plane.normal, plane.distance);
		}
		Vector3.clone(plane.normal, result.normal);
		result.distance = plane.distance;
		return result;
	}
	static equals(left, right) {
		return left.distance === right.distance && Vector3.equals(left.normal, right.normal);
	}
}
Plane.ORIGIN_XY_PLANE = Object.freeze(new Plane(Vector3.UNIT_Z, 0.0));
Plane.ORIGIN_YZ_PLANE = Object.freeze(new Plane(Vector3.UNIT_X, 0.0));
Plane.ORIGIN_ZX_PLANE = Object.freeze(new Plane(Vector3.UNIT_Y, 0.0));
const scratchNormal = new Vector3();
const scratchCartesian = new Vector3();
const scratchInverseTranspose = new Matrix4();
const scratchPlaneCartesian4 = new Vector4();
const scratchTransformNormal = new Vector3();

/**
 * The culling volume defined by planes.
 *
 * @alias CullingVolume
 * @constructor
 *
 * @param {Vector4[]} [planes] An array of clipping planes.
 */
class CullingVolume {
	constructor(planes) {
		this.planes = defaultValue(planes, [
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0)
		]);
	}
	/**
	 * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.
	 * The planes are aligned to the x, y, and z axes in world coordinates.
	 *
	 * @param {BoundingSphere} boundingSphere The bounding sphere used to create the culling volume.
	 * @param {CullingVolume} [result] The object onto which to store the result.
	 * @returns {CullingVolume} The culling volume created from the bounding sphere.
	 */
	static fromBoundingSphere(boundingSphere, result) {
		if (!defined(boundingSphere)) {
			throw new Error("boundingSphere is required.");
		}
		if (!defined(result)) {
			result = new CullingVolume();
		}
		const length = faces.length;
		const planes = result.planes;
		planes.length = 2 * length;
		const center = boundingSphere.center;
		const radius = boundingSphere.radius;
		let planeIndex = 0;
		for (let i = 0; i < length; ++i) {
			const faceNormal = faces[i];
			let plane0 = planes[planeIndex];
			let plane1 = planes[planeIndex + 1];
			if (!defined(plane0)) {
				plane0 = planes[planeIndex] = new Vector4();
			}
			if (!defined(plane1)) {
				plane1 = planes[planeIndex + 1] = new Vector4();
			}
			Vector3.multiplyByScalar(faceNormal, -radius, scratchPlaneCenter);
			Vector3.add(center, scratchPlaneCenter, scratchPlaneCenter);
			plane0.x = faceNormal.x;
			plane0.y = faceNormal.y;
			plane0.z = faceNormal.z;
			plane0.w = -Vector3.dot(faceNormal, scratchPlaneCenter);
			Vector3.multiplyByScalar(faceNormal, radius, scratchPlaneCenter);
			Vector3.add(center, scratchPlaneCenter, scratchPlaneCenter);
			plane1.x = -faceNormal.x;
			plane1.y = -faceNormal.y;
			plane1.z = -faceNormal.z;
			plane1.w = -Vector3.dot(Vector3.negate(faceNormal, scratchPlaneNormal), scratchPlaneCenter);
			planeIndex += 2;
		}
		return result;
	}
	/**
	 * Determines whether a bounding volume intersects the culling volume.
	 *
	 * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.
	 * @returns {Intersect}  Intersect.OUTSIDE, Intersect.INTERSECTING, or Intersect.INSIDE.
	 */
	computeVisibility(boundingVolume) {
		if (!defined(boundingVolume)) {
			throw new Error("boundingVolume is required.");
		}
		const planes = this.planes;
		let intersecting = false;
		for (let k = 0, len = planes.length; k < len; ++k) {
			const result = boundingVolume.intersectPlane(planes[k]);
			if (result === Intersect.OUTSIDE) {
				return Intersect.OUTSIDE;
			} else if (result === Intersect.INTERSECTING) {
				intersecting = true;
			}
		}
		return intersecting ? Intersect.INTERSECTING : Intersect.INSIDE;
	}
}
CullingVolume.MASK_OUTSIDE = 0xffffffff;
CullingVolume.MASK_INSIDE = 0x00000000;
CullingVolume.MASK_INDETERMINATE = 0x7fffffff;
const faces = [new Vector3(), new Vector3(), new Vector3()];
Vector3.clone(Vector3.UNIT_X, faces[0]);
Vector3.clone(Vector3.UNIT_Y, faces[1]);
Vector3.clone(Vector3.UNIT_Z, faces[2]);
const scratchPlaneCenter = new Vector3();
const scratchPlaneNormal = new Vector3();
new Vector4();
new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);

class Camera extends RenderObject {
	constructor() {
		super();
		this._viewMatrix = undefined;
		this.isCamera = true;
		this.cullingVolume = new CullingVolume();
		this._viewMatrix = new Matrix4();
		this._vpMatrix = new Matrix4();
		this.projectMatrixDirty = true;
		this.createShaderData();
	}
	get viewMatrix() {
		this.updateMatrix();
		Matrix4.inverse(this.modelMatrix, this._viewMatrix);
		return this._viewMatrix;
	}
	get projectionMatrix() {
		this.updateProjectionMatrix();
		return this._projectionMatrix;
	}
	get vpMatrix() {
		Matrix4.multiply(this.projectionMatrix, this.viewMatrix, this._vpMatrix);
		return this._vpMatrix;
	}
	get inverseViewMatrix() {
		this.updateMatrix();
		return this.modelMatrix;
	}
	updateProjectionMatrix() {}
	/**
	 * get a culling volume for this frustum.
	 */
	getCullingVolume() {
		const cloneViewMatrix = this.viewMatrix.clone(new Matrix4());
		const vpMatrix = Matrix4.multiply(this.projectionMatrix, cloneViewMatrix, new Matrix4());
		const planes = this.cullingVolume.planes;
		const me = vpMatrix;
		const me0 = me[0],
			me1 = me[1],
			me2 = me[2],
			me3 = me[3];
		const me4 = me[4],
			me5 = me[5],
			me6 = me[6],
			me7 = me[7];
		const me8 = me[8],
			me9 = me[9],
			me10 = me[10],
			me11 = me[11];
		const me12 = me[12],
			me13 = me[13],
			me14 = me[14],
			me15 = me[15];
		planes[0] = new Plane(new Vector3(me3 - me0, me7 - me4, me11 - me8), me15 - me12);
		planes[0].normalize();
		planes[1] = new Plane(new Vector3(me3 + me0, me7 + me4, me11 + me8), me15 + me12);
		planes[1].normalize();
		planes[2] = new Plane(new Vector3(me3 + me1, me7 + me5, me11 + me9), me15 + me13);
		planes[2].normalize();
		planes[3] = new Plane(new Vector3(me3 - me1, me7 - me5, me11 - me9), me15 - me13);
		planes[3].normalize();
		planes[4] = new Plane(new Vector3(me3 - me2, me7 - me6, me11 - me10), me15 - me14);
		planes[4].normalize();
		planes[5] = new Plane(new Vector3(me3 + me2, me7 + me6, me11 + me10), me15 + me14);
		planes[5].normalize();
		return this.cullingVolume;
	}
	createShaderData() {
		this.shaderData = new ShaderData("camera", 0, 1, 1);
		const uniformBuffer = new UniformBuffer("camera");
		uniformBuffer.setMatrix4("projectionMatrix", () => {
			return this.projectionMatrix;
		});
		uniformBuffer.setMatrix4("viewMatrix", () => {
			return this.viewMatrix;
		});
		uniformBuffer.setMatrix4("inverseViewMatrix", () => {
			return this.inverseViewMatrix;
		});
		uniformBuffer.setFloatVec3("position", () => {
			return this.position;
		});
		this.shaderData.setUniformBuffer("camera", uniformBuffer);
	}
}

class PerspectiveCamera extends Camera {
	constructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {
		super();
		this._aspect = aspect;
		this.fov = fov;
		this.near = near;
		this.far = far;
		this.xOffset = 0;
		this.yOffset = 0;
		this.projectMatrixDirty = true;
		this.updateCameraParms();
		this.cullingVolume = new CullingVolume();
		this.isPerspectiveCamera = true;
	}
	get aspect() {
		return this._aspect;
	}
	set aspect(v) {
		this.projectMatrixDirty = true;
		this._aspect = v;
	}
	get fov() {
		return this._fov;
	}
	set fov(v) {
		this.projectMatrixDirty = true;
		this._fov = v;
	}
	updateCameraParms() {
		this.top = this.near * Math.tan(0.5 * GMath.RADIANS_PER_DEGREE * this.fov);
		this.height = 2 * this.top;
		this.width = this.aspect * this.height;
		this.left = -0.5 * this.width;
	}
	updateProjectionMatrix() {
		if (this.projectMatrixDirty) {
			this.updateCameraParms();
			this._projectionMatrix = Matrix4.makePerspective(
				this.left,
				this.left + this.width,
				this.top,
				this.top - this.height,
				this.near,
				this.far
			);
			this.projectMatrixDirty = false;
		}
	}
}

class OrthographicCamera extends Camera {
	constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {
		super();
		this.near = near;
		this.far = far;
		this.left = left;
		this.top = top;
		this.bottom = bottom;
		this.right = right;
		this.isOrthographicCamera = true;
	}
	updateCameraParms() {
		const dx = (this.right - this.left) / 2;
		const dy = (this.top - this.bottom) / 2;
		const cx = (this.right + this.left) / 2;
		const cy = (this.top + this.bottom) / 2;
		return {
			left: cx - dx,
			right: cx + dx,
			top: cy + dy,
			bottom: cy - dy
		};
	}
	updateProjectionMatrix() {
		if (this.projectMatrixDirty) {
			const { left, right, top, bottom } = this.updateCameraParms();
			this._projectionMatrix = Matrix4.makeOrthographic(left, right, top, bottom, this.near, this.far);
			this.projectMatrixDirty = false;
		}
	}
}

class BaseShadow {
	constructor(shadowMapSize, camera) {
		this._shadowMapSize = shadowMapSize;
		this._camera = camera;
		this._init();
	}
	get camera() {
		return this._camera;
	}
	get shadowMapSize() {
		return this._shadowMapSize;
	}
	getShadowMapTexture() {
		return this._shadowMap;
	}
	_init() {
		this._initShadowMapTexture();
	}
	_initShadowMapTexture() {
		this._createShadowMapTexture();
	}
	_createShadowMapTexture() {
		this._shadowMap = new Texture({
			size: {
				width: this._shadowMapSize,
				height: this._shadowMapSize,
				depth: 1
			},
			fixedSize: true,
			sampleType: TextureSampleType.Depth,
			format: TextureFormat.Depth24Plus,
			usage: TextureUsage.RenderAttachment | TextureUsage.TextureBinding | TextureUsage.CopySrc
		});
	}
	update(light) {}
}

class SpotLightShadow extends BaseShadow {
	constructor() {
		const camera = new PerspectiveCamera(60, 1, 0.1, 500);
		super(1024, camera);
		this.type = "spotLightShadow";
	}
	update(light) {
		this.updateMatrices(light);
	}
	updateMatrices(light) {
		this.camera.position.copy(light.position);
		const { x, y, z } = light.target;
		this.camera.lookAt(x, y, z);
		this.camera.updateMatrix();
	}
}

class SpotLight extends Light {
	constructor(color, intensity, distance = 0, angle = 60, penumbra = 60, decay = 4, openShadow = true) {
		super(color, intensity);
		this._distance = distance;
		this._angle = (angle / 180) * Math.PI;
		this._penumbra = (penumbra / 180) * Math.PI;
		this._decay = decay;
		this.type = "spot";
		this.angleDirty = true;
		this.penumbraDirty = true;
		this.distanceDirty = true;
		this.decayDirty = true;
		this.coneCosDirty = true;
		this.penumbraCosDirty = true;
		if (openShadow) this.shadow = new SpotLightShadow();
		this.updateConeCosOrPenumbraCos();
	}
	get dirtectDirty() {
		return this.positionDirty || this.targetDirty;
	}
	set dirtectDirty(value) {
		this.positionDirty = value;
		this.targetDirty = value;
	}
	get directional() {
		const result = new Vector3();
		Vector3.subtract(this.position, this.target, result);
		return Vector3.normalize(result, new Vector3());
	}
	get angle() {
		return this._angle;
	}
	set angle(value) {
		this.angleDirty = true;
		this._angle = (value / 180) * Math.PI;
		this.updateConeCosOrPenumbraCos();
	}
	get penumbra() {
		return this._penumbra;
	}
	set penumbra(value) {
		this.penumbraDirty = true;
		this._penumbra = (value / 180) * Math.PI;
		this.updateConeCosOrPenumbraCos();
	}
	set distance(value) {
		this.distanceDirty = true;
		this._distance = value;
	}
	get distance() {
		return this._distance;
	}
	set decay(value) {
		this.decayDirty = true;
		this._decay = value;
	}
	get decay() {
		return this._decay;
	}
	set coneCos(value) {
		this.coneCosDirty = true;
		this._coneCos = value;
	}
	get coneCos() {
		return this._coneCos;
	}
	set penumbraCos(value) {
		this.penumbraCosDirty = true;
		this._penumbraCos = value;
	}
	get penumbraCos() {
		return this._penumbraCos;
	}
	updateConeCosOrPenumbraCos() {
		this._coneCos = Math.cos(this.angle);
		this._penumbraCos = Math.cos(this.angle + this.penumbra);
	}
}
//uniform
// color: {},
// position: {},
// direction: {},
// distance: {},
// coneCos: {},
// penumbraCos: {},
// decay: {}

class PointLightShadow extends BaseShadow {
	constructor() {
		const camera = new PerspectiveCamera(60, 1, 0.1, 500);
		super(1024, camera);
		this.type = "pointLightShadow";
	}
}

class PointLight extends Light {
	constructor(color, intensity, distance = 0, decay = 4, openShadow = true) {
		super(color, intensity);
		this._distance = distance;
		this._decay = decay;
		this.distanceDirty = true;
		this.decayDirty = true;
		this.type = "point";
		if (openShadow) this.shadow = new PointLightShadow();
	}
	set distance(value) {
		this.distanceDirty = true;
		this._distance = value;
	}
	get distance() {
		return this._distance;
	}
	set decay(value) {
		this.decayDirty = true;
		this._decay = value;
	}
	get decay() {
		return this._decay;
	}
}
//uniform
// color: {},
// position: {},
// decay: {},
// distance: {}

class DirectionalLightShadow extends BaseShadow {
	constructor() {
		const camera = new OrthographicCamera(-50, 50, 50, -50, 0, 100);
		super(1024, camera);
		this.type = "directionalLightShadow";
	}
	update(light) {
		this.updateMatrices(light);
	}
	updateMatrices(light) {
		this.camera.position.copy(light.position);
		const { x, y, z } = light.target;
		this.camera.lookAt(x, y, z);
		this.camera.updateMatrix();
	}
}

class DirectionalLight extends Light {
	constructor(color, intensity, openShadow = true) {
		super(color, intensity);
		this.type = "directional";
		if (openShadow) this.shadow = new DirectionalLightShadow();
	}
	get dirtectDirty() {
		return this.positionDirty || this.targetDirty;
	}
	set dirtectDirty(value) {
		this.positionDirty = value;
		this.targetDirty = value;
	}
	get directional() {
		const result = new Vector3();
		Vector3.subtract(this.target, this.position, result);
		return result.normalize();
	}
}
//uniform
// direction: {},
// color: {}

function newTypedArray(type, buffer, byteOffset, length) {
	switch (type) {
		case 5120:
			return new Int8Array(buffer, byteOffset, length);
		case 5121:
			return new Uint8Array(buffer, byteOffset, length);
		case 5122:
			return new Int16Array(buffer, byteOffset, length);
		case 5123:
			return new Uint16Array(buffer, byteOffset, length);
		case 5124:
			return new Int32Array(buffer, byteOffset, length);
		case 5125:
			return new Uint32Array(buffer, byteOffset, length);
		case 5126:
			return new Float32Array(buffer, byteOffset, length);
		default:
			throw new Error("invalid component type");
	}
}
function toIndices(array) {
	if (array instanceof Uint16Array || array instanceof Uint32Array) {
		return array;
	}
	let toArray;
	if (array instanceof Float32Array) {
		toArray = new Uint32Array(array.length);
	} else {
		toArray = new Uint16Array(array.length);
	}
	array.forEach((element, index) => {
		toArray[index] = element;
	});
	return toArray;
}
function generateNormals(indices, positions) {
	const normals = new Float32Array(positions.length);
	const vertexCount = indices ? indices.length : positions.length;
	for (let i = 0; i < vertexCount; i += 3) {
		const triIndices = [];
		for (let n = 0; n < 3; n += 1) {
			if (indices) {
				triIndices.push(indices[i + n]);
			} else {
				triIndices.push(i + n);
			}
		}
		const triangle = triIndices.map((vertexIndex) => {
			const index = vertexIndex * 3;
			return new Vector3(positions[index], positions[index + 1], positions[index + 2]);
		});
		const dv1 = new Vector3();
		Vector3.subtract(triangle[1], triangle[0], dv1);
		const dv2 = new Vector3();
		Vector3.subtract(triangle[2], triangle[0], dv2);
		const normal = new Vector3();
		Vector3.cross(dv1.normalize(), dv2.normalize(), normal);
		for (let n = 0; n < 3; n += 1) {
			const index = (i + n) * 3;
			normals[index + 0] += normal.x;
			normals[index + 1] += normal.y;
			normals[index + 2] += normal.z;
		}
	}
	return normals;
}
const gltfEnum = {
	SCALAR: 1,
	VEC2: 2,
	VEC3: 3,
	VEC4: 4,
	MAT2: 4,
	MAT3: 9,
	MAT4: 16,
	5120: 1,
	5121: 1,
	5122: 2,
	5123: 2,
	5125: 4,
	5126: 4,
	9728: "nearest",
	9729: "linear",
	9984: "linear",
	9985: "linear",
	9986: "linear",
	9987: "linear",
	33071: "clamp-to-edge",
	33648: "mirror-repeat",
	10497: "repeat"
};

class Node extends Mesh {
	constructor() {
		super();
		this.isNode = true;
		this.children = new Map();
		this.parent = null;
		this.uid = createGuid();
	}
	add(node) {
		node.parent = this;
		this.children.set(node.uid, node);
	}
	remove(node) {
		this.children.delete(node.uid);
	}
	update(frameState, camera) {
		if (this.parent) this.updateMatrix(this.parent.modelMatrix);
		if (this.meshList)
			this.meshList.map((mesh) => {
				mesh.update(frameState, camera, this.modelMatrix);
			});
		this?.children?.forEach?.((node) => {
			node.update(frameState, camera);
		});
	}
	destroy() {
		this.meshList.map((mesh) => {
			mesh?.destroy();
		});
		this.children.forEach((node) => {
			node.destroy();
		});
		this?.children?.clear();
	}
	traverse(traverseFunction, param) {
		for (let i = 0, len = this.children.size; i < len; i++) {
			this.children.forEach((child) => {
				child.traverse(traverseFunction, param);
			});
		}
	}
}

class Animation {
	constructor(name, samplers, channels) {
		this.name = name;
		this.samplers = samplers;
		this.channels = channels;
	}
	play(time) {
		let node, animationSampler, target;
		this?.channels?.map((channel) => {
			animationSampler = channel.sampler;
			animationSampler.getValue(time);
			target = channel.target;
			node = target.node;
			switch (target.path) {
				case "rotation":
					Quaternion.clone(animationSampler.curValue, node.rotation);
					break;
				case "translation":
					Vector4.clone(animationSampler.curValue, node.translation);
					break;
				case "scale":
					Vector4.clone(animationSampler.curValue, node.scale);
					break;
			}
		});
	}
}

class AnimationChannel {
	constructor() {}
}

class AnimationSampler {
	constructor() {}
	formGltf(gltf, sampler) {
		this.input = gltf.accessors[sampler.input]; //required, accessor object
		this.output = gltf.accessors[sampler.output]; //required, accessor object
		this.interpolation = sampler.interpolation !== undefined ? sampler.interpolation : "LINEAR";
		this.currentIndex = 0;
		// this.currentValue=new Vector4();
		this.endTime = this.input[this.input.length - 1];
		this.inputMax = this.endTime - this.input[0];
		this.inputType = gltf?.json?.accessors[sampler.input]?.type;
		this.outputType = gltf?.json?.accessors[sampler.output]?.type;
	}
	getValue(time) {
		if (time > this.endTime) {
			time -= this.inputMax * Math.ceil((time - this.endTime) / this.inputMax);
			this.currentIndex = 0;
		}
		const len = this.input.length;
		while (this.currentIndex <= len - 2 && time >= this.input[this.currentIndex + 1]) {
			this.currentIndex++;
		}
		if (this.currentIndex >= len - 1) {
			// loop
			time -= this.inputMax;
			this.currentIndex = 0;
		}
		// @tmp: assume no stride
		const count = Type2NumOfComponent[this.outputType];
		const animationOutputValueVec4a = count === 4 ? new Quaternion() : new Vector4();
		const animationOutputValueVec4b = count === 4 ? new Quaternion() : new Vector4();
		if (!this.currentValue) this.currentValue = count === 4 ? new Quaternion() : new Vector4();
		const i = this.currentIndex;
		const o = i * count;
		const on = o + count;
		const u = Math.max(0, time - this.input[i]) / (this.input[i + 1] - this.input[i]);
		animationOutputValueVec4a.set(o + 0, o + 1, o + 2, o + 3);
		animationOutputValueVec4b.set(on + 0, on + 1, on + 2, on + 3);
		switch (this.interpolation) {
			case "LINEAR":
				count === 4
					? Quaternion.slerp(animationOutputValueVec4a, animationOutputValueVec4b, u, this.currentValue)
					: Vector4.lerp(animationOutputValueVec4a, animationOutputValueVec4b, u, this.currentValue);
				break;
		}
	}
}

class AnimationChannelTarget {
	constructor(node, path) {
		this.node = node;
		this.path = path;
	}
}

class GLTF {
	constructor(json, rootUrl, glbOffset = 0, glbBin) {
		this.json = json;
		this.bufferViews = json.bufferViews;
		this.glbOffset = glbOffset;
		this.rootUrl = rootUrl;
		this.scenes = json.scenes;
		this.defaultScene = json.scene || 0;
		this.cameras = json.cameras || [];
		this.glbBin = glbBin;
		this.meshes = [];
	}
	async parseData() {
		this.buffers = await this.loadBuffes();
		this.images = await this.loadImages();
		this.parseSamplers();
		this.parseTextures();
		this.parseMaterials();
		this.parseAccessors();
		this.parseMeshs();
		this.parseNodes();
		this.normalizeData();
		this.parseScenes();
		this.parseAnimations();
	}
	getAccessor(index) {
		return this.accessors[index];
	}
	parseSamplers() {
		this.samplers = this.json.samplers ? this.json.samplers.map((sampler) => this.getSampler(sampler)) : [];
	}
	parseScenes() {
		this.scenes = this.json.scenes.map((scene) => {
			const node = new Node();
			scene?.nodes?.map((nodeId) => {
				node.add(this.nodes[nodeId]);
			});
			return node;
		});
	}
	parseTextures() {
		this.textures = this.json.textures
			? this.json.textures.map((texture) => {
					return {
						sampler: texture.sampler !== undefined ? this.samplers[texture.sampler] : this.getSampler({}),
						texture: this.createTexture(texture.source)
					};
			  })
			: [];
	}
	parseMaterials() {
		this.materials = this.json.materials
			? this.json.materials.map((material) => {
					const mat = new PbrMaterial();
					const {
						baseColorFactor,
						metallicFactor,
						metallicRoughnessTexture,
						baseColorTexture,
						roughnessFactor
					} = material.pbrMetallicRoughness;
					if (material.normalTexture) mat.normalTexture = this.textures[material.normalTexture.index].texture;
					if (material.occlusionTexture)
						mat.aoTexture = this.textures[material.occlusionTexture.index].texture;
					if (material.emissiveTexture)
						mat.emissiveTexture = this.textures[material.emissiveTexture.index].texture;
					if (baseColorTexture) mat.baseTexture = this.textures[baseColorTexture.index].texture;
					if (metallicRoughnessTexture)
						mat.metalnessRoughnessTexture = this.textures[metallicRoughnessTexture.index].texture;
					if (baseColorFactor)
						mat.color = new Color(baseColorFactor[0], baseColorFactor[1], baseColorFactor[2]);
					mat.metalness = metallicFactor ?? 1.0;
					mat.roughness = roughnessFactor ?? 0.0;
					mat.baseSampler = new Sampler({
						magFilter: "linear",
						minFilter: "linear",
						addressModeU: "repeat",
						addressModeV: "repeat"
					});
					// mat.roughness = 0.0;
					// mat.metalness = 1.0;
					return mat;
			  })
			: [];
	}
	parseAccessors() {
		this.accessors = this.json.accessors.map((accessor) => {
			const n = gltfEnum[accessor.type];
			let array;
			if (accessor.bufferView === undefined) {
				array = newTypedArray(
					accessor.componentType,
					new ArrayBuffer(n * accessor.count * gltfEnum[accessor.componentType]),
					0,
					accessor.count * n
				);
			} else {
				array = this.getBufferView(accessor, n);
			}
			if (accessor.sparse) {
				accessor.sparse.indices.count = accessor.sparse.count;
				accessor.sparse.values.count = accessor.sparse.count;
				accessor.sparse.values.componentType = accessor.componentType;
				const indices = this.getBufferView(accessor.sparse.indices, 1);
				const values = this.getBufferView(accessor.sparse.values, n);
				for (let i = 0; i < accessor.sparse.count; i += 1) {
					for (let j = 0; j < n; j += 1) {
						array[indices[i] * n + j] = values[i * n + j];
					}
				}
			}
			return array;
		});
	}
	parseAnimations() {
		this.animations = this?.json?.animations?.map((gltfAnimation, index) => {
			const samplers = gltfAnimation?.samplers?.map((gltfSampler) => {
				const sampler = new AnimationSampler();
				sampler.formGltf(this, gltfSampler);
				return sampler;
			});
			const channels = gltfAnimation?.channels?.map((gltfChannel) => {
				const animationChannel = new AnimationChannel();
				animationChannel.sampler = samplers[gltfChannel.sampler];
				animationChannel.target = new AnimationChannelTarget(
					this.nodes[gltfChannel.target.node],
					gltfChannel.target.path
				);
				return animationChannel;
			});
			const animation = new Animation(index.toString(), samplers, channels);
			return animation;
		});
	}
	parseMeshs() {
		this.gltfMeshs = this?.json?.meshes?.map?.((gltfmesh) => {
			return {
				name: gltfmesh.name,
				primitives: gltfmesh?.primitives?.map?.((primitive) => {
					const material =
						primitive.material !== undefined
							? this.materials[primitive.material]
							: { pbrMetallicRoughness: {} };
					const geo = this.createGeometry(primitive, material);
					const mesh = new Mesh(geo, material);
					return mesh;
				})
			};
		});
	}
	getSampler(samplerJson) {
		return new Sampler({
			magFilter: gltfEnum[samplerJson.magFilter || 9729],
			minFilter: gltfEnum[samplerJson.minFilter || 9729],
			addressModeU: gltfEnum[samplerJson.wrapS || 10497],
			addressModeV: gltfEnum[samplerJson.wrapT || 10497]
		});
	}
	getBufferView(accessor, n) {
		const bufferView = this.bufferViews[accessor.bufferView];
		const offset = (bufferView.byteOffset || 0) + (accessor.byteOffset || 0);
		const stride = Math.max(bufferView.byteStride / 4 || 0, n);
		let array = newTypedArray(
			accessor.componentType,
			this.buffers[bufferView.buffer],
			bufferView.buffer === 0 ? offset + this.glbOffset : offset,
			(accessor.count - 1) * stride + n
		);
		if (stride > n) {
			const TypedArrayConstructor = array.constructor;
			const strided = new TypedArrayConstructor(accessor.count * n);
			for (let i = 0, j = 0; i < strided.length; i += n, j += stride) {
				for (let k = 0; k < n; k += 1) {
					strided[i + k] = array[j + k];
				}
			}
			array = strided;
		}
		return array;
	}
	createGeometry(primitive, material) {
		let indices = null;
		const defines = { HAS_NORMAL: true };
		let vertexCount;
		if (primitive.indices !== undefined) {
			indices = toIndices(this.accessors[primitive.indices]);
			vertexCount = this.json.accessors[primitive.indices].count;
		} else {
			vertexCount = this.json.accessors[primitive.attributes.POSITION].count;
		}
		const positions = this.accessors[primitive.attributes.POSITION];
		this.json.accessors[primitive.attributes.POSITION];
		let normals;
		if (primitive.attributes.NORMAL !== undefined) {
			normals = this.accessors[primitive.attributes.NORMAL];
		} else {
			normals = generateNormals(indices, positions);
		}
		let uvs = null;
		if (primitive.attributes.TEXCOORD_0 !== undefined) {
			uvs = this.accessors[primitive.attributes.TEXCOORD_0];
			defines.HAS_UV = true;
		}
		if (primitive.attributes.TEXCOORD_1 !== undefined) {
			this.accessors[primitive.attributes.TEXCOORD_1];
			defines.HAS_UV1 = true;
		}
		if (primitive.attributes.TANGENT !== undefined && primitive.attributes.NORMAL !== undefined) {
			this.accessors[primitive.attributes.TANGENT];
			//defines.HAS_TANGENT = true;
		} else if (material.normalTexture);
		let colors = null;
		if (primitive.attributes.COLOR_0 !== undefined) {
			colors = this.accessors[primitive.attributes.COLOR_0];
			defines.HAS_COLOR = true;
		}
		if (primitive.attributes.JOINTS_0 !== undefined) {
			this.accessors[primitive.attributes.JOINTS_0];
			// defines.HAS_SKIN = true;
		}
		if (primitive.attributes.WEIGHTS_0 !== undefined) {
			this.accessors[primitive.attributes.WEIGHTS_0];
		}
		const geo = new Geometry({ type: "pbrGeomtry" });
		if (indices) geo.setIndice(Array.from(indices));
		if (positions) geo.setAttribute(new Float32Attribute("position", Array.from(positions), 3));
		if (normals) geo.setAttribute(new Float32Attribute("normal", Array.from(normals), 3));
		if (colors) geo.setAttribute(new Float32Attribute("color", Array.from(colors), 3));
		if (uvs) geo.setAttribute(new Float32Attribute("uv", Array.from(uvs), 2));
		// if (joints) geo.setAttribute(new Float32Attribute("joint0", Array.from(joints), 4));
		// if (weights) geo.setAttribute(new Float32Attribute("weight0", Array.from(weights), 4));
		geo.defines = defines;
		geo.computeBoundingSphere(Array.from(positions));
		geo.count = vertexCount;
		return geo;
	}
	createTexture(source) {
		return new Texture({
			size: {
				width: this.images[source].width,
				height: this.images[source].height,
				depth: 1
			},
			data: {
				source: this.images[source]
			},
			format: "rgba8unorm",
			usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT
		});
	}
	async loadImages() {
		const images = [];
		let loadExternalImages = Promise.resolve();
		if (this.json.images) {
			loadExternalImages = Promise.all(
				this.json.images.map(async (image, index) => {
					if (image.uri) {
						const imageUrl = image.uri.slice(0, 5) === "data:" ? image.uri : `${this.rootUrl}/${image.uri}`;
						images[index] = await fetch(imageUrl)
							.then((response) => response.blob())
							.then((blob) =>
								createImageBitmap(blob, {
									colorSpaceConversion: "none"
								})
							);
					}
				})
			);
		}
		let loadInternalImages = Promise.resolve();
		if (this.json.images) {
			loadInternalImages = Promise.all(
				this.json.images.map(async (image, index) => {
					if (image.bufferView !== undefined) {
						const { buffer, byteOffset, byteLength } = this.json.bufferViews[image.bufferView];
						const array = new Uint8Array(
							this.buffers[buffer],
							buffer === 0 ? byteOffset + this.glbOffset : byteOffset,
							byteLength
						);
						let type;
						if (image.mimeType) {
							type = image.mimeType;
						} else {
							type = array[0] === 0xff ? "image/jpeg" : "image/png";
						}
						const blob = new Blob([array], { type });
						images[index] = await createImageBitmap(blob, {
							colorSpaceConversion: "none"
						});
					}
				})
			);
		}
		await Promise.all([loadExternalImages, loadInternalImages]);
		return images;
	}
	async loadBuffes() {
		const buffers = [];
		await Promise.all(
			this.json.buffers.map((buffer, index) => {
				if (!buffer.uri) {
					if (index !== 0) {
						throw new Error("buffer uri undefined");
					}
					buffers[index] = this.glbBin;
					return Promise.resolve();
				}
				const bufferUrl = buffer.uri.slice(0, 5) === "data:" ? buffer.uri : `${this.rootUrl}/${buffer.uri}`;
				return fetch(bufferUrl)
					.then((response) => response.arrayBuffer())
					.then((arrayBuffer) => {
						buffers[index] = arrayBuffer;
					});
			})
		);
		return buffers;
	}
	parseNodes() {
		this.nodes = this?.json?.nodes?.map((gltfNode) => {
			const node = new Node();
			if (gltfNode.mesh != undefined) node.meshList = this.gltfMeshs[gltfNode.mesh].primitives;
			return this.parseNodeTRS(node, gltfNode);
		});
	}
	parseNodeTRS(node, gltfNode) {
		const { matrix, rotation, translation, scale } = gltfNode;
		if (matrix) Matrix4.fromColumnMajorArray(matrix, node.modelMatrix);
		if (rotation) node.quaternion.set(rotation[0], rotation[1], rotation[2], rotation[3]);
		if (translation) node.position.set(translation[0], translation[1], translation[2]);
		if (scale) node.scale.set(scale[0], scale[1], scale[2]);
		return node;
	}
	normalizeData() {
		this?.nodes?.map?.((node, index) => {
			node.children = this.json?.nodes[index]?.children?.map((nodeId) => {
				const childNode = this.nodes[nodeId];
				if (childNode) childNode.parent = node;
				return childNode;
			});
		});
	}
}
async function loadGLTF(url) {
	let gltf;
	const ext = url.split(".").pop();
	const rootUrl = url.substring(0, url.lastIndexOf("/"));
	if (ext === "gltf") {
		const json = await fetch(url).then((response) => response.json());
		gltf = new GLTF(json, rootUrl, 0);
	} else {
		const glb = await fetch(url).then((response) => response.arrayBuffer());
		const jsonLength = new Uint32Array(glb, 12, 1)[0];
		const jsonChunk = new Uint8Array(glb, 20, jsonLength);
		const json = JSON.parse(new TextDecoder("utf-8").decode(jsonChunk));
		gltf = new GLTF(json, rootUrl, 28 + jsonLength, glb);
	}
	await gltf.parseData();
	return gltf;
}
var Type2NumOfComponent;
(function (Type2NumOfComponent) {
	Type2NumOfComponent[(Type2NumOfComponent["SCALAR"] = 1)] = "SCALAR";
	Type2NumOfComponent[(Type2NumOfComponent["VEC2"] = 2)] = "VEC2";
	Type2NumOfComponent[(Type2NumOfComponent["VEC3"] = 3)] = "VEC3";
	Type2NumOfComponent[(Type2NumOfComponent["VEC4"] = 4)] = "VEC4";
	Type2NumOfComponent[(Type2NumOfComponent["MAT2"] = 4)] = "MAT2";
	Type2NumOfComponent[(Type2NumOfComponent["MAT3"] = 9)] = "MAT3";
	Type2NumOfComponent[(Type2NumOfComponent["MAT4"] = 16)] = "MAT4";
})(Type2NumOfComponent || (Type2NumOfComponent = {}));

async function loadTexture(url) {
	const img = document.createElement("img");
	img.src = url;
	await img.decode();
	const imageBitmap = await createImageBitmap(img);
	const baseTexture = new Texture({
		size: { width: imageBitmap.width, height: imageBitmap.height, depth: 1 },
		data: {
			source: imageBitmap
		},
		format: "rgba8unorm"
	});
	return baseTexture;
}

//from three.js
class Spherical {
	constructor(radius = 1, phi = 0, theta = 0) {
		this.radius = radius;
		this.phi = phi; // polar angle
		this.theta = theta; // azimuthal angle
		return this;
	}
	set(radius, phi, theta) {
		this.radius = radius;
		this.phi = phi;
		this.theta = theta;
		return this;
	}
	copy(other) {
		this.radius = other.radius;
		this.phi = other.phi;
		this.theta = other.theta;
		return this;
	}
	// restrict phi to be between EPS and PI-EPS
	makeSafe() {
		const EPS = 0.000001;
		this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
		return this;
	}
	setFromVector3(v) {
		return this.setFromCartesianCoords(v.x, v.y, v.z);
	}
	setFromCartesianCoords(x, y, z) {
		this.radius = Math.sqrt(x * x + y * y + z * z);
		if (this.radius === 0) {
			this.theta = 0;
			this.phi = 0;
		} else {
			this.theta = Math.atan2(x, z);
			this.phi = Math.acos(GMath.clamp(y / this.radius, -1, 1));
		}
		return this;
	}
	clone() {
		return new Spherical(this.radius, this.phi, this.theta);
	}
}

//from three.js
const _changeEvent = { type: "change" };
const _startEvent = { type: "start" };
const _endEvent = { type: "end" };
class OrbitControl extends EventDispatcher {
	constructor(object, domElement) {
		super();
		if (domElement === undefined)
			console.warn('OrbitControls: The second parameter "domElement" is now mandatory.');
		if (domElement === document)
			console.error(
				'OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'
			);
		this.object = object;
		this.domElement = domElement;
		this.domElement.style.touchAction = "none"; // disable touch scroll
		// Set to false to disable this control
		this.enabled = true;
		// "target" sets the location of focus, where the object orbits around
		this.target = new Vector3();
		// How far you can dolly in and out ( PerspectiveCamera only )
		this.minDistance = 0;
		this.maxDistance = Infinity;
		// How far you can zoom in and out ( OrthographicCamera only )
		this.minZoom = 0;
		this.maxZoom = Infinity;
		// How far you can orbit vertically, upper and lower limits.
		// Range is 0 to Math.PI radians.
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians
		// How far you can orbit horizontally, upper and lower limits.
		// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
		this.minAzimuthAngle = -Infinity; // radians
		this.maxAzimuthAngle = Infinity; // radians
		// Set to true to enable damping (inertia)
		// If damping is enabled, you must call controls.update() in your animation loop
		this.enableDamping = false;
		this.dampingFactor = 0.05;
		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
		// Set to false to disable zooming
		this.enableZoom = true;
		this.zoomSpeed = 1.0;
		// Set to false to disable rotating
		this.enableRotate = true;
		this.rotateSpeed = 1.0;
		// Set to false to disable panning
		this.enablePan = true;
		this.panSpeed = 1.0;
		this.screenSpacePanning = false; // if false, pan orthogonal to world-space direction camera.up
		this.keyPanSpeed = 7.0; // pixels moved per arrow key push
		// Set to true to automatically rotate around the target
		// If auto-rotate is enabled, you must call controls.update() in your animation loop
		this.autoRotate = false;
		this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60
		// The four arrow keys
		this.keys = {
			LEFT: "ArrowLeft",
			UP: "ArrowUp",
			RIGHT: "ArrowRight",
			BOTTOM: "ArrowDown"
		};
		// Mouse buttons
		this.mouseButtons = {
			LEFT: MOUSE.ROTATE,
			MIDDLE: MOUSE.DOLLY,
			RIGHT: MOUSE.PAN
		};
		// Touch fingers
		this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };
		// for reset
		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.zoom0 = this.object.zoom;
		// the target DOM element for key events
		this._domElementKeyEvents = null;
		//
		// public methods
		//
		// this method is exposed, but perhaps it would be better if we can make it private...
		const that = this;
		this.update = (function () {
			const offset = new Vector3();
			// so camera.up is the orbit axis
			const quat = new Quaternion().setFromUnitVectors(that.object.up, new Vector3(0, 1, 0));
			const quatInverse = quat.clone().invert();
			const lastPosition = new Vector3();
			const lastQuaternion = new Quaternion();
			const twoPI = 2 * Math.PI;
			return function update() {
				const position = that.object.position;
				offset.copy(position).subtract(that.target);
				// rotate offset to "y-axis-is-up" space
				offset.applyQuaternion(quat);
				// angle from z-axis around y-axis
				spherical.setFromVector3(offset);
				if (that.autoRotate && state === STATE.NONE) {
					rotateLeft(that.getAutoRotationAngle());
				}
				if (that.enableDamping) {
					spherical.theta += sphericalDelta.theta * that.dampingFactor;
					spherical.phi += sphericalDelta.phi * that.dampingFactor;
				} else {
					spherical.theta += sphericalDelta.theta;
					spherical.phi += sphericalDelta.phi;
				}
				// restrict theta to be between desired limits
				let min = that.minAzimuthAngle;
				let max = that.maxAzimuthAngle;
				if (isFinite(min) && isFinite(max)) {
					if (min < -Math.PI) min += twoPI;
					else if (min > Math.PI) min -= twoPI;
					if (max < -Math.PI) max += twoPI;
					else if (max > Math.PI) max -= twoPI;
					if (min <= max) {
						spherical.theta = Math.max(min, Math.min(max, spherical.theta));
					} else {
						spherical.theta =
							spherical.theta > (min + max) / 2
								? Math.max(min, spherical.theta)
								: Math.min(max, spherical.theta);
					}
				}
				// restrict phi to be between desired limits
				spherical.phi = Math.max(that.minPolarAngle, Math.min(that.maxPolarAngle, spherical.phi));
				spherical.makeSafe();
				spherical.radius *= scale;
				// restrict radius to be between desired limits
				spherical.radius = Math.max(that.minDistance, Math.min(that.maxDistance, spherical.radius));
				// move target to panned location
				if (that.enableDamping === true) {
					that.target.addScaledVector(panOffset, that.dampingFactor);
				} else {
					that.target.add(panOffset);
				}
				Vector3.fromSpherical(spherical, offset);
				// rotate offset back to "camera-up-vector-is-up" space
				offset.applyQuaternion(quatInverse);
				position.copy(that.target).add(offset);
				that.object.lookAt(that.target.x, that.target.y, that.target.z);
				if (that.enableDamping === true) {
					sphericalDelta.theta *= 1 - that.dampingFactor;
					sphericalDelta.phi *= 1 - that.dampingFactor;
					Vector3.multiplyByScalar(panOffset, 1 - that.dampingFactor, panOffset);
					// panOffset.multiplyScalar( 1 - this.dampingFactor );
				} else {
					sphericalDelta.set(0, 0, 0);
					panOffset.set(0, 0, 0);
				}
				scale = 1;
				// update condition is:
				// min(camera displacement, camera rotation in radians)^2 > EPS
				// using small-angle approximation cos(x/2) = 1 - x^2 / 8
				if (
					zoomChanged ||
					Vector3.distanceSquared(lastPosition, that.object.position) > EPS ||
					8 * (1 - lastQuaternion.dot(that.object.quaternion)) > EPS
				) {
					that.dispatchEvent(_changeEvent);
					//lastPosition.copy( this.object.position );
					Vector3.clone(that.object.position, lastPosition);
					Quaternion.clone(that.object.quaternion, lastQuaternion);
					//lastQuaternion.copy( this.object.quaternion );
					zoomChanged = false;
					return true;
				}
				return false;
			};
		})();
		this.init();
	}
	getPolarAngle() {
		return this.spherical.phi;
	}
	getAzimuthalAngle() {
		return this.spherical.theta;
	}
	getDistance() {
		return Vector3.distance(this.object.position, this.target);
	}
	listenToKeyEvents(domElement) {
		domElement.addEventListener("keydown", this.onKeyDown);
		this._domElementKeyEvents = domElement;
	}
	saveState() {
		Vector3.clone(this.target, this.target0);
		//this.target0.copy( this.target );
		Vector3.clone(this.object.position, this.position0);
		//this.position0.copy( this.object.position );
		this.zoom0 = this.object.zoom;
	}
	reset() {
		Vector3.clone(this.target0, this.target);
		//this.target.copy( this.target0 );
		Vector3.clone(this.position0, this.object.position);
		//this.object.position.copy( this.position0 );
		this.object.zoom = this.zoom0;
		this.object.updateProjectionMatrix();
		this.dispatchEvent(_changeEvent);
		this.update();
		state = STATE.NONE;
	}
	init() {
		const that = this;
		const panLeft = (function () {
			const v = new Vector3();
			return function panLeft(distance, objectMatrix) {
				v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix
				v.multiplyByScalar(-distance);
				panOffset.add(v);
			};
		})();
		const panUp = (function () {
			const panUpV = new Vector3();
			return function panUp(distance, objectMatrix) {
				if (that.screenSpacePanning === true) {
					panUpV.setFromMatrixColumn(objectMatrix, 1);
				} else {
					panUpV.setFromMatrixColumn(objectMatrix, 0);
					//panUpV.crossVectors( this.object.up, panUpV );
					Vector3.cross(that.object.up, panUpV, panUpV);
				}
				panUpV.multiplyByScalar(distance);
				panOffset.add(panUpV);
			};
		})();
		// deltaX and deltaY are in pixels; right and down are positive
		const pan = (function () {
			const offset = new Vector3();
			return function pan(deltaX, deltaY) {
				const element = that.domElement;
				if (that.object.isPerspectiveCamera) {
					// perspective
					const position = that.object.position;
					offset.copy(position).subtract(that.target);
					let targetDistance = offset.length();
					// half of the fov is center to top of screen
					targetDistance *= Math.tan(((that.object.fov / 2) * Math.PI) / 180.0);
					// we use only clientHeight here so aspect ratio does not distort speed
					panLeft((2 * deltaX * targetDistance) / element.clientHeight, that.object.modelMatrix);
					panUp((2 * deltaY * targetDistance) / element.clientHeight, that.object.modelMatrix);
				} else if (that.object.isOrthographicCamera) {
					// orthographic
					panLeft(
						(deltaX * (that.object.right - that.object.left)) / that.object.zoom / element.clientWidth,
						that.object.modelMatrix
					);
					panUp(
						(deltaY * (that.object.top - that.object.bottom)) / that.object.zoom / element.clientHeight,
						that.object.modelMatrix
					);
				} else {
					// camera neither orthographic nor perspective
					console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
					that.enablePan = false;
				}
			};
		})();
		const dollyOut = (dollyScale) => {
			if (this.object.isPerspectiveCamera) {
				scale /= dollyScale;
			} else if (this.object.isOrthographicCamera) {
				this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom * dollyScale));
				this.object.updateProjectionMatrix();
				zoomChanged = true;
			} else {
				console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
				this.enableZoom = false;
			}
		};
		const dollyIn = (dollyScale) => {
			if (this.object.isPerspectiveCamera) {
				scale *= dollyScale;
			} else if (this.object.isOrthographicCamera) {
				this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / dollyScale));
				this.object.updateProjectionMatrix();
				zoomChanged = true;
			} else {
				console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
				this.enableZoom = false;
			}
		};
		const handleMouseMoveRotate = (event) => {
			rotateEnd.set(event.clientX, event.clientY);
			Vector2.subtract(rotateEnd, rotateStart, rotateDelta);
			Vector2.multiplyByScalar(rotateDelta, this.rotateSpeed, rotateDelta);
			//rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( this.rotateSpeed );
			const element = this.domElement;
			rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height
			rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);
			Vector2.clone(rotateEnd, rotateStart);
			//rotateStart.copy( rotateEnd );
			this.update();
		};
		const handleMouseMoveDolly = (event) => {
			dollyEnd.set(event.clientX, event.clientY);
			Vector2.subtract(dollyEnd, dollyStart, dollyDelta);
			// dollyDelta.subVectors( dollyEnd, dollyStart );
			if (dollyDelta.y > 0) {
				dollyOut(getZoomScale());
			} else if (dollyDelta.y < 0) {
				dollyIn(getZoomScale());
			}
			Vector2.clone(dollyEnd, dollyStart);
			// dollyStart.copy( dollyEnd );
			this.update();
		};
		const handleMouseMovePan = (event) => {
			panEnd.set(event.clientX, event.clientY);
			Vector2.subtract(panEnd, panStart, panDelta);
			Vector2.multiplyByScalar(panDelta, this.panSpeed, panDelta);
			//panDelta.subVectors( panEnd, panStart ).multiplyScalar( this.panSpeed );
			pan(panDelta.x, panDelta.y);
			Vector2.clone(panEnd, panStart);
			//panStart.copy( panEnd );
			this.update();
		};
		const handleMouseWheel = (event) => {
			if (event.deltaY < 0) {
				dollyIn(getZoomScale());
			} else if (event.deltaY > 0) {
				dollyOut(getZoomScale());
			}
			this.update();
		};
		const handleKeyDown = (event) => {
			let needsUpdate = false;
			switch (event.code) {
				case this.keys.UP:
					pan(0, this.keyPanSpeed);
					needsUpdate = true;
					break;
				case this.keys.BOTTOM:
					pan(0, -this.keyPanSpeed);
					needsUpdate = true;
					break;
				case this.keys.LEFT:
					pan(this.keyPanSpeed, 0);
					needsUpdate = true;
					break;
				case this.keys.RIGHT:
					pan(-this.keyPanSpeed, 0);
					needsUpdate = true;
					break;
			}
			if (needsUpdate) {
				// prevent the browser from scrolling on cursor keys
				event.preventDefault();
				this.update();
			}
		};
		const handleTouchStartDollyPan = () => {
			if (this.enableZoom) handleTouchStartDolly();
			if (this.enablePan) handleTouchStartPan();
		};
		const handleTouchStartDollyRotate = () => {
			if (this.enableZoom) handleTouchStartDolly();
			if (this.enableRotate) handleTouchStartRotate();
		};
		const handleTouchMoveRotate = (event) => {
			if (pointers.length == 1) {
				rotateEnd.set(event.pageX, event.pageY);
			} else {
				const position = getSecondPointerPosition(event);
				const x = 0.5 * (event.pageX + position.x);
				const y = 0.5 * (event.pageY + position.y);
				rotateEnd.set(x, y);
			}
			Vector2.subtract(rotateEnd, rotateStart, rotateDelta);
			Vector2.multiplyByScalar(rotateDelta, this.rotateSpeed, rotateDelta);
			//rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( this.rotateSpeed );
			const element = this.domElement;
			rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height
			rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);
			Vector2.clone(rotateEnd, rotateStart);
			//rotateStart.copy( rotateEnd );
		};
		const handleTouchMovePan = (event) => {
			if (pointers.length === 1) {
				panEnd.set(event.pageX, event.pageY);
			} else {
				const position = getSecondPointerPosition(event);
				const x = 0.5 * (event.pageX + position.x);
				const y = 0.5 * (event.pageY + position.y);
				panEnd.set(x, y);
			}
			Vector2.subtract(panEnd, panStart, panDelta);
			Vector2.multiplyByScalar(panDelta, this.panSpeed, panDelta);
			//panDelta.subVectors( panEnd, panStart ).multiplyScalar( this.panSpeed );
			pan(panDelta.x, panDelta.y);
			Vector2.clone(panEnd, panStart);
			// panStart.copy( panEnd );
		};
		const handleTouchMoveDolly = (event) => {
			const position = getSecondPointerPosition(event);
			const dx = event.pageX - position.x;
			const dy = event.pageY - position.y;
			const distance = Math.sqrt(dx * dx + dy * dy);
			dollyEnd.set(0, distance);
			dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, this.zoomSpeed));
			dollyOut(dollyDelta.y);
			Vector2.clone(dollyEnd, dollyStart);
			//dollyStart.copy( dollyEnd );
		};
		const handleTouchMoveDollyPan = (event) => {
			if (this.enableZoom) handleTouchMoveDolly(event);
			if (this.enablePan) handleTouchMovePan(event);
		};
		const handleTouchMoveDollyRotate = (event) => {
			if (this.enableZoom) handleTouchMoveDolly(event);
			if (this.enableRotate) handleTouchMoveRotate(event);
		};
		//
		// event handlers - FSM: listen for events and reset state
		//
		this.onPointerDown = (event) => {
			if (this.enabled === false) return;
			if (pointers.length === 0) {
				this.domElement.setPointerCapture(event.pointerId);
				this.domElement.addEventListener("pointermove", this.onPointerMove);
				this.domElement.addEventListener("pointerup", this.onPointerUp);
			}
			//
			addPointer(event);
			if (event.pointerType === "touch") {
				onTouchStart(event);
			} else {
				onMouseDown(event);
			}
		};
		this.onPointerMove = (event) => {
			if (this.enabled === false) return;
			if (event.pointerType === "touch") {
				onTouchMove(event);
			} else {
				onMouseMove(event);
			}
		};
		this.onPointerUp = (event) => {
			removePointer(event);
			if (pointers.length === 0) {
				this.domElement.releasePointerCapture(event.pointerId);
				this.domElement.removeEventListener("pointermove", this.onPointerMove);
				this.domElement.removeEventListener("pointerup", this.onPointerUp);
			}
			this.dispatchEvent(_endEvent);
			state = STATE.NONE;
		};
		const onMouseDown = (event) => {
			let mouseAction;
			switch (event.button) {
				case 0:
					mouseAction = this.mouseButtons.LEFT;
					break;
				case 1:
					mouseAction = this.mouseButtons.MIDDLE;
					break;
				case 2:
					mouseAction = this.mouseButtons.RIGHT;
					break;
				default:
					mouseAction = -1;
			}
			switch (mouseAction) {
				case MOUSE.DOLLY:
					if (this.enableZoom === false) return;
					handleMouseDownDolly(event);
					state = STATE.DOLLY;
					break;
				case MOUSE.ROTATE:
					if (event.ctrlKey || event.metaKey || event.shiftKey) {
						if (this.enablePan === false) return;
						handleMouseDownPan(event);
						state = STATE.PAN;
					} else {
						if (this.enableRotate === false) return;
						handleMouseDownRotate(event);
						state = STATE.ROTATE;
					}
					break;
				case MOUSE.PAN:
					if (event.ctrlKey || event.metaKey || event.shiftKey) {
						if (this.enableRotate === false) return;
						handleMouseDownRotate(event);
						state = STATE.ROTATE;
					} else {
						if (this.enablePan === false) return;
						handleMouseDownPan(event);
						state = STATE.PAN;
					}
					break;
				default:
					state = STATE.NONE;
			}
			if (state !== STATE.NONE) {
				this.dispatchEvent(_startEvent);
			}
		};
		const onMouseMove = (event) => {
			switch (state) {
				case STATE.ROTATE:
					if (this.enableRotate === false) return;
					handleMouseMoveRotate(event);
					break;
				case STATE.DOLLY:
					if (this.enableZoom === false) return;
					handleMouseMoveDolly(event);
					break;
				case STATE.PAN:
					if (this.enablePan === false) return;
					handleMouseMovePan(event);
					break;
			}
		};
		this.onMouseWheel = (event) => {
			if (this.enabled === false || this.enableZoom === false || state !== STATE.NONE) return;
			event.preventDefault();
			this.dispatchEvent(_startEvent);
			handleMouseWheel(event);
			this.dispatchEvent(_endEvent);
		};
		this.onKeyDown = (event) => {
			if (this.enabled === false || this.enablePan === false) return;
			handleKeyDown(event);
		};
		const onTouchStart = (event) => {
			trackPointer(event);
			switch (pointers.length) {
				case 1:
					switch (this.touches.ONE) {
						case TOUCH.ROTATE:
							if (this.enableRotate === false) return;
							handleTouchStartRotate();
							state = STATE.TOUCH_ROTATE;
							break;
						case TOUCH.PAN:
							if (this.enablePan === false) return;
							handleTouchStartPan();
							state = STATE.TOUCH_PAN;
							break;
						default:
							state = STATE.NONE;
					}
					break;
				case 2:
					switch (this.touches.TWO) {
						case TOUCH.DOLLY_PAN:
							if (this.enableZoom === false && this.enablePan === false) return;
							handleTouchStartDollyPan();
							state = STATE.TOUCH_DOLLY_PAN;
							break;
						case TOUCH.DOLLY_ROTATE:
							if (this.enableZoom === false && this.enableRotate === false) return;
							handleTouchStartDollyRotate();
							state = STATE.TOUCH_DOLLY_ROTATE;
							break;
						default:
							state = STATE.NONE;
					}
					break;
				default:
					state = STATE.NONE;
			}
			if (state !== STATE.NONE) {
				this.dispatchEvent(_startEvent);
			}
		};
		const onTouchMove = (event) => {
			trackPointer(event);
			switch (state) {
				case STATE.TOUCH_ROTATE:
					if (this.enableRotate === false) return;
					handleTouchMoveRotate(event);
					this.update();
					break;
				case STATE.TOUCH_PAN:
					if (this.enablePan === false) return;
					handleTouchMovePan(event);
					this.update();
					break;
				case STATE.TOUCH_DOLLY_PAN:
					if (this.enableZoom === false && this.enablePan === false) return;
					handleTouchMoveDollyPan(event);
					this.update();
					break;
				case STATE.TOUCH_DOLLY_ROTATE:
					if (this.enableZoom === false && this.enableRotate === false) return;
					handleTouchMoveDollyRotate(event);
					this.update();
					break;
				default:
					state = STATE.NONE;
			}
		};
		this.onContextMenu = (event) => {
			if (this.enabled === false) return;
			event.preventDefault();
		};
		this.getAutoRotationAngle = () => {
			return ((2 * Math.PI) / 60 / 60) * this.autoRotateSpeed;
		};
		const getZoomScale = () => {
			return Math.pow(0.95, this.zoomSpeed);
		};
		this.domElement.addEventListener("contextmenu", this.onContextMenu);
		this.domElement.addEventListener("pointerdown", this.onPointerDown);
		this.domElement.addEventListener("pointercancel", onPointerCancel);
		this.domElement.addEventListener("wheel", this.onMouseWheel, {
			passive: false
		});
	}
	dispose() {
		this.domElement.removeEventListener("contextmenu", this.onContextMenu);
		this.domElement.removeEventListener("pointerdown", this.onPointerDown);
		this.domElement.removeEventListener("pointercancel", onPointerCancel);
		this.domElement.removeEventListener("wheel", this.onMouseWheel);
		this.domElement.removeEventListener("pointermove", this.onPointerMove);
		this.domElement.removeEventListener("pointerup", this.onPointerUp);
		if (this._domElementKeyEvents !== null) {
			this._domElementKeyEvents.removeEventListener("keydown", this.onKeyDown);
		}
		//this.dispatchEvent( { type: 'dispose' } ); // should this be added here?
	}
}
const STATE = {
	NONE: -1,
	ROTATE: 0,
	DOLLY: 1,
	PAN: 2,
	TOUCH_ROTATE: 3,
	TOUCH_PAN: 4,
	TOUCH_DOLLY_PAN: 5,
	TOUCH_DOLLY_ROTATE: 6
};
let state = STATE.NONE;
const EPS = 0.000001;
// current position in spherical coordinates
const spherical = new Spherical();
const sphericalDelta = new Spherical();
let scale = 1;
const panOffset = new Vector3();
let zoomChanged = false;
const rotateStart = new Vector2();
const rotateEnd = new Vector2();
const rotateDelta = new Vector2();
const panStart = new Vector2();
const panEnd = new Vector2();
const panDelta = new Vector2();
const dollyStart = new Vector2();
const dollyEnd = new Vector2();
const dollyDelta = new Vector2();
const pointers = [];
const pointerPositions = {};
var MOUSE;
(function (MOUSE) {
	MOUSE[(MOUSE["LEFT"] = 0)] = "LEFT";
	MOUSE[(MOUSE["MIDDLE"] = 1)] = "MIDDLE";
	MOUSE[(MOUSE["RIGHT"] = 2)] = "RIGHT";
	MOUSE[(MOUSE["ROTATE"] = 0)] = "ROTATE";
	MOUSE[(MOUSE["DOLLY"] = 1)] = "DOLLY";
	MOUSE[(MOUSE["PAN"] = 2)] = "PAN";
})(MOUSE || (MOUSE = {}));
var TOUCH;
(function (TOUCH) {
	TOUCH[(TOUCH["ROTATE"] = 0)] = "ROTATE";
	TOUCH[(TOUCH["PAN"] = 1)] = "PAN";
	TOUCH[(TOUCH["DOLLY_PAN"] = 2)] = "DOLLY_PAN";
	TOUCH[(TOUCH["DOLLY_ROTATE"] = 3)] = "DOLLY_ROTATE";
})(TOUCH || (TOUCH = {}));
function rotateLeft(angle) {
	sphericalDelta.theta -= angle;
}
function rotateUp(angle) {
	sphericalDelta.phi -= angle;
}
function addPointer(event) {
	pointers.push(event);
}
function removePointer(event) {
	delete pointerPositions[event.pointerId];
	for (let i = 0; i < pointers.length; i++) {
		if (pointers[i].pointerId == event.pointerId) {
			pointers.splice(i, 1);
			return;
		}
	}
}
function trackPointer(event) {
	let position = pointerPositions[event.pointerId];
	if (position === undefined) {
		position = new Vector2();
		pointerPositions[event.pointerId] = position;
	}
	position.set(event.pageX, event.pageY);
}
function getSecondPointerPosition(event) {
	const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];
	return pointerPositions[pointer.pointerId];
}
function handleMouseDownRotate(event) {
	rotateStart.set(event.clientX, event.clientY);
}
function handleMouseDownDolly(event) {
	dollyStart.set(event.clientX, event.clientY);
}
function handleMouseDownPan(event) {
	panStart.set(event.clientX, event.clientY);
}
function onPointerCancel(event) {
	removePointer(event);
}
function handleTouchStartRotate() {
	if (pointers.length === 1) {
		rotateStart.set(pointers[0].pageX, pointers[0].pageY);
	} else {
		const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
		const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
		rotateStart.set(x, y);
	}
}
function handleTouchStartPan() {
	if (pointers.length === 1) {
		panStart.set(pointers[0].pageX, pointers[0].pageY);
	} else {
		const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
		const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
		panStart.set(x, y);
	}
}
function handleTouchStartDolly() {
	const dx = pointers[0].pageX - pointers[1].pageX;
	const dy = pointers[0].pageY - pointers[1].pageY;
	const distance = Math.sqrt(dx * dx + dy * dy);
	dollyStart.set(0, distance);
}

export {
	AddressMode,
	AmbientLight,
	Attachment,
	Attribute,
	Axes,
	BindGroup,
	BindGroupEntity,
	BlendFactor,
	BlendOperation,
	BlinnPhongMaterial,
	BloomPostEffect,
	BoxGeometry,
	Buffer,
	BufferUsage,
	Color,
	ColorWriteFlags,
	CompareFunction,
	Context,
	CubeTextureLoader,
	CullMode,
	DirectionalLight,
	DrawCommand,
	FilterMode,
	FrontFace,
	IndexFormat,
	InputStepMode,
	Mesh,
	OrbitControl,
	OrthographicCamera,
	PbrMaterial,
	PerspectiveCamera,
	PlaneGeometry,
	PointLight,
	PrimitiveTopology,
	RenderState,
	Sampler,
	Scene,
	ShaderMaterial,
	ShaderStage,
	SkyBox,
	SphereGeometry,
	SpotLight,
	StencilOperation,
	StorageTextureAccess,
	Texture,
	TextureAspect,
	TextureDimension,
	TextureFormat,
	TextureSampleType,
	TextureUsage,
	TextureViewDimension,
	TorusKnotGeometry,
	Vector3,
	VertexFormat,
	loadGLTF,
	loadTexture
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL1dlYkdQVUNvbnN0YW50LnRzIiwiLi4vc3JjL3JlbmRlci9CdWZmZXIudHMiLCIuLi9zcmMvcmVuZGVyL0RyYXdDb21tYW5kLnRzIiwiLi4vc3JjL2NvcmUvV2ViR1BVVHlwZXMudHMiLCIuLi9zcmMvdXRpbHMvTWlwbWFwR2VuZXJhdG9yLnRzIiwiLi4vc3JjL3JlbmRlci9QaXBlbGluZUxheW91dC50cyIsIi4uL3NyYy9yZW5kZXIvUGlwZWxpbmUudHMiLCIuLi9zcmMvdXRpbHMvZGVmaW5lZC50cyIsIi4uL25vZGVfbW9kdWxlcy9tZXJzZW5uZS10d2lzdGVyL3NyYy9tZXJzZW5uZS10d2lzdGVyLmpzIiwiLi4vc3JjL3V0aWxzL2RlZmF1bHRWYWx1ZS50cyIsIi4uL3NyYy9tYXRoL01hdGgudHMiLCIuLi9zcmMvbWF0aC9WZWN0b3I0LnRzIiwiLi4vc3JjL21hdGgvVmVjdG9yMy50cyIsIi4uL3NyYy9saWdodC9MaWdodC50cyIsIi4uL3NyYy9saWdodC9BbWJpZW50TGlnaHQudHMiLCIuLi9zcmMvbWF0aC9Db2xvci50cyIsIi4uL3NyYy9tYXRoL1ZlY3RvcjIudHMiLCIuLi9zcmMvbWF0aC9NYXRyaXgyLnRzIiwiLi4vc3JjL21hdGgvTWF0cml4My50cyIsIi4uL3NyYy9tYXRoL01hdHJpeDQudHMiLCIuLi9zcmMvcmVuZGVyL1VuaWZvcm1zLnRzIiwiLi4vc3JjL3JlbmRlci9CaW5kR3JvdXBFbnRpdHkudHMiLCIuLi9zcmMvcmVuZGVyL0JpbmRHcm91cExheW91dEVudHJ5LnRzIiwiLi4vc3JjL3JlbmRlci9CaW5kR3JvdXBMYXlvdXQudHMiLCIuLi9zcmMvcmVuZGVyL0JpbmRHcm91cC50cyIsIi4uL3NyYy9yZW5kZXIvU2hhZGVyRGF0YS50cyIsIi4uL3NyYy9yZW5kZXIvVW5pZm9ybUJ1ZmZlci50cyIsIi4uL3NyYy9yZW5kZXIvVGV4dHVyZS50cyIsIi4uL3NyYy9yZW5kZXIvU2FtcGxlci50cyIsIi4uL3NyYy9jb3JlL0xpZ2h0TWFuZ2VyLnRzIiwiLi4vc3JjL3JlbmRlci9Db250ZXh0LnRzIiwiLi4vc3JjL3JlbmRlci9SZW5kZXJTdGF0ZS50cyIsIi4uL3NyYy9yZW5kZXIvQXR0YWNobWVudC50cyIsIi4uL3NyYy9yZW5kZXIvQXR0cmlidXRlLnRzIiwiLi4vc3JjL21hdGgvUXVhdGVybmlvbi50cyIsIi4uL3NyYy9jb3JlL1JlbmRlck9iamVjdC50cyIsIi4uL3NyYy9tZXNoL01lc2gudHMiLCIuLi9zcmMvY29yZS9Cb3VuZGluZ1NwaGVyZS50cyIsIi4uL3NyYy9yZW5kZXIvVmVydGV4dEJ1ZmZlci50cyIsIi4uL3NyYy9yZW5kZXIvQXR0cmlidXRlcy50cyIsIi4uL3NyYy9yZW5kZXIvSW5kZXhCdWZmZXIudHMiLCIuLi9zcmMvdXRpbHMvY29tYmluZS50cyIsIi4uL3NyYy9nZW9tZXRyeS9HZW9tZXRyeS50cyIsIi4uL3NyYy9zaGFkZXIvV2dzbFByZXByb2Nlc3Nvci50cyIsIi4uL3NyYy9zaGFkZXIvc2hhZGVyQ2h1bmsvbGlnaHQvbGlnaHQudHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL2xpZ2h0L2xpZ2h0Q29tbW9uLnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9wYnIvYnJkZi50cyIsIi4uL3NyYy9zaGFkZXIvc2hhZGVyQ2h1bmsvcGJyL3BickZ1bmN0aW9uLnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9wYnIvcGJyU3RydWN0LnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9wYnIvcGJyVGV4dHVyZS50cyIsIi4uL3NyYy9zaGFkZXIvc2hhZGVyQ2h1bmsvcGJyL3BiclV0aWxzLnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9waG9uZy9waG9uZ0Z1bmN0aW9uLnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9waG9uZy9waG9uZ1V0aWxzLnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9lbnZpcm9ubWVudC9lbnZpcm9ubWVudC50cyIsIi4uL3NyYy9zaGFkZXIvc2hhZGVyQ2h1bmsvcGhvbmcvYmxpbm5fcGhvbmcudHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL3Bici9pYmwudHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL25vcm1hbC9nZXROb3JtYWxCYWNrVXAudHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL1NoYWRlckNodW5rLnRzIiwiLi4vc3JjL3NoYWRlci9tYXRlcmlhbC9waG9uZ1ZlcnQudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL3Bob25nRnJhZy50cyIsIi4uL3NyYy9zaGFkZXIvbWF0ZXJpYWwvY29sb3JGcmFnLnRzIiwiLi4vc3JjL3NoYWRlci9tYXRlcmlhbC9jb2xvclZlcnQudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL3BickZyYWcudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL3BiclZlcnQudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL3NreUJveEZyYWcudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL3NreUJveFZlcnQudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL3F1YWRGcmFnLnRzIiwiLi4vc3JjL3NoYWRlci9tYXRlcmlhbC9xdWFkVmVydC50cyIsIi4uL3NyYy9zaGFkZXIvbWF0ZXJpYWwvcGJyX3ZzLnRzIiwiLi4vc3JjL3NoYWRlci9tYXRlcmlhbC9wYnJfZnMudHMiLCIuLi9zcmMvc2hhZGVyL3Bvc3RQcm9jZXNzL2Jsb29tL0JsdXIudHMiLCIuLi9zcmMvc2hhZGVyL3Bvc3RQcm9jZXNzL2Jsb29tL0x1bWlub3NpdHlIaWdoLnRzIiwiLi4vc3JjL3NoYWRlci9wb3N0UHJvY2Vzcy9ibGVuZC9ibGVuZEZyYWcudHMiLCIuLi9zcmMvc2hhZGVyL1NoYWRlcnMudHMiLCIuLi9zcmMvc2hhZGVyL1NoYWRlclNvdXJjZS50cyIsIi4uL3NyYy9tYXRlcmlhbC9NYXRlcmlhbC50cyIsIi4uL3NyYy9tYXRlcmlhbC9Db2xvck1hdGVyaWFsLnRzIiwiLi4vc3JjL21lc2gvQXhlcy50cyIsIi4uL3NyYy9nZW9tZXRyeS9Ta3lCb3hHZW9tZXRyeS50cyIsIi4uL3NyYy9sb2FkZXIvQ3ViZVRleHR1cmVMb2FkZXIudHMiLCIuLi9zcmMvdXRpbHMvZGVzdHJveU9iamVjdC50cyIsIi4uL3NyYy9jb3JlL1RleHR1cmVDYWNoZS50cyIsIi4uL3NyYy9tYXRlcmlhbC9Ta3lCb3hNYXRlcmlhbC50cyIsIi4uL3NyYy9tZXNoL1NreUJveC50cyIsIi4uL3NyYy91dGlscy9HZW9tZXRyeVV0aWxzLnRzIiwiLi4vc3JjL2dlb21ldHJ5L1NwaGVyZUdlb21ldHJ5LnRzIiwiLi4vc3JjL2dlb21ldHJ5L0JveEdlb21ldHJ5LnRzIiwiLi4vc3JjL2dlb21ldHJ5L1RvcnVzS25vdEdlb21ldHJ5LnRzIiwiLi4vc3JjL2dlb21ldHJ5L1BsYW5lR2VvbWV0cnkudHMiLCIuLi9zcmMvbWF0ZXJpYWwvQmxpbm5QaG9uZ01hdGVyaWFsLnRzIiwiLi4vc3JjL21hdGVyaWFsL1Bick1hdGVyaWFsLnRzIiwiLi4vc3JjL3V0aWxzL3VuaWZvcm1VdGlscy50cyIsIi4uL3NyYy9tYXRlcmlhbC9TaGFkZXJNYXRlcmlhbC50cyIsIi4uL3NyYy9jb3JlL0V2ZW50RGlzcGF0Y2hlci50cyIsIi4uL3NyYy9jb3JlL1JlbmRlclF1ZXVlLnRzIiwiLi4vc3JjL2NvcmUvRnJhbWVTdGF0ZS50cyIsIi4uL3NyYy91dGlscy9jcmVhdGVHdWlkLnRzIiwiLi4vc3JjL2NvcmUvUHJpbWl0aXZlTWFuZ2VyLnRzIiwiLi4vc3JjL3Bhc3MvUGFzcy50cyIsIi4uL3NyYy9yZW5kZXIvUmVuZGVyVGFyZ2V0LnRzIiwiLi4vc3JjL3Bhc3MvQmFzaWNQYXNzLnRzIiwiLi4vc3JjL3Bhc3MvU2hhZG93UGFzcy50cyIsIi4uL3NyYy9yZW5kZXJwaXBlbGluZS9Gb3J3YXJkUmVuZGVyTGluZS50cyIsIi4uL3NyYy9wb3N0LXByb2Nlc3MvUmVzb2x2ZUZyYW1lLnRzIiwiLi4vc3JjL3Bvc3QtcHJvY2Vzcy9Qb3N0RWZmZWN0Q29sbGVjdGlvbi50cyIsIi4uL3NyYy9TY2VuZS50cyIsIi4uL3NyYy9wb3N0LXByb2Nlc3MvUG9zdEVmZmVjdC50cyIsIi4uL3NyYy9wb3N0LXByb2Nlc3MvQmxvb21Qb3N0RWZmZWN0LnRzIiwiLi4vc3JjL21hdGgvUGxhbmUudHMiLCIuLi9zcmMvY29yZS9DdWxsaW5nVm9sdW1lLnRzIiwiLi4vc3JjL2NhbWVyYS9DYW1lcmEudHMiLCIuLi9zcmMvY2FtZXJhL1BlcnNwZWN0aXZlQ2FtZXJhLnRzIiwiLi4vc3JjL2NhbWVyYS9PcnRob2dyYXBoaWNDYW1lcmEudHMiLCIuLi9zcmMvbGlnaHQvc2hhZG93cy9CYXNlU2hhZG93LnRzIiwiLi4vc3JjL2xpZ2h0L3NoYWRvd3MvU3BvdExpZ2h0U2hhZG93LnRzIiwiLi4vc3JjL2xpZ2h0L1Nwb3RMaWdodC50cyIsIi4uL3NyYy9saWdodC9zaGFkb3dzL1BvaW50TGlnaHRTaGFkb3cudHMiLCIuLi9zcmMvbGlnaHQvUG9pbnRMaWdodC50cyIsIi4uL3NyYy9saWdodC9zaGFkb3dzL0RpcmVjdGlvbmFsTGlnaHRTaGFkb3cudHMiLCIuLi9zcmMvbGlnaHQvRGlyZWN0aW9uYWxMaWdodC50cyIsIi4uL3NyYy91dGlscy9nbHRmVXRpbHMudHMiLCIuLi9zcmMvbWVzaC9Ob2RlLnRzIiwiLi4vc3JjL2xvYWRlci9nbHRmL2xpYnMvQW5pbWF0aW9uLnRzIiwiLi4vc3JjL2xvYWRlci9nbHRmL2xpYnMvQW5pbWF0aW9uQ2hhbm5lbC50cyIsIi4uL3NyYy9sb2FkZXIvZ2x0Zi9saWJzL0FuaW1hdGlvblNhbXBsZXIudHMiLCIuLi9zcmMvbG9hZGVyL2dsdGYvbGlicy9BbmltYXRpb25DaGFubmVsVGFyZ2V0LnRzIiwiLi4vc3JjL2xvYWRlci9HTFRGTG9hZGVyLnRzIiwiLi4vc3JjL3V0aWxzL3V0aWxzLnRzIiwiLi4vc3JjL21hdGgvU3BoZXJpY2FsLnRzIiwiLi4vc3JjL2NvbnRyb2wvT3JiaXRDb250cm9sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9leHBvcnRcclxuZXhwb3J0IGVudW0gUHJlZGVmaW5lZENvbG9yU3BhY2Uge1xyXG5cdFNSR0IgPSBcInNyZ2JcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvZXhwb3J0XHJcbmV4cG9ydCBlbnVtIFBvd2VyUHJlZmVyZW5jZSB7XHJcblx0TG93UG93ZXIgPSBcImxvdy1wb3dlclwiLFxyXG5cdEhpZ2hQZXJmb3JtYW5jZSA9IFwiaGlnaC1wZXJmb3JtYW5jZVwiXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gRmVhdHVyZU5hbWUge1xyXG5cdERlcHRoQ2xpcENvbnRyb2wgPSBcImRlcHRoLWNsaXAtY29udHJvbFwiLFxyXG5cdERlcHRoMjRVbm9ybVN0ZW5jaWw4ID0gXCJkZXB0aDI0dW5vcm0tc3RlbmNpbDhcIixcclxuXHREZXB0aDMyRmxvYXRTdGVuY2lsOCA9IFwiZGVwdGgzMmZsb2F0LXN0ZW5jaWw4XCIsXHJcblx0VGV4dHVyZUNvbXByZXNzaW9uQkMgPSBcInRleHR1cmUtY29tcHJlc3Npb24tYmNcIixcclxuXHRUZXh0dXJlQ29tcHJlc3Npb25FVEMyID0gXCJ0ZXh0dXJlLWNvbXByZXNzaW9uLWV0YzJcIixcclxuXHRUZXh0dXJlQ29tcHJlc3Npb25BU1RDID0gXCJ0ZXh0dXJlLWNvbXByZXNzaW9uLWFzdGNcIixcclxuXHRUaW1lc3RhbXBRdWVyeSA9IFwidGltZXN0YW1wLXF1ZXJ5XCIsXHJcblx0SW5kaXJlY3RGaXJzdEluc3RhbmNlID0gXCJpbmRpcmVjdC1maXJzdC1pbnN0YW5jZVwiLFxyXG5cdFNoYWRlckYxNiA9IFwic2hhZGVyLWYxNlwiLFxyXG5cdEJHUkE4VW5vcm1TdG9yYWdlID0gXCJiZ3JhOHVub3JtLXN0b3JhZ2VcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEJ1ZmZlclVzYWdlIHtcclxuXHRNYXBSZWFkID0gMSxcclxuXHRNYXBXcml0ZSA9IDIsXHJcblx0Q29weVNyYyA9IDQsXHJcblx0Q29weURzdCA9IDgsXHJcblx0SW5kZXggPSAxNixcclxuXHRWZXJ0ZXggPSAzMixcclxuXHRVbmlmb3JtID0gNjQsXHJcblx0U3RvcmFnZSA9IDEyOCxcclxuXHRJbmRpcmVjdCA9IDI1NixcclxuXHRRdWVyeVJlc29sdmUgPSA1MTJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBNYXBNb2RlIHtcclxuXHRSZWFkID0gMSxcclxuXHRXcml0ZSA9IDJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBUZXh0dXJlRGltZW5zaW9uIHtcclxuXHRFMWQgPSBcIjFkXCIsXHJcblx0RTJkID0gXCIyZFwiLFxyXG5cdEUzZCA9IFwiM2RcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFRleHR1cmVVc2FnZSB7XHJcblx0Q29weVNyYyA9IDEsXHJcblx0Q29weURzdCA9IDIsXHJcblx0VGV4dHVyZUJpbmRpbmcgPSA0LFxyXG5cdFN0b3JhZ2VCaW5kaW5nID0gOCxcclxuXHRSZW5kZXJBdHRhY2htZW50ID0gMTZcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBUZXh0dXJlVmlld0RpbWVuc2lvbiB7XHJcblx0RTFkID0gXCIxZFwiLFxyXG5cdEUyZCA9IFwiMmRcIixcclxuXHRFMmRBcnJheSA9IFwiMmQtYXJyYXlcIixcclxuXHRDdWJlID0gXCJjdWJlXCIsXHJcblx0Q3ViZUFycmF5ID0gXCJjdWJlLWFycmF5XCIsXHJcblx0RTNkID0gXCIzZFwiXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gVGV4dHVyZUFzcGVjdCB7XHJcblx0QWxsID0gXCJhbGxcIixcclxuXHRTdGVuY2lsT25seSA9IFwic3RlbmNpbC1vbmx5XCIsXHJcblx0RGVwdGhPbmx5ID0gXCJkZXB0aC1vbmx5XCJcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbW1lbnRzIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dmeC1ycy93Z3B1L2Jsb2IvbWFzdGVyL3dncHUtdHlwZXMvc3JjL2xpYi5yc1xyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBlbnVtIFRleHR1cmVGb3JtYXQge1xyXG5cdC8vIDgtYml0IGZvcm1hdHNcclxuXHRSOFVub3JtID0gXCJyOHVub3JtXCIsIC8vIFJlZCBjaGFubmVsIG9ubHkuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFswLCAyNTVdIGNvbnZlcnRlZCB0by9mcm9tIGZsb2F0IFswLCAxXSBpbiBzaGFkZXIuXHJcblx0UjhTbm9ybSA9IFwicjhzbm9ybVwiLCAvLyBSZWQgY2hhbm5lbCBvbmx5LiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBbLTEyNywgMTI3XSBjb252ZXJ0ZWQgdG8vZnJvbSBmbG9hdCBbLTEsIDFdIGluIHNoYWRlci5cclxuXHRSOFVpbnQgPSBcInI4dWludFwiLCAvLyBSZWQgY2hhbm5lbCBvbmx5LiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcblx0UjhTaW50ID0gXCJyOHNpbnRcIiwgLy8gUmVkIGNoYW5uZWwgb25seS4gOCBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gU2lnbmVkIGluIHNoYWRlci5cclxuXHJcblx0Ly8gMTYtYml0IGZvcm1hdHNcclxuXHRSMTZVaW50ID0gXCJyMTZ1aW50XCIsIC8vIFJlZCBjaGFubmVsIG9ubHkuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcblx0UjE2U2ludCA9IFwicjE2c2ludFwiLCAvLyBSZWQgY2hhbm5lbCBvbmx5LiAxNiBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gU2lnbmVkIGluIHNoYWRlci5cclxuXHRSMTZGbG9hdCA9IFwicjE2ZmxvYXRcIiwgLy8gUmVkIGNoYW5uZWwgb25seS4gMTYgYml0IGZsb2F0IHBlciBjaGFubmVsLiBGbG9hdCBpbiBzaGFkZXIuXHJcblx0Ukc4VW5vcm0gPSBcInJnOHVub3JtXCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFswLCAyNTVdIGNvbnZlcnRlZCB0by9mcm9tIGZsb2F0IFswLCAxXSBpbiBzaGFkZXIuXHJcblx0Ukc4U25vcm0gPSBcInJnOHNub3JtXCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFstMTI3LCAxMjddIGNvbnZlcnRlZCB0by9mcm9tIGZsb2F0IFstMSwgMV0gaW4gc2hhZGVyLlxyXG5cdFJHOFVpbnQgPSBcInJnOHVpbnRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gOCBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gVW5zaWduZWQgaW4gc2hhZGVyLlxyXG5cdFJHOFNpbnQgPSBcInJnOHNpbnRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gOCBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gU2lnbmVkIGluIHNoYWRlci5cclxuXHJcblx0Ly8gMzItYml0IGZvcm1hdHNcclxuXHRSMzJVaW50ID0gXCJyMzJ1aW50XCIsIC8vIFJlZCBjaGFubmVsIG9ubHkuIDMyIGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcblx0UjMyU2ludCA9IFwicjMyc2ludFwiLCAvLyBSZWQgY2hhbm5lbCBvbmx5LiAzMiBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gU2lnbmVkIGluIHNoYWRlci5cclxuXHRSMzJGbG9hdCA9IFwicjMyZmxvYXRcIiwgLy8gUmVkIGNoYW5uZWwgb25seS4gMzIgYml0IGZsb2F0IHBlciBjaGFubmVsLiBGbG9hdCBpbiBzaGFkZXIuXHJcblx0UkcxNlVpbnQgPSBcInJnMTZ1aW50XCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcblx0UkcxNlNpbnQgPSBcInJnMTZzaW50XCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBTaWduZWQgaW4gc2hhZGVyLlxyXG5cdFJHMTZGbG9hdCA9IFwicmcxNmZsb2F0XCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDE2IGJpdCBmbG9hdCBwZXIgY2hhbm5lbC4gRmxvYXQgaW4gc2hhZGVyLlxyXG5cdFJHQkE4VW5vcm0gPSBcInJnYmE4dW5vcm1cIiwgLy8gUmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzLiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBbMCwgMjU1XSBjb252ZXJ0ZWQgdG8vZnJvbSBmbG9hdCBbMCwgMV0gaW4gc2hhZGVyLlxyXG5cdFJHQkE4VW5vcm1TUkdCID0gXCJyZ2JhOHVub3JtLXNyZ2JcIiwgLy8gUmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzLiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBTcmdiLWNvbG9yIFswLCAyNTVdIGNvbnZlcnRlZCB0by9mcm9tIGxpbmVhci1jb2xvciBmbG9hdCBbMCwgMV0gaW4gc2hhZGVyLlxyXG5cdFJHQkE4U25vcm0gPSBcInJnYmE4c25vcm1cIiwgLy8gUmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzLiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBbLTEyNywgMTI3XSBjb252ZXJ0ZWQgdG8vZnJvbSBmbG9hdCBbLTEsIDFdIGluIHNoYWRlci5cclxuXHRSR0JBOFVpbnQgPSBcInJnYmE4dWludFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFVuc2lnbmVkIGluIHNoYWRlci5cclxuXHRSR0JBOFNpbnQgPSBcInJnYmE4c2ludFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFNpZ25lZCBpbiBzaGFkZXIuXHJcblx0QkdSQThVbm9ybSA9IFwiYmdyYTh1bm9ybVwiLCAvLyBCbHVlLCBncmVlbiwgcmVkLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFswLCAyNTVdIGNvbnZlcnRlZCB0by9mcm9tIGZsb2F0IFswLCAxXSBpbiBzaGFkZXIuXHJcblx0QkdSQThVbm9ybVNSR0IgPSBcImJncmE4dW5vcm0tc3JnYlwiLCAvLyBCbHVlLCBncmVlbiwgcmVkLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFNyZ2ItY29sb3IgWzAsIDI1NV0gY29udmVydGVkIHRvL2Zyb20gbGluZWFyLWNvbG9yIGZsb2F0IFswLCAxXSBpbiBzaGFkZXIuXHJcblx0Ly8gUGFja2VkIDMyLWJpdCBmb3JtYXRzXHJcblx0UkdCOUU1VUZsb2F0ID0gXCJyZ2I5ZTV1ZmxvYXRcIiwgLy8gUGFja2VkIHVuc2lnbmVkIGZsb2F0IHdpdGggOSBiaXRzIG1hbnRpc2EgZm9yIGVhY2ggUkdCIGNvbXBvbmVudCwgdGhlbiBhIGNvbW1vbiA1IGJpdHMgZXhwb25lbnRcclxuXHRSR0IxMEEyVW5vcm0gPSBcInJnYjEwYTJ1bm9ybVwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDEwIGJpdCBpbnRlZ2VyIGZvciBSR0IgY2hhbm5lbHMsIDIgYml0IGludGVnZXIgZm9yIGFscGhhIGNoYW5uZWwuIFswLCAxMDIzXSAoWzAsIDNdIGZvciBhbHBoYSkgY29udmVydGVkIHRvL2Zyb20gZmxvYXQgWzAsIDFdIGluIHNoYWRlci5cclxuXHRSRzExQjEwVUZsb2F0ID0gXCJyZzExYjEwdWZsb2F0XCIsIC8vIFJlZCwgZ3JlZW4sIGFuZCBibHVlIGNoYW5uZWxzLiAxMSBiaXQgZmxvYXQgd2l0aCBubyBzaWduIGJpdCBmb3IgUkcgY2hhbm5lbHMuIDEwIGJpdCBmbG9hdCB3aXRoIG5vIHNpZ24gYml0IGZvciBibHVlIGNoYW5uZWwuIEZsb2F0IGluIHNoYWRlci5cclxuXHJcblx0Ly8gNjQtYml0IGZvcm1hdHNcclxuXHRSRzMyVWludCA9IFwicmczMnVpbnRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gMzIgYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFVuc2lnbmVkIGluIHNoYWRlci5cclxuXHRSRzMyU2ludCA9IFwicmczMnNpbnRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gMzIgYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFNpZ25lZCBpbiBzaGFkZXIuXHJcblx0UkczMkZsb2F0ID0gXCJyZzMyZmxvYXRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gMzIgYml0IGZsb2F0IHBlciBjaGFubmVsLiBGbG9hdCBpbiBzaGFkZXIuXHJcblx0UkdCQTE2VWludCA9IFwicmdiYTE2dWludFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcblx0UkdCQTE2U2ludCA9IFwicmdiYTE2c2ludFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBTaWduZWQgaW4gc2hhZGVyLlxyXG5cdFJHQkExNkZsb2F0ID0gXCJyZ2JhMTZmbG9hdFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDE2IGJpdCBmbG9hdCBwZXIgY2hhbm5lbC4gRmxvYXQgaW4gc2hhZGVyLlxyXG5cclxuXHQvLyAxMjgtYml0IGZvcm1hdHNcclxuXHRSR0JBMzJVaW50ID0gXCJyZ2JhMzJ1aW50XCIsIC8vIFJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscy4gMzIgYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFVuc2lnbmVkIGluIHNoYWRlci5cclxuXHRSR0JBMzJTaW50ID0gXCJyZ2JhMzJzaW50XCIsIC8vIFJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscy4gMzIgYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFNpZ25lZCBpbiBzaGFkZXIuXHJcblx0UkdCQTMyRmxvYXQgPSBcInJnYmEzMmZsb2F0XCIsIC8vIFJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscy4gMzIgYml0IGZsb2F0IHBlciBjaGFubmVsLiBGbG9hdCBpbiBzaGFkZXIuXHJcblxyXG5cdC8vIERlcHRoIGFuZCBzdGVuY2lsIGZvcm1hdHNcclxuXHRTdGVuY2lsOCA9IFwic3RlbmNpbDhcIixcclxuXHREZXB0aDE2VW5vcm0gPSBcImRlcHRoMTZ1bm9ybVwiLFxyXG5cdERlcHRoMjRQbHVzID0gXCJkZXB0aDI0cGx1c1wiLCAvLyBTcGVjaWFsIGRlcHRoIGZvcm1hdCB3aXRoIGF0IGxlYXN0IDI0IGJpdCBpbnRlZ2VyIGRlcHRoLlxyXG5cdERlcHRoMjRQbHVzU3RlbmNpbDggPSBcImRlcHRoMjRwbHVzLXN0ZW5jaWw4XCIsIC8vIFNwZWNpYWwgZGVwdGgvc3RlbmNpbCBmb3JtYXQgd2l0aCBhdCBsZWFzdCAyNCBiaXQgaW50ZWdlciBkZXB0aCBhbmQgOCBiaXRzIGludGVnZXIgc3RlbmNpbC5cclxuXHREZXB0aDMyRmxvYXQgPSBcImRlcHRoMzJmbG9hdFwiLCAvLyBTcGVjaWFsIGRlcHRoIGZvcm1hdCB3aXRoIDMyIGJpdCBmbG9hdGluZyBwb2ludCBkZXB0aC5cclxuXHJcblx0Ly8gQkMgY29tcHJlc3NlZCBmb3JtYXRzIHVzYWJsZSBpZiBcInRleHR1cmUtY29tcHJlc3Npb24tYmNcIiBpcyBib3RoXHJcblx0Ly8gc3VwcG9ydGVkIGJ5IHRoZSBkZXZpY2UvdXNlciBhZ2VudCBhbmQgZW5hYmxlZCBpbiByZXF1ZXN0RGV2aWNlLlxyXG5cdEJDMVJHQkFVbm9ybSA9IFwiYmMxLXJnYmEtdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gNCBjb2xvciArIGFscGhhIHBhbGxldC4gNSBiaXQgUiArIDYgYml0IEcgKyA1IGJpdCBCICsgMSBiaXQgYWxwaGEuIEFsc28ga25vd24gYXMgRFhUMS5cclxuXHRCQzFSR0JBVW5vcm1TUkdCID0gXCJiYzEtcmdiYS11bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDggYnl0ZXMgcGVyIGJsb2NrICg0IGJpdC9weCkuIDQgY29sb3IgKyBhbHBoYSBwYWxsZXQuIDUgYml0IFIgKyA2IGJpdCBHICsgNSBiaXQgQiArIDEgYml0IGFscGhhLiBBbHNvIGtub3duIGFzIERYVDEuXHJcblx0QkMyUkdCQVVub3JtID0gXCJiYzItcmdiYS11bm9ybVwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDggYml0L3B4KS4gNCBjb2xvciBwYWxsZXQuIDUgYml0IFIgKyA2IGJpdCBHICsgNSBiaXQgQiArIDQgYml0IGFscGhhLiBBbHNvIGtub3duIGFzIERYVDMuXHJcblx0QkMyUkdCQVVub3JtU1JHQiA9IFwiYmMyLXJnYmEtdW5vcm0tc3JnYlwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDggYml0L3B4KS4gNCBjb2xvciBwYWxsZXQuIDUgYml0IFIgKyA2IGJpdCBHICsgNSBiaXQgQiArIDQgYml0IGFscGhhLiBBbHNvIGtub3duIGFzIERYVDMuXHJcblx0QkMzUkdCQVVub3JtID0gXCJiYzMtcmdiYS11bm9ybVwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDggYml0L3B4KS4gNCBjb2xvciBwYWxsZXQgKyA4IGFscGhhIHBhbGxldC4gNSBiaXQgUiArIDYgYml0IEcgKyA1IGJpdCBCICsgOCBiaXQgYWxwaGEuIEFsc28ga25vd24gYXMgRFhUNS5cclxuXHRCQzNSR0JBVW5vcm1TUkdCID0gXCJiYzMtcmdiYS11bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoOCBiaXQvcHgpLiA0IGNvbG9yIHBhbGxldCArIDggYWxwaGEgcGFsbGV0LiA1IGJpdCBSICsgNiBiaXQgRyArIDUgYml0IEIgKyA4IGJpdCBhbHBoYS4gQWxzbyBrbm93biBhcyBEWFQ1LlxyXG5cdEJDNFJVbm9ybSA9IFwiYmM0LXItdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gOCBjb2xvciBwYWxsZXQuIDggYml0IFIuIEFsc28ga25vd24gYXMgUkdUQzEuXHJcblx0QkM0UlNub3JtID0gXCJiYzQtci1zbm9ybVwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiA4IGJ5dGVzIHBlciBibG9jayAoNCBiaXQvcHgpLiA4IGNvbG9yIHBhbGxldC4gOCBiaXQgUi4gQWxzbyBrbm93biBhcyBSR1RDMS5cclxuXHRCQzVSR1Vub3JtID0gXCJiYzUtcmctdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIDggY29sb3IgcmVkIHBhbGxldCArIDggY29sb3IgZ3JlZW4gcGFsbGV0LiA4IGJpdCBSRy4gQWxzbyBrbm93biBhcyBSR1RDMi5cclxuXHRCQzVSR1Nub3JtID0gXCJiYzUtcmctc25vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIDggY29sb3IgcmVkIHBhbGxldCArIDggY29sb3IgZ3JlZW4gcGFsbGV0LiA4IGJpdCBSRy4gQWxzbyBrbm93biBhcyBSR1RDMi5cclxuXHRCQzZIUkdCVUZsb2F0ID0gXCJiYzZoLXJnYi11ZmxvYXRcIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIFZhcmlhYmxlIHNpemVkIHBhbGxldC4gMTYgYml0IHVuc2lnbmVkIGZsb2F0IFJHQi4gRmxvYXQgaW4gc2hhZGVyLiBBbHNvIGtub3duIGFzIEJQVEMgKGZsb2F0KS5cclxuXHRCQzZIUkdCRmxvYXQgPSBcImJjNmgtcmdiLWZsb2F0XCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoOCBiaXQvcHgpLiBWYXJpYWJsZSBzaXplZCBwYWxsZXQuIDE2IGJpdCBzaWduZWQgZmxvYXQgUkdCLiBGbG9hdCBpbiBzaGFkZXIuIEFsc28ga25vd24gYXMgQlBUQyAoZmxvYXQpLlxyXG5cdEJDN1JHQkFVbm9ybSA9IFwiYmM3LXJnYmEtdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIFZhcmlhYmxlIHNpemVkIHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLiBBbHNvIGtub3duIGFzIEJQVEMgKHVub3JtKS5cclxuXHRCQzdSR0JBVW5vcm1TUkdCID0gXCJiYzctcmdiYS11bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoOCBiaXQvcHgpLiBWYXJpYWJsZSBzaXplZCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS4gQWxzbyBrbm93biBhcyBCUFRDICh1bm9ybSkuXHJcblxyXG5cdC8vIEVUQzIgY29tcHJlc3NlZCBmb3JtYXRzIHVzYWJsZSBpZiBcInRleHR1cmUtY29tcHJlc3Npb24tZXRjMlwiIGlzIGJvdGhcclxuXHQvLyBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZS91c2VyIGFnZW50IGFuZCBlbmFibGVkIGluIHJlcXVlc3REZXZpY2UuXHJcblx0RVRDMlJHQjhVbm9ybSA9IFwiZXRjMi1yZ2I4dW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCLlxyXG5cdEVUQzJSR0I4VW5vcm1TUkdCID0gXCJldGMyLXJnYjh1bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDggYnl0ZXMgcGVyIGJsb2NrICg0IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQi5cclxuXHRFVEMyUkdCOEExVW5vcm0gPSBcImV0YzItcmdiOGExdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCICsgMSBiaXQgYWxwaGEuXHJcblx0RVRDMlJHQjhBMVVub3JtU1JHQiA9IFwiZXRjMi1yZ2I4YTF1bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDggYnl0ZXMgcGVyIGJsb2NrICg0IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQiArIDEgYml0IGFscGhhLlxyXG5cdEVUQzJSR0JBOFVub3JtID0gXCJldGMyLXJnYmE4dW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQiArIDggYml0IGFscGhhLlxyXG5cdEVUQzJSR0JBOFVub3JtU1JHQiA9IFwiZXRjMi1yZ2JhOHVub3JtLXNyZ2JcIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQiArIDggYml0IGFscGhhLlxyXG5cdEVBQ1IxMVVub3JtID0gXCJlYWMtcjExdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDExIGJpdCBpbnRlZ2VyIFIuXHJcblx0RUFDUjExU25vcm0gPSBcImVhYy1yMTFzbm9ybVwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiA4IGJ5dGVzIHBlciBibG9jayAoNCBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gMTEgYml0IGludGVnZXIgUi5cclxuXHRFQUNSRzExVW5vcm0gPSBcImVhYy1yZzExdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiAxMSBiaXQgaW50ZWdlciBSICsgMTEgYml0IGludGVnZXIgRy5cclxuXHRFQUNSRzExU25vcm0gPSBcImVhYy1yZzExc25vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiAxMSBiaXQgaW50ZWdlciBSICsgMTEgYml0IGludGVnZXIgRy5cclxuXHJcblx0Ly8gQVNUQyBjb21wcmVzc2VkIGZvcm1hdHMgdXNhYmxlIGlmIFwidGV4dHVyZS1jb21wcmVzc2lvbi1hc3RjXCIgaXMgYm90aFxyXG5cdC8vIHN1cHBvcnRlZCBieSB0aGUgZGV2aWNlL3VzZXIgYWdlbnQgYW5kIGVuYWJsZWQgaW4gcmVxdWVzdERldmljZS5cclxuXHRBU1RDNHg0VW5vcm0gPSBcImFzdGMtNHg0LXVub3JtXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoOCBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cdEFTVEM0eDRVbm9ybVNSR0IgPSBcImFzdGMtNHg0LXVub3JtLXNyZ2JcIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzV4NFVub3JtID0gXCJhc3RjLTV4NC11bm9ybVwiLCAvLyA1eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDYuNCBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cdEFTVEM1eDRVbm9ybVNSR0IgPSBcImFzdGMtNXg0LXVub3JtLXNyZ2JcIiwgLy8gNXg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg2LjQgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuXHRBU1RDNXg1VW5vcm0gPSBcImFzdGMtNXg1LXVub3JtXCIsIC8vIDV4NSBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoNS4xMiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cdEFTVEM1eDVVbm9ybVNSR0IgPSBcImFzdGMtNXg1LXVub3JtLXNyZ2JcIiwgLy8gNXg1IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg1LjEyIGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzZ4NVVub3JtID0gXCJhc3RjLTZ4NS11bm9ybVwiLCAvLyA2eDUgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDQuMjcgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuXHRBU1RDNng1VW5vcm1TUkdCID0gXCJhc3RjLTZ4NS11bm9ybS1zcmdiXCIsIC8vIDZ4NSBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoNC4yNyBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cdEFTVEM2eDZVbm9ybSA9IFwiYXN0Yy02eDYtdW5vcm1cIiwgLy8gNng2IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgzLjU2IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzZ4NlVub3JtU1JHQiA9IFwiYXN0Yy02eDYtdW5vcm0tc3JnYlwiLCAvLyA2eDYgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDMuNTYgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuXHRBU1RDOHg1VW5vcm0gPSBcImFzdGMtOHg1LXVub3JtXCIsIC8vIDh4NSBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMy4yIGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzh4NVVub3JtU1JHQiA9IFwiYXN0Yy04eDUtdW5vcm0tc3JnYlwiLCAvLyA4eDUgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDMuMiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cdEFTVEM4eDZVbm9ybSA9IFwiYXN0Yy04eDYtdW5vcm1cIiwgLy8gOHg2IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgyLjY3IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzh4NlVub3JtU1JHQiA9IFwiYXN0Yy04eDYtdW5vcm0tc3JnYlwiLCAvLyA4eDYgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDIuNjcgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuXHRBU1RDOHg4VW5vcm0gPSBcImFzdGMtOHg4LXVub3JtXCIsIC8vIDh4OCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cdEFTVEM4eDhVbm9ybVNSR0IgPSBcImFzdGMtOHg4LXVub3JtLXNyZ2JcIiwgLy8gOHg4IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgyIGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzEweDVVbm9ybSA9IFwiYXN0Yy0xMHg1LXVub3JtXCIsIC8vIDEweDUgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDIuNTYgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuXHRBU1RDMTB4NVVub3JtU1JHQiA9IFwiYXN0Yy0xMHg1LXVub3JtLXNyZ2JcIiwgLy8gMTB4NSBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMi41NiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cdEFTVEMxMHg2VW5vcm0gPSBcImFzdGMtMTB4Ni11bm9ybVwiLCAvLyAxMHg2IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgyLjEzIGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzEweDZVbm9ybVNSR0IgPSBcImFzdGMtMTB4Ni11bm9ybS1zcmdiXCIsIC8vIDEweDYgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDIuMTMgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuXHRBU1RDMTB4OFVub3JtID0gXCJhc3RjLTEweDgtdW5vcm1cIiwgLy8gMTB4OCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMS42IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzEweDhVbm9ybVNSR0IgPSBcImFzdGMtMTB4OC11bm9ybS1zcmdiXCIsIC8vIDEweDggYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDEuNiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cdEFTVEMxMHgxMFVub3JtID0gXCJhc3RjLTEweDEwLXVub3JtXCIsIC8vIDEweDEwIGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgxLjI4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzEweDEwVW5vcm1TUkdCID0gXCJhc3RjLTEweDEwLXVub3JtLXNyZ2JcIiwgLy8gMTB4MTAgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDEuMjggYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuXHRBU1RDMTJ4MTBVbm9ybSA9IFwiYXN0Yy0xMngxMC11bm9ybVwiLCAvLyAxMngxMCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMS4wNyBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cdEFTVEMxMngxMFVub3JtU1JHQiA9IFwiYXN0Yy0xMngxMC11bm9ybS1zcmdiXCIsIC8vIDEyeDEwIGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgxLjA3IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcblx0QVNUQzEyeDEyVW5vcm0gPSBcImFzdGMtMTJ4MTItdW5vcm1cIiwgLy8gMTJ4MTIgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDAuODkgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuXHRBU1RDMTJ4MTJVbm9ybVNSR0IgPSBcImFzdGMtMTJ4MTItdW5vcm0tc3JnYlwiLCAvLyAxMngxMiBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMC44OSBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cclxuXHQvLyBcImRlcHRoMjR1bm9ybS1zdGVuY2lsOFwiIGZlYXR1cmVcclxuXHREZXB0aDI0VW5vcm1TdGVuY2lsOCA9IFwiZGVwdGgyNHVub3JtLXN0ZW5jaWw4XCIsXHJcblxyXG5cdC8vIFwiZGVwdGgzMmZsb2F0LXN0ZW5jaWw4XCIgZmVhdHVyZVxyXG5cdERlcHRoMzJGbG9hdFN0ZW5jaWw4ID0gXCJkZXB0aDMyZmxvYXQtc3RlbmNpbDhcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEFkZHJlc3NNb2RlIHtcclxuXHRDbGFtcFRvRWRnZSA9IFwiY2xhbXAtdG8tZWRnZVwiLFxyXG5cdFJlcGVhdCA9IFwicmVwZWF0XCIsXHJcblx0TWlycm9yUmVwZWF0ID0gXCJtaXJyb3ItcmVwZWF0XCJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBGaWx0ZXJNb2RlIHtcclxuXHROZWFyZXN0ID0gXCJuZWFyZXN0XCIsXHJcblx0TGluZWFyID0gXCJsaW5lYXJcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIENvbXBhcmVGdW5jdGlvbiB7XHJcblx0TmV2ZXIgPSBcIm5ldmVyXCIsXHJcblx0TGVzcyA9IFwibGVzc1wiLFxyXG5cdEVxdWFsID0gXCJlcXVhbFwiLFxyXG5cdExlc3NFcXVhbCA9IFwibGVzcy1lcXVhbFwiLFxyXG5cdEdyZWF0ZXIgPSBcImdyZWF0ZXJcIixcclxuXHROb3RFcXVhbCA9IFwibm90LWVxdWFsXCIsXHJcblx0R3JlYXRlckVxdWFsID0gXCJncmVhdGVyLWVxdWFsXCIsXHJcblx0QWx3YXlzID0gXCJhbHdheXNcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFNoYWRlclN0YWdlIHtcclxuXHRWZXJ0ZXggPSAxLFxyXG5cdEZyYWdtZW50ID0gMixcclxuXHRDb21wdXRlID0gNFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEJ1ZmZlckJpbmRpbmdUeXBlIHtcclxuXHRVbmlmb3JtID0gXCJ1bmlmb3JtXCIsXHJcblx0U3RvcmFnZSA9IFwic3RvcmFnZVwiLFxyXG5cdFJlYWRPbmx5U3RvcmFnZSA9IFwicmVhZC1vbmx5LXN0b3JhZ2VcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFNhbXBsZXJCaW5kaW5nVHlwZSB7XHJcblx0RmlsdGVyaW5nID0gXCJmaWx0ZXJpbmdcIixcclxuXHROb25GaWx0ZXJpbmcgPSBcIm5vbi1maWx0ZXJpbmdcIixcclxuXHRDb21wYXJpc29uID0gXCJjb21wYXJpc29uXCJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBUZXh0dXJlU2FtcGxlVHlwZSB7XHJcblx0RmxvYXQgPSBcImZsb2F0XCIsXHJcblx0VW5maWx0ZXJhYmxlRmxvYXQgPSBcInVuZmlsdGVyYWJsZS1mbG9hdFwiLFxyXG5cdERlcHRoID0gXCJkZXB0aFwiLFxyXG5cdFNpbnQgPSBcInNpbnRcIixcclxuXHRVaW50ID0gXCJ1aW50XCJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBTdG9yYWdlVGV4dHVyZUFjY2VzcyB7XHJcblx0V3JpdGVPbmx5ID0gXCJ3cml0ZS1vbmx5XCJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBDb21waWxhdGlvbk1lc3NhZ2VUeXBlIHtcclxuXHRFcnJvciA9IFwiZXJyb3JcIixcclxuXHRXYXJuaW5nID0gXCJ3YXJuaW5nXCIsXHJcblx0SW5mbyA9IFwiaW5mb1wiXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gQXV0b0xheW91dE1vZGUge1xyXG5cdEF1dG8gPSBcImF1dG9cIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFByaW1pdGl2ZVRvcG9sb2d5IHtcclxuXHRQb2ludExpc3QgPSBcInBvaW50LWxpc3RcIixcclxuXHRMaW5lTGlzdCA9IFwibGluZS1saXN0XCIsXHJcblx0TGluZVN0cmlwID0gXCJsaW5lLXN0cmlwXCIsXHJcblx0VHJpYW5nbGVMaXN0ID0gXCJ0cmlhbmdsZS1saXN0XCIsXHJcblx0VHJpYW5nbGVTdHJpcCA9IFwidHJpYW5nbGUtc3RyaXBcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEZyb250RmFjZSB7XHJcblx0Q0NXID0gXCJjY3dcIixcclxuXHRDVyA9IFwiY3dcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEN1bGxNb2RlIHtcclxuXHROb25lID0gXCJub25lXCIsXHJcblx0RnJvbnQgPSBcImZyb250XCIsXHJcblx0QmFjayA9IFwiYmFja1wiXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gQ29sb3JXcml0ZUZsYWdzIHtcclxuXHRSZWQgPSAxLFxyXG5cdEdyZWVuID0gMixcclxuXHRCbHVlID0gNCxcclxuXHRBbHBoYSA9IDgsXHJcblx0QWxsID0gMTVcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBCbGVuZEZhY3RvciB7XHJcblx0WmVybyA9IFwiemVyb1wiLFxyXG5cdE9uZSA9IFwib25lXCIsXHJcblx0U3JjID0gXCJzcmNcIixcclxuXHRPbmVNaW51c1NyYyA9IFwib25lLW1pbnVzLXNyY1wiLFxyXG5cdFNyY0FscGhhID0gXCJzcmMtYWxwaGFcIixcclxuXHRPbmVNaW51c1NyY0FscGhhID0gXCJvbmUtbWludXMtc3JjLWFscGhhXCIsXHJcblx0RHN0ID0gXCJkc3RcIixcclxuXHRPbmVNaW51c0RzdCA9IFwib25lLW1pbnVzLWRzdFwiLFxyXG5cdERzdEFscGhhID0gXCJkc3QtYWxwaGFcIixcclxuXHRPbmVNaW51c0RzdEFscGhhID0gXCJvbmUtbWludXMtZHN0LWFscGhhXCIsXHJcblx0U3JjQWxwaGFTYXR1cmF0ZWQgPSBcInNyYy1hbHBoYS1zYXR1cmF0ZWRcIixcclxuXHRDb25zdGFudCA9IFwiY29uc3RhbnRcIixcclxuXHRPbmVNaW51c0NvbnN0YW50ID0gXCJvbmUtbWludXMtY29uc3RhbnRcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEJsZW5kT3BlcmF0aW9uIHtcclxuXHRBZGQgPSBcImFkZFwiLFxyXG5cdFN1YnRyYWN0ID0gXCJzdWJ0cmFjdFwiLFxyXG5cdFJldmVyc2VTdWJ0cmFjdCA9IFwicmV2ZXJzZS1zdWJ0cmFjdFwiLFxyXG5cdE1pbiA9IFwibWluXCIsXHJcblx0TWF4ID0gXCJtYXhcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFN0ZW5jaWxPcGVyYXRpb24ge1xyXG5cdEtlZXAgPSBcImtlZXBcIixcclxuXHRaZXJvID0gXCJ6ZXJvXCIsXHJcblx0UmVwbGFjZSA9IFwicmVwbGFjZVwiLFxyXG5cdEludmVydCA9IFwiaW52ZXJ0XCIsXHJcblx0SW5jcmVtZW50Q2xhbXAgPSBcImluY3JlbWVudC1jbGFtcFwiLFxyXG5cdERlY3JlbWVudENsYW1wID0gXCJkZWNyZW1lbnQtY2xhbXBcIixcclxuXHRJbmNyZW1lbnRXcmFwID0gXCJpbmNyZW1lbnQtd3JhcFwiLFxyXG5cdERlY3JlbWVudFdyYXAgPSBcImRlY3JlbWVudC13cmFwXCJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBJbmRleEZvcm1hdCB7XHJcblx0VWludDE2ID0gXCJ1aW50MTZcIixcclxuXHRVaW50MzIgPSBcInVpbnQzMlwiXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gVmVydGV4Rm9ybWF0IHtcclxuXHRVaW50OHgyID0gXCJ1aW50OHgyXCIsXHJcblx0VWludDh4NCA9IFwidWludDh4NFwiLFxyXG5cdFNpbnQ4eDIgPSBcInNpbnQ4eDJcIixcclxuXHRTaW50OHg0ID0gXCJzaW50OHg0XCIsXHJcblx0VW5vcm04eDIgPSBcInVub3JtOHgyXCIsXHJcblx0VW5vcm04eDQgPSBcInVub3JtOHg0XCIsXHJcblx0U25vcm04eDIgPSBcInNub3JtOHgyXCIsXHJcblx0U25vcm04eDQgPSBcInNub3JtOHg0XCIsXHJcblx0VWludDE2eDIgPSBcInVpbnQxNngyXCIsXHJcblx0VWludDE2eDQgPSBcInVpbnQxNng0XCIsXHJcblx0U2ludDE2eDIgPSBcInNpbnQxNngyXCIsXHJcblx0U2ludDE2eDQgPSBcInNpbnQxNng0XCIsXHJcblx0VW5vcm0xNngyID0gXCJ1bm9ybTE2eDJcIixcclxuXHRVbm9ybTE2eDQgPSBcInVub3JtMTZ4NFwiLFxyXG5cdFNub3JtMTZ4MiA9IFwic25vcm0xNngyXCIsXHJcblx0U25vcm0xNng0ID0gXCJzbm9ybTE2eDRcIixcclxuXHRGbG9hdDE2eDIgPSBcImZsb2F0MTZ4MlwiLFxyXG5cdEZsb2F0MTZ4NCA9IFwiZmxvYXQxNng0XCIsXHJcblx0RmxvYXQzMiA9IFwiZmxvYXQzMlwiLFxyXG5cdEZsb2F0MzJ4MiA9IFwiZmxvYXQzMngyXCIsXHJcblx0RmxvYXQzMngzID0gXCJmbG9hdDMyeDNcIixcclxuXHRGbG9hdDMyeDQgPSBcImZsb2F0MzJ4NFwiLFxyXG5cdFVpbnQzMiA9IFwidWludDMyXCIsXHJcblx0VWludDMyeDIgPSBcInVpbnQzMngyXCIsXHJcblx0VWludDMyeDMgPSBcInVpbnQzMngzXCIsXHJcblx0VWludDMyeDQgPSBcInVpbnQzMng0XCIsXHJcblx0U2ludDMyID0gXCJzaW50MzJcIixcclxuXHRTaW50MzJ4MiA9IFwic2ludDMyeDJcIixcclxuXHRTaW50MzJ4MyA9IFwic2ludDMyeDNcIixcclxuXHRTaW50MzJ4NCA9IFwic2ludDMyeDRcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIElucHV0U3RlcE1vZGUge1xyXG5cdFZlcnRleCA9IFwidmVydGV4XCIsXHJcblx0SW5zdGFuY2UgPSBcImluc3RhbmNlXCJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBDb21wdXRlUGFzc1RpbWVzdGFtcExvY2F0aW9uIHtcclxuXHRCZWdpbm5pbmcgPSBcImJlZ2lubmluZ1wiLFxyXG5cdEVuZCA9IFwiZW5kXCJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBSZW5kZXJQYXNzVGltZXN0YW1wTG9jYXRpb24ge1xyXG5cdEJlZ2lubmluZyA9IFwiYmVnaW5uaW5nXCIsXHJcblx0RW5kID0gXCJlbmRcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIExvYWRPcCB7XHJcblx0TG9hZCA9IFwibG9hZFwiLFxyXG5cdENsZWFyID0gXCJjbGVhclwiXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gU3RvcmVPcCB7XHJcblx0U3RvcmUgPSBcInN0b3JlXCIsXHJcblx0RGlzY2FyZCA9IFwiZGlzY2FyZFwiXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gUXVlcnlUeXBlIHtcclxuXHRPY2NsdXNpb24gPSBcIm9jY2x1c2lvblwiLFxyXG5cdFRpbWVzdGFtcCA9IFwidGltZXN0YW1wXCJcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBDYW52YXNBbHBoYU1vZGUge1xyXG5cdE9wYXF1ZSA9IFwib3BhcXVlXCIsXHJcblx0UHJlbXVsdGlwbGllZCA9IFwicHJlbXVsdGlwbGllZFwiXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gRGV2aWNlTG9zdFJlYXNvbiB7XHJcblx0RGVzdHJveWVkID0gXCJkZXN0cm95ZWRcIlxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEVycm9yRmlsdGVyIHtcclxuXHRPdXRPZk1lbW9yeSA9IFwib3V0LW9mLW1lbW9yeVwiLFxyXG5cdFZhbGlkYXRpb24gPSBcInZhbGlkYXRpb25cIlxyXG59XHJcblxyXG5leHBvcnQgZW51bSBHUFVDb2xvcldyaXRlIHtcclxuXHRSZWQgPSAweDEsXHJcblx0R3JlZW4gPSAweDIsXHJcblx0Qmx1ZSA9IDB4NCxcclxuXHRBbHBoYSA9IDB4OCxcclxuXHRBbGwgPSAweGZcclxufVxyXG5leHBvcnQgZW51bSBDb21tYW5kU3ViVHlwZSB7XHJcblx0U2hhZG93ID0gXCJzaGFkb3dcIixcclxuXHRQaWNrID0gXCJwaWNrXCJcclxufVxyXG5leHBvcnQgZW51bSBJbnRlcnNlY3Qge1xyXG5cdE9VVFNJREUgPSAtMSxcclxuXHRJTlRFUlNFQ1RJTkcgPSAwLFxyXG5cdElOU0lERSA9IDFcclxufVxyXG4iLCJpbXBvcnQgeyBCdWZmZXJVc2FnZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5jbGFzcyBCdWZmZXIge1xuXHRwdWJsaWMgZ3B1QnVmZmVyOiBHUFVCdWZmZXI7XG5cdGRldmljZTogR1BVRGV2aWNlO1xuXHR1c2FnZTogbnVtYmVyO1xuXHRkYXRhOiBBcnJheUJ1ZmZlclZpZXc7XG5cdHNpemU6IG51bWJlcjtcblx0Y29uc3RydWN0b3IoXG5cdFx0bGFiZWw6IHN0cmluZyxcblx0XHRkZXZpY2U6IEdQVURldmljZSxcblx0XHR1c2FnZTogR1BVQnVmZmVyVXNhZ2VGbGFncyxcblx0XHRkYXRhOiBBcnJheUJ1ZmZlclZpZXcgfCBudWxsLFxuXHRcdHNpemU/OiBudW1iZXJcblx0KSB7XG5cdFx0dGhpcy5kZXZpY2UgPSBkZXZpY2U7XG5cdFx0dGhpcy51c2FnZSA9IHVzYWdlO1xuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0dGhpcy5zaXplID0gc2l6ZSAhPSB1bmRlZmluZWQgPyAoc2l6ZSArIDMpICYgfjMgOiAoZGF0YS5ieXRlTGVuZ3RoICsgMykgJiB+MzsgLy8gNCBieXRlcyBhbGlnbm1lbnRzIChiZWNhdXNlIG9mIHRoZSB1cGxvYWQgd2hpY2ggcmVxdWlyZXMgdGhpcylcblx0XHR0aGlzLmdwdUJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuXHRcdFx0bGFiZWw6IGxhYmVsIHx8IFwiXCIsXG5cdFx0XHRzaXplOiB0aGlzLnNpemUsXG5cdFx0XHR1c2FnZVxuXHRcdH0pO1xuXHRcdGlmIChkYXRhKSB0aGlzLnNldFN1YkRhdGEoMCwgZGF0YSwgdGhpcy5zaXplKTtcblx0fVxuXHRzdGF0aWMgY3JlYXRlKFxuXHRcdGxhYmVsOiBzdHJpbmcsXG5cdFx0ZGV2aWNlOiBHUFVEZXZpY2UsXG5cdFx0dXNhZ2U6IEdQVUJ1ZmZlclVzYWdlRmxhZ3MsXG5cdFx0ZGF0YTogQXJyYXlCdWZmZXJWaWV3IHwgbnVsbCxcblx0XHRzaXplPzogbnVtYmVyXG5cdCkge1xuXHRcdHJldHVybiBuZXcgQnVmZmVyKGxhYmVsLCBkZXZpY2UsIHVzYWdlLCBkYXRhLCBzaXplKTtcblx0fVxuXHRzdGF0aWMgY3JlYXRlVmVydGV4QnVmZmVyKGxhYmVsOiBzdHJpbmcsIGRldmljZTogR1BVRGV2aWNlLCBkYXRhOiBBcnJheUJ1ZmZlclZpZXcpOiBCdWZmZXIge1xuXHRcdHJldHVybiBuZXcgQnVmZmVyKGxhYmVsLCBkZXZpY2UsIEJ1ZmZlclVzYWdlLlZlcnRleCB8IEJ1ZmZlclVzYWdlLkNvcHlEc3QsIGRhdGEsIGRhdGEuYnl0ZUxlbmd0aCk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlSW5kZXhCdWZmZXIobGFiZWw6IHN0cmluZywgZGV2aWNlOiBHUFVEZXZpY2UsIGRhdGE6IEFycmF5QnVmZmVyVmlldyk6IEJ1ZmZlciB7XG5cdFx0cmV0dXJuIG5ldyBCdWZmZXIobGFiZWwsIGRldmljZSwgQnVmZmVyVXNhZ2UuSW5kZXggfCBCdWZmZXJVc2FnZS5Db3B5RHN0LCBkYXRhKTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGVVbmlmb3JtQnVmZmVyKGxhYmVsOiBzdHJpbmcsIGRldmljZTogR1BVRGV2aWNlLCBzaXplOiBudW1iZXIsIHVzYWdlPzogQnVmZmVyVXNhZ2UpOiBCdWZmZXIge1xuXHRcdHJldHVybiBuZXcgQnVmZmVyKGxhYmVsLCBkZXZpY2UsIHVzYWdlLCBudWxsLCBzaXplKTtcblx0fVxuXHRzdGF0aWMgZ2V0QnVmZmVyVHlwZSh1c2FnZSkge1xuXHRcdGxldCByZXN1bHQ7XG5cdFx0c3dpdGNoICh1c2FnZSkge1xuXHRcdFx0Y2FzZSBCdWZmZXJVc2FnZS5Vbmlmb3JtOlxuXHRcdFx0XHRyZXN1bHQgPSBcInVuaWZvcm1cIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEJ1ZmZlclVzYWdlLlN0b3JhZ2U6XG5cdFx0XHRcdHJlc3VsdCA9IFwic3RvcmFnZVwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vZ3B1d2ViL2dwdXdlYi9ibG9iL21haW4vZGVzaWduL0J1ZmZlck9wZXJhdGlvbnMubWRcblx0cHVibGljIHNldFN1YkRhdGEob2Zmc2V0OiBudW1iZXIsIGRhdGE6IEFycmF5QnVmZmVyVmlldywgc2l6ZT86IG51bWJlcik6IHZvaWQge1xuXHRcdGNvbnN0IHNyY0FycmF5QnVmZmVyID0gZGF0YS5idWZmZXI7XG5cdFx0Y29uc3QgYnl0ZUNvdW50ID0gc2l6ZSA/PyBzcmNBcnJheUJ1ZmZlci5ieXRlTGVuZ3RoO1xuXHRcdGNvbnN0IHNyY0J1ZmZlciA9IHRoaXMuZGV2aWNlLmNyZWF0ZUJ1ZmZlcih7XG5cdFx0XHRtYXBwZWRBdENyZWF0aW9uOiB0cnVlLFxuXHRcdFx0c2l6ZTogYnl0ZUNvdW50LFxuXHRcdFx0dXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLkNPUFlfU1JDXG5cdFx0fSk7XG5cdFx0Y29uc3QgYXJyYXlCdWZmZXIgPSBzcmNCdWZmZXIuZ2V0TWFwcGVkUmFuZ2UoKTtcblxuXHRcdG5ldyBVaW50MTZBcnJheShhcnJheUJ1ZmZlcikuc2V0KG5ldyBVaW50MTZBcnJheShzcmNBcnJheUJ1ZmZlcikpOyAvLyBtZW1jcHlcblx0XHRzcmNCdWZmZXIudW5tYXAoKTtcblxuXHRcdHRoaXMuY29weVRvQnVmZmVyKHNyY0J1ZmZlciwgb2Zmc2V0LCBieXRlQ291bnQpO1xuXG5cdFx0c3JjQnVmZmVyLmRlc3Ryb3koKTtcblx0fVxuXG5cdHB1YmxpYyBjb3B5VG9CdWZmZXIoc3JjQnVmZmVyOiBHUFVCdWZmZXIsIG9mZnNldDogbnVtYmVyLCBieXRlQ291bnQ6IG51bWJlcik6IHZvaWQge1xuXHRcdGNvbnN0IGNvbW1hbmRFbmNvZGVyID0gdGhpcy5kZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcblx0XHRjb21tYW5kRW5jb2Rlci5jb3B5QnVmZmVyVG9CdWZmZXIoc3JjQnVmZmVyLCAwLCB0aGlzLmdwdUJ1ZmZlciwgb2Zmc2V0LCBieXRlQ291bnQpO1xuXHRcdHRoaXMuZGV2aWNlLnF1ZXVlLnN1Ym1pdChbY29tbWFuZEVuY29kZXIuZmluaXNoKCldKTtcblx0fVxuXG5cdHB1YmxpYyBjb3B5VG9UZXh0dXJlKFxuXHRcdGJ5dGVzUGVyUm93OiBudW1iZXIsXG5cdFx0cm93c1BlckltYWdlOiBudW1iZXIsXG5cdFx0ZGVzdGluYXRpb246IEdQVUltYWdlQ29weVRleHR1cmUsXG5cdFx0ZXh0ZW50OiBHUFVFeHRlbnQzRFxuXHQpOiB2b2lkIHtcblx0XHRjb25zdCBjb21tYW5kRW5jb2RlciA9IHRoaXMuZGV2aWNlLmNyZWF0ZUNvbW1hbmRFbmNvZGVyKCk7XG5cdFx0Y29tbWFuZEVuY29kZXIuY29weUJ1ZmZlclRvVGV4dHVyZShcblx0XHRcdHtcblx0XHRcdFx0YnVmZmVyOiB0aGlzLmdwdUJ1ZmZlcixcblx0XHRcdFx0Ynl0ZXNQZXJSb3csXG5cdFx0XHRcdHJvd3NQZXJJbWFnZVxuXHRcdFx0fSxcblx0XHRcdGRlc3RpbmF0aW9uLFxuXHRcdFx0ZXh0ZW50XG5cdFx0KTtcblx0XHR0aGlzLmRldmljZS5xdWV1ZS5zdWJtaXQoW2NvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XG5cdH1cblxuXHRwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmdwdUJ1ZmZlci5kZXN0cm95KCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnVmZmVyO1xuIiwiaW1wb3J0IHsgU2hhZGVyU291cmNlIH0gZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJTb3VyY2VcIjtcclxuaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tIFwiLi9SZW5kZXJUYXJnZXRcIjtcclxuaW1wb3J0IFNoYWRlckRhdGEgZnJvbSBcIi4vU2hhZGVyRGF0YVwiO1xyXG5pbXBvcnQgVmVydGV4dEJ1ZmZlciBmcm9tIFwiLi9WZXJ0ZXh0QnVmZmVyXCI7XHJcbmltcG9ydCBJbmRleEJ1ZmZlciBmcm9tIFwiLi9JbmRleEJ1ZmZlclwiO1xyXG5pbXBvcnQgeyBSZW5kZXJTdGF0ZSB9IGZyb20gXCIuL1JlbmRlclN0YXRlXCI7XHJcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4uL21hdGVyaWFsL01hdGVyaWFsXCI7XHJcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9tYXRoL01hdHJpeDRcIjtcclxuXHJcbmNsYXNzIERyYXdDb21tYW5kIHtcclxuXHRwdWJsaWMgdHlwZT86IHN0cmluZztcclxuXHJcblx0cHVibGljIHNoYWRlckRhdGE/OiBTaGFkZXJEYXRhO1xyXG5cclxuXHRwdWJsaWMgcmVuZGVyVGFyZ2V0PzogUmVuZGVyVGFyZ2V0O1xyXG5cclxuXHRwdWJsaWMgdmVydGV4QnVmZmVyPzogVmVydGV4dEJ1ZmZlcjtcclxuXHJcblx0cHVibGljIGluZGV4QnVmZmVyPzogSW5kZXhCdWZmZXI7XHJcblxyXG5cdHB1YmxpYyByZW5kZXJTdGF0ZT86IFJlbmRlclN0YXRlO1xyXG5cclxuXHRwdWJsaWMgcXVlcnlJbmRleD86IG51bWJlcjtcclxuXHJcblx0cHVibGljIGNvdW50PzogbnVtYmVyO1xyXG5cclxuXHRwdWJsaWMgaW5zdGFuY2VzPzogbnVtYmVyO1xyXG5cclxuXHRwdWJsaWMgZGlzcGF0Y2g/OiB7IHg/OiBudW1iZXI7IHk/OiBudW1iZXI7IHo/OiBudW1iZXIgfTtcclxuXHJcblx0cHVibGljIHNoYWRlclNvdXJjZT86IFNoYWRlclNvdXJjZTtcclxuXHJcblx0cHVibGljIGRpcnR5PzogYm9vbGVhbjtcclxuXHJcblx0cHVibGljIGxpZ2h0PzogYm9vbGVhbjtcclxuXHJcblx0cHVibGljIGluZGlyZWN0QnVmZmVyPzogQnVmZmVyO1xyXG5cclxuXHRwdWJsaWMgbW9kZWxNYXRyaXg/OiBNYXRyaXg0O1xyXG5cclxuXHRjb25zdHJ1Y3RvcihvcHRpb25zOiBEcmF3Q29tbWFuZFByb3BzKSB7XHJcblx0XHR0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGU7XHJcblxyXG5cdFx0dGhpcy5zaGFkZXJEYXRhID0gb3B0aW9ucy5zaGFkZXJEYXRhO1xyXG5cclxuXHRcdHRoaXMucmVuZGVyVGFyZ2V0ID0gb3B0aW9ucy5yZW5kZXJUYXJnZXQ7XHJcblxyXG5cdFx0dGhpcy52ZXJ0ZXhCdWZmZXIgPSBvcHRpb25zLnZlcnRleEJ1ZmZlcjtcclxuXHJcblx0XHR0aGlzLmluZGV4QnVmZmVyID0gb3B0aW9ucy5pbmRleEJ1ZmZlcjtcclxuXHJcblx0XHR0aGlzLnJlbmRlclN0YXRlID0gb3B0aW9ucy5yZW5kZXJTdGF0ZTtcclxuXHJcblx0XHR0aGlzLnF1ZXJ5SW5kZXggPSBvcHRpb25zLnF1ZXJ5SW5kZXg7XHJcblxyXG5cdFx0dGhpcy5jb3VudCA9IG9wdGlvbnMuY291bnQ7XHJcblxyXG5cdFx0dGhpcy5pbnN0YW5jZXMgPSBvcHRpb25zLmluc3RhbmNlcztcclxuXHJcblx0XHR0aGlzLmRpc3BhdGNoID0gb3B0aW9ucy5kaXNwYXRjaDtcclxuXHJcblx0XHR0aGlzLnNoYWRlclNvdXJjZSA9IG9wdGlvbnMuc2hhZGVyU291cmNlO1xyXG5cclxuXHRcdHRoaXMuZGlydHkgPSBvcHRpb25zLmRpcnR5O1xyXG5cclxuXHRcdHRoaXMubGlnaHQgPSBvcHRpb25zLmxpZ2h0O1xyXG5cclxuXHRcdHRoaXMubW9kZWxNYXRyaXggPSBvcHRpb25zLm1vZGVsTWF0cml4O1xyXG5cdH1cclxuXHRwdWJsaWMgc2hhbGxvd0Nsb25lKG1hdGVyaWFsPzogTWF0ZXJpYWwpIHtcclxuXHRcdGlmIChtYXRlcmlhbCkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IERyYXdDb21tYW5kKHtcclxuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXI6IHRoaXMudmVydGV4QnVmZmVyLFxyXG5cdFx0XHRcdGluZGV4QnVmZmVyOiB0aGlzLmluZGV4QnVmZmVyLFxyXG5cdFx0XHRcdHNoYWRlckRhdGE6IG1hdGVyaWFsLnNoYWRlckRhdGEsXHJcblx0XHRcdFx0aW5zdGFuY2VzOiB0aGlzLmluc3RhbmNlcyxcclxuXHRcdFx0XHRjb3VudDogdGhpcy5jb3VudCxcclxuXHRcdFx0XHRyZW5kZXJTdGF0ZTogbWF0ZXJpYWwucmVuZGVyU3RhdGUsXHJcblx0XHRcdFx0c2hhZGVyU291cmNlOiBtYXRlcmlhbC5zaGFkZXJTb3VyY2UsXHJcblx0XHRcdFx0dHlwZTogXCJyZW5kZXJcIixcclxuXHRcdFx0XHRsaWdodDogbWF0ZXJpYWwubGlnaHQsXHJcblx0XHRcdFx0bW9kZWxNYXRyaXg6IHRoaXMubW9kZWxNYXRyaXhcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbnR5cGUgRHJhd0NvbW1hbmRQcm9wcyA9IHtcclxuXHR0eXBlPzogc3RyaW5nO1xyXG5cclxuXHRzaGFkZXJEYXRhPzogU2hhZGVyRGF0YTtcclxuXHJcblx0cmVuZGVyVGFyZ2V0PzogUmVuZGVyVGFyZ2V0O1xyXG5cclxuXHR2ZXJ0ZXhCdWZmZXI/OiBWZXJ0ZXh0QnVmZmVyO1xyXG5cclxuXHRpbmRleEJ1ZmZlcj86IEluZGV4QnVmZmVyO1xyXG5cclxuXHRyZW5kZXJTdGF0ZT86IFJlbmRlclN0YXRlO1xyXG5cclxuXHRxdWVyeUluZGV4PzogbnVtYmVyO1xyXG5cclxuXHRjb3VudD86IG51bWJlcjtcclxuXHJcblx0aW5zdGFuY2VzPzogbnVtYmVyO1xyXG5cclxuXHRkaXNwYXRjaD86IHsgeD86IG51bWJlcjsgeT86IG51bWJlcjsgej86IG51bWJlciB9O1xyXG5cclxuXHRzaGFkZXJTb3VyY2U/OiBTaGFkZXJTb3VyY2U7XHJcblxyXG5cdGRpcnR5PzogYm9vbGVhbjtcclxuXHJcblx0bGlnaHQ/OiBib29sZWFuO1xyXG5cclxuXHRtb2RlbE1hdHJpeD86IE1hdHJpeDQ7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IERyYXdDb21tYW5kO1xyXG4iLCJpbXBvcnQgQmluZEdyb3VwTGF5b3V0IGZyb20gXCIuLi9yZW5kZXIvQmluZEdyb3VwTGF5b3V0XCI7XG5pbXBvcnQgQmluZEdyb3VwRW50aXR5IGZyb20gXCIuLi9yZW5kZXIvQmluZEdyb3VwRW50aXR5XCI7XG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcbmltcG9ydCB7XG5cdEJsZW5kRmFjdG9yLFxuXHRCbGVuZE9wZXJhdGlvbixcblx0Q29sb3JXcml0ZUZsYWdzLFxuXHRDb21wYXJlRnVuY3Rpb24sXG5cdEN1bGxNb2RlLFxuXHRGcm9udEZhY2UsXG5cdEluZGV4Rm9ybWF0LFxuXHRQcmltaXRpdmVUb3BvbG9neSxcblx0U3RlbmNpbE9wZXJhdGlvbixcblx0VGV4dHVyZUZvcm1hdFxufSBmcm9tIFwiLi9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4uL3JlbmRlci9TYW1wbGVyXCI7XG5pbXBvcnQgUG9zdEVmZmVjdCBmcm9tIFwiLi4vcG9zdC1wcm9jZXNzL1Bvc3RFZmZlY3RcIjtcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4uL2xpZ2h0L0xpZ2h0XCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xuZXhwb3J0IGNvbnN0IEdQVUNhbnZhc0NvbXBvc2l0aW5nQWxwaGFNb2RlOiB7XG5cdFtrZXk6IHN0cmluZ106IEdQVUNhbnZhc0NvbXBvc2l0aW5nQWxwaGFNb2RlO1xufSA9IHtcblx0T3BhcXVlOiBcIm9wYXF1ZVwiLFxuXHRQcmVtdWx0aXBsaWVkOiBcInByZW11bHRpcGxpZWRcIlxufTtcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGV4dFN0YXRlIHtcblx0ZGV2aWNlOiBHUFVEZXZpY2U7XG5cdGdsc2xhbmc6IHtcblx0XHRjb21waWxlR0xTTDogKHNvdXJjZTogc3RyaW5nLCB0eXBlOiBzdHJpbmcpID0+IHN0cmluZztcblx0fTtcblx0ZGVidWc6IGJvb2xlYW47XG5cdGVycm9yOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRleHRPcHRpb25zIHtcblx0Y2FudmFzPzogSFRNTENhbnZhc0VsZW1lbnQ7XG5cdGNvbnRhaW5lcj86IEhUTUxEaXZFbGVtZW50O1xuXHRjb250ZXh0PzogR1BVQ2FudmFzQ29udGV4dDtcblx0cGl4ZWxSYXRpbz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMaWdodE1hbmdlck9wdGlvbnMge1xuXHRvcGVuU2hhZG93OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpbmRHcm91cExheW91dEVudHJ5IGV4dGVuZHMgR1BVQmluZEdyb3VwTGF5b3V0RW50cnkge1xuXHRuYW1lOiBzdHJpbmc7XG5cdHVuaWZvcm1zPzogYW55W107XG5cdGRpbWVuc2lvbj86IEdQVVRleHR1cmVEaW1lbnNpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmluZEdyb3VwT3B0aW9ucyBleHRlbmRzIEdQVUJpbmRHcm91cERlc2NyaXB0b3Ige1xuXHRyZXNvdXJjZXM6IEdQVUJpbmRpbmdSZXNvdXJjZVtdO1xufVxuXG5leHBvcnQgdHlwZSBTaGFkZXJTdGFnZU5hbWUgPSBcInZlcnRleFwiIHwgXCJmcmFnbWVudFwiIHwgXCJjb21wdXRlXCI7XG5cbmV4cG9ydCB0eXBlIFNoYWRlclN0YWdlTmFtZU9iamVjdEtleXMgPSB7XG5cdFtrZXkgaW4gU2hhZGVyU3RhZ2VOYW1lXT86IHN0cmluZztcbn07XG5leHBvcnQgdHlwZSBTaGFkZXJTdGFnZUJvZHlOYW1lID0gXCJ2ZXJ0ZXhCb2R5XCIgfCBcImZyYWdtZW50Qm9keVwiIHwgXCJjb21wdXRlQm9keVwiO1xuZXhwb3J0IHR5cGUgU2hhZGVyU3RhZ2VCb2R5TmFtZU9iamVjdEtleXMgPSB7XG5cdFtrZXkgaW4gU2hhZGVyU3RhZ2VCb2R5TmFtZV0/OiBzdHJpbmc7XG59O1xuZXhwb3J0IGludGVyZmFjZSBBdHRhY2htZW50T3B0aW9ucyB7XG5cdG9wPzogR1BVU3RvcmVPcDtcblx0dGV4dHVyZT86IFRleHR1cmU7XG5cdHJlc29sdmVUYXJnZXQ/OiBUZXh0dXJlO1xuXHRzdG9yZU9wPzogR1BVU3RvcmVPcDtcbn1cblxuZXhwb3J0IHR5cGUgUGFzc1R5cGUgPSBcInJlbmRlclwiIHwgXCJjb21wdXRlXCI7XG5cbmV4cG9ydCB0eXBlIEdQVUJpbmRpbmdUeXBlID1cblx0fCBHUFVCdWZmZXJCaW5kaW5nVHlwZVxuXHR8IEdQVVNhbXBsZXJCaW5kaW5nVHlwZVxuXHR8IEdQVVRleHR1cmVTYW1wbGVUeXBlXG5cdHwgR1BVU3RvcmFnZVRleHR1cmVBY2Nlc3M7XG5cbmV4cG9ydCB0eXBlIEJpbmRHcm91cExheW91dEVudHJ5VHlwZSA9IHtcblx0YmluZGluZzogbnVtYmVyO1xuXHR2aXNpYmlsaXR5OiBHUFVTaGFkZXJTdGFnZUZsYWdzO1xuXHR1bmlmb3Jtcz86IGFueVtdO1xuXHRidWZmZXI/OiBHUFVCdWZmZXJCaW5kaW5nTGF5b3V0O1xuXHRzYW1wbGVyPzogR1BVU2FtcGxlckJpbmRpbmdMYXlvdXQ7XG5cdHRleHR1cmU/OiBHUFVUZXh0dXJlQmluZGluZ0xheW91dDtcblx0c3RvcmFnZVRleHR1cmU/OiBHUFVTdG9yYWdlVGV4dHVyZUJpbmRpbmdMYXlvdXQ7XG5cdGV4dGVybmFsVGV4dHVyZT86IEdQVUV4dGVybmFsVGV4dHVyZUJpbmRpbmdMYXlvdXQ7XG59O1xuZXhwb3J0IHR5cGUgQnVmZmVyUmVzb3VyY2VUeXBlID0ge1xuXHRidWZmZXI6IEdQVUJ1ZmZlckJpbmRpbmdUeXBlO1xuXHRvZmZzZXQ6IG51bWJlcjtcblx0c2l6ZTogbnVtYmVyO1xufTtcbmV4cG9ydCB0eXBlIHNhbXBsZXJCaW5kRW50aXR5UmVzb3VyY2VUeXBlID0ge1xuXHRyZXNvdXJjZTogR1BVU2FtcGxlcjtcbn07XG5leHBvcnQgdHlwZSB0ZXh0dXJlQmluZEVudGl0eVJlc291cmNlVHlwZSA9IHtcblx0cmVzb3VyY2U6IEdQVVRleHR1cmVWaWV3O1xufTtcbmV4cG9ydCB0eXBlIEJpbmRHcm91cEVudGl0eVJlc291cmNlVHlwZSA9XG5cdHwgQnVmZmVyUmVzb3VyY2VUeXBlXG5cdHwgc2FtcGxlckJpbmRFbnRpdHlSZXNvdXJjZVR5cGVcblx0fCB0ZXh0dXJlQmluZEVudGl0eVJlc291cmNlVHlwZTtcbmV4cG9ydCB0eXBlIEJpbmRHcm91cEVudGl0eU9wdGlvbnMgPSB7XG5cdGJpbmRpbmc6IG51bWJlcjtcblx0cmVzb3VyY2U6IEdQVUJpbmRpbmdSZXNvdXJjZTtcbn07XG5leHBvcnQgdHlwZSBCaW5kR3JvdXBDYWNoZU9wdGlvbnMgPSB7XG5cdGRldmljZTogR1BVRGV2aWNlO1xuXHRsYWJlbDogc3RyaW5nO1xuXHRsYXlvdXQ6IEJpbmRHcm91cExheW91dDtcblx0ZW50aXJlczogQmluZEdyb3VwRW50aXR5W107XG5cdGluZGV4PzogbnVtYmVyO1xufTtcbmV4cG9ydCB0eXBlIEltYWdlRGF0YSA9IHtcblx0c291cmNlOiBJbWFnZUJpdG1hcCB8IEhUTUxDYW52YXNFbGVtZW50IHwgVGV4dHVyZTtcblx0d2lkdGg/OiBudW1iZXI7XG5cdGhlaWdodD86IG51bWJlcjtcblx0ZGVwdGg/OiBudW1iZXI7XG5cdHNvdXJjZVg/OiBudW1iZXI7XG5cdHNvdXJjZVk/OiBudW1iZXI7XG5cdG1pcExldmVsPzogbnVtYmVyO1xuXHR4PzogbnVtYmVyO1xuXHR5PzogbnVtYmVyO1xuXHR6PzogbnVtYmVyO1xuXHRhc3BlY3Q/OiBcImFsbFwiIHwgXCJzdGVuY2lsLW9ubHlcIiB8IFwiZGVwdGgtb25seVwiO1xuXHRjb2xvclNwYWNlPzogXCJzcmdiXCI7XG5cdHByZW11bHRpcGxpZWRBbHBoYT86IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgV2ViR1BVVGV4dHVyZVByb3BzID0ge1xuXHRzaXplOiB0ZXh0dXJlU2l6ZTtcblxuXHRmaXhlZFNpemU/OiBib29sZWFuO1xuXG5cdGZvcm1hdDogc3RyaW5nO1xuXG5cdGxhYmVsPzogc3RyaW5nO1xuXG5cdHVzYWdlPzogbnVtYmVyO1xuXG5cdHNhbXBsZXI/OiBTYW1wbGVyO1xuXG5cdGRhdGE/OiBJbWFnZURhdGEgfCBBcnJheTxJbWFnZURhdGE+O1xuXG5cdG1pcExldmVsQ291bnQ/OiBudW1iZXI7XG5cblx0c2FtcGxlQ291bnQ/OiBudW1iZXI7XG5cblx0ZGltZW5zaW9uPzogZGltZW5zaW9uO1xuXG5cdHZpZXdGb3JtYXRzPzogc3RyaW5nO1xuXG5cdHNhbXBsZVR5cGU/OiBzdHJpbmc7XG5cblx0bmVlZE1pcE1hcD86IGJvb2xlYW47XG5cblx0ZGF0YUlzVGV4dHVyZT86IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgdGV4dHVyZVNpemUgPSB7XG5cdHdpZHRoOiBudW1iZXI7XG5cdGhlaWdodDogbnVtYmVyO1xuXHRkZXB0aDogbnVtYmVyO1xufTtcbmV4cG9ydCB0eXBlIGRpbWVuc2lvbiA9IFwiMWRcIiB8IFwiMmRcIiB8IFwiM2RcIjtcbmV4cG9ydCB0eXBlIGJ1ZmZlckxheW91dFR5cGUgPSB7XG5cdHR5cGU6IHN0cmluZzsgLy9cInVuaWZvcm1cIlxuXHRoYXNEeW5hbWljT2Zmc2V0PzogQm9vbGVhbjtcblx0bWluQmluZGluZ1NpemU/OiBudW1iZXI7XG59O1xuLy9yZW5kZXJzdGF0ZVxuZXhwb3J0IHR5cGUgRGVwdGhTdGVuY2lsID0ge1xuXHRmb3JtYXQ6IFRleHR1cmVGb3JtYXQ7XG5cdGRlcHRoV3JpdGVFbmFibGVkOiBib29sZWFuO1xuXHRkZXB0aENvbXBhcmU6IENvbXBhcmVGdW5jdGlvbjtcblx0c3RlbmNpbFJlYWRNYXNrPzogbnVtYmVyO1xuXHRzdGVuY2lsV3JpdGVNYXNrPzogbnVtYmVyO1xuXHRzdGVuY2lsRnJvbnQ/OiB7XG5cdFx0Y29tcGFyZTogQ29tcGFyZUZ1bmN0aW9uO1xuXHRcdGZhaWxPcDogU3RlbmNpbE9wZXJhdGlvbjtcblx0XHRkZXB0aEZhaWxPcDogU3RlbmNpbE9wZXJhdGlvbjtcblx0XHRwYXNzT3A6IFN0ZW5jaWxPcGVyYXRpb247XG5cdH07XG5cdHN0ZW5jaWxCYWNrPzoge1xuXHRcdGNvbXBhcmU6IENvbXBhcmVGdW5jdGlvbjtcblx0XHRmYWlsT3A6IFN0ZW5jaWxPcGVyYXRpb247XG5cdFx0ZGVwdGhGYWlsT3A6IFN0ZW5jaWxPcGVyYXRpb247XG5cdFx0cGFzc09wOiBTdGVuY2lsT3BlcmF0aW9uO1xuXHR9O1xuXHRkZXB0aEJpYXM/OiBudW1iZXI7XG5cdGRlcHRoQmlhc1Nsb3BlU2NhbGU/OiBudW1iZXI7XG5cdGRlcHRoQmlhc0NsYW1wPzogbnVtYmVyO1xufTtcbmV4cG9ydCB0eXBlIFByaW1pdGl2ZVN0YXRlID0ge1xuXHRmcm9udEZhY2U/OiBGcm9udEZhY2U7XG5cdGN1bGxNb2RlPzogQ3VsbE1vZGU7XG5cdHVuY2xpcHBlZERlcHRoPzogYm9vbGVhbjtcblx0dG9wb2xvZ3k/OiBQcmltaXRpdmVUb3BvbG9neTtcblx0c3RyaXBJbmRleEZvcm1hdD86IEluZGV4Rm9ybWF0O1xufTtcbmV4cG9ydCB0eXBlIE11bHRpU2FtcGxlID0ge1xuXHRjb3VudD86IG51bWJlcjtcblx0bWFzaz86IG51bWJlcjtcblx0YWxwaGFUb0NvdmVyYWdlRW5hYmxlZD86IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgVGFyZ2V0ID0ge1xuXHRmb3JtYXQ6IFRleHR1cmVGb3JtYXQ7XG5cdGJsZW5kPzoge1xuXHRcdGNvbG9yOiB7XG5cdFx0XHRvcGVyYXRpb246IEJsZW5kT3BlcmF0aW9uO1xuXHRcdFx0c3JjRmFjdG9yOiBCbGVuZEZhY3Rvcjtcblx0XHRcdGRzdEZhY3RvcjogQmxlbmRGYWN0b3I7XG5cdFx0fTtcblx0XHRhbHBoYToge1xuXHRcdFx0b3BlcmF0aW9uOiBCbGVuZE9wZXJhdGlvbjtcblx0XHRcdHNyY0ZhY3RvcjogQmxlbmRGYWN0b3I7XG5cdFx0XHRkc3RGYWN0b3I6IEJsZW5kRmFjdG9yO1xuXHRcdH07XG5cdH07XG5cdHdyaXRlTWFzazogQ29sb3JXcml0ZUZsYWdzO1xufTtcbmV4cG9ydCB0eXBlIEJsZW5kQ29uc3RhbnQgPSB7XG5cdHI6IG51bWJlcjtcblx0ZzogbnVtYmVyO1xuXHRiOiBudW1iZXI7XG5cdGE6IG51bWJlcjtcbn07XG5leHBvcnQgdHlwZSBSZW5kZXJTdGF0ZVByb3BzID0ge1xuXHRkZXB0aFN0ZW5jaWw/OiBEZXB0aFN0ZW5jaWw7XG5cdHByaW1pdGl2ZT86IFByaW1pdGl2ZVN0YXRlO1xuXHRtdWx0aXNhbXBsZT86IE11bHRpU2FtcGxlO1xuXHRzdGVuY2lsUmVmZXJlbmNlPzogbnVtYmVyO1xuXHR0YXJnZXRzPzogQXJyYXk8VGFyZ2V0Pjtcblx0dmlld3BvcnQ/OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9O1xuXHRibGVuZENvbnN0YW50PzogQmxlbmRDb25zdGFudDtcblx0c2Npc3NvclRlc3RFbmFibGVkPzogYm9vbGVhbjtcblx0c3RlbmNpbEVuYWJsZWQ/OiBib29sZWFuO1xufTtcbmV4cG9ydCB0eXBlIFZpZXdQb3J0ID0ge1xuXHR4OiBudW1iZXI7XG5cdHk6IG51bWJlcjtcblx0d2lkdGg6IG51bWJlcjtcblx0aGVpZ2h0OiBudW1iZXI7XG59O1xuZXhwb3J0IHR5cGUgU2Npc3NvclRlc3QgPSB7XG5cdHg6IG51bWJlcjtcblx0eTogbnVtYmVyO1xuXHR3aWR0aDogbnVtYmVyO1xuXHRoZWlnaHQ6IG51bWJlcjtcbn07XG5leHBvcnQgdHlwZSBTaGFkZXJNYXRlcmlhbFBhcm1zID0ge1xuXHR0eXBlOiBzdHJpbmc7XG5cdGZyYWc6IHN0cmluZyB8IEZ1bmN0aW9uO1xuXHR2ZXJ0OiBzdHJpbmcgfCBGdW5jdGlvbjtcblx0dW5pZm9ybXM6IHsgW3VuaWZvcm06IHN0cmluZ106IElVbmlmb3JtIH07XG5cdGRlZmluZXM/OiBhbnk7XG5cdGxpZ2h0PzogYm9vbGVhbjtcbn07XG5leHBvcnQgaW50ZXJmYWNlIElVbmlmb3JtPFRWYWx1ZSA9IGFueT4ge1xuXHR0eXBlOiBzdHJpbmc7XG5cdHZhbHVlOiBUVmFsdWU7XG59XG5leHBvcnQgdHlwZSBVbmlmb3JtcyA9IHsgW3VuaWZvcm06IHN0cmluZ106IElVbmlmb3JtIH07XG5leHBvcnQgdHlwZSBJbnN0YW5jZSA9IE1lc2ggfCBQb3N0RWZmZWN0IHwgTGlnaHQ7XG4iLCJpbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBNaXBtYXBHZW5lcmF0b3Ige1xyXG4gIGRldmljZTogR1BVRGV2aWNlO1xyXG4gIHNhbXBsZXI6IEdQVVNhbXBsZXI7XHJcbiAgcGlwZWxpbmVzOiB7fTtcclxuICBtaXBtYXBTaGFkZXJNb2R1bGU6IEdQVVNoYWRlck1vZHVsZTtcclxuICBjb25zdHJ1Y3RvcihkZXZpY2UpIHtcclxuICAgIHRoaXMuZGV2aWNlID0gZGV2aWNlO1xyXG4gICAgdGhpcy5zYW1wbGVyID0gZGV2aWNlLmNyZWF0ZVNhbXBsZXIoeyBtaW5GaWx0ZXI6IFwibGluZWFyXCIgfSk7XHJcbiAgICAvLyBXZSdsbCBuZWVkIGEgbmV3IHBpcGVsaW5lIGZvciBldmVyeSB0ZXh0dXJlIGZvcm1hdCB1c2VkLlxyXG4gICAgdGhpcy5waXBlbGluZXMgPSB7fTtcclxuICB9XHJcbiAgcHJpdmF0ZSBnZXRNaXBtYXBQaXBlbGluZShmb3JtYXQpIHtcclxuICAgIGxldCBwaXBlbGluZSA9IHRoaXMucGlwZWxpbmVzW2Zvcm1hdF07XHJcbiAgICBpZiAoIXBpcGVsaW5lKSB7XHJcbiAgICAgIC8vIFNoYWRlciBtb2R1bGVzIGlzIHNoYXJlZCBiZXR3ZWVuIGFsbCBwaXBlbGluZXMsIHNvIG9ubHkgY3JlYXRlIG9uY2UuXHJcbiAgICAgIGlmICghdGhpcy5taXBtYXBTaGFkZXJNb2R1bGUpIHtcclxuICAgICAgICB0aGlzLm1pcG1hcFNoYWRlck1vZHVsZSA9IHRoaXMuZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XHJcbiAgICAgICAgICBjb2RlOiBgXHJcbiAgICAgICAgICAgICAgdmFyPHByaXZhdGU+IHBvcyA6IGFycmF5PHZlYzI8ZjMyPiwgMz4gPSBhcnJheTx2ZWMyPGYzMj4sIDM+KFxyXG4gICAgICAgICAgICAgICAgdmVjMjxmMzI+KC0xLjAsIC0xLjApLCB2ZWMyPGYzMj4oLTEuMCwgMy4wKSwgdmVjMjxmMzI+KDMuMCwgLTEuMCkpO1xyXG4gICAgICAgICAgICAgIHN0cnVjdCBWZXJ0ZXhPdXRwdXQge1xyXG4gICAgICAgICAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uIDogdmVjNDxmMzI+LFxyXG4gICAgICAgICAgICAgICAgQGxvY2F0aW9uKDApIHRleENvb3JkIDogdmVjMjxmMzI+LFxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgQHZlcnRleFxyXG4gICAgICAgICAgICAgIGZuIHZlcnRleE1haW4oQGJ1aWx0aW4odmVydGV4X2luZGV4KSB2ZXJ0ZXhJbmRleCA6IHUzMikgLT4gVmVydGV4T3V0cHV0IHtcclxuICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgOiBWZXJ0ZXhPdXRwdXQ7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQudGV4Q29vcmQgPSBwb3NbdmVydGV4SW5kZXhdICogdmVjMjxmMzI+KDAuNSwgLTAuNSkgKyB2ZWMyPGYzMj4oMC41KTtcclxuICAgICAgICAgICAgICAgIG91dHB1dC5wb3NpdGlvbiA9IHZlYzQ8ZjMyPihwb3NbdmVydGV4SW5kZXhdLCAwLjAsIDEuMCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoMCkgdmFyIGltZ1NhbXBsZXIgOiBzYW1wbGVyO1xyXG4gICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygxKSB2YXIgaW1nIDogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAgIEBmcmFnbWVudFxyXG4gICAgICAgICAgICAgIGZuIGZyYWdtZW50TWFpbihAbG9jYXRpb24oMCkgdGV4Q29vcmQgOiB2ZWMyPGYzMj4pIC0+IEBsb2NhdGlvbigwKSB2ZWM0PGYzMj4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVTYW1wbGUoaW1nLCBpbWdTYW1wbGVyLCB0ZXhDb29yZCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBgLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwaXBlbGluZSA9IHRoaXMuZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lKHtcclxuICAgICAgICBsYXlvdXQ6IFwiYXV0b1wiLFxyXG4gICAgICAgIHZlcnRleDoge1xyXG4gICAgICAgICAgbW9kdWxlOiB0aGlzLm1pcG1hcFNoYWRlck1vZHVsZSxcclxuICAgICAgICAgIGVudHJ5UG9pbnQ6IFwidmVydGV4TWFpblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnJhZ21lbnQ6IHtcclxuICAgICAgICAgIG1vZHVsZTogdGhpcy5taXBtYXBTaGFkZXJNb2R1bGUsXHJcbiAgICAgICAgICBlbnRyeVBvaW50OiBcImZyYWdtZW50TWFpblwiLFxyXG4gICAgICAgICAgdGFyZ2V0czogW3sgZm9ybWF0IH1dLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnBpcGVsaW5lc1tmb3JtYXRdID0gcGlwZWxpbmU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGlwZWxpbmU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZXMgbWlwbWFwcyBmb3IgdGhlIGdpdmVuIEdQVVRleHR1cmUgZnJvbSB0aGUgZGF0YSBpbiBsZXZlbCAwLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHttb2R1bGU6RXh0ZXJuYWwuR1BVVGV4dHVyZX0gdGV4dHVyZSAtIFRleHR1cmUgdG8gZ2VuZXJhdGUgbWlwbWFwcyBmb3IuXHJcbiAgICogQHBhcmFtIHtvYmplY3R9IHRleHR1cmVEZXNjcmlwdG9yIC0gR1BVVGV4dHVyZURlc2NyaXB0b3IgdGhlIHRleHR1cmUgd2FzIGNyZWF0ZWQgd2l0aC5cclxuICAgKiBAcmV0dXJucyB7bW9kdWxlOkV4dGVybmFsLkdQVVRleHR1cmV9IC0gVGhlIG9yaWdpbmFsbHkgcGFzc2VkIHRleHR1cmVcclxuICAgKi9cclxuICBnZW5lcmF0ZU1pcG1hcChzb3VyY2VUZXh0dXJlOiBUZXh0dXJlKSB7XHJcbiAgICBjb25zdCB0ZXh0dXJlID0gc291cmNlVGV4dHVyZS5ncHVUZXh0dXJlO1xyXG4gICAgY29uc3QgdGV4dHVyZURlc2NyaXB0b3IgPSBzb3VyY2VUZXh0dXJlLnRleHR1cmVQcm9wO1xyXG4gICAgLy8gVE9ETzogRG9lcyB0aGlzIG5lZWQgdG8gaGFuZGxlIHNSR0IgZm9ybWF0cyBkaWZmZXJlbnRseT9cclxuICAgIGNvbnN0IHBpcGVsaW5lID0gdGhpcy5nZXRNaXBtYXBQaXBlbGluZSh0ZXh0dXJlRGVzY3JpcHRvci5mb3JtYXQpO1xyXG5cclxuICAgIGlmIChcclxuICAgICAgdGV4dHVyZURlc2NyaXB0b3IuZGltZW5zaW9uID09IFwiM2RcIiB8fFxyXG4gICAgICB0ZXh0dXJlRGVzY3JpcHRvci5kaW1lbnNpb24gPT0gXCIxZFwiXHJcbiAgICApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgIFwiR2VuZXJhdGluZyBtaXBtYXBzIGZvciBub24tMmQgdGV4dHVyZXMgaXMgY3VycmVudGx5IHVuc3VwcG9ydGVkIVwiXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1pcFRleHR1cmUgPSB0ZXh0dXJlO1xyXG4gICAgY29uc3QgYXJyYXlMYXllckNvdW50ID0gdGV4dHVyZURlc2NyaXB0b3Iuc2l6ZS5kZXB0aCB8fCAxOyAvLyBPbmx5IHZhbGlkIGZvciAyRCB0ZXh0dXJlcy5cclxuXHJcbiAgICAvLyBJZiB0aGUgdGV4dHVyZSB3YXMgY3JlYXRlZCB3aXRoIFJFTkRFUl9BVFRBQ0hNRU5UIHVzYWdlIHdlIGNhbiByZW5kZXIgZGlyZWN0bHkgYmV0d2VlbiBtaXAgbGV2ZWxzLlxyXG4gICAgY29uc3QgcmVuZGVyVG9Tb3VyY2UgPVxyXG4gICAgICB0ZXh0dXJlRGVzY3JpcHRvci51c2FnZSAmIEdQVVRleHR1cmVVc2FnZS5SRU5ERVJfQVRUQUNITUVOVDtcclxuICAgIGlmICghcmVuZGVyVG9Tb3VyY2UpIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlIHdlIGhhdmUgdG8gdXNlIGEgc2VwYXJhdGUgdGV4dHVyZSB0byByZW5kZXIgaW50by4gSXQgY2FuIGJlIG9uZSBtaXAgbGV2ZWwgc21hbGxlciB0aGFuIHRoZSBzb3VyY2VcclxuICAgICAgLy8gdGV4dHVyZSwgc2luY2Ugd2UgYWxyZWFkeSBoYXZlIHRoZSB0b3AgbGV2ZWwuXHJcbiAgICAgIGNvbnN0IG1pcFRleHR1cmVEZXNjcmlwdG9yID0ge1xyXG4gICAgICAgIHNpemU6IHtcclxuICAgICAgICAgIHdpZHRoOiBNYXRoLmNlaWwodGV4dHVyZURlc2NyaXB0b3Iuc2l6ZS53aWR0aCAvIDIpLFxyXG4gICAgICAgICAgaGVpZ2h0OiBNYXRoLmNlaWwodGV4dHVyZURlc2NyaXB0b3Iuc2l6ZS5oZWlnaHQgLyAyKSxcclxuICAgICAgICAgIGRlcHRoT3JBcnJheUxheWVyczogYXJyYXlMYXllckNvdW50LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZm9ybWF0OiA8R1BVVGV4dHVyZUZvcm1hdD50ZXh0dXJlRGVzY3JpcHRvci5mb3JtYXQsXHJcbiAgICAgICAgdXNhZ2U6XHJcbiAgICAgICAgICBHUFVUZXh0dXJlVXNhZ2UuVEVYVFVSRV9CSU5ESU5HIHxcclxuICAgICAgICAgIEdQVVRleHR1cmVVc2FnZS5DT1BZX1NSQyB8XHJcbiAgICAgICAgICBHUFVUZXh0dXJlVXNhZ2UuUkVOREVSX0FUVEFDSE1FTlQsXHJcbiAgICAgICAgbWlwTGV2ZWxDb3VudDogdGV4dHVyZURlc2NyaXB0b3IubWlwTGV2ZWxDb3VudCAtIDEsXHJcbiAgICAgIH07XHJcbiAgICAgIG1pcFRleHR1cmUgPSB0aGlzLmRldmljZS5jcmVhdGVUZXh0dXJlKG1pcFRleHR1cmVEZXNjcmlwdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb21tYW5kRW5jb2RlciA9IHRoaXMuZGV2aWNlLmNyZWF0ZUNvbW1hbmRFbmNvZGVyKHt9KTtcclxuICAgIC8vIFRPRE86IENvbnNpZGVyIG1ha2luZyB0aGlzIHN0YXRpYy5cclxuICAgIGNvbnN0IGJpbmRHcm91cExheW91dCA9IHBpcGVsaW5lLmdldEJpbmRHcm91cExheW91dCgwKTtcclxuXHJcbiAgICBmb3IgKGxldCBhcnJheUxheWVyID0gMDsgYXJyYXlMYXllciA8IGFycmF5TGF5ZXJDb3VudDsgKythcnJheUxheWVyKSB7XHJcbiAgICAgIGxldCBzcmNWaWV3ID0gdGV4dHVyZS5jcmVhdGVWaWV3KHtcclxuICAgICAgICBiYXNlTWlwTGV2ZWw6IDAsXHJcbiAgICAgICAgbWlwTGV2ZWxDb3VudDogMSxcclxuICAgICAgICBkaW1lbnNpb246IFwiMmRcIixcclxuICAgICAgICBiYXNlQXJyYXlMYXllcjogYXJyYXlMYXllcixcclxuICAgICAgICBhcnJheUxheWVyQ291bnQ6IDEsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbGV0IGRzdE1pcExldmVsID0gcmVuZGVyVG9Tb3VyY2UgPyAxIDogMDtcclxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0ZXh0dXJlRGVzY3JpcHRvci5taXBMZXZlbENvdW50OyArK2kpIHtcclxuICAgICAgICBjb25zdCBkc3RWaWV3ID0gbWlwVGV4dHVyZS5jcmVhdGVWaWV3KHtcclxuICAgICAgICAgIGJhc2VNaXBMZXZlbDogZHN0TWlwTGV2ZWwrKyxcclxuICAgICAgICAgIG1pcExldmVsQ291bnQ6IDEsXHJcbiAgICAgICAgICBkaW1lbnNpb246IFwiMmRcIixcclxuICAgICAgICAgIGJhc2VBcnJheUxheWVyOiBhcnJheUxheWVyLFxyXG4gICAgICAgICAgYXJyYXlMYXllckNvdW50OiAxLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBwYXNzRW5jb2RlciA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyh7XHJcbiAgICAgICAgICBjb2xvckF0dGFjaG1lbnRzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB2aWV3OiBkc3RWaWV3LFxyXG4gICAgICAgICAgICAgIGxvYWRPcDogXCJjbGVhclwiLFxyXG4gICAgICAgICAgICAgIHN0b3JlT3A6IFwic3RvcmVcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJpbmRHcm91cCA9IHRoaXMuZGV2aWNlLmNyZWF0ZUJpbmRHcm91cCh7XHJcbiAgICAgICAgICBsYXlvdXQ6IGJpbmRHcm91cExheW91dCxcclxuICAgICAgICAgIGVudHJpZXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGJpbmRpbmc6IDAsXHJcbiAgICAgICAgICAgICAgcmVzb3VyY2U6IHRoaXMuc2FtcGxlcixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGJpbmRpbmc6IDEsXHJcbiAgICAgICAgICAgICAgcmVzb3VyY2U6IHNyY1ZpZXcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwYXNzRW5jb2Rlci5zZXRQaXBlbGluZShwaXBlbGluZSk7XHJcbiAgICAgICAgcGFzc0VuY29kZXIuc2V0QmluZEdyb3VwKDAsIGJpbmRHcm91cCk7XHJcbiAgICAgICAgcGFzc0VuY29kZXIuZHJhdygzLCAxLCAwLCAwKTtcclxuICAgICAgICBwYXNzRW5jb2Rlci5lbmQoKTtcclxuXHJcbiAgICAgICAgc3JjVmlldyA9IGRzdFZpZXc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB3ZSBkaWRuJ3QgcmVuZGVyIHRvIHRoZSBzb3VyY2UgdGV4dHVyZSwgZmluaXNoIGJ5IGNvcHlpbmcgdGhlIG1pcCByZXN1bHRzIGZyb20gdGhlIHRlbXBvcmFyeSBtaXBtYXAgdGV4dHVyZVxyXG4gICAgLy8gdG8gdGhlIHNvdXJjZS5cclxuICAgIGlmICghcmVuZGVyVG9Tb3VyY2UpIHtcclxuICAgICAgY29uc3QgbWlwTGV2ZWxTaXplID0ge1xyXG4gICAgICAgIHdpZHRoOiBNYXRoLmNlaWwodGV4dHVyZURlc2NyaXB0b3Iuc2l6ZS53aWR0aCAvIDIpLFxyXG4gICAgICAgIGhlaWdodDogTWF0aC5jZWlsKHRleHR1cmVEZXNjcmlwdG9yLnNpemUuaGVpZ2h0IC8gMiksXHJcbiAgICAgICAgZGVwdGhPckFycmF5TGF5ZXJzOiBhcnJheUxheWVyQ291bnQsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRleHR1cmVEZXNjcmlwdG9yLm1pcExldmVsQ291bnQ7ICsraSkge1xyXG4gICAgICAgIGNvbW1hbmRFbmNvZGVyLmNvcHlUZXh0dXJlVG9UZXh0dXJlKFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0ZXh0dXJlOiBtaXBUZXh0dXJlLFxyXG4gICAgICAgICAgICBtaXBMZXZlbDogaSAtIDEsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0ZXh0dXJlOiB0ZXh0dXJlLFxyXG4gICAgICAgICAgICBtaXBMZXZlbDogaSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBtaXBMZXZlbFNpemVcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBtaXBMZXZlbFNpemUud2lkdGggPSBNYXRoLmNlaWwobWlwTGV2ZWxTaXplLndpZHRoIC8gMik7XHJcbiAgICAgICAgbWlwTGV2ZWxTaXplLmhlaWdodCA9IE1hdGguY2VpbChtaXBMZXZlbFNpemUuaGVpZ2h0IC8gMik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmRldmljZS5xdWV1ZS5zdWJtaXQoW2NvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XHJcblxyXG4gICAgaWYgKCFyZW5kZXJUb1NvdXJjZSkge1xyXG4gICAgICBtaXBUZXh0dXJlLmRlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGV4dHVyZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEJpbmRHcm91cExheW91dCBmcm9tIFwiLi9CaW5kR3JvdXBMYXlvdXRcIjtcclxuXHJcbmNvbnN0IHBpcGVsaW5lTGF5b3V0Q2FjaGUgPSBuZXcgTWFwKCk7XHJcbmV4cG9ydCBjbGFzcyBQaXBlbGluZUxheW91dCB7XHJcbiAgcHVibGljIGdwdVBpcGVsaW5lTGF5b3V0OiBHUFVQaXBlbGluZUxheW91dDtcclxuICBpbmRleDogbnVtYmVyO1xyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoXHJcbiAgICBkZXZpY2U6IEdQVURldmljZSxcclxuICAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgICBwdWJsaWMgZ3JvdXBMYXlvdXRzOiBCaW5kR3JvdXBMYXlvdXRbXSA9IFtdLFxyXG4gICAgaW5kZXg/OiBudW1iZXJcclxuICApIHtcclxuICAgIHRoaXMuaW5kZXggPSBpbmRleCB8fCAwO1xyXG4gICAgdGhpcy5ncHVQaXBlbGluZUxheW91dCA9IGRldmljZS5jcmVhdGVQaXBlbGluZUxheW91dCh7XHJcbiAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgYmluZEdyb3VwTGF5b3V0czogZ3JvdXBMYXlvdXRzLm1hcCgobGF5b3V0KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGxheW91dC5ncHVCaW5kR3JvdXBMYXlvdXQ7XHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHN0YXRpYyBnZXRQaXBlbGluZUxheW91dEZyb21DYWNoZShcclxuICAgIGRldmljZTogR1BVRGV2aWNlLFxyXG4gICAgbGFiZWw6IHN0cmluZyxcclxuICAgIGdyb3VwTGF5b3V0czogQmluZEdyb3VwTGF5b3V0W11cclxuICApOiBQaXBlbGluZUxheW91dCB7XHJcbiAgICBpZiAocGlwZWxpbmVMYXlvdXRDYWNoZS5oYXMobGFiZWwpKSB7XHJcbiAgICAgIHJldHVybiBwaXBlbGluZUxheW91dENhY2hlLmdldChsYWJlbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBiaW5kR3JvdXBMYXlvdXQgPSBuZXcgUGlwZWxpbmVMYXlvdXQoZGV2aWNlLCBsYWJlbCwgZ3JvdXBMYXlvdXRzKTtcclxuICAgICAgcGlwZWxpbmVMYXlvdXRDYWNoZS5zZXQobGFiZWwsIGJpbmRHcm91cExheW91dCk7XHJcbiAgICAgIHJldHVybiBiaW5kR3JvdXBMYXlvdXQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBCaW5kR3JvdXBMYXlvdXQgZnJvbSBcIi4vQmluZEdyb3VwTGF5b3V0XCI7XG5pbXBvcnQgRHJhd0NvbW1hbmQgZnJvbSBcIi4vRHJhd0NvbW1hbmRcIjtcbmltcG9ydCB7IFBpcGVsaW5lTGF5b3V0IH0gZnJvbSBcIi4vUGlwZWxpbmVMYXlvdXRcIjtcbmltcG9ydCB7IFJlbmRlclN0YXRlIH0gZnJvbSBcIi4vUmVuZGVyU3RhdGVcIjtcblxuY29uc3QgcmVuZGVyUGlwZWxpbmVzID0gbmV3IE1hcCgpO1xuY29uc3QgY29tcHV0ZVBpcGVsaW5lcyA9IG5ldyBNYXAoKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBpcGVsaW5lIHtcblx0Z3B1UGlwZWxpbmU6IEdQVVJlbmRlclBpcGVsaW5lIHwgR1BVQ29tcHV0ZVBpcGVsaW5lO1xuXHR0eXBlOiBzdHJpbmc7XG5cdGRldmljZTogR1BVRGV2aWNlO1xuXHRkZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgfCBHUFVDb21wdXRlUGlwZWxpbmVEZXNjcmlwdG9yO1xuXHRjb25zdHJ1Y3Rvcihcblx0XHR0eXBlOiBzdHJpbmcsXG5cdFx0ZGV2aWNlOiBHUFVEZXZpY2UsXG5cdFx0ZGVzY3JpcHRvcjogR1BVUmVuZGVyUGlwZWxpbmVEZXNjcmlwdG9yIHwgR1BVQ29tcHV0ZVBpcGVsaW5lRGVzY3JpcHRvclxuXHQpIHtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuZGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XG5cdFx0dGhpcy5kZXZpY2UgPSBkZXZpY2U7XG5cdFx0dGhpcy5jcmVhdGVQaXBlbGluZSgpO1xuXHR9XG5cdHByaXZhdGUgY3JlYXRlUGlwZWxpbmUoKSB7XG5cdFx0aWYgKHRoaXMudHlwZSA9PSBcInJlbmRlclwiKSB7XG5cdFx0XHR0aGlzLmdwdVBpcGVsaW5lID0gdGhpcy5kZXZpY2UuY3JlYXRlUmVuZGVyUGlwZWxpbmUodGhpcy5kZXNjcmlwdG9yIGFzIEdQVVJlbmRlclBpcGVsaW5lRGVzY3JpcHRvcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZ3B1UGlwZWxpbmUgPSB0aGlzLmRldmljZS5jcmVhdGVDb21wdXRlUGlwZWxpbmUodGhpcy5kZXNjcmlwdG9yIGFzIEdQVUNvbXB1dGVQaXBlbGluZURlc2NyaXB0b3IpO1xuXHRcdH1cblx0fVxuXHRwdWJsaWMgYmluZChwYXNzRW5jb2RlcjogR1BVUmVuZGVyUGFzc0VuY29kZXIgfCBHUFVDb21wdXRlUGFzc0VuY29kZXIpIHtcblx0XHRpZiAodGhpcy50eXBlID09IFwicmVuZGVyXCIpIHtcblx0XHRcdChwYXNzRW5jb2RlciBhcyBHUFVSZW5kZXJQYXNzRW5jb2Rlcikuc2V0UGlwZWxpbmUodGhpcy5ncHVQaXBlbGluZSBhcyBHUFVSZW5kZXJQaXBlbGluZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdChwYXNzRW5jb2RlciBhcyBHUFVDb21wdXRlUGFzc0VuY29kZXIpLnNldFBpcGVsaW5lKHRoaXMuZ3B1UGlwZWxpbmUgYXMgR1BVQ29tcHV0ZVBpcGVsaW5lKTtcblx0XHR9XG5cdH1cblx0c3RhdGljIGdldFJlbmRlclBpcGVsaW5lRnJvbUNhY2hlKFxuXHRcdGRldmljZTogR1BVRGV2aWNlLFxuXHRcdGRyYXdDb21hbmQ6IERyYXdDb21tYW5kLFxuXHRcdGdyb3VwTGF5b3V0czogQmluZEdyb3VwTGF5b3V0W11cblx0KTogUGlwZWxpbmUge1xuXHRcdGNvbnN0IHsgcmVuZGVyU3RhdGUsIHNoYWRlclNvdXJjZSB9ID0gZHJhd0NvbWFuZDtcblx0XHRjb25zdCByc1N0ciA9IEpTT04uc3RyaW5naWZ5KHJlbmRlclN0YXRlKTtcblx0XHRjb25zdCBjb21iaW5lU3RyID0gc2hhZGVyU291cmNlLnVpZC5jb25jYXQocnNTdHIpO1xuXHRcdGNvbnN0IGhhc2hJZCA9IHN0cmluZ1RvSGFzaChjb21iaW5lU3RyKTtcblx0XHRjb25zdCBjb21iaW5lTGF5b3V0cyA9IGdyb3VwTGF5b3V0cy5zb3J0KChsYXlvdXQxLCBsYXlvdXQyKSA9PiBsYXlvdXQxLmluZGV4IC0gbGF5b3V0Mi5pbmRleCk7XG5cdFx0bGV0IHBpcGVsaW5lID0gcmVuZGVyUGlwZWxpbmVzLmdldChoYXNoSWQpO1xuXHRcdGlmICghcGlwZWxpbmUpIHtcblx0XHRcdGNvbnN0IGRlc2NyaXB0b3IgPSBQaXBlbGluZS5nZXRQaXBlbGluZURlc2NyaXB0b3IoXG5cdFx0XHRcdGRldmljZSxcblx0XHRcdFx0ZHJhd0NvbWFuZCxcblx0XHRcdFx0cmVuZGVyU3RhdGUsXG5cdFx0XHRcdGNvbWJpbmVMYXlvdXRzLFxuXHRcdFx0XHRoYXNoSWQudG9TdHJpbmcoKVxuXHRcdFx0KTtcblx0XHRcdHBpcGVsaW5lID0gbmV3IFBpcGVsaW5lKFwicmVuZGVyXCIsIGRldmljZSwgZGVzY3JpcHRvcik7XG5cdFx0XHRyZW5kZXJQaXBlbGluZXMuc2V0KGhhc2hJZCwgcGlwZWxpbmUpO1xuXHRcdH1cblx0XHRyZXR1cm4gcGlwZWxpbmU7XG5cdH1cblx0c3RhdGljIGdldENvbXB1dGVQaXBlbGluZUZyb21DYWNoZShcblx0XHRkZXZpY2U6IEdQVURldmljZSxcblx0XHRkcmF3Q29tYW5kOiBEcmF3Q29tbWFuZCxcblx0XHRncm91cExheW91dHM6IEJpbmRHcm91cExheW91dFtdXG5cdCk6IFBpcGVsaW5lIHtcblx0XHRjb25zdCB7IHNoYWRlclNvdXJjZSB9ID0gZHJhd0NvbWFuZDtcblx0XHRjb25zdCBoYXNoSWQgPSBzdHJpbmdUb0hhc2goc2hhZGVyU291cmNlLnVpZCk7XG5cdFx0bGV0IHBpcGVsaW5lID0gY29tcHV0ZVBpcGVsaW5lcy5nZXQoaGFzaElkKTtcblx0XHRpZiAoIXBpcGVsaW5lKSB7XG5cdFx0XHRjb25zdCB7IHNoYWRlclNvdXJjZSB9ID0gZHJhd0NvbWFuZDtcblx0XHRcdHBpcGVsaW5lID0gZGV2aWNlLmNyZWF0ZUNvbXB1dGVQaXBlbGluZSh7XG5cdFx0XHRcdGxheW91dDogUGlwZWxpbmVMYXlvdXQuZ2V0UGlwZWxpbmVMYXlvdXRGcm9tQ2FjaGUoZGV2aWNlLCBoYXNoSWQudG9TdHJpbmcoKSwgZ3JvdXBMYXlvdXRzKVxuXHRcdFx0XHRcdC5ncHVQaXBlbGluZUxheW91dCxcblx0XHRcdFx0Y29tcHV0ZToge1xuXHRcdFx0XHRcdG1vZHVsZTogc2hhZGVyU291cmNlLmNyZWF0ZVNoYWRlck1vZHVsZShkZXZpY2UpIGFzIEdQVVNoYWRlck1vZHVsZSxcblx0XHRcdFx0XHRlbnRyeVBvaW50OiBzaGFkZXJTb3VyY2UuY29tcHV0ZU1haW5cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRjb21wdXRlUGlwZWxpbmVzLnNldChoYXNoSWQsIHBpcGVsaW5lKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBpcGVsaW5lO1xuXHR9XG5cdHByaXZhdGUgc3RhdGljIGdldFBpcGVsaW5lRGVzY3JpcHRvcihcblx0XHRkZXZpY2U6IEdQVURldmljZSxcblx0XHRkcmF3Q29tYW5kOiBEcmF3Q29tbWFuZCxcblx0XHRyZW5kZXJTdGF0ZTogUmVuZGVyU3RhdGUsXG5cdFx0Z3JvdXBMYXlvdXRzOiBCaW5kR3JvdXBMYXlvdXRbXSxcblx0XHRoYXNoSWQ6IHN0cmluZ1xuXHQpOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3Ige1xuXHRcdGNvbnN0IHsgdmVydGV4QnVmZmVyLCBzaGFkZXJTb3VyY2UgfSA9IGRyYXdDb21hbmQ7XG5cdFx0Y29uc3QgeyB2ZXJ0LCBmcmFnIH0gPSBzaGFkZXJTb3VyY2UuY3JlYXRlU2hhZGVyTW9kdWxlKGRldmljZSkgYXMge1xuXHRcdFx0dmVydDogR1BVU2hhZGVyTW9kdWxlO1xuXHRcdFx0ZnJhZzogR1BVU2hhZGVyTW9kdWxlO1xuXHRcdH07XG5cdFx0Y29uc3QgcGlwZWxpbmVEZWMgPSB7XG5cdFx0XHRsYXlvdXQ6IFBpcGVsaW5lTGF5b3V0LmdldFBpcGVsaW5lTGF5b3V0RnJvbUNhY2hlKGRldmljZSwgaGFzaElkLCBncm91cExheW91dHMpLmdwdVBpcGVsaW5lTGF5b3V0XG5cdFx0fSBhcyBhbnk7XG5cdFx0aWYgKHZlcnQpXG5cdFx0XHRwaXBlbGluZURlYy52ZXJ0ZXggPSB7XG5cdFx0XHRcdG1vZHVsZTogdmVydCxcblx0XHRcdFx0ZW50cnlQb2ludDogc2hhZGVyU291cmNlLnZlcnRFbnRyeVBvaW50LFxuXHRcdFx0XHRidWZmZXJzOiB2ZXJ0ZXhCdWZmZXIuZ2V0QnVmZmVyRGVzKCkgYXMgSXRlcmFibGU8R1BVVmVydGV4QnVmZmVyTGF5b3V0PlxuXHRcdFx0fTtcblx0XHRpZiAocmVuZGVyU3RhdGUucHJpbWl0aXZlKSBwaXBlbGluZURlYy5wcmltaXRpdmUgPSByZW5kZXJTdGF0ZS5wcmltaXRpdmUuZ2V0R1BVUHJpbWl0aXZlRGVjKCk7XG5cdFx0aWYgKHJlbmRlclN0YXRlLmRlcHRoU3RlbmNpbCkgcGlwZWxpbmVEZWMuZGVwdGhTdGVuY2lsID0gcmVuZGVyU3RhdGUuZGVwdGhTdGVuY2lsLmdldEdQVURlcHRoU3RlbmNpbERlYygpO1xuXHRcdGlmIChyZW5kZXJTdGF0ZS5tdWx0aXNhbXBsZSkgcGlwZWxpbmVEZWMubXVsdGlzYW1wbGUgPSByZW5kZXJTdGF0ZS5tdWx0aXNhbXBsZS5nZXRNdWx0aVNhbXBsZURlYygpO1xuXHRcdGlmIChmcmFnKVxuXHRcdFx0cGlwZWxpbmVEZWMuZnJhZ21lbnQgPSB7XG5cdFx0XHRcdG1vZHVsZTogZnJhZyxcblx0XHRcdFx0ZW50cnlQb2ludDogc2hhZGVyU291cmNlLmZyYWdFbnRyeVBvaW50LFxuXHRcdFx0XHR0YXJnZXRzOiByZW5kZXJTdGF0ZS50YXJnZXRzLm1hcCgodGFyZ2V0KSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldC5nZXRHUFVUYXJnZXREZWMoKTtcblx0XHRcdFx0fSlcblx0XHRcdH07XG5cdFx0cmV0dXJuIHBpcGVsaW5lRGVjO1xuXHR9XG59XG4vLyBCb3Jyb3dlZCBmcm9tIGh0dHBzOi8vd2VyeGx0ZC5jb20vd3AvMjAxMC8wNS8xMy9qYXZhc2NyaXB0LWltcGxlbWVudGF0aW9uLW9mLWphdmFzLXN0cmluZy1oYXNoY29kZS1tZXRob2QvXG5mdW5jdGlvbiBzdHJpbmdUb0hhc2goc3RyKSB7XG5cdGxldCBoYXNoID0gMDtcblx0aWYgKHN0ci5sZW5ndGggPT0gMCkgcmV0dXJuIGhhc2g7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3QgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXHRcdGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBjaGFyO1xuXHRcdGhhc2ggPSBoYXNoICYgaGFzaDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdH1cblx0cmV0dXJuIGhhc2g7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZpbmVkKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cbiIsIi8qXG4gIGh0dHBzOi8vZ2l0aHViLmNvbS9iYW5rc2VhbiB3cmFwcGVkIE1ha290byBNYXRzdW1vdG8gYW5kIFRha3VqaSBOaXNoaW11cmEncyBjb2RlIGluIGEgbmFtZXNwYWNlXG4gIHNvIGl0J3MgYmV0dGVyIGVuY2Fwc3VsYXRlZC4gTm93IHlvdSBjYW4gaGF2ZSBtdWx0aXBsZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvcnNcbiAgYW5kIHRoZXkgd29uJ3Qgc3RvbXAgYWxsIG92ZXIgZWFjaG90aGVyJ3Mgc3RhdGUuXG5cbiAgSWYgeW91IHdhbnQgdG8gdXNlIHRoaXMgYXMgYSBzdWJzdGl0dXRlIGZvciBNYXRoLnJhbmRvbSgpLCB1c2UgdGhlIHJhbmRvbSgpXG4gIG1ldGhvZCBsaWtlIHNvOlxuXG4gIHZhciBtID0gbmV3IE1lcnNlbm5lVHdpc3RlcigpO1xuICB2YXIgcmFuZG9tTnVtYmVyID0gbS5yYW5kb20oKTtcblxuICBZb3UgY2FuIGFsc28gY2FsbCB0aGUgb3RoZXIgZ2VucmFuZF97Zm9vfSgpIG1ldGhvZHMgb24gdGhlIGluc3RhbmNlLlxuXG4gIElmIHlvdSB3YW50IHRvIHVzZSBhIHNwZWNpZmljIHNlZWQgaW4gb3JkZXIgdG8gZ2V0IGEgcmVwZWF0YWJsZSByYW5kb21cbiAgc2VxdWVuY2UsIHBhc3MgYW4gaW50ZWdlciBpbnRvIHRoZSBjb25zdHJ1Y3RvcjpcblxuICB2YXIgbSA9IG5ldyBNZXJzZW5uZVR3aXN0ZXIoMTIzKTtcblxuICBhbmQgdGhhdCB3aWxsIGFsd2F5cyBwcm9kdWNlIHRoZSBzYW1lIHJhbmRvbSBzZXF1ZW5jZS5cblxuICBTZWFuIE1jQ3VsbG91Z2ggKGJhbmtzZWFuQGdtYWlsLmNvbSlcbiovXG5cbi8qXG4gICBBIEMtcHJvZ3JhbSBmb3IgTVQxOTkzNywgd2l0aCBpbml0aWFsaXphdGlvbiBpbXByb3ZlZCAyMDAyLzEvMjYuXG4gICBDb2RlZCBieSBUYWt1amkgTmlzaGltdXJhIGFuZCBNYWtvdG8gTWF0c3Vtb3RvLlxuXG4gICBCZWZvcmUgdXNpbmcsIGluaXRpYWxpemUgdGhlIHN0YXRlIGJ5IHVzaW5nIGluaXRfc2VlZChzZWVkKVxuICAgb3IgaW5pdF9ieV9hcnJheShpbml0X2tleSwga2V5X2xlbmd0aCkuXG5cbiAgIENvcHlyaWdodCAoQykgMTk5NyAtIDIwMDIsIE1ha290byBNYXRzdW1vdG8gYW5kIFRha3VqaSBOaXNoaW11cmEsXG4gICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAgIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uc1xuICAgYXJlIG1ldDpcblxuICAgICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAgICAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICAgICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gICAgIDMuIFRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGVcbiAgICAgICAgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuXG4gICAgICAgIHBlcm1pc3Npb24uXG5cbiAgIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAgIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAgIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICAgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIE9XTkVSIE9SXG4gICBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCxcbiAgIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyxcbiAgIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICAgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAgIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICAgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cblxuICAgQW55IGZlZWRiYWNrIGlzIHZlcnkgd2VsY29tZS5cbiAgIGh0dHA6Ly93d3cubWF0aC5zY2kuaGlyb3NoaW1hLXUuYWMuanAvfm0tbWF0L01UL2VtdC5odG1sXG4gICBlbWFpbDogbS1tYXQgQCBtYXRoLnNjaS5oaXJvc2hpbWEtdS5hYy5qcCAocmVtb3ZlIHNwYWNlKVxuKi9cblxudmFyIE1lcnNlbm5lVHdpc3RlciA9IGZ1bmN0aW9uKHNlZWQpIHtcblx0aWYgKHNlZWQgPT0gdW5kZWZpbmVkKSB7XG5cdFx0c2VlZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHR9XG5cblx0LyogUGVyaW9kIHBhcmFtZXRlcnMgKi9cblx0dGhpcy5OID0gNjI0O1xuXHR0aGlzLk0gPSAzOTc7XG5cdHRoaXMuTUFUUklYX0EgPSAweDk5MDhiMGRmOyAgIC8qIGNvbnN0YW50IHZlY3RvciBhICovXG5cdHRoaXMuVVBQRVJfTUFTSyA9IDB4ODAwMDAwMDA7IC8qIG1vc3Qgc2lnbmlmaWNhbnQgdy1yIGJpdHMgKi9cblx0dGhpcy5MT1dFUl9NQVNLID0gMHg3ZmZmZmZmZjsgLyogbGVhc3Qgc2lnbmlmaWNhbnQgciBiaXRzICovXG5cblx0dGhpcy5tdCA9IG5ldyBBcnJheSh0aGlzLk4pOyAvKiB0aGUgYXJyYXkgZm9yIHRoZSBzdGF0ZSB2ZWN0b3IgKi9cblx0dGhpcy5tdGk9dGhpcy5OKzE7IC8qIG10aT09TisxIG1lYW5zIG10W05dIGlzIG5vdCBpbml0aWFsaXplZCAqL1xuXG5cdGlmIChzZWVkLmNvbnN0cnVjdG9yID09IEFycmF5KSB7XG5cdFx0dGhpcy5pbml0X2J5X2FycmF5KHNlZWQsIHNlZWQubGVuZ3RoKTtcblx0fVxuXHRlbHNlIHtcblx0XHR0aGlzLmluaXRfc2VlZChzZWVkKTtcblx0fVxufVxuXG4vKiBpbml0aWFsaXplcyBtdFtOXSB3aXRoIGEgc2VlZCAqL1xuLyogb3JpZ2luIG5hbWUgaW5pdF9nZW5yYW5kICovXG5NZXJzZW5uZVR3aXN0ZXIucHJvdG90eXBlLmluaXRfc2VlZCA9IGZ1bmN0aW9uKHMpIHtcblx0dGhpcy5tdFswXSA9IHMgPj4+IDA7XG5cdGZvciAodGhpcy5tdGk9MTsgdGhpcy5tdGk8dGhpcy5OOyB0aGlzLm10aSsrKSB7XG5cdFx0dmFyIHMgPSB0aGlzLm10W3RoaXMubXRpLTFdIF4gKHRoaXMubXRbdGhpcy5tdGktMV0gPj4+IDMwKTtcblx0XHR0aGlzLm10W3RoaXMubXRpXSA9ICgoKCgocyAmIDB4ZmZmZjAwMDApID4+PiAxNikgKiAxODEyNDMzMjUzKSA8PCAxNikgKyAocyAmIDB4MDAwMGZmZmYpICogMTgxMjQzMzI1Mylcblx0XHQrIHRoaXMubXRpO1xuXHRcdC8qIFNlZSBLbnV0aCBUQU9DUCBWb2wyLiAzcmQgRWQuIFAuMTA2IGZvciBtdWx0aXBsaWVyLiAqL1xuXHRcdC8qIEluIHRoZSBwcmV2aW91cyB2ZXJzaW9ucywgTVNCcyBvZiB0aGUgc2VlZCBhZmZlY3QgICAqL1xuXHRcdC8qIG9ubHkgTVNCcyBvZiB0aGUgYXJyYXkgbXRbXS4gICAgICAgICAgICAgICAgICAgICAgICAqL1xuXHRcdC8qIDIwMDIvMDEvMDkgbW9kaWZpZWQgYnkgTWFrb3RvIE1hdHN1bW90byAgICAgICAgICAgICAqL1xuXHRcdHRoaXMubXRbdGhpcy5tdGldID4+Pj0gMDtcblx0XHQvKiBmb3IgPjMyIGJpdCBtYWNoaW5lcyAqL1xuXHR9XG59XG5cbi8qIGluaXRpYWxpemUgYnkgYW4gYXJyYXkgd2l0aCBhcnJheS1sZW5ndGggKi9cbi8qIGluaXRfa2V5IGlzIHRoZSBhcnJheSBmb3IgaW5pdGlhbGl6aW5nIGtleXMgKi9cbi8qIGtleV9sZW5ndGggaXMgaXRzIGxlbmd0aCAqL1xuLyogc2xpZ2h0IGNoYW5nZSBmb3IgQysrLCAyMDA0LzIvMjYgKi9cbk1lcnNlbm5lVHdpc3Rlci5wcm90b3R5cGUuaW5pdF9ieV9hcnJheSA9IGZ1bmN0aW9uKGluaXRfa2V5LCBrZXlfbGVuZ3RoKSB7XG5cdHZhciBpLCBqLCBrO1xuXHR0aGlzLmluaXRfc2VlZCgxOTY1MDIxOCk7XG5cdGk9MTsgaj0wO1xuXHRrID0gKHRoaXMuTj5rZXlfbGVuZ3RoID8gdGhpcy5OIDoga2V5X2xlbmd0aCk7XG5cdGZvciAoOyBrOyBrLS0pIHtcblx0XHR2YXIgcyA9IHRoaXMubXRbaS0xXSBeICh0aGlzLm10W2ktMV0gPj4+IDMwKVxuXHRcdHRoaXMubXRbaV0gPSAodGhpcy5tdFtpXSBeICgoKCgocyAmIDB4ZmZmZjAwMDApID4+PiAxNikgKiAxNjY0NTI1KSA8PCAxNikgKyAoKHMgJiAweDAwMDBmZmZmKSAqIDE2NjQ1MjUpKSlcblx0XHQrIGluaXRfa2V5W2pdICsgajsgLyogbm9uIGxpbmVhciAqL1xuXHRcdHRoaXMubXRbaV0gPj4+PSAwOyAvKiBmb3IgV09SRFNJWkUgPiAzMiBtYWNoaW5lcyAqL1xuXHRcdGkrKzsgaisrO1xuXHRcdGlmIChpPj10aGlzLk4pIHsgdGhpcy5tdFswXSA9IHRoaXMubXRbdGhpcy5OLTFdOyBpPTE7IH1cblx0XHRpZiAoaj49a2V5X2xlbmd0aCkgaj0wO1xuXHR9XG5cdGZvciAoaz10aGlzLk4tMTsgazsgay0tKSB7XG5cdFx0dmFyIHMgPSB0aGlzLm10W2ktMV0gXiAodGhpcy5tdFtpLTFdID4+PiAzMCk7XG5cdFx0dGhpcy5tdFtpXSA9ICh0aGlzLm10W2ldIF4gKCgoKChzICYgMHhmZmZmMDAwMCkgPj4+IDE2KSAqIDE1NjYwODM5NDEpIDw8IDE2KSArIChzICYgMHgwMDAwZmZmZikgKiAxNTY2MDgzOTQxKSlcblx0XHQtIGk7IC8qIG5vbiBsaW5lYXIgKi9cblx0XHR0aGlzLm10W2ldID4+Pj0gMDsgLyogZm9yIFdPUkRTSVpFID4gMzIgbWFjaGluZXMgKi9cblx0XHRpKys7XG5cdFx0aWYgKGk+PXRoaXMuTikgeyB0aGlzLm10WzBdID0gdGhpcy5tdFt0aGlzLk4tMV07IGk9MTsgfVxuXHR9XG5cblx0dGhpcy5tdFswXSA9IDB4ODAwMDAwMDA7IC8qIE1TQiBpcyAxOyBhc3N1cmluZyBub24temVybyBpbml0aWFsIGFycmF5ICovXG59XG5cbi8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gWzAsMHhmZmZmZmZmZl0taW50ZXJ2YWwgKi9cbi8qIG9yaWdpbiBuYW1lIGdlbnJhbmRfaW50MzIgKi9cbk1lcnNlbm5lVHdpc3Rlci5wcm90b3R5cGUucmFuZG9tX2ludCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgeTtcblx0dmFyIG1hZzAxID0gbmV3IEFycmF5KDB4MCwgdGhpcy5NQVRSSVhfQSk7XG5cdC8qIG1hZzAxW3hdID0geCAqIE1BVFJJWF9BICBmb3IgeD0wLDEgKi9cblxuXHRpZiAodGhpcy5tdGkgPj0gdGhpcy5OKSB7IC8qIGdlbmVyYXRlIE4gd29yZHMgYXQgb25lIHRpbWUgKi9cblx0XHR2YXIga2s7XG5cblx0XHRpZiAodGhpcy5tdGkgPT0gdGhpcy5OKzEpICAvKiBpZiBpbml0X3NlZWQoKSBoYXMgbm90IGJlZW4gY2FsbGVkLCAqL1xuXHRcdFx0dGhpcy5pbml0X3NlZWQoNTQ4OSk7ICAvKiBhIGRlZmF1bHQgaW5pdGlhbCBzZWVkIGlzIHVzZWQgKi9cblxuXHRcdGZvciAoa2s9MDtrazx0aGlzLk4tdGhpcy5NO2trKyspIHtcblx0XHRcdHkgPSAodGhpcy5tdFtra10mdGhpcy5VUFBFUl9NQVNLKXwodGhpcy5tdFtraysxXSZ0aGlzLkxPV0VSX01BU0spO1xuXHRcdFx0dGhpcy5tdFtra10gPSB0aGlzLm10W2trK3RoaXMuTV0gXiAoeSA+Pj4gMSkgXiBtYWcwMVt5ICYgMHgxXTtcblx0XHR9XG5cdFx0Zm9yICg7a2s8dGhpcy5OLTE7a2srKykge1xuXHRcdFx0eSA9ICh0aGlzLm10W2trXSZ0aGlzLlVQUEVSX01BU0spfCh0aGlzLm10W2trKzFdJnRoaXMuTE9XRVJfTUFTSyk7XG5cdFx0XHR0aGlzLm10W2trXSA9IHRoaXMubXRba2srKHRoaXMuTS10aGlzLk4pXSBeICh5ID4+PiAxKSBeIG1hZzAxW3kgJiAweDFdO1xuXHRcdH1cblx0XHR5ID0gKHRoaXMubXRbdGhpcy5OLTFdJnRoaXMuVVBQRVJfTUFTSyl8KHRoaXMubXRbMF0mdGhpcy5MT1dFUl9NQVNLKTtcblx0XHR0aGlzLm10W3RoaXMuTi0xXSA9IHRoaXMubXRbdGhpcy5NLTFdIF4gKHkgPj4+IDEpIF4gbWFnMDFbeSAmIDB4MV07XG5cblx0XHR0aGlzLm10aSA9IDA7XG5cdH1cblxuXHR5ID0gdGhpcy5tdFt0aGlzLm10aSsrXTtcblxuXHQvKiBUZW1wZXJpbmcgKi9cblx0eSBePSAoeSA+Pj4gMTEpO1xuXHR5IF49ICh5IDw8IDcpICYgMHg5ZDJjNTY4MDtcblx0eSBePSAoeSA8PCAxNSkgJiAweGVmYzYwMDAwO1xuXHR5IF49ICh5ID4+PiAxOCk7XG5cblx0cmV0dXJuIHkgPj4+IDA7XG59XG5cbi8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gWzAsMHg3ZmZmZmZmZl0taW50ZXJ2YWwgKi9cbi8qIG9yaWdpbiBuYW1lIGdlbnJhbmRfaW50MzEgKi9cbk1lcnNlbm5lVHdpc3Rlci5wcm90b3R5cGUucmFuZG9tX2ludDMxID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiAodGhpcy5yYW5kb21faW50KCk+Pj4xKTtcbn1cblxuLyogZ2VuZXJhdGVzIGEgcmFuZG9tIG51bWJlciBvbiBbMCwxXS1yZWFsLWludGVydmFsICovXG4vKiBvcmlnaW4gbmFtZSBnZW5yYW5kX3JlYWwxICovXG5NZXJzZW5uZVR3aXN0ZXIucHJvdG90eXBlLnJhbmRvbV9pbmNsID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLnJhbmRvbV9pbnQoKSooMS4wLzQyOTQ5NjcyOTUuMCk7XG5cdC8qIGRpdmlkZWQgYnkgMl4zMi0xICovXG59XG5cbi8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gWzAsMSktcmVhbC1pbnRlcnZhbCAqL1xuTWVyc2VubmVUd2lzdGVyLnByb3RvdHlwZS5yYW5kb20gPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMucmFuZG9tX2ludCgpKigxLjAvNDI5NDk2NzI5Ni4wKTtcblx0LyogZGl2aWRlZCBieSAyXjMyICovXG59XG5cbi8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gKDAsMSktcmVhbC1pbnRlcnZhbCAqL1xuLyogb3JpZ2luIG5hbWUgZ2VucmFuZF9yZWFsMyAqL1xuTWVyc2VubmVUd2lzdGVyLnByb3RvdHlwZS5yYW5kb21fZXhjbCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gKHRoaXMucmFuZG9tX2ludCgpICsgMC41KSooMS4wLzQyOTQ5NjcyOTYuMCk7XG5cdC8qIGRpdmlkZWQgYnkgMl4zMiAqL1xufVxuXG4vKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uIFswLDEpIHdpdGggNTMtYml0IHJlc29sdXRpb24qL1xuLyogb3JpZ2luIG5hbWUgZ2VucmFuZF9yZXM1MyAqL1xuTWVyc2VubmVUd2lzdGVyLnByb3RvdHlwZS5yYW5kb21fbG9uZyA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgYT10aGlzLnJhbmRvbV9pbnQoKT4+PjUsIGI9dGhpcy5yYW5kb21faW50KCk+Pj42O1xuXHRyZXR1cm4oYSo2NzEwODg2NC4wK2IpKigxLjAvOTAwNzE5OTI1NDc0MDk5Mi4wKTtcbn1cblxuLyogVGhlc2UgcmVhbCB2ZXJzaW9ucyBhcmUgZHVlIHRvIElzYWt1IFdhZGEsIDIwMDIvMDEvMDkgYWRkZWQgKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNZXJzZW5uZVR3aXN0ZXI7XG4iLCJmdW5jdGlvbiBkZWZhdWx0VmFsdWUoYSwgYikge1xuXHRpZiAoYSAhPT0gdW5kZWZpbmVkICYmIGEgIT09IG51bGwpIHtcblx0XHRyZXR1cm4gYTtcblx0fVxuXHRyZXR1cm4gYjtcbn1cblxuLyoqXG4gKiBBIGZyb3plbiBlbXB0eSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3Igb3B0aW9ucyBwYXNzZWQgYXNcbiAqIGFuIG9iamVjdCBsaXRlcmFsLlxuICogQHR5cGUge09iamVjdH1cbiAqIEBtZW1iZXJvZiBkZWZhdWx0VmFsdWVcbiAqL1xuZGVmYXVsdFZhbHVlLkVNUFRZX09CSkVDVCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VmFsdWU7XG4iLCJpbXBvcnQgTWVyc2VubmVUd2lzdGVyIGZyb20gXCJtZXJzZW5uZS10d2lzdGVyXCI7XHJcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xyXG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xyXG5cclxuY2xhc3MgR01hdGgge1xyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjEgPSAwLjE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjIgPSAwLjAxO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIEVQU0lMT04zID0gMC4wMDE7XHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9ONCA9IDAuMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9ONSA9IDAuMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjYgPSAwLjAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9ONyA9IDAuMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OOCA9IDAuMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjkgPSAwLjAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTAgPSAwLjAwMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjExID0gMC4wMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTIgPSAwLjAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTMgPSAwLjAwMDAwMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjE0ID0gMC4wMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTUgPSAwLjAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTYgPSAwLjAwMDAwMDAwMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjE3ID0gMC4wMDAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTggPSAwLjAwMDAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTkgPSAwLjAwMDAwMDAwMDAwMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjIwID0gMC4wMDAwMDAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMjEgPSAwLjAwMDAwMDAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBHUkFWSVRBVElPTkFMUEFSQU1FVEVSID0gMy45ODYwMDQ0MThlMTQ7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgU0lYVFlfRk9VUl9LSUxPQllURVMgPSA2NCAqIDEwMjQ7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRk9VUl9HSUdBQllURVMgPSA0ICogMTAyNCAqIDEwMjQgKiAxMDI0O1xyXG5cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1zaWduXHJcbiAgc3RhdGljIHNpZ24gPSBkZWZhdWx0VmFsdWUoTWF0aC5zaWduLCBmdW5jdGlvbiBzaWduKHZhbHVlKSB7XHJcbiAgICB2YWx1ZSA9ICt2YWx1ZTsgLy8gY29lcmNlIHRvIG51bWJlclxyXG4gICAgaWYgKHZhbHVlID09PSAwIHx8IHZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICAvLyB6ZXJvIG9yIE5hTlxyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUgPiAwID8gMSA6IC0xO1xyXG4gIH0pO1xyXG5cclxuICBzdGF0aWMgc2lnbk5vdFplcm8odmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA8IDAuMCA/IC0xLjAgOiAxLjA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9TTm9ybSh2YWx1ZTogbnVtYmVyLCByYW5nZU1heGltdW06IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByYW5nZU1heGltdW0gPSBkZWZhdWx0VmFsdWUocmFuZ2VNYXhpbXVtLCAyNTUpO1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoXHJcbiAgICAgIChHTWF0aC5jbGFtcCh2YWx1ZSwgLTEuMCwgMS4wKSAqIDAuNSArIDAuNSkgKiByYW5nZU1heGltdW1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbVNOb3JtKHZhbHVlOiBudW1iZXIsIHJhbmdlTWF4aW11bTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJhbmdlTWF4aW11bSA9IGRlZmF1bHRWYWx1ZShyYW5nZU1heGltdW0sIDI1NSk7XHJcbiAgICByZXR1cm4gKEdNYXRoLmNsYW1wKHZhbHVlLCAwLjAsIHJhbmdlTWF4aW11bSkgLyByYW5nZU1heGltdW0pICogMi4wIC0gMS4wO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG5vcm1hbGl6ZShcclxuICAgIHZhbHVlOiBudW1iZXIsXHJcbiAgICByYW5nZU1pbmltdW06IG51bWJlcixcclxuICAgIHJhbmdlTWF4aW11bTogbnVtYmVyXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIHJhbmdlTWF4aW11bSA9IE1hdGgubWF4KHJhbmdlTWF4aW11bSAtIHJhbmdlTWluaW11bSwgMC4wKTtcclxuICAgIHJldHVybiByYW5nZU1heGltdW0gPT09IDAuMFxyXG4gICAgICA/IDAuMFxyXG4gICAgICA6IEdNYXRoLmNsYW1wKCh2YWx1ZSAtIHJhbmdlTWluaW11bSkgLyByYW5nZU1heGltdW0sIDAuMCwgMS4wKTtcclxuICB9XHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLXNpbmhcclxuICBzdGF0aWMgc2luaCA9IGRlZmF1bHRWYWx1ZShNYXRoLnNpbmgsIGZ1bmN0aW9uIHNpbmgodmFsdWUpIHtcclxuICAgIHJldHVybiAoTWF0aC5leHAodmFsdWUpIC0gTWF0aC5leHAoLXZhbHVlKSkgLyAyLjA7XHJcbiAgfSk7XHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWNvc2hcclxuICBzdGF0aWMgY29zaCA9IGRlZmF1bHRWYWx1ZShNYXRoLmNvc2gsIGZ1bmN0aW9uIGNvc2godmFsdWUpIHtcclxuICAgIHJldHVybiAoTWF0aC5leHAodmFsdWUpICsgTWF0aC5leHAoLXZhbHVlKSkgLyAyLjA7XHJcbiAgfSk7XHJcblxyXG4gIHN0YXRpYyBsZXJwKHA6IG51bWJlciwgcTogbnVtYmVyLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICgxLjAgLSB0aW1lKSAqIHAgKyB0aW1lICogcTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBQSSA9IE1hdGguUEk7XHJcblxyXG4gIHN0YXRpYyBPTkVfT1ZFUl9QSSA9IDEuMCAvIE1hdGguUEk7XHJcblxyXG4gIHN0YXRpYyBQSV9PVkVSX1RXTyA9IE1hdGguUEkgLyAyLjA7XHJcblxyXG4gIHN0YXRpYyBQSV9PVkVSX1RIUkVFID0gTWF0aC5QSSAvIDMuMDtcclxuXHJcbiAgc3RhdGljIFBJX09WRVJfRk9VUiA9IE1hdGguUEkgLyA0LjA7XHJcblxyXG4gIHN0YXRpYyBQSV9PVkVSX1NJWCA9IE1hdGguUEkgLyA2LjA7XHJcblxyXG4gIHN0YXRpYyBUSFJFRV9QSV9PVkVSX1RXTyA9ICgzLjAgKiBNYXRoLlBJKSAvIDIuMDtcclxuXHJcbiAgc3RhdGljIFRXT19QSSA9IDIuMCAqIE1hdGguUEk7XHJcblxyXG4gIHN0YXRpYyBPTkVfT1ZFUl9UV09fUEkgPSAxLjAgLyAoMi4wICogTWF0aC5QSSk7XHJcblxyXG4gIHN0YXRpYyBSQURJQU5TX1BFUl9ERUdSRUUgPSBNYXRoLlBJIC8gMTgwLjA7XHJcblxyXG4gIHN0YXRpYyBERUdSRUVTX1BFUl9SQURJQU4gPSAxODAuMCAvIE1hdGguUEk7XHJcblxyXG4gIHN0YXRpYyBSQURJQU5TX1BFUl9BUkNTRUNPTkQgPSBHTWF0aC5SQURJQU5TX1BFUl9ERUdSRUUgLyAzNjAwLjA7XHJcblxyXG4gIHN0YXRpYyB0b1JhZGlhbnMoZGVncmVlczogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICghZGVmaW5lZChkZWdyZWVzKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkZWdyZWVzIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkZWdyZWVzICogR01hdGguUkFESUFOU19QRVJfREVHUkVFO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRvRGVncmVlcyhyYWRpYW5zOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJhZGlhbnMpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJhZGlhbnMgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhZGlhbnMgKiBHTWF0aC5ERUdSRUVTX1BFUl9SQURJQU47XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbmVnYXRpdmVQaVRvUGkoYW5nbGU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAoIWRlZmluZWQoYW5nbGUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImFuZ2xlIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmIChhbmdsZSA+PSAtR01hdGguUEkgJiYgYW5nbGUgPD0gR01hdGguUEkpIHtcclxuICAgICAgLy8gRWFybHkgZXhpdCBpZiB0aGUgaW5wdXQgaXMgYWxyZWFkeSBpbnNpZGUgdGhlIHJhbmdlLiBUaGlzIGF2b2lkc1xyXG4gICAgICAvLyB1bm5lY2Vzc2FyeSBtYXRoIHdoaWNoIGNvdWxkIGludHJvZHVjZSBmbG9hdGluZyBwb2ludCBlcnJvci5cclxuICAgICAgcmV0dXJuIGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEdNYXRoLnplcm9Ub1R3b1BpKGFuZ2xlICsgR01hdGguUEkpIC0gR01hdGguUEk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgemVyb1RvVHdvUGkoYW5nbGU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAoIWRlZmluZWQoYW5nbGUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImFuZ2xlIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmIChhbmdsZSA+PSAwICYmIGFuZ2xlIDw9IEdNYXRoLlRXT19QSSkge1xyXG4gICAgICAvLyBFYXJseSBleGl0IGlmIHRoZSBpbnB1dCBpcyBhbHJlYWR5IGluc2lkZSB0aGUgcmFuZ2UuIFRoaXMgYXZvaWRzXHJcbiAgICAgIC8vIHVubmVjZXNzYXJ5IG1hdGggd2hpY2ggY291bGQgaW50cm9kdWNlIGZsb2F0aW5nIHBvaW50IGVycm9yLlxyXG4gICAgICByZXR1cm4gYW5nbGU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtb2QgPSBHTWF0aC5tb2QoYW5nbGUsIEdNYXRoLlRXT19QSSk7XHJcbiAgICBpZiAoTWF0aC5hYnMobW9kKSA8IEdNYXRoLkVQU0lMT04xNCAmJiBNYXRoLmFicyhhbmdsZSkgPiBHTWF0aC5FUFNJTE9OMTQpIHtcclxuICAgICAgcmV0dXJuIEdNYXRoLlRXT19QSTtcclxuICAgIH1cclxuICAgIHJldHVybiBtb2Q7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbW9kKG06IG51bWJlciwgbjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICghZGVmaW5lZChtKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmICghZGVmaW5lZChuKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJuIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmIChuID09PSAwLjApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGl2aXNvciBjYW5ub3QgYmUgMC5cIik7XHJcbiAgICB9XHJcbiAgICBpZiAoR01hdGguc2lnbihtKSA9PT0gR01hdGguc2lnbihuKSAmJiBNYXRoLmFicyhtKSA8IE1hdGguYWJzKG4pKSB7XHJcbiAgICAgIC8vIEVhcmx5IGV4aXQgaWYgdGhlIGlucHV0IGRvZXMgbm90IG5lZWQgdG8gYmUgbW9kZGVkLiBUaGlzIGF2b2lkc1xyXG4gICAgICAvLyB1bm5lY2Vzc2FyeSBtYXRoIHdoaWNoIGNvdWxkIGludHJvZHVjZSBmbG9hdGluZyBwb2ludCBlcnJvci5cclxuICAgICAgcmV0dXJuIG07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICgobSAlIG4pICsgbikgJSBuO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFsc0Vwc2lsb24oXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgcmVsYXRpdmVFcHNpbG9uOiBudW1iZXIsXHJcbiAgICBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IHJlbGF0aXZlRXBzaWxvblxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCFkZWZpbmVkKGxlZnQpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImxlZnQgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJpZ2h0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyaWdodCBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVsYXRpdmVFcHNpbG9uID0gZGVmYXVsdFZhbHVlKHJlbGF0aXZlRXBzaWxvbiwgMC4wKTtcclxuICAgIGFic29sdXRlRXBzaWxvbiA9IGRlZmF1bHRWYWx1ZShhYnNvbHV0ZUVwc2lsb24sIHJlbGF0aXZlRXBzaWxvbik7XHJcbiAgICBjb25zdCBhYnNEaWZmID0gTWF0aC5hYnMobGVmdCAtIHJpZ2h0KTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGFic0RpZmYgPD0gYWJzb2x1dGVFcHNpbG9uIHx8XHJcbiAgICAgIGFic0RpZmYgPD0gcmVsYXRpdmVFcHNpbG9uICogTWF0aC5tYXgoTWF0aC5hYnMobGVmdCksIE1hdGguYWJzKHJpZ2h0KSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbGVzc1RoYW4oXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgYWJzb2x1dGVFcHNpbG9uOiBudW1iZXIgPSAwXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIWRlZmluZWQobGVmdCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmlyc3QgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJpZ2h0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZWNvbmQgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKGFic29sdXRlRXBzaWxvbikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0IC0gcmlnaHQgPCAtYWJzb2x1dGVFcHNpbG9uO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxlc3NUaGFuT3JFcXVhbHMoXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgYWJzb2x1dGVFcHNpbG9uOiBudW1iZXIgPSAwXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIWRlZmluZWQobGVmdCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmlyc3QgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJpZ2h0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZWNvbmQgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKGFic29sdXRlRXBzaWxvbikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0IC0gcmlnaHQgPCBhYnNvbHV0ZUVwc2lsb247XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ3JlYXRlclRoYW4oXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgYWJzb2x1dGVFcHNpbG9uOiBudW1iZXIgPSAwXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIWRlZmluZWQobGVmdCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmlyc3QgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJpZ2h0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZWNvbmQgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKGFic29sdXRlRXBzaWxvbikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0IC0gcmlnaHQgPiBhYnNvbHV0ZUVwc2lsb247XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ3JlYXRlclRoYW5PckVxdWFscyhcclxuICAgIGxlZnQ6IG51bWJlcixcclxuICAgIHJpZ2h0OiBudW1iZXIsXHJcbiAgICBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IDBcclxuICApOiBib29sZWFuIHtcclxuICAgIGlmICghZGVmaW5lZChsZWZ0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXJzdCBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlZmluZWQocmlnaHQpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNlY29uZCBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlZmluZWQoYWJzb2x1dGVFcHNpbG9uKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhYnNvbHV0ZUVwc2lsb24gaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlZnQgLSByaWdodCA+IC1hYnNvbHV0ZUVwc2lsb247XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNQb3dlck9mVHdvKG46IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcclxuICAgIGlmICh0eXBlb2YgbiAhPT0gXCJudW1iZXJcIiB8fCBuIDwgMCB8fCBuID4gNDI5NDk2NzI5NSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIG51bWJlciBiZXR3ZWVuIDAgYW5kICgyXjMyKS0xIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xyXG5cclxuICAgIHJldHVybiBuICE9PSAwICYmIChuICYgKG4gLSAxKSkgPT09IDA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbmV4dFBvd2VyT2ZUd28objogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICh0eXBlb2YgbiAhPT0gXCJudW1iZXJcIiB8fCBuIDwgMCB8fCBuID4gMjE0NzQ4MzY0OCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIG51bWJlciBiZXR3ZWVuIDAgYW5kIDJeMzEgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgLy8gRnJvbSBodHRwOi8vZ3JhcGhpY3Muc3RhbmZvcmQuZWR1L35zZWFuZGVyL2JpdGhhY2tzLmh0bWwjUm91bmRVcFBvd2VyT2YyXHJcbiAgICAtLW47XHJcbiAgICBuIHw9IG4gPj4gMTtcclxuICAgIG4gfD0gbiA+PiAyO1xyXG4gICAgbiB8PSBuID4+IDQ7XHJcbiAgICBuIHw9IG4gPj4gODtcclxuICAgIG4gfD0gbiA+PiAxNjtcclxuICAgICsrbjtcclxuXHJcbiAgICByZXR1cm4gbjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmV2aW91c1Bvd2VyT2ZUd28objogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICh0eXBlb2YgbiAhPT0gXCJudW1iZXJcIiB8fCBuIDwgMCB8fCBuID4gNDI5NDk2NzI5NSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIG51bWJlciBiZXR3ZWVuIDAgYW5kICgyXjMyKS0xIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBuIHw9IG4gPj4gMTtcclxuICAgIG4gfD0gbiA+PiAyO1xyXG4gICAgbiB8PSBuID4+IDQ7XHJcbiAgICBuIHw9IG4gPj4gODtcclxuICAgIG4gfD0gbiA+PiAxNjtcclxuICAgIG4gfD0gbiA+PiAzMjtcclxuXHJcbiAgICAvLyBUaGUgcHJldmlvdXMgYml0d2lzZSBvcGVyYXRpb25zIGltcGxpY2l0bHkgY29udmVydCB0byBzaWduZWQgMzItYml0LiBVc2UgYD4+PmAgdG8gY29udmVydCB0byB1bnNpZ25lZFxyXG4gICAgbiA9IChuID4+PiAwKSAtIChuID4+PiAxKTtcclxuXHJcbiAgICByZXR1cm4gbjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjbGFtcCh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHZhbHVlIDwgbWluID8gbWluIDogdmFsdWUgPiBtYXggPyBtYXggOiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBuZXh0UmFuZG9tTnVtYmVyID0gZnVuY3Rpb24gKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gcmFuZG9tTnVtYmVyR2VuZXJhdG9yLnJhbmRvbSgpO1xyXG4gIH07XHJcblxyXG4gIHN0YXRpYyByYW5kb21CZXR3ZWVuID0gZnVuY3Rpb24gKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gR01hdGgubmV4dFJhbmRvbU51bWJlcigpICogKG1heCAtIG1pbikgKyBtaW47XHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGFjb3NDbGFtcGVkID0gZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCFkZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZSBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE1hdGguYWNvcyhHTWF0aC5jbGFtcCh2YWx1ZSwgLTEuMCwgMS4wKSk7XHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGFzaW5DbGFtcGVkID0gZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCFkZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZSBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE1hdGguYXNpbihHTWF0aC5jbGFtcCh2YWx1ZSwgLTEuMCwgMS4wKSk7XHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGNob3JkTGVuZ3RoID0gZnVuY3Rpb24gKGFuZ2xlOiBudW1iZXIsIHJhZGl1czogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICghZGVmaW5lZChhbmdsZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYW5nbGUgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJhZGl1cykpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmFkaXVzIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gMi4wICogcmFkaXVzICogTWF0aC5zaW4oYW5nbGUgKiAwLjUpO1xyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBsb2dCYXNlID0gZnVuY3Rpb24gKG51bWJlcjogbnVtYmVyLCBiYXNlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCFkZWZpbmVkKG51bWJlcikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibnVtYmVyIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmICghZGVmaW5lZChiYXNlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYXNlIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gTWF0aC5sb2cobnVtYmVyKSAvIE1hdGgubG9nKGJhc2UpO1xyXG4gIH07XHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWNicnRcclxuICBzdGF0aWMgY2JydCA9IGRlZmF1bHRWYWx1ZShNYXRoLmNicnQsIGZ1bmN0aW9uIGNicnQobnVtYmVyKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBNYXRoLnBvdyhNYXRoLmFicyhudW1iZXIpLCAxLjAgLyAzLjApO1xyXG4gICAgcmV0dXJuIG51bWJlciA8IDAuMCA/IC1yZXN1bHQgOiByZXN1bHQ7XHJcbiAgfSk7XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtbG9nMlxyXG4gIHN0YXRpYyBsb2cyID0gZGVmYXVsdFZhbHVlKE1hdGgubG9nMiwgZnVuY3Rpb24gbG9nMihudW1iZXIpIHtcclxuICAgIHJldHVybiBNYXRoLmxvZyhudW1iZXIpICogTWF0aC5MT0cyRTtcclxuICB9KTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBzdGF0aWMgZm9nKGRpc3RhbmNlVG9DYW1lcmE6IG51bWJlciwgZGVuc2l0eTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHNjYWxhciA9IGRpc3RhbmNlVG9DYW1lcmEgKiBkZW5zaXR5O1xyXG4gICAgcmV0dXJuIDEuMCAtIE1hdGguZXhwKC0oc2NhbGFyICogc2NhbGFyKSk7XHJcbiAgfVxyXG59XHJcbmxldCByYW5kb21OdW1iZXJHZW5lcmF0b3IgPSBuZXcgTWVyc2VubmVUd2lzdGVyKCk7XHJcbmNvbnN0IGZhY3RvcmlhbHMgPSBbMV07XHJcbmV4cG9ydCBkZWZhdWx0IEdNYXRoO1xyXG4iLCJpbXBvcnQgeyBBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vcmVuZGVyL0F0dHJpYnV0ZVwiO1xyXG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcclxuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcclxuaW1wb3J0IENvbG9yIGZyb20gXCIuL0NvbG9yXCI7XHJcbmltcG9ydCBHTWF0aCBmcm9tIFwiLi9NYXRoXCI7XHJcblxyXG5jbGFzcyBWZWN0b3I0IHtcclxuICBwdWJsaWMgc3RhdGljIFpFUk8gPSBPYmplY3QuZnJlZXplKG5ldyBWZWN0b3I0KDAuMCwgMC4wLCAwLjAsIDAuMCkpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIE9ORSA9IE9iamVjdC5mcmVlemUobmV3IFZlY3RvcjQoMS4wLCAxLjAsIDEuMCwgMS4wKSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgVU5JVF9YID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yNCgxLjAsIDAuMCwgMC4wLCAwLjApKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBVTklUX1kgPSBPYmplY3QuZnJlZXplKG5ldyBWZWN0b3I0KDAuMCwgMS4wLCAwLjAsIDAuMCkpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIFVOSVRfWiA9IE9iamVjdC5mcmVlemUobmV3IFZlY3RvcjQoMC4wLCAwLjAsIDEuMCwgMC4wKSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgVU5JVF9XID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yNCgwLjAsIDAuMCwgMC4wLCAxLjApKTtcclxuICB4OiBudW1iZXI7XHJcbiAgeTogbnVtYmVyO1xyXG4gIHo6IG51bWJlcjtcclxuICB3OiBudW1iZXI7XHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCwgejogbnVtYmVyID0gMCwgdzogbnVtYmVyID0gMCkge1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLnogPSB6O1xyXG4gICAgdGhpcy53ID0gdztcclxuICB9XHJcbiAgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHc6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLnogPSB6O1xyXG4gICAgdGhpcy53ID0gdztcclxuICB9XHJcbiAgdG9BcnJheSgpOiBudW1iZXJbXSB7XHJcbiAgICByZXR1cm4gW3RoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMud107XHJcbiAgfVxyXG5cclxuICBjbG9uZShyZXN1bHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcclxuICAgIHJldHVybiBWZWN0b3I0LmNsb25lKHRoaXMsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBlcXVhbHMocmlnaHQ6IFZlY3RvcjQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBWZWN0b3I0LmVxdWFscyh0aGlzLCByaWdodCk7XHJcbiAgfVxyXG5cclxuICBlcXVhbHNFcHNpbG9uKFxyXG4gICAgcmlnaHQ6IFZlY3RvcjQsXHJcbiAgICByZWxhdGl2ZUVwc2lsb246IG51bWJlciA9IDAsXHJcbiAgICBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IDBcclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiBWZWN0b3I0LmVxdWFsc0Vwc2lsb24odGhpcywgcmlnaHQsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKTtcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCgke3RoaXMueH0sICR7dGhpcy55fSwgJHt0aGlzLnp9LCAke3RoaXMud30pYDtcclxuICB9XHJcbiAgZnJvbUJ1ZmZlckF0dHJpYnV0ZShhdHRyaWJ1dGU6IEF0dHJpYnV0ZSwgaW5kZXg6IG51bWJlcik6IFZlY3RvcjQge1xyXG4gICAgdGhpcy54ID0gYXR0cmlidXRlLmdldFgoaW5kZXgpO1xyXG4gICAgdGhpcy55ID0gYXR0cmlidXRlLmdldFkoaW5kZXgpO1xyXG4gICAgdGhpcy56ID0gYXR0cmlidXRlLmdldFooaW5kZXgpO1xyXG4gICAgdGhpcy53ID0gYXR0cmlidXRlLmdldFcoaW5kZXgpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21FbGVtZW50cyhcclxuICAgIHg6IG51bWJlcixcclxuICAgIHk6IG51bWJlcixcclxuICAgIHo6IG51bWJlcixcclxuICAgIHc6IG51bWJlcixcclxuICAgIHJlc3VsdDogVmVjdG9yNFxyXG4gICk6IFZlY3RvcjQge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHgsIHksIHosIHcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc3VsdC54ID0geDtcclxuICAgIHJlc3VsdC55ID0geTtcclxuICAgIHJlc3VsdC56ID0gejtcclxuICAgIHJlc3VsdC53ID0gdztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2xvbmUoY2FydGVzaWFuOiBWZWN0b3I0LCByZXN1bHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcclxuICAgIGlmICghZGVmaW5lZChjYXJ0ZXNpYW4pKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KGNhcnRlc2lhbi54LCBjYXJ0ZXNpYW4ueSwgY2FydGVzaWFuLnosIGNhcnRlc2lhbi53KTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHQueCA9IGNhcnRlc2lhbi54O1xyXG4gICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4ueTtcclxuICAgIHJlc3VsdC56ID0gY2FydGVzaWFuLno7XHJcbiAgICByZXN1bHQudyA9IGNhcnRlc2lhbi53O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYXhpbXVtQ29tcG9uZW50KGNhcnRlc2lhbjogVmVjdG9yNCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoY2FydGVzaWFuLngsIGNhcnRlc2lhbi55LCBjYXJ0ZXNpYW4ueiwgY2FydGVzaWFuLncpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1pbmltdW1Db21wb25lbnQoY2FydGVzaWFuOiBWZWN0b3I0KTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLm1pbihjYXJ0ZXNpYW4ueCwgY2FydGVzaWFuLnksIGNhcnRlc2lhbi56LCBjYXJ0ZXNpYW4udyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWluaW11bUJ5Q29tcG9uZW50KFxyXG4gICAgZmlyc3Q6IFZlY3RvcjQsXHJcbiAgICBzZWNvbmQ6IFZlY3RvcjQsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjRcclxuICApOiBWZWN0b3I0IHtcclxuICAgIHJlc3VsdC54ID0gTWF0aC5taW4oZmlyc3QueCwgc2Vjb25kLngpO1xyXG4gICAgcmVzdWx0LnkgPSBNYXRoLm1pbihmaXJzdC55LCBzZWNvbmQueSk7XHJcbiAgICByZXN1bHQueiA9IE1hdGgubWluKGZpcnN0LnosIHNlY29uZC56KTtcclxuICAgIHJlc3VsdC53ID0gTWF0aC5taW4oZmlyc3Qudywgc2Vjb25kLncpO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWF4aW11bUJ5Q29tcG9uZW50KFxyXG4gICAgZmlyc3Q6IFZlY3RvcjQsXHJcbiAgICBzZWNvbmQ6IFZlY3RvcjQsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjRcclxuICApOiBWZWN0b3I0IHtcclxuICAgIHJlc3VsdC54ID0gTWF0aC5tYXgoZmlyc3QueCwgc2Vjb25kLngpO1xyXG4gICAgcmVzdWx0LnkgPSBNYXRoLm1heChmaXJzdC55LCBzZWNvbmQueSk7XHJcbiAgICByZXN1bHQueiA9IE1hdGgubWF4KGZpcnN0LnosIHNlY29uZC56KTtcclxuICAgIHJlc3VsdC53ID0gTWF0aC5tYXgoZmlyc3Qudywgc2Vjb25kLncpO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2xhbXAoXHJcbiAgICB2YWx1ZTogVmVjdG9yNCxcclxuICAgIG1pbjogVmVjdG9yNCxcclxuICAgIG1heDogVmVjdG9yNCxcclxuICAgIHJlc3VsdDogVmVjdG9yNFxyXG4gICk6IFZlY3RvcjQge1xyXG4gICAgY29uc3QgeCA9IEdNYXRoLmNsYW1wKHZhbHVlLngsIG1pbi54LCBtYXgueCk7XHJcbiAgICBjb25zdCB5ID0gR01hdGguY2xhbXAodmFsdWUueSwgbWluLnksIG1heC55KTtcclxuICAgIGNvbnN0IHogPSBHTWF0aC5jbGFtcCh2YWx1ZS56LCBtaW4ueiwgbWF4LnopO1xyXG4gICAgY29uc3QgdyA9IEdNYXRoLmNsYW1wKHZhbHVlLncsIG1pbi53LCBtYXgudyk7XHJcblxyXG4gICAgcmVzdWx0LnggPSB4O1xyXG4gICAgcmVzdWx0LnkgPSB5O1xyXG4gICAgcmVzdWx0LnogPSB6O1xyXG4gICAgcmVzdWx0LncgPSB3O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWFnbml0dWRlU3F1YXJlZChjYXJ0ZXNpYW46IFZlY3RvcjQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgY2FydGVzaWFuLnggKiBjYXJ0ZXNpYW4ueCArXHJcbiAgICAgIGNhcnRlc2lhbi55ICogY2FydGVzaWFuLnkgK1xyXG4gICAgICBjYXJ0ZXNpYW4ueiAqIGNhcnRlc2lhbi56ICtcclxuICAgICAgY2FydGVzaWFuLncgKiBjYXJ0ZXNpYW4ud1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYWduaXR1ZGUoY2FydGVzaWFuOiBWZWN0b3I0KTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQoVmVjdG9yNC5tYWduaXR1ZGVTcXVhcmVkKGNhcnRlc2lhbikpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRpc3RhbmNlKGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0KTogbnVtYmVyIHtcclxuICAgIFZlY3RvcjQuc3VidHJhY3QobGVmdCwgcmlnaHQsIGRpc3RhbmNlU2NyYXRjaCk7XHJcbiAgICByZXR1cm4gVmVjdG9yNC5tYWduaXR1ZGUoZGlzdGFuY2VTY3JhdGNoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXN0YW5jZVNxdWFyZWQobGVmdDogVmVjdG9yNCwgcmlnaHQ6IFZlY3RvcjQpOiBudW1iZXIge1xyXG4gICAgVmVjdG9yNC5zdWJ0cmFjdChsZWZ0LCByaWdodCwgZGlzdGFuY2VTY3JhdGNoKTtcclxuICAgIHJldHVybiBWZWN0b3I0Lm1hZ25pdHVkZVNxdWFyZWQoZGlzdGFuY2VTY3JhdGNoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBub3JtYWxpemUoY2FydGVzaWFuOiBWZWN0b3I0LCByZXN1bHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcclxuICAgIGNvbnN0IG1hZ25pdHVkZSA9IFZlY3RvcjQubWFnbml0dWRlKGNhcnRlc2lhbik7XHJcblxyXG4gICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4ueCAvIG1hZ25pdHVkZTtcclxuICAgIHJlc3VsdC55ID0gY2FydGVzaWFuLnkgLyBtYWduaXR1ZGU7XHJcbiAgICByZXN1bHQueiA9IGNhcnRlc2lhbi56IC8gbWFnbml0dWRlO1xyXG4gICAgcmVzdWx0LncgPSBjYXJ0ZXNpYW4udyAvIG1hZ25pdHVkZTtcclxuXHJcbiAgICAvLz4+aW5jbHVkZVN0YXJ0KCdkZWJ1ZycsIHByYWdtYXMuZGVidWcpO1xyXG4gICAgaWYgKFxyXG4gICAgICBpc05hTihyZXN1bHQueCkgfHxcclxuICAgICAgaXNOYU4ocmVzdWx0LnkpIHx8XHJcbiAgICAgIGlzTmFOKHJlc3VsdC56KSB8fFxyXG4gICAgICBpc05hTihyZXN1bHQudylcclxuICAgICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3JtYWxpemVkIHJlc3VsdCBpcyBub3QgYSBudW1iZXJcIik7XHJcbiAgICB9XHJcbiAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRvdChsZWZ0OiBWZWN0b3I0LCByaWdodDogVmVjdG9yNCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0LnogKyBsZWZ0LncgKiByaWdodC53XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG11bHRpcGx5Q29tcG9uZW50cyhcclxuICAgIGxlZnQ6IFZlY3RvcjQsXHJcbiAgICByaWdodDogVmVjdG9yNCxcclxuICAgIHJlc3VsdDogVmVjdG9yNFxyXG4gICk6IFZlY3RvcjQge1xyXG4gICAgcmVzdWx0LnggPSBsZWZ0LnggKiByaWdodC54O1xyXG4gICAgcmVzdWx0LnkgPSBsZWZ0LnkgKiByaWdodC55O1xyXG4gICAgcmVzdWx0LnogPSBsZWZ0LnogKiByaWdodC56O1xyXG4gICAgcmVzdWx0LncgPSBsZWZ0LncgKiByaWdodC53O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXZpZGVDb21wb25lbnRzKFxyXG4gICAgbGVmdDogVmVjdG9yNCxcclxuICAgIHJpZ2h0OiBWZWN0b3I0LFxyXG4gICAgcmVzdWx0OiBWZWN0b3I0XHJcbiAgKTogVmVjdG9yNCB7XHJcbiAgICByZXN1bHQueCA9IGxlZnQueCAvIHJpZ2h0Lng7XHJcbiAgICByZXN1bHQueSA9IGxlZnQueSAvIHJpZ2h0Lnk7XHJcbiAgICByZXN1bHQueiA9IGxlZnQueiAvIHJpZ2h0Lno7XHJcbiAgICByZXN1bHQudyA9IGxlZnQudyAvIHJpZ2h0Lnc7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFkZChsZWZ0OiBWZWN0b3I0LCByaWdodDogVmVjdG9yNCwgcmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcbiAgICByZXN1bHQueCA9IGxlZnQueCArIHJpZ2h0Lng7XHJcbiAgICByZXN1bHQueSA9IGxlZnQueSArIHJpZ2h0Lnk7XHJcbiAgICByZXN1bHQueiA9IGxlZnQueiArIHJpZ2h0Lno7XHJcbiAgICByZXN1bHQudyA9IGxlZnQudyArIHJpZ2h0Lnc7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHN1YnRyYWN0KGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0LCByZXN1bHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcclxuICAgIHJlc3VsdC54ID0gbGVmdC54IC0gcmlnaHQueDtcclxuICAgIHJlc3VsdC55ID0gbGVmdC55IC0gcmlnaHQueTtcclxuICAgIHJlc3VsdC56ID0gbGVmdC56IC0gcmlnaHQuejtcclxuICAgIHJlc3VsdC53ID0gbGVmdC53IC0gcmlnaHQudztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbXVsdGlwbHlCeVNjYWxhcihcclxuICAgIGNhcnRlc2lhbjogVmVjdG9yNCxcclxuICAgIHNjYWxhcjogbnVtYmVyLFxyXG4gICAgcmVzdWx0OiBWZWN0b3I0XHJcbiAgKTogVmVjdG9yNCB7XHJcbiAgICByZXN1bHQueCA9IGNhcnRlc2lhbi54ICogc2NhbGFyO1xyXG4gICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4ueSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdC56ID0gY2FydGVzaWFuLnogKiBzY2FsYXI7XHJcbiAgICByZXN1bHQudyA9IGNhcnRlc2lhbi53ICogc2NhbGFyO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXZpZGVCeVNjYWxhcihcclxuICAgIGNhcnRlc2lhbjogVmVjdG9yNCxcclxuICAgIHNjYWxhcjogbnVtYmVyLFxyXG4gICAgcmVzdWx0OiBWZWN0b3I0XHJcbiAgKTogVmVjdG9yNCB7XHJcbiAgICByZXN1bHQueCA9IGNhcnRlc2lhbi54IC8gc2NhbGFyO1xyXG4gICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4ueSAvIHNjYWxhcjtcclxuICAgIHJlc3VsdC56ID0gY2FydGVzaWFuLnogLyBzY2FsYXI7XHJcbiAgICByZXN1bHQudyA9IGNhcnRlc2lhbi53IC8gc2NhbGFyO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBuZWdhdGUoY2FydGVzaWFuOiBWZWN0b3I0LCByZXN1bHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcclxuICAgIHJlc3VsdC54ID0gLWNhcnRlc2lhbi54O1xyXG4gICAgcmVzdWx0LnkgPSAtY2FydGVzaWFuLnk7XHJcbiAgICByZXN1bHQueiA9IC1jYXJ0ZXNpYW4uejtcclxuICAgIHJlc3VsdC53ID0gLWNhcnRlc2lhbi53O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhYnMoY2FydGVzaWFuOiBWZWN0b3I0LCByZXN1bHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcclxuICAgIHJlc3VsdC54ID0gTWF0aC5hYnMoY2FydGVzaWFuLngpO1xyXG4gICAgcmVzdWx0LnkgPSBNYXRoLmFicyhjYXJ0ZXNpYW4ueSk7XHJcbiAgICByZXN1bHQueiA9IE1hdGguYWJzKGNhcnRlc2lhbi56KTtcclxuICAgIHJlc3VsdC53ID0gTWF0aC5hYnMoY2FydGVzaWFuLncpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBsZXJwKFxyXG4gICAgc3RhcnQ6IFZlY3RvcjQsXHJcbiAgICBlbmQ6IFZlY3RvcjQsXHJcbiAgICB0OiBudW1iZXIsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjRcclxuICApOiBWZWN0b3I0IHtcclxuICAgIFZlY3RvcjQubXVsdGlwbHlCeVNjYWxhcihlbmQsIHQsIGxlcnBTY3JhdGNoKTtcclxuICAgIHJlc3VsdCA9IFZlY3RvcjQubXVsdGlwbHlCeVNjYWxhcihzdGFydCwgMS4wIC0gdCwgcmVzdWx0KTtcclxuICAgIHJldHVybiBWZWN0b3I0LmFkZChsZXJwU2NyYXRjaCwgcmVzdWx0LCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBWZWN0b3I0LCByaWdodDogVmVjdG9yNCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgbGVmdCA9PT0gcmlnaHQgfHxcclxuICAgICAgKGRlZmluZWQobGVmdCkgJiZcclxuICAgICAgICBkZWZpbmVkKHJpZ2h0KSAmJlxyXG4gICAgICAgIGxlZnQueCA9PT0gcmlnaHQueCAmJlxyXG4gICAgICAgIGxlZnQueSA9PT0gcmlnaHQueSAmJlxyXG4gICAgICAgIGxlZnQueiA9PT0gcmlnaHQueiAmJlxyXG4gICAgICAgIGxlZnQudyA9PT0gcmlnaHQudylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXF1YWxzQXJyYXkoXHJcbiAgICBjYXJ0ZXNpYW46IFZlY3RvcjQsXHJcbiAgICBhcnJheTogbnVtYmVyW10sXHJcbiAgICBvZmZzZXQ6IG51bWJlclxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgY2FydGVzaWFuLnggPT09IGFycmF5W29mZnNldF0gJiZcclxuICAgICAgY2FydGVzaWFuLnkgPT09IGFycmF5W29mZnNldCArIDFdICYmXHJcbiAgICAgIGNhcnRlc2lhbi56ID09PSBhcnJheVtvZmZzZXQgKyAyXSAmJlxyXG4gICAgICBjYXJ0ZXNpYW4udyA9PT0gYXJyYXlbb2Zmc2V0ICsgM11cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXF1YWxzRXBzaWxvbihcclxuICAgIGxlZnQ6IFZlY3RvcjQsXHJcbiAgICByaWdodDogVmVjdG9yNCxcclxuICAgIHJlbGF0aXZlRXBzaWxvbjogbnVtYmVyID0gMCxcclxuICAgIGFic29sdXRlRXBzaWxvbjogbnVtYmVyID0gMFxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgbGVmdCA9PT0gcmlnaHQgfHxcclxuICAgICAgKGRlZmluZWQobGVmdCkgJiZcclxuICAgICAgICBkZWZpbmVkKHJpZ2h0KSAmJlxyXG4gICAgICAgIEdNYXRoLmVxdWFsc0Vwc2lsb24oXHJcbiAgICAgICAgICBsZWZ0LngsXHJcbiAgICAgICAgICByaWdodC54LFxyXG4gICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLFxyXG4gICAgICAgICAgYWJzb2x1dGVFcHNpbG9uXHJcbiAgICAgICAgKSAmJlxyXG4gICAgICAgIEdNYXRoLmVxdWFsc0Vwc2lsb24oXHJcbiAgICAgICAgICBsZWZ0LnksXHJcbiAgICAgICAgICByaWdodC55LFxyXG4gICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLFxyXG4gICAgICAgICAgYWJzb2x1dGVFcHNpbG9uXHJcbiAgICAgICAgKSAmJlxyXG4gICAgICAgIEdNYXRoLmVxdWFsc0Vwc2lsb24oXHJcbiAgICAgICAgICBsZWZ0LnosXHJcbiAgICAgICAgICByaWdodC56LFxyXG4gICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLFxyXG4gICAgICAgICAgYWJzb2x1dGVFcHNpbG9uXHJcbiAgICAgICAgKSAmJlxyXG4gICAgICAgIEdNYXRoLmVxdWFsc0Vwc2lsb24obGVmdC53LCByaWdodC53LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLy8gc2NyYXRjaFU4QXJyYXkgYW5kIHNjcmF0Y2hGMzJBcnJheSBhcmUgdmlld3MgaW50byB0aGUgc2FtZSBidWZmZXJcclxuY29uc3Qgc2NyYXRjaEYzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgxKTtcclxuY29uc3Qgc2NyYXRjaFU4QXJyYXkgPSBuZXcgVWludDhBcnJheShzY3JhdGNoRjMyQXJyYXkuYnVmZmVyKTtcclxuXHJcbmNvbnN0IHRlc3RVMzIgPSBuZXcgVWludDMyQXJyYXkoWzB4MTEyMjMzNDRdKTtcclxuY29uc3QgdGVzdFU4ID0gbmV3IFVpbnQ4QXJyYXkodGVzdFUzMi5idWZmZXIpO1xyXG5jb25zdCBsaXR0bGVFbmRpYW4gPSB0ZXN0VThbMF0gPT09IDB4NDQ7XHJcbmNvbnN0IGRpc3RhbmNlU2NyYXRjaCA9IG5ldyBWZWN0b3I0KCk7XHJcbmNvbnN0IGxlcnBTY3JhdGNoID0gbmV3IFZlY3RvcjQoKTtcclxuY29uc3QgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaCA9IG5ldyBWZWN0b3I0KCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWZWN0b3I0O1xyXG4iLCJpbXBvcnQgeyBBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vcmVuZGVyL0F0dHJpYnV0ZVwiO1xyXG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xyXG5pbXBvcnQgR01hdGggZnJvbSBcIi4vTWF0aFwiO1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tIFwiLi9NYXRyaXgzXCI7XHJcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuL01hdHJpeDRcIjtcclxuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gXCIuL1F1YXRlcm5pb25cIjtcclxuaW1wb3J0IHsgU3BoZXJpY2FsIH0gZnJvbSBcIi4vU3BoZXJpY2FsXCI7XHJcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuL1ZlY3RvcjRcIjtcclxuY2xhc3MgVmVjdG9yMyB7XHJcblx0cHVibGljIHN0YXRpYyBaRVJPID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygwLjAsIDAuMCwgMC4wKSk7XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgT05FID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygxLjAsIDEuMCwgMS4wKSk7XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgVU5JVF9YID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygxLjAsIDAuMCwgMC4wKSk7XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgVU5JVF9ZID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygwLjAsIDEuMCwgMC4wKSk7XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgVU5JVF9aID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygwLjAsIDAuMCwgMS4wKSk7XHJcblx0eDogbnVtYmVyO1xyXG5cdHk6IG51bWJlcjtcclxuXHR6OiBudW1iZXI7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHg6IG51bWJlciA9IDAsIHk6IG51bWJlciA9IDAsIHo6IG51bWJlciA9IDApIHtcclxuXHRcdHRoaXMueCA9IHg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cdFx0dGhpcy56ID0gejtcclxuXHR9XHJcblx0c2V0KHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBWZWN0b3IzIHtcclxuXHRcdHRoaXMueCA9IHg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cdFx0dGhpcy56ID0gejtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHR0b0FycmF5KCk6IG51bWJlcltdIHtcclxuXHRcdHJldHVybiBbdGhpcy54LCB0aGlzLnksIHRoaXMuel07XHJcblx0fVxyXG5cclxuXHRjb3B5KHY6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdHRoaXMueCA9IHYueDtcclxuXHRcdHRoaXMueSA9IHYueTtcclxuXHRcdHRoaXMueiA9IHYuejtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRsZXJwKGVuZDogVmVjdG9yMywgdDogbnVtYmVyKTogVmVjdG9yMyB7XHJcblx0XHRWZWN0b3IzLmxlcnAodGhpcywgZW5kLCB0LCB0aGlzKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRhZGQodjogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0VmVjdG9yMy5hZGQodGhpcywgdiwgdGhpcyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0YWRkU2NhbGVkVmVjdG9yKHY6IFZlY3RvcjMsIHM6IG51bWJlcik6IFZlY3RvcjMge1xyXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XHJcblx0XHR0aGlzLnkgKz0gdi55ICogcztcclxuXHRcdHRoaXMueiArPSB2LnogKiBzO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdHN1YnRyYWN0KHY6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdFZlY3RvcjMuc3VidHJhY3QodGhpcywgdiwgdGhpcyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0YXBwbHlRdWF0ZXJuaW9uKHE6IFF1YXRlcm5pb24pOiBWZWN0b3IzIHtcclxuXHRcdGNvbnN0IHggPSB0aGlzLngsXHJcblx0XHRcdHkgPSB0aGlzLnksXHJcblx0XHRcdHogPSB0aGlzLno7XHJcblx0XHRjb25zdCBxeCA9IHEueCxcclxuXHRcdFx0cXkgPSBxLnksXHJcblx0XHRcdHF6ID0gcS56LFxyXG5cdFx0XHRxdyA9IHEudztcclxuXHJcblx0XHQvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY3RvclxyXG5cclxuXHRcdGNvbnN0IGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xyXG5cdFx0Y29uc3QgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XHJcblx0XHRjb25zdCBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcclxuXHRcdGNvbnN0IGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcclxuXHJcblx0XHQvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XHJcblxyXG5cdFx0dGhpcy54ID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcclxuXHRcdHRoaXMueSA9IGl5ICogcXcgKyBpdyAqIC1xeSArIGl6ICogLXF4IC0gaXggKiAtcXo7XHJcblx0XHR0aGlzLnogPSBpeiAqIHF3ICsgaXcgKiAtcXogKyBpeCAqIC1xeSAtIGl5ICogLXF4O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRzZXRGcm9tTWF0cml4Q29sdW1uKG06IE1hdHJpeDMgfCBNYXRyaXg0LCBpbmRleDogbnVtYmVyKTogVmVjdG9yMyB7XHJcblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkobSwgaW5kZXggKiA0KTtcclxuXHR9XHJcblx0ZnJvbUFycmF5KGFycmF5OiBNYXRyaXgzIHwgTWF0cml4NCwgb2Zmc2V0OiBudW1iZXIgPSAwKTogVmVjdG9yMyB7XHJcblx0XHR0aGlzLnggPSBhcnJheVtvZmZzZXRdO1xyXG5cdFx0dGhpcy55ID0gYXJyYXlbb2Zmc2V0ICsgMV07XHJcblx0XHR0aGlzLnogPSBhcnJheVtvZmZzZXQgKyAyXTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdG11bHRpcGx5QnlTY2FsYXIoc2NhbGU6IG51bWJlcik6IFZlY3RvcjMge1xyXG5cdFx0VmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKHRoaXMsIHNjYWxlLCB0aGlzKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0Y2xvbmUoKTogVmVjdG9yMyB7XHJcblx0XHRyZXR1cm4gVmVjdG9yMy5jbG9uZSh0aGlzLCBuZXcgVmVjdG9yMygpKTtcclxuXHR9XHJcblx0bGVuZ3RoKCk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueik7XHJcblx0fVxyXG5cdGFwcGx5TWF0cml4NChtYXRyaXg6IE1hdHJpeDQpOiBWZWN0b3IzIHtcclxuXHRcdGNvbnN0IHggPSB0aGlzLngsXHJcblx0XHRcdHkgPSB0aGlzLnksXHJcblx0XHRcdHogPSB0aGlzLno7XHJcblx0XHRjb25zdCBlID0gbWF0cml4O1xyXG5cdFx0Y29uc3QgdyA9IDEgLyAoZVszXSAqIHggKyBlWzddICogeSArIGVbMTFdICogeiArIGVbMTVdKTtcclxuXHRcdHRoaXMueCA9IChlWzBdICogeCArIGVbNF0gKiB5ICsgZVs4XSAqIHogKyBlWzEyXSkgKiB3O1xyXG5cdFx0dGhpcy55ID0gKGVbMV0gKiB4ICsgZVs1XSAqIHkgKyBlWzldICogeiArIGVbMTNdKSAqIHc7XHJcblx0XHR0aGlzLnogPSAoZVsyXSAqIHggKyBlWzZdICogeSArIGVbMTBdICogeiArIGVbMTRdKSAqIHc7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0YXBwbHlNYXRyaXgzKG1hdHJpeDogTWF0cml4Myk6IFZlY3RvcjMge1xyXG5cdFx0bGV0IHggPSB0aGlzLngsXHJcblx0XHRcdHkgPSB0aGlzLnksXHJcblx0XHRcdHogPSB0aGlzLno7XHJcblx0XHR0aGlzLnggPSB4ICogbWF0cml4WzBdICsgeSAqIG1hdHJpeFszXSArIHogKiBtYXRyaXhbNl07XHJcblx0XHR0aGlzLnkgPSB4ICogbWF0cml4WzFdICsgeSAqIG1hdHJpeFs0XSArIHogKiBtYXRyaXhbN107XHJcblx0XHR0aGlzLnogPSB4ICogbWF0cml4WzJdICsgeSAqIG1hdHJpeFs1XSArIHogKiBtYXRyaXhbOF07XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0dHJhbnNmb3JtRGlyZWN0aW9uKG1hdHJpeDogTWF0cml4MyB8IE1hdHJpeDQpOiBWZWN0b3IzIHtcclxuXHRcdGNvbnN0IHggPSB0aGlzLngsXHJcblx0XHRcdHkgPSB0aGlzLnksXHJcblx0XHRcdHogPSB0aGlzLno7XHJcblx0XHRjb25zdCBlID0gbWF0cml4O1xyXG5cdFx0dGhpcy54ID0gZVswXSAqIHggKyBlWzRdICogeSArIGVbOF0gKiB6O1xyXG5cdFx0dGhpcy55ID0gZVsxXSAqIHggKyBlWzVdICogeSArIGVbOV0gKiB6O1xyXG5cdFx0dGhpcy56ID0gZVsyXSAqIHggKyBlWzZdICogeSArIGVbMTBdICogejtcclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xyXG5cdH1cclxuXHJcblx0c2V0RnJvbU1hdHJpeFBvc2l0aW9uKG1hdHJpeDogTWF0cml4NCkge1xyXG5cdFx0Y29uc3QgZSA9IG1hdHJpeDtcclxuXHJcblx0XHR0aGlzLnggPSBlWzEyXTtcclxuXHRcdHRoaXMueSA9IGVbMTNdO1xyXG5cdFx0dGhpcy56ID0gZVsxNF07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRub3JtYWxpemUoKTogVmVjdG9yMyB7XHJcblx0XHRWZWN0b3IzLm5vcm1hbGl6ZSh0aGlzLCB0aGlzKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0ZXF1YWxzKHJpZ2h0OiBWZWN0b3IzKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gVmVjdG9yMy5lcXVhbHModGhpcywgcmlnaHQpO1xyXG5cdH1cclxuXHJcblx0ZXF1YWxzRXBzaWxvbihyaWdodDogVmVjdG9yMywgcmVsYXRpdmVFcHNpbG9uOiBudW1iZXIgPSAwLCBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IDApOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBWZWN0b3IzLmVxdWFsc0Vwc2lsb24odGhpcywgcmlnaHQsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKTtcclxuXHR9XHJcblxyXG5cdHRvU3RyaW5nKCkge1xyXG5cdFx0cmV0dXJuIGAoJHt0aGlzLnh9LCAke3RoaXMueX0sICR7dGhpcy56fSlgO1xyXG5cdH1cclxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKGF0dHJpYnV0ZTogQXR0cmlidXRlLCBpbmRleDogbnVtYmVyKTogVmVjdG9yMyB7XHJcblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WChpbmRleCk7XHJcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WShpbmRleCk7XHJcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WihpbmRleCk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0c3RhdGljIGZyb21WZWN0b3I0KHZlYzQ6IFZlY3RvcjQsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0cmVzdWx0LnggPSB2ZWM0Lng7XHJcblx0XHRyZXN1bHQueSA9IHZlYzQueTtcclxuXHRcdHJlc3VsdC56ID0gdmVjNC56O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tU3BoZXJpY2FsKHNwaGVyaWNhbDogU3BoZXJpY2FsLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcblx0XHRcdHJlc3VsdCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHR9XHJcblx0XHRjb25zdCB7IHBoaSwgcmFkaXVzLCB0aGV0YSB9ID0gc3BoZXJpY2FsO1xyXG5cdFx0Y29uc3Qgc2luUGhpUmFkaXVzID0gTWF0aC5zaW4ocGhpKSAqIHJhZGl1cztcclxuXHRcdHJlc3VsdC54ID0gc2luUGhpUmFkaXVzICogTWF0aC5zaW4odGhldGEpO1xyXG5cdFx0cmVzdWx0LnkgPSBNYXRoLmNvcyhwaGkpICogcmFkaXVzO1xyXG5cdFx0cmVzdWx0LnogPSBzaW5QaGlSYWRpdXMgKiBNYXRoLmNvcyh0aGV0YSk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21FbGVtZW50cyh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMyh4LCB5LCB6KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXN1bHQueCA9IHg7XHJcblx0XHRyZXN1bHQueSA9IHk7XHJcblx0XHRyZXN1bHQueiA9IHo7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNsb25lKGNhcnRlc2lhbjogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKSk6IFZlY3RvcjMge1xyXG5cdFx0aWYgKCFkZWZpbmVkKGNhcnRlc2lhbikpIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMyhjYXJ0ZXNpYW4ueCwgY2FydGVzaWFuLnksIGNhcnRlc2lhbi56KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXN1bHQueCA9IGNhcnRlc2lhbi54O1xyXG5cdFx0cmVzdWx0LnkgPSBjYXJ0ZXNpYW4ueTtcclxuXHRcdHJlc3VsdC56ID0gY2FydGVzaWFuLno7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG1heGltdW1Db21wb25lbnQoY2FydGVzaWFuOiBWZWN0b3IzKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBNYXRoLm1heChjYXJ0ZXNpYW4ueCwgY2FydGVzaWFuLnksIGNhcnRlc2lhbi56KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtaW5pbXVtQ29tcG9uZW50KGNhcnRlc2lhbjogVmVjdG9yMyk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gTWF0aC5taW4oY2FydGVzaWFuLngsIGNhcnRlc2lhbi55LCBjYXJ0ZXNpYW4ueik7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbWluaW11bUJ5Q29tcG9uZW50KGZpcnN0OiBWZWN0b3IzLCBzZWNvbmQ6IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0cmVzdWx0LnggPSBNYXRoLm1pbihmaXJzdC54LCBzZWNvbmQueCk7XHJcblx0XHRyZXN1bHQueSA9IE1hdGgubWluKGZpcnN0LnksIHNlY29uZC55KTtcclxuXHRcdHJlc3VsdC56ID0gTWF0aC5taW4oZmlyc3Queiwgc2Vjb25kLnopO1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbWF4aW11bUJ5Q29tcG9uZW50KGZpcnN0OiBWZWN0b3IzLCBzZWNvbmQ6IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0cmVzdWx0LnggPSBNYXRoLm1heChmaXJzdC54LCBzZWNvbmQueCk7XHJcblx0XHRyZXN1bHQueSA9IE1hdGgubWF4KGZpcnN0LnksIHNlY29uZC55KTtcclxuXHRcdHJlc3VsdC56ID0gTWF0aC5tYXgoZmlyc3Queiwgc2Vjb25kLnopO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBjbGFtcCh2YWx1ZTogVmVjdG9yMywgbWluOiBWZWN0b3IzLCBtYXg6IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0Y29uc3QgeCA9IEdNYXRoLmNsYW1wKHZhbHVlLngsIG1pbi54LCBtYXgueCk7XHJcblx0XHRjb25zdCB5ID0gR01hdGguY2xhbXAodmFsdWUueSwgbWluLnksIG1heC55KTtcclxuXHRcdGNvbnN0IHogPSBHTWF0aC5jbGFtcCh2YWx1ZS56LCBtaW4ueiwgbWF4LnopO1xyXG5cclxuXHRcdHJlc3VsdC54ID0geDtcclxuXHRcdHJlc3VsdC55ID0geTtcclxuXHRcdHJlc3VsdC56ID0gejtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG1hZ25pdHVkZVNxdWFyZWQoY2FydGVzaWFuOiBWZWN0b3IzKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBjYXJ0ZXNpYW4ueCAqIGNhcnRlc2lhbi54ICsgY2FydGVzaWFuLnkgKiBjYXJ0ZXNpYW4ueSArIGNhcnRlc2lhbi56ICogY2FydGVzaWFuLno7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbWFnbml0dWRlKGNhcnRlc2lhbjogVmVjdG9yMyk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KFZlY3RvcjMubWFnbml0dWRlU3F1YXJlZChjYXJ0ZXNpYW4pKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBkaXN0YW5jZShsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMyk6IG51bWJlciB7XHJcblx0XHRWZWN0b3IzLnN1YnRyYWN0KGxlZnQsIHJpZ2h0LCBkaXN0YW5jZVNjcmF0Y2gpO1xyXG5cdFx0cmV0dXJuIFZlY3RvcjMubWFnbml0dWRlKGRpc3RhbmNlU2NyYXRjaCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZGlzdGFuY2VTcXVhcmVkKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzKTogbnVtYmVyIHtcclxuXHRcdFZlY3RvcjMuc3VidHJhY3QobGVmdCwgcmlnaHQsIGRpc3RhbmNlU2NyYXRjaCk7XHJcblx0XHRyZXR1cm4gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKGRpc3RhbmNlU2NyYXRjaCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbm9ybWFsaXplKGNhcnRlc2lhbjogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcblx0XHRjb25zdCBtYWduaXR1ZGUgPSBWZWN0b3IzLm1hZ25pdHVkZShjYXJ0ZXNpYW4pO1xyXG5cclxuXHRcdHJlc3VsdC54ID0gY2FydGVzaWFuLnggLyBtYWduaXR1ZGU7XHJcblx0XHRyZXN1bHQueSA9IGNhcnRlc2lhbi55IC8gbWFnbml0dWRlO1xyXG5cdFx0cmVzdWx0LnogPSBjYXJ0ZXNpYW4ueiAvIG1hZ25pdHVkZTtcclxuXHJcblx0XHRpZiAoaXNOYU4ocmVzdWx0LngpIHx8IGlzTmFOKHJlc3VsdC55KSB8fCBpc05hTihyZXN1bHQueikpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwibm9ybWFsaXplZCByZXN1bHQgaXMgbm90IGEgbnVtYmVyXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZG90KGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0Lno7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlDb21wb25lbnRzKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdHJlc3VsdC54ID0gbGVmdC54ICogcmlnaHQueDtcclxuXHRcdHJlc3VsdC55ID0gbGVmdC55ICogcmlnaHQueTtcclxuXHRcdHJlc3VsdC56ID0gbGVmdC56ICogcmlnaHQuejtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZGl2aWRlQ29tcG9uZW50cyhsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKSB7XHJcblx0XHRyZXN1bHQueCA9IGxlZnQueCAvIHJpZ2h0Lng7XHJcblx0XHRyZXN1bHQueSA9IGxlZnQueSAvIHJpZ2h0Lnk7XHJcblx0XHRyZXN1bHQueiA9IGxlZnQueiAvIHJpZ2h0Lno7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGFkZChsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcblx0XHRyZXN1bHQueCA9IGxlZnQueCArIHJpZ2h0Lng7XHJcblx0XHRyZXN1bHQueSA9IGxlZnQueSArIHJpZ2h0Lnk7XHJcblx0XHRyZXN1bHQueiA9IGxlZnQueiArIHJpZ2h0Lno7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHN1YnRyYWN0KGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdHJlc3VsdC54ID0gbGVmdC54IC0gcmlnaHQueDtcclxuXHRcdHJlc3VsdC55ID0gbGVmdC55IC0gcmlnaHQueTtcclxuXHRcdHJlc3VsdC56ID0gbGVmdC56IC0gcmlnaHQuejtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlCeVNjYWxhcihjYXJ0ZXNpYW46IFZlY3RvcjMsIHNjYWxhcjogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdHJlc3VsdC54ID0gY2FydGVzaWFuLnggKiBzY2FsYXI7XHJcblx0XHRyZXN1bHQueSA9IGNhcnRlc2lhbi55ICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0LnogPSBjYXJ0ZXNpYW4ueiAqIHNjYWxhcjtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZGl2aWRlQnlTY2FsYXIoY2FydGVzaWFuOiBWZWN0b3IzLCBzY2FsYXI6IG51bWJlciwgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcblx0XHRyZXN1bHQueCA9IGNhcnRlc2lhbi54IC8gc2NhbGFyO1xyXG5cdFx0cmVzdWx0LnkgPSBjYXJ0ZXNpYW4ueSAvIHNjYWxhcjtcclxuXHRcdHJlc3VsdC56ID0gY2FydGVzaWFuLnogLyBzY2FsYXI7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG5lZ2F0ZShjYXJ0ZXNpYW46IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0cmVzdWx0LnggPSAtY2FydGVzaWFuLng7XHJcblx0XHRyZXN1bHQueSA9IC1jYXJ0ZXNpYW4ueTtcclxuXHRcdHJlc3VsdC56ID0gLWNhcnRlc2lhbi56O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBhYnMoY2FydGVzaWFuOiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdHJlc3VsdC54ID0gTWF0aC5hYnMoY2FydGVzaWFuLngpO1xyXG5cdFx0cmVzdWx0LnkgPSBNYXRoLmFicyhjYXJ0ZXNpYW4ueSk7XHJcblx0XHRyZXN1bHQueiA9IE1hdGguYWJzKGNhcnRlc2lhbi56KTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbGVycChzdGFydDogVmVjdG9yMywgZW5kOiBWZWN0b3IzLCB0OiBudW1iZXIsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0VmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGVuZCwgdCwgbGVycFNjcmF0Y2gpO1xyXG5cdFx0cmVzdWx0ID0gVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKHN0YXJ0LCAxLjAgLSB0LCByZXN1bHQpO1xyXG5cdFx0cmV0dXJuIFZlY3RvcjMuYWRkKGxlcnBTY3JhdGNoLCByZXN1bHQsIHJlc3VsdCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYW5nbGVCZXR3ZWVuKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzKTogbnVtYmVyIHtcclxuXHRcdFZlY3RvcjMubm9ybWFsaXplKGxlZnQsIGFuZ2xlQmV0d2VlblNjcmF0Y2gpO1xyXG5cdFx0VmVjdG9yMy5ub3JtYWxpemUocmlnaHQsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyKTtcclxuXHRcdGNvbnN0IGNvc2luZSA9IFZlY3RvcjMuZG90KGFuZ2xlQmV0d2VlblNjcmF0Y2gsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyKTtcclxuXHRcdGNvbnN0IHNpbmUgPSBWZWN0b3IzLm1hZ25pdHVkZShWZWN0b3IzLmNyb3NzKGFuZ2xlQmV0d2VlblNjcmF0Y2gsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyLCBhbmdsZUJldHdlZW5TY3JhdGNoKSk7XHJcblx0XHRyZXR1cm4gTWF0aC5hdGFuMihzaW5lLCBjb3NpbmUpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG1vc3RPcnRob2dvbmFsQXhpcyhjYXJ0ZXNpYW46IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0Y29uc3QgZiA9IFZlY3RvcjMubm9ybWFsaXplKGNhcnRlc2lhbiwgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaCk7XHJcblx0XHRWZWN0b3IzLmFicyhmLCBmKTtcclxuXHJcblx0XHRpZiAoZi54IDw9IGYueSkge1xyXG5cdFx0XHRpZiAoZi54IDw9IGYueikge1xyXG5cdFx0XHRcdHJlc3VsdCA9IFZlY3RvcjMuY2xvbmUoVmVjdG9yMy5VTklUX1gsIHJlc3VsdCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVzdWx0ID0gVmVjdG9yMy5jbG9uZShWZWN0b3IzLlVOSVRfWiwgcmVzdWx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmIChmLnkgPD0gZi56KSB7XHJcblx0XHRcdHJlc3VsdCA9IFZlY3RvcjMuY2xvbmUoVmVjdG9yMy5VTklUX1ksIHJlc3VsdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXN1bHQgPSBWZWN0b3IzLmNsb25lKFZlY3RvcjMuVU5JVF9aLCByZXN1bHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcHJvamVjdFZlY3RvcihhOiBWZWN0b3IzLCBiOiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdGNvbnN0IHNjYWxhciA9IFZlY3RvcjMuZG90KGEsIGIpIC8gVmVjdG9yMy5kb3QoYiwgYik7XHJcblx0XHRyZXR1cm4gVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGIsIHNjYWxhciwgcmVzdWx0KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBlcXVhbHMobGVmdDogVmVjdG9yMywgcmlnaHQ6IFZlY3RvcjMpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdGxlZnQgPT09IHJpZ2h0IHx8XHJcblx0XHRcdChkZWZpbmVkKGxlZnQpICYmIGRlZmluZWQocmlnaHQpICYmIGxlZnQueCA9PT0gcmlnaHQueCAmJiBsZWZ0LnkgPT09IHJpZ2h0LnkgJiYgbGVmdC56ID09PSByaWdodC56KVxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBwcml2YXRlXHJcblx0ICovXHJcblx0c3RhdGljIGVxdWFsc0FycmF5KGNhcnRlc2lhbjogVmVjdG9yMywgYXJyYXk6IG51bWJlcltdLCBvZmZzZXQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIGNhcnRlc2lhbi54ID09PSBhcnJheVtvZmZzZXRdICYmIGNhcnRlc2lhbi55ID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJiBjYXJ0ZXNpYW4ueiA9PT0gYXJyYXlbb2Zmc2V0ICsgMl07XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZXF1YWxzRXBzaWxvbihcclxuXHRcdGxlZnQ6IFZlY3RvcjMsXHJcblx0XHRyaWdodDogVmVjdG9yMyxcclxuXHRcdHJlbGF0aXZlRXBzaWxvbjogbnVtYmVyID0gMCxcclxuXHRcdGFic29sdXRlRXBzaWxvbjogbnVtYmVyID0gMFxyXG5cdCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0bGVmdCA9PT0gcmlnaHQgfHxcclxuXHRcdFx0KGRlZmluZWQobGVmdCkgJiZcclxuXHRcdFx0XHRkZWZpbmVkKHJpZ2h0KSAmJlxyXG5cdFx0XHRcdEdNYXRoLmVxdWFsc0Vwc2lsb24obGVmdC54LCByaWdodC54LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgJiZcclxuXHRcdFx0XHRHTWF0aC5lcXVhbHNFcHNpbG9uKGxlZnQueSwgcmlnaHQueSwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pICYmXHJcblx0XHRcdFx0R01hdGguZXF1YWxzRXBzaWxvbihsZWZ0LnosIHJpZ2h0LnosIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKSlcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY3Jvc3MobGVmdDogVmVjdG9yMywgcmlnaHQ6IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0Y29uc3QgbGVmdFggPSBsZWZ0Lng7XHJcblx0XHRjb25zdCBsZWZ0WSA9IGxlZnQueTtcclxuXHRcdGNvbnN0IGxlZnRaID0gbGVmdC56O1xyXG5cdFx0Y29uc3QgcmlnaHRYID0gcmlnaHQueDtcclxuXHRcdGNvbnN0IHJpZ2h0WSA9IHJpZ2h0Lnk7XHJcblx0XHRjb25zdCByaWdodFogPSByaWdodC56O1xyXG5cclxuXHRcdGNvbnN0IHggPSBsZWZ0WSAqIHJpZ2h0WiAtIGxlZnRaICogcmlnaHRZO1xyXG5cdFx0Y29uc3QgeSA9IGxlZnRaICogcmlnaHRYIC0gbGVmdFggKiByaWdodFo7XHJcblx0XHRjb25zdCB6ID0gbGVmdFggKiByaWdodFkgLSBsZWZ0WSAqIHJpZ2h0WDtcclxuXHJcblx0XHRyZXN1bHQueCA9IHg7XHJcblx0XHRyZXN1bHQueSA9IHk7XHJcblx0XHRyZXN1bHQueiA9IHo7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG1pZHBvaW50ID0gZnVuY3Rpb24gKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdHJlc3VsdC54ID0gKGxlZnQueCArIHJpZ2h0LngpICogMC41O1xyXG5cdFx0cmVzdWx0LnkgPSAobGVmdC55ICsgcmlnaHQueSkgKiAwLjU7XHJcblx0XHRyZXN1bHQueiA9IChsZWZ0LnogKyByaWdodC56KSAqIDAuNTtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH07XHJcbn1cclxuY29uc3QgZGlzdGFuY2VTY3JhdGNoID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgbGVycFNjcmF0Y2ggPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBhbmdsZUJldHdlZW5TY3JhdGNoID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgYW5nbGVCZXR3ZWVuU2NyYXRjaDIgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoID0gbmV3IFZlY3RvcjMoKTtcclxuZXhwb3J0IGRlZmF1bHQgVmVjdG9yMztcclxuIiwiaW1wb3J0IENhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0NhbWVyYVwiO1xyXG5pbXBvcnQgUmVuZGVyT2JqZWN0IGZyb20gXCIuLi9jb3JlL1JlbmRlck9iamVjdFwiO1xyXG5pbXBvcnQgQ29sb3IgZnJvbSBcIi4uL21hdGgvQ29sb3JcIjtcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xyXG5pbXBvcnQgeyBCYXNlU2hhZG93IH0gZnJvbSBcIi4vc2hhZG93cy9CYXNlU2hhZG93XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTGlnaHQge1xyXG5cdHByaXZhdGUgX2NvbG9yOiBWZWN0b3IzO1xyXG5cdHR5cGU6IHN0cmluZztcclxuXHRwcml2YXRlIF9pbnRlbnNpdHk6IG51bWJlcjtcclxuXHRkaXJ0eTogYm9vbGVhbjtcclxuXHRjb2xvckRpcnR5OiBib29sZWFuO1xyXG5cdHNoYWRvd0RpcnR5OiBib29sZWFuO1xyXG5cdGludGVuc2l0eURpcnR5OiBib29sZWFuO1xyXG5cdHByaXZhdGUgX3Bvc2l0aW9uOiBWZWN0b3IzO1xyXG5cdHByaXZhdGUgX3RhcmdldDogVmVjdG9yMztcclxuXHRwb3NpdGlvbkRpcnR5OiBib29sZWFuO1xyXG5cdHB1YmxpYyBfc2hhZG93OiBCYXNlU2hhZG93O1xyXG5cdHB1YmxpYyB0YXJnZXREaXJ0eTogYm9vbGVhbjtcclxuXHRwdWJsaWMgaXNMaWdodDogYm9vbGVhbjtcclxuXHJcblx0Y29uc3RydWN0b3IoY29sb3I6IFZlY3RvcjMsIGludGVuc2l0eTogbnVtYmVyKSB7XHJcblx0XHR0aGlzLl9jb2xvciA9IFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihjb2xvciwgaW50ZW5zaXR5LCBuZXcgVmVjdG9yMygpKTtcclxuXHRcdHRoaXMuX2ludGVuc2l0eSA9IGludGVuc2l0eTtcclxuXHRcdHRoaXMuX3Bvc2l0aW9uID0gbmV3IFZlY3RvcjMoMCwgMSwgMCk7XHJcblx0XHR0aGlzLl90YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0dGhpcy5wb3NpdGlvbkRpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMudGFyZ2V0RGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5jb2xvckRpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuc2hhZG93RGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5pbnRlbnNpdHlEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLl9zaGFkb3cgPSBudWxsO1xyXG5cdFx0dGhpcy5pc0xpZ2h0ID0gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGdldCBwb3NpdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLl9wb3NpdGlvbjtcclxuXHR9XHJcblxyXG5cdHNldCBwb3NpdGlvbih2YWx1ZSkge1xyXG5cdFx0dGhpcy5wb3NpdGlvbkRpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuX3Bvc2l0aW9uID0gdmFsdWU7XHJcblx0fVxyXG5cclxuXHRnZXQgdGFyZ2V0KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3RhcmdldDtcclxuXHR9XHJcblxyXG5cdHNldCB0YXJnZXQodmFsdWUpIHtcclxuXHRcdHRoaXMudGFyZ2V0RGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5fdGFyZ2V0ID0gdmFsdWU7XHJcblx0fVxyXG5cclxuXHRnZXQgY29sb3IoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fY29sb3I7XHJcblx0fVxyXG5cclxuXHRzZXQgY29sb3IodmFsdWUpIHtcclxuXHRcdHRoaXMuY29sb3JEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLl9jb2xvciA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IGludGVuc2l0eSh2YWx1ZSkge1xyXG5cdFx0dGhpcy5jb2xvciA9IFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcih0aGlzLmNvbG9yLCB2YWx1ZSwgbmV3IFZlY3RvcjMoKSk7XHJcblx0XHR0aGlzLmludGVuc2l0eURpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuX2ludGVuc2l0eSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IGludGVuc2l0eSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9pbnRlbnNpdHk7XHJcblx0fVxyXG5cclxuXHRnZXQgc2hhZG93KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NoYWRvdztcclxuXHR9XHJcblxyXG5cdHNldCBzaGFkb3codmFsdWUpIHtcclxuXHRcdHRoaXMuc2hhZG93RGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5fc2hhZG93ID0gdmFsdWU7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuaW1wb3J0IFZlY3RvcjQgZnJvbSBcIi4uL21hdGgvVmVjdG9yNFwiO1xyXG5pbXBvcnQgeyBMaWdodCB9IGZyb20gXCIuL0xpZ2h0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQW1iaWVudExpZ2h0IGV4dGVuZHMgTGlnaHQge1xyXG5cdHByaXZhdGUgX2NvbG9yQW5kSW50ZW5zaXR5OiBWZWN0b3I0O1xyXG5cdGNvbnN0cnVjdG9yKGNvbG9yOiBWZWN0b3IzLCBpbnRlbnNpdHk6IG51bWJlcikge1xyXG5cdFx0c3VwZXIoY29sb3IsIGludGVuc2l0eSk7XHJcblx0XHR0aGlzLnR5cGUgPSBcImFtYmllbnRcIjtcclxuXHRcdHRoaXMuX2NvbG9yQW5kSW50ZW5zaXR5ID0gbmV3IFZlY3RvcjQoY29sb3IueCwgY29sb3IueSwgY29sb3IueiwgaW50ZW5zaXR5KTtcclxuXHR9XHJcblx0Z2V0IENvbG9yQW5kSW50ZW5zaXR5KCkge1xyXG5cdFx0dGhpcy5fY29sb3JBbmRJbnRlbnNpdHkuc2V0KHRoaXMuY29sb3IueCwgdGhpcy5jb2xvci55LCB0aGlzLmNvbG9yLnosIHRoaXMuaW50ZW5zaXR5KTtcclxuXHRcdHJldHVybiB0aGlzLl9jb2xvckFuZEludGVuc2l0eTtcclxuXHR9XHJcbn1cclxuLy9saWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKiBzY2FsZUZhY3RvciApO1xyXG4iLCJpbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi91dGlscy9kZWZpbmVkXCI7XG5pbXBvcnQgR01hdGggZnJvbSBcIi4vTWF0aFwiO1xuLy8jcmdiYVxuY29uc3QgcmdiYU1hdGNoZXIgPSAvXiMoWzAtOWEtZl0pKFswLTlhLWZdKShbMC05YS1mXSkoWzAtOWEtZl0pPyQvaTtcbi8vI3JyZ2diYmFhXG5jb25zdCBycmdnYmJhYU1hdGNoZXIgPSAvXiMoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSkoWzAtOWEtZl17Mn0pPyQvaTtcbi8vcmdiKCksIHJnYmEoKSwgb3IgcmdiJSgpXG5jb25zdCByZ2JQYXJlbnRoZXNlc01hdGNoZXIgPSAvXnJnYmE/XFwoXFxzKihbMC05Ll0rJT8pXFxzKixcXHMqKFswLTkuXSslPylcXHMqLFxccyooWzAtOS5dKyU/KSg/OlxccyosXFxzKihbMC05Ll0rKSk/XFxzKlxcKSQvaTtcbi8vaHNsKCkgb3IgaHNsYSgpXG5jb25zdCBoc2xQYXJlbnRoZXNlc01hdGNoZXIgPSAvXmhzbGE/XFwoXFxzKihbMC05Ll0rKVxccyosXFxzKihbMC05Ll0rJSlcXHMqLFxccyooWzAtOS5dKyUpKD86XFxzKixcXHMqKFswLTkuXSspKT9cXHMqXFwpJC9pO1xuZnVuY3Rpb24gaHVlMnJnYihtMSwgbTIsIGgpIHtcblx0aWYgKGggPCAwKSB7XG5cdFx0aCArPSAxO1xuXHR9XG5cdGlmIChoID4gMSkge1xuXHRcdGggLT0gMTtcblx0fVxuXHRpZiAoaCAqIDYgPCAxKSB7XG5cdFx0cmV0dXJuIG0xICsgKG0yIC0gbTEpICogNiAqIGg7XG5cdH1cblx0aWYgKGggKiAyIDwgMSkge1xuXHRcdHJldHVybiBtMjtcblx0fVxuXHRpZiAoaCAqIDMgPCAyKSB7XG5cdFx0cmV0dXJuIG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2O1xuXHR9XG5cdHJldHVybiBtMTtcbn1cblxuY2xhc3MgQ29sb3Ige1xuXHRncmVlbjogbnVtYmVyO1xuXHRyZWQ6IG51bWJlcjtcblx0Ymx1ZTogbnVtYmVyO1xuXHRjb25zdHJ1Y3RvcihyZWQ6IG51bWJlciA9IDEuMCwgZ3JlZW46IG51bWJlciA9IDEuMCwgYmx1ZTogbnVtYmVyID0gMS4wKSB7XG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlZCBjb21wb25lbnQuXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxLjBcblx0XHQgKi9cblx0XHR0aGlzLnJlZCA9IHJlZDtcblx0XHQvKipcblx0XHQgKiBUaGUgZ3JlZW4gY29tcG9uZW50LlxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMS4wXG5cdFx0ICovXG5cdFx0dGhpcy5ncmVlbiA9IGdyZWVuO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBibHVlIGNvbXBvbmVudC5cblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDEuMFxuXHRcdCAqL1xuXHRcdHRoaXMuYmx1ZSA9IGJsdWU7XG5cdH1cblx0c2V0KHZhbHVlOiBzdHJpbmcpOiBDb2xvciB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0Q29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKHZhbHVlLCB0aGlzKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0dG9BcnJheSgpOiBudW1iZXJbXSB7XG5cdFx0cmV0dXJuIFt0aGlzLnJlZCwgdGhpcy5ncmVlbiwgdGhpcy5ibHVlXTtcblx0fVxuXG5cdGNsb25lKHJlc3VsdDogQ29sb3IpOiBDb2xvciB7XG5cdFx0cmV0dXJuIENvbG9yLmNsb25lKHRoaXMsIHJlc3VsdCk7XG5cdH1cblxuXHRlcXVhbHMob3RoZXI6IENvbG9yKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIENvbG9yLmVxdWFscyh0aGlzLCBvdGhlcik7XG5cdH1cblxuXHR0b0Nzc0hleFN0cmluZygpOiBzdHJpbmcge1xuXHRcdGxldCByID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5yZWQpLnRvU3RyaW5nKDE2KTtcblx0XHRpZiAoci5sZW5ndGggPCAyKSB7XG5cdFx0XHRyID0gYDAke3J9YDtcblx0XHR9XG5cdFx0bGV0IGcgPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLmdyZWVuKS50b1N0cmluZygxNik7XG5cdFx0aWYgKGcubGVuZ3RoIDwgMikge1xuXHRcdFx0ZyA9IGAwJHtnfWA7XG5cdFx0fVxuXHRcdGxldCBiID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ibHVlKS50b1N0cmluZygxNik7XG5cdFx0aWYgKGIubGVuZ3RoIDwgMikge1xuXHRcdFx0YiA9IGAwJHtifWA7XG5cdFx0fVxuXHRcdHJldHVybiBgIyR7cn0ke2d9JHtifWA7XG5cdH1cblxuXHR0b0J5dGVzKHJlc3VsdDogbnVtYmVyW10pOiBudW1iZXJbXSB7XG5cdFx0Y29uc3QgcmVkID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5yZWQpO1xuXHRcdGNvbnN0IGdyZWVuID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ncmVlbik7XG5cdFx0Y29uc3QgYmx1ZSA9IENvbG9yLmZsb2F0VG9CeXRlKHRoaXMuYmx1ZSk7XG5cblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIFtyZWQsIGdyZWVuLCBibHVlXTtcblx0XHR9XG5cdFx0cmVzdWx0WzBdID0gcmVkO1xuXHRcdHJlc3VsdFsxXSA9IGdyZWVuO1xuXHRcdHJlc3VsdFsyXSA9IGJsdWU7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBmcm9tQnl0ZXMocmVkOiBudW1iZXIsIGdyZWVuOiBudW1iZXIsIGJsdWU6IG51bWJlciwgcmVzdWx0OiBDb2xvcik6IENvbG9yIHtcblx0XHRyZWQgPSBDb2xvci5ieXRlVG9GbG9hdChkZWZhdWx0VmFsdWUocmVkLCAyNTUuMCkpO1xuXHRcdGdyZWVuID0gQ29sb3IuYnl0ZVRvRmxvYXQoZGVmYXVsdFZhbHVlKGdyZWVuLCAyNTUuMCkpO1xuXHRcdGJsdWUgPSBDb2xvci5ieXRlVG9GbG9hdChkZWZhdWx0VmFsdWUoYmx1ZSwgMjU1LjApKTtcblxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKHJlZCwgZ3JlZW4sIGJsdWUpO1xuXHRcdH1cblxuXHRcdHJlc3VsdC5yZWQgPSByZWQ7XG5cdFx0cmVzdWx0LmdyZWVuID0gZ3JlZW47XG5cdFx0cmVzdWx0LmJsdWUgPSBibHVlO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgZnJvbUhzbChodWU6IG51bWJlciwgc2F0dXJhdGlvbjogbnVtYmVyLCBsaWdodG5lc3M6IG51bWJlciwgcmVzdWx0OiBDb2xvcik6IENvbG9yIHtcblx0XHRodWUgPSBkZWZhdWx0VmFsdWUoaHVlLCAwLjApICUgMS4wO1xuXHRcdHNhdHVyYXRpb24gPSBkZWZhdWx0VmFsdWUoc2F0dXJhdGlvbiwgMC4wKTtcblx0XHRsaWdodG5lc3MgPSBkZWZhdWx0VmFsdWUobGlnaHRuZXNzLCAwLjApO1xuXHRcdGxldCByZWQgPSBsaWdodG5lc3M7XG5cdFx0bGV0IGdyZWVuID0gbGlnaHRuZXNzO1xuXHRcdGxldCBibHVlID0gbGlnaHRuZXNzO1xuXG5cdFx0aWYgKHNhdHVyYXRpb24gIT09IDApIHtcblx0XHRcdGxldCBtMjtcblx0XHRcdGlmIChsaWdodG5lc3MgPCAwLjUpIHtcblx0XHRcdFx0bTIgPSBsaWdodG5lc3MgKiAoMSArIHNhdHVyYXRpb24pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bTIgPSBsaWdodG5lc3MgKyBzYXR1cmF0aW9uIC0gbGlnaHRuZXNzICogc2F0dXJhdGlvbjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbTEgPSAyLjAgKiBsaWdodG5lc3MgLSBtMjtcblx0XHRcdHJlZCA9IGh1ZTJyZ2IobTEsIG0yLCBodWUgKyAxIC8gMyk7XG5cdFx0XHRncmVlbiA9IGh1ZTJyZ2IobTEsIG0yLCBodWUpO1xuXHRcdFx0Ymx1ZSA9IGh1ZTJyZ2IobTEsIG0yLCBodWUgLSAxIC8gMyk7XG5cdFx0fVxuXG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcblx0XHRcdHJldHVybiBuZXcgQ29sb3IocmVkLCBncmVlbiwgYmx1ZSk7XG5cdFx0fVxuXG5cdFx0cmVzdWx0LnJlZCA9IHJlZDtcblx0XHRyZXN1bHQuZ3JlZW4gPSBncmVlbjtcblx0XHRyZXN1bHQuYmx1ZSA9IGJsdWU7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgcmFuZG9tIGNvbG9yIHVzaW5nIHRoZSBwcm92aWRlZCBvcHRpb25zLiBGb3IgcmVwcm9kdWNpYmxlIHJhbmRvbSBjb2xvcnMsIHlvdSBzaG91bGRcblx0ICogY2FsbCB7QGxpbmsgR01hdGgjc2V0UmFuZG9tTnVtYmVyU2VlZH0gb25jZSBhdCB0aGUgYmVnaW5uaW5nIG9mIHlvdXIgYXBwbGljYXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucmVkXSBJZiBzcGVjaWZpZWQsIHRoZSByZWQgY29tcG9uZW50IHRvIHVzZSBpbnN0ZWFkIG9mIGEgcmFuZG9taXplZCB2YWx1ZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1pbmltdW1SZWQ9MC4wXSBUaGUgbWF4aW11bSByZWQgdmFsdWUgdG8gZ2VuZXJhdGUgaWYgbm9uZSB3YXMgc3BlY2lmaWVkLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4aW11bVJlZD0xLjBdIFRoZSBtaW5pbXVtIHJlZCB2YWx1ZSB0byBnZW5lcmF0ZSBpZiBub25lIHdhcyBzcGVjaWZpZWQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5ncmVlbl0gSWYgc3BlY2lmaWVkLCB0aGUgZ3JlZW4gY29tcG9uZW50IHRvIHVzZSBpbnN0ZWFkIG9mIGEgcmFuZG9taXplZCB2YWx1ZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1pbmltdW1HcmVlbj0wLjBdIFRoZSBtYXhpbXVtIGdyZWVuIHZhbHVlIHRvIGdlbmVyYXRlIGlmIG5vbmUgd2FzIHNwZWNpZmllZC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1heGltdW1HcmVlbj0xLjBdIFRoZSBtaW5pbXVtIGdyZWVuIHZhbHVlIHRvIGdlbmVyYXRlIGlmIG5vbmUgd2FzIHNwZWNpZmllZC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmJsdWVdIElmIHNwZWNpZmllZCwgdGhlIGJsdWUgY29tcG9uZW50IHRvIHVzZSBpbnN0ZWFkIG9mIGEgcmFuZG9taXplZCB2YWx1ZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1pbmltdW1CbHVlPTAuMF0gVGhlIG1heGltdW0gYmx1ZSB2YWx1ZSB0byBnZW5lcmF0ZSBpZiBub25lIHdhcyBzcGVjaWZpZWQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhpbXVtQmx1ZT0xLjBdIFRoZSBtaW5pbXVtIGJsdWUgdmFsdWUgdG8gZ2VuZXJhdGUgaWYgbm9uZSB3YXMgc3BlY2lmaWVkLlxuXHQgKiBAcGFyYW0ge0NvbG9yfSBbcmVzdWx0XSBUaGUgb2JqZWN0IHRvIHN0b3JlIHRoZSByZXN1bHQgaW4sIGlmIHVuZGVmaW5lZCBhIG5ldyBpbnN0YW5jZSB3aWxsIGJlIGNyZWF0ZWQuXG5cdCAqIEByZXR1cm5zIHtDb2xvcn0gVGhlIG1vZGlmaWVkIHJlc3VsdCBwYXJhbWV0ZXIgb3IgYSBuZXcgaW5zdGFuY2UgaWYgcmVzdWx0IHdhcyB1bmRlZmluZWQuXG5cdCAqXG5cdCAqIEBleGFtcGxlXG5cdCAqIC8vQ3JlYXRlIGEgY29tcGxldGVseSByYW5kb20gY29sb3Jcblx0ICogY29uc3QgY29sb3IgPSBDb2xvci5mcm9tUmFuZG9tKCk7XG5cdCAqXG5cdCAqIC8vQ3JlYXRlIGEgcmFuZG9tIHNoYWRlIG9mIHllbGxvdy5cblx0ICogY29uc3QgY29sb3IxID0gQ29sb3IuZnJvbVJhbmRvbSh7XG5cdCAqICAgICByZWQgOiAxLjAsXG5cdCAqICAgICBncmVlbiA6IDEuMCxcblx0ICogfSk7XG5cdCAqXG5cdCAqIC8vQ3JlYXRlIGEgcmFuZG9tIGJyaWdodCBjb2xvci5cblx0ICogY29uc3QgY29sb3IyID0gQ29sb3IuZnJvbVJhbmRvbSh7XG5cdCAqICAgICBtaW5pbXVtUmVkIDogMC43NSxcblx0ICogICAgIG1pbmltdW1HcmVlbiA6IDAuNzUsXG5cdCAqICAgICBtaW5pbXVtQmx1ZSA6IDAuNzUsXG5cdCAqIH0pO1xuXHQgKi9cblx0c3RhdGljIGZyb21SYW5kb20ob3B0aW9ucywgcmVzdWx0OiBDb2xvcik6IENvbG9yIHtcblx0XHRvcHRpb25zID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMsIGRlZmF1bHRWYWx1ZS5FTVBUWV9PQkpFQ1QpO1xuXG5cdFx0bGV0IHJlZCA9IG9wdGlvbnMucmVkO1xuXHRcdGlmICghZGVmaW5lZChyZWQpKSB7XG5cdFx0XHRjb25zdCBtaW5pbXVtUmVkID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMubWluaW11bVJlZCwgMCk7XG5cdFx0XHRjb25zdCBtYXhpbXVtUmVkID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMubWF4aW11bVJlZCwgMS4wKTtcblxuXHRcdFx0cmVkID0gbWluaW11bVJlZCArIEdNYXRoLm5leHRSYW5kb21OdW1iZXIoKSAqIChtYXhpbXVtUmVkIC0gbWluaW11bVJlZCk7XG5cdFx0fVxuXG5cdFx0bGV0IGdyZWVuID0gb3B0aW9ucy5ncmVlbjtcblx0XHRpZiAoIWRlZmluZWQoZ3JlZW4pKSB7XG5cdFx0XHRjb25zdCBtaW5pbXVtR3JlZW4gPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5taW5pbXVtR3JlZW4sIDApO1xuXHRcdFx0Y29uc3QgbWF4aW11bUdyZWVuID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMubWF4aW11bUdyZWVuLCAxLjApO1xuXG5cdFx0XHRncmVlbiA9IG1pbmltdW1HcmVlbiArIEdNYXRoLm5leHRSYW5kb21OdW1iZXIoKSAqIChtYXhpbXVtR3JlZW4gLSBtaW5pbXVtR3JlZW4pO1xuXHRcdH1cblxuXHRcdGxldCBibHVlID0gb3B0aW9ucy5ibHVlO1xuXHRcdGlmICghZGVmaW5lZChibHVlKSkge1xuXHRcdFx0Y29uc3QgbWluaW11bUJsdWUgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5taW5pbXVtQmx1ZSwgMCk7XG5cdFx0XHRjb25zdCBtYXhpbXVtQmx1ZSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLm1heGltdW1CbHVlLCAxLjApO1xuXG5cdFx0XHRibHVlID0gbWluaW11bUJsdWUgKyBHTWF0aC5uZXh0UmFuZG9tTnVtYmVyKCkgKiAobWF4aW11bUJsdWUgLSBtaW5pbXVtQmx1ZSk7XG5cdFx0fVxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKHJlZCwgZ3JlZW4sIGJsdWUpO1xuXHRcdH1cblxuXHRcdHJlc3VsdC5yZWQgPSByZWQ7XG5cdFx0cmVzdWx0LmdyZWVuID0gZ3JlZW47XG5cdFx0cmVzdWx0LmJsdWUgPSBibHVlO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgZnJvbUNzc0NvbG9yU3RyaW5nKGNvbG9yOiBzdHJpbmcsIHJlc3VsdDogQ29sb3IgPSBuZXcgQ29sb3IoKSk6IENvbG9yIHtcblx0XHQvLyBSZW1vdmUgYWxsIHdoaXRlc3BhY2VzIGZyb20gdGhlIGNvbG9yIHN0cmluZ1xuXHRcdGNvbG9yID0gY29sb3IucmVwbGFjZSgvXFxzL2csIFwiXCIpO1xuXG5cdFx0Y29uc3QgbmFtZWRDb2xvciA9IENvbG9yW2NvbG9yLnRvVXBwZXJDYXNlKCldO1xuXHRcdGlmIChkZWZpbmVkKG5hbWVkQ29sb3IpKSB7XG5cdFx0XHRDb2xvci5jbG9uZShuYW1lZENvbG9yLCByZXN1bHQpO1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHRsZXQgbWF0Y2hlcyA9IHJnYmFNYXRjaGVyLmV4ZWMoY29sb3IpO1xuXHRcdGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG5cdFx0XHRyZXN1bHQucmVkID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTYpIC8gMTU7XG5cdFx0XHRyZXN1bHQuZ3JlZW4gPSBwYXJzZUludChtYXRjaGVzWzJdLCAxNikgLyAxNS4wO1xuXHRcdFx0cmVzdWx0LmJsdWUgPSBwYXJzZUludChtYXRjaGVzWzNdLCAxNikgLyAxNS4wO1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHRtYXRjaGVzID0gcnJnZ2JiYWFNYXRjaGVyLmV4ZWMoY29sb3IpO1xuXHRcdGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG5cdFx0XHRyZXN1bHQucmVkID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTYpIC8gMjU1LjA7XG5cdFx0XHRyZXN1bHQuZ3JlZW4gPSBwYXJzZUludChtYXRjaGVzWzJdLCAxNikgLyAyNTUuMDtcblx0XHRcdHJlc3VsdC5ibHVlID0gcGFyc2VJbnQobWF0Y2hlc1szXSwgMTYpIC8gMjU1LjA7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblxuXHRcdG1hdGNoZXMgPSByZ2JQYXJlbnRoZXNlc01hdGNoZXIuZXhlYyhjb2xvcik7XG5cdFx0aWYgKG1hdGNoZXMgIT09IG51bGwpIHtcblx0XHRcdHJlc3VsdC5yZWQgPSBwYXJzZUZsb2F0KG1hdGNoZXNbMV0pIC8gKFwiJVwiID09PSBtYXRjaGVzWzFdLnN1YnN0cigtMSkgPyAxMDAuMCA6IDI1NS4wKTtcblx0XHRcdHJlc3VsdC5ncmVlbiA9IHBhcnNlRmxvYXQobWF0Y2hlc1syXSkgLyAoXCIlXCIgPT09IG1hdGNoZXNbMl0uc3Vic3RyKC0xKSA/IDEwMC4wIDogMjU1LjApO1xuXHRcdFx0cmVzdWx0LmJsdWUgPSBwYXJzZUZsb2F0KG1hdGNoZXNbM10pIC8gKFwiJVwiID09PSBtYXRjaGVzWzNdLnN1YnN0cigtMSkgPyAxMDAuMCA6IDI1NS4wKTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlcyA9IGhzbFBhcmVudGhlc2VzTWF0Y2hlci5leGVjKGNvbG9yKTtcblx0XHRpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIENvbG9yLmZyb21Ic2woXG5cdFx0XHRcdHBhcnNlRmxvYXQobWF0Y2hlc1sxXSkgLyAzNjAuMCxcblx0XHRcdFx0cGFyc2VGbG9hdChtYXRjaGVzWzJdKSAvIDEwMC4wLFxuXHRcdFx0XHRwYXJzZUZsb2F0KG1hdGNoZXNbM10pIC8gMTAwLjAsXG5cdFx0XHRcdHJlc3VsdFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBieXRlVG9GbG9hdCh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdmFsdWUgLyAyNTUuMDtcblx0fVxuXG5cdHN0YXRpYyBmbG9hdFRvQnl0ZSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdmFsdWUgPT09IDEuMCA/IDI1NS4wIDogKHZhbHVlICogMjU2LjApIHwgMDtcblx0fVxuXG5cdHN0YXRpYyBjbG9uZShjb2xvcjogQ29sb3IsIHJlc3VsdDogQ29sb3IpOiBDb2xvciB7XG5cdFx0aWYgKCFkZWZpbmVkKGNvbG9yKSkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcblx0XHRcdHJldHVybiBuZXcgQ29sb3IoY29sb3IucmVkLCBjb2xvci5ncmVlbiwgY29sb3IuYmx1ZSk7XG5cdFx0fVxuXHRcdHJlc3VsdC5yZWQgPSBjb2xvci5yZWQ7XG5cdFx0cmVzdWx0LmdyZWVuID0gY29sb3IuZ3JlZW47XG5cdFx0cmVzdWx0LmJsdWUgPSBjb2xvci5ibHVlO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgZXF1YWxzKGxlZnQ6IENvbG9yLCByaWdodDogQ29sb3IpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0bGVmdCA9PT0gcmlnaHQgfHwgLy9cblx0XHRcdChkZWZpbmVkKGxlZnQpICYmIC8vXG5cdFx0XHRcdGRlZmluZWQocmlnaHQpICYmIC8vXG5cdFx0XHRcdGxlZnQucmVkID09PSByaWdodC5yZWQgJiYgLy9cblx0XHRcdFx0bGVmdC5ncmVlbiA9PT0gcmlnaHQuZ3JlZW4gJiYgLy9cblx0XHRcdFx0bGVmdC5ibHVlID09PSByaWdodC5ibHVlKVxuXHRcdCk7XG5cdH1cblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHN0YXRpYyBlcXVhbHNBcnJheShjb2xvcjogQ29sb3IsIGFycmF5OiBudW1iZXJbXSwgb2Zmc2V0OiBudW1iZXIpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gY29sb3IucmVkID09PSBhcnJheVtvZmZzZXRdICYmIGNvbG9yLmdyZWVuID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJiBjb2xvci5ibHVlID09PSBhcnJheVtvZmZzZXQgKyAyXTtcblx0fVxufVxuZXhwb3J0IGRlZmF1bHQgQ29sb3I7XG4iLCJpbXBvcnQgeyBBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vcmVuZGVyL0F0dHJpYnV0ZVwiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xuaW1wb3J0IEdNYXRoIGZyb20gXCIuL01hdGhcIjtcbmltcG9ydCBNYXRyaXgzIGZyb20gXCIuL01hdHJpeDNcIjtcbi8qKlxuICogQSAyRCBDYXJ0ZXNpYW4gcG9pbnQuXG4gKiBAYWxpYXMgVmVjdG9yMlxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IFt4PTAuMF0gVGhlIFggY29tcG9uZW50LlxuICogQHBhcmFtIHtOdW1iZXJ9IFt5PTAuMF0gVGhlIFkgY29tcG9uZW50LlxuICpcbiAqL1xuY2xhc3MgVmVjdG9yMiB7XG5cdHB1YmxpYyBzdGF0aWMgWkVSTyA9IE9iamVjdC5mcmVlemUobmV3IFZlY3RvcjIoMC4wLCAwLjApKTtcblxuXHRwdWJsaWMgc3RhdGljIE9ORSA9IE9iamVjdC5mcmVlemUobmV3IFZlY3RvcjIoMS4wLCAxLjApKTtcblxuXHRwdWJsaWMgc3RhdGljIFVOSVRfWCA9IE9iamVjdC5mcmVlemUobmV3IFZlY3RvcjIoMS4wLCAwLjApKTtcblxuXHRwdWJsaWMgc3RhdGljIFVOSVRfWSA9IE9iamVjdC5mcmVlemUobmV3IFZlY3RvcjIoMC4wLCAxLjApKTtcblxuXHRjb25zdHJ1Y3RvcihwdWJsaWMgeDogbnVtYmVyID0gMC4wLCBwdWJsaWMgeTogbnVtYmVyID0gMC4wKSB7XG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHR9XG5cdHNldCh4OiBudW1iZXIsIHk6IG51bWJlcik6IFZlY3RvcjIge1xuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHR0b0FycmF5KCkge1xuXHRcdHJldHVybiBbdGhpcy54LCB0aGlzLnldO1xuXHR9XG5cblx0Y2xvbmUocmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XG5cdFx0cmV0dXJuIFZlY3RvcjIuY2xvbmUodGhpcywgcmVzdWx0KTtcblx0fVxuXG5cdGVxdWFscyhyaWdodDogVmVjdG9yMik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBWZWN0b3IyLmVxdWFscyh0aGlzLCByaWdodCk7XG5cdH1cblx0ZXF1YWxzRXBzaWxvbihyaWdodDogVmVjdG9yMiwgcmVsYXRpdmVFcHNpbG9uOiBudW1iZXIgPSAwLCBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IDApOiBib29sZWFuIHtcblx0XHRyZXR1cm4gVmVjdG9yMi5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbik7XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gYCgke3RoaXMueH0sICR7dGhpcy55fSlgO1xuXHR9XG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoYXR0cmlidXRlOiBBdHRyaWJ1dGUsIGluZGV4OiBudW1iZXIpOiBWZWN0b3IyIHtcblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WChpbmRleCk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoaW5kZXgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdGFwcGx5TWF0cml4MyhtYXRyaXgzOiBNYXRyaXgzKTogVmVjdG9yMiB7XG5cdFx0Y29uc3QgeCA9IHRoaXMueCxcblx0XHRcdHkgPSB0aGlzLnk7XG5cdFx0dGhpcy54ID0gbWF0cml4M1swXSAqIHggKyBtYXRyaXgzWzNdICogeSArIG1hdHJpeDNbNl07XG5cdFx0dGhpcy55ID0gbWF0cml4M1sxXSAqIHggKyBtYXRyaXgzWzRdICogeSArIG1hdHJpeDNbN107XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRzdGF0aWMgZnJvbUVsZW1lbnRzKHg6IG51bWJlciwgeTogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IyKHgsIHkpO1xuXHRcdH1cblxuXHRcdHJlc3VsdC54ID0geDtcblx0XHRyZXN1bHQueSA9IHk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBjbG9uZShjYXJ0ZXNpYW46IFZlY3RvcjIsIHJlc3VsdDogVmVjdG9yMik6IFZlY3RvcjIge1xuXHRcdGlmICghZGVmaW5lZChjYXJ0ZXNpYW4pKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IyKGNhcnRlc2lhbi54LCBjYXJ0ZXNpYW4ueSk7XG5cdFx0fVxuXG5cdFx0cmVzdWx0LnggPSBjYXJ0ZXNpYW4ueDtcblx0XHRyZXN1bHQueSA9IGNhcnRlc2lhbi55O1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgbWF4aW11bUNvbXBvbmVudChjYXJ0ZXNpYW46IFZlY3RvcjIpOiBudW1iZXIge1xuXHRcdHJldHVybiBNYXRoLm1heChjYXJ0ZXNpYW4ueCwgY2FydGVzaWFuLnkpO1xuXHR9XG5cblx0c3RhdGljIG1pbmltdW1Db21wb25lbnQoY2FydGVzaWFuOiBWZWN0b3IyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gTWF0aC5taW4oY2FydGVzaWFuLngsIGNhcnRlc2lhbi55KTtcblx0fVxuXG5cdHN0YXRpYyBtaW5pbXVtQnlDb21wb25lbnQoZmlyc3Q6IFZlY3RvcjIsIHNlY29uZDogVmVjdG9yMiwgcmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XG5cdFx0cmVzdWx0LnggPSBNYXRoLm1pbihmaXJzdC54LCBzZWNvbmQueCk7XG5cdFx0cmVzdWx0LnkgPSBNYXRoLm1pbihmaXJzdC55LCBzZWNvbmQueSk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIG1heGltdW1CeUNvbXBvbmVudChmaXJzdDogVmVjdG9yMiwgc2Vjb25kOiBWZWN0b3IyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcblx0XHRyZXN1bHQueCA9IE1hdGgubWF4KGZpcnN0LngsIHNlY29uZC54KTtcblx0XHRyZXN1bHQueSA9IE1hdGgubWF4KGZpcnN0LnksIHNlY29uZC55KTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGNsYW1wKHZhbHVlOiBWZWN0b3IyLCBtaW46IFZlY3RvcjIsIG1heDogVmVjdG9yMiwgcmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XG5cdFx0Y29uc3QgeCA9IEdNYXRoLmNsYW1wKHZhbHVlLngsIG1pbi54LCBtYXgueCk7XG5cdFx0Y29uc3QgeSA9IEdNYXRoLmNsYW1wKHZhbHVlLnksIG1pbi55LCBtYXgueSk7XG5cblx0XHRyZXN1bHQueCA9IHg7XG5cdFx0cmVzdWx0LnkgPSB5O1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBtYWduaXR1ZGVTcXVhcmVkKGNhcnRlc2lhbjogVmVjdG9yMik6IG51bWJlciB7XG5cdFx0cmV0dXJuIGNhcnRlc2lhbi54ICogY2FydGVzaWFuLnggKyBjYXJ0ZXNpYW4ueSAqIGNhcnRlc2lhbi55O1xuXHR9XG5cblx0c3RhdGljIG1hZ25pdHVkZShjYXJ0ZXNpYW46IFZlY3RvcjIpOiBudW1iZXIge1xuXHRcdHJldHVybiBNYXRoLnNxcnQoVmVjdG9yMi5tYWduaXR1ZGVTcXVhcmVkKGNhcnRlc2lhbikpO1xuXHR9XG5cblx0c3RhdGljIGRpc3RhbmNlKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyKTogbnVtYmVyIHtcblx0XHRWZWN0b3IyLnN1YnRyYWN0KGxlZnQsIHJpZ2h0LCBkaXN0YW5jZVNjcmF0Y2gpO1xuXHRcdHJldHVybiBWZWN0b3IyLm1hZ25pdHVkZShkaXN0YW5jZVNjcmF0Y2gpO1xuXHR9XG5cblx0c3RhdGljIGRpc3RhbmNlU3F1YXJlZChsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMik6IG51bWJlciB7XG5cdFx0VmVjdG9yMi5zdWJ0cmFjdChsZWZ0LCByaWdodCwgZGlzdGFuY2VTY3JhdGNoKTtcblx0XHRyZXR1cm4gVmVjdG9yMi5tYWduaXR1ZGVTcXVhcmVkKGRpc3RhbmNlU2NyYXRjaCk7XG5cdH1cblxuXHRzdGF0aWMgbm9ybWFsaXplKGNhcnRlc2lhbjogVmVjdG9yMiwgcmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XG5cdFx0Y29uc3QgbWFnbml0dWRlID0gVmVjdG9yMi5tYWduaXR1ZGUoY2FydGVzaWFuKTtcblxuXHRcdHJlc3VsdC54ID0gY2FydGVzaWFuLnggLyBtYWduaXR1ZGU7XG5cdFx0cmVzdWx0LnkgPSBjYXJ0ZXNpYW4ueSAvIG1hZ25pdHVkZTtcblxuXHRcdC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XG5cdFx0aWYgKGlzTmFOKHJlc3VsdC54KSB8fCBpc05hTihyZXN1bHQueSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIm5vcm1hbGl6ZWQgcmVzdWx0IGlzIG5vdCBhIG51bWJlclwiKTtcblx0XHR9XG5cdFx0Ly8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGRvdChsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMik6IG51bWJlciB7XG5cdFx0cmV0dXJuIGxlZnQueCAqIHJpZ2h0LnggKyBsZWZ0LnkgKiByaWdodC55O1xuXHR9XG5cblx0c3RhdGljIGNyb3NzKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gbGVmdC54ICogcmlnaHQueSAtIGxlZnQueSAqIHJpZ2h0Lng7XG5cdH1cblxuXHRzdGF0aWMgbXVsdGlwbHlDb21wb25lbnRzKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcblx0XHRyZXN1bHQueCA9IGxlZnQueCAqIHJpZ2h0Lng7XG5cdFx0cmVzdWx0LnkgPSBsZWZ0LnkgKiByaWdodC55O1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgZGl2aWRlQ29tcG9uZW50cyhsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgcmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XG5cdFx0cmVzdWx0LnggPSBsZWZ0LnggLyByaWdodC54O1xuXHRcdHJlc3VsdC55ID0gbGVmdC55IC8gcmlnaHQueTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGFkZChsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMiwgcmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XG5cdFx0cmVzdWx0LnggPSBsZWZ0LnggKyByaWdodC54O1xuXHRcdHJlc3VsdC55ID0gbGVmdC55ICsgcmlnaHQueTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIHN1YnRyYWN0KGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcblx0XHRyZXN1bHQueCA9IGxlZnQueCAtIHJpZ2h0Lng7XG5cdFx0cmVzdWx0LnkgPSBsZWZ0LnkgLSByaWdodC55O1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgbXVsdGlwbHlCeVNjYWxhcihjYXJ0ZXNpYW46IFZlY3RvcjIsIHNjYWxhcjogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcblx0XHRyZXN1bHQueCA9IGNhcnRlc2lhbi54ICogc2NhbGFyO1xuXHRcdHJlc3VsdC55ID0gY2FydGVzaWFuLnkgKiBzY2FsYXI7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBkaXZpZGVCeVNjYWxhcihjYXJ0ZXNpYW46IFZlY3RvcjIsIHNjYWxhcjogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcblx0XHRyZXN1bHQueCA9IGNhcnRlc2lhbi54IC8gc2NhbGFyO1xuXHRcdHJlc3VsdC55ID0gY2FydGVzaWFuLnkgLyBzY2FsYXI7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBuZWdhdGUoY2FydGVzaWFuOiBWZWN0b3IyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcblx0XHRyZXN1bHQueCA9IC1jYXJ0ZXNpYW4ueDtcblx0XHRyZXN1bHQueSA9IC1jYXJ0ZXNpYW4ueTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGFicyhjYXJ0ZXNpYW46IFZlY3RvcjIsIHJlc3VsdDogVmVjdG9yMik6IFZlY3RvcjIge1xuXHRcdHJlc3VsdC54ID0gTWF0aC5hYnMoY2FydGVzaWFuLngpO1xuXHRcdHJlc3VsdC55ID0gTWF0aC5hYnMoY2FydGVzaWFuLnkpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgbGVycChzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyLCB0OiBudW1iZXIsIHJlc3VsdDogVmVjdG9yMik6IFZlY3RvcjIge1xuXHRcdFZlY3RvcjIubXVsdGlwbHlCeVNjYWxhcihlbmQsIHQsIGxlcnBTY3JhdGNoKTtcblx0XHRyZXN1bHQgPSBWZWN0b3IyLm11bHRpcGx5QnlTY2FsYXIoc3RhcnQsIDEuMCAtIHQsIHJlc3VsdCk7XG5cdFx0cmV0dXJuIFZlY3RvcjIuYWRkKGxlcnBTY3JhdGNoLCByZXN1bHQsIHJlc3VsdCk7XG5cdH1cblxuXHRzdGF0aWMgYW5nbGVCZXR3ZWVuKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyKTogbnVtYmVyIHtcblx0XHRWZWN0b3IyLm5vcm1hbGl6ZShsZWZ0LCBhbmdsZUJldHdlZW5TY3JhdGNoKTtcblx0XHRWZWN0b3IyLm5vcm1hbGl6ZShyaWdodCwgYW5nbGVCZXR3ZWVuU2NyYXRjaDIpO1xuXHRcdHJldHVybiBHTWF0aC5hY29zQ2xhbXBlZChWZWN0b3IyLmRvdChhbmdsZUJldHdlZW5TY3JhdGNoLCBhbmdsZUJldHdlZW5TY3JhdGNoMikpO1xuXHR9XG5cblx0c3RhdGljIG1vc3RPcnRob2dvbmFsQXhpcyhjYXJ0ZXNpYW46IFZlY3RvcjIsIHJlc3VsdDogVmVjdG9yMik6IFZlY3RvcjIge1xuXHRcdGNvbnN0IGYgPSBWZWN0b3IyLm5vcm1hbGl6ZShjYXJ0ZXNpYW4sIG1vc3RPcnRob2dvbmFsQXhpc1NjcmF0Y2gpO1xuXHRcdFZlY3RvcjIuYWJzKGYsIGYpO1xuXG5cdFx0aWYgKGYueCA8PSBmLnkpIHtcblx0XHRcdHJlc3VsdCA9IFZlY3RvcjIuY2xvbmUoVmVjdG9yMi5VTklUX1gsIHJlc3VsdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFZlY3RvcjIuY2xvbmUoVmVjdG9yMi5VTklUX1ksIHJlc3VsdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBlcXVhbHMobGVmdDogVmVjdG9yMiwgcmlnaHQ6IFZlY3RvcjIpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgKGRlZmluZWQobGVmdCkgJiYgZGVmaW5lZChyaWdodCkgJiYgbGVmdC54ID09PSByaWdodC54ICYmIGxlZnQueSA9PT0gcmlnaHQueSk7XG5cdH1cblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHN0YXRpYyBlcXVhbHNBcnJheShjYXJ0ZXNpYW46IFZlY3RvcjIsIGFycmF5OiBudW1iZXJbXSwgb2Zmc2V0OiBudW1iZXIpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gY2FydGVzaWFuLnggPT09IGFycmF5W29mZnNldF0gJiYgY2FydGVzaWFuLnkgPT09IGFycmF5W29mZnNldCArIDFdO1xuXHR9XG5cblx0c3RhdGljIGVxdWFsc0Vwc2lsb24oXG5cdFx0bGVmdDogVmVjdG9yMixcblx0XHRyaWdodDogVmVjdG9yMixcblx0XHRyZWxhdGl2ZUVwc2lsb246IG51bWJlciA9IDAsXG5cdFx0YWJzb2x1dGVFcHNpbG9uOiBudW1iZXIgPSAwXG5cdCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHRsZWZ0ID09PSByaWdodCB8fFxuXHRcdFx0KGRlZmluZWQobGVmdCkgJiZcblx0XHRcdFx0ZGVmaW5lZChyaWdodCkgJiZcblx0XHRcdFx0R01hdGguZXF1YWxzRXBzaWxvbihsZWZ0LngsIHJpZ2h0LngsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKSAmJlxuXHRcdFx0XHRHTWF0aC5lcXVhbHNFcHNpbG9uKGxlZnQueSwgcmlnaHQueSwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pKVxuXHRcdCk7XG5cdH1cbn1cbmNvbnN0IGRpc3RhbmNlU2NyYXRjaCA9IG5ldyBWZWN0b3IyKCk7XG5jb25zdCBsZXJwU2NyYXRjaCA9IG5ldyBWZWN0b3IyKCk7XG5jb25zdCBhbmdsZUJldHdlZW5TY3JhdGNoID0gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IGFuZ2xlQmV0d2VlblNjcmF0Y2gyID0gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IG1vc3RPcnRob2dvbmFsQXhpc1NjcmF0Y2ggPSBuZXcgVmVjdG9yMigpO1xuXG5leHBvcnQgZGVmYXVsdCBWZWN0b3IyO1xuIiwiaW1wb3J0IFZlY3RvcjIgZnJvbSBcIi4vVmVjdG9yMlwiO1xyXG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcclxuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcclxuXHJcbi8qKlxyXG4gKiBBIDJ4MiBtYXRyaXgsIGluZGV4YWJsZSBhcyBhIGNvbHVtbi1tYWpvciBvcmRlciBhcnJheS5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4wUm93MD0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDAsIHJvdyAwLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjFSb3cwPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMSwgcm93IDAuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMFJvdzE9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAwLCByb3cgMS5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4xUm93MT0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDEsIHJvdyAxLlxyXG4gKi9cclxuY2xhc3MgTWF0cml4MiB7XHJcblx0Y29uc3RydWN0b3IoY29sdW1uMFJvdzAgPSAwLCBjb2x1bW4xUm93MCA9IDAsIGNvbHVtbjBSb3cxID0gMCwgY29sdW1uMVJvdzEgPSAwKSB7XHJcblx0XHR0aGlzWzBdID0gY29sdW1uMFJvdzA7XHJcblx0XHR0aGlzWzFdID0gY29sdW1uMFJvdzE7XHJcblx0XHR0aGlzWzJdID0gY29sdW1uMVJvdzA7XHJcblx0XHR0aGlzWzNdID0gY29sdW1uMVJvdzE7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY2xvbmUobWF0cml4OiBNYXRyaXgyIHwgbnVtYmVyW10sIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xyXG5cdFx0aWYgKCFkZWZpbmVkKG1hdHJpeCkpIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcblx0XHRcdHJldHVybiBuZXcgTWF0cml4MihtYXRyaXhbMF0sIG1hdHJpeFsyXSwgbWF0cml4WzFdLCBtYXRyaXhbM10pO1xyXG5cdFx0fVxyXG5cdFx0cmVzdWx0WzBdID0gbWF0cml4WzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdO1xyXG5cdFx0cmVzdWx0WzJdID0gbWF0cml4WzJdO1xyXG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tQ29sdW1uTWFqb3JBcnJheSh2YWx1ZXM6IG51bWJlcltdLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcclxuXHRcdHJldHVybiBNYXRyaXgyLmNsb25lKHZhbHVlcywgcmVzdWx0KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tUm93TWFqb3JBcnJheSh2YWx1ZXM6IG51bWJlciwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XHJcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IE1hdHJpeDIodmFsdWVzWzBdLCB2YWx1ZXNbMV0sIHZhbHVlc1syXSwgdmFsdWVzWzNdKTtcclxuXHRcdH1cclxuXHRcdHJlc3VsdFswXSA9IHZhbHVlc1swXTtcclxuXHRcdHJlc3VsdFsxXSA9IHZhbHVlc1syXTtcclxuXHRcdHJlc3VsdFsyXSA9IHZhbHVlc1sxXTtcclxuXHRcdHJlc3VsdFszXSA9IHZhbHVlc1szXTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbVNjYWxlKHNjYWxlOiBWZWN0b3IyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcclxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcblx0XHRcdHJldHVybiBuZXcgTWF0cml4MihzY2FsZS54LCAwLjAsIDAuMCwgc2NhbGUueSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gc2NhbGUueDtcclxuXHRcdHJlc3VsdFsxXSA9IDAuMDtcclxuXHRcdHJlc3VsdFsyXSA9IDAuMDtcclxuXHRcdHJlc3VsdFszXSA9IHNjYWxlLnk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21Sb3RhdGlvbihhbmdsZTogbnVtYmVyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcclxuXHRcdGNvbnN0IGNvc0FuZ2xlID0gTWF0aC5jb3MoYW5nbGUpO1xyXG5cdFx0Y29uc3Qgc2luQW5nbGUgPSBNYXRoLnNpbihhbmdsZSk7XHJcblxyXG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBNYXRyaXgyKGNvc0FuZ2xlLCAtc2luQW5nbGUsIHNpbkFuZ2xlLCBjb3NBbmdsZSk7XHJcblx0XHR9XHJcblx0XHRyZXN1bHRbMF0gPSBjb3NBbmdsZTtcclxuXHRcdHJlc3VsdFsxXSA9IHNpbkFuZ2xlO1xyXG5cdFx0cmVzdWx0WzJdID0gLXNpbkFuZ2xlO1xyXG5cdFx0cmVzdWx0WzNdID0gY29zQW5nbGU7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHR0b0FycmF5KCkge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gW107XHJcblx0XHRNYXRyaXgyLnRvQXJyYXkodGhpcywgcmVzdWx0KTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgdG9BcnJheShtYXRyaXg6IE1hdHJpeDIsIHJlc3VsdDogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0XHRyZXR1cm4gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbMl0sIG1hdHJpeFszXV07XHJcblx0XHR9XHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF07XHJcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbMV07XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl07XHJcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbM107XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldEVsZW1lbnRJbmRleChjb2x1bW46IG51bWJlciwgcm93OiBudW1iZXIpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIGNvbHVtbiAqIDIgKyByb3c7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0Q29sdW1uKG1hdHJpeDogTWF0cml4MiwgaW5kZXg6IG51bWJlciwgcmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcblx0XHRjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiAyO1xyXG5cdFx0Y29uc3QgeCA9IG1hdHJpeFtzdGFydEluZGV4XTtcclxuXHRcdGNvbnN0IHkgPSBtYXRyaXhbc3RhcnRJbmRleCArIDFdO1xyXG5cclxuXHRcdHJlc3VsdC54ID0geDtcclxuXHRcdHJlc3VsdC55ID0geTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc2V0Q29sdW1uKG1hdHJpeDogTWF0cml4MiwgaW5kZXg6IG51bWJlciwgY2FydGVzaWFuOiBWZWN0b3IyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcclxuXHRcdHJlc3VsdCA9IE1hdHJpeDIuY2xvbmUobWF0cml4LCByZXN1bHQpO1xyXG5cdFx0Y29uc3Qgc3RhcnRJbmRleCA9IGluZGV4ICogMjtcclxuXHRcdHJlc3VsdFtzdGFydEluZGV4XSA9IGNhcnRlc2lhbi54O1xyXG5cdFx0cmVzdWx0W3N0YXJ0SW5kZXggKyAxXSA9IGNhcnRlc2lhbi55O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRSb3cobWF0cml4OiBNYXRyaXgyLCBpbmRleDogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcclxuXHRcdGNvbnN0IHggPSBtYXRyaXhbaW5kZXhdO1xyXG5cdFx0Y29uc3QgeSA9IG1hdHJpeFtpbmRleCArIDJdO1xyXG5cclxuXHRcdHJlc3VsdC54ID0geDtcclxuXHRcdHJlc3VsdC55ID0geTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc2V0Um93KG1hdHJpeDogTWF0cml4MiwgaW5kZXg6IG51bWJlciwgY2FydGVzaWFuOiBWZWN0b3IyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcclxuXHRcdHJlc3VsdCA9IE1hdHJpeDIuY2xvbmUobWF0cml4LCByZXN1bHQpO1xyXG5cdFx0cmVzdWx0W2luZGV4XSA9IGNhcnRlc2lhbi54O1xyXG5cdFx0cmVzdWx0W2luZGV4ICsgMl0gPSBjYXJ0ZXNpYW4ueTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc2V0U2NhbGUobWF0cml4OiBNYXRyaXgyLCBzY2FsZTogVmVjdG9yMiwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XHJcblx0XHRjb25zdCBleGlzdGluZ1NjYWxlID0gTWF0cml4Mi5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDEpO1xyXG5cdFx0Y29uc3Qgc2NhbGVSYXRpb1ggPSBzY2FsZS54IC8gZXhpc3RpbmdTY2FsZS54O1xyXG5cdFx0Y29uc3Qgc2NhbGVSYXRpb1kgPSBzY2FsZS55IC8gZXhpc3RpbmdTY2FsZS55O1xyXG5cclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlUmF0aW9YO1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGVSYXRpb1g7XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZVJhdGlvWTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxlUmF0aW9ZO1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0U2NhbGUobWF0cml4OiBNYXRyaXgyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcclxuXHRcdHJlc3VsdC54ID0gVmVjdG9yMi5tYWduaXR1ZGUoVmVjdG9yMi5mcm9tRWxlbWVudHMobWF0cml4WzBdLCBtYXRyaXhbMV0sIHNjcmF0Y2hDb2x1bW4pKTtcclxuXHRcdHJlc3VsdC55ID0gVmVjdG9yMi5tYWduaXR1ZGUoVmVjdG9yMi5mcm9tRWxlbWVudHMobWF0cml4WzJdLCBtYXRyaXhbM10sIHNjcmF0Y2hDb2x1bW4pKTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0TWF4aW11bVNjYWxlKG1hdHJpeDogTWF0cml4Mik6IG51bWJlciB7XHJcblx0XHRNYXRyaXgyLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoMyk7XHJcblx0XHRyZXR1cm4gVmVjdG9yMi5tYXhpbXVtQ29tcG9uZW50KHNjYWxlU2NyYXRjaDMpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHNldFJvdGF0aW9uKG1hdHJpeDogTWF0cml4Miwgcm90YXRpb246IE1hdHJpeDIsIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xyXG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRyaXgyLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoNCk7XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gcm90YXRpb25bMF0gKiBzY2FsZS54O1xyXG5cdFx0cmVzdWx0WzFdID0gcm90YXRpb25bMV0gKiBzY2FsZS54O1xyXG5cdFx0cmVzdWx0WzJdID0gcm90YXRpb25bMl0gKiBzY2FsZS55O1xyXG5cdFx0cmVzdWx0WzNdID0gcm90YXRpb25bM10gKiBzY2FsZS55O1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0Um90YXRpb24obWF0cml4OiBNYXRyaXgyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcclxuXHRcdGNvbnN0IHNjYWxlID0gTWF0cml4Mi5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDUpO1xyXG5cclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXSAvIHNjYWxlLng7XHJcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbMV0gLyBzY2FsZS54O1xyXG5cdFx0cmVzdWx0WzJdID0gbWF0cml4WzJdIC8gc2NhbGUueTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXSAvIHNjYWxlLnk7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtdWx0aXBseShsZWZ0OiBNYXRyaXgyLCByaWdodDogTWF0cml4MiwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XHJcblx0XHRjb25zdCBjb2x1bW4wUm93MCA9IGxlZnRbMF0gKiByaWdodFswXSArIGxlZnRbMl0gKiByaWdodFsxXTtcclxuXHRcdGNvbnN0IGNvbHVtbjFSb3cwID0gbGVmdFswXSAqIHJpZ2h0WzJdICsgbGVmdFsyXSAqIHJpZ2h0WzNdO1xyXG5cdFx0Y29uc3QgY29sdW1uMFJvdzEgPSBsZWZ0WzFdICogcmlnaHRbMF0gKyBsZWZ0WzNdICogcmlnaHRbMV07XHJcblx0XHRjb25zdCBjb2x1bW4xUm93MSA9IGxlZnRbMV0gKiByaWdodFsyXSArIGxlZnRbM10gKiByaWdodFszXTtcclxuXHJcblx0XHRyZXN1bHRbMF0gPSBjb2x1bW4wUm93MDtcclxuXHRcdHJlc3VsdFsxXSA9IGNvbHVtbjBSb3cxO1xyXG5cdFx0cmVzdWx0WzJdID0gY29sdW1uMVJvdzA7XHJcblx0XHRyZXN1bHRbM10gPSBjb2x1bW4xUm93MTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkKGxlZnQ6IE1hdHJpeDIsIHJpZ2h0OiBNYXRyaXgyLCByZXN1bHQ6IE1hdHJpeDIpIHtcclxuXHRcdHJlc3VsdFswXSA9IGxlZnRbMF0gKyByaWdodFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IGxlZnRbMV0gKyByaWdodFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IGxlZnRbMl0gKyByaWdodFsyXTtcclxuXHRcdHJlc3VsdFszXSA9IGxlZnRbM10gKyByaWdodFszXTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc3VidHJhY3QobGVmdDogTWF0cml4MiwgcmlnaHQ6IE1hdHJpeDIsIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xyXG5cdFx0cmVzdWx0WzBdID0gbGVmdFswXSAtIHJpZ2h0WzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gbGVmdFsxXSAtIHJpZ2h0WzFdO1xyXG5cdFx0cmVzdWx0WzJdID0gbGVmdFsyXSAtIHJpZ2h0WzJdO1xyXG5cdFx0cmVzdWx0WzNdID0gbGVmdFszXSAtIHJpZ2h0WzNdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtdWx0aXBseUJ5VmVjdG9yKG1hdHJpeDogTWF0cml4MiwgY2FydGVzaWFuOiBWZWN0b3IyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcclxuXHRcdGNvbnN0IHggPSBtYXRyaXhbMF0gKiBjYXJ0ZXNpYW4ueCArIG1hdHJpeFsyXSAqIGNhcnRlc2lhbi55O1xyXG5cdFx0Y29uc3QgeSA9IG1hdHJpeFsxXSAqIGNhcnRlc2lhbi54ICsgbWF0cml4WzNdICogY2FydGVzaWFuLnk7XHJcblxyXG5cdFx0cmVzdWx0LnggPSB4O1xyXG5cdFx0cmVzdWx0LnkgPSB5O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtdWx0aXBseUJ5U2NhbGFyKG1hdHJpeDogTWF0cml4Miwgc2NhbGFyOiBudW1iZXIsIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xyXG5cdFx0cmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGFyO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtdWx0aXBseUJ5U2NhbGUobWF0cml4OiBNYXRyaXgyLCBzY2FsZTogVmVjdG9yMiwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZS54O1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGUueDtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlLnk7XHJcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsZS55O1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbmVnYXRlKG1hdHJpeDogTWF0cml4MiwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XHJcblx0XHRyZXN1bHRbMF0gPSAtbWF0cml4WzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gLW1hdHJpeFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IC1tYXRyaXhbMl07XHJcblx0XHRyZXN1bHRbM10gPSAtbWF0cml4WzNdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyB0cmFuc3Bvc2UobWF0cml4OiBNYXRyaXgyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcclxuXHRcdGNvbnN0IGNvbHVtbjBSb3cwID0gbWF0cml4WzBdO1xyXG5cdFx0Y29uc3QgY29sdW1uMFJvdzEgPSBtYXRyaXhbMl07XHJcblx0XHRjb25zdCBjb2x1bW4xUm93MCA9IG1hdHJpeFsxXTtcclxuXHRcdGNvbnN0IGNvbHVtbjFSb3cxID0gbWF0cml4WzNdO1xyXG5cclxuXHRcdHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwO1xyXG5cdFx0cmVzdWx0WzFdID0gY29sdW1uMFJvdzE7XHJcblx0XHRyZXN1bHRbMl0gPSBjb2x1bW4xUm93MDtcclxuXHRcdHJlc3VsdFszXSA9IGNvbHVtbjFSb3cxO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBhYnMobWF0cml4OiBNYXRyaXgyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcclxuXHRcdHJlc3VsdFswXSA9IE1hdGguYWJzKG1hdHJpeFswXSk7XHJcblx0XHRyZXN1bHRbMV0gPSBNYXRoLmFicyhtYXRyaXhbMV0pO1xyXG5cdFx0cmVzdWx0WzJdID0gTWF0aC5hYnMobWF0cml4WzJdKTtcclxuXHRcdHJlc3VsdFszXSA9IE1hdGguYWJzKG1hdHJpeFszXSk7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBlcXVhbHMobGVmdDogTWF0cml4MiwgcmlnaHQ6IE1hdHJpeDIpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdGxlZnQgPT09IHJpZ2h0IHx8XHJcblx0XHRcdChkZWZpbmVkKGxlZnQpICYmXHJcblx0XHRcdFx0ZGVmaW5lZChyaWdodCkgJiZcclxuXHRcdFx0XHRsZWZ0WzBdID09PSByaWdodFswXSAmJlxyXG5cdFx0XHRcdGxlZnRbMV0gPT09IHJpZ2h0WzFdICYmXHJcblx0XHRcdFx0bGVmdFsyXSA9PT0gcmlnaHRbMl0gJiZcclxuXHRcdFx0XHRsZWZ0WzNdID09PSByaWdodFszXSlcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAcHJpdmF0ZVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBlcXVhbHNBcnJheShtYXRyaXg6IE1hdHJpeDIsIGFycmF5OiBudW1iZXJbXSwgb2Zmc2V0OiBudW1iZXIpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdG1hdHJpeFswXSA9PT0gYXJyYXlbb2Zmc2V0XSAmJlxyXG5cdFx0XHRtYXRyaXhbMV0gPT09IGFycmF5W29mZnNldCArIDFdICYmXHJcblx0XHRcdG1hdHJpeFsyXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMl0gJiZcclxuXHRcdFx0bWF0cml4WzNdID09PSBhcnJheVtvZmZzZXQgKyAzXVxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBlcXVhbHNFcHNpbG9uKGxlZnQ6IE1hdHJpeDIsIHJpZ2h0OiBNYXRyaXgyLCBlcHNpbG9uOiBudW1iZXIgPSAwKTogYm9vbGVhbiB7XHJcblx0XHRlcHNpbG9uID0gZGVmYXVsdFZhbHVlKGVwc2lsb24sIDApO1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0bGVmdCA9PT0gcmlnaHQgfHxcclxuXHRcdFx0KGRlZmluZWQobGVmdCkgJiZcclxuXHRcdFx0XHRkZWZpbmVkKHJpZ2h0KSAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnRbMF0gLSByaWdodFswXSkgPD0gZXBzaWxvbiAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnRbMV0gLSByaWdodFsxXSkgPD0gZXBzaWxvbiAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnRbMl0gLSByaWdodFsyXSkgPD0gZXBzaWxvbiAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnRbM10gLSByaWdodFszXSkgPD0gZXBzaWxvbilcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIElERU5USVRZID0gT2JqZWN0LmZyZWV6ZShuZXcgTWF0cml4MigxLjAsIDAuMCwgMC4wLCAxLjApKTtcclxuXHJcblx0cHVibGljIHN0YXRpYyBaRVJPID0gT2JqZWN0LmZyZWV6ZShuZXcgTWF0cml4MigwLjAsIDAuMCwgMC4wLCAwLjApKTtcclxuXHJcblx0Y2xvbmUocmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XHJcblx0XHRyZXR1cm4gTWF0cml4Mi5jbG9uZSh0aGlzLCByZXN1bHQpO1xyXG5cdH1cclxuXHJcblx0ZXF1YWxzKHJpZ2h0OiBNYXRyaXgyKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gTWF0cml4Mi5lcXVhbHModGhpcywgcmlnaHQpO1xyXG5cdH1cclxuXHJcblx0ZXF1YWxzRXBzaWxvbihyaWdodDogTWF0cml4MiwgZXBzaWxvbjogbnVtYmVyID0gMCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIE1hdHJpeDIuZXF1YWxzRXBzaWxvbih0aGlzLCByaWdodCwgZXBzaWxvbik7XHJcblx0fVxyXG5cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHJldHVybiBgKCR7dGhpc1swXX0sICR7dGhpc1syXX0pXFxuYCArIGAoJHt0aGlzWzFdfSwgJHt0aGlzWzNdfSlgO1xyXG5cdH1cclxufVxyXG5jb25zdCBzY2FsZVNjcmF0Y2gxID0gbmV3IFZlY3RvcjIoKTtcclxuY29uc3Qgc2NhbGVTY3JhdGNoMiA9IG5ldyBWZWN0b3IyKCk7XHJcbmNvbnN0IHNjYWxlU2NyYXRjaDMgPSBuZXcgVmVjdG9yMigpO1xyXG5jb25zdCBzY2FsZVNjcmF0Y2g0ID0gbmV3IFZlY3RvcjIoKTtcclxuY29uc3Qgc2NyYXRjaENvbHVtbiA9IG5ldyBWZWN0b3IyKCk7XHJcbmNvbnN0IHNjYWxlU2NyYXRjaDUgPSBuZXcgVmVjdG9yMigpO1xyXG5leHBvcnQgZGVmYXVsdCBNYXRyaXgyO1xyXG4iLCJpbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi9WZWN0b3IzXCI7XHJcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xyXG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xyXG5pbXBvcnQgR01hdGggZnJvbSBcIi4vTWF0aFwiO1xyXG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSBcIi4vUXVhdGVybmlvblwiO1xyXG5pbXBvcnQgTWF0cml4NCBmcm9tIFwiLi9NYXRyaXg0XCI7XHJcbi8qKlxyXG4gKiBBIDN4MyBtYXRyaXgsIGluZGV4YWJsZSBhcyBhIGNvbHVtbi1tYWpvciBvcmRlciBhcnJheS5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4wUm93MD0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDAsIHJvdyAwLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjFSb3cwPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMSwgcm93IDAuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMlJvdzA9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAyLCByb3cgMC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4wUm93MT0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDAsIHJvdyAxLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjFSb3cxPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMSwgcm93IDEuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMlJvdzE9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAyLCByb3cgMS5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4wUm93Mj0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDAsIHJvdyAyLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjFSb3cyPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMSwgcm93IDIuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMlJvdzI9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAyLCByb3cgMi5cclxuICovXHJcbmNsYXNzIE1hdHJpeDMge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgY29sdW1uMFJvdzAgPSAwLFxyXG4gICAgY29sdW1uMVJvdzAgPSAwLFxyXG4gICAgY29sdW1uMlJvdzAgPSAwLFxyXG4gICAgY29sdW1uMFJvdzEgPSAwLFxyXG4gICAgY29sdW1uMVJvdzEgPSAwLFxyXG4gICAgY29sdW1uMlJvdzEgPSAwLFxyXG4gICAgY29sdW1uMFJvdzIgPSAwLFxyXG4gICAgY29sdW1uMVJvdzIgPSAwLFxyXG4gICAgY29sdW1uMlJvdzIgPSAwXHJcbiAgKSB7XHJcbiAgICB0aGlzWzBdID0gY29sdW1uMFJvdzA7XHJcbiAgICB0aGlzWzFdID0gY29sdW1uMFJvdzE7XHJcbiAgICB0aGlzWzJdID0gY29sdW1uMFJvdzI7XHJcbiAgICB0aGlzWzNdID0gY29sdW1uMVJvdzA7XHJcbiAgICB0aGlzWzRdID0gY29sdW1uMVJvdzE7XHJcbiAgICB0aGlzWzVdID0gY29sdW1uMVJvdzI7XHJcbiAgICB0aGlzWzZdID0gY29sdW1uMlJvdzA7XHJcbiAgICB0aGlzWzddID0gY29sdW1uMlJvdzE7XHJcbiAgICB0aGlzWzhdID0gY29sdW1uMlJvdzI7XHJcbiAgfVxyXG4gIHNldEZyb21NYXRyaXg0KG1hdHJpeDogTWF0cml4NCk6IE1hdHJpeDMge1xyXG4gICAgdGhpc1swXSA9IG1hdHJpeFswXTtcclxuICAgIHRoaXNbMV0gPSBtYXRyaXhbMV07XHJcbiAgICB0aGlzWzJdID0gbWF0cml4WzJdO1xyXG4gICAgdGhpc1szXSA9IG1hdHJpeFs0XTtcclxuICAgIHRoaXNbNF0gPSBtYXRyaXhbNV07XHJcbiAgICB0aGlzWzVdID0gbWF0cml4WzJdO1xyXG4gICAgdGhpc1s2XSA9IG1hdHJpeFs4XTtcclxuICAgIHRoaXNbN10gPSBtYXRyaXhbOV07XHJcbiAgICB0aGlzWzhdID0gbWF0cml4WzEwXTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBnZXROb3JtYWxNYXRyaXgobWF0cml4NDogTWF0cml4NCk6IE1hdHJpeDMge1xyXG4gICAgdGhpcy5zZXRGcm9tTWF0cml4NChtYXRyaXg0KTtcclxuICAgIE1hdHJpeDMuaW52ZXJzZSh0aGlzLCB0aGlzKTtcclxuICAgIE1hdHJpeDMudHJhbnNwb3NlKHRoaXMsIHRoaXMpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2xvbmUobWF0cml4OiBNYXRyaXgzIHwgbnVtYmVyW10sIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgaWYgKCFkZWZpbmVkKG1hdHJpeCkpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTWF0cml4MyhcclxuICAgICAgICBtYXRyaXhbMF0sXHJcbiAgICAgICAgbWF0cml4WzNdLFxyXG4gICAgICAgIG1hdHJpeFs2XSxcclxuICAgICAgICBtYXRyaXhbMV0sXHJcbiAgICAgICAgbWF0cml4WzRdLFxyXG4gICAgICAgIG1hdHJpeFs3XSxcclxuICAgICAgICBtYXRyaXhbMl0sXHJcbiAgICAgICAgbWF0cml4WzVdLFxyXG4gICAgICAgIG1hdHJpeFs4XVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmVzdWx0WzBdID0gbWF0cml4WzBdO1xyXG4gICAgcmVzdWx0WzFdID0gbWF0cml4WzFdO1xyXG4gICAgcmVzdWx0WzJdID0gbWF0cml4WzJdO1xyXG4gICAgcmVzdWx0WzNdID0gbWF0cml4WzNdO1xyXG4gICAgcmVzdWx0WzRdID0gbWF0cml4WzRdO1xyXG4gICAgcmVzdWx0WzVdID0gbWF0cml4WzVdO1xyXG4gICAgcmVzdWx0WzZdID0gbWF0cml4WzZdO1xyXG4gICAgcmVzdWx0WzddID0gbWF0cml4WzddO1xyXG4gICAgcmVzdWx0WzhdID0gbWF0cml4WzhdO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tQ29sdW1uTWFqb3JBcnJheShcclxuICAgIHZhbHVlczogQXJyYXk8bnVtYmVyPixcclxuICAgIHJlc3VsdD86IE1hdHJpeDNcclxuICApOiBNYXRyaXgzIHtcclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXgzKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTWF0cml4My5jbG9uZSh2YWx1ZXMsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbVJvd01ham9yQXJyYXkodmFsdWVzOiBBcnJheTxudW1iZXI+LCByZXN1bHQ/OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IE1hdHJpeDMoXHJcbiAgICAgICAgdmFsdWVzWzBdLFxyXG4gICAgICAgIHZhbHVlc1sxXSxcclxuICAgICAgICB2YWx1ZXNbMl0sXHJcbiAgICAgICAgdmFsdWVzWzNdLFxyXG4gICAgICAgIHZhbHVlc1s0XSxcclxuICAgICAgICB2YWx1ZXNbNV0sXHJcbiAgICAgICAgdmFsdWVzWzZdLFxyXG4gICAgICAgIHZhbHVlc1s3XSxcclxuICAgICAgICB2YWx1ZXNbOF1cclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJlc3VsdFswXSA9IHZhbHVlc1swXTtcclxuICAgIHJlc3VsdFsxXSA9IHZhbHVlc1szXTtcclxuICAgIHJlc3VsdFsyXSA9IHZhbHVlc1s2XTtcclxuICAgIHJlc3VsdFszXSA9IHZhbHVlc1sxXTtcclxuICAgIHJlc3VsdFs0XSA9IHZhbHVlc1s0XTtcclxuICAgIHJlc3VsdFs1XSA9IHZhbHVlc1s3XTtcclxuICAgIHJlc3VsdFs2XSA9IHZhbHVlc1syXTtcclxuICAgIHJlc3VsdFs3XSA9IHZhbHVlc1s1XTtcclxuICAgIHJlc3VsdFs4XSA9IHZhbHVlc1s4XTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbVF1YXRlcm5pb24ocXVhdGVybmlvbjogUXVhdGVybmlvbiwgcmVzdWx0PzogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgY29uc3QgeDIgPSBxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLng7XHJcbiAgICBjb25zdCB4eSA9IHF1YXRlcm5pb24ueCAqIHF1YXRlcm5pb24ueTtcclxuICAgIGNvbnN0IHh6ID0gcXVhdGVybmlvbi54ICogcXVhdGVybmlvbi56O1xyXG4gICAgY29uc3QgeHcgPSBxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLnc7XHJcbiAgICBjb25zdCB5MiA9IHF1YXRlcm5pb24ueSAqIHF1YXRlcm5pb24ueTtcclxuICAgIGNvbnN0IHl6ID0gcXVhdGVybmlvbi55ICogcXVhdGVybmlvbi56O1xyXG4gICAgY29uc3QgeXcgPSBxdWF0ZXJuaW9uLnkgKiBxdWF0ZXJuaW9uLnc7XHJcbiAgICBjb25zdCB6MiA9IHF1YXRlcm5pb24ueiAqIHF1YXRlcm5pb24uejtcclxuICAgIGNvbnN0IHp3ID0gcXVhdGVybmlvbi56ICogcXVhdGVybmlvbi53O1xyXG4gICAgY29uc3QgdzIgPSBxdWF0ZXJuaW9uLncgKiBxdWF0ZXJuaW9uLnc7XHJcblxyXG4gICAgY29uc3QgbTAwID0geDIgLSB5MiAtIHoyICsgdzI7XHJcbiAgICBjb25zdCBtMDEgPSAyLjAgKiAoeHkgLSB6dyk7XHJcbiAgICBjb25zdCBtMDIgPSAyLjAgKiAoeHogKyB5dyk7XHJcblxyXG4gICAgY29uc3QgbTEwID0gMi4wICogKHh5ICsgencpO1xyXG4gICAgY29uc3QgbTExID0gLXgyICsgeTIgLSB6MiArIHcyO1xyXG4gICAgY29uc3QgbTEyID0gMi4wICogKHl6IC0geHcpO1xyXG5cclxuICAgIGNvbnN0IG0yMCA9IDIuMCAqICh4eiAtIHl3KTtcclxuICAgIGNvbnN0IG0yMSA9IDIuMCAqICh5eiArIHh3KTtcclxuICAgIGNvbnN0IG0yMiA9IC14MiAtIHkyICsgejIgKyB3MjtcclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IE1hdHJpeDMobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7XHJcbiAgICB9XHJcbiAgICByZXN1bHRbMF0gPSBtMDA7XHJcbiAgICByZXN1bHRbMV0gPSBtMTA7XHJcbiAgICByZXN1bHRbMl0gPSBtMjA7XHJcbiAgICByZXN1bHRbM10gPSBtMDE7XHJcbiAgICByZXN1bHRbNF0gPSBtMTE7XHJcbiAgICByZXN1bHRbNV0gPSBtMjE7XHJcbiAgICByZXN1bHRbNl0gPSBtMDI7XHJcbiAgICByZXN1bHRbN10gPSBtMTI7XHJcbiAgICByZXN1bHRbOF0gPSBtMjI7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21TY2FsZShzY2FsZTogVmVjdG9yMywgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IE1hdHJpeDMoXHJcbiAgICAgICAgc2NhbGUueCxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICBzY2FsZS55LFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIHNjYWxlLnpcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHRbMF0gPSBzY2FsZS54O1xyXG4gICAgcmVzdWx0WzFdID0gMC4wO1xyXG4gICAgcmVzdWx0WzJdID0gMC4wO1xyXG4gICAgcmVzdWx0WzNdID0gMC4wO1xyXG4gICAgcmVzdWx0WzRdID0gc2NhbGUueTtcclxuICAgIHJlc3VsdFs1XSA9IDAuMDtcclxuICAgIHJlc3VsdFs2XSA9IDAuMDtcclxuICAgIHJlc3VsdFs3XSA9IDAuMDtcclxuICAgIHJlc3VsdFs4XSA9IHNjYWxlLno7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21Sb3RhdGlvblgoYW5nbGU6IG51bWJlciwgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICBjb25zdCBjb3NBbmdsZSA9IE1hdGguY29zKGFuZ2xlKTtcclxuICAgIGNvbnN0IHNpbkFuZ2xlID0gTWF0aC5zaW4oYW5nbGUpO1xyXG5cclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTWF0cml4MyhcclxuICAgICAgICAxLjAsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgY29zQW5nbGUsXHJcbiAgICAgICAgLXNpbkFuZ2xlLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICBzaW5BbmdsZSxcclxuICAgICAgICBjb3NBbmdsZVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc3VsdFswXSA9IDEuMDtcclxuICAgIHJlc3VsdFsxXSA9IDAuMDtcclxuICAgIHJlc3VsdFsyXSA9IDAuMDtcclxuICAgIHJlc3VsdFszXSA9IDAuMDtcclxuICAgIHJlc3VsdFs0XSA9IGNvc0FuZ2xlO1xyXG4gICAgcmVzdWx0WzVdID0gc2luQW5nbGU7XHJcbiAgICByZXN1bHRbNl0gPSAwLjA7XHJcbiAgICByZXN1bHRbN10gPSAtc2luQW5nbGU7XHJcbiAgICByZXN1bHRbOF0gPSBjb3NBbmdsZTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21Sb3RhdGlvblkoYW5nbGU6IG51bWJlciwgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICBjb25zdCBjb3NBbmdsZSA9IE1hdGguY29zKGFuZ2xlKTtcclxuICAgIGNvbnN0IHNpbkFuZ2xlID0gTWF0aC5zaW4oYW5nbGUpO1xyXG5cclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTWF0cml4MyhcclxuICAgICAgICBjb3NBbmdsZSxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgc2luQW5nbGUsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIDEuMCxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgLXNpbkFuZ2xlLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICBjb3NBbmdsZVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc3VsdFswXSA9IGNvc0FuZ2xlO1xyXG4gICAgcmVzdWx0WzFdID0gMC4wO1xyXG4gICAgcmVzdWx0WzJdID0gLXNpbkFuZ2xlO1xyXG4gICAgcmVzdWx0WzNdID0gMC4wO1xyXG4gICAgcmVzdWx0WzRdID0gMS4wO1xyXG4gICAgcmVzdWx0WzVdID0gMC4wO1xyXG4gICAgcmVzdWx0WzZdID0gc2luQW5nbGU7XHJcbiAgICByZXN1bHRbN10gPSAwLjA7XHJcbiAgICByZXN1bHRbOF0gPSBjb3NBbmdsZTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21Sb3RhdGlvblpzdGF0aWMoYW5nbGU6IG51bWJlciwgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICBjb25zdCBjb3NBbmdsZSA9IE1hdGguY29zKGFuZ2xlKTtcclxuICAgIGNvbnN0IHNpbkFuZ2xlID0gTWF0aC5zaW4oYW5nbGUpO1xyXG5cclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTWF0cml4MyhcclxuICAgICAgICBjb3NBbmdsZSxcclxuICAgICAgICAtc2luQW5nbGUsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIHNpbkFuZ2xlLFxyXG4gICAgICAgIGNvc0FuZ2xlLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIDEuMFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc3VsdFswXSA9IGNvc0FuZ2xlO1xyXG4gICAgcmVzdWx0WzFdID0gc2luQW5nbGU7XHJcbiAgICByZXN1bHRbMl0gPSAwLjA7XHJcbiAgICByZXN1bHRbM10gPSAtc2luQW5nbGU7XHJcbiAgICByZXN1bHRbNF0gPSBjb3NBbmdsZTtcclxuICAgIHJlc3VsdFs1XSA9IDAuMDtcclxuICAgIHJlc3VsdFs2XSA9IDAuMDtcclxuICAgIHJlc3VsdFs3XSA9IDAuMDtcclxuICAgIHJlc3VsdFs4XSA9IDEuMDtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICB0b0FycmF5KCkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICBNYXRyaXgzLnRvQXJyYXkodGhpcywgcmVzdWx0KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9BcnJheShtYXRyaXg6IE1hdHJpeDMsIHJlc3VsdDogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgIG1hdHJpeFswXSxcclxuICAgICAgICBtYXRyaXhbMV0sXHJcbiAgICAgICAgbWF0cml4WzJdLFxyXG4gICAgICAgIG1hdHJpeFszXSxcclxuICAgICAgICBtYXRyaXhbNF0sXHJcbiAgICAgICAgbWF0cml4WzVdLFxyXG4gICAgICAgIG1hdHJpeFs2XSxcclxuICAgICAgICBtYXRyaXhbN10sXHJcbiAgICAgICAgbWF0cml4WzhdLFxyXG4gICAgICBdO1xyXG4gICAgfVxyXG4gICAgcmVzdWx0WzBdID0gbWF0cml4WzBdO1xyXG4gICAgcmVzdWx0WzFdID0gbWF0cml4WzFdO1xyXG4gICAgcmVzdWx0WzJdID0gbWF0cml4WzJdO1xyXG4gICAgcmVzdWx0WzNdID0gbWF0cml4WzNdO1xyXG4gICAgcmVzdWx0WzRdID0gbWF0cml4WzRdO1xyXG4gICAgcmVzdWx0WzVdID0gbWF0cml4WzVdO1xyXG4gICAgcmVzdWx0WzZdID0gbWF0cml4WzZdO1xyXG4gICAgcmVzdWx0WzddID0gbWF0cml4WzddO1xyXG4gICAgcmVzdWx0WzhdID0gbWF0cml4WzhdO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRFbGVtZW50SW5kZXgoY29sdW1uOiBudW1iZXIsIHJvdzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBjb2x1bW4gKiAzICsgcm93O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldENvbHVtbihtYXRyaXg6IE1hdHJpeDMsIGluZGV4OiBudW1iZXIsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4ICogMztcclxuICAgIGNvbnN0IHggPSBtYXRyaXhbc3RhcnRJbmRleF07XHJcbiAgICBjb25zdCB5ID0gbWF0cml4W3N0YXJ0SW5kZXggKyAxXTtcclxuICAgIGNvbnN0IHogPSBtYXRyaXhbc3RhcnRJbmRleCArIDJdO1xyXG5cclxuICAgIHJlc3VsdC54ID0geDtcclxuICAgIHJlc3VsdC55ID0geTtcclxuICAgIHJlc3VsdC56ID0gejtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0Q29sdW1uKFxyXG4gICAgbWF0cml4OiBNYXRyaXgzLFxyXG4gICAgaW5kZXg6IG51bWJlcixcclxuICAgIGNhcnRlc2lhbjogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogTWF0cml4M1xyXG4gICk6IE1hdHJpeDMge1xyXG4gICAgcmVzdWx0ID0gTWF0cml4My5jbG9uZShtYXRyaXgsIHJlc3VsdCk7XHJcbiAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiAzO1xyXG4gICAgcmVzdWx0W3N0YXJ0SW5kZXhdID0gY2FydGVzaWFuLng7XHJcbiAgICByZXN1bHRbc3RhcnRJbmRleCArIDFdID0gY2FydGVzaWFuLnk7XHJcbiAgICByZXN1bHRbc3RhcnRJbmRleCArIDJdID0gY2FydGVzaWFuLno7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFJvdyhtYXRyaXg6IE1hdHJpeDMsIGluZGV4OiBudW1iZXIsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG4gICAgY29uc3QgeCA9IG1hdHJpeFtpbmRleF07XHJcbiAgICBjb25zdCB5ID0gbWF0cml4W2luZGV4ICsgM107XHJcbiAgICBjb25zdCB6ID0gbWF0cml4W2luZGV4ICsgNl07XHJcblxyXG4gICAgcmVzdWx0LnggPSB4O1xyXG4gICAgcmVzdWx0LnkgPSB5O1xyXG4gICAgcmVzdWx0LnogPSB6O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXRSb3coXHJcbiAgICBtYXRyaXg6IE1hdHJpeDMsXHJcbiAgICBpbmRleDogbnVtYmVyLFxyXG4gICAgY2FydGVzaWFuOiBWZWN0b3IzLFxyXG4gICAgcmVzdWx0OiBNYXRyaXgzXHJcbiAgKTogTWF0cml4MyB7XHJcbiAgICByZXN1bHQgPSBNYXRyaXgzLmNsb25lKG1hdHJpeCwgcmVzdWx0KTtcclxuICAgIHJlc3VsdFtpbmRleF0gPSBjYXJ0ZXNpYW4ueDtcclxuICAgIHJlc3VsdFtpbmRleCArIDNdID0gY2FydGVzaWFuLnk7XHJcbiAgICByZXN1bHRbaW5kZXggKyA2XSA9IGNhcnRlc2lhbi56O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXRTY2FsZShtYXRyaXg6IE1hdHJpeDMsIHNjYWxlOiBWZWN0b3IzLCByZXN1bHQ6IE1hdHJpeDMpOiBNYXRyaXgzIHtcclxuICAgIGNvbnN0IGV4aXN0aW5nU2NhbGUgPSBNYXRyaXgzLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoMSk7XHJcbiAgICBjb25zdCBzY2FsZVJhdGlvWCA9IHNjYWxlLnggLyBleGlzdGluZ1NjYWxlLng7XHJcbiAgICBjb25zdCBzY2FsZVJhdGlvWSA9IHNjYWxlLnkgLyBleGlzdGluZ1NjYWxlLnk7XHJcbiAgICBjb25zdCBzY2FsZVJhdGlvWiA9IHNjYWxlLnogLyBleGlzdGluZ1NjYWxlLno7XHJcblxyXG4gICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGVSYXRpb1g7XHJcbiAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZVJhdGlvWDtcclxuICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlUmF0aW9YO1xyXG4gICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGVSYXRpb1k7XHJcbiAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsZVJhdGlvWTtcclxuICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxlUmF0aW9ZO1xyXG4gICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGVSYXRpb1o7XHJcbiAgICByZXN1bHRbN10gPSBtYXRyaXhbN10gKiBzY2FsZVJhdGlvWjtcclxuICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxlUmF0aW9aO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0U2NhbGUobWF0cml4OiBNYXRyaXgzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgIHJlc3VsdC54ID0gVmVjdG9yMy5tYWduaXR1ZGUoXHJcbiAgICAgIFZlY3RvcjMuZnJvbUVsZW1lbnRzKG1hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbMl0sIHNjcmF0Y2hDb2x1bW4pXHJcbiAgICApO1xyXG4gICAgcmVzdWx0LnkgPSBWZWN0b3IzLm1hZ25pdHVkZShcclxuICAgICAgVmVjdG9yMy5mcm9tRWxlbWVudHMobWF0cml4WzNdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgc2NyYXRjaENvbHVtbilcclxuICAgICk7XHJcbiAgICByZXN1bHQueiA9IFZlY3RvcjMubWFnbml0dWRlKFxyXG4gICAgICBWZWN0b3IzLmZyb21FbGVtZW50cyhtYXRyaXhbNl0sIG1hdHJpeFs3XSwgbWF0cml4WzhdLCBzY3JhdGNoQ29sdW1uKVxyXG4gICAgKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0TWF4aW11bVNjYWxlKG1hdHJpeDogTWF0cml4Myk6IG51bWJlciB7XHJcbiAgICBNYXRyaXgzLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoMyk7XHJcbiAgICByZXR1cm4gVmVjdG9yMy5tYXhpbXVtQ29tcG9uZW50KHNjYWxlU2NyYXRjaDMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldFJvdGF0aW9uKFxyXG4gICAgbWF0cml4OiBNYXRyaXgzLFxyXG4gICAgcm90YXRpb246IE1hdHJpeDMsXHJcbiAgICByZXN1bHQ6IE1hdHJpeDNcclxuICApOiBNYXRyaXgzIHtcclxuICAgIGNvbnN0IHNjYWxlID0gTWF0cml4My5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDQpO1xyXG5cclxuICAgIHJlc3VsdFswXSA9IHJvdGF0aW9uWzBdICogc2NhbGUueDtcclxuICAgIHJlc3VsdFsxXSA9IHJvdGF0aW9uWzFdICogc2NhbGUueDtcclxuICAgIHJlc3VsdFsyXSA9IHJvdGF0aW9uWzJdICogc2NhbGUueDtcclxuICAgIHJlc3VsdFszXSA9IHJvdGF0aW9uWzNdICogc2NhbGUueTtcclxuICAgIHJlc3VsdFs0XSA9IHJvdGF0aW9uWzRdICogc2NhbGUueTtcclxuICAgIHJlc3VsdFs1XSA9IHJvdGF0aW9uWzVdICogc2NhbGUueTtcclxuICAgIHJlc3VsdFs2XSA9IHJvdGF0aW9uWzZdICogc2NhbGUuejtcclxuICAgIHJlc3VsdFs3XSA9IHJvdGF0aW9uWzddICogc2NhbGUuejtcclxuICAgIHJlc3VsdFs4XSA9IHJvdGF0aW9uWzhdICogc2NhbGUuejtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFJvdGF0aW9uKG1hdHJpeDogTWF0cml4MywgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICBjb25zdCBzY2FsZSA9IE1hdHJpeDMuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2g1KTtcclxuXHJcbiAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gLyBzY2FsZS54O1xyXG4gICAgcmVzdWx0WzFdID0gbWF0cml4WzFdIC8gc2NhbGUueDtcclxuICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAvIHNjYWxlLng7XHJcbiAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gLyBzY2FsZS55O1xyXG4gICAgcmVzdWx0WzRdID0gbWF0cml4WzRdIC8gc2NhbGUueTtcclxuICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAvIHNjYWxlLnk7XHJcbiAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl0gLyBzY2FsZS56O1xyXG4gICAgcmVzdWx0WzddID0gbWF0cml4WzddIC8gc2NhbGUuejtcclxuICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAvIHNjYWxlLno7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtdWx0aXBseShsZWZ0OiBNYXRyaXgzLCByaWdodDogTWF0cml4MywgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICBjb25zdCBjb2x1bW4wUm93MCA9XHJcbiAgICAgIGxlZnRbMF0gKiByaWdodFswXSArIGxlZnRbM10gKiByaWdodFsxXSArIGxlZnRbNl0gKiByaWdodFsyXTtcclxuICAgIGNvbnN0IGNvbHVtbjBSb3cxID1cclxuICAgICAgbGVmdFsxXSAqIHJpZ2h0WzBdICsgbGVmdFs0XSAqIHJpZ2h0WzFdICsgbGVmdFs3XSAqIHJpZ2h0WzJdO1xyXG4gICAgY29uc3QgY29sdW1uMFJvdzIgPVxyXG4gICAgICBsZWZ0WzJdICogcmlnaHRbMF0gKyBsZWZ0WzVdICogcmlnaHRbMV0gKyBsZWZ0WzhdICogcmlnaHRbMl07XHJcblxyXG4gICAgY29uc3QgY29sdW1uMVJvdzAgPVxyXG4gICAgICBsZWZ0WzBdICogcmlnaHRbM10gKyBsZWZ0WzNdICogcmlnaHRbNF0gKyBsZWZ0WzZdICogcmlnaHRbNV07XHJcbiAgICBjb25zdCBjb2x1bW4xUm93MSA9XHJcbiAgICAgIGxlZnRbMV0gKiByaWdodFszXSArIGxlZnRbNF0gKiByaWdodFs0XSArIGxlZnRbN10gKiByaWdodFs1XTtcclxuICAgIGNvbnN0IGNvbHVtbjFSb3cyID1cclxuICAgICAgbGVmdFsyXSAqIHJpZ2h0WzNdICsgbGVmdFs1XSAqIHJpZ2h0WzRdICsgbGVmdFs4XSAqIHJpZ2h0WzVdO1xyXG5cclxuICAgIGNvbnN0IGNvbHVtbjJSb3cwID1cclxuICAgICAgbGVmdFswXSAqIHJpZ2h0WzZdICsgbGVmdFszXSAqIHJpZ2h0WzddICsgbGVmdFs2XSAqIHJpZ2h0WzhdO1xyXG4gICAgY29uc3QgY29sdW1uMlJvdzEgPVxyXG4gICAgICBsZWZ0WzFdICogcmlnaHRbNl0gKyBsZWZ0WzRdICogcmlnaHRbN10gKyBsZWZ0WzddICogcmlnaHRbOF07XHJcbiAgICBjb25zdCBjb2x1bW4yUm93MiA9XHJcbiAgICAgIGxlZnRbMl0gKiByaWdodFs2XSArIGxlZnRbNV0gKiByaWdodFs3XSArIGxlZnRbOF0gKiByaWdodFs4XTtcclxuXHJcbiAgICByZXN1bHRbMF0gPSBjb2x1bW4wUm93MDtcclxuICAgIHJlc3VsdFsxXSA9IGNvbHVtbjBSb3cxO1xyXG4gICAgcmVzdWx0WzJdID0gY29sdW1uMFJvdzI7XHJcbiAgICByZXN1bHRbM10gPSBjb2x1bW4xUm93MDtcclxuICAgIHJlc3VsdFs0XSA9IGNvbHVtbjFSb3cxO1xyXG4gICAgcmVzdWx0WzVdID0gY29sdW1uMVJvdzI7XHJcbiAgICByZXN1bHRbNl0gPSBjb2x1bW4yUm93MDtcclxuICAgIHJlc3VsdFs3XSA9IGNvbHVtbjJSb3cxO1xyXG4gICAgcmVzdWx0WzhdID0gY29sdW1uMlJvdzI7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFkZChsZWZ0OiBNYXRyaXgzLCByaWdodDogTWF0cml4MywgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICByZXN1bHRbMF0gPSBsZWZ0WzBdICsgcmlnaHRbMF07XHJcbiAgICByZXN1bHRbMV0gPSBsZWZ0WzFdICsgcmlnaHRbMV07XHJcbiAgICByZXN1bHRbMl0gPSBsZWZ0WzJdICsgcmlnaHRbMl07XHJcbiAgICByZXN1bHRbM10gPSBsZWZ0WzNdICsgcmlnaHRbM107XHJcbiAgICByZXN1bHRbNF0gPSBsZWZ0WzRdICsgcmlnaHRbNF07XHJcbiAgICByZXN1bHRbNV0gPSBsZWZ0WzVdICsgcmlnaHRbNV07XHJcbiAgICByZXN1bHRbNl0gPSBsZWZ0WzZdICsgcmlnaHRbNl07XHJcbiAgICByZXN1bHRbN10gPSBsZWZ0WzddICsgcmlnaHRbN107XHJcbiAgICByZXN1bHRbOF0gPSBsZWZ0WzhdICsgcmlnaHRbOF07XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHN1YnRyYWN0KGxlZnQ6IE1hdHJpeDMsIHJpZ2h0OiBNYXRyaXgzLCByZXN1bHQ6IE1hdHJpeDMpIHtcclxuICAgIHJlc3VsdFswXSA9IGxlZnRbMF0gLSByaWdodFswXTtcclxuICAgIHJlc3VsdFsxXSA9IGxlZnRbMV0gLSByaWdodFsxXTtcclxuICAgIHJlc3VsdFsyXSA9IGxlZnRbMl0gLSByaWdodFsyXTtcclxuICAgIHJlc3VsdFszXSA9IGxlZnRbM10gLSByaWdodFszXTtcclxuICAgIHJlc3VsdFs0XSA9IGxlZnRbNF0gLSByaWdodFs0XTtcclxuICAgIHJlc3VsdFs1XSA9IGxlZnRbNV0gLSByaWdodFs1XTtcclxuICAgIHJlc3VsdFs2XSA9IGxlZnRbNl0gLSByaWdodFs2XTtcclxuICAgIHJlc3VsdFs3XSA9IGxlZnRbN10gLSByaWdodFs3XTtcclxuICAgIHJlc3VsdFs4XSA9IGxlZnRbOF0gLSByaWdodFs4XTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbXVsdGlwbHlCeVZlY3RvcihcclxuICAgIG1hdHJpeDogTWF0cml4MyxcclxuICAgIGNhcnRlc2lhbjogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogVmVjdG9yM1xyXG4gICk6IFZlY3RvcjMge1xyXG4gICAgY29uc3QgdlggPSBjYXJ0ZXNpYW4ueDtcclxuICAgIGNvbnN0IHZZID0gY2FydGVzaWFuLnk7XHJcbiAgICBjb25zdCB2WiA9IGNhcnRlc2lhbi56O1xyXG5cclxuICAgIGNvbnN0IHggPSBtYXRyaXhbMF0gKiB2WCArIG1hdHJpeFszXSAqIHZZICsgbWF0cml4WzZdICogdlo7XHJcbiAgICBjb25zdCB5ID0gbWF0cml4WzFdICogdlggKyBtYXRyaXhbNF0gKiB2WSArIG1hdHJpeFs3XSAqIHZaO1xyXG4gICAgY29uc3QgeiA9IG1hdHJpeFsyXSAqIHZYICsgbWF0cml4WzVdICogdlkgKyBtYXRyaXhbOF0gKiB2WjtcclxuXHJcbiAgICByZXN1bHQueCA9IHg7XHJcbiAgICByZXN1bHQueSA9IHk7XHJcbiAgICByZXN1bHQueiA9IHo7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG11bHRpcGx5QnlTY2FsYXIoXHJcbiAgICBtYXRyaXg6IE1hdHJpeDMsXHJcbiAgICBzY2FsYXI6IG51bWJlcixcclxuICAgIHJlc3VsdDogTWF0cml4M1xyXG4gICk6IE1hdHJpeDMge1xyXG4gICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGFyO1xyXG4gICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGFyO1xyXG4gICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGFyO1xyXG4gICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGFyO1xyXG4gICAgcmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGFyO1xyXG4gICAgcmVzdWx0WzVdID0gbWF0cml4WzVdICogc2NhbGFyO1xyXG4gICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGFyO1xyXG4gICAgcmVzdWx0WzddID0gbWF0cml4WzddICogc2NhbGFyO1xyXG4gICAgcmVzdWx0WzhdID0gbWF0cml4WzhdICogc2NhbGFyO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtdWx0aXBseUJ5U2NhbGUoXHJcbiAgICBtYXRyaXg6IE1hdHJpeDMsXHJcbiAgICBzY2FsZTogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogTWF0cml4M1xyXG4gICk6IE1hdHJpeDMge1xyXG4gICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGUueDtcclxuICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlLng7XHJcbiAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZS54O1xyXG4gICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGUueTtcclxuICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxlLnk7XHJcbiAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsZS55O1xyXG4gICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGUuejtcclxuICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAqIHNjYWxlLno7XHJcbiAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF0gKiBzY2FsZS56O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbmVnYXRlKG1hdHJpeDogTWF0cml4MywgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICByZXN1bHRbMF0gPSAtbWF0cml4WzBdO1xyXG4gICAgcmVzdWx0WzFdID0gLW1hdHJpeFsxXTtcclxuICAgIHJlc3VsdFsyXSA9IC1tYXRyaXhbMl07XHJcbiAgICByZXN1bHRbM10gPSAtbWF0cml4WzNdO1xyXG4gICAgcmVzdWx0WzRdID0gLW1hdHJpeFs0XTtcclxuICAgIHJlc3VsdFs1XSA9IC1tYXRyaXhbNV07XHJcbiAgICByZXN1bHRbNl0gPSAtbWF0cml4WzZdO1xyXG4gICAgcmVzdWx0WzddID0gLW1hdHJpeFs3XTtcclxuICAgIHJlc3VsdFs4XSA9IC1tYXRyaXhbOF07XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRyYW5zcG9zZShtYXRyaXg6IE1hdHJpeDMsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgY29uc3QgY29sdW1uMFJvdzAgPSBtYXRyaXhbMF07XHJcbiAgICBjb25zdCBjb2x1bW4wUm93MSA9IG1hdHJpeFszXTtcclxuICAgIGNvbnN0IGNvbHVtbjBSb3cyID0gbWF0cml4WzZdO1xyXG4gICAgY29uc3QgY29sdW1uMVJvdzAgPSBtYXRyaXhbMV07XHJcbiAgICBjb25zdCBjb2x1bW4xUm93MSA9IG1hdHJpeFs0XTtcclxuICAgIGNvbnN0IGNvbHVtbjFSb3cyID0gbWF0cml4WzddO1xyXG4gICAgY29uc3QgY29sdW1uMlJvdzAgPSBtYXRyaXhbMl07XHJcbiAgICBjb25zdCBjb2x1bW4yUm93MSA9IG1hdHJpeFs1XTtcclxuICAgIGNvbnN0IGNvbHVtbjJSb3cyID0gbWF0cml4WzhdO1xyXG5cclxuICAgIHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwO1xyXG4gICAgcmVzdWx0WzFdID0gY29sdW1uMFJvdzE7XHJcbiAgICByZXN1bHRbMl0gPSBjb2x1bW4wUm93MjtcclxuICAgIHJlc3VsdFszXSA9IGNvbHVtbjFSb3cwO1xyXG4gICAgcmVzdWx0WzRdID0gY29sdW1uMVJvdzE7XHJcbiAgICByZXN1bHRbNV0gPSBjb2x1bW4xUm93MjtcclxuICAgIHJlc3VsdFs2XSA9IGNvbHVtbjJSb3cwO1xyXG4gICAgcmVzdWx0WzddID0gY29sdW1uMlJvdzE7XHJcbiAgICByZXN1bHRbOF0gPSBjb2x1bW4yUm93MjtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYWJzKG1hdHJpeDogTWF0cml4MywgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICByZXN1bHRbMF0gPSBNYXRoLmFicyhtYXRyaXhbMF0pO1xyXG4gICAgcmVzdWx0WzFdID0gTWF0aC5hYnMobWF0cml4WzFdKTtcclxuICAgIHJlc3VsdFsyXSA9IE1hdGguYWJzKG1hdHJpeFsyXSk7XHJcbiAgICByZXN1bHRbM10gPSBNYXRoLmFicyhtYXRyaXhbM10pO1xyXG4gICAgcmVzdWx0WzRdID0gTWF0aC5hYnMobWF0cml4WzRdKTtcclxuICAgIHJlc3VsdFs1XSA9IE1hdGguYWJzKG1hdHJpeFs1XSk7XHJcbiAgICByZXN1bHRbNl0gPSBNYXRoLmFicyhtYXRyaXhbNl0pO1xyXG4gICAgcmVzdWx0WzddID0gTWF0aC5hYnMobWF0cml4WzddKTtcclxuICAgIHJlc3VsdFs4XSA9IE1hdGguYWJzKG1hdHJpeFs4XSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZXRlcm1pbmFudChtYXRyaXg6IE1hdHJpeDMpOiBudW1iZXIge1xyXG4gICAgY29uc3QgbTExID0gbWF0cml4WzBdO1xyXG4gICAgY29uc3QgbTIxID0gbWF0cml4WzNdO1xyXG4gICAgY29uc3QgbTMxID0gbWF0cml4WzZdO1xyXG4gICAgY29uc3QgbTEyID0gbWF0cml4WzFdO1xyXG4gICAgY29uc3QgbTIyID0gbWF0cml4WzRdO1xyXG4gICAgY29uc3QgbTMyID0gbWF0cml4WzddO1xyXG4gICAgY29uc3QgbTEzID0gbWF0cml4WzJdO1xyXG4gICAgY29uc3QgbTIzID0gbWF0cml4WzVdO1xyXG4gICAgY29uc3QgbTMzID0gbWF0cml4WzhdO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIG0xMSAqIChtMjIgKiBtMzMgLSBtMjMgKiBtMzIpICtcclxuICAgICAgbTEyICogKG0yMyAqIG0zMSAtIG0yMSAqIG0zMykgK1xyXG4gICAgICBtMTMgKiAobTIxICogbTMyIC0gbTIyICogbTMxKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpbnZlcnNlKG1hdHJpeDogTWF0cml4MywgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICBjb25zdCBtMTEgPSBtYXRyaXhbMF07XHJcbiAgICBjb25zdCBtMjEgPSBtYXRyaXhbMV07XHJcbiAgICBjb25zdCBtMzEgPSBtYXRyaXhbMl07XHJcbiAgICBjb25zdCBtMTIgPSBtYXRyaXhbM107XHJcbiAgICBjb25zdCBtMjIgPSBtYXRyaXhbNF07XHJcbiAgICBjb25zdCBtMzIgPSBtYXRyaXhbNV07XHJcbiAgICBjb25zdCBtMTMgPSBtYXRyaXhbNl07XHJcbiAgICBjb25zdCBtMjMgPSBtYXRyaXhbN107XHJcbiAgICBjb25zdCBtMzMgPSBtYXRyaXhbOF07XHJcblxyXG4gICAgY29uc3QgZGV0ZXJtaW5hbnQgPSBNYXRyaXgzLmRldGVybWluYW50KG1hdHJpeCk7XHJcblxyXG4gICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcclxuICAgIGlmIChNYXRoLmFicyhkZXRlcm1pbmFudCkgPD0gR01hdGguRVBTSUxPTjE1KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm1hdHJpeCBpcyBub3QgaW52ZXJ0aWJsZVwiKTtcclxuICAgIH1cclxuICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xyXG5cclxuICAgIHJlc3VsdFswXSA9IG0yMiAqIG0zMyAtIG0yMyAqIG0zMjtcclxuICAgIHJlc3VsdFsxXSA9IG0yMyAqIG0zMSAtIG0yMSAqIG0zMztcclxuICAgIHJlc3VsdFsyXSA9IG0yMSAqIG0zMiAtIG0yMiAqIG0zMTtcclxuICAgIHJlc3VsdFszXSA9IG0xMyAqIG0zMiAtIG0xMiAqIG0zMztcclxuICAgIHJlc3VsdFs0XSA9IG0xMSAqIG0zMyAtIG0xMyAqIG0zMTtcclxuICAgIHJlc3VsdFs1XSA9IG0xMiAqIG0zMSAtIG0xMSAqIG0zMjtcclxuICAgIHJlc3VsdFs2XSA9IG0xMiAqIG0yMyAtIG0xMyAqIG0yMjtcclxuICAgIHJlc3VsdFs3XSA9IG0xMyAqIG0yMSAtIG0xMSAqIG0yMztcclxuICAgIHJlc3VsdFs4XSA9IG0xMSAqIG0yMiAtIG0xMiAqIG0yMTtcclxuXHJcbiAgICBjb25zdCBzY2FsZSA9IDEuMCAvIGRldGVybWluYW50O1xyXG4gICAgcmV0dXJuIE1hdHJpeDMubXVsdGlwbHlCeVNjYWxhcihyZXN1bHQsIHNjYWxlLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGludmVyc2VUcmFuc3Bvc2UobWF0cml4OiBNYXRyaXgzLCByZXN1bHQ6IE1hdHJpeDMpIHtcclxuICAgIHJldHVybiBNYXRyaXgzLmludmVyc2UoXHJcbiAgICAgIE1hdHJpeDMudHJhbnNwb3NlKG1hdHJpeCwgc2NyYXRjaFRyYW5zcG9zZU1hdHJpeCksXHJcbiAgICAgIHJlc3VsdFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBlcXVhbHMobGVmdDogTWF0cml4MywgcmlnaHQ6IE1hdHJpeDMpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGxlZnQgPT09IHJpZ2h0IHx8XHJcbiAgICAgIChkZWZpbmVkKGxlZnQpICYmXHJcbiAgICAgICAgZGVmaW5lZChyaWdodCkgJiZcclxuICAgICAgICBsZWZ0WzBdID09PSByaWdodFswXSAmJlxyXG4gICAgICAgIGxlZnRbMV0gPT09IHJpZ2h0WzFdICYmXHJcbiAgICAgICAgbGVmdFsyXSA9PT0gcmlnaHRbMl0gJiZcclxuICAgICAgICBsZWZ0WzNdID09PSByaWdodFszXSAmJlxyXG4gICAgICAgIGxlZnRbNF0gPT09IHJpZ2h0WzRdICYmXHJcbiAgICAgICAgbGVmdFs1XSA9PT0gcmlnaHRbNV0gJiZcclxuICAgICAgICBsZWZ0WzZdID09PSByaWdodFs2XSAmJlxyXG4gICAgICAgIGxlZnRbN10gPT09IHJpZ2h0WzddICYmXHJcbiAgICAgICAgbGVmdFs4XSA9PT0gcmlnaHRbOF0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFsc0Vwc2lsb24oXHJcbiAgICBsZWZ0OiBNYXRyaXgzLFxyXG4gICAgcmlnaHQ6IE1hdHJpeDMsXHJcbiAgICBlcHNpbG9uOiBudW1iZXIgPSAwXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBlcHNpbG9uID0gZGVmYXVsdFZhbHVlKGVwc2lsb24sIDApO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIGxlZnQgPT09IHJpZ2h0IHx8XHJcbiAgICAgIChkZWZpbmVkKGxlZnQpICYmXHJcbiAgICAgICAgZGVmaW5lZChyaWdodCkgJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0WzBdIC0gcmlnaHRbMF0pIDw9IGVwc2lsb24gJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0WzFdIC0gcmlnaHRbMV0pIDw9IGVwc2lsb24gJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0WzJdIC0gcmlnaHRbMl0pIDw9IGVwc2lsb24gJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0WzNdIC0gcmlnaHRbM10pIDw9IGVwc2lsb24gJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0WzRdIC0gcmlnaHRbNF0pIDw9IGVwc2lsb24gJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0WzVdIC0gcmlnaHRbNV0pIDw9IGVwc2lsb24gJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0WzZdIC0gcmlnaHRbNl0pIDw9IGVwc2lsb24gJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0WzddIC0gcmlnaHRbN10pIDw9IGVwc2lsb24gJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0WzhdIC0gcmlnaHRbOF0pIDw9IGVwc2lsb24pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIElERU5USVRZID0gT2JqZWN0LmZyZWV6ZShcclxuICAgIG5ldyBNYXRyaXgzKDEuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAxLjApXHJcbiAgKTtcclxuXHJcbiAgc3RhdGljIFpFUk8gPSBPYmplY3QuZnJlZXplKFxyXG4gICAgbmV3IE1hdHJpeDMoMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMClcclxuICApO1xyXG5cclxuICBjbG9uZShyZXN1bHQ6IE1hdHJpeDMpOiBNYXRyaXgzIHtcclxuICAgIHJldHVybiBNYXRyaXgzLmNsb25lKHRoaXMsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBlcXVhbHMocmlnaHQ6IE1hdHJpeDMpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBNYXRyaXgzLmVxdWFscyh0aGlzLCByaWdodCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGVxdWFsc0FycmF5KFxyXG4gICAgbWF0cml4OiBNYXRyaXgzIHwgbnVtYmVyW10sXHJcbiAgICBhcnJheTogbnVtYmVyW10sXHJcbiAgICBvZmZzZXQ6IG51bWJlclxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgbWF0cml4WzBdID09PSBhcnJheVtvZmZzZXRdICYmXHJcbiAgICAgIG1hdHJpeFsxXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiZcclxuICAgICAgbWF0cml4WzJdID09PSBhcnJheVtvZmZzZXQgKyAyXSAmJlxyXG4gICAgICBtYXRyaXhbM10gPT09IGFycmF5W29mZnNldCArIDNdICYmXHJcbiAgICAgIG1hdHJpeFs0XSA9PT0gYXJyYXlbb2Zmc2V0ICsgNF0gJiZcclxuICAgICAgbWF0cml4WzVdID09PSBhcnJheVtvZmZzZXQgKyA1XSAmJlxyXG4gICAgICBtYXRyaXhbNl0gPT09IGFycmF5W29mZnNldCArIDZdICYmXHJcbiAgICAgIG1hdHJpeFs3XSA9PT0gYXJyYXlbb2Zmc2V0ICsgN10gJiZcclxuICAgICAgbWF0cml4WzhdID09PSBhcnJheVtvZmZzZXQgKyA4XVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbXBhcmVzIHRoaXMgbWF0cml4IHRvIHRoZSBwcm92aWRlZCBtYXRyaXggY29tcG9uZW50d2lzZSBhbmQgcmV0dXJuc1xyXG4gICAqIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZXkgYXJlIHdpdGhpbiB0aGUgcHJvdmlkZWQgZXBzaWxvbixcclxuICAgKiA8Y29kZT5mYWxzZTwvY29kZT4gb3RoZXJ3aXNlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtNYXRyaXgzfSBbcmlnaHRdIFRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4LlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbZXBzaWxvbj0wXSBUaGUgZXBzaWxvbiB0byB1c2UgZm9yIGVxdWFsaXR5IHRlc3RpbmcuXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZXkgYXJlIHdpdGhpbiB0aGUgcHJvdmlkZWQgZXBzaWxvbiwgPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVyd2lzZS5cclxuICAgKi9cclxuICBlcXVhbHNFcHNpbG9uKHJpZ2h0LCBlcHNpbG9uKSB7XHJcbiAgICByZXR1cm4gTWF0cml4My5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCBlcHNpbG9uKTtcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgYCgke3RoaXNbMF19LCAke3RoaXNbM119LCAke3RoaXNbNl19KVxcbmAgK1xyXG4gICAgICBgKCR7dGhpc1sxXX0sICR7dGhpc1s0XX0sICR7dGhpc1s3XX0pXFxuYCArXHJcbiAgICAgIGAoJHt0aGlzWzJdfSwgJHt0aGlzWzVdfSwgJHt0aGlzWzhdfSlgXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3Qgc2NhbGVTY3JhdGNoMSA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNjYWxlU2NyYXRjaDIgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY3JhdGNoQ29sdW1uID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2NhbGVTY3JhdGNoMyA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNjYWxlU2NyYXRjaDQgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY2FsZVNjcmF0Y2g1ID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmZ1bmN0aW9uIGNvbXB1dGVGcm9iZW5pdXNOb3JtKG1hdHJpeCkge1xyXG4gIGxldCBub3JtID0gMC4wO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgOTsgKytpKSB7XHJcbiAgICBjb25zdCB0ZW1wID0gbWF0cml4W2ldO1xyXG4gICAgbm9ybSArPSB0ZW1wICogdGVtcDtcclxuICB9XHJcblxyXG4gIHJldHVybiBNYXRoLnNxcnQobm9ybSk7XHJcbn1cclxuXHJcbmNvbnN0IHJvd1ZhbCA9IFsxLCAwLCAwXTtcclxuY29uc3QgY29sVmFsID0gWzIsIDIsIDFdO1xyXG5cclxuZnVuY3Rpb24gb2ZmRGlhZ29uYWxGcm9iZW5pdXNOb3JtKG1hdHJpeCkge1xyXG4gIC8vIENvbXB1dGVzIHRoZSBcIm9mZi1kaWFnb25hbFwiIEZyb2Jlbml1cyBub3JtLlxyXG4gIC8vIEFzc3VtZXMgbWF0cml4IGlzIHN5bW1ldHJpYy5cclxuXHJcbiAgbGV0IG5vcm0gPSAwLjA7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyArK2kpIHtcclxuICAgIGNvbnN0IHRlbXAgPSBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoY29sVmFsW2ldLCByb3dWYWxbaV0pXTtcclxuICAgIG5vcm0gKz0gMi4wICogdGVtcCAqIHRlbXA7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gTWF0aC5zcXJ0KG5vcm0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaHVyRGVjb21wb3NpdGlvbihtYXRyaXgsIHJlc3VsdCkge1xyXG4gIC8vIFRoaXMgcm91dGluZSB3YXMgY3JlYXRlZCBiYXNlZCB1cG9uIE1hdHJpeCBDb21wdXRhdGlvbnMsIDNyZCBlZC4sIGJ5IEdvbHViIGFuZCBWYW4gTG9hbixcclxuICAvLyBzZWN0aW9uIDguNC4yIFRoZSAyYnkyIFN5bW1ldHJpYyBTY2h1ciBEZWNvbXBvc2l0aW9uLlxyXG4gIC8vXHJcbiAgLy8gVGhlIHJvdXRpbmUgdGFrZXMgYSBtYXRyaXgsIHdoaWNoIGlzIGFzc3VtZWQgdG8gYmUgc3ltbWV0cmljLCBhbmRcclxuICAvLyBmaW5kcyB0aGUgbGFyZ2VzdCBvZmYtZGlhZ29uYWwgdGVybSwgYW5kIHRoZW4gY3JlYXRlc1xyXG4gIC8vIGEgbWF0cml4IChyZXN1bHQpIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGhlbHAgcmVkdWNlIGl0XHJcblxyXG4gIGNvbnN0IHRvbGVyYW5jZSA9IEdNYXRoLkVQU0lMT04xNTtcclxuXHJcbiAgbGV0IG1heERpYWdvbmFsID0gMC4wO1xyXG4gIGxldCByb3RBeGlzID0gMTtcclxuXHJcbiAgLy8gZmluZCBwaXZvdCAocm90QXhpcykgYmFzZWQgb24gbWF4IGRpYWdvbmFsIG9mIG1hdHJpeFxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgKytpKSB7XHJcbiAgICBjb25zdCB0ZW1wID0gTWF0aC5hYnMoXHJcbiAgICAgIG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChjb2xWYWxbaV0sIHJvd1ZhbFtpXSldXHJcbiAgICApO1xyXG4gICAgaWYgKHRlbXAgPiBtYXhEaWFnb25hbCkge1xyXG4gICAgICByb3RBeGlzID0gaTtcclxuICAgICAgbWF4RGlhZ29uYWwgPSB0ZW1wO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IGMgPSAxLjA7XHJcbiAgbGV0IHMgPSAwLjA7XHJcblxyXG4gIGNvbnN0IHAgPSByb3dWYWxbcm90QXhpc107XHJcbiAgY29uc3QgcSA9IGNvbFZhbFtyb3RBeGlzXTtcclxuXHJcbiAgaWYgKE1hdGguYWJzKG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBwKV0pID4gdG9sZXJhbmNlKSB7XHJcbiAgICBjb25zdCBxcSA9IG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBxKV07XHJcbiAgICBjb25zdCBwcCA9IG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChwLCBwKV07XHJcbiAgICBjb25zdCBxcCA9IG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBwKV07XHJcblxyXG4gICAgY29uc3QgdGF1ID0gKHFxIC0gcHApIC8gMi4wIC8gcXA7XHJcbiAgICBsZXQgdDtcclxuXHJcbiAgICBpZiAodGF1IDwgMC4wKSB7XHJcbiAgICAgIHQgPSAtMS4wIC8gKC10YXUgKyBNYXRoLnNxcnQoMS4wICsgdGF1ICogdGF1KSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0ID0gMS4wIC8gKHRhdSArIE1hdGguc3FydCgxLjAgKyB0YXUgKiB0YXUpKTtcclxuICAgIH1cclxuXHJcbiAgICBjID0gMS4wIC8gTWF0aC5zcXJ0KDEuMCArIHQgKiB0KTtcclxuICAgIHMgPSB0ICogYztcclxuICB9XHJcblxyXG4gIHJlc3VsdCA9IE1hdHJpeDMuY2xvbmUoTWF0cml4My5JREVOVElUWSwgcmVzdWx0KTtcclxuXHJcbiAgcmVzdWx0W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KHAsIHApXSA9IHJlc3VsdFtcclxuICAgIE1hdHJpeDMuZ2V0RWxlbWVudEluZGV4KHEsIHEpXHJcbiAgXSA9IGM7XHJcbiAgcmVzdWx0W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KHEsIHApXSA9IHM7XHJcbiAgcmVzdWx0W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KHAsIHEpXSA9IC1zO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmNvbnN0IHNjcmF0Y2hUcmFuc3Bvc2VNYXRyaXggPSBuZXcgTWF0cml4MygpO1xyXG5leHBvcnQgZGVmYXVsdCBNYXRyaXgzO1xyXG4iLCJpbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi9WZWN0b3IzXCI7XHJcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuL1ZlY3RvcjRcIjtcclxuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XHJcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi91dGlscy9kZWZpbmVkXCI7XHJcbmltcG9ydCBHTWF0aCBmcm9tIFwiLi9NYXRoXCI7XHJcbmltcG9ydCBNYXRyaXgzIGZyb20gXCIuL01hdHJpeDNcIjtcclxuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gXCIuL1F1YXRlcm5pb25cIjtcclxuY2xhc3MgTWF0cml4NCB7XHJcblx0cHVibGljIHN0YXRpYyBJREVOVElUWSA9IE9iamVjdC5mcmVlemUoXHJcblx0XHRuZXcgTWF0cml4NCgxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjApXHJcblx0KTtcclxuXHRwdWJsaWMgc3RhdGljIFpFUk8gPSBPYmplY3QuZnJlZXplKFxyXG5cdFx0bmV3IE1hdHJpeDQoMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wKVxyXG5cdCk7XHJcblx0LyoqXHJcblx0ICogQSA0eDQgbWF0cml4LCBpbmRleGFibGUgYXMgYSBjb2x1bW4tbWFqb3Igb3JkZXIgYXJyYXkuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4wUm93MD0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDAsIHJvdyAwLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMVJvdzA9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAxLCByb3cgMC5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjJSb3cwPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMiwgcm93IDAuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4zUm93MD0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDMsIHJvdyAwLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMFJvdzE9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAwLCByb3cgMS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjFSb3cxPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMSwgcm93IDEuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4yUm93MT0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDIsIHJvdyAxLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uM1JvdzE9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAzLCByb3cgMS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjBSb3cyPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMCwgcm93IDIuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4xUm93Mj0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDEsIHJvdyAyLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMlJvdzI9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAyLCByb3cgMi5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjNSb3cyPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMywgcm93IDIuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4wUm93Mz0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDAsIHJvdyAzLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMVJvdzM9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAxLCByb3cgMy5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjJSb3czPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMiwgcm93IDMuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4zUm93Mz0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDMsIHJvdyAzLlxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0Y29sdW1uMFJvdzAgPSAwLFxyXG5cdFx0Y29sdW1uMVJvdzAgPSAwLFxyXG5cdFx0Y29sdW1uMlJvdzAgPSAwLFxyXG5cdFx0Y29sdW1uM1JvdzAgPSAwLFxyXG5cdFx0Y29sdW1uMFJvdzEgPSAwLFxyXG5cdFx0Y29sdW1uMVJvdzEgPSAwLFxyXG5cdFx0Y29sdW1uMlJvdzEgPSAwLFxyXG5cdFx0Y29sdW1uM1JvdzEgPSAwLFxyXG5cdFx0Y29sdW1uMFJvdzIgPSAwLFxyXG5cdFx0Y29sdW1uMVJvdzIgPSAwLFxyXG5cdFx0Y29sdW1uMlJvdzIgPSAwLFxyXG5cdFx0Y29sdW1uM1JvdzIgPSAwLFxyXG5cdFx0Y29sdW1uMFJvdzMgPSAwLFxyXG5cdFx0Y29sdW1uMVJvdzMgPSAwLFxyXG5cdFx0Y29sdW1uMlJvdzMgPSAwLFxyXG5cdFx0Y29sdW1uM1JvdzMgPSAwXHJcblx0KSB7XHJcblx0XHR0aGlzWzBdID0gY29sdW1uMFJvdzA7XHJcblx0XHR0aGlzWzFdID0gY29sdW1uMFJvdzE7XHJcblx0XHR0aGlzWzJdID0gY29sdW1uMFJvdzI7XHJcblx0XHR0aGlzWzNdID0gY29sdW1uMFJvdzM7XHJcblx0XHR0aGlzWzRdID0gY29sdW1uMVJvdzA7XHJcblx0XHR0aGlzWzVdID0gY29sdW1uMVJvdzE7XHJcblx0XHR0aGlzWzZdID0gY29sdW1uMVJvdzI7XHJcblx0XHR0aGlzWzddID0gY29sdW1uMVJvdzM7XHJcblx0XHR0aGlzWzhdID0gY29sdW1uMlJvdzA7XHJcblx0XHR0aGlzWzldID0gY29sdW1uMlJvdzE7XHJcblx0XHR0aGlzWzEwXSA9IGNvbHVtbjJSb3cyO1xyXG5cdFx0dGhpc1sxMV0gPSBjb2x1bW4yUm93MztcclxuXHRcdHRoaXNbMTJdID0gY29sdW1uM1JvdzA7XHJcblx0XHR0aGlzWzEzXSA9IGNvbHVtbjNSb3cxO1xyXG5cdFx0dGhpc1sxNF0gPSBjb2x1bW4zUm93MjtcclxuXHRcdHRoaXNbMTVdID0gY29sdW1uM1JvdzM7XHJcblx0fVxyXG5cdC8vPz8/P1xyXG5cdGNsb25lKHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0cmV0dXJuIE1hdHJpeDQuY2xvbmUodGhpcywgcmVzdWx0KTtcclxuXHR9XHJcblxyXG5cdGVxdWFscyhyaWdodDogTWF0cml4NCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIE1hdHJpeDQuZXF1YWxzKHRoaXMsIHJpZ2h0KTtcclxuXHR9XHJcblxyXG5cdGVxdWFsc0Vwc2lsb24ocmlnaHQ6IE1hdHJpeDQsIGVwc2lsb246IG51bWJlciA9IDApOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBNYXRyaXg0LmVxdWFsc0Vwc2lsb24odGhpcywgcmlnaHQsIGVwc2lsb24pO1xyXG5cdH1cclxuXHRsb29rQXQoZXllOiBWZWN0b3IzLCB0YXJnZXQ6IFZlY3RvcjMsIHVwOiBWZWN0b3IzKTogTWF0cml4NCB7XHJcblx0XHRjb25zdCBtYXRyaXggPSB0aGlzO1xyXG5cdFx0VmVjdG9yMy5zdWJ0cmFjdChleWUsIHRhcmdldCwgeik7XHJcblx0XHRpZiAoei5sZW5ndGgoKSA9PT0gMCkge1xyXG5cdFx0XHQvLyBleWUgYW5kIHRhcmdldCBhcmUgaW4gdGhlIHNhbWUgcG9zaXRpb25cclxuXHRcdFx0ei56ID0gMTtcclxuXHRcdH1cclxuXHRcdHoubm9ybWFsaXplKCk7XHJcblx0XHRWZWN0b3IzLmNyb3NzKHVwLCB6LCB4KTtcclxuXHRcdGlmICh4Lmxlbmd0aCgpID09PSAwKSB7XHJcblx0XHRcdC8vIHVwIGFuZCB6IGFyZSBwYXJhbGxlbFxyXG5cclxuXHRcdFx0aWYgKE1hdGguYWJzKHVwLnopID09PSAxKSB7XHJcblx0XHRcdFx0ei54ICs9IDAuMDAwMTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR6LnogKz0gMC4wMDAxO1xyXG5cdFx0XHR9XHJcblx0XHRcdHoubm9ybWFsaXplKCk7XHJcblx0XHRcdFZlY3RvcjMuY3Jvc3ModXAsIHosIHgpO1xyXG5cdFx0fVxyXG5cdFx0eC5ub3JtYWxpemUoKTtcclxuXHRcdFZlY3RvcjMuY3Jvc3MoeiwgeCwgeSk7XHJcblx0XHRtYXRyaXhbMF0gPSB4Lng7XHJcblx0XHRtYXRyaXhbNF0gPSB5Lng7XHJcblx0XHRtYXRyaXhbOF0gPSB6Lng7XHJcblx0XHRtYXRyaXhbMV0gPSB4Lnk7XHJcblx0XHRtYXRyaXhbNV0gPSB5Lnk7XHJcblx0XHRtYXRyaXhbOV0gPSB6Lnk7XHJcblx0XHRtYXRyaXhbMl0gPSB4Lno7XHJcblx0XHRtYXRyaXhbNl0gPSB5Lno7XHJcblx0XHRtYXRyaXhbMTBdID0gei56O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdGAoJHt0aGlzWzBdfSwgJHt0aGlzWzRdfSwgJHt0aGlzWzhdfSwgJHt0aGlzWzEyXX0pXFxuYCArXHJcblx0XHRcdGAoJHt0aGlzWzFdfSwgJHt0aGlzWzVdfSwgJHt0aGlzWzldfSwgJHt0aGlzWzEzXX0pXFxuYCArXHJcblx0XHRcdGAoJHt0aGlzWzJdfSwgJHt0aGlzWzZdfSwgJHt0aGlzWzEwXX0sICR7dGhpc1sxNF19KVxcbmAgK1xyXG5cdFx0XHRgKCR7dGhpc1szXX0sICR7dGhpc1s3XX0sICR7dGhpc1sxMV19LCAke3RoaXNbMTVdfSlgXHJcblx0XHQpO1xyXG5cdH1cclxuXHRzdGF0aWMgY2xvbmUobWF0cml4OiBNYXRyaXg0IHwgbnVtYmVyW10sIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0aWYgKCFkZWZpbmVkKG1hdHJpeCkpIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcblx0XHRcdHJldHVybiBuZXcgTWF0cml4NChcclxuXHRcdFx0XHRtYXRyaXhbMF0sXHJcblx0XHRcdFx0bWF0cml4WzRdLFxyXG5cdFx0XHRcdG1hdHJpeFs4XSxcclxuXHRcdFx0XHRtYXRyaXhbMTJdLFxyXG5cdFx0XHRcdG1hdHJpeFsxXSxcclxuXHRcdFx0XHRtYXRyaXhbNV0sXHJcblx0XHRcdFx0bWF0cml4WzldLFxyXG5cdFx0XHRcdG1hdHJpeFsxM10sXHJcblx0XHRcdFx0bWF0cml4WzJdLFxyXG5cdFx0XHRcdG1hdHJpeFs2XSxcclxuXHRcdFx0XHRtYXRyaXhbMTBdLFxyXG5cdFx0XHRcdG1hdHJpeFsxNF0sXHJcblx0XHRcdFx0bWF0cml4WzNdLFxyXG5cdFx0XHRcdG1hdHJpeFs3XSxcclxuXHRcdFx0XHRtYXRyaXhbMTFdLFxyXG5cdFx0XHRcdG1hdHJpeFsxNV1cclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXTtcclxuXHRcdHJlc3VsdFs0XSA9IG1hdHJpeFs0XTtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeFs1XTtcclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeFs2XTtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFs3XTtcclxuXHRcdHJlc3VsdFs4XSA9IG1hdHJpeFs4XTtcclxuXHRcdHJlc3VsdFs5XSA9IG1hdHJpeFs5XTtcclxuXHRcdHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdO1xyXG5cdFx0cmVzdWx0WzExXSA9IG1hdHJpeFsxMV07XHJcblx0XHRyZXN1bHRbMTJdID0gbWF0cml4WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdO1xyXG5cdFx0cmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbUNvbHVtbk1ham9yQXJyYXkodmFsdWVzOiBudW1iZXJbXSwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRyZXR1cm4gTWF0cml4NC5jbG9uZSh2YWx1ZXMsIHJlc3VsdCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbVJvd01ham9yQXJyYXkodmFsdWVzOiBudW1iZXJbXSwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoXHJcblx0XHRcdFx0dmFsdWVzWzBdLFxyXG5cdFx0XHRcdHZhbHVlc1sxXSxcclxuXHRcdFx0XHR2YWx1ZXNbMl0sXHJcblx0XHRcdFx0dmFsdWVzWzNdLFxyXG5cdFx0XHRcdHZhbHVlc1s0XSxcclxuXHRcdFx0XHR2YWx1ZXNbNV0sXHJcblx0XHRcdFx0dmFsdWVzWzZdLFxyXG5cdFx0XHRcdHZhbHVlc1s3XSxcclxuXHRcdFx0XHR2YWx1ZXNbOF0sXHJcblx0XHRcdFx0dmFsdWVzWzldLFxyXG5cdFx0XHRcdHZhbHVlc1sxMF0sXHJcblx0XHRcdFx0dmFsdWVzWzExXSxcclxuXHRcdFx0XHR2YWx1ZXNbMTJdLFxyXG5cdFx0XHRcdHZhbHVlc1sxM10sXHJcblx0XHRcdFx0dmFsdWVzWzE0XSxcclxuXHRcdFx0XHR2YWx1ZXNbMTVdXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0XHRyZXN1bHRbMF0gPSB2YWx1ZXNbMF07XHJcblx0XHRyZXN1bHRbMV0gPSB2YWx1ZXNbNF07XHJcblx0XHRyZXN1bHRbMl0gPSB2YWx1ZXNbOF07XHJcblx0XHRyZXN1bHRbM10gPSB2YWx1ZXNbMTJdO1xyXG5cdFx0cmVzdWx0WzRdID0gdmFsdWVzWzFdO1xyXG5cdFx0cmVzdWx0WzVdID0gdmFsdWVzWzVdO1xyXG5cdFx0cmVzdWx0WzZdID0gdmFsdWVzWzldO1xyXG5cdFx0cmVzdWx0WzddID0gdmFsdWVzWzEzXTtcclxuXHRcdHJlc3VsdFs4XSA9IHZhbHVlc1syXTtcclxuXHRcdHJlc3VsdFs5XSA9IHZhbHVlc1s2XTtcclxuXHRcdHJlc3VsdFsxMF0gPSB2YWx1ZXNbMTBdO1xyXG5cdFx0cmVzdWx0WzExXSA9IHZhbHVlc1sxNF07XHJcblx0XHRyZXN1bHRbMTJdID0gdmFsdWVzWzNdO1xyXG5cdFx0cmVzdWx0WzEzXSA9IHZhbHVlc1s3XTtcclxuXHRcdHJlc3VsdFsxNF0gPSB2YWx1ZXNbMTFdO1xyXG5cdFx0cmVzdWx0WzE1XSA9IHZhbHVlc1sxNV07XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKHJvdGF0aW9uOiBNYXRyaXgzLCB0cmFuc2xhdGlvbjogVmVjdG9yMywgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHR0cmFuc2xhdGlvbiA9IGRlZmF1bHRWYWx1ZSh0cmFuc2xhdGlvbiwgVmVjdG9yMy5aRVJPKTtcclxuXHJcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoXHJcblx0XHRcdFx0cm90YXRpb25bMF0sXHJcblx0XHRcdFx0cm90YXRpb25bM10sXHJcblx0XHRcdFx0cm90YXRpb25bNl0sXHJcblx0XHRcdFx0dHJhbnNsYXRpb24ueCxcclxuXHRcdFx0XHRyb3RhdGlvblsxXSxcclxuXHRcdFx0XHRyb3RhdGlvbls0XSxcclxuXHRcdFx0XHRyb3RhdGlvbls3XSxcclxuXHRcdFx0XHR0cmFuc2xhdGlvbi55LFxyXG5cdFx0XHRcdHJvdGF0aW9uWzJdLFxyXG5cdFx0XHRcdHJvdGF0aW9uWzVdLFxyXG5cdFx0XHRcdHJvdGF0aW9uWzhdLFxyXG5cdFx0XHRcdHRyYW5zbGF0aW9uLnosXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdDAuMCxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0MS4wXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gcm90YXRpb25bMF07XHJcblx0XHRyZXN1bHRbMV0gPSByb3RhdGlvblsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IHJvdGF0aW9uWzJdO1xyXG5cdFx0cmVzdWx0WzNdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzRdID0gcm90YXRpb25bM107XHJcblx0XHRyZXN1bHRbNV0gPSByb3RhdGlvbls0XTtcclxuXHRcdHJlc3VsdFs2XSA9IHJvdGF0aW9uWzVdO1xyXG5cdFx0cmVzdWx0WzddID0gMC4wO1xyXG5cdFx0cmVzdWx0WzhdID0gcm90YXRpb25bNl07XHJcblx0XHRyZXN1bHRbOV0gPSByb3RhdGlvbls3XTtcclxuXHRcdHJlc3VsdFsxMF0gPSByb3RhdGlvbls4XTtcclxuXHRcdHJlc3VsdFsxMV0gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTJdID0gdHJhbnNsYXRpb24ueDtcclxuXHRcdHJlc3VsdFsxM10gPSB0cmFuc2xhdGlvbi55O1xyXG5cdFx0cmVzdWx0WzE0XSA9IHRyYW5zbGF0aW9uLno7XHJcblx0XHRyZXN1bHRbMTVdID0gMS4wO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tVHJhbnNsYXRpb25RdWF0ZXJuaW9uUm90YXRpb25TY2FsZShcclxuXHRcdHRyYW5zbGF0aW9uOiBWZWN0b3IzLFxyXG5cdFx0cm90YXRpb246IFF1YXRlcm5pb24sXHJcblx0XHRzY2FsZTogVmVjdG9yMyxcclxuXHRcdHJlc3VsdDogTWF0cml4NFxyXG5cdCk6IE1hdHJpeDQge1xyXG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuXHRcdFx0cmVzdWx0ID0gbmV3IE1hdHJpeDQoKTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBzY2FsZVggPSBzY2FsZS54O1xyXG5cdFx0Y29uc3Qgc2NhbGVZID0gc2NhbGUueTtcclxuXHRcdGNvbnN0IHNjYWxlWiA9IHNjYWxlLno7XHJcblxyXG5cdFx0Y29uc3QgeDIgPSByb3RhdGlvbi54ICogcm90YXRpb24ueDtcclxuXHRcdGNvbnN0IHh5ID0gcm90YXRpb24ueCAqIHJvdGF0aW9uLnk7XHJcblx0XHRjb25zdCB4eiA9IHJvdGF0aW9uLnggKiByb3RhdGlvbi56O1xyXG5cdFx0Y29uc3QgeHcgPSByb3RhdGlvbi54ICogcm90YXRpb24udztcclxuXHRcdGNvbnN0IHkyID0gcm90YXRpb24ueSAqIHJvdGF0aW9uLnk7XHJcblx0XHRjb25zdCB5eiA9IHJvdGF0aW9uLnkgKiByb3RhdGlvbi56O1xyXG5cdFx0Y29uc3QgeXcgPSByb3RhdGlvbi55ICogcm90YXRpb24udztcclxuXHRcdGNvbnN0IHoyID0gcm90YXRpb24ueiAqIHJvdGF0aW9uLno7XHJcblx0XHRjb25zdCB6dyA9IHJvdGF0aW9uLnogKiByb3RhdGlvbi53O1xyXG5cdFx0Y29uc3QgdzIgPSByb3RhdGlvbi53ICogcm90YXRpb24udztcclxuXHJcblx0XHRjb25zdCBtMDAgPSB4MiAtIHkyIC0gejIgKyB3MjtcclxuXHRcdGNvbnN0IG0wMSA9IDIuMCAqICh4eSAtIHp3KTtcclxuXHRcdGNvbnN0IG0wMiA9IDIuMCAqICh4eiArIHl3KTtcclxuXHJcblx0XHRjb25zdCBtMTAgPSAyLjAgKiAoeHkgKyB6dyk7XHJcblx0XHRjb25zdCBtMTEgPSAteDIgKyB5MiAtIHoyICsgdzI7XHJcblx0XHRjb25zdCBtMTIgPSAyLjAgKiAoeXogLSB4dyk7XHJcblxyXG5cdFx0Y29uc3QgbTIwID0gMi4wICogKHh6IC0geXcpO1xyXG5cdFx0Y29uc3QgbTIxID0gMi4wICogKHl6ICsgeHcpO1xyXG5cdFx0Y29uc3QgbTIyID0gLXgyIC0geTIgKyB6MiArIHcyO1xyXG5cclxuXHRcdHJlc3VsdFswXSA9IG0wMCAqIHNjYWxlWDtcclxuXHRcdHJlc3VsdFsxXSA9IG0xMCAqIHNjYWxlWDtcclxuXHRcdHJlc3VsdFsyXSA9IG0yMCAqIHNjYWxlWDtcclxuXHRcdHJlc3VsdFszXSA9IDAuMDtcclxuXHRcdHJlc3VsdFs0XSA9IG0wMSAqIHNjYWxlWTtcclxuXHRcdHJlc3VsdFs1XSA9IG0xMSAqIHNjYWxlWTtcclxuXHRcdHJlc3VsdFs2XSA9IG0yMSAqIHNjYWxlWTtcclxuXHRcdHJlc3VsdFs3XSA9IDAuMDtcclxuXHRcdHJlc3VsdFs4XSA9IG0wMiAqIHNjYWxlWjtcclxuXHRcdHJlc3VsdFs5XSA9IG0xMiAqIHNjYWxlWjtcclxuXHRcdHJlc3VsdFsxMF0gPSBtMjIgKiBzY2FsZVo7XHJcblx0XHRyZXN1bHRbMTFdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzEyXSA9IHRyYW5zbGF0aW9uLng7XHJcblx0XHRyZXN1bHRbMTNdID0gdHJhbnNsYXRpb24ueTtcclxuXHRcdHJlc3VsdFsxNF0gPSB0cmFuc2xhdGlvbi56O1xyXG5cdFx0cmVzdWx0WzE1XSA9IDEuMDtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21UcmFuc2xhdGlvblJvdGF0aW9uU2NhbGUoXHJcblx0XHR0cmFuc2xhdGlvblJvdGF0aW9uU2NhbGU6IHtcclxuXHRcdFx0dHJhbnNsYXRpb246IFZlY3RvcjM7XHJcblx0XHRcdHJvdGF0aW9uOiBRdWF0ZXJuaW9uO1xyXG5cdFx0XHRzY2FsZTogVmVjdG9yMztcclxuXHRcdH0sXHJcblx0XHRyZXN1bHQ6IE1hdHJpeDRcclxuXHQpOiBNYXRyaXg0IHtcclxuXHRcdHJldHVybiBNYXRyaXg0LmZyb21UcmFuc2xhdGlvblF1YXRlcm5pb25Sb3RhdGlvblNjYWxlKFxyXG5cdFx0XHR0cmFuc2xhdGlvblJvdGF0aW9uU2NhbGUudHJhbnNsYXRpb24sXHJcblx0XHRcdHRyYW5zbGF0aW9uUm90YXRpb25TY2FsZS5yb3RhdGlvbixcclxuXHRcdFx0dHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlLnNjYWxlLFxyXG5cdFx0XHRyZXN1bHRcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbVRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uOiBWZWN0b3IzLCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdHJldHVybiBNYXRyaXg0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKE1hdHJpeDMuSURFTlRJVFksIHRyYW5zbGF0aW9uLCByZXN1bHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21TY2FsZShzY2FsZTogVmVjdG9yMywgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoXHJcblx0XHRcdFx0c2NhbGUueCxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdDAuMCxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0c2NhbGUueSxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdDAuMCxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0c2NhbGUueixcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdDAuMCxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0MS4wXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gc2NhbGUueDtcclxuXHRcdHJlc3VsdFsxXSA9IDAuMDtcclxuXHRcdHJlc3VsdFsyXSA9IDAuMDtcclxuXHRcdHJlc3VsdFszXSA9IDAuMDtcclxuXHRcdHJlc3VsdFs0XSA9IDAuMDtcclxuXHRcdHJlc3VsdFs1XSA9IHNjYWxlLnk7XHJcblx0XHRyZXN1bHRbNl0gPSAwLjA7XHJcblx0XHRyZXN1bHRbN10gPSAwLjA7XHJcblx0XHRyZXN1bHRbOF0gPSAwLjA7XHJcblx0XHRyZXN1bHRbOV0gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTBdID0gc2NhbGUuejtcclxuXHRcdHJlc3VsdFsxMV0gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTJdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzEzXSA9IDAuMDtcclxuXHRcdHJlc3VsdFsxNF0gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTVdID0gMS4wO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tUm90YXRpb24ocm90YXRpb246IE1hdHJpeDMsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuXHRcdFx0cmVzdWx0ID0gbmV3IE1hdHJpeDQoKTtcclxuXHRcdH1cclxuXHRcdHJlc3VsdFswXSA9IHJvdGF0aW9uWzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gcm90YXRpb25bMV07XHJcblx0XHRyZXN1bHRbMl0gPSByb3RhdGlvblsyXTtcclxuXHRcdHJlc3VsdFszXSA9IDAuMDtcclxuXHJcblx0XHRyZXN1bHRbNF0gPSByb3RhdGlvblszXTtcclxuXHRcdHJlc3VsdFs1XSA9IHJvdGF0aW9uWzRdO1xyXG5cdFx0cmVzdWx0WzZdID0gcm90YXRpb25bNV07XHJcblx0XHRyZXN1bHRbN10gPSAwLjA7XHJcblxyXG5cdFx0cmVzdWx0WzhdID0gcm90YXRpb25bNl07XHJcblx0XHRyZXN1bHRbOV0gPSByb3RhdGlvbls3XTtcclxuXHRcdHJlc3VsdFsxMF0gPSByb3RhdGlvbls4XTtcclxuXHRcdHJlc3VsdFsxMV0gPSAwLjA7XHJcblxyXG5cdFx0cmVzdWx0WzEyXSA9IDAuMDtcclxuXHRcdHJlc3VsdFsxM10gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTRdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzE1XSA9IDEuMDtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG1ha2VQZXJzcGVjdGl2ZShcclxuXHRcdGxlZnQ6IG51bWJlcixcclxuXHRcdHJpZ2h0OiBudW1iZXIsXHJcblx0XHR0b3A6IG51bWJlcixcclxuXHRcdGJvdHRvbTogbnVtYmVyLFxyXG5cdFx0bmVhcjogbnVtYmVyLFxyXG5cdFx0ZmFyOiBudW1iZXJcclxuXHQpOiBNYXRyaXg0IHtcclxuXHRcdC8vIGZyb20gdGhyZWUuanNcclxuXHRcdGNvbnN0IG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0XHRjb25zdCB4ID0gKDIgKiBuZWFyKSAvIChyaWdodCAtIGxlZnQpO1xyXG5cdFx0Y29uc3QgeSA9ICgyICogbmVhcikgLyAodG9wIC0gYm90dG9tKTtcclxuXHJcblx0XHRjb25zdCBhID0gKHJpZ2h0ICsgbGVmdCkgLyAocmlnaHQgLSBsZWZ0KTtcclxuXHRcdGNvbnN0IGIgPSAodG9wICsgYm90dG9tKSAvICh0b3AgLSBib3R0b20pO1xyXG5cdFx0Y29uc3QgYyA9IC1mYXIgLyAoZmFyIC0gbmVhcik7XHJcblx0XHRjb25zdCBkID0gKC1mYXIgKiBuZWFyKSAvIChmYXIgLSBuZWFyKTtcclxuXHJcblx0XHRtYXRyaXhbMF0gPSB4O1xyXG5cdFx0bWF0cml4WzRdID0gMDtcclxuXHRcdG1hdHJpeFs4XSA9IGE7XHJcblx0XHRtYXRyaXhbMTJdID0gMDtcclxuXHRcdG1hdHJpeFsxXSA9IDA7XHJcblx0XHRtYXRyaXhbNV0gPSB5O1xyXG5cdFx0bWF0cml4WzldID0gYjtcclxuXHRcdG1hdHJpeFsxM10gPSAwO1xyXG5cdFx0bWF0cml4WzJdID0gMDtcclxuXHRcdG1hdHJpeFs2XSA9IDA7XHJcblx0XHRtYXRyaXhbMTBdID0gYztcclxuXHRcdG1hdHJpeFsxNF0gPSBkO1xyXG5cdFx0bWF0cml4WzNdID0gMDtcclxuXHRcdG1hdHJpeFs3XSA9IDA7XHJcblx0XHRtYXRyaXhbMTFdID0gLTE7XHJcblx0XHRtYXRyaXhbMTVdID0gMDtcclxuXHRcdHJldHVybiBtYXRyaXg7XHJcblx0fVxyXG5cdHN0YXRpYyBtYWtlT3J0aG9ncmFwaGljKFxyXG5cdFx0bGVmdDogbnVtYmVyLFxyXG5cdFx0cmlnaHQ6IG51bWJlcixcclxuXHRcdHRvcDogbnVtYmVyLFxyXG5cdFx0Ym90dG9tOiBudW1iZXIsXHJcblx0XHRuZWFyOiBudW1iZXIsXHJcblx0XHRmYXI6IG51bWJlclxyXG5cdCk6IE1hdHJpeDQge1xyXG5cdFx0Y29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcclxuXHRcdGNvbnN0IHcgPSAxLjAgLyAocmlnaHQgLSBsZWZ0KTtcclxuXHRcdGNvbnN0IGggPSAxLjAgLyAodG9wIC0gYm90dG9tKTtcclxuXHRcdGNvbnN0IHAgPSAxLjAgLyAoZmFyIC0gbmVhcik7XHJcblxyXG5cdFx0Y29uc3QgeCA9IChyaWdodCArIGxlZnQpICogdztcclxuXHRcdGNvbnN0IHkgPSAodG9wICsgYm90dG9tKSAqIGg7XHJcblx0XHRjb25zdCB6ID0gbmVhciAqIHA7XHJcblxyXG5cdFx0bWF0cml4WzBdID0gMiAqIHc7XHJcblx0XHRtYXRyaXhbNF0gPSAwO1xyXG5cdFx0bWF0cml4WzhdID0gMDtcclxuXHRcdG1hdHJpeFsxMl0gPSAteDtcclxuXHRcdG1hdHJpeFsxXSA9IDA7XHJcblx0XHRtYXRyaXhbNV0gPSAyICogaDtcclxuXHRcdG1hdHJpeFs5XSA9IDA7XHJcblx0XHRtYXRyaXhbMTNdID0gLXk7XHJcblx0XHRtYXRyaXhbMl0gPSAwO1xyXG5cdFx0bWF0cml4WzZdID0gMDtcclxuXHRcdG1hdHJpeFsxMF0gPSAtMSAqIHA7XHJcblx0XHRtYXRyaXhbMTRdID0gLXo7XHJcblx0XHRtYXRyaXhbM10gPSAwO1xyXG5cdFx0bWF0cml4WzddID0gMDtcclxuXHRcdG1hdHJpeFsxMV0gPSAwO1xyXG5cdFx0bWF0cml4WzE1XSA9IDE7XHJcblx0XHRyZXR1cm4gbWF0cml4O1xyXG5cdH1cclxuXHR0b0FycmF5KCkge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gW107XHJcblx0XHRNYXRyaXg0LnRvQXJyYXkodGhpcywgcmVzdWx0KTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cdC8qKlxyXG5cdCAqIENvbXB1dGVzIGFuIEFycmF5IGZyb20gdGhlIHByb3ZpZGVkIE1hdHJpeDQgaW5zdGFuY2UuXHJcblx0ICogVGhlIGFycmF5IHdpbGwgYmUgaW4gY29sdW1uLW1ham9yIG9yZGVyLlxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogLy9jcmVhdGUgYW4gYXJyYXkgZnJvbSBhbiBpbnN0YW5jZSBvZiBNYXRyaXg0XHJcblx0ICogLy8gbSA9IFsxMC4wLCAxNC4wLCAxOC4wLCAyMi4wXVxyXG5cdCAqIC8vICAgICBbMTEuMCwgMTUuMCwgMTkuMCwgMjMuMF1cclxuXHQgKiAvLyAgICAgWzEyLjAsIDE2LjAsIDIwLjAsIDI0LjBdXHJcblx0ICogLy8gICAgIFsxMy4wLCAxNy4wLCAyMS4wLCAyNS4wXVxyXG5cdCAqIGNvbnN0IGEgPSBNYXRyaXg0LnRvQXJyYXkobSk7XHJcblx0ICpcclxuXHQgKiAvLyBtIHJlbWFpbnMgdGhlIHNhbWVcclxuXHQgKiAvL2NyZWF0ZXMgYSA9IFsxMC4wLCAxMS4wLCAxMi4wLCAxMy4wLCAxNC4wLCAxNS4wLCAxNi4wLCAxNy4wLCAxOC4wLCAxOS4wLCAyMC4wLCAyMS4wLCAyMi4wLCAyMy4wLCAyNC4wLCAyNS4wXVxyXG5cdCAqL1xyXG5cdHN0YXRpYyB0b0FycmF5KG1hdHJpeDogQXJyYXk8bnVtYmVyPiB8IE1hdHJpeDQsIHJlc3VsdDogQXJyYXk8bnVtYmVyPik6IEFycmF5PG51bWJlcj4ge1xyXG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuXHRcdFx0cmV0dXJuIFtcclxuXHRcdFx0XHRtYXRyaXhbMF0sXHJcblx0XHRcdFx0bWF0cml4WzFdLFxyXG5cdFx0XHRcdG1hdHJpeFsyXSxcclxuXHRcdFx0XHRtYXRyaXhbM10sXHJcblx0XHRcdFx0bWF0cml4WzRdLFxyXG5cdFx0XHRcdG1hdHJpeFs1XSxcclxuXHRcdFx0XHRtYXRyaXhbNl0sXHJcblx0XHRcdFx0bWF0cml4WzddLFxyXG5cdFx0XHRcdG1hdHJpeFs4XSxcclxuXHRcdFx0XHRtYXRyaXhbOV0sXHJcblx0XHRcdFx0bWF0cml4WzEwXSxcclxuXHRcdFx0XHRtYXRyaXhbMTFdLFxyXG5cdFx0XHRcdG1hdHJpeFsxMl0sXHJcblx0XHRcdFx0bWF0cml4WzEzXSxcclxuXHRcdFx0XHRtYXRyaXhbMTRdLFxyXG5cdFx0XHRcdG1hdHJpeFsxNV1cclxuXHRcdFx0XTtcclxuXHRcdH1cclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXTtcclxuXHRcdHJlc3VsdFs0XSA9IG1hdHJpeFs0XTtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeFs1XTtcclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeFs2XTtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFs3XTtcclxuXHRcdHJlc3VsdFs4XSA9IG1hdHJpeFs4XTtcclxuXHRcdHJlc3VsdFs5XSA9IG1hdHJpeFs5XTtcclxuXHRcdHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdO1xyXG5cdFx0cmVzdWx0WzExXSA9IG1hdHJpeFsxMV07XHJcblx0XHRyZXN1bHRbMTJdID0gbWF0cml4WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdO1xyXG5cdFx0cmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0RWxlbWVudEluZGV4KGNvbHVtbjogbnVtYmVyLCByb3c6IG51bWJlcik6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gY29sdW1uICogNCArIHJvdztcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRDb2x1bW4obWF0cml4OiBNYXRyaXg0LCBpbmRleDogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcclxuXHRcdGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCAqIDQ7XHJcblx0XHRjb25zdCB4ID0gbWF0cml4W3N0YXJ0SW5kZXhdO1xyXG5cdFx0Y29uc3QgeSA9IG1hdHJpeFtzdGFydEluZGV4ICsgMV07XHJcblx0XHRjb25zdCB6ID0gbWF0cml4W3N0YXJ0SW5kZXggKyAyXTtcclxuXHRcdGNvbnN0IHcgPSBtYXRyaXhbc3RhcnRJbmRleCArIDNdO1xyXG5cclxuXHRcdHJlc3VsdC54ID0geDtcclxuXHRcdHJlc3VsdC55ID0geTtcclxuXHRcdHJlc3VsdC56ID0gejtcclxuXHRcdHJlc3VsdC53ID0gdztcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc2V0Q29sdW1uKG1hdHJpeDogTWF0cml4NCwgaW5kZXg6IG51bWJlciwgY2FydGVzaWFuOiBWZWN0b3I0LCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdHJlc3VsdCA9IE1hdHJpeDQuY2xvbmUobWF0cml4LCByZXN1bHQpO1xyXG5cdFx0Y29uc3Qgc3RhcnRJbmRleCA9IGluZGV4ICogNDtcclxuXHRcdHJlc3VsdFtzdGFydEluZGV4XSA9IGNhcnRlc2lhbi54O1xyXG5cdFx0cmVzdWx0W3N0YXJ0SW5kZXggKyAxXSA9IGNhcnRlc2lhbi55O1xyXG5cdFx0cmVzdWx0W3N0YXJ0SW5kZXggKyAyXSA9IGNhcnRlc2lhbi56O1xyXG5cdFx0cmVzdWx0W3N0YXJ0SW5kZXggKyAzXSA9IGNhcnRlc2lhbi53O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRSb3cobWF0cml4OiBNYXRyaXg0LCBpbmRleDogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjQpOiBWZWN0b3I0IHtcclxuXHRcdGNvbnN0IHggPSBtYXRyaXhbaW5kZXhdO1xyXG5cdFx0Y29uc3QgeSA9IG1hdHJpeFtpbmRleCArIDRdO1xyXG5cdFx0Y29uc3QgeiA9IG1hdHJpeFtpbmRleCArIDhdO1xyXG5cdFx0Y29uc3QgdyA9IG1hdHJpeFtpbmRleCArIDEyXTtcclxuXHJcblx0XHRyZXN1bHQueCA9IHg7XHJcblx0XHRyZXN1bHQueSA9IHk7XHJcblx0XHRyZXN1bHQueiA9IHo7XHJcblx0XHRyZXN1bHQudyA9IHc7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHNldFJvdyhtYXRyaXg6IE1hdHJpeDQsIGluZGV4OiBudW1iZXIsIGNhcnRlc2lhbjogVmVjdG9yNCwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRyZXN1bHQgPSBNYXRyaXg0LmNsb25lKG1hdHJpeCwgcmVzdWx0KTtcclxuXHRcdHJlc3VsdFtpbmRleF0gPSBjYXJ0ZXNpYW4ueDtcclxuXHRcdHJlc3VsdFtpbmRleCArIDRdID0gY2FydGVzaWFuLnk7XHJcblx0XHRyZXN1bHRbaW5kZXggKyA4XSA9IGNhcnRlc2lhbi56O1xyXG5cdFx0cmVzdWx0W2luZGV4ICsgMTJdID0gY2FydGVzaWFuLnc7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHNldFRyYW5zbGF0aW9uKG1hdHJpeDogTWF0cml4NCwgdHJhbnNsYXRpb246IFZlY3RvcjMsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0cmVzdWx0WzBdID0gbWF0cml4WzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdO1xyXG5cdFx0cmVzdWx0WzJdID0gbWF0cml4WzJdO1xyXG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdO1xyXG5cclxuXHRcdHJlc3VsdFs0XSA9IG1hdHJpeFs0XTtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeFs1XTtcclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeFs2XTtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFs3XTtcclxuXHJcblx0XHRyZXN1bHRbOF0gPSBtYXRyaXhbOF07XHJcblx0XHRyZXN1bHRbOV0gPSBtYXRyaXhbOV07XHJcblx0XHRyZXN1bHRbMTBdID0gbWF0cml4WzEwXTtcclxuXHRcdHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdO1xyXG5cclxuXHRcdHJlc3VsdFsxMl0gPSB0cmFuc2xhdGlvbi54O1xyXG5cdFx0cmVzdWx0WzEzXSA9IHRyYW5zbGF0aW9uLnk7XHJcblx0XHRyZXN1bHRbMTRdID0gdHJhbnNsYXRpb24uejtcclxuXHRcdHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdO1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc2V0U2NhbGUobWF0cml4OiBNYXRyaXg0LCBzY2FsZTogVmVjdG9yMywgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRjb25zdCBleGlzdGluZ1NjYWxlID0gTWF0cml4NC5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDEpO1xyXG5cdFx0Y29uc3Qgc2NhbGVSYXRpb1ggPSBzY2FsZS54IC8gZXhpc3RpbmdTY2FsZS54O1xyXG5cdFx0Y29uc3Qgc2NhbGVSYXRpb1kgPSBzY2FsZS55IC8gZXhpc3RpbmdTY2FsZS55O1xyXG5cdFx0Y29uc3Qgc2NhbGVSYXRpb1ogPSBzY2FsZS56IC8gZXhpc3RpbmdTY2FsZS56O1xyXG5cclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlUmF0aW9YO1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGVSYXRpb1g7XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZVJhdGlvWDtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXTtcclxuXHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsZVJhdGlvWTtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxlUmF0aW9ZO1xyXG5cdFx0cmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGVSYXRpb1k7XHJcblx0XHRyZXN1bHRbN10gPSBtYXRyaXhbN107XHJcblxyXG5cdFx0cmVzdWx0WzhdID0gbWF0cml4WzhdICogc2NhbGVSYXRpb1o7XHJcblx0XHRyZXN1bHRbOV0gPSBtYXRyaXhbOV0gKiBzY2FsZVJhdGlvWjtcclxuXHRcdHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdICogc2NhbGVSYXRpb1o7XHJcblx0XHRyZXN1bHRbMTFdID0gbWF0cml4WzExXTtcclxuXHJcblx0XHRyZXN1bHRbMTJdID0gbWF0cml4WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdO1xyXG5cdFx0cmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldFNjYWxlKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcblx0XHRyZXN1bHQueCA9IFZlY3RvcjMubWFnbml0dWRlKFZlY3RvcjMuZnJvbUVsZW1lbnRzKG1hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbMl0sIHNjcmF0Y2hDb2x1bW4pKTtcclxuXHRcdHJlc3VsdC55ID0gVmVjdG9yMy5tYWduaXR1ZGUoVmVjdG9yMy5mcm9tRWxlbWVudHMobWF0cml4WzRdLCBtYXRyaXhbNV0sIG1hdHJpeFs2XSwgc2NyYXRjaENvbHVtbikpO1xyXG5cdFx0cmVzdWx0LnogPSBWZWN0b3IzLm1hZ25pdHVkZShWZWN0b3IzLmZyb21FbGVtZW50cyhtYXRyaXhbOF0sIG1hdHJpeFs5XSwgbWF0cml4WzEwXSwgc2NyYXRjaENvbHVtbikpO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRNYXhpbXVtU2NhbGUobWF0cml4OiBNYXRyaXg0KTogbnVtYmVyIHtcclxuXHRcdE1hdHJpeDQuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gzKTtcclxuXHRcdHJldHVybiBWZWN0b3IzLm1heGltdW1Db21wb25lbnQoc2NhbGVTY3JhdGNoMyk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc2V0Um90YXRpb24obWF0cml4OiBNYXRyaXg0LCByb3RhdGlvbjogTWF0cml4MywgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRjb25zdCBzY2FsZSA9IE1hdHJpeDQuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2g0KTtcclxuXHJcblx0XHRyZXN1bHRbMF0gPSByb3RhdGlvblswXSAqIHNjYWxlLng7XHJcblx0XHRyZXN1bHRbMV0gPSByb3RhdGlvblsxXSAqIHNjYWxlLng7XHJcblx0XHRyZXN1bHRbMl0gPSByb3RhdGlvblsyXSAqIHNjYWxlLng7XHJcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbM107XHJcblxyXG5cdFx0cmVzdWx0WzRdID0gcm90YXRpb25bM10gKiBzY2FsZS55O1xyXG5cdFx0cmVzdWx0WzVdID0gcm90YXRpb25bNF0gKiBzY2FsZS55O1xyXG5cdFx0cmVzdWx0WzZdID0gcm90YXRpb25bNV0gKiBzY2FsZS55O1xyXG5cdFx0cmVzdWx0WzddID0gbWF0cml4WzddO1xyXG5cclxuXHRcdHJlc3VsdFs4XSA9IHJvdGF0aW9uWzZdICogc2NhbGUuejtcclxuXHRcdHJlc3VsdFs5XSA9IHJvdGF0aW9uWzddICogc2NhbGUuejtcclxuXHRcdHJlc3VsdFsxMF0gPSByb3RhdGlvbls4XSAqIHNjYWxlLno7XHJcblx0XHRyZXN1bHRbMTFdID0gbWF0cml4WzExXTtcclxuXHJcblx0XHRyZXN1bHRbMTJdID0gbWF0cml4WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdO1xyXG5cdFx0cmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldFJvdGF0aW9uKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcblx0XHRjb25zdCBzY2FsZSA9IE1hdHJpeDQuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2g1KTtcclxuXHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF0gLyBzY2FsZS54O1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdIC8gc2NhbGUueDtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAvIHNjYWxlLng7XHJcblxyXG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzRdIC8gc2NhbGUueTtcclxuXHRcdHJlc3VsdFs0XSA9IG1hdHJpeFs1XSAvIHNjYWxlLnk7XHJcblx0XHRyZXN1bHRbNV0gPSBtYXRyaXhbNl0gLyBzY2FsZS55O1xyXG5cclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeFs4XSAvIHNjYWxlLno7XHJcblx0XHRyZXN1bHRbN10gPSBtYXRyaXhbOV0gLyBzY2FsZS56O1xyXG5cdFx0cmVzdWx0WzhdID0gbWF0cml4WzEwXSAvIHNjYWxlLno7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtdWx0aXBseShsZWZ0OiBNYXRyaXg0LCByaWdodDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRjb25zdCBsZWZ0MCA9IGxlZnRbMF07XHJcblx0XHRjb25zdCBsZWZ0MSA9IGxlZnRbMV07XHJcblx0XHRjb25zdCBsZWZ0MiA9IGxlZnRbMl07XHJcblx0XHRjb25zdCBsZWZ0MyA9IGxlZnRbM107XHJcblx0XHRjb25zdCBsZWZ0NCA9IGxlZnRbNF07XHJcblx0XHRjb25zdCBsZWZ0NSA9IGxlZnRbNV07XHJcblx0XHRjb25zdCBsZWZ0NiA9IGxlZnRbNl07XHJcblx0XHRjb25zdCBsZWZ0NyA9IGxlZnRbN107XHJcblx0XHRjb25zdCBsZWZ0OCA9IGxlZnRbOF07XHJcblx0XHRjb25zdCBsZWZ0OSA9IGxlZnRbOV07XHJcblx0XHRjb25zdCBsZWZ0MTAgPSBsZWZ0WzEwXTtcclxuXHRcdGNvbnN0IGxlZnQxMSA9IGxlZnRbMTFdO1xyXG5cdFx0Y29uc3QgbGVmdDEyID0gbGVmdFsxMl07XHJcblx0XHRjb25zdCBsZWZ0MTMgPSBsZWZ0WzEzXTtcclxuXHRcdGNvbnN0IGxlZnQxNCA9IGxlZnRbMTRdO1xyXG5cdFx0Y29uc3QgbGVmdDE1ID0gbGVmdFsxNV07XHJcblxyXG5cdFx0Y29uc3QgcmlnaHQwID0gcmlnaHRbMF07XHJcblx0XHRjb25zdCByaWdodDEgPSByaWdodFsxXTtcclxuXHRcdGNvbnN0IHJpZ2h0MiA9IHJpZ2h0WzJdO1xyXG5cdFx0Y29uc3QgcmlnaHQzID0gcmlnaHRbM107XHJcblx0XHRjb25zdCByaWdodDQgPSByaWdodFs0XTtcclxuXHRcdGNvbnN0IHJpZ2h0NSA9IHJpZ2h0WzVdO1xyXG5cdFx0Y29uc3QgcmlnaHQ2ID0gcmlnaHRbNl07XHJcblx0XHRjb25zdCByaWdodDcgPSByaWdodFs3XTtcclxuXHRcdGNvbnN0IHJpZ2h0OCA9IHJpZ2h0WzhdO1xyXG5cdFx0Y29uc3QgcmlnaHQ5ID0gcmlnaHRbOV07XHJcblx0XHRjb25zdCByaWdodDEwID0gcmlnaHRbMTBdO1xyXG5cdFx0Y29uc3QgcmlnaHQxMSA9IHJpZ2h0WzExXTtcclxuXHRcdGNvbnN0IHJpZ2h0MTIgPSByaWdodFsxMl07XHJcblx0XHRjb25zdCByaWdodDEzID0gcmlnaHRbMTNdO1xyXG5cdFx0Y29uc3QgcmlnaHQxNCA9IHJpZ2h0WzE0XTtcclxuXHRcdGNvbnN0IHJpZ2h0MTUgPSByaWdodFsxNV07XHJcblxyXG5cdFx0Y29uc3QgY29sdW1uMFJvdzAgPSBsZWZ0MCAqIHJpZ2h0MCArIGxlZnQ0ICogcmlnaHQxICsgbGVmdDggKiByaWdodDIgKyBsZWZ0MTIgKiByaWdodDM7XHJcblx0XHRjb25zdCBjb2x1bW4wUm93MSA9IGxlZnQxICogcmlnaHQwICsgbGVmdDUgKiByaWdodDEgKyBsZWZ0OSAqIHJpZ2h0MiArIGxlZnQxMyAqIHJpZ2h0MztcclxuXHRcdGNvbnN0IGNvbHVtbjBSb3cyID0gbGVmdDIgKiByaWdodDAgKyBsZWZ0NiAqIHJpZ2h0MSArIGxlZnQxMCAqIHJpZ2h0MiArIGxlZnQxNCAqIHJpZ2h0MztcclxuXHRcdGNvbnN0IGNvbHVtbjBSb3czID0gbGVmdDMgKiByaWdodDAgKyBsZWZ0NyAqIHJpZ2h0MSArIGxlZnQxMSAqIHJpZ2h0MiArIGxlZnQxNSAqIHJpZ2h0MztcclxuXHJcblx0XHRjb25zdCBjb2x1bW4xUm93MCA9IGxlZnQwICogcmlnaHQ0ICsgbGVmdDQgKiByaWdodDUgKyBsZWZ0OCAqIHJpZ2h0NiArIGxlZnQxMiAqIHJpZ2h0NztcclxuXHRcdGNvbnN0IGNvbHVtbjFSb3cxID0gbGVmdDEgKiByaWdodDQgKyBsZWZ0NSAqIHJpZ2h0NSArIGxlZnQ5ICogcmlnaHQ2ICsgbGVmdDEzICogcmlnaHQ3O1xyXG5cdFx0Y29uc3QgY29sdW1uMVJvdzIgPSBsZWZ0MiAqIHJpZ2h0NCArIGxlZnQ2ICogcmlnaHQ1ICsgbGVmdDEwICogcmlnaHQ2ICsgbGVmdDE0ICogcmlnaHQ3O1xyXG5cdFx0Y29uc3QgY29sdW1uMVJvdzMgPSBsZWZ0MyAqIHJpZ2h0NCArIGxlZnQ3ICogcmlnaHQ1ICsgbGVmdDExICogcmlnaHQ2ICsgbGVmdDE1ICogcmlnaHQ3O1xyXG5cclxuXHRcdGNvbnN0IGNvbHVtbjJSb3cwID0gbGVmdDAgKiByaWdodDggKyBsZWZ0NCAqIHJpZ2h0OSArIGxlZnQ4ICogcmlnaHQxMCArIGxlZnQxMiAqIHJpZ2h0MTE7XHJcblx0XHRjb25zdCBjb2x1bW4yUm93MSA9IGxlZnQxICogcmlnaHQ4ICsgbGVmdDUgKiByaWdodDkgKyBsZWZ0OSAqIHJpZ2h0MTAgKyBsZWZ0MTMgKiByaWdodDExO1xyXG5cdFx0Y29uc3QgY29sdW1uMlJvdzIgPSBsZWZ0MiAqIHJpZ2h0OCArIGxlZnQ2ICogcmlnaHQ5ICsgbGVmdDEwICogcmlnaHQxMCArIGxlZnQxNCAqIHJpZ2h0MTE7XHJcblx0XHRjb25zdCBjb2x1bW4yUm93MyA9IGxlZnQzICogcmlnaHQ4ICsgbGVmdDcgKiByaWdodDkgKyBsZWZ0MTEgKiByaWdodDEwICsgbGVmdDE1ICogcmlnaHQxMTtcclxuXHJcblx0XHRjb25zdCBjb2x1bW4zUm93MCA9IGxlZnQwICogcmlnaHQxMiArIGxlZnQ0ICogcmlnaHQxMyArIGxlZnQ4ICogcmlnaHQxNCArIGxlZnQxMiAqIHJpZ2h0MTU7XHJcblx0XHRjb25zdCBjb2x1bW4zUm93MSA9IGxlZnQxICogcmlnaHQxMiArIGxlZnQ1ICogcmlnaHQxMyArIGxlZnQ5ICogcmlnaHQxNCArIGxlZnQxMyAqIHJpZ2h0MTU7XHJcblx0XHRjb25zdCBjb2x1bW4zUm93MiA9IGxlZnQyICogcmlnaHQxMiArIGxlZnQ2ICogcmlnaHQxMyArIGxlZnQxMCAqIHJpZ2h0MTQgKyBsZWZ0MTQgKiByaWdodDE1O1xyXG5cdFx0Y29uc3QgY29sdW1uM1JvdzMgPSBsZWZ0MyAqIHJpZ2h0MTIgKyBsZWZ0NyAqIHJpZ2h0MTMgKyBsZWZ0MTEgKiByaWdodDE0ICsgbGVmdDE1ICogcmlnaHQxNTtcclxuXHJcblx0XHRyZXN1bHRbMF0gPSBjb2x1bW4wUm93MDtcclxuXHRcdHJlc3VsdFsxXSA9IGNvbHVtbjBSb3cxO1xyXG5cdFx0cmVzdWx0WzJdID0gY29sdW1uMFJvdzI7XHJcblx0XHRyZXN1bHRbM10gPSBjb2x1bW4wUm93MztcclxuXHRcdHJlc3VsdFs0XSA9IGNvbHVtbjFSb3cwO1xyXG5cdFx0cmVzdWx0WzVdID0gY29sdW1uMVJvdzE7XHJcblx0XHRyZXN1bHRbNl0gPSBjb2x1bW4xUm93MjtcclxuXHRcdHJlc3VsdFs3XSA9IGNvbHVtbjFSb3czO1xyXG5cdFx0cmVzdWx0WzhdID0gY29sdW1uMlJvdzA7XHJcblx0XHRyZXN1bHRbOV0gPSBjb2x1bW4yUm93MTtcclxuXHRcdHJlc3VsdFsxMF0gPSBjb2x1bW4yUm93MjtcclxuXHRcdHJlc3VsdFsxMV0gPSBjb2x1bW4yUm93MztcclxuXHRcdHJlc3VsdFsxMl0gPSBjb2x1bW4zUm93MDtcclxuXHRcdHJlc3VsdFsxM10gPSBjb2x1bW4zUm93MTtcclxuXHRcdHJlc3VsdFsxNF0gPSBjb2x1bW4zUm93MjtcclxuXHRcdHJlc3VsdFsxNV0gPSBjb2x1bW4zUm93MztcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkKGxlZnQ6IE1hdHJpeDQsIHJpZ2h0OiBNYXRyaXg0LCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdHJlc3VsdFswXSA9IGxlZnRbMF0gKyByaWdodFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IGxlZnRbMV0gKyByaWdodFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IGxlZnRbMl0gKyByaWdodFsyXTtcclxuXHRcdHJlc3VsdFszXSA9IGxlZnRbM10gKyByaWdodFszXTtcclxuXHRcdHJlc3VsdFs0XSA9IGxlZnRbNF0gKyByaWdodFs0XTtcclxuXHRcdHJlc3VsdFs1XSA9IGxlZnRbNV0gKyByaWdodFs1XTtcclxuXHRcdHJlc3VsdFs2XSA9IGxlZnRbNl0gKyByaWdodFs2XTtcclxuXHRcdHJlc3VsdFs3XSA9IGxlZnRbN10gKyByaWdodFs3XTtcclxuXHRcdHJlc3VsdFs4XSA9IGxlZnRbOF0gKyByaWdodFs4XTtcclxuXHRcdHJlc3VsdFs5XSA9IGxlZnRbOV0gKyByaWdodFs5XTtcclxuXHRcdHJlc3VsdFsxMF0gPSBsZWZ0WzEwXSArIHJpZ2h0WzEwXTtcclxuXHRcdHJlc3VsdFsxMV0gPSBsZWZ0WzExXSArIHJpZ2h0WzExXTtcclxuXHRcdHJlc3VsdFsxMl0gPSBsZWZ0WzEyXSArIHJpZ2h0WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSBsZWZ0WzEzXSArIHJpZ2h0WzEzXTtcclxuXHRcdHJlc3VsdFsxNF0gPSBsZWZ0WzE0XSArIHJpZ2h0WzE0XTtcclxuXHRcdHJlc3VsdFsxNV0gPSBsZWZ0WzE1XSArIHJpZ2h0WzE1XTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc3VidHJhY3QobGVmdDogTWF0cml4NCwgcmlnaHQ6IE1hdHJpeDQsIHJlc3VsdDogTWF0cml4NCkge1xyXG5cdFx0cmVzdWx0WzBdID0gbGVmdFswXSAtIHJpZ2h0WzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gbGVmdFsxXSAtIHJpZ2h0WzFdO1xyXG5cdFx0cmVzdWx0WzJdID0gbGVmdFsyXSAtIHJpZ2h0WzJdO1xyXG5cdFx0cmVzdWx0WzNdID0gbGVmdFszXSAtIHJpZ2h0WzNdO1xyXG5cdFx0cmVzdWx0WzRdID0gbGVmdFs0XSAtIHJpZ2h0WzRdO1xyXG5cdFx0cmVzdWx0WzVdID0gbGVmdFs1XSAtIHJpZ2h0WzVdO1xyXG5cdFx0cmVzdWx0WzZdID0gbGVmdFs2XSAtIHJpZ2h0WzZdO1xyXG5cdFx0cmVzdWx0WzddID0gbGVmdFs3XSAtIHJpZ2h0WzddO1xyXG5cdFx0cmVzdWx0WzhdID0gbGVmdFs4XSAtIHJpZ2h0WzhdO1xyXG5cdFx0cmVzdWx0WzldID0gbGVmdFs5XSAtIHJpZ2h0WzldO1xyXG5cdFx0cmVzdWx0WzEwXSA9IGxlZnRbMTBdIC0gcmlnaHRbMTBdO1xyXG5cdFx0cmVzdWx0WzExXSA9IGxlZnRbMTFdIC0gcmlnaHRbMTFdO1xyXG5cdFx0cmVzdWx0WzEyXSA9IGxlZnRbMTJdIC0gcmlnaHRbMTJdO1xyXG5cdFx0cmVzdWx0WzEzXSA9IGxlZnRbMTNdIC0gcmlnaHRbMTNdO1xyXG5cdFx0cmVzdWx0WzE0XSA9IGxlZnRbMTRdIC0gcmlnaHRbMTRdO1xyXG5cdFx0cmVzdWx0WzE1XSA9IGxlZnRbMTVdIC0gcmlnaHRbMTVdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtdWx0aXBseVRyYW5zZm9ybWF0aW9uKGxlZnQ6IE1hdHJpeDQsIHJpZ2h0OiBNYXRyaXg0LCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdGNvbnN0IGxlZnQwID0gbGVmdFswXTtcclxuXHRcdGNvbnN0IGxlZnQxID0gbGVmdFsxXTtcclxuXHRcdGNvbnN0IGxlZnQyID0gbGVmdFsyXTtcclxuXHRcdGNvbnN0IGxlZnQ0ID0gbGVmdFs0XTtcclxuXHRcdGNvbnN0IGxlZnQ1ID0gbGVmdFs1XTtcclxuXHRcdGNvbnN0IGxlZnQ2ID0gbGVmdFs2XTtcclxuXHRcdGNvbnN0IGxlZnQ4ID0gbGVmdFs4XTtcclxuXHRcdGNvbnN0IGxlZnQ5ID0gbGVmdFs5XTtcclxuXHRcdGNvbnN0IGxlZnQxMCA9IGxlZnRbMTBdO1xyXG5cdFx0Y29uc3QgbGVmdDEyID0gbGVmdFsxMl07XHJcblx0XHRjb25zdCBsZWZ0MTMgPSBsZWZ0WzEzXTtcclxuXHRcdGNvbnN0IGxlZnQxNCA9IGxlZnRbMTRdO1xyXG5cclxuXHRcdGNvbnN0IHJpZ2h0MCA9IHJpZ2h0WzBdO1xyXG5cdFx0Y29uc3QgcmlnaHQxID0gcmlnaHRbMV07XHJcblx0XHRjb25zdCByaWdodDIgPSByaWdodFsyXTtcclxuXHRcdGNvbnN0IHJpZ2h0NCA9IHJpZ2h0WzRdO1xyXG5cdFx0Y29uc3QgcmlnaHQ1ID0gcmlnaHRbNV07XHJcblx0XHRjb25zdCByaWdodDYgPSByaWdodFs2XTtcclxuXHRcdGNvbnN0IHJpZ2h0OCA9IHJpZ2h0WzhdO1xyXG5cdFx0Y29uc3QgcmlnaHQ5ID0gcmlnaHRbOV07XHJcblx0XHRjb25zdCByaWdodDEwID0gcmlnaHRbMTBdO1xyXG5cdFx0Y29uc3QgcmlnaHQxMiA9IHJpZ2h0WzEyXTtcclxuXHRcdGNvbnN0IHJpZ2h0MTMgPSByaWdodFsxM107XHJcblx0XHRjb25zdCByaWdodDE0ID0gcmlnaHRbMTRdO1xyXG5cclxuXHRcdGNvbnN0IGNvbHVtbjBSb3cwID0gbGVmdDAgKiByaWdodDAgKyBsZWZ0NCAqIHJpZ2h0MSArIGxlZnQ4ICogcmlnaHQyO1xyXG5cdFx0Y29uc3QgY29sdW1uMFJvdzEgPSBsZWZ0MSAqIHJpZ2h0MCArIGxlZnQ1ICogcmlnaHQxICsgbGVmdDkgKiByaWdodDI7XHJcblx0XHRjb25zdCBjb2x1bW4wUm93MiA9IGxlZnQyICogcmlnaHQwICsgbGVmdDYgKiByaWdodDEgKyBsZWZ0MTAgKiByaWdodDI7XHJcblxyXG5cdFx0Y29uc3QgY29sdW1uMVJvdzAgPSBsZWZ0MCAqIHJpZ2h0NCArIGxlZnQ0ICogcmlnaHQ1ICsgbGVmdDggKiByaWdodDY7XHJcblx0XHRjb25zdCBjb2x1bW4xUm93MSA9IGxlZnQxICogcmlnaHQ0ICsgbGVmdDUgKiByaWdodDUgKyBsZWZ0OSAqIHJpZ2h0NjtcclxuXHRcdGNvbnN0IGNvbHVtbjFSb3cyID0gbGVmdDIgKiByaWdodDQgKyBsZWZ0NiAqIHJpZ2h0NSArIGxlZnQxMCAqIHJpZ2h0NjtcclxuXHJcblx0XHRjb25zdCBjb2x1bW4yUm93MCA9IGxlZnQwICogcmlnaHQ4ICsgbGVmdDQgKiByaWdodDkgKyBsZWZ0OCAqIHJpZ2h0MTA7XHJcblx0XHRjb25zdCBjb2x1bW4yUm93MSA9IGxlZnQxICogcmlnaHQ4ICsgbGVmdDUgKiByaWdodDkgKyBsZWZ0OSAqIHJpZ2h0MTA7XHJcblx0XHRjb25zdCBjb2x1bW4yUm93MiA9IGxlZnQyICogcmlnaHQ4ICsgbGVmdDYgKiByaWdodDkgKyBsZWZ0MTAgKiByaWdodDEwO1xyXG5cclxuXHRcdGNvbnN0IGNvbHVtbjNSb3cwID0gbGVmdDAgKiByaWdodDEyICsgbGVmdDQgKiByaWdodDEzICsgbGVmdDggKiByaWdodDE0ICsgbGVmdDEyO1xyXG5cdFx0Y29uc3QgY29sdW1uM1JvdzEgPSBsZWZ0MSAqIHJpZ2h0MTIgKyBsZWZ0NSAqIHJpZ2h0MTMgKyBsZWZ0OSAqIHJpZ2h0MTQgKyBsZWZ0MTM7XHJcblx0XHRjb25zdCBjb2x1bW4zUm93MiA9IGxlZnQyICogcmlnaHQxMiArIGxlZnQ2ICogcmlnaHQxMyArIGxlZnQxMCAqIHJpZ2h0MTQgKyBsZWZ0MTQ7XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gY29sdW1uMFJvdzA7XHJcblx0XHRyZXN1bHRbMV0gPSBjb2x1bW4wUm93MTtcclxuXHRcdHJlc3VsdFsyXSA9IGNvbHVtbjBSb3cyO1xyXG5cdFx0cmVzdWx0WzNdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzRdID0gY29sdW1uMVJvdzA7XHJcblx0XHRyZXN1bHRbNV0gPSBjb2x1bW4xUm93MTtcclxuXHRcdHJlc3VsdFs2XSA9IGNvbHVtbjFSb3cyO1xyXG5cdFx0cmVzdWx0WzddID0gMC4wO1xyXG5cdFx0cmVzdWx0WzhdID0gY29sdW1uMlJvdzA7XHJcblx0XHRyZXN1bHRbOV0gPSBjb2x1bW4yUm93MTtcclxuXHRcdHJlc3VsdFsxMF0gPSBjb2x1bW4yUm93MjtcclxuXHRcdHJlc3VsdFsxMV0gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTJdID0gY29sdW1uM1JvdzA7XHJcblx0XHRyZXN1bHRbMTNdID0gY29sdW1uM1JvdzE7XHJcblx0XHRyZXN1bHRbMTRdID0gY29sdW1uM1JvdzI7XHJcblx0XHRyZXN1bHRbMTVdID0gMS4wO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtdWx0aXBseUJ5TWF0cml4MyhtYXRyaXg6IE1hdHJpeDQsIHJvdGF0aW9uOiBNYXRyaXgzLCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdGNvbnN0IGxlZnQwID0gbWF0cml4WzBdO1xyXG5cdFx0Y29uc3QgbGVmdDEgPSBtYXRyaXhbMV07XHJcblx0XHRjb25zdCBsZWZ0MiA9IG1hdHJpeFsyXTtcclxuXHRcdGNvbnN0IGxlZnQ0ID0gbWF0cml4WzRdO1xyXG5cdFx0Y29uc3QgbGVmdDUgPSBtYXRyaXhbNV07XHJcblx0XHRjb25zdCBsZWZ0NiA9IG1hdHJpeFs2XTtcclxuXHRcdGNvbnN0IGxlZnQ4ID0gbWF0cml4WzhdO1xyXG5cdFx0Y29uc3QgbGVmdDkgPSBtYXRyaXhbOV07XHJcblx0XHRjb25zdCBsZWZ0MTAgPSBtYXRyaXhbMTBdO1xyXG5cclxuXHRcdGNvbnN0IHJpZ2h0MCA9IHJvdGF0aW9uWzBdO1xyXG5cdFx0Y29uc3QgcmlnaHQxID0gcm90YXRpb25bMV07XHJcblx0XHRjb25zdCByaWdodDIgPSByb3RhdGlvblsyXTtcclxuXHRcdGNvbnN0IHJpZ2h0NCA9IHJvdGF0aW9uWzNdO1xyXG5cdFx0Y29uc3QgcmlnaHQ1ID0gcm90YXRpb25bNF07XHJcblx0XHRjb25zdCByaWdodDYgPSByb3RhdGlvbls1XTtcclxuXHRcdGNvbnN0IHJpZ2h0OCA9IHJvdGF0aW9uWzZdO1xyXG5cdFx0Y29uc3QgcmlnaHQ5ID0gcm90YXRpb25bN107XHJcblx0XHRjb25zdCByaWdodDEwID0gcm90YXRpb25bOF07XHJcblxyXG5cdFx0Y29uc3QgY29sdW1uMFJvdzAgPSBsZWZ0MCAqIHJpZ2h0MCArIGxlZnQ0ICogcmlnaHQxICsgbGVmdDggKiByaWdodDI7XHJcblx0XHRjb25zdCBjb2x1bW4wUm93MSA9IGxlZnQxICogcmlnaHQwICsgbGVmdDUgKiByaWdodDEgKyBsZWZ0OSAqIHJpZ2h0MjtcclxuXHRcdGNvbnN0IGNvbHVtbjBSb3cyID0gbGVmdDIgKiByaWdodDAgKyBsZWZ0NiAqIHJpZ2h0MSArIGxlZnQxMCAqIHJpZ2h0MjtcclxuXHJcblx0XHRjb25zdCBjb2x1bW4xUm93MCA9IGxlZnQwICogcmlnaHQ0ICsgbGVmdDQgKiByaWdodDUgKyBsZWZ0OCAqIHJpZ2h0NjtcclxuXHRcdGNvbnN0IGNvbHVtbjFSb3cxID0gbGVmdDEgKiByaWdodDQgKyBsZWZ0NSAqIHJpZ2h0NSArIGxlZnQ5ICogcmlnaHQ2O1xyXG5cdFx0Y29uc3QgY29sdW1uMVJvdzIgPSBsZWZ0MiAqIHJpZ2h0NCArIGxlZnQ2ICogcmlnaHQ1ICsgbGVmdDEwICogcmlnaHQ2O1xyXG5cclxuXHRcdGNvbnN0IGNvbHVtbjJSb3cwID0gbGVmdDAgKiByaWdodDggKyBsZWZ0NCAqIHJpZ2h0OSArIGxlZnQ4ICogcmlnaHQxMDtcclxuXHRcdGNvbnN0IGNvbHVtbjJSb3cxID0gbGVmdDEgKiByaWdodDggKyBsZWZ0NSAqIHJpZ2h0OSArIGxlZnQ5ICogcmlnaHQxMDtcclxuXHRcdGNvbnN0IGNvbHVtbjJSb3cyID0gbGVmdDIgKiByaWdodDggKyBsZWZ0NiAqIHJpZ2h0OSArIGxlZnQxMCAqIHJpZ2h0MTA7XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gY29sdW1uMFJvdzA7XHJcblx0XHRyZXN1bHRbMV0gPSBjb2x1bW4wUm93MTtcclxuXHRcdHJlc3VsdFsyXSA9IGNvbHVtbjBSb3cyO1xyXG5cdFx0cmVzdWx0WzNdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzRdID0gY29sdW1uMVJvdzA7XHJcblx0XHRyZXN1bHRbNV0gPSBjb2x1bW4xUm93MTtcclxuXHRcdHJlc3VsdFs2XSA9IGNvbHVtbjFSb3cyO1xyXG5cdFx0cmVzdWx0WzddID0gMC4wO1xyXG5cdFx0cmVzdWx0WzhdID0gY29sdW1uMlJvdzA7XHJcblx0XHRyZXN1bHRbOV0gPSBjb2x1bW4yUm93MTtcclxuXHRcdHJlc3VsdFsxMF0gPSBjb2x1bW4yUm93MjtcclxuXHRcdHJlc3VsdFsxMV0gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTJdID0gbWF0cml4WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdO1xyXG5cdFx0cmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlCeVRyYW5zbGF0aW9uKG1hdHJpeDogTWF0cml4NCwgdHJhbnNsYXRpb246IFZlY3RvcjMsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0Y29uc3QgeCA9IHRyYW5zbGF0aW9uLng7XHJcblx0XHRjb25zdCB5ID0gdHJhbnNsYXRpb24ueTtcclxuXHRcdGNvbnN0IHogPSB0cmFuc2xhdGlvbi56O1xyXG5cclxuXHRcdGNvbnN0IHR4ID0geCAqIG1hdHJpeFswXSArIHkgKiBtYXRyaXhbNF0gKyB6ICogbWF0cml4WzhdICsgbWF0cml4WzEyXTtcclxuXHRcdGNvbnN0IHR5ID0geCAqIG1hdHJpeFsxXSArIHkgKiBtYXRyaXhbNV0gKyB6ICogbWF0cml4WzldICsgbWF0cml4WzEzXTtcclxuXHRcdGNvbnN0IHR6ID0geCAqIG1hdHJpeFsyXSArIHkgKiBtYXRyaXhbNl0gKyB6ICogbWF0cml4WzEwXSArIG1hdHJpeFsxNF07XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gbWF0cml4WzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdO1xyXG5cdFx0cmVzdWx0WzJdID0gbWF0cml4WzJdO1xyXG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdO1xyXG5cdFx0cmVzdWx0WzRdID0gbWF0cml4WzRdO1xyXG5cdFx0cmVzdWx0WzVdID0gbWF0cml4WzVdO1xyXG5cdFx0cmVzdWx0WzZdID0gbWF0cml4WzZdO1xyXG5cdFx0cmVzdWx0WzddID0gbWF0cml4WzddO1xyXG5cdFx0cmVzdWx0WzhdID0gbWF0cml4WzhdO1xyXG5cdFx0cmVzdWx0WzldID0gbWF0cml4WzldO1xyXG5cdFx0cmVzdWx0WzEwXSA9IG1hdHJpeFsxMF07XHJcblx0XHRyZXN1bHRbMTFdID0gbWF0cml4WzExXTtcclxuXHRcdHJlc3VsdFsxMl0gPSB0eDtcclxuXHRcdHJlc3VsdFsxM10gPSB0eTtcclxuXHRcdHJlc3VsdFsxNF0gPSB0ejtcclxuXHRcdHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtdWx0aXBseUJ5U2NhbGUobWF0cml4OiBNYXRyaXg0LCBzY2FsZTogVmVjdG9yMywgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRjb25zdCBzY2FsZVggPSBzY2FsZS54O1xyXG5cdFx0Y29uc3Qgc2NhbGVZID0gc2NhbGUueTtcclxuXHRcdGNvbnN0IHNjYWxlWiA9IHNjYWxlLno7XHJcblxyXG5cdFx0Ly8gRmFzdGVyIHRoYW4gVmVjdG9yMy5lcXVhbHNcclxuXHRcdGlmIChzY2FsZVggPT09IDEuMCAmJiBzY2FsZVkgPT09IDEuMCAmJiBzY2FsZVogPT09IDEuMCkge1xyXG5cdFx0XHRyZXR1cm4gTWF0cml4NC5jbG9uZShtYXRyaXgsIHJlc3VsdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gc2NhbGVYICogbWF0cml4WzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gc2NhbGVYICogbWF0cml4WzFdO1xyXG5cdFx0cmVzdWx0WzJdID0gc2NhbGVYICogbWF0cml4WzJdO1xyXG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdO1xyXG5cclxuXHRcdHJlc3VsdFs0XSA9IHNjYWxlWSAqIG1hdHJpeFs0XTtcclxuXHRcdHJlc3VsdFs1XSA9IHNjYWxlWSAqIG1hdHJpeFs1XTtcclxuXHRcdHJlc3VsdFs2XSA9IHNjYWxlWSAqIG1hdHJpeFs2XTtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFs3XTtcclxuXHJcblx0XHRyZXN1bHRbOF0gPSBzY2FsZVogKiBtYXRyaXhbOF07XHJcblx0XHRyZXN1bHRbOV0gPSBzY2FsZVogKiBtYXRyaXhbOV07XHJcblx0XHRyZXN1bHRbMTBdID0gc2NhbGVaICogbWF0cml4WzEwXTtcclxuXHRcdHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdO1xyXG5cclxuXHRcdHJlc3VsdFsxMl0gPSBtYXRyaXhbMTJdO1xyXG5cdFx0cmVzdWx0WzEzXSA9IG1hdHJpeFsxM107XHJcblx0XHRyZXN1bHRbMTRdID0gbWF0cml4WzE0XTtcclxuXHRcdHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdO1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlCeVVuaWZvcm1TY2FsZShtYXRyaXg6IE1hdHJpeDQsIHNjYWxlOiBudW1iZXIsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0cmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGU7XHJcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZTtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlO1xyXG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdO1xyXG5cclxuXHRcdHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxlO1xyXG5cdFx0cmVzdWx0WzVdID0gbWF0cml4WzVdICogc2NhbGU7XHJcblx0XHRyZXN1bHRbNl0gPSBtYXRyaXhbNl0gKiBzY2FsZTtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFs3XTtcclxuXHJcblx0XHRyZXN1bHRbOF0gPSBtYXRyaXhbOF0gKiBzY2FsZTtcclxuXHRcdHJlc3VsdFs5XSA9IG1hdHJpeFs5XSAqIHNjYWxlO1xyXG5cdFx0cmVzdWx0WzEwXSA9IG1hdHJpeFsxMF0gKiBzY2FsZTtcclxuXHRcdHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdO1xyXG5cclxuXHRcdHJlc3VsdFsxMl0gPSBtYXRyaXhbMTJdO1xyXG5cdFx0cmVzdWx0WzEzXSA9IG1hdHJpeFsxM107XHJcblx0XHRyZXN1bHRbMTRdID0gbWF0cml4WzE0XTtcclxuXHRcdHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdO1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlCeVZlY3RvcihtYXRyaXg6IE1hdHJpeDQsIGNhcnRlc2lhbjogVmVjdG9yNCwgcmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcblx0XHRjb25zdCB2WCA9IGNhcnRlc2lhbi54O1xyXG5cdFx0Y29uc3QgdlkgPSBjYXJ0ZXNpYW4ueTtcclxuXHRcdGNvbnN0IHZaID0gY2FydGVzaWFuLno7XHJcblx0XHRjb25zdCB2VyA9IGNhcnRlc2lhbi53O1xyXG5cclxuXHRcdGNvbnN0IHggPSBtYXRyaXhbMF0gKiB2WCArIG1hdHJpeFs0XSAqIHZZICsgbWF0cml4WzhdICogdlogKyBtYXRyaXhbMTJdICogdlc7XHJcblx0XHRjb25zdCB5ID0gbWF0cml4WzFdICogdlggKyBtYXRyaXhbNV0gKiB2WSArIG1hdHJpeFs5XSAqIHZaICsgbWF0cml4WzEzXSAqIHZXO1xyXG5cdFx0Y29uc3QgeiA9IG1hdHJpeFsyXSAqIHZYICsgbWF0cml4WzZdICogdlkgKyBtYXRyaXhbMTBdICogdlogKyBtYXRyaXhbMTRdICogdlc7XHJcblx0XHRjb25zdCB3ID0gbWF0cml4WzNdICogdlggKyBtYXRyaXhbN10gKiB2WSArIG1hdHJpeFsxMV0gKiB2WiArIG1hdHJpeFsxNV0gKiB2VztcclxuXHJcblx0XHRyZXN1bHQueCA9IHg7XHJcblx0XHRyZXN1bHQueSA9IHk7XHJcblx0XHRyZXN1bHQueiA9IHo7XHJcblx0XHRyZXN1bHQudyA9IHc7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG11bHRpcGx5QnlQb2ludEFzVmVjdG9yKG1hdHJpeDogTWF0cml4NCwgY2FydGVzaWFuOiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdGNvbnN0IHZYID0gY2FydGVzaWFuLng7XHJcblx0XHRjb25zdCB2WSA9IGNhcnRlc2lhbi55O1xyXG5cdFx0Y29uc3QgdlogPSBjYXJ0ZXNpYW4uejtcclxuXHJcblx0XHRjb25zdCB4ID0gbWF0cml4WzBdICogdlggKyBtYXRyaXhbNF0gKiB2WSArIG1hdHJpeFs4XSAqIHZaO1xyXG5cdFx0Y29uc3QgeSA9IG1hdHJpeFsxXSAqIHZYICsgbWF0cml4WzVdICogdlkgKyBtYXRyaXhbOV0gKiB2WjtcclxuXHRcdGNvbnN0IHogPSBtYXRyaXhbMl0gKiB2WCArIG1hdHJpeFs2XSAqIHZZICsgbWF0cml4WzEwXSAqIHZaO1xyXG5cclxuXHRcdHJlc3VsdC54ID0geDtcclxuXHRcdHJlc3VsdC55ID0geTtcclxuXHRcdHJlc3VsdC56ID0gejtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlCeVBvaW50KG1hdHJpeDogTWF0cml4NCwgY2FydGVzaWFuOiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdGNvbnN0IHZYID0gY2FydGVzaWFuLng7XHJcblx0XHRjb25zdCB2WSA9IGNhcnRlc2lhbi55O1xyXG5cdFx0Y29uc3QgdlogPSBjYXJ0ZXNpYW4uejtcclxuXHJcblx0XHRjb25zdCB4ID0gbWF0cml4WzBdICogdlggKyBtYXRyaXhbNF0gKiB2WSArIG1hdHJpeFs4XSAqIHZaICsgbWF0cml4WzEyXTtcclxuXHRcdGNvbnN0IHkgPSBtYXRyaXhbMV0gKiB2WCArIG1hdHJpeFs1XSAqIHZZICsgbWF0cml4WzldICogdlogKyBtYXRyaXhbMTNdO1xyXG5cdFx0Y29uc3QgeiA9IG1hdHJpeFsyXSAqIHZYICsgbWF0cml4WzZdICogdlkgKyBtYXRyaXhbMTBdICogdlogKyBtYXRyaXhbMTRdO1xyXG5cclxuXHRcdHJlc3VsdC54ID0geDtcclxuXHRcdHJlc3VsdC55ID0geTtcclxuXHRcdHJlc3VsdC56ID0gejtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlCeVNjYWxhcihtYXRyaXg6IE1hdHJpeDQsIHNjYWxhcjogbnVtYmVyLCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeFs2XSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFs5XSA9IG1hdHJpeFs5XSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0WzExXSA9IG1hdHJpeFsxMV0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbMTJdID0gbWF0cml4WzEyXSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0WzE0XSA9IG1hdHJpeFsxNF0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XSAqIHNjYWxhcjtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbmVnYXRlKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRyZXN1bHRbMF0gPSAtbWF0cml4WzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gLW1hdHJpeFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IC1tYXRyaXhbMl07XHJcblx0XHRyZXN1bHRbM10gPSAtbWF0cml4WzNdO1xyXG5cdFx0cmVzdWx0WzRdID0gLW1hdHJpeFs0XTtcclxuXHRcdHJlc3VsdFs1XSA9IC1tYXRyaXhbNV07XHJcblx0XHRyZXN1bHRbNl0gPSAtbWF0cml4WzZdO1xyXG5cdFx0cmVzdWx0WzddID0gLW1hdHJpeFs3XTtcclxuXHRcdHJlc3VsdFs4XSA9IC1tYXRyaXhbOF07XHJcblx0XHRyZXN1bHRbOV0gPSAtbWF0cml4WzldO1xyXG5cdFx0cmVzdWx0WzEwXSA9IC1tYXRyaXhbMTBdO1xyXG5cdFx0cmVzdWx0WzExXSA9IC1tYXRyaXhbMTFdO1xyXG5cdFx0cmVzdWx0WzEyXSA9IC1tYXRyaXhbMTJdO1xyXG5cdFx0cmVzdWx0WzEzXSA9IC1tYXRyaXhbMTNdO1xyXG5cdFx0cmVzdWx0WzE0XSA9IC1tYXRyaXhbMTRdO1xyXG5cdFx0cmVzdWx0WzE1XSA9IC1tYXRyaXhbMTVdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyB0cmFuc3Bvc2UobWF0cml4OiBNYXRyaXg0LCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdGNvbnN0IG1hdHJpeDEgPSBtYXRyaXhbMV07XHJcblx0XHRjb25zdCBtYXRyaXgyID0gbWF0cml4WzJdO1xyXG5cdFx0Y29uc3QgbWF0cml4MyA9IG1hdHJpeFszXTtcclxuXHRcdGNvbnN0IG1hdHJpeDYgPSBtYXRyaXhbNl07XHJcblx0XHRjb25zdCBtYXRyaXg3ID0gbWF0cml4WzddO1xyXG5cdFx0Y29uc3QgbWF0cml4MTEgPSBtYXRyaXhbMTFdO1xyXG5cclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFs0XTtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFs4XTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFsxMl07XHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXgxO1xyXG5cdFx0cmVzdWx0WzVdID0gbWF0cml4WzVdO1xyXG5cdFx0cmVzdWx0WzZdID0gbWF0cml4WzldO1xyXG5cdFx0cmVzdWx0WzddID0gbWF0cml4WzEzXTtcclxuXHRcdHJlc3VsdFs4XSA9IG1hdHJpeDI7XHJcblx0XHRyZXN1bHRbOV0gPSBtYXRyaXg2O1xyXG5cdFx0cmVzdWx0WzEwXSA9IG1hdHJpeFsxMF07XHJcblx0XHRyZXN1bHRbMTFdID0gbWF0cml4WzE0XTtcclxuXHRcdHJlc3VsdFsxMl0gPSBtYXRyaXgzO1xyXG5cdFx0cmVzdWx0WzEzXSA9IG1hdHJpeDc7XHJcblx0XHRyZXN1bHRbMTRdID0gbWF0cml4MTE7XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWJzKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXg0KSB7XHJcblx0XHRyZXN1bHRbMF0gPSBNYXRoLmFicyhtYXRyaXhbMF0pO1xyXG5cdFx0cmVzdWx0WzFdID0gTWF0aC5hYnMobWF0cml4WzFdKTtcclxuXHRcdHJlc3VsdFsyXSA9IE1hdGguYWJzKG1hdHJpeFsyXSk7XHJcblx0XHRyZXN1bHRbM10gPSBNYXRoLmFicyhtYXRyaXhbM10pO1xyXG5cdFx0cmVzdWx0WzRdID0gTWF0aC5hYnMobWF0cml4WzRdKTtcclxuXHRcdHJlc3VsdFs1XSA9IE1hdGguYWJzKG1hdHJpeFs1XSk7XHJcblx0XHRyZXN1bHRbNl0gPSBNYXRoLmFicyhtYXRyaXhbNl0pO1xyXG5cdFx0cmVzdWx0WzddID0gTWF0aC5hYnMobWF0cml4WzddKTtcclxuXHRcdHJlc3VsdFs4XSA9IE1hdGguYWJzKG1hdHJpeFs4XSk7XHJcblx0XHRyZXN1bHRbOV0gPSBNYXRoLmFicyhtYXRyaXhbOV0pO1xyXG5cdFx0cmVzdWx0WzEwXSA9IE1hdGguYWJzKG1hdHJpeFsxMF0pO1xyXG5cdFx0cmVzdWx0WzExXSA9IE1hdGguYWJzKG1hdHJpeFsxMV0pO1xyXG5cdFx0cmVzdWx0WzEyXSA9IE1hdGguYWJzKG1hdHJpeFsxMl0pO1xyXG5cdFx0cmVzdWx0WzEzXSA9IE1hdGguYWJzKG1hdHJpeFsxM10pO1xyXG5cdFx0cmVzdWx0WzE0XSA9IE1hdGguYWJzKG1hdHJpeFsxNF0pO1xyXG5cdFx0cmVzdWx0WzE1XSA9IE1hdGguYWJzKG1hdHJpeFsxNV0pO1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZXF1YWxzKGxlZnQ6IE1hdHJpeDQsIHJpZ2h0OiBNYXRyaXg0KTogYm9vbGVhbiB7XHJcblx0XHQvLyBHaXZlbiB0aGF0IG1vc3QgbWF0cmljZXMgd2lsbCBiZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaWNlcywgdGhlIGVsZW1lbnRzXHJcblx0XHQvLyBhcmUgdGVzdGVkIGluIG9yZGVyIHN1Y2ggdGhhdCB0aGUgdGVzdCBpcyBsaWtlbHkgdG8gZmFpbCBhcyBlYXJseVxyXG5cdFx0Ly8gYXMgcG9zc2libGUuICBJIF90aGlua18gdGhpcyBpcyBqdXN0IGFzIGZyaWVuZGx5IHRvIHRoZSBMMSBjYWNoZVxyXG5cdFx0Ly8gYXMgdGVzdGluZyBpbiBpbmRleCBvcmRlci4gIEl0IGlzIGNlcnRhaW50eSBmYXN0ZXIgaW4gcHJhY3RpY2UuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRsZWZ0ID09PSByaWdodCB8fFxyXG5cdFx0XHQoZGVmaW5lZChsZWZ0KSAmJlxyXG5cdFx0XHRcdGRlZmluZWQocmlnaHQpICYmXHJcblx0XHRcdFx0Ly8gVHJhbnNsYXRpb25cclxuXHRcdFx0XHRsZWZ0WzEyXSA9PT0gcmlnaHRbMTJdICYmXHJcblx0XHRcdFx0bGVmdFsxM10gPT09IHJpZ2h0WzEzXSAmJlxyXG5cdFx0XHRcdGxlZnRbMTRdID09PSByaWdodFsxNF0gJiZcclxuXHRcdFx0XHQvLyBSb3RhdGlvbi9zY2FsZVxyXG5cdFx0XHRcdGxlZnRbMF0gPT09IHJpZ2h0WzBdICYmXHJcblx0XHRcdFx0bGVmdFsxXSA9PT0gcmlnaHRbMV0gJiZcclxuXHRcdFx0XHRsZWZ0WzJdID09PSByaWdodFsyXSAmJlxyXG5cdFx0XHRcdGxlZnRbNF0gPT09IHJpZ2h0WzRdICYmXHJcblx0XHRcdFx0bGVmdFs1XSA9PT0gcmlnaHRbNV0gJiZcclxuXHRcdFx0XHRsZWZ0WzZdID09PSByaWdodFs2XSAmJlxyXG5cdFx0XHRcdGxlZnRbOF0gPT09IHJpZ2h0WzhdICYmXHJcblx0XHRcdFx0bGVmdFs5XSA9PT0gcmlnaHRbOV0gJiZcclxuXHRcdFx0XHRsZWZ0WzEwXSA9PT0gcmlnaHRbMTBdICYmXHJcblx0XHRcdFx0Ly8gQm90dG9tIHJvd1xyXG5cdFx0XHRcdGxlZnRbM10gPT09IHJpZ2h0WzNdICYmXHJcblx0XHRcdFx0bGVmdFs3XSA9PT0gcmlnaHRbN10gJiZcclxuXHRcdFx0XHRsZWZ0WzExXSA9PT0gcmlnaHRbMTFdICYmXHJcblx0XHRcdFx0bGVmdFsxNV0gPT09IHJpZ2h0WzE1XSlcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZXF1YWxzRXBzaWxvbihsZWZ0OiBNYXRyaXg0LCByaWdodDogTWF0cml4NCwgZXBzaWxvbjogbnVtYmVyKTogYm9vbGVhbiB7XHJcblx0XHRlcHNpbG9uID0gZGVmYXVsdFZhbHVlKGVwc2lsb24sIDApO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdGxlZnQgPT09IHJpZ2h0IHx8XHJcblx0XHRcdChkZWZpbmVkKGxlZnQpICYmXHJcblx0XHRcdFx0ZGVmaW5lZChyaWdodCkgJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzBdIC0gcmlnaHRbMF0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzFdIC0gcmlnaHRbMV0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzJdIC0gcmlnaHRbMl0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzNdIC0gcmlnaHRbM10pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzRdIC0gcmlnaHRbNF0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzVdIC0gcmlnaHRbNV0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzZdIC0gcmlnaHRbNl0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzddIC0gcmlnaHRbN10pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzhdIC0gcmlnaHRbOF0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzldIC0gcmlnaHRbOV0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzEwXSAtIHJpZ2h0WzEwXSkgPD0gZXBzaWxvbiAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnRbMTFdIC0gcmlnaHRbMTFdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFsxMl0gLSByaWdodFsxMl0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzEzXSAtIHJpZ2h0WzEzXSkgPD0gZXBzaWxvbiAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnRbMTRdIC0gcmlnaHRbMTRdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFsxNV0gLSByaWdodFsxNV0pIDw9IGVwc2lsb24pXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldFRyYW5zbGF0aW9uKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcblx0XHRyZXN1bHQueCA9IG1hdHJpeFsxMl07XHJcblx0XHRyZXN1bHQueSA9IG1hdHJpeFsxM107XHJcblx0XHRyZXN1bHQueiA9IG1hdHJpeFsxNF07XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldE1hdHJpeDMobWF0cml4OiBNYXRyaXg0LCByZXN1bHQ6IE1hdHJpeDMpOiBNYXRyaXgzIHtcclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFs0XTtcclxuXHRcdHJlc3VsdFs0XSA9IG1hdHJpeFs1XTtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeFs2XTtcclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeFs4XTtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFs5XTtcclxuXHRcdHJlc3VsdFs4XSA9IG1hdHJpeFsxMF07XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGludmVyc2UobWF0cml4OiBNYXRyaXg0LCByZXN1bHQ6IE1hdHJpeDQpIHtcclxuXHRcdC8vXHJcblx0XHQvLyBQb3J0ZWQgZnJvbTpcclxuXHRcdC8vICAgZnRwOi8vZG93bmxvYWQuaW50ZWwuY29tL2Rlc2lnbi9QZW50aXVtSUlJL3NtbC8yNDUwNDMwMS5wZGZcclxuXHRcdC8vXHJcblx0XHRjb25zdCBzcmMwID0gbWF0cml4WzBdO1xyXG5cdFx0Y29uc3Qgc3JjMSA9IG1hdHJpeFs0XTtcclxuXHRcdGNvbnN0IHNyYzIgPSBtYXRyaXhbOF07XHJcblx0XHRjb25zdCBzcmMzID0gbWF0cml4WzEyXTtcclxuXHRcdGNvbnN0IHNyYzQgPSBtYXRyaXhbMV07XHJcblx0XHRjb25zdCBzcmM1ID0gbWF0cml4WzVdO1xyXG5cdFx0Y29uc3Qgc3JjNiA9IG1hdHJpeFs5XTtcclxuXHRcdGNvbnN0IHNyYzcgPSBtYXRyaXhbMTNdO1xyXG5cdFx0Y29uc3Qgc3JjOCA9IG1hdHJpeFsyXTtcclxuXHRcdGNvbnN0IHNyYzkgPSBtYXRyaXhbNl07XHJcblx0XHRjb25zdCBzcmMxMCA9IG1hdHJpeFsxMF07XHJcblx0XHRjb25zdCBzcmMxMSA9IG1hdHJpeFsxNF07XHJcblx0XHRjb25zdCBzcmMxMiA9IG1hdHJpeFszXTtcclxuXHRcdGNvbnN0IHNyYzEzID0gbWF0cml4WzddO1xyXG5cdFx0Y29uc3Qgc3JjMTQgPSBtYXRyaXhbMTFdO1xyXG5cdFx0Y29uc3Qgc3JjMTUgPSBtYXRyaXhbMTVdO1xyXG5cclxuXHRcdC8vIGNhbGN1bGF0ZSBwYWlycyBmb3IgZmlyc3QgOCBlbGVtZW50cyAoY29mYWN0b3JzKVxyXG5cdFx0bGV0IHRtcDAgPSBzcmMxMCAqIHNyYzE1O1xyXG5cdFx0bGV0IHRtcDEgPSBzcmMxMSAqIHNyYzE0O1xyXG5cdFx0bGV0IHRtcDIgPSBzcmM5ICogc3JjMTU7XHJcblx0XHRsZXQgdG1wMyA9IHNyYzExICogc3JjMTM7XHJcblx0XHRsZXQgdG1wNCA9IHNyYzkgKiBzcmMxNDtcclxuXHRcdGxldCB0bXA1ID0gc3JjMTAgKiBzcmMxMztcclxuXHRcdGxldCB0bXA2ID0gc3JjOCAqIHNyYzE1O1xyXG5cdFx0bGV0IHRtcDcgPSBzcmMxMSAqIHNyYzEyO1xyXG5cdFx0bGV0IHRtcDggPSBzcmM4ICogc3JjMTQ7XHJcblx0XHRsZXQgdG1wOSA9IHNyYzEwICogc3JjMTI7XHJcblx0XHRsZXQgdG1wMTAgPSBzcmM4ICogc3JjMTM7XHJcblx0XHRsZXQgdG1wMTEgPSBzcmM5ICogc3JjMTI7XHJcblxyXG5cdFx0Ly8gY2FsY3VsYXRlIGZpcnN0IDggZWxlbWVudHMgKGNvZmFjdG9ycylcclxuXHRcdGNvbnN0IGRzdDAgPSB0bXAwICogc3JjNSArIHRtcDMgKiBzcmM2ICsgdG1wNCAqIHNyYzcgLSAodG1wMSAqIHNyYzUgKyB0bXAyICogc3JjNiArIHRtcDUgKiBzcmM3KTtcclxuXHRcdGNvbnN0IGRzdDEgPSB0bXAxICogc3JjNCArIHRtcDYgKiBzcmM2ICsgdG1wOSAqIHNyYzcgLSAodG1wMCAqIHNyYzQgKyB0bXA3ICogc3JjNiArIHRtcDggKiBzcmM3KTtcclxuXHRcdGNvbnN0IGRzdDIgPSB0bXAyICogc3JjNCArIHRtcDcgKiBzcmM1ICsgdG1wMTAgKiBzcmM3IC0gKHRtcDMgKiBzcmM0ICsgdG1wNiAqIHNyYzUgKyB0bXAxMSAqIHNyYzcpO1xyXG5cdFx0Y29uc3QgZHN0MyA9IHRtcDUgKiBzcmM0ICsgdG1wOCAqIHNyYzUgKyB0bXAxMSAqIHNyYzYgLSAodG1wNCAqIHNyYzQgKyB0bXA5ICogc3JjNSArIHRtcDEwICogc3JjNik7XHJcblx0XHRjb25zdCBkc3Q0ID0gdG1wMSAqIHNyYzEgKyB0bXAyICogc3JjMiArIHRtcDUgKiBzcmMzIC0gKHRtcDAgKiBzcmMxICsgdG1wMyAqIHNyYzIgKyB0bXA0ICogc3JjMyk7XHJcblx0XHRjb25zdCBkc3Q1ID0gdG1wMCAqIHNyYzAgKyB0bXA3ICogc3JjMiArIHRtcDggKiBzcmMzIC0gKHRtcDEgKiBzcmMwICsgdG1wNiAqIHNyYzIgKyB0bXA5ICogc3JjMyk7XHJcblx0XHRjb25zdCBkc3Q2ID0gdG1wMyAqIHNyYzAgKyB0bXA2ICogc3JjMSArIHRtcDExICogc3JjMyAtICh0bXAyICogc3JjMCArIHRtcDcgKiBzcmMxICsgdG1wMTAgKiBzcmMzKTtcclxuXHRcdGNvbnN0IGRzdDcgPSB0bXA0ICogc3JjMCArIHRtcDkgKiBzcmMxICsgdG1wMTAgKiBzcmMyIC0gKHRtcDUgKiBzcmMwICsgdG1wOCAqIHNyYzEgKyB0bXAxMSAqIHNyYzIpO1xyXG5cclxuXHRcdC8vIGNhbGN1bGF0ZSBwYWlycyBmb3Igc2Vjb25kIDggZWxlbWVudHMgKGNvZmFjdG9ycylcclxuXHRcdHRtcDAgPSBzcmMyICogc3JjNztcclxuXHRcdHRtcDEgPSBzcmMzICogc3JjNjtcclxuXHRcdHRtcDIgPSBzcmMxICogc3JjNztcclxuXHRcdHRtcDMgPSBzcmMzICogc3JjNTtcclxuXHRcdHRtcDQgPSBzcmMxICogc3JjNjtcclxuXHRcdHRtcDUgPSBzcmMyICogc3JjNTtcclxuXHRcdHRtcDYgPSBzcmMwICogc3JjNztcclxuXHRcdHRtcDcgPSBzcmMzICogc3JjNDtcclxuXHRcdHRtcDggPSBzcmMwICogc3JjNjtcclxuXHRcdHRtcDkgPSBzcmMyICogc3JjNDtcclxuXHRcdHRtcDEwID0gc3JjMCAqIHNyYzU7XHJcblx0XHR0bXAxMSA9IHNyYzEgKiBzcmM0O1xyXG5cclxuXHRcdC8vIGNhbGN1bGF0ZSBzZWNvbmQgOCBlbGVtZW50cyAoY29mYWN0b3JzKVxyXG5cdFx0Y29uc3QgZHN0OCA9IHRtcDAgKiBzcmMxMyArIHRtcDMgKiBzcmMxNCArIHRtcDQgKiBzcmMxNSAtICh0bXAxICogc3JjMTMgKyB0bXAyICogc3JjMTQgKyB0bXA1ICogc3JjMTUpO1xyXG5cdFx0Y29uc3QgZHN0OSA9IHRtcDEgKiBzcmMxMiArIHRtcDYgKiBzcmMxNCArIHRtcDkgKiBzcmMxNSAtICh0bXAwICogc3JjMTIgKyB0bXA3ICogc3JjMTQgKyB0bXA4ICogc3JjMTUpO1xyXG5cdFx0Y29uc3QgZHN0MTAgPSB0bXAyICogc3JjMTIgKyB0bXA3ICogc3JjMTMgKyB0bXAxMCAqIHNyYzE1IC0gKHRtcDMgKiBzcmMxMiArIHRtcDYgKiBzcmMxMyArIHRtcDExICogc3JjMTUpO1xyXG5cdFx0Y29uc3QgZHN0MTEgPSB0bXA1ICogc3JjMTIgKyB0bXA4ICogc3JjMTMgKyB0bXAxMSAqIHNyYzE0IC0gKHRtcDQgKiBzcmMxMiArIHRtcDkgKiBzcmMxMyArIHRtcDEwICogc3JjMTQpO1xyXG5cdFx0Y29uc3QgZHN0MTIgPSB0bXAyICogc3JjMTAgKyB0bXA1ICogc3JjMTEgKyB0bXAxICogc3JjOSAtICh0bXA0ICogc3JjMTEgKyB0bXAwICogc3JjOSArIHRtcDMgKiBzcmMxMCk7XHJcblx0XHRjb25zdCBkc3QxMyA9IHRtcDggKiBzcmMxMSArIHRtcDAgKiBzcmM4ICsgdG1wNyAqIHNyYzEwIC0gKHRtcDYgKiBzcmMxMCArIHRtcDkgKiBzcmMxMSArIHRtcDEgKiBzcmM4KTtcclxuXHRcdGNvbnN0IGRzdDE0ID0gdG1wNiAqIHNyYzkgKyB0bXAxMSAqIHNyYzExICsgdG1wMyAqIHNyYzggLSAodG1wMTAgKiBzcmMxMSArIHRtcDIgKiBzcmM4ICsgdG1wNyAqIHNyYzkpO1xyXG5cdFx0Y29uc3QgZHN0MTUgPSB0bXAxMCAqIHNyYzEwICsgdG1wNCAqIHNyYzggKyB0bXA5ICogc3JjOSAtICh0bXA4ICogc3JjOSArIHRtcDExICogc3JjMTAgKyB0bXA1ICogc3JjOCk7XHJcblxyXG5cdFx0Ly8gY2FsY3VsYXRlIGRldGVybWluYW50XHJcblx0XHRsZXQgZGV0ID0gc3JjMCAqIGRzdDAgKyBzcmMxICogZHN0MSArIHNyYzIgKiBkc3QyICsgc3JjMyAqIGRzdDM7XHJcblxyXG5cdFx0aWYgKE1hdGguYWJzKGRldCkgPCBHTWF0aC5FUFNJTE9OMjEpIHtcclxuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIGZvciBhIHplcm8gc2NhbGUgbWF0cml4IHRoYXQgY2FuIG9jY3VyLCBmb3IgZXhhbXBsZSxcclxuXHRcdFx0Ly8gd2hlbiBhIG1vZGVsJ3Mgbm9kZSBoYXMgYSBbMCwgMCwgMF0gc2NhbGUuXHJcblx0XHRcdGlmIChcclxuXHRcdFx0XHRNYXRyaXgzLmVxdWFsc0Vwc2lsb24oXHJcblx0XHRcdFx0XHRNYXRyaXg0LmdldE1hdHJpeDMobWF0cml4LCBzY3JhdGNoSW52ZXJzZVJvdGF0aW9uKSxcclxuXHRcdFx0XHRcdHNjcmF0Y2hNYXRyaXgzWmVybyxcclxuXHRcdFx0XHRcdEdNYXRoLkVQU0lMT043XHJcblx0XHRcdFx0KSAmJlxyXG5cdFx0XHRcdFZlY3RvcjQuZXF1YWxzKE1hdHJpeDQuZ2V0Um93KG1hdHJpeCwgMywgc2NyYXRjaEJvdHRvbVJvdyksIHNjcmF0Y2hFeHBlY3RlZEJvdHRvbVJvdylcclxuXHRcdFx0KSB7XHJcblx0XHRcdFx0cmVzdWx0WzBdID0gMC4wO1xyXG5cdFx0XHRcdHJlc3VsdFsxXSA9IDAuMDtcclxuXHRcdFx0XHRyZXN1bHRbMl0gPSAwLjA7XHJcblx0XHRcdFx0cmVzdWx0WzNdID0gMC4wO1xyXG5cdFx0XHRcdHJlc3VsdFs0XSA9IDAuMDtcclxuXHRcdFx0XHRyZXN1bHRbNV0gPSAwLjA7XHJcblx0XHRcdFx0cmVzdWx0WzZdID0gMC4wO1xyXG5cdFx0XHRcdHJlc3VsdFs3XSA9IDAuMDtcclxuXHRcdFx0XHRyZXN1bHRbOF0gPSAwLjA7XHJcblx0XHRcdFx0cmVzdWx0WzldID0gMC4wO1xyXG5cdFx0XHRcdHJlc3VsdFsxMF0gPSAwLjA7XHJcblx0XHRcdFx0cmVzdWx0WzExXSA9IDAuMDtcclxuXHRcdFx0XHRyZXN1bHRbMTJdID0gLW1hdHJpeFsxMl07XHJcblx0XHRcdFx0cmVzdWx0WzEzXSA9IC1tYXRyaXhbMTNdO1xyXG5cdFx0XHRcdHJlc3VsdFsxNF0gPSAtbWF0cml4WzE0XTtcclxuXHRcdFx0XHRyZXN1bHRbMTVdID0gMS4wO1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIm1hdHJpeCBpcyBub3QgaW52ZXJ0aWJsZSBiZWNhdXNlIGl0cyBkZXRlcm1pbmF0ZSBpcyB6ZXJvLlwiKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBjYWxjdWxhdGUgbWF0cml4IGludmVyc2VcclxuXHRcdGRldCA9IDEuMCAvIGRldDtcclxuXHJcblx0XHRyZXN1bHRbMF0gPSBkc3QwICogZGV0O1xyXG5cdFx0cmVzdWx0WzFdID0gZHN0MSAqIGRldDtcclxuXHRcdHJlc3VsdFsyXSA9IGRzdDIgKiBkZXQ7XHJcblx0XHRyZXN1bHRbM10gPSBkc3QzICogZGV0O1xyXG5cdFx0cmVzdWx0WzRdID0gZHN0NCAqIGRldDtcclxuXHRcdHJlc3VsdFs1XSA9IGRzdDUgKiBkZXQ7XHJcblx0XHRyZXN1bHRbNl0gPSBkc3Q2ICogZGV0O1xyXG5cdFx0cmVzdWx0WzddID0gZHN0NyAqIGRldDtcclxuXHRcdHJlc3VsdFs4XSA9IGRzdDggKiBkZXQ7XHJcblx0XHRyZXN1bHRbOV0gPSBkc3Q5ICogZGV0O1xyXG5cdFx0cmVzdWx0WzEwXSA9IGRzdDEwICogZGV0O1xyXG5cdFx0cmVzdWx0WzExXSA9IGRzdDExICogZGV0O1xyXG5cdFx0cmVzdWx0WzEyXSA9IGRzdDEyICogZGV0O1xyXG5cdFx0cmVzdWx0WzEzXSA9IGRzdDEzICogZGV0O1xyXG5cdFx0cmVzdWx0WzE0XSA9IGRzdDE0ICogZGV0O1xyXG5cdFx0cmVzdWx0WzE1XSA9IGRzdDE1ICogZGV0O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBpbnZlcnNlVHJhbnNmb3JtYXRpb24obWF0cml4OiBNYXRyaXg0LCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdC8vVGhpcyBmdW5jdGlvbiBpcyBhbiBvcHRpbWl6ZWQgdmVyc2lvbiBvZiB0aGUgYmVsb3cgNCBsaW5lcy5cclxuXHRcdC8vY29uc3QgclQgPSBNYXRyaXgzLnRyYW5zcG9zZShNYXRyaXg0LmdldE1hdHJpeDMobWF0cml4KSk7XHJcblx0XHQvL2NvbnN0IHJUTiA9IE1hdHJpeDMubmVnYXRlKHJUKTtcclxuXHRcdC8vY29uc3QgclRUID0gTWF0cml4My5tdWx0aXBseUJ5VmVjdG9yKHJUTiwgTWF0cml4NC5nZXRUcmFuc2xhdGlvbihtYXRyaXgpKTtcclxuXHRcdC8vcmV0dXJuIE1hdHJpeDQuZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24oclQsIHJUVCwgcmVzdWx0KTtcclxuXHJcblx0XHRjb25zdCBtYXRyaXgwID0gbWF0cml4WzBdO1xyXG5cdFx0Y29uc3QgbWF0cml4MSA9IG1hdHJpeFsxXTtcclxuXHRcdGNvbnN0IG1hdHJpeDIgPSBtYXRyaXhbMl07XHJcblx0XHRjb25zdCBtYXRyaXg0ID0gbWF0cml4WzRdO1xyXG5cdFx0Y29uc3QgbWF0cml4NSA9IG1hdHJpeFs1XTtcclxuXHRcdGNvbnN0IG1hdHJpeDYgPSBtYXRyaXhbNl07XHJcblx0XHRjb25zdCBtYXRyaXg4ID0gbWF0cml4WzhdO1xyXG5cdFx0Y29uc3QgbWF0cml4OSA9IG1hdHJpeFs5XTtcclxuXHRcdGNvbnN0IG1hdHJpeDEwID0gbWF0cml4WzEwXTtcclxuXHJcblx0XHRjb25zdCB2WCA9IG1hdHJpeFsxMl07XHJcblx0XHRjb25zdCB2WSA9IG1hdHJpeFsxM107XHJcblx0XHRjb25zdCB2WiA9IG1hdHJpeFsxNF07XHJcblxyXG5cdFx0Y29uc3QgeCA9IC1tYXRyaXgwICogdlggLSBtYXRyaXgxICogdlkgLSBtYXRyaXgyICogdlo7XHJcblx0XHRjb25zdCB5ID0gLW1hdHJpeDQgKiB2WCAtIG1hdHJpeDUgKiB2WSAtIG1hdHJpeDYgKiB2WjtcclxuXHRcdGNvbnN0IHogPSAtbWF0cml4OCAqIHZYIC0gbWF0cml4OSAqIHZZIC0gbWF0cml4MTAgKiB2WjtcclxuXHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXgwO1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4NDtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeDg7XHJcblx0XHRyZXN1bHRbM10gPSAwLjA7XHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXgxO1xyXG5cdFx0cmVzdWx0WzVdID0gbWF0cml4NTtcclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeDk7XHJcblx0XHRyZXN1bHRbN10gPSAwLjA7XHJcblx0XHRyZXN1bHRbOF0gPSBtYXRyaXgyO1xyXG5cdFx0cmVzdWx0WzldID0gbWF0cml4NjtcclxuXHRcdHJlc3VsdFsxMF0gPSBtYXRyaXgxMDtcclxuXHRcdHJlc3VsdFsxMV0gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTJdID0geDtcclxuXHRcdHJlc3VsdFsxM10gPSB5O1xyXG5cdFx0cmVzdWx0WzE0XSA9IHo7XHJcblx0XHRyZXN1bHRbMTVdID0gMS4wO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBpbnZlcnNlVHJhbnNwb3NlKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRyZXR1cm4gTWF0cml4NC5pbnZlcnNlKE1hdHJpeDQudHJhbnNwb3NlKG1hdHJpeCwgc2NyYXRjaFRyYW5zcG9zZU1hdHJpeCksIHJlc3VsdCk7XHJcblx0fVxyXG5cdC8qKlxyXG5cdCAqIEBwcml2YXRlXHJcblx0ICovXHJcblx0c3RhdGljIGVxdWFsc0FycmF5KG1hdHJpeDogTWF0cml4NCwgYXJyYXk6IEFycmF5PG51bWJlcj4sIG9mZnNldDogbnVtYmVyKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRtYXRyaXhbMF0gPT09IGFycmF5W29mZnNldF0gJiZcclxuXHRcdFx0bWF0cml4WzFdID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJlxyXG5cdFx0XHRtYXRyaXhbMl0gPT09IGFycmF5W29mZnNldCArIDJdICYmXHJcblx0XHRcdG1hdHJpeFszXSA9PT0gYXJyYXlbb2Zmc2V0ICsgM10gJiZcclxuXHRcdFx0bWF0cml4WzRdID09PSBhcnJheVtvZmZzZXQgKyA0XSAmJlxyXG5cdFx0XHRtYXRyaXhbNV0gPT09IGFycmF5W29mZnNldCArIDVdICYmXHJcblx0XHRcdG1hdHJpeFs2XSA9PT0gYXJyYXlbb2Zmc2V0ICsgNl0gJiZcclxuXHRcdFx0bWF0cml4WzddID09PSBhcnJheVtvZmZzZXQgKyA3XSAmJlxyXG5cdFx0XHRtYXRyaXhbOF0gPT09IGFycmF5W29mZnNldCArIDhdICYmXHJcblx0XHRcdG1hdHJpeFs5XSA9PT0gYXJyYXlbb2Zmc2V0ICsgOV0gJiZcclxuXHRcdFx0bWF0cml4WzEwXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMTBdICYmXHJcblx0XHRcdG1hdHJpeFsxMV0gPT09IGFycmF5W29mZnNldCArIDExXSAmJlxyXG5cdFx0XHRtYXRyaXhbMTJdID09PSBhcnJheVtvZmZzZXQgKyAxMl0gJiZcclxuXHRcdFx0bWF0cml4WzEzXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMTNdICYmXHJcblx0XHRcdG1hdHJpeFsxNF0gPT09IGFycmF5W29mZnNldCArIDE0XSAmJlxyXG5cdFx0XHRtYXRyaXhbMTVdID09PSBhcnJheVtvZmZzZXQgKyAxNV1cclxuXHRcdCk7XHJcblx0fVxyXG59XHJcblxyXG5jb25zdCBzY3JhdGNoVHJhbnNwb3NlTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcclxuXHJcbmNvbnN0IGZyb21DYW1lcmFGID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgZnJvbUNhbWVyYVIgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBmcm9tQ2FtZXJhVSA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5jb25zdCBzY2FsZVNjcmF0Y2gxID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2NhbGVTY3JhdGNoMiA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNjcmF0Y2hDb2x1bW4gPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY2FsZVNjcmF0Y2gzID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2NhbGVTY3JhdGNoNCA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNjYWxlU2NyYXRjaDUgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY3JhdGNoSW52ZXJzZVJvdGF0aW9uID0gbmV3IE1hdHJpeDMoKTtcclxuY29uc3Qgc2NyYXRjaE1hdHJpeDNaZXJvID0gbmV3IE1hdHJpeDMoKTtcclxuY29uc3Qgc2NyYXRjaEJvdHRvbVJvdyA9IG5ldyBWZWN0b3I0KCk7XHJcbmNvbnN0IHNjcmF0Y2hFeHBlY3RlZEJvdHRvbVJvdyA9IG5ldyBWZWN0b3I0KDAuMCwgMC4wLCAwLjAsIDEuMCk7XHJcbmNvbnN0IHggPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCB5ID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgeiA9IG5ldyBWZWN0b3IzKCk7XHJcbmV4cG9ydCBkZWZhdWx0IE1hdHJpeDQ7XHJcbiIsImltcG9ydCBDb2xvciBmcm9tIFwiLi4vbWF0aC9Db2xvclwiO1xyXG5pbXBvcnQgTWF0cml4MiBmcm9tIFwiLi4vbWF0aC9NYXRyaXgyXCI7XHJcbmltcG9ydCBNYXRyaXgzIGZyb20gXCIuLi9tYXRoL01hdHJpeDNcIjtcclxuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4uL21hdGgvTWF0cml4NFwiO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tIFwiLi4vbWF0aC9WZWN0b3IyXCI7XHJcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuaW1wb3J0IFZlY3RvcjQgZnJvbSBcIi4uL21hdGgvVmVjdG9yNFwiO1xyXG5pbXBvcnQgeyBTaGFkZXJTdGFnZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuL1RleHR1cmVcIjtcclxuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4vU2FtcGxlclwiO1xyXG5pbXBvcnQgeyBMaWdodCB9IGZyb20gXCIuLi9saWdodC9MaWdodFwiO1xyXG5pbXBvcnQgQnVmZmVyIGZyb20gXCIuL0J1ZmZlclwiO1xyXG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9Db250ZXh0XCI7XHJcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xyXG5pbXBvcnQgVW5pZm9ybUJ1ZmZlciBmcm9tIFwiLi9Vbmlmb3JtQnVmZmVyXCI7XHJcbmltcG9ydCB7IFNwb3RMaWdodCB9IGZyb20gXCIuLi9saWdodC9TcG90TGlnaHRcIjtcclxuaW1wb3J0IHsgUG9pbnRMaWdodCB9IGZyb20gXCIuLi9saWdodC9Qb2ludExpZ2h0XCI7XHJcbmltcG9ydCB7IERpcmVjdGlvbmFsTGlnaHQgfSBmcm9tIFwiLi4vbGlnaHQvRGlyZWN0aW9uYWxMaWdodFwiO1xyXG5leHBvcnQgY2xhc3MgVW5pZm9ybTxUPiB7XHJcblx0X3ZhbHVlOiBUO1xyXG5cdG5hbWU6IHN0cmluZztcclxuXHR2YWx1ZTogVDtcclxuXHRvZmZzZXQ6IG51bWJlcjtcclxuXHRidWZmZXI6IEZsb2F0MzJBcnJheSB8IFVpbnQxNkFycmF5IHwgVWludDMyQXJyYXkgfCBVaW50OEFycmF5IHwgRmxvYXQ2NEFycmF5IHwgVW5pZm9ybUJ1ZmZlcjtcclxuXHRjYjogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3Q7XHJcblx0Ynl0ZVNpemU6IG51bWJlcjtcclxuXHRiaW5kaW5nPzogbnVtYmVyO1xyXG5cdHZpc2liaWxpdHk/OiBudW1iZXI7XHJcblx0dHlwZT86IHN0cmluZztcclxuXHRkaXJ0eT86IGJvb2xlYW47XHJcblxyXG5cdGNvbnN0cnVjdG9yKHVuaWZvcm1OYW1lOiBzdHJpbmcsIGNiPzogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsIGJpbmRpbmc/OiBudW1iZXIsIG9mZnNldD86IG51bWJlcikge1xyXG5cdFx0dGhpcy5uYW1lID0gdW5pZm9ybU5hbWU7XHJcblx0XHR0aGlzLmNiID0gY2I7XHJcblx0XHR0aGlzLmJpbmRpbmcgPSBkZWZhdWx0VmFsdWUoYmluZGluZywgMCk7XHJcblx0XHR0aGlzLm9mZnNldCA9IGRlZmF1bHRWYWx1ZShvZmZzZXQsIDApO1xyXG5cdFx0dGhpcy52aXNpYmlsaXR5ID0gU2hhZGVyU3RhZ2UuVmVydGV4IHwgU2hhZGVyU3RhZ2UuRnJhZ21lbnQ7XHJcblx0XHR0aGlzLnR5cGUgPSBcIm51bWJlclwiO1xyXG5cdH1cclxuXHRzZXRCdWZmZXIoYXJyYXk6IEFycmF5PG51bWJlcj4sIG9mZnNldDogbnVtYmVyID0gMCkge1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR0aGlzLmJ1ZmZlcltpICsgb2Zmc2V0XSA9IGFycmF5W2ldO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRzZXQoKSB7XHJcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHRnZXRWYWx1ZSgpIHtcclxuXHRcdGxldCByZXN1bHQ7XHJcblx0XHRjb25zdCBjYlR5cGUgPSB0eXBlb2YgdGhpcy5jYjtcclxuXHRcdHN3aXRjaCAoY2JUeXBlKSB7XHJcblx0XHRcdGNhc2UgXCJvYmplY3RcIjpcclxuXHRcdFx0XHRyZXN1bHQgPSB0aGlzLmNiW3RoaXMubmFtZV0gfHwgdGhpcy5jYjtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XHJcblx0XHRcdFx0Ly9AdHMtaWdub3JlXHJcblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5jYigpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIFwibnVtYmVyXCI6XHJcblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5jYjtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJ0eXBlIGlzIGVycm9yXCIpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVbmlmb3JtRmxvYXQgZXh0ZW5kcyBVbmlmb3JtPG51bWJlcj4ge1xyXG5cdHN0YXRpYyBhbGlnbiA9IDQ7XHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxyXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXHJcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXHJcblx0XHRjYjogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsXHJcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxyXG5cdFx0b2Zmc2V0PzogbnVtYmVyXHJcblx0KSB7XHJcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XHJcblx0XHR0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5fdmFsdWUgPSAwO1xyXG5cdFx0dGhpcy5ieXRlU2l6ZSA9IDQ7XHJcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgMSk7XHJcblx0XHR0aGlzLnR5cGUgPSBcInZlYzFcIjtcclxuXHR9XHJcblx0c2V0KCkge1xyXG5cdFx0aWYgKHRoaXMuY2IgIT0gdW5kZWZpbmVkKSB0aGlzLnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xyXG5cdFx0aWYgKHRoaXMudmFsdWUgIT09IHRoaXMuX3ZhbHVlKSB7XHJcblx0XHRcdHRoaXMuX3ZhbHVlID0gdGhpcy52YWx1ZTtcclxuXHRcdFx0dGhpcy5idWZmZXJbMF0gPSB0aGlzLnZhbHVlO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1GbG9hdFZlYzIgZXh0ZW5kcyBVbmlmb3JtPFZlY3RvcjI+IHtcclxuXHRzdGF0aWMgYWxpZ24gPSA4O1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcclxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxyXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxyXG5cdFx0Y2I6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LFxyXG5cdFx0YmluZGluZz86IG51bWJlcixcclxuXHRcdG9mZnNldD86IG51bWJlclxyXG5cdCkge1xyXG5cdFx0c3VwZXIodW5pZm9ybU5hbWUsIGNiLCBiaW5kaW5nLCBvZmZzZXQpO1xyXG5cdFx0dGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuX3ZhbHVlID0gbmV3IFZlY3RvcjIoKTtcclxuXHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIuYnVmZmVyLCBieXRlT2Zmc2V0LCAyKTtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSA4O1xyXG5cdFx0dGhpcy50eXBlID0gXCJ2ZWMyXCI7XHJcblx0fVxyXG5cdHNldCgpOiBib29sZWFuIHtcclxuXHRcdGlmICh0aGlzLmNiICE9IHVuZGVmaW5lZCkgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcclxuXHRcdGNvbnN0IHYgPSB0aGlzLnZhbHVlO1xyXG5cdFx0aWYgKCFWZWN0b3IyLmVxdWFscyh2LCB0aGlzLl92YWx1ZSkpIHtcclxuXHRcdFx0VmVjdG9yMi5jbG9uZSh2LCB0aGlzLl92YWx1ZSk7XHJcblx0XHRcdHRoaXMuc2V0QnVmZmVyKHRoaXMuX3ZhbHVlLnRvQXJyYXkoKSk7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufVxyXG5leHBvcnQgY2xhc3MgVW5pZm9ybUZsb2F0VmVjMyBleHRlbmRzIFVuaWZvcm08VmVjdG9yMz4ge1xyXG5cdHN0YXRpYyBhbGlnbiA9IDE2O1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcclxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxyXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxyXG5cdFx0Y2I6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LFxyXG5cdFx0YmluZGluZz86IG51bWJlcixcclxuXHRcdG9mZnNldD86IG51bWJlclxyXG5cdCkge1xyXG5cdFx0c3VwZXIodW5pZm9ybU5hbWUsIGNiLCBiaW5kaW5nLCBvZmZzZXQpO1xyXG5cdFx0dGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuX3ZhbHVlID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIuYnVmZmVyLCBieXRlT2Zmc2V0LCAzKTtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSAxMjtcclxuXHRcdHRoaXMudHlwZSA9IFwidmVjM1wiO1xyXG5cdH1cclxuXHRzZXQoKTogYm9vbGVhbiB7XHJcblx0XHRpZiAodGhpcy5jYiAhPSB1bmRlZmluZWQpIHRoaXMudmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XHJcblx0XHRjb25zdCB2ID0gdGhpcy52YWx1ZTtcclxuXHRcdGlmICghVmVjdG9yMy5lcXVhbHModiwgdGhpcy5fdmFsdWUpKSB7XHJcblx0XHRcdFZlY3RvcjMuY2xvbmUodiwgdGhpcy5fdmFsdWUpO1xyXG5cdFx0XHR0aGlzLnNldEJ1ZmZlcih0aGlzLl92YWx1ZS50b0FycmF5KCkpO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1GbG9hdFZlYzQgZXh0ZW5kcyBVbmlmb3JtPFZlY3RvcjQ+IHtcclxuXHRzdGF0aWMgYWxpZ24gPSAxNjtcclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXHJcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcclxuXHRcdGJ5dGVPZmZzZXQ6IG51bWJlcixcclxuXHRcdGNiOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCxcclxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXHJcblx0XHRvZmZzZXQ/OiBudW1iZXJcclxuXHQpIHtcclxuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcclxuXHRcdHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLl92YWx1ZSA9IG5ldyBWZWN0b3I0KCk7XHJcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgNCk7XHJcblx0XHR0aGlzLmJ5dGVTaXplID0gMTY7XHJcblx0XHR0aGlzLnR5cGUgPSBcInZlYzRcIjtcclxuXHR9XHJcblx0c2V0KCk6IGJvb2xlYW4ge1xyXG5cdFx0aWYgKHRoaXMuY2IgIT0gdW5kZWZpbmVkKSB0aGlzLnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xyXG5cdFx0Y29uc3QgdiA9IHRoaXMudmFsdWU7XHJcblx0XHRpZiAoIVZlY3RvcjQuZXF1YWxzKHYsIHRoaXMuX3ZhbHVlKSkge1xyXG5cdFx0XHRWZWN0b3I0LmNsb25lKHYsIHRoaXMuX3ZhbHVlKTtcclxuXHRcdFx0dGhpcy5zZXRCdWZmZXIodGhpcy5fdmFsdWUudG9BcnJheSgpKTtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG59XHJcbmV4cG9ydCBjbGFzcyBVbmlmb3JtQ29sb3IgZXh0ZW5kcyBVbmlmb3JtPENvbG9yPiB7XHJcblx0c3RhdGljIGFsaWduID0gMTY7XHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxyXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXHJcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXHJcblx0XHRjYjogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsXHJcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxyXG5cdFx0b2Zmc2V0PzogbnVtYmVyXHJcblx0KSB7XHJcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XHJcblx0XHR0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5fdmFsdWUgPSBuZXcgQ29sb3IoKTtcclxuXHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIuYnVmZmVyLCBieXRlT2Zmc2V0LCAzKTtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSAxMjtcclxuXHRcdHRoaXMudHlwZSA9IFwidmVjM1wiO1xyXG5cdH1cclxuXHRzZXQoKTogYm9vbGVhbiB7XHJcblx0XHRpZiAodGhpcy5jYiAhPSB1bmRlZmluZWQpIHRoaXMudmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XHJcblx0XHRjb25zdCB2ID0gdGhpcy52YWx1ZTtcclxuXHRcdGlmICghQ29sb3IuZXF1YWxzKHYsIHRoaXMuX3ZhbHVlKSkge1xyXG5cdFx0XHRDb2xvci5jbG9uZSh2LCB0aGlzLl92YWx1ZSk7XHJcblx0XHRcdHRoaXMuc2V0QnVmZmVyKHRoaXMuX3ZhbHVlLnRvQXJyYXkoKSk7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1NYXQyIGV4dGVuZHMgVW5pZm9ybTxNYXRyaXgyPiB7XHJcblx0c3RhdGljIGFsaWduID0gODtcclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXHJcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcclxuXHRcdGJ5dGVPZmZzZXQ6IG51bWJlcixcclxuXHRcdGNiOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCxcclxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXHJcblx0XHRvZmZzZXQ/OiBudW1iZXJcclxuXHQpIHtcclxuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgb2Zmc2V0KTtcclxuXHRcdHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLl92YWx1ZSA9IG5ldyBNYXRyaXgyKCk7XHJcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgNCk7XHJcblx0XHR0aGlzLmJ5dGVTaXplID0gMTY7XHJcblx0XHR0aGlzLnR5cGUgPSBcIm1hdDJcIjtcclxuXHR9XHJcblx0c2V0KCk6IGJvb2xlYW4ge1xyXG5cdFx0aWYgKHRoaXMuY2IgIT0gdW5kZWZpbmVkKSB0aGlzLnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xyXG5cdFx0Y29uc3QgdiA9IHRoaXMudmFsdWU7XHJcblx0XHRpZiAoIU1hdHJpeDIuZXF1YWxzKHYsIHRoaXMuX3ZhbHVlKSkge1xyXG5cdFx0XHRNYXRyaXgyLmNsb25lKHYsIHRoaXMuX3ZhbHVlKTtcclxuXHRcdFx0dGhpcy5zZXRCdWZmZXIodGhpcy5fdmFsdWUudG9BcnJheSgpKTtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG59XHJcbmV4cG9ydCBjbGFzcyBVbmlmb3JtTWF0MyBleHRlbmRzIFVuaWZvcm08TWF0cml4Mz4ge1xyXG5cdHN0YXRpYyBhbGlnbiA9IDE2O1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcclxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxyXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxyXG5cdFx0Y2I6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LFxyXG5cdFx0YmluZGluZz86IG51bWJlcixcclxuXHRcdG9mZnNldD86IG51bWJlclxyXG5cdCkge1xyXG5cdFx0c3VwZXIodW5pZm9ybU5hbWUsIGNiLCBiaW5kaW5nLCBvZmZzZXQpO1xyXG5cdFx0dGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuX3ZhbHVlID0gbmV3IE1hdHJpeDMoKTtcclxuXHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIuYnVmZmVyLCBieXRlT2Zmc2V0LCA5KTtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSA0ODtcclxuXHRcdHRoaXMudHlwZSA9IFwibWF0M1wiO1xyXG5cdH1cclxuXHRzZXQoKTogYm9vbGVhbiB7XHJcblx0XHRpZiAodGhpcy5jYiAhPSB1bmRlZmluZWQpIHRoaXMudmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XHJcblx0XHRjb25zdCB2ID0gdGhpcy52YWx1ZTtcclxuXHRcdGlmICghTWF0cml4My5lcXVhbHModiwgdGhpcy5fdmFsdWUpKSB7XHJcblx0XHRcdE1hdHJpeDMuY2xvbmUodiwgdGhpcy5fdmFsdWUpO1xyXG5cdFx0XHR0aGlzLnNldEJ1ZmZlcih0aGlzLl92YWx1ZS50b0FycmF5KCkpO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1NYXQ0IGV4dGVuZHMgVW5pZm9ybTxNYXRyaXg0PiB7XHJcblx0c3RhdGljIGFsaWduID0gMTY7XHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxyXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXHJcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXHJcblx0XHRjYjogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsXHJcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxyXG5cdFx0b2Zmc2V0PzogbnVtYmVyXHJcblx0KSB7XHJcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XHJcblx0XHR0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5fdmFsdWUgPSBuZXcgTWF0cml4NCgpO1xyXG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIDE2KTtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSA2NDtcclxuXHRcdHRoaXMudHlwZSA9IFwibWF0NFwiO1xyXG5cdH1cclxuXHRzZXQoKTogYm9vbGVhbiB7XHJcblx0XHRpZiAodGhpcy5jYiAhPSB1bmRlZmluZWQpIHRoaXMudmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XHJcblx0XHRjb25zdCB2ID0gdGhpcy52YWx1ZTtcclxuXHRcdGlmICghTWF0cml4NC5lcXVhbHModiwgdGhpcy5fdmFsdWUpKSB7XHJcblx0XHRcdE1hdHJpeDQuY2xvbmUodiwgdGhpcy5fdmFsdWUpO1xyXG5cdFx0XHR0aGlzLnNldEJ1ZmZlcih0aGlzLl92YWx1ZS50b0FycmF5KCkpO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1NYXRyaXg0QXJyYXkgZXh0ZW5kcyBVbmlmb3JtPEFycmF5PE1hdHJpeDQ+PiB7XHJcblx0c3RhdGljIGFsaWduID0gMTY7XHJcblx0Y2I6IEZ1bmN0aW9uO1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcclxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxyXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxyXG5cdFx0Y2I6IEZ1bmN0aW9uLFxyXG5cdFx0YmluZGluZz86IG51bWJlcixcclxuXHRcdG9mZnNldD86IG51bWJlcixcclxuXHRcdGNvdW50PzogbnVtYmVyXHJcblx0KSB7XHJcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XHJcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5WZXJ0ZXggfCBTaGFkZXJTdGFnZS5GcmFnbWVudDtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSBjb3VudCAqIDY0O1xyXG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIHRoaXMuYnl0ZVNpemUgLyA0KTtcclxuXHRcdHRoaXMudHlwZSA9IFwibWF0NC1hcnJheVwiO1xyXG5cdH1cclxuXHRzZXQoKTogYm9vbGVhbiB7XHJcblx0XHR0aGlzLnZhbHVlID0gdGhpcy5jYigpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHRoaXMuc2V0QnVmZmVyKHRoaXMudmFsdWVbaV0udG9BcnJheSgpLCBpICogMTYpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG59XHJcbmV4cG9ydCBjbGFzcyBVbmlmb3JtRmxvYXRBcnJheSBleHRlbmRzIFVuaWZvcm08QXJyYXk8bnVtYmVyPj4ge1xyXG5cdHN0YXRpYyBhbGlnbiA9IDQ7XHJcblx0Y2I6IEZ1bmN0aW9uO1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcclxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxyXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxyXG5cdFx0Y2I6IEZ1bmN0aW9uLFxyXG5cdFx0YmluZGluZz86IG51bWJlcixcclxuXHRcdG9mZnNldD86IG51bWJlcixcclxuXHRcdGNvdW50PzogbnVtYmVyXHJcblx0KSB7XHJcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XHJcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5WZXJ0ZXggfCBTaGFkZXJTdGFnZS5GcmFnbWVudDtcclxuXHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIuYnVmZmVyLCBieXRlT2Zmc2V0LCBjb3VudCk7XHJcblx0XHR0aGlzLmJ5dGVTaXplID0gNCAqIGNvdW50O1xyXG5cdFx0dGhpcy50eXBlID0gXCJmbG9hdC1hcnJheVwiO1xyXG5cdH1cclxuXHRzZXQoKTogYm9vbGVhbiB7XHJcblx0XHR0aGlzLnZhbHVlID0gdGhpcy5jYigpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHRoaXMuYnVmZmVyW2ldID0gdGhpcy52YWx1ZVtpXTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxufVxyXG5leHBvcnQgY2xhc3MgVW5pZm9ybVZlYzJBcnJheSBleHRlbmRzIFVuaWZvcm08QXJyYXk8VmVjdG9yMj4+IHtcclxuXHRzdGF0aWMgYWxpZ24gPSA4O1xyXG5cdGNiOiBGdW5jdGlvbjtcclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXHJcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcclxuXHRcdGJ5dGVPZmZzZXQ6IG51bWJlcixcclxuXHRcdGNiOiBGdW5jdGlvbixcclxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXHJcblx0XHRvZmZzZXQ/OiBudW1iZXIsXHJcblx0XHRjb3VudD86IG51bWJlclxyXG5cdCkge1xyXG5cdFx0c3VwZXIodW5pZm9ybU5hbWUsIGNiLCBiaW5kaW5nLCBvZmZzZXQpO1xyXG5cdFx0dGhpcy52aXNpYmlsaXR5ID0gU2hhZGVyU3RhZ2UuVmVydGV4IHwgU2hhZGVyU3RhZ2UuRnJhZ21lbnQ7XHJcblx0XHR0aGlzLmJ5dGVTaXplID0gY291bnQgKiA4O1xyXG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIHRoaXMuYnl0ZVNpemUgLyA0KTtcclxuXHRcdHRoaXMudHlwZSA9IFwidmVjMi1hcnJheVwiO1xyXG5cdH1cclxuXHRzZXQoKTogYm9vbGVhbiB7XHJcblx0XHR0aGlzLnZhbHVlID0gdGhpcy5jYigpO1xyXG5cdFx0bGV0IGogPSAwO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHRoaXMuYnVmZmVyW2pdID0gdGhpcy52YWx1ZVtpXS54O1xyXG5cdFx0XHR0aGlzLmJ1ZmZlcltqICsgMV0gPSB0aGlzLnZhbHVlW2ldLnk7XHJcblx0XHRcdGogKz0gMjtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxufVxyXG5leHBvcnQgY2xhc3MgVW5pZm9ybVZlYzNBcnJheSBleHRlbmRzIFVuaWZvcm08QXJyYXk8VmVjdG9yMz4+IHtcclxuXHRzdGF0aWMgYWxpZ24gPSAxNjtcclxuXHRjYjogRnVuY3Rpb247XHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxyXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXHJcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXHJcblx0XHRjYjogRnVuY3Rpb24sXHJcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxyXG5cdFx0b2Zmc2V0PzogbnVtYmVyLFxyXG5cdFx0Y291bnQ/OiBudW1iZXJcclxuXHQpIHtcclxuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcclxuXHRcdHRoaXMudmlzaWJpbGl0eSA9IFNoYWRlclN0YWdlLlZlcnRleCB8IFNoYWRlclN0YWdlLkZyYWdtZW50O1xyXG5cdFx0dGhpcy5ieXRlU2l6ZSA9IGNvdW50ICogMTY7XHJcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgdGhpcy5ieXRlU2l6ZSAvIDQpO1xyXG5cdFx0dGhpcy50eXBlID0gXCJ2ZWMzLWFycmF5XCI7XHJcblx0fVxyXG5cdHNldCgpOiBib29sZWFuIHtcclxuXHRcdHRoaXMudmFsdWUgPSB0aGlzLmNiKCk7XHJcblx0XHRsZXQgaiA9IDA7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsdWUubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dGhpcy5idWZmZXJbal0gPSB0aGlzLnZhbHVlW2ldLng7XHJcblx0XHRcdHRoaXMuYnVmZmVyW2ogKyAxXSA9IHRoaXMudmFsdWVbaV0ueTtcclxuXHRcdFx0dGhpcy5idWZmZXJbaiArIDJdID0gdGhpcy52YWx1ZVtpXS56O1xyXG5cdFx0XHR0aGlzLmJ1ZmZlcltqICsgM10gPSAwO1xyXG5cdFx0XHRqICs9IDQ7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1WZWM0QXJyYXkgZXh0ZW5kcyBVbmlmb3JtPEFycmF5PFZlY3RvcjQ+PiB7XHJcblx0c3RhdGljIGFsaWduID0gMTY7XHJcblx0Y2I6IEZ1bmN0aW9uO1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcclxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxyXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxyXG5cdFx0Y2I6IEZ1bmN0aW9uLFxyXG5cdFx0YmluZGluZz86IG51bWJlcixcclxuXHRcdG9mZnNldD86IG51bWJlcixcclxuXHRcdGNvdW50PzogbnVtYmVyXHJcblx0KSB7XHJcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XHJcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5WZXJ0ZXggfCBTaGFkZXJTdGFnZS5GcmFnbWVudDtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSBjb3VudCAqIDE2O1xyXG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIHRoaXMuYnl0ZVNpemUgLyA0KTtcclxuXHRcdHRoaXMudHlwZSA9IFwidmVjNC1hcnJheVwiO1xyXG5cdH1cclxuXHRzZXQoKTogYm9vbGVhbiB7XHJcblx0XHR0aGlzLnZhbHVlID0gdGhpcy5jYigpO1xyXG5cdFx0bGV0IGogPSAwO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHRoaXMuYnVmZmVyW2pdID0gdGhpcy52YWx1ZVtpXS54O1xyXG5cdFx0XHR0aGlzLmJ1ZmZlcltqICsgMV0gPSB0aGlzLnZhbHVlW2ldLnk7XHJcblx0XHRcdHRoaXMuYnVmZmVyW2ogKyAyXSA9IHRoaXMudmFsdWVbaV0uejtcclxuXHRcdFx0dGhpcy5idWZmZXJbaiArIDNdID0gdGhpcy52YWx1ZVtpXS53O1xyXG5cdFx0XHRqICs9IDQ7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1UZXh0dXJlIGV4dGVuZHMgVW5pZm9ybTxUZXh0dXJlPiB7XHJcblx0cHVibGljIGJpbmRpbmc6IG51bWJlcjtcclxuXHRwdWJsaWMgdHlwZTogc3RyaW5nO1xyXG5cdHB1YmxpYyB2aXNpYmlsaXR5OiBTaGFkZXJTdGFnZTtcclxuXHRwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG5cdHB1YmxpYyB0ZXh0dXJlOiBUZXh0dXJlO1xyXG5cdHByaXZhdGUgX3RleHR1cmU6IEZ1bmN0aW9uIHwgVGV4dHVyZTtcclxuXHRjb25zdHJ1Y3Rvcih1bmlmb3JtTmFtZTogc3RyaW5nLCBiaW5kaW5nOiBudW1iZXIsIHRleHR1cmU6IEZ1bmN0aW9uIHwgVGV4dHVyZSkge1xyXG5cdFx0c3VwZXIodW5pZm9ybU5hbWUpO1xyXG5cdFx0dGhpcy5iaW5kaW5nID0gYmluZGluZztcclxuXHRcdHRoaXMudHlwZSA9IFwidGV4dHVyZVwiO1xyXG5cdFx0dGhpcy52aXNpYmlsaXR5ID0gU2hhZGVyU3RhZ2UuRnJhZ21lbnQ7XHJcblx0XHR0aGlzLl90ZXh0dXJlID0gdGV4dHVyZTtcclxuXHR9XHJcblx0Z2V0IGxheW91dFR5cGUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlPy5sYXlvdXRUeXBlIHx8IFwibm90IHlldCBiaW5kXCI7XHJcblx0fVxyXG5cdGJpbmQoY29udGV4dDogQ29udGV4dCkge1xyXG5cdFx0dGhpcy50ZXh0dXJlID0gdGhpcy5fdGV4dHVyZSBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gdGhpcy5fdGV4dHVyZSgpIDogdGhpcy5fdGV4dHVyZTtcclxuXHRcdHRoaXMudGV4dHVyZS51cGRhdGUoY29udGV4dCk7XHJcblx0fVxyXG59XHJcbmV4cG9ydCBjbGFzcyBVbmlmb3JtU2FtcGxlciBleHRlbmRzIFVuaWZvcm08U2FtcGxlcj4ge1xyXG5cdHB1YmxpYyBiaW5kaW5nOiBudW1iZXI7XHJcblx0cHVibGljIHR5cGU6IHN0cmluZztcclxuXHRwdWJsaWMgdmlzaWJpbGl0eTogU2hhZGVyU3RhZ2U7XHJcblx0cHVibGljIG5hbWU6IHN0cmluZztcclxuXHRwdWJsaWMgc2FtcGxlcjogU2FtcGxlcjtcclxuXHRwcml2YXRlIF9zYW1wbGVyOiBGdW5jdGlvbiB8IFNhbXBsZXI7XHJcblx0Y29uc3RydWN0b3IodW5pZm9ybU5hbWU6IHN0cmluZywgYmluZGluZzogbnVtYmVyLCBzYW1wbGVyOiBGdW5jdGlvbiB8IFNhbXBsZXIpIHtcclxuXHRcdHN1cGVyKHVuaWZvcm1OYW1lKTtcclxuXHRcdHRoaXMubmFtZSA9IHVuaWZvcm1OYW1lO1xyXG5cdFx0dGhpcy5iaW5kaW5nID0gYmluZGluZztcclxuXHRcdHRoaXMudHlwZSA9IFwic2FtcGxlclwiO1xyXG5cdFx0dGhpcy52aXNpYmlsaXR5ID0gU2hhZGVyU3RhZ2UuRnJhZ21lbnQ7XHJcblx0XHR0aGlzLl9zYW1wbGVyID0gc2FtcGxlcjtcclxuXHR9XHJcblx0Z2V0IGxheW91dFR5cGUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5zYW1wbGVyPy5sYXlvdXRUeXBlIHx8IFwibm90IHlldCBiaW5kXCI7XHJcblx0fVxyXG5cdGJpbmQoY29udGV4dDogQ29udGV4dCkge1xyXG5cdFx0dGhpcy5zYW1wbGVyID0gdGhpcy5fc2FtcGxlciBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gdGhpcy5fc2FtcGxlcigpIDogdGhpcy5fc2FtcGxlcjtcclxuXHRcdHRoaXMuc2FtcGxlci51cGRhdGUoY29udGV4dCk7XHJcblx0fVxyXG59XHJcbmV4cG9ydCBjbGFzcyBVbmlmb3JtTGlnaHQgZXh0ZW5kcyBVbmlmb3JtPExpZ2h0PiB7XHJcblx0YnVmZmVyU2l6ZTogbnVtYmVyO1xyXG5cdGJ1ZmZlcjogVW5pZm9ybUJ1ZmZlcjtcclxuXHRjb25zdHJ1Y3Rvcih1bmlmb3JtTmFtZTogc3RyaW5nLCBiaW5kaW5nOiBudW1iZXIsIGJ1ZmZlcjogQnVmZmVyIHwgRnVuY3Rpb24gfCBPYmplY3QsIHNpemU6IG51bWJlcikge1xyXG5cdFx0c3VwZXIodW5pZm9ybU5hbWUpO1xyXG5cdFx0dGhpcy5jYiA9IGJ1ZmZlcjtcclxuXHRcdHRoaXMuYmluZGluZyA9IGJpbmRpbmc7XHJcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5GcmFnbWVudDtcclxuXHRcdHRoaXMuYnVmZmVyU2l6ZSA9IHNpemU7XHJcblx0fVxyXG5cdHNldCgpIHtcclxuXHRcdHRoaXMuYnVmZmVyID0gdGhpcy5nZXRWYWx1ZSgpO1xyXG5cdH1cclxufVxyXG5leHBvcnQgY2xhc3MgVW5pZm9ybVNwb3RMaWdodHMgZXh0ZW5kcyBVbmlmb3JtPFNwb3RMaWdodD4ge1xyXG5cdHN0YXRpYyBhbGlnbiA9IDE2O1xyXG5cdGxpZ2h0czogQXJyYXk8U3BvdExpZ2h0PjtcclxuXHRjYjogRnVuY3Rpb247XHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxyXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXHJcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXHJcblx0XHRjYjogRnVuY3Rpb24sXHJcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxyXG5cdFx0b2Zmc2V0PzogbnVtYmVyLFxyXG5cdFx0Y291bnQ/OiBudW1iZXJcclxuXHQpIHtcclxuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcclxuXHRcdHRoaXMuY2IgPSBjYjtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSBjb3VudCAqIDY0O1xyXG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIHRoaXMuYnl0ZVNpemUgLyA0KTtcclxuXHRcdHRoaXMudHlwZSA9IFwic3BvdHNMaWdodFwiO1xyXG5cdFx0dGhpcy52aXNpYmlsaXR5ID0gU2hhZGVyU3RhZ2UuRnJhZ21lbnQ7XHJcblx0XHR0aGlzLmRpcnR5ID0gZmFsc2U7XHJcblx0fVxyXG5cdHNldCgpIHtcclxuXHRcdHRoaXMubGlnaHRzID0gdGhpcy5jYigpO1xyXG5cdFx0dGhpcy5saWdodHMuZm9yRWFjaCgoc3BvdExpZ2h0LCBpbmRleCkgPT4ge1xyXG5cdFx0XHR0aGlzLnNldFN1YkRhdGEoc3BvdExpZ2h0LCBpbmRleCk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiB0aGlzLmRpcnR5O1xyXG5cdH1cclxuXHRwcml2YXRlIHNldFN1YkRhdGEoc3BvdExpZ2h0OiBTcG90TGlnaHQsIGluZGV4OiBudW1iZXIpIHtcclxuXHRcdGNvbnN0IG9mZnNldCA9IGluZGV4ICogMTY7XHJcblx0XHRpZiAoc3BvdExpZ2h0LnBvc2l0aW9uRGlydHkpIHtcclxuXHRcdFx0dGhpcy5kaXJ0eSA9IHNldERhdGFUb1R5cGVBcnJheSh0aGlzLmJ1ZmZlciwgc3BvdExpZ2h0LnBvc2l0aW9uLnRvQXJyYXkoKSwgb2Zmc2V0ICsgMCk7IC8vYnl0ZU9mZnNldD0wO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHNwb3RMaWdodC5kaXN0YW5jZURpcnR5KSB7XHJcblx0XHRcdHRoaXMuZGlydHkgPSBzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHNwb3RMaWdodC5kaXN0YW5jZSwgb2Zmc2V0ICsgMyk7IC8vYnl0ZU9mZnNldD0xMjtcclxuXHRcdH1cclxuXHRcdGlmIChzcG90TGlnaHQuZGlydGVjdERpcnR5KSB7XHJcblx0XHRcdHRoaXMuZGlydHkgPSBzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHNwb3RMaWdodC5kaXJlY3Rpb25hbC50b0FycmF5KCksIG9mZnNldCArIDQpOyAvL2J5dGVPZmZzZXQ9MTY7XHJcblx0XHR9XHJcblx0XHRpZiAoc3BvdExpZ2h0LmNvbmVDb3NEaXJ0eSkge1xyXG5cdFx0XHR0aGlzLmRpcnR5ID0gc2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBzcG90TGlnaHQuY29uZUNvcywgb2Zmc2V0ICsgNyk7IC8vYnl0ZU9mZnNldD0yODtcclxuXHRcdH1cclxuXHRcdGlmIChzcG90TGlnaHQuY29sb3JEaXJ0eSkge1xyXG5cdFx0XHR0aGlzLmRpcnR5ID0gc2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBzcG90TGlnaHQuY29sb3IudG9BcnJheSgpLCBvZmZzZXQgKyA4KTsgLy9ieXRlT2Zmc2V0PTMyO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHNwb3RMaWdodC5wZW51bWJyYUNvc0RpcnR5KSB7XHJcblx0XHRcdHRoaXMuZGlydHkgPSBzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHNwb3RMaWdodC5wZW51bWJyYUNvcywgb2Zmc2V0ICsgMTEpOyAvL2J5dGVPZmZzZXQ9NDQ7XHJcblx0XHR9XHJcblx0XHRpZiAoc3BvdExpZ2h0LmRlY2F5RGlydHkpIHtcclxuXHRcdFx0dGhpcy5kaXJ0eSA9IHNldERhdGFUb1R5cGVBcnJheSh0aGlzLmJ1ZmZlciwgc3BvdExpZ2h0LmRlY2F5LCBvZmZzZXQgKyAxMik7IC8vYnl0ZU9mZnNldD00ODtcclxuXHRcdH1cclxuXHJcblx0XHRzcG90TGlnaHQucG9zaXRpb25EaXJ0eSA9IGZhbHNlO1xyXG5cdFx0c3BvdExpZ2h0LmRpc3RhbmNlRGlydHkgPSBmYWxzZTtcclxuXHRcdHNwb3RMaWdodC5kaXJ0ZWN0RGlydHkgPSBmYWxzZTtcclxuXHRcdHNwb3RMaWdodC5jb25lQ29zRGlydHkgPSBmYWxzZTtcclxuXHRcdHNwb3RMaWdodC5jb2xvckRpcnR5ID0gZmFsc2U7XHJcblx0XHRzcG90TGlnaHQucGVudW1icmFDb3NEaXJ0eSA9IGZhbHNlO1xyXG5cdFx0c3BvdExpZ2h0LmRlY2F5RGlydHkgPSBmYWxzZTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVbmlmb3JtU3BvdExpZ2h0U2hhZG93cyBleHRlbmRzIFVuaWZvcm08U3BvdExpZ2h0PiB7XHJcblx0c3RhdGljIGFsaWduID0gMTY7XHJcblx0bGlnaHRzOiBBcnJheTxTcG90TGlnaHQ+O1xyXG5cdGNiOiBGdW5jdGlvbjtcclxuXHRwcml2YXRlIF9uZWFyVmFsdWU6IG51bWJlcjtcclxuXHRwcml2YXRlIF9mYXJWYWx1ZTogbnVtYmVyO1xyXG5cdHByaXZhdGUgX3N1YkRhdGFTaXplOiBudW1iZXI7XHJcblxyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcclxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxyXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxyXG5cdFx0Y2I6IEZ1bmN0aW9uLFxyXG5cdFx0YmluZGluZz86IG51bWJlcixcclxuXHRcdG9mZnNldD86IG51bWJlcixcclxuXHRcdGNvdW50PzogbnVtYmVyXHJcblx0KSB7XHJcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XHJcblx0XHR0aGlzLmNiID0gY2I7XHJcblx0XHRjb25zdCBieXRlc1BlckVsZW1lbnQgPSBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XHJcblx0XHR0aGlzLl9zdWJEYXRhU2l6ZSA9IDE4O1xyXG5cdFx0dGhpcy5ieXRlU2l6ZSA9IGNvdW50ICogdGhpcy5fc3ViRGF0YVNpemUgKiBieXRlc1BlckVsZW1lbnQ7XHJcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgdGhpcy5ieXRlU2l6ZSAvIDQpO1xyXG5cdFx0dGhpcy50eXBlID0gXCJzcG90TGlnaHRTaGFkb3dzXCI7XHJcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5GcmFnbWVudDtcclxuXHRcdHRoaXMuX25lYXJWYWx1ZSA9IG51bGw7XHJcblx0XHR0aGlzLl9mYXJWYWx1ZSA9IG51bGw7XHJcblx0fVxyXG5cdHNldCgpIHtcclxuXHRcdHRoaXMubGlnaHRzID0gdGhpcy5jYigpO1xyXG5cdFx0dGhpcy5saWdodHMuZm9yRWFjaCgoc3BvdExpZ2h0LCBpbmRleCkgPT4ge1xyXG5cdFx0XHR0aGlzLnNldFN1YkRhdGEoc3BvdExpZ2h0LCBpbmRleCk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiB0aGlzLmRpcnR5O1xyXG5cdH1cclxuXHRwcml2YXRlIHNldFN1YkRhdGEoc3BvdExpZ2h0OiBTcG90TGlnaHQsIGluZGV4OiBudW1iZXIpIHtcclxuXHRcdGNvbnN0IG9mZnNldCA9IGluZGV4ICogdGhpcy5fc3ViRGF0YVNpemU7XHJcblx0XHRpZiAoc3BvdExpZ2h0LnBvc2l0aW9uRGlydHkgfHwgc3BvdExpZ2h0LnRhcmdldERpcnR5IHx8IHNwb3RMaWdodC5zaGFkb3cuY2FtZXJhLnByb2plY3RNYXRyaXhEaXJ0eSkge1xyXG5cdFx0XHRzcG90TGlnaHQuc2hhZG93LnVwZGF0ZShzcG90TGlnaHQpO1xyXG5cdFx0XHR0aGlzLmRpcnR5ID0gc2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBzcG90TGlnaHQuc2hhZG93LmNhbWVyYS52cE1hdHJpeC50b0FycmF5KCksIG9mZnNldCArIDApOyAvL2J5dGVPZmZzZXQ9MDtcclxuXHRcdH1cclxuXHRcdGNvbnN0IG5lYXJWYWx1ZSA9IHNwb3RMaWdodC5zaGFkb3cuY2FtZXJhLm5lYXI7XHJcblx0XHRpZiAobmVhclZhbHVlICE9IHRoaXMuX25lYXJWYWx1ZSkge1xyXG5cdFx0XHR0aGlzLl9uZWFyVmFsdWUgPSBuZWFyVmFsdWU7XHJcblx0XHRcdHRoaXMuZGlydHkgPSBzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHRoaXMuX25lYXJWYWx1ZSwgb2Zmc2V0ICsgMTYpOyAvL2J5dGVPZmZzZXQ9MDtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGZhclZhbHVlID0gc3BvdExpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyO1xyXG5cdFx0aWYgKGZhclZhbHVlICE9IHRoaXMuX2ZhclZhbHVlKSB7XHJcblx0XHRcdHRoaXMuX2ZhclZhbHVlID0gZmFyVmFsdWU7XHJcblx0XHRcdHRoaXMuZGlydHkgPSBzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHRoaXMuX2ZhclZhbHVlLCBvZmZzZXQgKyAxNyk7IC8vYnl0ZU9mZnNldD0wO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5leHBvcnQgY2xhc3MgVW5pZm9ybVBvaW50TGlnaHRzIGV4dGVuZHMgVW5pZm9ybTxQb2ludExpZ2h0PiB7XHJcblx0c3RhdGljIGFsaWduID0gMTY7XHJcblx0bGlnaHRzOiBBcnJheTxQb2ludExpZ2h0PjtcclxuXHRjYjogRnVuY3Rpb247XHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxyXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXHJcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXHJcblx0XHRjYjogRnVuY3Rpb24sXHJcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxyXG5cdFx0b2Zmc2V0PzogbnVtYmVyLFxyXG5cdFx0Y291bnQ/OiBudW1iZXJcclxuXHQpIHtcclxuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcclxuXHRcdHRoaXMuY2IgPSBjYjtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSBjb3VudCAqIDMyO1xyXG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIHRoaXMuYnl0ZVNpemUgLyA0KTtcclxuXHRcdHRoaXMudHlwZSA9IFwicG9pbnRzTGlnaHRcIjtcclxuXHRcdHRoaXMudmlzaWJpbGl0eSA9IFNoYWRlclN0YWdlLkZyYWdtZW50O1xyXG5cdH1cclxuXHRzZXQoKSB7XHJcblx0XHR0aGlzLmxpZ2h0cyA9IHRoaXMuY2IoKTtcclxuXHRcdHRoaXMubGlnaHRzLmZvckVhY2goKHBvaW50TGlnaHQsIGluZGV4KSA9PiB7XHJcblx0XHRcdHRoaXMuc2V0U3ViRGF0YShwb2ludExpZ2h0LCBpbmRleCk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiB0aGlzLmRpcnR5O1xyXG5cdH1cclxuXHRwcml2YXRlIHNldFN1YkRhdGEocG9pbnRMaWdodDogUG9pbnRMaWdodCwgaW5kZXg6IG51bWJlcikge1xyXG5cdFx0Y29uc3Qgb2Zmc2V0ID0gaW5kZXggKiA4O1xyXG5cdFx0aWYgKHBvaW50TGlnaHQucG9zaXRpb25EaXJ0eSkge1xyXG5cdFx0XHRwb2ludExpZ2h0LnBvc2l0aW9uRGlydHkgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5kaXJ0eSA9IHNldERhdGFUb1R5cGVBcnJheSh0aGlzLmJ1ZmZlciwgcG9pbnRMaWdodC5wb3NpdGlvbi50b0FycmF5KCksIG9mZnNldCArIDApOyAvL2J5dGVPZmZzZXQ9MDtcclxuXHRcdH1cclxuXHRcdGlmIChwb2ludExpZ2h0LmRpc3RhbmNlRGlydHkpIHtcclxuXHRcdFx0cG9pbnRMaWdodC5kaXN0YW5jZURpcnR5ID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZGlydHkgPSBzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHBvaW50TGlnaHQuZGlzdGFuY2UsIG9mZnNldCArIDMpOyAvL2J5dGVPZmZzZXQ9MTI7XHJcblx0XHR9XHJcblx0XHRpZiAocG9pbnRMaWdodC5jb2xvckRpcnR5KSB7XHJcblx0XHRcdHBvaW50TGlnaHQuY29sb3JEaXJ0eSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmRpcnR5ID0gc2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBwb2ludExpZ2h0LmNvbG9yLnRvQXJyYXkoKSwgb2Zmc2V0ICsgNCk7IC8vYnl0ZU9mZnNldD0zMjtcclxuXHRcdH1cclxuXHRcdGlmIChwb2ludExpZ2h0LmRlY2F5RGlydHkpIHtcclxuXHRcdFx0cG9pbnRMaWdodC5kZWNheURpcnR5ID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZGlydHkgPSBzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHBvaW50TGlnaHQuZGVjYXksIG9mZnNldCArIDcpOyAvL2J5dGVPZmZzZXQ9MTI7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVW5pZm9ybVBvaW50TGlnaHRTaGFkb3dzIGV4dGVuZHMgVW5pZm9ybTxQb2ludExpZ2h0PiB7XHJcblx0c3RhdGljIGFsaWduID0gMTY7XHJcblx0bGlnaHRzOiBBcnJheTxQb2ludExpZ2h0PjtcclxuXHRjYjogRnVuY3Rpb247XHJcblx0cHJpdmF0ZSBfbmVhclZhbHVlOiBudW1iZXI7XHJcblx0cHJpdmF0ZSBfZmFyVmFsdWU6IG51bWJlcjtcclxuXHRwcml2YXRlIF9zdWJEYXRhU2l6ZTogbnVtYmVyO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXHJcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcclxuXHRcdGJ5dGVPZmZzZXQ6IG51bWJlcixcclxuXHRcdGNiOiBGdW5jdGlvbixcclxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXHJcblx0XHRvZmZzZXQ/OiBudW1iZXIsXHJcblx0XHRjb3VudD86IG51bWJlclxyXG5cdCkge1xyXG5cdFx0c3VwZXIodW5pZm9ybU5hbWUsIGNiLCBiaW5kaW5nLCBvZmZzZXQpO1xyXG5cdFx0dGhpcy5jYiA9IGNiO1xyXG5cdFx0Y29uc3QgYnl0ZXNQZXJFbGVtZW50ID0gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xyXG5cdFx0dGhpcy5fc3ViRGF0YVNpemUgPSAxODtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSBjb3VudCAqIGJ5dGVzUGVyRWxlbWVudCAqIHRoaXMuX3N1YkRhdGFTaXplO1xyXG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIHRoaXMuYnl0ZVNpemUgLyA0KTtcclxuXHRcdHRoaXMudHlwZSA9IFwicG9pbnRMaWdodFNoYWRvd3NcIjtcclxuXHRcdHRoaXMudmlzaWJpbGl0eSA9IFNoYWRlclN0YWdlLkZyYWdtZW50O1xyXG5cdFx0dGhpcy5fbmVhclZhbHVlID0gbnVsbDtcclxuXHRcdHRoaXMuX2ZhclZhbHVlID0gbnVsbDtcclxuXHR9XHJcblx0c2V0KCkge1xyXG5cdFx0dGhpcy5saWdodHMgPSB0aGlzLmNiKCk7XHJcblx0XHR0aGlzLmxpZ2h0cy5mb3JFYWNoKChwb2ludExpZ2h0LCBpbmRleCkgPT4ge1xyXG5cdFx0XHR0aGlzLnNldFN1YkRhdGEocG9pbnRMaWdodCwgaW5kZXgpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gdGhpcy5kaXJ0eTtcclxuXHR9XHJcblx0cHJpdmF0ZSBzZXRTdWJEYXRhKHBvaW50TGlnaHQ6IFBvaW50TGlnaHQsIGluZGV4OiBudW1iZXIpIHtcclxuXHRcdGNvbnN0IG9mZnNldCA9IGluZGV4ICogdGhpcy5fc3ViRGF0YVNpemU7XHJcblx0XHRpZiAocG9pbnRMaWdodC5wb3NpdGlvbkRpcnR5KSB7XHJcblx0XHRcdC8vIFRPRE865pyq5a6M5oiQ5pu05pawXHJcblx0XHRcdHBvaW50TGlnaHQuc2hhZG93LnVwZGF0ZShwb2ludExpZ2h0KTtcclxuXHRcdFx0dGhpcy5kaXJ0eSA9IHNldERhdGFUb1R5cGVBcnJheSh0aGlzLmJ1ZmZlciwgcG9pbnRMaWdodC5zaGFkb3cuY2FtZXJhLnZwTWF0cml4LnRvQXJyYXkoKSwgb2Zmc2V0ICsgMCk7IC8vYnl0ZU9mZnNldD0wO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgbmVhclZhbHVlID0gcG9pbnRMaWdodC5zaGFkb3cuY2FtZXJhLm5lYXI7XHJcblx0XHRpZiAobmVhclZhbHVlICE9IHRoaXMuX25lYXJWYWx1ZSkge1xyXG5cdFx0XHR0aGlzLl9uZWFyVmFsdWUgPSBuZWFyVmFsdWU7XHJcblx0XHRcdHRoaXMuZGlydHkgPSBzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHRoaXMuX25lYXJWYWx1ZSwgb2Zmc2V0ICsgMTYpOyAvL2J5dGVPZmZzZXQ9MDtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGZhclZhbHVlID0gcG9pbnRMaWdodC5zaGFkb3cuY2FtZXJhLmZhcjtcclxuXHRcdGlmIChmYXJWYWx1ZSAhPSB0aGlzLl9mYXJWYWx1ZSkge1xyXG5cdFx0XHR0aGlzLl9mYXJWYWx1ZSA9IGZhclZhbHVlO1xyXG5cdFx0XHR0aGlzLmRpcnR5ID0gc2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCB0aGlzLl9mYXJWYWx1ZSwgb2Zmc2V0ICsgMTcpOyAvL2J5dGVPZmZzZXQ9MDtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1EaXJ0ZWN0TGlnaHRzIGV4dGVuZHMgVW5pZm9ybTxEaXJlY3Rpb25hbExpZ2h0PiB7XHJcblx0c3RhdGljIGFsaWduID0gMTY7XHJcblx0bGlnaHRzOiBBcnJheTxEaXJlY3Rpb25hbExpZ2h0PjtcclxuXHRjYjogRnVuY3Rpb247XHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxyXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXHJcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXHJcblx0XHRjYjogRnVuY3Rpb24sXHJcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxyXG5cdFx0b2Zmc2V0PzogbnVtYmVyLFxyXG5cdFx0Y291bnQ/OiBudW1iZXJcclxuXHQpIHtcclxuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcclxuXHRcdHRoaXMuY2IgPSBjYjtcclxuXHRcdHRoaXMuYnl0ZVNpemUgPSBjb3VudCAqIDMyO1xyXG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIHRoaXMuYnl0ZVNpemUgLyA0KTtcclxuXHRcdHRoaXMudHlwZSA9IFwiZGlydGVjdExpZ2h0c1wiO1xyXG5cdFx0dGhpcy52aXNpYmlsaXR5ID0gU2hhZGVyU3RhZ2UuRnJhZ21lbnQ7XHJcblx0fVxyXG5cdHNldCgpIHtcclxuXHRcdHRoaXMubGlnaHRzID0gdGhpcy5jYigpO1xyXG5cdFx0dGhpcy5saWdodHMuZm9yRWFjaCgoZGlyZWN0aW9uYWxMaWdodCwgaW5kZXgpID0+IHtcclxuXHRcdFx0dGhpcy5zZXRTdWJEYXRhKGRpcmVjdGlvbmFsTGlnaHQsIGluZGV4KTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHRoaXMuZGlydHk7XHJcblx0fVxyXG5cdHByaXZhdGUgc2V0U3ViRGF0YShkaXJlY3Rpb25hbExpZ2h0OiBEaXJlY3Rpb25hbExpZ2h0LCBpbmRleDogbnVtYmVyKSB7XHJcblx0XHRjb25zdCBvZmZzZXQgPSBpbmRleCAqIDg7XHJcblx0XHRpZiAoZGlyZWN0aW9uYWxMaWdodC5kaXJ0ZWN0RGlydHkpIHtcclxuXHRcdFx0ZGlyZWN0aW9uYWxMaWdodC5kaXJ0ZWN0RGlydHkgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5kaXJ0eSA9IHNldERhdGFUb1R5cGVBcnJheSh0aGlzLmJ1ZmZlciwgZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb25hbC50b0FycmF5KCksIG9mZnNldCArIDApOyAvL2J5dGVPZmZzZXQ9MTY7XHJcblx0XHR9XHJcblx0XHRpZiAoZGlyZWN0aW9uYWxMaWdodC5jb2xvckRpcnR5KSB7XHJcblx0XHRcdGRpcmVjdGlvbmFsTGlnaHQuY29sb3JEaXJ0eSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmRpcnR5ID0gc2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yLnRvQXJyYXkoKSwgb2Zmc2V0ICsgNCk7IC8vYnl0ZU9mZnNldD0zMjtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVbmlmb3JtRGlydGVjdExpZ2h0U2hhZG93cyBleHRlbmRzIFVuaWZvcm08RGlyZWN0aW9uYWxMaWdodD4ge1xyXG5cdHN0YXRpYyBhbGlnbiA9IDE2O1xyXG5cdGxpZ2h0czogQXJyYXk8RGlyZWN0aW9uYWxMaWdodD47XHJcblx0Y2I6IEZ1bmN0aW9uO1xyXG5cdHByaXZhdGUgX3N1YkRhdGFTaXplOiBudW1iZXI7XHJcblxyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcclxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxyXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxyXG5cdFx0Y2I6IEZ1bmN0aW9uLFxyXG5cdFx0YmluZGluZz86IG51bWJlcixcclxuXHRcdG9mZnNldD86IG51bWJlcixcclxuXHRcdGNvdW50PzogbnVtYmVyXHJcblx0KSB7XHJcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XHJcblx0XHR0aGlzLmNiID0gY2I7XHJcblx0XHRjb25zdCBieXRlc1BlckVsZW1lbnQgPSBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XHJcblx0XHR0aGlzLl9zdWJEYXRhU2l6ZSA9IDE2O1xyXG5cdFx0dGhpcy5ieXRlU2l6ZSA9IGNvdW50ICogYnl0ZXNQZXJFbGVtZW50ICogdGhpcy5fc3ViRGF0YVNpemU7XHJcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgdGhpcy5ieXRlU2l6ZSAvIDQpO1xyXG5cdFx0dGhpcy50eXBlID0gXCJkaXJ0ZWN0TGlnaHRTaGFkb3dzXCI7XHJcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5GcmFnbWVudDtcclxuXHR9XHJcblx0c2V0KCkge1xyXG5cdFx0dGhpcy5saWdodHMgPSB0aGlzLmNiKCk7XHJcblx0XHR0aGlzLmxpZ2h0cy5mb3JFYWNoKChkaXJlY3Rpb25hbExpZ2h0LCBpbmRleCkgPT4ge1xyXG5cdFx0XHR0aGlzLnNldFN1YkRhdGEoZGlyZWN0aW9uYWxMaWdodCwgaW5kZXgpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gdGhpcy5kaXJ0eTtcclxuXHR9XHJcblx0cHJpdmF0ZSBzZXRTdWJEYXRhKGRpcmVjdGlvbmFsTGlnaHQ6IERpcmVjdGlvbmFsTGlnaHQsIGluZGV4OiBudW1iZXIpIHtcclxuXHRcdGNvbnN0IG9mZnNldCA9IGluZGV4ICogdGhpcy5fc3ViRGF0YVNpemU7XHJcblx0XHRpZiAoZGlyZWN0aW9uYWxMaWdodC5kaXJ0ZWN0RGlydHkpIHtcclxuXHRcdFx0ZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cudXBkYXRlKGRpcmVjdGlvbmFsTGlnaHQpO1xyXG5cdFx0XHR0aGlzLmRpcnR5ID0gc2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEudnBNYXRyaXgudG9BcnJheSgpLCBvZmZzZXQgKyAwKTsgLy9ieXRlT2Zmc2V0PTE2O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5mdW5jdGlvbiBzZXREYXRhVG9UeXBlQXJyYXkoYnVmZmVyLCBkYXRhLCBvZmZzZXQpIHtcclxuXHRpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG5cdFx0ZGF0YS5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcclxuXHRcdFx0YnVmZmVyW2luZGV4ICsgb2Zmc2V0XSA9IHZhbHVlO1xyXG5cdFx0fSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdGJ1ZmZlcltvZmZzZXRdID0gZGF0YTtcclxuXHR9XHJcblx0cmV0dXJuIHRydWU7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBCaW5kR3JvdXBFbnRpdHlPcHRpb25zLFxyXG4gIEJpbmRHcm91cEVudGl0eVJlc291cmNlVHlwZSxcclxufSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaW5kR3JvdXBFbnRpdHkge1xyXG4gIGJpbmRpbmc6IG51bWJlcjtcclxuICByZXNvdXJjZTogR1BVQmluZGluZ1Jlc291cmNlO1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEJpbmRHcm91cEVudGl0eU9wdGlvbnMpIHtcclxuICAgIHRoaXMuYmluZGluZyA9IG9wdGlvbnMuYmluZGluZztcclxuICAgIHRoaXMucmVzb3VyY2UgPSBvcHRpb25zLnJlc291cmNlO1xyXG4gIH1cclxuICBwdWJsaWMgZ2V0R1BVR3JvdXBFbnRpdHkoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBiaW5kaW5nOiB0aGlzLmJpbmRpbmcsXHJcbiAgICAgIHJlc291cmNlOiB0aGlzLnJlc291cmNlLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmluZEdyb3VwTGF5b3V0RW50cnlUeXBlIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVVHlwZXNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluZEdyb3VwTGF5b3V0RW50cnkge1xyXG4gIGJpbmRpbmc6IG51bWJlcjtcclxuICB2aXNpYmlsaXR5OiBHUFVTaGFkZXJTdGFnZUZsYWdzO1xyXG4gIHVuaWZvcm1zPzogYW55W107XHJcbiAgYnVmZmVyPzogR1BVQnVmZmVyQmluZGluZ0xheW91dDtcclxuICBzYW1wbGVyPzogR1BVU2FtcGxlckJpbmRpbmdMYXlvdXQ7XHJcbiAgdGV4dHVyZT86IEdQVVRleHR1cmVCaW5kaW5nTGF5b3V0O1xyXG4gIHN0b3JhZ2VUZXh0dXJlPzogR1BVU3RvcmFnZVRleHR1cmVCaW5kaW5nTGF5b3V0O1xyXG4gIGV4dGVybmFsVGV4dHVyZT86IEdQVUV4dGVybmFsVGV4dHVyZUJpbmRpbmdMYXlvdXQ7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9uczogQmluZEdyb3VwTGF5b3V0RW50cnlUeXBlKSB7XHJcbiAgICB0aGlzLmJpbmRpbmcgPSBvcHRpb25zLmJpbmRpbmc7XHJcbiAgICB0aGlzLnZpc2liaWxpdHkgPSBvcHRpb25zLnZpc2liaWxpdHk7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IG9wdGlvbnMuYnVmZmVyO1xyXG4gICAgdGhpcy5zYW1wbGVyID0gb3B0aW9ucy5zYW1wbGVyO1xyXG4gICAgdGhpcy50ZXh0dXJlID0gb3B0aW9ucy50ZXh0dXJlO1xyXG4gICAgdGhpcy5zdG9yYWdlVGV4dHVyZSA9IG9wdGlvbnMuc3RvcmFnZVRleHR1cmU7XHJcbiAgICB0aGlzLmV4dGVybmFsVGV4dHVyZSA9IG9wdGlvbnMuc3RvcmFnZVRleHR1cmU7XHJcbiAgfVxyXG4gIGdldEdQVUxheW91dEVudGl0eSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGJpbmRpbmc6IHRoaXMuYmluZGluZyxcclxuICAgICAgdmlzaWJpbGl0eTogdGhpcy52aXNpYmlsaXR5LFxyXG4gICAgICBidWZmZXI6IHRoaXMuYnVmZmVyLFxyXG4gICAgICBzYW1wbGVyOiB0aGlzLnNhbXBsZXIsXHJcbiAgICAgIHRleHR1cmU6IHRoaXMudGV4dHVyZSxcclxuICAgICAgc3RvcmFnZVRleHR1cmU6IHRoaXMuc3RvcmFnZVRleHR1cmUsXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCdWZmZXJCaW5kaW5nVHlwZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCBCaW5kR3JvdXBMYXlvdXRFbnRyeSBmcm9tIFwiLi9CaW5kR3JvdXBMYXlvdXRFbnRyeVwiO1xyXG5jb25zdCBsYXlvdXRDYWNoZSA9IG5ldyBNYXAoKTtcclxuY2xhc3MgQmluZEdyb3VwTGF5b3V0IHtcclxuXHRwdWJsaWMgZ3B1QmluZEdyb3VwTGF5b3V0OiBHUFVCaW5kR3JvdXBMYXlvdXQ7XHJcblx0aW5kZXg6IG51bWJlcjtcclxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKFxyXG5cdFx0ZGV2aWNlOiBHUFVEZXZpY2UsXHJcblx0XHRsYWJlbDogc3RyaW5nLFxyXG5cdFx0cHVibGljIGVudHJpZXM6IEJpbmRHcm91cExheW91dEVudHJ5W10gPSBbXSxcclxuXHRcdGluZGV4OiBudW1iZXIgPSAwXHJcblx0KSB7XHJcblx0XHR0aGlzLmluZGV4ID0gaW5kZXggfHwgMDtcclxuXHRcdHRoaXMuZ3B1QmluZEdyb3VwTGF5b3V0ID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cExheW91dCh7XHJcblx0XHRcdGxhYmVsOiBsYWJlbCxcclxuXHRcdFx0ZW50cmllczogZW50cmllcy5tYXAoKHsgdmlzaWJpbGl0eSwgYnVmZmVyLCBzYW1wbGVyLCB0ZXh0dXJlLCBzdG9yYWdlVGV4dHVyZSwgYmluZGluZyB9KSA9PiAoe1xyXG5cdFx0XHRcdGJpbmRpbmcsXHJcblx0XHRcdFx0dmlzaWJpbGl0eSxcclxuXHRcdFx0XHRidWZmZXIsXHJcblx0XHRcdFx0c2FtcGxlcixcclxuXHRcdFx0XHR0ZXh0dXJlLFxyXG5cdFx0XHRcdHN0b3JhZ2VUZXh0dXJlXHJcblx0XHRcdH0pKVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHN0YXRpYyBnZXRCaW5kR3JvdXBMYXlvdXRGcm9tQ2FjaGUoXHJcblx0XHRkZXZpY2U6IEdQVURldmljZSxcclxuXHRcdGxhYmVsOiBzdHJpbmcsXHJcblx0XHRlbnRpcmVzOiBCaW5kR3JvdXBMYXlvdXRFbnRyeVtdLFxyXG5cdFx0aW5kZXhcclxuXHQpOiBCaW5kR3JvdXBMYXlvdXQge1xyXG5cdFx0aWYgKGxheW91dENhY2hlLmhhcyhsYWJlbCkpIHtcclxuXHRcdFx0cmV0dXJuIGxheW91dENhY2hlLmdldChsYWJlbCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb25zdCBiaW5kR3JvdXBMYXlvdXQgPSBuZXcgQmluZEdyb3VwTGF5b3V0KGRldmljZSwgbGFiZWwsIGVudGlyZXMsIGluZGV4KTtcclxuXHRcdFx0bGF5b3V0Q2FjaGUuc2V0KGxhYmVsLCBiaW5kR3JvdXBMYXlvdXQpO1xyXG5cdFx0XHRyZXR1cm4gYmluZEdyb3VwTGF5b3V0O1xyXG5cdFx0fVxyXG5cdH1cclxuXHRzdGF0aWMgcmVtb3ZlQmluZEdyb3VwTGF5b3V0RnJvbUNhY2hlKGJpbmRHcm91cExheW91dDogQmluZEdyb3VwTGF5b3V0KSB7XHJcblx0XHRsYXlvdXRDYWNoZS5kZWxldGUoYmluZEdyb3VwTGF5b3V0KTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJpbmRHcm91cExheW91dDtcclxuIiwiaW1wb3J0IHsgQmluZEdyb3VwQ2FjaGVPcHRpb25zIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVVHlwZXNcIjtcclxuY29uc3QgYmluZEdyb3VwQ2FjaGUgPSBuZXcgTWFwKCk7XHJcbmNsYXNzIEJpbmRHcm91cCB7XHJcblx0ZGV2aWNlOiBHUFVEZXZpY2U7XHJcblx0Z3B1QmluZEdyb3VwOiBHUFVCaW5kR3JvdXA7XHJcblx0bGFiZWw6IHN0cmluZztcclxuXHRpbmRleDogbnVtYmVyO1xyXG5cdGRpcnR5OiBib29sZWFuO1xyXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM6IEJpbmRHcm91cENhY2hlT3B0aW9ucykge1xyXG5cdFx0dGhpcy5pbmRleCA9IG9wdGlvbnMuaW5kZXggfHwgMDtcclxuXHRcdHRoaXMuZ3B1QmluZEdyb3VwID0gb3B0aW9ucy5kZXZpY2UuY3JlYXRlQmluZEdyb3VwKHtcclxuXHRcdFx0bGFiZWw6IG9wdGlvbnMubGFiZWwsXHJcblx0XHRcdGxheW91dDogb3B0aW9ucy5sYXlvdXQuZ3B1QmluZEdyb3VwTGF5b3V0LFxyXG5cdFx0XHRlbnRyaWVzOiBvcHRpb25zLmVudGlyZXMubWFwKChlbnRpdHkpID0+ICh7XHJcblx0XHRcdFx0YmluZGluZzogZW50aXR5LmJpbmRpbmcsXHJcblx0XHRcdFx0cmVzb3VyY2U6IGVudGl0eS5yZXNvdXJjZVxyXG5cdFx0XHR9KSlcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRiaW5kKHBhc3NFbmNvZGVyOiBHUFVSZW5kZXJQYXNzRW5jb2Rlcikge1xyXG5cdFx0cGFzc0VuY29kZXIuc2V0QmluZEdyb3VwKHRoaXMuaW5kZXgsIHRoaXMuZ3B1QmluZEdyb3VwKTtcclxuXHR9XHJcblx0ZGVzdHJveSgpIHtcclxuXHRcdHRoaXMuZ3B1QmluZEdyb3VwID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5kZXZpY2UgPSB1bmRlZmluZWQ7XHJcblx0fVxyXG5cdHN0YXRpYyBnZXRCaW5kR3JvdXBGcm9tQ2FjaGUob3B0aW9uczogQmluZEdyb3VwQ2FjaGVPcHRpb25zKTogQmluZEdyb3VwIHtcclxuXHRcdGlmIChiaW5kR3JvdXBDYWNoZS5oYXMob3B0aW9ucy5sYWJlbCkpIHtcclxuXHRcdFx0cmV0dXJuIGJpbmRHcm91cENhY2hlLmdldChvcHRpb25zLmxhYmVsKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vQHRzLWlnbm9yZVxyXG5cdFx0XHRjb25zdCBiaW5kR3JvdXAgPSBuZXcgQmluZEdyb3VwKG9wdGlvbnMpO1xyXG5cdFx0XHRiaW5kR3JvdXBDYWNoZS5zZXQob3B0aW9ucy5sYWJlbCwgYmluZEdyb3VwKTtcclxuXHRcdFx0cmV0dXJuIGJpbmRHcm91cDtcclxuXHRcdH1cclxuXHR9XHJcblx0c3RhdGljIHJlbW92ZUJpbmRHcm91cEZyb21DYWNoZShiaW5kR3JvdXA6IEJpbmRHcm91cCkge1xyXG5cdFx0YmluZEdyb3VwQ2FjaGUuZGVsZXRlKGJpbmRHcm91cCk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCaW5kR3JvdXA7XHJcbiIsImltcG9ydCB7IFVuaWZvcm1TYW1wbGVyLCBVbmlmb3JtVGV4dHVyZSB9IGZyb20gXCIuL1VuaWZvcm1zXCI7XHJcbmltcG9ydCBCaW5kR3JvdXBFbnRpdHkgZnJvbSBcIi4vQmluZEdyb3VwRW50aXR5XCI7XHJcbmltcG9ydCBCaW5kR3JvdXBMYXlvdXRFbnRyeSBmcm9tIFwiLi9CaW5kR3JvdXBMYXlvdXRFbnRyeVwiO1xyXG5pbXBvcnQgQmluZEdyb3VwTGF5b3V0IGZyb20gXCIuL0JpbmRHcm91cExheW91dFwiO1xyXG5pbXBvcnQgQmluZEdyb3VwIGZyb20gXCIuL0JpbmRHcm91cFwiO1xyXG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcclxuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vQ29udGV4dFwiO1xyXG5pbXBvcnQgVW5pZm9ybUJ1ZmZlciBmcm9tIFwiLi9Vbmlmb3JtQnVmZmVyXCI7XHJcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuL1RleHR1cmVcIjtcclxuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4vU2FtcGxlclwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZXJEYXRhIHtcclxuXHRjdXJyZW50QmluZGluZzogbnVtYmVyO1xyXG5cclxuXHRkZWZpbmVzOiB7IFtwcm9wOiBzdHJpbmddOiBib29sZWFuIHwgbnVtYmVyIH07XHJcblxyXG5cdGRlZmluZURpcnR5OiBib29sZWFuO1xyXG5cclxuXHRsYWJlbDogc3RyaW5nO1xyXG5cclxuXHRiaW5kR3JvdXA6IEJpbmRHcm91cDtcclxuXHJcblx0Z3JvdXBMYXlvdXQ6IEJpbmRHcm91cExheW91dDtcclxuXHJcblx0bGF5b3V0SW5kZXg6IG51bWJlcjtcclxuXHJcblx0Z3JvdXBJbmRleDogbnVtYmVyO1xyXG5cclxuXHRwcm90ZWN0ZWQgX3VuaWZvcm1zOiBNYXA8c3RyaW5nLCBhbnk+O1xyXG5cclxuXHRjb25zdHJ1Y3RvcihsYWJlbDogc3RyaW5nLCBzaXplPzogbnVtYmVyLCBsYXlvdXRJbmRleD86IG51bWJlciwgZ3JvdXBJbmRleD8pIHtcclxuXHRcdHRoaXMubGFiZWwgPSBsYWJlbDtcclxuXHRcdHRoaXMuY3VycmVudEJpbmRpbmcgPSAwO1xyXG5cdFx0dGhpcy5kZWZpbmVEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLmRlZmluZXMgPSB7fTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zID0gbmV3IE1hcCgpO1xyXG5cdFx0dGhpcy5ncm91cEluZGV4ID0gZGVmYXVsdFZhbHVlKGdyb3VwSW5kZXgsIDApO1xyXG5cdFx0dGhpcy5sYXlvdXRJbmRleCA9IGRlZmF1bHRWYWx1ZShsYXlvdXRJbmRleCwgMCk7XHJcblx0fVxyXG5cdHNldFVuaWZvcm1CdWZmZXIobmFtZTogc3RyaW5nLCB1bmlmb3JtQnVmZmVyOiBVbmlmb3JtQnVmZmVyKSB7XHJcblx0XHRpZiAodGhpcy5fdW5pZm9ybXMuZ2V0KG5hbWUpKSByZXR1cm47XHJcblx0XHR1bmlmb3JtQnVmZmVyLmJpbmRpbmcgPSB0aGlzLmN1cnJlbnRCaW5kaW5nO1xyXG5cdFx0dGhpcy5zZXREZWZpbmUobmFtZS5jb25jYXQoXCJCaW5kaW5nXCIpLCB0aGlzLmN1cnJlbnRCaW5kaW5nKTtcclxuXHRcdHRoaXMuY3VycmVudEJpbmRpbmcgKz0gMTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLnNldChuYW1lLCB1bmlmb3JtQnVmZmVyKTtcclxuXHR9XHJcblx0c2V0VGV4dHVyZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBGdW5jdGlvbiB8IFRleHR1cmUsIGJpbmRpbmc/OiBudW1iZXIpIHtcclxuXHRcdGlmICh0aGlzLl91bmlmb3Jtcy5nZXQobmFtZSkpIHJldHVybjtcclxuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVRleHR1cmUobmFtZSwgdGhpcy5jdXJyZW50QmluZGluZywgdmFsdWUpO1xyXG5cdFx0dGhpcy5zZXREZWZpbmUobmFtZS5jb25jYXQoXCJCaW5kaW5nXCIpLCB0aGlzLmN1cnJlbnRCaW5kaW5nKTtcclxuXHRcdHRoaXMuY3VycmVudEJpbmRpbmcgKz0gMTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLnNldChuYW1lLCB1bmlmb3JtKTtcclxuXHR9XHJcblx0c2V0U2FtcGxlcihuYW1lOiBzdHJpbmcsIHZhbHVlOiBGdW5jdGlvbiB8IFNhbXBsZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcclxuXHRcdGlmICh0aGlzLl91bmlmb3Jtcy5nZXQobmFtZSkpIHJldHVybjtcclxuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVNhbXBsZXIobmFtZSwgdGhpcy5jdXJyZW50QmluZGluZywgdmFsdWUpO1xyXG5cdFx0dGhpcy5zZXREZWZpbmUobmFtZS5jb25jYXQoXCJCaW5kaW5nXCIpLCB0aGlzLmN1cnJlbnRCaW5kaW5nKTtcclxuXHRcdHRoaXMuY3VycmVudEJpbmRpbmcgKz0gMTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLnNldChuYW1lLCB1bmlmb3JtKTtcclxuXHR9XHJcblx0c2V0RGVmaW5lKG5hbWU6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4gfCBudW1iZXIpIHtcclxuXHRcdGlmICh0aGlzLmRlZmluZXNbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLmRlZmluZURpcnR5ID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5kZWZpbmVzW25hbWVdID0gdmFsdWU7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAodGhpcy5kZWZpbmVzW25hbWVdID09PSB2YWx1ZSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLmRlZmluZURpcnR5ID0gdHJ1ZTtcclxuXHRcdFx0XHR0aGlzLmRlZmluZXNbbmFtZV0gPSB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXBsYWNlVW5pZm9ybUJ1ZmZlclZhbHVlKG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0KSB7XHJcblx0XHR0aGlzLl91bmlmb3Jtcy5mb3JFYWNoKCh1bmlmb3JtKSA9PiB7XHJcblx0XHRcdGlmICh1bmlmb3JtPy5pc1VuaWZvcm1CdWZmZXIpIHtcclxuXHRcdFx0XHR1bmlmb3JtLnJlcGxhY2VVbmlmb3JtVmFsdWUobmFtZSwgdmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblx0YmluZChjb250ZXh0OiBDb250ZXh0LCBwYXNzRW5jb2RlcjogR1BVUmVuZGVyUGFzc0VuY29kZXIpIHtcclxuXHRcdHRoaXMudXBsb2FkVW5pZm9ybShjb250ZXh0KTtcclxuXHRcdGlmICghdGhpcy5ncm91cExheW91dClcclxuXHRcdFx0dGhpcy5ncm91cExheW91dCA9IHRoaXMuY3JlYXRlQmluZEdyb3VwTGF5b3V0KGNvbnRleHQuZGV2aWNlLCB0aGlzLmxhYmVsLCB0aGlzLmxheW91dEluZGV4KTtcclxuXHRcdGlmICghdGhpcy5iaW5kR3JvdXApIHRoaXMuYmluZEdyb3VwID0gdGhpcy5jcmVhdGVCaW5kR3JvdXAoY29udGV4dC5kZXZpY2UsIHRoaXMubGFiZWwsIHRoaXMuZ3JvdXBJbmRleCk7XHJcblx0XHR0aGlzLmJpbmRHcm91cC5iaW5kKHBhc3NFbmNvZGVyKTtcclxuXHR9XHJcblx0ZGVzdHJveSgpIHtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLmZvckVhY2goKHVuaWZvcm0pID0+IHtcclxuXHRcdFx0aWYgKHVuaWZvcm0uZGVzdHJveSkgdW5pZm9ybT8uZGVzdHJveSgpO1xyXG5cdFx0fSk7XHJcblx0XHR0aGlzLmxhYmVsID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5jdXJyZW50QmluZGluZyA9IDE7XHJcblx0XHR0aGlzLmRlZmluZURpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuZGVmaW5lcyA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLmNsZWFyKCk7XHJcblx0XHRCaW5kR3JvdXBMYXlvdXQucmVtb3ZlQmluZEdyb3VwTGF5b3V0RnJvbUNhY2hlKHRoaXMuZ3JvdXBMYXlvdXQpO1xyXG5cdFx0dGhpcy5iaW5kR3JvdXAgPSB1bmRlZmluZWQ7XHJcblx0fVxyXG5cdHByaXZhdGUgY3JlYXRlQmluZEdyb3VwKGRldmljZTogR1BVRGV2aWNlLCBsYWJlbDogc3RyaW5nLCBncm91cEluZGV4PzogbnVtYmVyKSB7XHJcblx0XHRjb25zdCBncm91cEVudGl0aWVzID0gdGhpcy5jcmVhdGVCaW5kR3JvdXBFbnRpdHkoKTtcclxuXHRcdGNvbnN0IGJpbmRHcm91cCA9IG5ldyBCaW5kR3JvdXAoe1xyXG5cdFx0XHRsYWJlbDogbGFiZWwsXHJcblx0XHRcdGVudGlyZXM6IGdyb3VwRW50aXRpZXMsXHJcblx0XHRcdGRldmljZTogZGV2aWNlLFxyXG5cdFx0XHRsYXlvdXQ6IHRoaXMuZ3JvdXBMYXlvdXQsXHJcblx0XHRcdGluZGV4OiBncm91cEluZGV4IHx8IDAgLy/lkI7nu63mlLnmiJBncm91cEluZGV4XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBiaW5kR3JvdXA7XHJcblx0fVxyXG5cdHByaXZhdGUgY3JlYXRlQmluZEdyb3VwTGF5b3V0KGRldmljZTogR1BVRGV2aWNlLCBsYWJlbDogc3RyaW5nLCBsYXlvdXRJbmRleD86IG51bWJlcikge1xyXG5cdFx0Y29uc3QgbGF5b3V0RW50aXRpZXMgPSB0aGlzLmNyZWF0ZUJpbmRHcm91cExheW91dEVudHJ5KCk7XHJcblx0XHRjb25zdCBncm91cExheW91dCA9IEJpbmRHcm91cExheW91dC5nZXRCaW5kR3JvdXBMYXlvdXRGcm9tQ2FjaGUoXHJcblx0XHRcdGRldmljZSxcclxuXHRcdFx0bGFiZWwsXHJcblx0XHRcdGxheW91dEVudGl0aWVzLFxyXG5cdFx0XHRsYXlvdXRJbmRleCB8fCAwXHJcblx0XHQpO1xyXG5cdFx0cmV0dXJuIGdyb3VwTGF5b3V0O1xyXG5cdH1cclxuXHRwcm90ZWN0ZWQgdXBsb2FkVW5pZm9ybShjb250ZXh0OiBDb250ZXh0KSB7XHJcblx0XHR0aGlzLl91bmlmb3Jtcy5mb3JFYWNoKCh1bmlmb3JtKSA9PiB7XHJcblx0XHRcdHVuaWZvcm0uYmluZChjb250ZXh0KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRwcml2YXRlIGNyZWF0ZUJpbmRHcm91cExheW91dEVudHJ5KCkge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xyXG5cdFx0dGhpcy5fdW5pZm9ybXMuZm9yRWFjaCgodW5pZm9ybSkgPT4ge1xyXG5cdFx0XHRpZiAoIXJlc3VsdC5oYXModW5pZm9ybS5iaW5kaW5nKSkge1xyXG5cdFx0XHRcdHJlc3VsdC5zZXQodW5pZm9ybS5iaW5kaW5nLCB0aGlzLmNyZWF0ZU9uZUxheW91dEVudHJ5KHVuaWZvcm0pKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRjb25zdCBsYXVvdXRFbnRpdHlBcnJheSA9IFtdO1xyXG5cdFx0cmVzdWx0LmZvckVhY2goKHZhbHVlKSA9PiB7XHJcblx0XHRcdGxhdW91dEVudGl0eUFycmF5LnB1c2godmFsdWUpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIGxhdW91dEVudGl0eUFycmF5O1xyXG5cdH1cclxuXHRwcml2YXRlIGNyZWF0ZUJpbmRHcm91cEVudGl0eSgpIHtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBNYXAoKTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLmZvckVhY2goKHVuaWZvcm0pID0+IHtcclxuXHRcdFx0aWYgKCFyZXN1bHQuaGFzKHVuaWZvcm0uYmluZGluZykpIHtcclxuXHRcdFx0XHRyZXN1bHQuc2V0KHVuaWZvcm0uYmluZGluZywgdGhpcy5jcmVheWVPbmVHcm91cEVudGl0eSh1bmlmb3JtKSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0Y29uc3QgZ3JvdXBFbnRpdHlBcnJheSA9IFtdO1xyXG5cdFx0cmVzdWx0LmZvckVhY2goKHZhbHVlKSA9PiB7XHJcblx0XHRcdGdyb3VwRW50aXR5QXJyYXkucHVzaCh2YWx1ZSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRyZXR1cm4gZ3JvdXBFbnRpdHlBcnJheTtcclxuXHR9XHJcblx0cHJpdmF0ZSBjcmVhdGVPbmVMYXlvdXRFbnRyeSh1bmlmb3JtKSB7XHJcblx0XHRsZXQgbGF5b3V0RW50aXR5O1xyXG5cdFx0aWYgKHVuaWZvcm0udHlwZSA9PT0gXCJ1bmlmb3JtXCIgfHwgdW5pZm9ybS50eXBlID09PSBcInJlYWQtb25seS1zdG9yYWdlXCIpIHtcclxuXHRcdFx0bGF5b3V0RW50aXR5ID0gbmV3IEJpbmRHcm91cExheW91dEVudHJ5KHtcclxuXHRcdFx0XHRiaW5kaW5nOiB1bmlmb3JtLmJpbmRpbmcsXHJcblx0XHRcdFx0YnVmZmVyOiB1bmlmb3JtLmxheW91dFR5cGUsXHJcblx0XHRcdFx0dmlzaWJpbGl0eTogdW5pZm9ybS52aXNpYmlsaXR5XHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIGlmICh1bmlmb3JtLnR5cGUgPT09IFwidGV4dHVyZVwiKSB7XHJcblx0XHRcdGxheW91dEVudGl0eSA9IG5ldyBCaW5kR3JvdXBMYXlvdXRFbnRyeSh7XHJcblx0XHRcdFx0YmluZGluZzogdW5pZm9ybS5iaW5kaW5nLFxyXG5cdFx0XHRcdHZpc2liaWxpdHk6IHVuaWZvcm0udmlzaWJpbGl0eSxcclxuXHRcdFx0XHR0ZXh0dXJlOiB1bmlmb3JtLmxheW91dFR5cGVcclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2UgaWYgKHVuaWZvcm0udHlwZSA9PT0gXCJzYW1wbGVyXCIpIHtcclxuXHRcdFx0bGF5b3V0RW50aXR5ID0gbmV3IEJpbmRHcm91cExheW91dEVudHJ5KHtcclxuXHRcdFx0XHRiaW5kaW5nOiB1bmlmb3JtLmJpbmRpbmcsXHJcblx0XHRcdFx0dmlzaWJpbGl0eTogdW5pZm9ybS52aXNpYmlsaXR5LFxyXG5cdFx0XHRcdHNhbXBsZXI6IHVuaWZvcm0ubGF5b3V0VHlwZVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBsYXlvdXRFbnRpdHk7XHJcblx0fVxyXG5cdHByaXZhdGUgY3JlYXllT25lR3JvdXBFbnRpdHkodW5pZm9ybSkge1xyXG5cdFx0bGV0IGdyb3VwRW50aXR5O1xyXG5cdFx0aWYgKHVuaWZvcm0udHlwZSA9PT0gXCJ1bmlmb3JtXCIgfHwgdW5pZm9ybS50eXBlID09PSBcInJlYWQtb25seS1zdG9yYWdlXCIpIHtcclxuXHRcdFx0Z3JvdXBFbnRpdHkgPSBuZXcgQmluZEdyb3VwRW50aXR5KHtcclxuXHRcdFx0XHRiaW5kaW5nOiB1bmlmb3JtLmJpbmRpbmcsXHJcblx0XHRcdFx0cmVzb3VyY2U6IHtcclxuXHRcdFx0XHRcdGJ1ZmZlcjogdW5pZm9ybS5idWZmZXIuZ3B1QnVmZmVyLFxyXG5cdFx0XHRcdFx0b2Zmc2V0OiB1bmlmb3JtLm9mZnNldCxcclxuXHRcdFx0XHRcdHNpemU6IHVuaWZvcm0uYnVmZmVyU2l6ZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2UgaWYgKHVuaWZvcm0udHlwZSA9PT0gXCJ0ZXh0dXJlXCIpIHtcclxuXHRcdFx0Z3JvdXBFbnRpdHkgPSBuZXcgQmluZEdyb3VwRW50aXR5KHtcclxuXHRcdFx0XHRiaW5kaW5nOiB1bmlmb3JtLmJpbmRpbmcsXHJcblx0XHRcdFx0cmVzb3VyY2U6IHVuaWZvcm0udGV4dHVyZS50ZXh0dXJlVmlld1xyXG5cdFx0XHR9KTtcclxuXHRcdH0gZWxzZSBpZiAodW5pZm9ybS50eXBlID09PSBcInNhbXBsZXJcIikge1xyXG5cdFx0XHRncm91cEVudGl0eSA9IG5ldyBCaW5kR3JvdXBFbnRpdHkoe1xyXG5cdFx0XHRcdGJpbmRpbmc6IHVuaWZvcm0uYmluZGluZyxcclxuXHRcdFx0XHRyZXNvdXJjZTogdW5pZm9ybS5zYW1wbGVyLmdwdVNhbXBsZXJcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZ3JvdXBFbnRpdHk7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCB7IEJ1ZmZlclVzYWdlLCBTaGFkZXJTdGFnZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcbmltcG9ydCBCdWZmZXIgZnJvbSBcIi4vQnVmZmVyXCI7XG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9Db250ZXh0XCI7XG5pbXBvcnQge1xuXHRVbmlmb3JtLFxuXHRVbmlmb3JtQ29sb3IsXG5cdFVuaWZvcm1EaXJ0ZWN0TGlnaHRzLFxuXHRVbmlmb3JtRGlydGVjdExpZ2h0U2hhZG93cyxcblx0VW5pZm9ybUZsb2F0LFxuXHRVbmlmb3JtRmxvYXRBcnJheSxcblx0VW5pZm9ybUZsb2F0VmVjMixcblx0VW5pZm9ybUZsb2F0VmVjMyxcblx0VW5pZm9ybUZsb2F0VmVjNCxcblx0VW5pZm9ybU1hdDIsXG5cdFVuaWZvcm1NYXQzLFxuXHRVbmlmb3JtTWF0NCxcblx0VW5pZm9ybU1hdHJpeDRBcnJheSxcblx0VW5pZm9ybVBvaW50TGlnaHRzLFxuXHRVbmlmb3JtUG9pbnRMaWdodFNoYWRvd3MsXG5cdFVuaWZvcm1TcG90TGlnaHRzLFxuXHRVbmlmb3JtU3BvdExpZ2h0U2hhZG93cyxcblx0VW5pZm9ybVZlYzJBcnJheSxcblx0VW5pZm9ybVZlYzNBcnJheSxcblx0VW5pZm9ybVZlYzRBcnJheVxufSBmcm9tIFwiLi9Vbmlmb3Jtc1wiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5pZm9ybUJ1ZmZlciB7XG5cdHB1YmxpYyB0eXBlOiBzdHJpbmc7XG5cdHB1YmxpYyBoYXNEeW5hbWljT2Zmc2V0OiBib29sZWFuO1xuXHRwdWJsaWMgbWluQmluZGluZ1NpemU6IG51bWJlcjtcblx0cHJpdmF0ZSBfdW5pZm9ybVN0cnVjdDogTWFwPHN0cmluZywgVW5pZm9ybTxhbnk+Pjtcblx0cHJpdmF0ZSBfYnVmZmVyU2l6ZTogbnVtYmVyO1xuXHRwcml2YXRlIGxhYmVsOiBzdHJpbmc7XG5cdGJ5dGVPZmZzZXQ6IG51bWJlcjtcblx0dW5pZm9ybURpcnR5OiBib29sZWFuO1xuXHRiaW5kaW5nOiBudW1iZXI7XG5cdHZpc2liaWxpdHk6IFNoYWRlclN0YWdlO1xuXHR1c2FnZTogQnVmZmVyVXNhZ2U7XG5cdGJ1ZmZlcjogQnVmZmVyO1xuXHRkYXRhQnVmZmVyOiBGbG9hdDMyQXJyYXk7XG5cdG9mZnNldDogbnVtYmVyO1xuXHRpc1VuaWZvcm1CdWZmZXI6IGJvb2xlYW47XG5cdGNvbnN0cnVjdG9yKGxhYmVsOiBzdHJpbmcsIHR5cGU/OiBzdHJpbmcsIHVzYWdlPzogQnVmZmVyVXNhZ2UsIHNpemU/OiBudW1iZXIsIGRhdGFCdWZmZXI/OiBGbG9hdDMyQXJyYXkpIHtcblx0XHR0aGlzLnR5cGUgPSBkZWZhdWx0VmFsdWUodHlwZSwgXCJ1bmlmb3JtXCIpO1xuXHRcdHRoaXMubGFiZWwgPSBkZWZhdWx0VmFsdWUobGFiZWwsIFwiXCIpO1xuXHRcdCh0aGlzLmhhc0R5bmFtaWNPZmZzZXQgPSBmYWxzZSksICh0aGlzLm1pbkJpbmRpbmdTaXplID0gMCk7XG5cdFx0dGhpcy5iaW5kaW5nID0gMDtcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5GcmFnbWVudCB8IFNoYWRlclN0YWdlLlZlcnRleDtcblx0XHR0aGlzLnVzYWdlID0gZGVmYXVsdFZhbHVlKHVzYWdlLCBCdWZmZXJVc2FnZS5Vbmlmb3JtIHwgQnVmZmVyVXNhZ2UuQ29weURzdCk7XG5cdFx0dGhpcy5fdW5pZm9ybVN0cnVjdCA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLnVuaWZvcm1EaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5fYnVmZmVyU2l6ZSA9IHNpemU7XG5cdFx0dGhpcy5vZmZzZXQgPSAwO1xuXHRcdHRoaXMuZGF0YUJ1ZmZlciA9IGRlZmF1bHRWYWx1ZShkYXRhQnVmZmVyLCBuZXcgRmxvYXQzMkFycmF5KGRlZmF1bHRWYWx1ZSh0aGlzLl9idWZmZXJTaXplLCA0MDApKSk7XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ID0gMDtcblx0XHR0aGlzLmlzVW5pZm9ybUJ1ZmZlciA9IHRydWU7XG5cdH1cblx0Z2V0IGxheW91dFR5cGUoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6IHRoaXMudHlwZSxcblx0XHRcdGhhc0R5bmFtaWNPZmZzZXQ6IHRoaXMuaGFzRHluYW1pY09mZnNldCxcblx0XHRcdG1pbkJpbmRpbmdTaXplOiB0aGlzLm1pbkJpbmRpbmdTaXplXG5cdFx0fTtcblx0fVxuXHRnZXQgYnVmZmVyU2l6ZSgpIHtcblx0XHRyZXR1cm4gZGVmYXVsdFZhbHVlKHRoaXMuX2J1ZmZlclNpemUsIHRoaXMudW5pZm9ybXNTaXplICogNCk7XG5cdH1cblx0Z2V0IHVuaWZvcm1zU2l6ZSgpIHtcblx0XHQvL2h0dHBzOi8vZ3B1d2ViLmdpdGh1Yi5pby9ncHV3ZWIvd2dzbC8jYWRkcmVzcy1zcGFjZS1sYXlvdXQtY29uc3RyYWludHNcblx0XHRyZXR1cm4gTWF0aC5jZWlsKHRoaXMuYnl0ZU9mZnNldCAvIDE2KSAqIDE2O1xuXHR9XG5cdGJpbmQoY29udGV4dDogQ29udGV4dCkge1xuXHRcdHRoaXMuX3VuaWZvcm1TdHJ1Y3QuZm9yRWFjaCgodW5pZm9ybSkgPT4ge1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gdW5pZm9ybS5zZXQoKTtcblx0XHRcdGlmICh1bmlmb3JtPy5kaXJ0eSAhPSB1bmRlZmluZWQpIHVuaWZvcm0uZGlydHkgPSBmYWxzZTtcblx0XHRcdGlmIChyZXN1bHQgIT0gdW5kZWZpbmVkICYmIHRoaXMudW5pZm9ybURpcnR5ID09IGZhbHNlKSB0aGlzLnVuaWZvcm1EaXJ0eSA9IHJlc3VsdDtcblx0XHR9KTtcblx0XHRpZiAodGhpcy51bmlmb3JtRGlydHkpIHtcblx0XHRcdHRoaXMudW5pZm9ybURpcnR5ID0gZmFsc2U7XG5cdFx0XHRpZiAoIXRoaXMuYnVmZmVyKVxuXHRcdFx0XHR0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5jcmVhdGVVbmlmb3JtQnVmZmVyKHRoaXMubGFiZWwsIGNvbnRleHQuZGV2aWNlLCB0aGlzLmJ1ZmZlclNpemUsIHRoaXMudXNhZ2UpO1xuXHRcdFx0dGhpcy5idWZmZXIuc2V0U3ViRGF0YSgwLCB0aGlzLmRhdGFCdWZmZXIuc2xpY2UoMCwgZGVmYXVsdFZhbHVlKHRoaXM/LmJ1ZmZlclNpemUgLyA0LCB0aGlzLnVuaWZvcm1zU2l6ZSkpKTtcblx0XHR9XG5cdH1cblx0cHVibGljIGdldFVuaWZvcm1CdWZmZXJTdHJ1Y3QoKSB7XG5cdFx0bGV0IHVuaWZvcm1TdHJ1Y3QgPSBgc3RydWN0IE1hdGVyaWFsVW5pZm9ybSB7XFxuIGA7XG5cdFx0dGhpcy5fdW5pZm9ybVN0cnVjdC5mb3JFYWNoKCh1bmlmb3JtKSA9PiB7XG5cdFx0XHR1bmlmb3JtU3RydWN0ICs9IHRoaXMuY3JlYXRlVW5pZm9ybVN0cmluZyh1bmlmb3JtKTtcblx0XHR9KTtcblx0XHR1bmlmb3JtU3RydWN0ICs9IGB9XFxuYDtcblx0XHRyZXR1cm4gdW5pZm9ybVN0cnVjdDtcblx0fVxuXHRwcml2YXRlIGNyZWF0ZVVuaWZvcm1TdHJpbmcodW5pZm9ybSkge1xuXHRcdGxldCByZXN1bHQgPSBgYDtcblx0XHRzd2l0Y2ggKHVuaWZvcm0udHlwZSkge1xuXHRcdFx0Y2FzZSBcInZlYzFcIjpcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6ZjMyLFxcbmA7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInZlYzJcIjpcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6dmVjMjxmMzI+LFxcbmA7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInZlYzNcIjpcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6dmVjMzxmMzI+LFxcbmA7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInZlYzRcIjpcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6dmVjNDxmMzI+LFxcbmA7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcIm1hdDJcIjpcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6bWF0MngyPGYzMj4sXFxuYDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwibWF0M1wiOlxuXHRcdFx0XHRyZXN1bHQgPSBgJHt1bmlmb3JtLm5hbWV9IDptYXQzeDM8ZjMyPixcXG5gO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJtYXQ0XCI6XG5cdFx0XHRcdHJlc3VsdCA9IGAke3VuaWZvcm0ubmFtZX0gOm1hdDR4NDxmMzI+LFxcbmA7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cdHNldEZsb2F0KG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LCBiaW5kaW5nPzogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1TdHJ1Y3QuZ2V0KG5hbWUpKSByZXR1cm47XG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtRmxvYXQobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRGbG9hdFZlYzIobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtRmxvYXRWZWMyLmFsaWduKTtcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1GbG9hdFZlYzIobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRGbG9hdFZlYzMobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtRmxvYXRWZWMzLmFsaWduKTtcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1GbG9hdFZlYzMobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRDb2xvcihuYW1lOiBzdHJpbmcsIHZhbHVlOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCwgYmluZGluZz86IG51bWJlcikge1xuXHRcdGlmICh0aGlzLl91bmlmb3JtU3RydWN0LmdldChuYW1lKSkgcmV0dXJuO1xuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB0aGlzLmNoZWNrVW5pZm9ybU9mZnNldCh0aGlzLmJ5dGVPZmZzZXQsIFVuaWZvcm1Db2xvci5hbGlnbik7XG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtQ29sb3IobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRGbG9hdFZlYzQobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtRmxvYXRWZWM0LmFsaWduKTtcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1GbG9hdFZlYzQobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRNYXRyaXgyKG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LCBiaW5kaW5nPzogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1TdHJ1Y3QuZ2V0KG5hbWUpKSByZXR1cm47XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHRoaXMuY2hlY2tVbmlmb3JtT2Zmc2V0KHRoaXMuYnl0ZU9mZnNldCwgVW5pZm9ybU1hdDIuYWxpZ24pO1xuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybU1hdDIobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRNYXRyaXgzKG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LCBiaW5kaW5nPzogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1TdHJ1Y3QuZ2V0KG5hbWUpKSByZXR1cm47XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHRoaXMuY2hlY2tVbmlmb3JtT2Zmc2V0KHRoaXMuYnl0ZU9mZnNldCwgVW5pZm9ybU1hdDMuYWxpZ24pO1xuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybU1hdDMobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRNYXRyaXg0KG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LCBiaW5kaW5nPzogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1TdHJ1Y3QuZ2V0KG5hbWUpKSByZXR1cm47XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHRoaXMuY2hlY2tVbmlmb3JtT2Zmc2V0KHRoaXMuYnl0ZU9mZnNldCwgVW5pZm9ybU1hdDQuYWxpZ24pO1xuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybU1hdDQobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRNYXRyaXg0QXJyYXkobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtTWF0cml4NEFycmF5LmFsaWduKTtcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1NYXRyaXg0QXJyYXkobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nLCAwLCBjb3VudCk7XG5cdFx0dGhpcy5fdW5pZm9ybVN0cnVjdC5zZXQobmFtZSwgdW5pZm9ybSk7XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHVuaWZvcm0uYnl0ZVNpemU7XG5cdH1cblx0cmVwbGFjZVVuaWZvcm1WYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCkge1xuXHRcdGNvbnN0IHVuaWZvcm0gPSB0aGlzLl91bmlmb3JtU3RydWN0LmdldChuYW1lKTtcblx0XHRpZiAoIXVuaWZvcm0pIGNvbnNvbGUuZXJyb3IoXCJub3QgZmluZCB1bmlmb3JtXCIpO1xuXHRcdHVuaWZvcm0uY2IgPSB2YWx1ZTtcblx0fVxuXHQvLyB1bmlmb3JtQnVmZmVyLnNldFZlYzNBcnJheSgndGVzdCcsKCk9PntyZXR1cm4gW25ldyBWZWN0b3IzKDEsMCwwKSxuZXcgVmVjdG9yMygxLDAuOCwwLjUpXX0sMik7XG5cdC8vIHVuaWZvcm1CdWZmZXIuc2V0RmxvYXRBcnJheSgndGVzdDEnLCgpPT57cmV0dXJuIFswLjUsMC41LDEuMF19LDMpO1xuXHQvLyB1bmlmb3JtQnVmZmVyLnNldFZlYzRBcnJheSgndGVzdDQnLCgpPT57cmV0dXJuIFtuZXcgVmVjdG9yNCgwLjUsMC42LDAuMiwxLjApLG5ldyBWZWN0b3I0KDAuNSwwLjgsMC44LDEuMCldfSwyKTtcblx0Ly8gdW5pZm9ybUJ1ZmZlci5zZXRWZWMyQXJyYXkoJ3Rlc3QyJywoKT0+e3JldHVybiBbbmV3IFZlY3RvcjIoMC41LDAuNiksbmV3IFZlY3RvcjIoMC41LDAuOCwpXX0sMik7XG5cdHNldEZsb2F0QXJyYXkobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtRmxvYXRBcnJheS5hbGlnbik7XG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtRmxvYXRBcnJheShuYW1lLCB0aGlzLmRhdGFCdWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdmFsdWUsIGJpbmRpbmcsIDAsIGNvdW50KTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRWZWMyQXJyYXkobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtVmVjMkFycmF5LmFsaWduKTtcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1WZWMyQXJyYXkobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nLCAwLCBjb3VudCk7XG5cdFx0dGhpcy5fdW5pZm9ybVN0cnVjdC5zZXQobmFtZSwgdW5pZm9ybSk7XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHVuaWZvcm0uYnl0ZVNpemU7XG5cdH1cblx0c2V0VmVjM0FycmF5KG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uLCBjb3VudDogbnVtYmVyLCBiaW5kaW5nPzogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1TdHJ1Y3QuZ2V0KG5hbWUpKSByZXR1cm47XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHRoaXMuY2hlY2tVbmlmb3JtT2Zmc2V0KHRoaXMuYnl0ZU9mZnNldCwgVW5pZm9ybVZlYzNBcnJheS5hbGlnbik7XG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtVmVjM0FycmF5KG5hbWUsIHRoaXMuZGF0YUJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB2YWx1ZSwgYmluZGluZywgMCwgY291bnQpO1xuXHRcdHRoaXMuX3VuaWZvcm1TdHJ1Y3Quc2V0KG5hbWUsIHVuaWZvcm0pO1xuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB1bmlmb3JtLmJ5dGVTaXplO1xuXHR9XG5cdHNldFZlYzRBcnJheShuYW1lOiBzdHJpbmcsIHZhbHVlOiBGdW5jdGlvbiwgY291bnQ6IG51bWJlciwgYmluZGluZz86IG51bWJlcikge1xuXHRcdGlmICh0aGlzLl91bmlmb3JtU3RydWN0LmdldChuYW1lKSkgcmV0dXJuO1xuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB0aGlzLmNoZWNrVW5pZm9ybU9mZnNldCh0aGlzLmJ5dGVPZmZzZXQsIFVuaWZvcm1WZWM0QXJyYXkuYWxpZ24pO1xuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVZlYzRBcnJheShuYW1lLCB0aGlzLmRhdGFCdWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdmFsdWUsIGJpbmRpbmcsIDAsIGNvdW50KTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRTcG90TGlnaHRzKG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uLCBjb3VudDogbnVtYmVyLCBiaW5kaW5nPzogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1TdHJ1Y3QuZ2V0KG5hbWUpKSByZXR1cm47XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHRoaXMuY2hlY2tVbmlmb3JtT2Zmc2V0KHRoaXMuYnl0ZU9mZnNldCwgVW5pZm9ybVNwb3RMaWdodHMuYWxpZ24pO1xuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVNwb3RMaWdodHMobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nLCAwLCBjb3VudCk7XG5cdFx0dGhpcy5fdW5pZm9ybVN0cnVjdC5zZXQobmFtZSwgdW5pZm9ybSk7XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHVuaWZvcm0uYnl0ZVNpemU7XG5cdH1cblx0c2V0UG9pbnRMaWdodHMobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtUG9pbnRMaWdodHMuYWxpZ24pO1xuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVBvaW50TGlnaHRzKG5hbWUsIHRoaXMuZGF0YUJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB2YWx1ZSwgYmluZGluZywgMCwgY291bnQpO1xuXHRcdHRoaXMuX3VuaWZvcm1TdHJ1Y3Quc2V0KG5hbWUsIHVuaWZvcm0pO1xuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB1bmlmb3JtLmJ5dGVTaXplO1xuXHR9XG5cdHNldERpcnRlY3RMaWdodHMobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtRGlydGVjdExpZ2h0cy5hbGlnbik7XG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtRGlydGVjdExpZ2h0cyhuYW1lLCB0aGlzLmRhdGFCdWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdmFsdWUsIGJpbmRpbmcsIDAsIGNvdW50KTtcblx0XHR0aGlzLl91bmlmb3JtU3RydWN0LnNldChuYW1lLCB1bmlmb3JtKTtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcblx0fVxuXHRzZXRTcG90TGlnaHRTaGFkb3dzKG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uLCBjb3VudDogbnVtYmVyLCBiaW5kaW5nPzogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1TdHJ1Y3QuZ2V0KG5hbWUpKSByZXR1cm47XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHRoaXMuY2hlY2tVbmlmb3JtT2Zmc2V0KHRoaXMuYnl0ZU9mZnNldCwgVW5pZm9ybVNwb3RMaWdodFNoYWRvd3MuYWxpZ24pO1xuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVNwb3RMaWdodFNoYWRvd3MobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nLCAwLCBjb3VudCk7XG5cdFx0dGhpcy5fdW5pZm9ybVN0cnVjdC5zZXQobmFtZSwgdW5pZm9ybSk7XG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHVuaWZvcm0uYnl0ZVNpemU7XG5cdH1cblx0c2V0UG9pbnRMaWdodFNoYWRvd3MobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtUG9pbnRMaWdodFNoYWRvd3MuYWxpZ24pO1xuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVBvaW50TGlnaHRTaGFkb3dzKG5hbWUsIHRoaXMuZGF0YUJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB2YWx1ZSwgYmluZGluZywgMCwgY291bnQpO1xuXHRcdHRoaXMuX3VuaWZvcm1TdHJ1Y3Quc2V0KG5hbWUsIHVuaWZvcm0pO1xuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB1bmlmb3JtLmJ5dGVTaXplO1xuXHR9XG5cdHNldERpcnRlY3RMaWdodFNoYWRvd3MobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybVN0cnVjdC5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtRGlydGVjdExpZ2h0U2hhZG93cy5hbGlnbik7XG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtRGlydGVjdExpZ2h0U2hhZG93cyhcblx0XHRcdG5hbWUsXG5cdFx0XHR0aGlzLmRhdGFCdWZmZXIsXG5cdFx0XHR0aGlzLmJ5dGVPZmZzZXQsXG5cdFx0XHR2YWx1ZSxcblx0XHRcdGJpbmRpbmcsXG5cdFx0XHQwLFxuXHRcdFx0Y291bnRcblx0XHQpO1xuXHRcdHRoaXMuX3VuaWZvcm1TdHJ1Y3Quc2V0KG5hbWUsIHVuaWZvcm0pO1xuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB1bmlmb3JtLmJ5dGVTaXplO1xuXHR9XG5cdHByaXZhdGUgY2hlY2tVbmlmb3JtT2Zmc2V0KGJ5dGVTaXplOiBudW1iZXIsIEFsaWduOiBudW1iZXIpOiBudW1iZXIge1xuXHRcdC8vZnJvbSBodHRwczovL2dwdXdlYi5naXRodWIuaW8vZ3B1d2ViL3dnc2wvI2FkZHJlc3Mtc3BhY2UtbGF5b3V0LWNvbnN0cmFpbnRzXG5cdFx0cmV0dXJuIE1hdGguY2VpbChieXRlU2l6ZSAvIEFsaWduKSAqIEFsaWduIC0gYnl0ZVNpemU7XG5cdH1cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzPy5idWZmZXI/LmRlc3Ryb3koKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgVGV4dHVyZUZvcm1hdCB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCB7IFdlYkdQVVRleHR1cmVQcm9wcywgSW1hZ2VEYXRhIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVVHlwZXNcIjtcclxuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XHJcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuL0NvbnRleHRcIjtcclxuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4vU2FtcGxlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dHVyZSB7XHJcblx0W3g6IHN0cmluZ106IGFueTtcclxuXHRwcml2YXRlIF90ZXh0dXJlVmlldzogR1BVVGV4dHVyZVZpZXc7XHJcblx0cHVibGljIGdwdVRleHR1cmU/OiBHUFVUZXh0dXJlO1xyXG5cdHB1YmxpYyBtaXBMZXZlbENvdW50PzogbnVtYmVyO1xyXG5cdHB1YmxpYyBzYW1wbGVyPzogU2FtcGxlcjtcclxuXHRwdWJsaWMgY29udGV4dD86IENvbnRleHQ7XHJcblx0cHVibGljIHRleHR1cmVQcm9wPzogV2ViR1BVVGV4dHVyZVByb3BzO1xyXG5cdHB1YmxpYyBkaXJ0eTogYm9vbGVhbjtcclxuXHRwdWJsaWMgZml4ZWRTaXplOiBib29sZWFuO1xyXG5cdGNvbnN0cnVjdG9yKHRleHR1cmVQcm9wOiBXZWJHUFVUZXh0dXJlUHJvcHMpIHtcclxuXHRcdHRoaXMudGV4dHVyZVByb3AgPSBPYmplY3QuYXNzaWduKFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0LlJHQkE4VW5vcm0sXHJcblx0XHRcdFx0dXNhZ2U6IEdQVVRleHR1cmVVc2FnZS5URVhUVVJFX0JJTkRJTkcgfCBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9EU1QgfCBHUFVUZXh0dXJlVXNhZ2UuUkVOREVSX0FUVEFDSE1FTlQsXHJcblx0XHRcdFx0ZGF0YUlzVGV4dHVyZTogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcdFx0dGV4dHVyZVByb3BcclxuXHRcdCk7XHJcblx0XHR0aGlzLnNhbXBsZXIgPSB0ZXh0dXJlUHJvcC5zYW1wbGVyO1xyXG5cdFx0dGhpcy5kaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLmZpeGVkU2l6ZSA9IHRleHR1cmVQcm9wLmZpeGVkU2l6ZSB8fCBmYWxzZTtcclxuXHR9XHJcblx0Z2V0IGxheW91dFR5cGUoKSB7XHJcblx0XHRjb25zdCB7IHZpZXdGb3JtYXRzLCBzYW1wbGVUeXBlLCBzYW1wbGVDb3VudCB9ID0gdGhpcy50ZXh0dXJlUHJvcDtcclxuXHRcdC8vIGNvbnN0XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzYW1wbGVUeXBlOiBkZWZhdWx0VmFsdWUoc2FtcGxlVHlwZSwgXCJmbG9hdFwiKSxcclxuXHRcdFx0dmlld0RpbWVuc2lvbjogZGVmYXVsdFZhbHVlKHZpZXdGb3JtYXRzLCBcIjJkXCIpLFxyXG5cdFx0XHRtdWx0aXNhbXBsZWQ6IHNhbXBsZUNvdW50ICYmIHNhbXBsZUNvdW50ID4gMSA/IHRydWUgOiBmYWxzZVxyXG5cdFx0fTtcclxuXHR9XHJcblx0Z2V0IHRleHR1cmVWaWV3KCkge1xyXG5cdFx0aWYgKCF0aGlzLl90ZXh0dXJlVmlldylcclxuXHRcdFx0dGhpcy5fdGV4dHVyZVZpZXcgPSB0aGlzLmdwdVRleHR1cmUuY3JlYXRlVmlldyh7XHJcblx0XHRcdFx0ZGltZW5zaW9uOiA8R1BVVGV4dHVyZVZpZXdEaW1lbnNpb24+ZGVmYXVsdFZhbHVlKHRoaXMudGV4dHVyZVByb3Audmlld0Zvcm1hdHMsIFwiMmRcIilcclxuXHRcdFx0fSk7XHJcblx0XHRyZXR1cm4gdGhpcy5fdGV4dHVyZVZpZXc7XHJcblx0fVxyXG5cdHVwZGF0ZShjb250ZXh0OiBDb250ZXh0KSB7XHJcblx0XHRpZiAoIXRoaXMuY29udGV4dCkgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuXHRcdGlmICh0aGlzLmRpcnR5KSB7XHJcblx0XHRcdHRoaXMuY2hlY2tOZWVkQ3JlYXRlVGV4dHVyZSgpO1xyXG5cdFx0XHR0aGlzLmRpcnR5ID0gZmFsc2U7XHJcblx0XHRcdGlmICh0aGlzLnRleHR1cmVQcm9wLmRhdGEpIHtcclxuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnRleHR1cmVQcm9wLmRhdGEpKSB7XHJcblx0XHRcdFx0XHR0aGlzLnRleHR1cmVQcm9wLmRhdGEuZm9yRWFjaCgoaW1hZ2VEYXRhKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMuc2V0RGF0YShpbWFnZURhdGEpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRoaXMuc2V0RGF0YSh0aGlzLnRleHR1cmVQcm9wLmRhdGEpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodGhpcy50ZXh0dXJlUHJvcC5uZWVkTWlwTWFwKSB7XHJcblx0XHRcdFx0dGhpcy5ncHVUZXh0dXJlID0gY29udGV4dC5taXBtYXBUb29scy5nZW5lcmF0ZU1pcG1hcCh0aGlzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodGhpcy5zYW1wbGVyKSB0aGlzLnNhbXBsZXIudXBkYXRlKGNvbnRleHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRwcml2YXRlIHNldERhdGEob3B0aW9uczogSW1hZ2VEYXRhKSB7XHJcblx0XHRjb25zdCB7XHJcblx0XHRcdHNvdXJjZSxcclxuXHRcdFx0d2lkdGggPSBvcHRpb25zLnNvdXJjZS53aWR0aCxcclxuXHRcdFx0aGVpZ2h0ID0gb3B0aW9ucy5zb3VyY2UuaGVpZ2h0LFxyXG5cdFx0XHRkZXB0aCA9IDEsXHJcblx0XHRcdHNvdXJjZVggPSAwLFxyXG5cdFx0XHRzb3VyY2VZID0gMCxcclxuXHRcdFx0bWlwTGV2ZWwgPSAwLFxyXG5cdFx0XHR4ID0gMCxcclxuXHRcdFx0eSA9IDAsXHJcblx0XHRcdHogPSAwLFxyXG5cdFx0XHRhc3BlY3QgPSBcImFsbFwiLFxyXG5cdFx0XHRjb2xvclNwYWNlID0gXCJzcmdiXCIsXHJcblx0XHRcdHByZW11bHRpcGxpZWRBbHBoYSA9IGZhbHNlXHJcblx0XHR9ID0gb3B0aW9ucztcclxuXHRcdGlmIChzb3VyY2UgaW5zdGFuY2VvZiBUZXh0dXJlKSB7XHJcblx0XHRcdGxldCBjb21tYW5kRW5jb2RlciA9IHRoaXMuY29udGV4dC5kZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcclxuXHRcdFx0Y29tbWFuZEVuY29kZXIuY29weVRleHR1cmVUb1RleHR1cmUoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dGV4dHVyZTogPEdQVVRleHR1cmU+c291cmNlLmdwdVRleHR1cmUsXHJcblx0XHRcdFx0XHRvcmlnaW46IFtzb3VyY2VYLCBzb3VyY2VZXVxyXG5cdFx0XHRcdFx0Ly8gYXNwZWN0XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0ZXh0dXJlOiB0aGlzLmdwdVRleHR1cmUsXHJcblx0XHRcdFx0XHRvcmlnaW46IHsgeDogMCwgeTogMCwgeiB9LFxyXG5cdFx0XHRcdFx0bWlwTGV2ZWxcclxuXHRcdFx0XHRcdC8vIGFzcGVjdFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0d2lkdGgsXHJcblx0XHRcdFx0XHRoZWlnaHQsXHJcblx0XHRcdFx0XHRkZXB0aE9yQXJyYXlMYXllcnM6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdCk7XHJcblx0XHRcdHRoaXMuY29udGV4dC5kZXZpY2UucXVldWUuc3VibWl0KFtjb21tYW5kRW5jb2Rlci5maW5pc2goKV0pO1xyXG5cdFx0XHRjb21tYW5kRW5jb2RlciA9IG51bGw7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmNvbnRleHQuZGV2aWNlLnF1ZXVlLmNvcHlFeHRlcm5hbEltYWdlVG9UZXh0dXJlKFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHNvdXJjZSxcclxuXHRcdFx0XHRcdG9yaWdpbjogW3NvdXJjZVgsIHNvdXJjZVldXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0ZXh0dXJlOiB0aGlzLmdwdVRleHR1cmUsXHJcblx0XHRcdFx0XHRvcmlnaW46IFt4LCB5LCB6XSxcclxuXHRcdFx0XHRcdG1pcExldmVsLFxyXG5cdFx0XHRcdFx0YXNwZWN0LFxyXG5cdFx0XHRcdFx0Y29sb3JTcGFjZSxcclxuXHRcdFx0XHRcdHByZW11bHRpcGxpZWRBbHBoYVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0W3dpZHRoLCBoZWlnaHQsIGRlcHRoXVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRzZXRTaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBkZXB0aD86IG51bWJlcikge1xyXG5cdFx0aWYgKHRoaXMuZml4ZWRTaXplKSByZXR1cm47XHJcblx0XHR0aGlzLnRleHR1cmVQcm9wLnNpemUud2lkdGggPSB3aWR0aDtcclxuXHRcdHRoaXMudGV4dHVyZVByb3Auc2l6ZS5oZWlnaHQgPSBoZWlnaHQ7XHJcblx0XHRpZiAoZGVwdGgpIHRoaXMudGV4dHVyZVByb3Auc2l6ZS5kZXB0aCA9IGRlcHRoO1xyXG5cdFx0dGhpcy5kaXJ0eSA9IHRydWU7XHJcblx0fVxyXG5cdGRlc3Ryb3koKTogdm9pZCB7XHJcblx0XHR0aGlzLmdwdVRleHR1cmUuZGVzdHJveSgpO1xyXG5cdH1cclxuXHRwcml2YXRlIGNyZWF0ZUdQVVRleHR1cmUoKSB7XHJcblx0XHRpZiAodHlwZW9mIHRoaXMudGV4dHVyZVByb3AuZm9ybWF0ID09PSBcIm51bWJlclwiKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIm51bWJlciBmb3JtYXRcIik7XHJcblx0XHR9XHJcblx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGRlcHRoIH0gPSB0aGlzLnRleHR1cmVQcm9wLnNpemU7XHJcblx0XHRyZXR1cm4gdGhpcy5jb250ZXh0LmRldmljZS5jcmVhdGVUZXh0dXJlKHtcclxuXHRcdFx0bGFiZWw6IHRoaXMudGV4dHVyZVByb3A/LmxhYmVsIHx8IFwidW5kZWZpbmVkXCIsXHJcblx0XHRcdHNpemU6IFt3aWR0aCwgaGVpZ2h0LCBkZXB0aF0sXHJcblx0XHRcdGRpbWVuc2lvbjogdGhpcy50ZXh0dXJlUHJvcC5kaW1lbnNpb24gfHwgXCIyZFwiLFxyXG5cdFx0XHRmb3JtYXQ6IHRoaXMudGV4dHVyZVByb3AuZm9ybWF0IGFzIEdQVVRleHR1cmVGb3JtYXQsXHJcblx0XHRcdHVzYWdlOiB0aGlzLnRleHR1cmVQcm9wLnVzYWdlLFxyXG5cdFx0XHRtaXBMZXZlbENvdW50OiB0aGlzLnRleHR1cmVQcm9wLm1pcExldmVsQ291bnQgfHwgMSxcclxuXHRcdFx0c2FtcGxlQ291bnQ6IHRoaXMudGV4dHVyZVByb3Auc2FtcGxlQ291bnQgfHwgMVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHByaXZhdGUgY2hlY2tOZWVkQ3JlYXRlVGV4dHVyZSgpIHtcclxuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgZGVwdGggfSA9IHRoaXMudGV4dHVyZVByb3Auc2l6ZTtcclxuXHRcdGlmICh0aGlzLmdwdVRleHR1cmUpIHtcclxuXHRcdFx0aWYgKHdpZHRoICE9IHRoaXMuZ3B1VGV4dHVyZS53aWR0aCB8fCBoZWlnaHQgIT0gdGhpcy5ncHVUZXh0dXJlLmhlaWdodCkge1xyXG5cdFx0XHRcdHRoaXMuX3RleHR1cmVWaWV3ID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdHRoaXMuZ3B1VGV4dHVyZS5kZXN0cm95KCk7XHJcblx0XHRcdFx0dGhpcy5ncHVUZXh0dXJlID0gdGhpcy5jcmVhdGVHUFVUZXh0dXJlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuZ3B1VGV4dHVyZSA9IHRoaXMuY3JlYXRlR1BVVGV4dHVyZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9Db250ZXh0XCI7XHJcblxyXG5jbGFzcyBTYW1wbGVyIHtcclxuXHRwdWJsaWMgZ3B1U2FtcGxlcjogR1BVU2FtcGxlcjtcclxuXHRwdWJsaWMgbGF5b3V0VHlwZTogR1BVU2FtcGxlckJpbmRpbmdMYXlvdXQ7XHJcblxyXG5cdHN0YXRpYyBiYXNlU2FtcGxlciA9IG5ldyBTYW1wbGVyKHtcclxuXHRcdG1hZ0ZpbHRlcjogXCJsaW5lYXJcIixcclxuXHRcdG1pbkZpbHRlcjogXCJsaW5lYXJcIlxyXG5cdH0pO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHB1YmxpYyBkZXNjcmlwdG9yPzogR1BVU2FtcGxlckRlc2NyaXB0b3IsXHJcblx0XHRsYXlvdXRUeXBlOiBHUFVTYW1wbGVyQmluZGluZ0xheW91dCA9IHtcclxuXHRcdFx0dHlwZTogXCJmaWx0ZXJpbmdcIlxyXG5cdFx0fVxyXG5cdCkge1xyXG5cdFx0dGhpcy5kZXNjcmlwdG9yID0ge307XHJcblx0XHRPYmplY3QuYXNzaWduKFxyXG5cdFx0XHR0aGlzLmRlc2NyaXB0b3IsXHJcblx0XHRcdHtcclxuXHRcdFx0XHRtYWdGaWx0ZXI6IFwibGluZWFyXCIsXHJcblx0XHRcdFx0bWluRmlsdGVyOiBcImxpbmVhclwiLFxyXG5cdFx0XHRcdC8vIG1pcG1hcEZpbHRlcjogXCJsaW5lYXJcIixcclxuXHRcdFx0XHRhZGRyZXNzTW9kZVU6IFwiY2xhbXAtdG8tZWRnZVwiLFxyXG5cdFx0XHRcdGFkZHJlc3NNb2RlVjogXCJjbGFtcC10by1lZGdlXCJcclxuXHRcdFx0XHQvLyBhZGRyZXNzTW9kZVc6IFwiY2xhbXAtdG8tZWRnZVwiLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZXNjcmlwdG9yXHJcblx0XHQpO1xyXG5cdFx0dGhpcy5sYXlvdXRUeXBlID0gbGF5b3V0VHlwZTtcclxuXHR9XHJcblx0dXBkYXRlKGNvbnRleHQ6IENvbnRleHQpIHtcclxuXHRcdGlmICghdGhpcy5ncHVTYW1wbGVyKSB0aGlzLmdwdVNhbXBsZXIgPSBjb250ZXh0LmRldmljZS5jcmVhdGVTYW1wbGVyKHRoaXMuZGVzY3JpcHRvcik7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTYW1wbGVyO1xyXG4iLCJpbXBvcnQgeyBBbWJpZW50TGlnaHQgfSBmcm9tIFwiLi4vbGlnaHQvQW1iaWVudExpZ2h0XCI7XHJcbmltcG9ydCB7IERpcmVjdGlvbmFsTGlnaHQgfSBmcm9tIFwiLi4vbGlnaHQvRGlyZWN0aW9uYWxMaWdodFwiO1xyXG5pbXBvcnQgeyBQb2ludExpZ2h0IH0gZnJvbSBcIi4uL2xpZ2h0L1BvaW50TGlnaHRcIjtcclxuaW1wb3J0IHsgU3BvdExpZ2h0IH0gZnJvbSBcIi4uL2xpZ2h0L1Nwb3RMaWdodFwiO1xyXG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4vRnJhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgU2hhZGVyRGF0YSBmcm9tIFwiLi4vcmVuZGVyL1NoYWRlckRhdGFcIjtcclxuaW1wb3J0IHtcclxuXHRUZXh0dXJlVXNhZ2UsXHJcblx0QnVmZmVyVXNhZ2UsXHJcblx0VGV4dHVyZUZvcm1hdCxcclxuXHRDb21wYXJlRnVuY3Rpb24sXHJcblx0U2FtcGxlckJpbmRpbmdUeXBlLFxyXG5cdFRleHR1cmVTYW1wbGVUeXBlLFxyXG5cdFRleHR1cmVWaWV3RGltZW5zaW9uXHJcbn0gZnJvbSBcIi4vV2ViR1BVQ29uc3RhbnRcIjtcclxuaW1wb3J0IFVuaWZvcm1CdWZmZXIgZnJvbSBcIi4uL3JlbmRlci9Vbmlmb3JtQnVmZmVyXCI7XHJcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcclxuaW1wb3J0IHsgTGlnaHQgfSBmcm9tIFwiLi4vbGlnaHQvTGlnaHRcIjtcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xyXG5pbXBvcnQgeyBMaWdodE1hbmdlck9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xyXG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcclxuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4uL3JlbmRlci9TYW1wbGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWdodE1hbmdlciB7XHJcblx0bGlnaHRVbmlmb3JtQnVmZmVyOiBVbmlmb3JtQnVmZmVyO1xyXG5cdHNoYWRvd1VuaWZvcm1CdWZmZXI6IFVuaWZvcm1CdWZmZXI7XHJcblx0cG9pbnRMaWdodHM6IFBvaW50TGlnaHRbXTtcclxuXHJcblx0c3BvdExpZ2h0czogU3BvdExpZ2h0W107XHJcblxyXG5cdGRpcmVjdExpZ2h0czogRGlyZWN0aW9uYWxMaWdodFtdO1xyXG5cclxuXHRhbWJpZW50TGlnaHQ6IEFtYmllbnRMaWdodDtcclxuXHJcblx0bGlnaHRTaGFkZXJEYXRhOiBTaGFkZXJEYXRhO1xyXG5cclxuXHRsaWdodENvdW50RGlydHk6IGJvb2xlYW47XHJcblxyXG5cdHByaXZhdGUgb3BlblNoYWRvdzogYm9vbGVhbjtcclxuXHRzcG90TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXk6IFRleHR1cmU7XHJcblx0cG9pbnRMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheTogVGV4dHVyZTtcclxuXHRkaXJlY3RMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheTogVGV4dHVyZTtcclxuXHRfdGVzdFRleHR1cmU6IFRleHR1cmU7XHJcblxyXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM6IExpZ2h0TWFuZ2VyT3B0aW9ucykge1xyXG5cdFx0dGhpcy5zcG90TGlnaHRzID0gW107XHJcblx0XHR0aGlzLnBvaW50TGlnaHRzID0gW107XHJcblx0XHR0aGlzLmRpcmVjdExpZ2h0cyA9IFtdO1xyXG5cdFx0dGhpcy5hbWJpZW50TGlnaHQgPSBuZXcgQW1iaWVudExpZ2h0KG5ldyBWZWN0b3IzKDEuMCwgMS4wLCAxLjApLCAwLjIpO1xyXG5cdFx0dGhpcy5saWdodENvdW50RGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5vcGVuU2hhZG93ID0gb3B0aW9ucy5vcGVuU2hhZG93O1xyXG5cdH1cclxuXHR1cGRhdGUoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSwgY2FtZXJhOiBDYW1lcmEpIHtcclxuXHRcdHRoaXMuY2hlY2tMaWdodFNoYWRvd1N0YXRlKCk7XHJcblx0XHR0aGlzLnVwZGF0ZUxpZ2h0KGNhbWVyYSk7XHJcblx0fVxyXG5cdGFkZChsaWdodDogTGlnaHQpIHtcclxuXHRcdHRoaXMubGlnaHRDb3VudERpcnR5ID0gdHJ1ZTtcclxuXHRcdGlmIChsaWdodC50eXBlID09IFwiYW1iaWVudFwiKSB7XHJcblx0XHRcdHRoaXMuYW1iaWVudExpZ2h0ID0gPEFtYmllbnRMaWdodD5saWdodDtcclxuXHRcdH0gZWxzZSBpZiAobGlnaHQudHlwZSA9PSBcImRpcmVjdGlvbmFsXCIpIHtcclxuXHRcdFx0dGhpcy5kaXJlY3RMaWdodHMucHVzaCg8RGlyZWN0aW9uYWxMaWdodD5saWdodCk7XHJcblx0XHR9IGVsc2UgaWYgKGxpZ2h0LnR5cGUgPT0gXCJwb2ludFwiKSB7XHJcblx0XHRcdHRoaXMucG9pbnRMaWdodHMucHVzaCg8UG9pbnRMaWdodD5saWdodCk7XHJcblx0XHR9IGVsc2UgaWYgKGxpZ2h0LnR5cGUgPT0gXCJzcG90XCIpIHtcclxuXHRcdFx0dGhpcy5zcG90TGlnaHRzLnB1c2goPFNwb3RMaWdodD5saWdodCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJlbW92ZShsaWdodDogTGlnaHQpIHtcclxuXHRcdHRoaXMubGlnaHRDb3VudERpcnR5ID0gdHJ1ZTtcclxuXHRcdGlmIChsaWdodC50eXBlID09IFwiYW1iaWVudFwiKSB7XHJcblx0XHRcdHRoaXMuYW1iaWVudExpZ2h0ID0gbmV3IEFtYmllbnRMaWdodChuZXcgVmVjdG9yMygxLjAsIDEuMCwgMS4wKSwgMS4wKTtcclxuXHRcdH0gZWxzZSBpZiAobGlnaHQudHlwZSA9PSBcImRpcmVjdGlvbmFsXCIpIHtcclxuXHRcdFx0dGhpcy5kaXJlY3RMaWdodHMuc3BsaWNlKHRoaXMuZGlyZWN0TGlnaHRzLmluZGV4T2YoPERpcmVjdGlvbmFsTGlnaHQ+bGlnaHQpLCAxKTtcclxuXHRcdH0gZWxzZSBpZiAobGlnaHQudHlwZSA9PSBcInBvaW50XCIpIHtcclxuXHRcdFx0dGhpcy5wb2ludExpZ2h0cy5zcGxpY2UodGhpcy5wb2ludExpZ2h0cy5pbmRleE9mKDxQb2ludExpZ2h0PmxpZ2h0KSwgMSk7XHJcblx0XHR9IGVsc2UgaWYgKGxpZ2h0LnR5cGUgPT0gXCJzcG90XCIpIHtcclxuXHRcdFx0dGhpcy5zcG90TGlnaHRzLnNwbGljZSh0aGlzLnNwb3RMaWdodHMuaW5kZXhPZig8U3BvdExpZ2h0PmxpZ2h0KSwgMSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRjaGVja0xpZ2h0U2hhZG93U3RhdGUoKSB7XHJcblx0XHRjb25zdCBsaWdodHMgPSB0aGlzLmdldEFsbExpZ2h0cygpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaWdodHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0Y29uc3QgbGlnaHQgPSBsaWdodHNbaV07XHJcblx0XHRcdGlmIChsaWdodC5zaGFkb3dEaXJ0eSkge1xyXG5cdFx0XHRcdGxpZ2h0LnNoYWRvd0RpcnR5ID0gZmFsc2U7XHJcblx0XHRcdFx0dGhpcy5saWdodENvdW50RGlydHkgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHR1cGRhdGVMaWdodFNoYWRvdygpIHtcclxuXHRcdGlmICh0aGlzLnNwb3RMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheSkgdGhpcy5zcG90TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkuZGlydHkgPSB0cnVlO1xyXG5cclxuXHRcdGlmICh0aGlzLnBvaW50TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkpIHRoaXMucG9pbnRMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheS5kaXJ0eSA9IHRydWU7XHJcblxyXG5cdFx0aWYgKHRoaXMuZGlyZWN0TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkpIHRoaXMuZGlyZWN0TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkuZGlydHkgPSB0cnVlO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSB1cGRhdGVMaWdodChjYW1lcmE6IENhbWVyYSkge1xyXG5cdFx0aWYgKHRoaXMubGlnaHRDb3VudERpcnR5KSB7XHJcblx0XHRcdHRoaXMubGlnaHRDb3VudERpcnR5ID0gZmFsc2U7XHJcblx0XHRcdGlmICh0aGlzLmxpZ2h0U2hhZGVyRGF0YSkgdGhpcy5saWdodFNoYWRlckRhdGEuZGVzdHJveSgpO1xyXG5cdFx0XHR0aGlzLmNyZWF0ZUxpZ2h0U2hhZGVyRGF0YSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRwcml2YXRlIGNyZWF0ZUxpZ2h0U2hhZGVyRGF0YSgpIHtcclxuXHRcdHRoaXMubGlnaHRTaGFkZXJEYXRhID0gbmV3IFNoYWRlckRhdGEoXCJsaWdodFwiLCAwLCAyLCAyKTtcclxuXHRcdHRoaXMubGlnaHRVbmlmb3JtQnVmZmVyID0gbmV3IFVuaWZvcm1CdWZmZXIoXHJcblx0XHRcdFwibGlnaHRcIixcclxuXHRcdFx0XCJyZWFkLW9ubHktc3RvcmFnZVwiLFxyXG5cdFx0XHRCdWZmZXJVc2FnZS5TdG9yYWdlIHwgQnVmZmVyVXNhZ2UuQ29weURzdFxyXG5cdFx0KTtcclxuXHJcblx0XHR0aGlzLmxpZ2h0U2hhZGVyRGF0YS5zZXREZWZpbmUoXCJzcG90TGlnaHRzQ291bnRcIiwgdGhpcy5zcG90TGlnaHRzLmxlbmd0aCk7XHJcblx0XHR0aGlzLmxpZ2h0U2hhZGVyRGF0YS5zZXREZWZpbmUoXCJwb2ludExpZ2h0c0NvdW50XCIsIHRoaXMucG9pbnRMaWdodHMubGVuZ3RoKTtcclxuXHRcdHRoaXMubGlnaHRTaGFkZXJEYXRhLnNldERlZmluZShcImRpcnRlY3RMaWdodHNDb3VudFwiLCB0aGlzLmRpcmVjdExpZ2h0cy5sZW5ndGgpO1xyXG5cdFx0dGhpcy5saWdodFNoYWRlckRhdGEuc2V0RGVmaW5lKFwiYW1iaWVudExpZ2h0Q291bnRcIiwgMSk7XHJcblx0XHRpZiAodGhpcy5hbWJpZW50TGlnaHQpXHJcblx0XHRcdHRoaXMubGlnaHRVbmlmb3JtQnVmZmVyLnNldEZsb2F0VmVjNChcImFtYmllbnRMaWdodFwiLCAoKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuYW1iaWVudExpZ2h0LkNvbG9yQW5kSW50ZW5zaXR5O1xyXG5cdFx0XHR9KTtcclxuXHRcdGlmICh0aGlzLnNwb3RMaWdodHMubGVuZ3RoKSB7XHJcblx0XHRcdC8v5Yid5aeL5YyW6IGa5YWJ54GvXHJcblx0XHRcdHRoaXMubGlnaHRVbmlmb3JtQnVmZmVyLnNldFNwb3RMaWdodHMoXHJcblx0XHRcdFx0XCJzcG90TGlnaHRzXCIsXHJcblx0XHRcdFx0KCkgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuc3BvdExpZ2h0cztcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHRoaXMuc3BvdExpZ2h0cy5sZW5ndGhcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLnBvaW50TGlnaHRzLmxlbmd0aCkge1xyXG5cdFx0XHQvL+eCueWFiea6kFxyXG5cdFx0XHR0aGlzLmxpZ2h0VW5pZm9ybUJ1ZmZlci5zZXRQb2ludExpZ2h0cyhcclxuXHRcdFx0XHRcInBvaW50TGlnaHRzXCIsXHJcblx0XHRcdFx0KCkgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMucG9pbnRMaWdodHM7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR0aGlzLnBvaW50TGlnaHRzLmxlbmd0aFxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHRoaXMuZGlyZWN0TGlnaHRzLmxlbmd0aCkge1xyXG5cdFx0XHQvL+aWueWQkeWFiVxyXG5cdFx0XHR0aGlzLmxpZ2h0VW5pZm9ybUJ1ZmZlci5zZXREaXJ0ZWN0TGlnaHRzKFxyXG5cdFx0XHRcdFwiZGlyZWN0TGlnaHRzXCIsXHJcblx0XHRcdFx0KCkgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZGlyZWN0TGlnaHRzO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dGhpcy5kaXJlY3RMaWdodHMubGVuZ3RoXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0c2hhZG93U2hhZGVyRGF0YToge1xyXG5cdFx0XHRpZiAodGhpcy5vcGVuU2hhZG93KSB7XHJcblx0XHRcdFx0Y29uc3Qgc3BvdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5ID0gKHRoaXMuc3BvdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5ID1cclxuXHRcdFx0XHRcdHRoaXMuY3JlYXRlU2hhZG93TWFwVGV4dHVyZUFycmF5KHRoaXMuc3BvdExpZ2h0cykpO1xyXG5cdFx0XHRcdGNvbnN0IHBvaW50TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkgPSAodGhpcy5wb2ludExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5ID1cclxuXHRcdFx0XHRcdHRoaXMuY3JlYXRlU2hhZG93TWFwVGV4dHVyZUFycmF5KHRoaXMucG9pbnRMaWdodHMpKTtcclxuXHRcdFx0XHRjb25zdCBkaXJlY3RMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheSA9ICh0aGlzLmRpcmVjdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5ID1cclxuXHRcdFx0XHRcdHRoaXMuY3JlYXRlU2hhZG93TWFwVGV4dHVyZUFycmF5KHRoaXMuZGlyZWN0TGlnaHRzKSk7XHJcblx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0IXNwb3RMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheSAmJlxyXG5cdFx0XHRcdFx0IXBvaW50TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkgJiZcclxuXHRcdFx0XHRcdCFkaXJlY3RMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheVxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHRcdGJyZWFrIHNoYWRvd1NoYWRlckRhdGE7XHJcblxyXG5cdFx0XHRcdC8vZGVmaW5lXHJcblx0XHRcdFx0dGhpcy5saWdodFNoYWRlckRhdGEuc2V0RGVmaW5lKFwib3BlblNoYWRvd1wiLCB0aGlzLm9wZW5TaGFkb3cpO1xyXG5cclxuXHRcdFx0XHQvL3NoYWRvd1VuaWZvcm1CdWZmZXJcclxuXHRcdFx0XHR0aGlzLnNoYWRvd1VuaWZvcm1CdWZmZXIgPSBuZXcgVW5pZm9ybUJ1ZmZlcihcclxuXHRcdFx0XHRcdFwic2hhZG93XCIsXHJcblx0XHRcdFx0XHRcInJlYWQtb25seS1zdG9yYWdlXCIsXHJcblx0XHRcdFx0XHRCdWZmZXJVc2FnZS5TdG9yYWdlIHwgQnVmZmVyVXNhZ2UuQ29weURzdFxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdC8vbWF0cml4LG5lYXIsZmFyLi4uXHJcblx0XHRcdFx0Y29uc3Qgc3BvdExpZ2h0V2l0aFNoYWRvd0NvdW50ID0gdGhpcy5zZXRTaGFkb3dVbmlmb3JtKFxyXG5cdFx0XHRcdFx0XCJzcG90TGlnaHRTaGFkb3dzXCIsXHJcblx0XHRcdFx0XHR0aGlzLnNwb3RMaWdodHMsXHJcblx0XHRcdFx0XHRcInNldFNwb3RMaWdodFNoYWRvd3NcIlxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0Y29uc3QgcG9pbnRMaWdodFdpdGhTaGFkb3dDb3VudCA9IHRoaXMuc2V0U2hhZG93VW5pZm9ybShcclxuXHRcdFx0XHRcdFwicG9pbnRMaWdodFNoYWRvd3NcIixcclxuXHRcdFx0XHRcdHRoaXMucG9pbnRMaWdodHMsXHJcblx0XHRcdFx0XHRcInNldFBvaW50TGlnaHRTaGFkb3dzXCJcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdGNvbnN0IGRpcmVjdExpZ2h0V2l0aFNoYWRvd0NvdW50ID0gdGhpcy5zZXRTaGFkb3dVbmlmb3JtKFxyXG5cdFx0XHRcdFx0XCJkaXJlY3RMaWdodFNoYWRvd3NcIixcclxuXHRcdFx0XHRcdHRoaXMuZGlyZWN0TGlnaHRzLFxyXG5cdFx0XHRcdFx0XCJzZXREaXJ0ZWN0TGlnaHRTaGFkb3dzXCJcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdHRoaXMubGlnaHRTaGFkZXJEYXRhLnNldFVuaWZvcm1CdWZmZXIoXCJzaGFkb3dcIiwgdGhpcy5zaGFkb3dVbmlmb3JtQnVmZmVyKTtcclxuXHJcblx0XHRcdFx0dGhpcy5saWdodFNoYWRlckRhdGEuc2V0RGVmaW5lKFwic3BvdExpZ2h0U2hhZG93TWFwc0NvdW50XCIsIHNwb3RMaWdodFdpdGhTaGFkb3dDb3VudCk7XHJcblx0XHRcdFx0dGhpcy5saWdodFNoYWRlckRhdGEuc2V0RGVmaW5lKFwicG9pbnRMaWdodFNoYWRvd01hcHNDb3VudFwiLCBwb2ludExpZ2h0V2l0aFNoYWRvd0NvdW50KTtcclxuXHRcdFx0XHR0aGlzLmxpZ2h0U2hhZGVyRGF0YS5zZXREZWZpbmUoXCJkaXJlY3RMaWdodFNoYWRvd01hcHNDb3VudFwiLCBkaXJlY3RMaWdodFdpdGhTaGFkb3dDb3VudCk7XHJcblxyXG5cdFx0XHRcdC8vdGV4dHVyZSxzYW1wbGVcclxuXHRcdFx0XHRpZiAoc3BvdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5ICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdGlmIChzcG90TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkudGV4dHVyZVByb3Auc2l6ZS5kZXB0aCAhPSBzcG90TGlnaHRXaXRoU2hhZG93Q291bnQpXHJcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcInNwb3RMaWdodFNoYWRvd01hcCBhbGlnbiBoYXMgcHJvYmxlbVwiKTtcclxuXHRcdFx0XHRcdHRoaXMubGlnaHRTaGFkZXJEYXRhLnNldFRleHR1cmUoXCJzcG90TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXlcIiwgc3BvdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKHBvaW50TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0aWYgKHBvaW50TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkudGV4dHVyZVByb3Auc2l6ZS5kZXB0aCAhPSBwb2ludExpZ2h0V2l0aFNoYWRvd0NvdW50KVxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJwb2ludExpZ2h0U2hhZG93TWFwIGFsaWduIGhhcyBwcm9ibGVtXCIpO1xyXG5cdFx0XHRcdFx0dGhpcy5saWdodFNoYWRlckRhdGEuc2V0VGV4dHVyZShcInBvaW50TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXlcIiwgcG9pbnRMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChkaXJlY3RMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRpZiAoZGlyZWN0TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkudGV4dHVyZVByb3Auc2l6ZS5kZXB0aCAhPSBkaXJlY3RMaWdodFdpdGhTaGFkb3dDb3VudClcclxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiZGlyZWN0TGlnaHRTaGFkb3dNYXAgYWxpZ24gaGFzIHByb2JsZW1cIik7XHJcblx0XHRcdFx0XHR0aGlzLmxpZ2h0U2hhZGVyRGF0YS5zZXRUZXh0dXJlKFxyXG5cdFx0XHRcdFx0XHRcImRpcmVjdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5XCIsXHJcblx0XHRcdFx0XHRcdGRpcmVjdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5XHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0Ly8gdGhpcy5fdGVzdFRleHR1cmUgPSBkaXJlY3RMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0aGlzLmxpZ2h0U2hhZGVyRGF0YS5zZXRTYW1wbGVyKFxyXG5cdFx0XHRcdFx0XCJzaGFkb3dTYW1wbGVyXCIsXHJcblx0XHRcdFx0XHRuZXcgU2FtcGxlcih7IGNvbXBhcmU6IENvbXBhcmVGdW5jdGlvbi5MZXNzIH0sIHsgdHlwZTogU2FtcGxlckJpbmRpbmdUeXBlLkNvbXBhcmlzb24gfSlcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5saWdodFNoYWRlckRhdGEuc2V0VW5pZm9ybUJ1ZmZlcihcImxpZ2h0XCIsIHRoaXMubGlnaHRVbmlmb3JtQnVmZmVyKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRBbGxMaWdodHMoKTogQXJyYXk8TGlnaHQ+IHtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IFtdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdC5jb25jYXQodGhpcy5zcG90TGlnaHRzLCB0aGlzLnBvaW50TGlnaHRzLCB0aGlzLmRpcmVjdExpZ2h0cyk7XHJcblx0fVxyXG5cclxuXHRkZXN0cm95KCkge1xyXG5cdFx0dGhpcy5saWdodFNoYWRlckRhdGEuZGVzdHJveSgpO1xyXG5cdFx0dGhpcy5saWdodFVuaWZvcm1CdWZmZXIuZGVzdHJveSgpO1xyXG5cdH1cclxuXHJcblx0Y3JlYXRlU2hhZG93TWFwVGV4dHVyZUFycmF5KGxpZ2h0czogQXJyYXk8TGlnaHQ+KSB7XHJcblx0XHRpZiAobGlnaHRzLmxlbmd0aCA8PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xyXG5cdFx0Y29uc3Qgc2hhZG93TWFwU291cmNlcyA9IFtdO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaWdodHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0Y29uc3QgbGlnaHQgPSBsaWdodHNbaV07XHJcblx0XHRcdGlmIChsaWdodC5zaGFkb3cpIHtcclxuXHRcdFx0XHRjb25zdCBzaGFkb3dNYXBUZXh0dXJlID0gbGlnaHQuc2hhZG93LmdldFNoYWRvd01hcFRleHR1cmUoKTtcclxuXHRcdFx0XHRjb25zdCBzaGFkb3dNYXBTb3VyY2UgPSB7XHJcblx0XHRcdFx0XHRzb3VyY2U6IHNoYWRvd01hcFRleHR1cmUsXHJcblx0XHRcdFx0XHR3aWR0aDogc2hhZG93TWFwVGV4dHVyZS50ZXh0dXJlUHJvcC5zaXplLndpZHRoLFxyXG5cdFx0XHRcdFx0aGVpZ2h0OiBzaGFkb3dNYXBUZXh0dXJlLnRleHR1cmVQcm9wLnNpemUuaGVpZ2h0LFxyXG5cdFx0XHRcdFx0ZGVwdGg6IDEsXHJcblx0XHRcdFx0XHR4OiAwLFxyXG5cdFx0XHRcdFx0eTogMCxcclxuXHRcdFx0XHRcdHo6IGlcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHNoYWRvd01hcFNvdXJjZXMucHVzaChzaGFkb3dNYXBTb3VyY2UpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHNoYWRvd01hcFNvdXJjZXMubGVuZ3RoIDw9IDApIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG5cdFx0Y29uc3Qgc2hhZG93TWFwVGV4dHVyZUFycmF5ID0gbmV3IFRleHR1cmUoe1xyXG5cdFx0XHRzaXplOiB7XHJcblx0XHRcdFx0d2lkdGg6IHNoYWRvd01hcFNvdXJjZXNbMF0ud2lkdGgsXHJcblx0XHRcdFx0aGVpZ2h0OiBzaGFkb3dNYXBTb3VyY2VzWzBdLmhlaWdodCxcclxuXHRcdFx0XHRkZXB0aDogc2hhZG93TWFwU291cmNlcy5sZW5ndGhcclxuXHRcdFx0fSxcclxuXHRcdFx0Zml4ZWRTaXplOiB0cnVlLFxyXG5cdFx0XHRzYW1wbGVUeXBlOiBUZXh0dXJlU2FtcGxlVHlwZS5EZXB0aCxcclxuXHRcdFx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0LkRlcHRoMjRQbHVzLFxyXG5cdFx0XHR1c2FnZTogVGV4dHVyZVVzYWdlLlRleHR1cmVCaW5kaW5nIHwgVGV4dHVyZVVzYWdlLkNvcHlEc3QsXHJcblx0XHRcdGRhdGE6IHNoYWRvd01hcFNvdXJjZXMsXHJcblx0XHRcdHZpZXdGb3JtYXRzOiBUZXh0dXJlVmlld0RpbWVuc2lvbi5FMmRBcnJheVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIHNoYWRvd01hcFRleHR1cmVBcnJheTtcclxuXHR9XHJcblxyXG5cdHNldFNoYWRvd1VuaWZvcm0odW5pZm9ybU5hbWU6IHN0cmluZywgbGlnaHRzOiBBcnJheTxMaWdodD4sIGZ1bmN0aW9uTmFtZTogc3RyaW5nKSB7XHJcblx0XHRpZiAobGlnaHRzLmxlbmd0aCkge1xyXG5cdFx0XHRjb25zdCBsaWdodFdpdGhTaGFkb3dBcnJheSA9IFtdO1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpZ2h0cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGNvbnN0IGxpZ2h0ID0gbGlnaHRzW2ldO1xyXG5cdFx0XHRcdGlmICghbGlnaHQuc2hhZG93KSBjb250aW51ZTtcclxuXHRcdFx0XHRsaWdodFdpdGhTaGFkb3dBcnJheS5wdXNoKGxpZ2h0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5zaGFkb3dVbmlmb3JtQnVmZmVyW2Z1bmN0aW9uTmFtZV0oXHJcblx0XHRcdFx0dW5pZm9ybU5hbWUsXHJcblx0XHRcdFx0KCkgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGxpZ2h0V2l0aFNoYWRvd0FycmF5O1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0bGlnaHRXaXRoU2hhZG93QXJyYXkubGVuZ3RoXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gbGlnaHRXaXRoU2hhZG93QXJyYXkubGVuZ3RoO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgeyBHUFVDYW52YXNDb21wb3NpdGluZ0FscGhhTW9kZSwgU2Npc3NvclRlc3QsIFZpZXdQb3J0IH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVVHlwZXNcIjtcclxuaW1wb3J0IHsgVGV4dHVyZVVzYWdlIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcclxuaW1wb3J0IHsgQ29udGV4dE9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xyXG5pbXBvcnQgRHJhd0NvbW1hbmQgZnJvbSBcIi4vRHJhd0NvbW1hbmQuanNcIjtcclxuaW1wb3J0IHsgTWlwbWFwR2VuZXJhdG9yIH0gZnJvbSBcIi4uL3V0aWxzL01pcG1hcEdlbmVyYXRvclwiO1xyXG5pbXBvcnQgUGlwZWxpbmUgZnJvbSBcIi4vUGlwZWxpbmVcIjtcclxuaW1wb3J0IENhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0NhbWVyYVwiO1xyXG5pbXBvcnQgTGlnaHRNYW5nZXIgZnJvbSBcIi4uL2NvcmUvTGlnaHRNYW5nZXJcIjtcclxuXHJcbmNsYXNzIENvbnRleHQge1xyXG5cdHB1YmxpYyBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuXHRwdWJsaWMgY29udGV4dDogR1BVQ2FudmFzQ29udGV4dDtcclxuXHJcblx0cHVibGljIHBpeGVsUmF0aW86IG51bWJlcjtcclxuXHJcblx0cHVibGljIGRldmljZTogR1BVRGV2aWNlO1xyXG5cclxuXHRwcml2YXRlIGFkYXB0ZXI6IEdQVUFkYXB0ZXI7XHJcblxyXG5cdHB1YmxpYyBjb21tYW5kRW5jb2RlcjogR1BVQ29tbWFuZEVuY29kZXIgfCBudWxsO1xyXG5cclxuXHRwdWJsaWMgcHJlc2VudGF0aW9uU2l6ZTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcjsgZGVwdGg6IG51bWJlciB9O1xyXG5cclxuXHRwdWJsaWMgcHJlc2VudGF0aW9uRm9ybWF0OiBHUFVUZXh0dXJlRm9ybWF0O1xyXG5cclxuXHRwdWJsaWMgbWlwbWFwVG9vbHM6IE1pcG1hcEdlbmVyYXRvcjtcclxuXHJcblx0cHVibGljIGxpZ2h0TWFuZ2VyOiBMaWdodE1hbmdlcjtcclxuXHJcblx0cHJpdmF0ZSBfdmlld1BvcnQ6IFZpZXdQb3J0O1xyXG5cclxuXHRwcml2YXRlIF9zY2lzc29yVGVzdDogU2Npc3NvclRlc3Q7XHJcblxyXG5cdHByaXZhdGUgX3NjaXNzb3JUZXN0RW5hYmxlZDogYm9vbGVhbjtcclxuXHJcblx0cHJpdmF0ZSBfb3BlblNoYWRvdzogYm9vbGVhbjtcclxuXHJcblx0Y29uc3RydWN0b3IoeyBjYW52YXMsIGNvbnRhaW5lciwgY29udGV4dCwgcGl4ZWxSYXRpbyB9OiBDb250ZXh0T3B0aW9ucyA9IHt9KSB7XHJcblx0XHRpZiAoIWNvbnRhaW5lci5jbGllbnRXaWR0aCB8fCAhY29udGFpbmVyLmNsaWVudEhlaWdodCkgdGhyb3cgbmV3IEVycm9yKFwiY29udGFpbmVyIHdpZHRoIG9yIGhlaWdodCBpbGxlZ2FsaXR5XCIpO1xyXG5cdFx0dGhpcy5jYW52YXMgPSBjYW52YXMgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuXHRcdC8vIHRoaXMuY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblx0XHR0aGlzLnBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvIHx8IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XHJcblx0XHRjb25zdCB3aWR0aCA9IGNvbnRhaW5lci5jbGllbnRXaWR0aCAqIHRoaXMucGl4ZWxSYXRpbztcclxuXHRcdGNvbnN0IGhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQgKiB0aGlzLnBpeGVsUmF0aW87XHJcblx0XHR0aGlzLmNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG5cdFx0dGhpcy5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cdFx0dGhpcy5jYW52YXMuc3R5bGUud2lkdGggPSBjb250YWluZXIuY2xpZW50V2lkdGggKyBcInB4XCI7XHJcblx0XHR0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0ICsgXCJweFwiO1xyXG5cdFx0Y29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY2FudmFzKTtcclxuXHRcdHRoaXMuY29udGV4dCA9IGNvbnRleHQgfHwgKHRoaXMuY2FudmFzLmdldENvbnRleHQoXCJ3ZWJncHVcIikgYXMgR1BVQ2FudmFzQ29udGV4dCk7XHJcblxyXG5cdFx0dGhpcy5kZXZpY2UgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLl9vcGVuU2hhZG93ID0gdHJ1ZTtcclxuXHRcdHRoaXMubGlnaHRNYW5nZXIgPSBuZXcgTGlnaHRNYW5nZXIoeyBvcGVuU2hhZG93OiB0aGlzLl9vcGVuU2hhZG93IH0pO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGFzeW5jIGluaXQoXHJcblx0XHRyZXF1ZXN0QWRhcHRlciA9IHt9LFxyXG5cdFx0ZGV2aWNlRGVzY3JpcHRvciA9IHt9LFxyXG5cdFx0cHJlc2VudGF0aW9uQ29udGV4dERlc2NyaXB0b3IgPSB7fVxyXG5cdCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0aWYgKCF0aGlzLmNvbnRleHQpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBpbnN0YW50aWF0ZSBcIndlYmdwdVwiIGNvbnRleHQuYCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFuYXZpZ2F0b3IuZ3B1KSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIFwibmF2aWdhdG9yLmdwdVwiLmApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmFkYXB0ZXIgPSBhd2FpdCBuYXZpZ2F0b3IuZ3B1LnJlcXVlc3RBZGFwdGVyKCk7XHJcblx0XHRcdHRoaXMuZGV2aWNlID0gYXdhaXQgdGhpcy5hZGFwdGVyLnJlcXVlc3REZXZpY2UoKTtcclxuXHRcdFx0dGhpcy5wcmVzZW50YXRpb25TaXplID0ge1xyXG5cdFx0XHRcdHdpZHRoOiB0aGlzLmNhbnZhcy5jbGllbnRXaWR0aCAqIHRoaXMucGl4ZWxSYXRpbyxcclxuXHRcdFx0XHRoZWlnaHQ6IHRoaXMuY2FudmFzLmNsaWVudEhlaWdodCAqIHRoaXMucGl4ZWxSYXRpbyxcclxuXHRcdFx0XHRkZXB0aDogMVxyXG5cdFx0XHR9O1xyXG5cdFx0XHR0aGlzLnByZXNlbnRhdGlvbkZvcm1hdCA9IG5hdmlnYXRvci5ncHUuZ2V0UHJlZmVycmVkQ2FudmFzRm9ybWF0KCk7XHJcblx0XHRcdHRoaXMuZGV2aWNlLmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmNhcHR1cmVkZXJyb3JcIiwgKGVycm9yKSA9PiB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XHJcblx0XHRcdFx0Ly9TdGF0ZS5lcnJvciA9IHRydWU7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLm1pcG1hcFRvb2xzID0gbmV3IE1pcG1hcEdlbmVyYXRvcih0aGlzLmRldmljZSk7XHJcblx0XHRcdHRoaXMuY29udGV4dC5jb25maWd1cmUoe1xyXG5cdFx0XHRcdGRldmljZTogdGhpcy5kZXZpY2UsXHJcblx0XHRcdFx0Zm9ybWF0OiB0aGlzLnByZXNlbnRhdGlvbkZvcm1hdCxcclxuXHRcdFx0XHR1c2FnZTogVGV4dHVyZVVzYWdlLlJlbmRlckF0dGFjaG1lbnQsXHJcblx0XHRcdFx0YWxwaGFNb2RlOiBcIm9wYXF1ZVwiLFxyXG5cdFx0XHRcdC4uLnByZXNlbnRhdGlvbkNvbnRleHREZXNjcmlwdG9yXHJcblx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLl92aWV3UG9ydCA9IHtcclxuXHRcdFx0XHR4OiAwLFxyXG5cdFx0XHRcdHk6IDAsXHJcblx0XHRcdFx0d2lkdGg6IHRoaXMuY2FudmFzLmNsaWVudFdpZHRoICogdGhpcy5waXhlbFJhdGlvLFxyXG5cdFx0XHRcdGhlaWdodDogdGhpcy5jYW52YXMuY2xpZW50SGVpZ2h0ICogdGhpcy5waXhlbFJhdGlvXHJcblx0XHRcdH07XHJcblx0XHRcdHRoaXMuX3NjaXNzb3JUZXN0RW5hYmxlZCA9IGZhbHNlO1xyXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0cHVibGljIHNldFZpZXdQb3J0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG5cdFx0dGhpcy5fdmlld1BvcnQgPSB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfTtcclxuXHR9XHJcblx0cHVibGljIHNldFNjaXNzb3JUZXN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG5cdFx0dGhpcy5fc2Npc3NvclRlc3RFbmFibGVkID0gdHJ1ZTtcclxuXHRcdHRoaXMuX3NjaXNzb3JUZXN0ID0geyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH07XHJcblx0fVxyXG5cdHB1YmxpYyByZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHByZXNlbnRhdGlvbkNvbnRleHREZXNjcmlwdG9yID0ge30pOiB2b2lkIHtcclxuXHRcdGNvbnN0IHcgPSB3aWR0aCAqIHRoaXMucGl4ZWxSYXRpbztcclxuXHRcdGNvbnN0IGggPSBoZWlnaHQgKiB0aGlzLnBpeGVsUmF0aW87XHJcblx0XHR0aGlzLmNhbnZhcy5zdHlsZS53aWR0aCA9IHcgKyBcInB4XCI7XHJcblx0XHR0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoICsgXCJweFwiO1xyXG5cdFx0dGhpcy5jYW52YXMud2lkdGggPSB3O1xyXG5cdFx0dGhpcy5jYW52YXMuaGVpZ2h0ID0gaDtcclxuXHRcdHRoaXMucHJlc2VudGF0aW9uU2l6ZSA9IHtcclxuXHRcdFx0d2lkdGg6IHcsXHJcblx0XHRcdGhlaWdodDogaCxcclxuXHRcdFx0ZGVwdGg6IDFcclxuXHRcdH07XHJcblx0XHR0aGlzLmNvbnRleHQuY29uZmlndXJlKHtcclxuXHRcdFx0ZGV2aWNlOiB0aGlzLmRldmljZSxcclxuXHRcdFx0Zm9ybWF0OiBuYXZpZ2F0b3IuZ3B1LmdldFByZWZlcnJlZENhbnZhc0Zvcm1hdCgpLFxyXG5cdFx0XHR1c2FnZTogVGV4dHVyZVVzYWdlLlJlbmRlckF0dGFjaG1lbnQsXHJcblx0XHRcdGFscGhhTW9kZTogR1BVQ2FudmFzQ29tcG9zaXRpbmdBbHBoYU1vZGUuUHJlbXVsdGlwbGllZCxcclxuXHRcdFx0Li4ucHJlc2VudGF0aW9uQ29udGV4dERlc2NyaXB0b3JcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHJlbmRlcihjb21tYW5kOiBEcmF3Q29tbWFuZCwgcGFzc0VuY29kZXI6IEdQVVJlbmRlclBhc3NFbmNvZGVyLCBjYW1lcmE/OiBDYW1lcmEpOiB2b2lkIHtcclxuXHRcdGNvbnN0IGdyb3VwbGF5b3V0cyA9IFtdO1xyXG5cdFx0aWYgKGNvbW1hbmQuc2hhZGVyRGF0YSkge1xyXG5cdFx0XHRpZiAoY29tbWFuZC5tb2RlbE1hdHJpeCkgY29tbWFuZC5zaGFkZXJEYXRhLnJlcGxhY2VVbmlmb3JtQnVmZmVyVmFsdWUoXCJtb2RlbE1hdHJpeFwiLCBjb21tYW5kLm1vZGVsTWF0cml4KTtcclxuXHRcdFx0Y29tbWFuZC5zaGFkZXJEYXRhLmJpbmQodGhpcywgcGFzc0VuY29kZXIpO1xyXG5cdFx0fVxyXG5cdFx0Ly/orr7nva7ns7vnu59cclxuXHRcdGlmIChjYW1lcmEpIHtcclxuXHRcdFx0Y2FtZXJhLnNoYWRlckRhdGEuYmluZCh0aGlzLCBwYXNzRW5jb2Rlcik7XHJcblx0XHRcdGdyb3VwbGF5b3V0cy5wdXNoKGNhbWVyYS5zaGFkZXJEYXRhLmdyb3VwTGF5b3V0KTtcclxuXHRcdFx0aWYgKGNvbW1hbmQuc2hhZGVyU291cmNlKSBjb21tYW5kLnNoYWRlclNvdXJjZS5zZXREZWZpbmVzKGNhbWVyYS5zaGFkZXJEYXRhLmRlZmluZXMpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGNvbW1hbmQubGlnaHQgJiYgdGhpcy5saWdodE1hbmdlci5saWdodFNoYWRlckRhdGEpIHtcclxuXHRcdFx0dGhpcy5saWdodE1hbmdlci5saWdodFNoYWRlckRhdGEuYmluZCh0aGlzLCBwYXNzRW5jb2Rlcik7XHJcblx0XHRcdGdyb3VwbGF5b3V0cy5wdXNoKHRoaXMubGlnaHRNYW5nZXIubGlnaHRTaGFkZXJEYXRhLmdyb3VwTGF5b3V0KTtcclxuXHRcdFx0aWYgKGNvbW1hbmQuc2hhZGVyU291cmNlKSBjb21tYW5kLnNoYWRlclNvdXJjZS5zZXREZWZpbmVzKHRoaXMubGlnaHRNYW5nZXIubGlnaHRTaGFkZXJEYXRhLmRlZmluZXMpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGNvbW1hbmQucmVuZGVyU3RhdGUpIGNvbW1hbmQucmVuZGVyU3RhdGUuYmluZChwYXNzRW5jb2RlciwgdGhpcyk7XHJcblx0XHRpZiAoY29tbWFuZC52ZXJ0ZXhCdWZmZXIpIGNvbW1hbmQudmVydGV4QnVmZmVyLmJpbmQodGhpcy5kZXZpY2UsIHBhc3NFbmNvZGVyKTtcclxuXHJcblx0XHRpZiAoY29tbWFuZC5pbmRleEJ1ZmZlcikgY29tbWFuZC5pbmRleEJ1ZmZlci5iaW5kKHRoaXMuZGV2aWNlLCBwYXNzRW5jb2Rlcik7XHJcblxyXG5cdFx0Y29uc3QgcGlwZWxpbmUgPSBQaXBlbGluZS5nZXRSZW5kZXJQaXBlbGluZUZyb21DYWNoZShcclxuXHRcdFx0dGhpcy5kZXZpY2UsXHJcblx0XHRcdGNvbW1hbmQsXHJcblx0XHRcdGdyb3VwbGF5b3V0cy5jb25jYXQoY29tbWFuZC5zaGFkZXJEYXRhLmdyb3VwTGF5b3V0KVxyXG5cdFx0KTtcclxuXHRcdHBpcGVsaW5lLmJpbmQocGFzc0VuY29kZXIpO1xyXG5cdFx0aWYgKGNvbW1hbmQuaW5kZXhCdWZmZXIpIHtcclxuXHRcdFx0cGFzc0VuY29kZXIuZHJhd0luZGV4ZWQoY29tbWFuZC5jb3VudCB8fCAwLCBjb21tYW5kLmluc3RhbmNlcyB8fCAxLCAwLCAwLCAwKTtcclxuXHRcdH0gZWxzZSBpZiAoY29tbWFuZC5jb3VudCkge1xyXG5cdFx0XHRwYXNzRW5jb2Rlci5kcmF3KGNvbW1hbmQuY291bnQsIGNvbW1hbmQuaW5zdGFuY2VzIHx8IDEsIDAsIDApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRwdWJsaWMgY29tcHV0ZShjb21tYW5kOiBEcmF3Q29tbWFuZCwgcGFzc0VuY29kZXI6IEdQVUNvbXB1dGVQYXNzRW5jb2Rlcikge1xyXG5cdFx0Y29uc3QgcGlwZWxpbmUgPSBQaXBlbGluZS5nZXRDb21wdXRlUGlwZWxpbmVGcm9tQ2FjaGUodGhpcy5kZXZpY2UsIGNvbW1hbmQsIFtjb21tYW5kLnNoYWRlckRhdGEuZ3JvdXBMYXlvdXRdKTtcclxuXHRcdHBpcGVsaW5lLmJpbmQocGFzc0VuY29kZXIpO1xyXG5cdFx0Y29uc3QgeyB4LCB5LCB6IH0gPSBjb21tYW5kLmRpc3BhdGNoO1xyXG5cdFx0cGFzc0VuY29kZXIuZGlzcGF0Y2hXb3JrZ3JvdXBzKHgsIHksIHopO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dDtcclxuIiwiaW1wb3J0IHtcclxuXHRCbGVuZEZhY3RvcixcclxuXHRCbGVuZE9wZXJhdGlvbixcclxuXHRUZXh0dXJlRm9ybWF0LFxyXG5cdEdQVUNvbG9yV3JpdGUsXHJcblx0Q29tcGFyZUZ1bmN0aW9uLFxyXG5cdFN0ZW5jaWxPcGVyYXRpb24sXHJcblx0RnJvbnRGYWNlLFxyXG5cdEN1bGxNb2RlLFxyXG5cdFByaW1pdGl2ZVRvcG9sb2d5XHJcbn0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcclxuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XHJcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuL0NvbnRleHRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBSZW5kZXJTdGF0ZSB7XHJcblx0c2Npc3NvclRlc3Q6IFNjaXNzb3JUZXN0O1xyXG5cdHZpZXdwb3J0OiBWaWV3UG9ydDtcclxuXHR0YXJnZXRzOiBBcnJheTxUYXJnZXQ+O1xyXG5cdGRlcHRoU3RlbmNpbDogRGVwdGhTdGVuY2lsO1xyXG5cdGJsZW5kQ29uc3RhbnQ6IEJsZW5kQ29uc3RhbnQ7XHJcblx0c3RlbmNpbFJlZmVyZW5jZTogbnVtYmVyO1xyXG5cdG11bHRpc2FtcGxlOiBNdWx0aVNhbXBsZTtcclxuXHRwcmltaXRpdmU6IFByaW1pdGl2ZTtcclxuXHRzdGVuY2lsRW5hYmxlZDogYm9vbGVhbjtcclxuXHRzY2lzc29yVGVzdEVuYWJsZWQ6IGJvb2xlYW47XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHR0aGlzLnNjaXNzb3JUZXN0ID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy52aWV3cG9ydCA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuZGVwdGhTdGVuY2lsID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5ibGVuZENvbnN0YW50ID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5zdGVuY2lsUmVmZXJlbmNlID0gMDtcclxuXHRcdHRoaXMubXVsdGlzYW1wbGUgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLnByaW1pdGl2ZSA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuc3RlbmNpbEVuYWJsZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuc2Npc3NvclRlc3RFbmFibGVkID0gZmFsc2U7XHJcblx0XHR0aGlzLnRhcmdldHMgPSB1bmRlZmluZWQ7XHJcblx0fVxyXG5cdGJpbmQocGFzc0VuY29kZXI6IEdQVVJlbmRlclBhc3NFbmNvZGVyLCBjb250ZXh0OiBDb250ZXh0KSB7XHJcblx0XHQvLyBjb25zdCB7d2lkdGgsaGVpZ2h0fT1jb250ZXh0LnByZXNlbnRhdGlvblNpemU7XHJcblx0XHQvLyB0aGlzLnNldFZpZXdQb3J0KDQwMCwwLDQwMCw5MDApO1xyXG5cdFx0Ly8gdGhpcy5zZXRTY2lzc29yUmVjdCg0MDAsMCw0MDAsOTAwKVxyXG5cdFx0Ly8gaWYgKHRoaXMuc3RlbmNpbFJlZmVyZW5jZSkgcGFzc0VuY29kZXIuc2V0U3RlbmNpbFJlZmVyZW5jZSh0aGlzLnN0ZW5jaWxSZWZlcmVuY2UpO1xyXG5cdFx0Ly8gaWYgKHRoaXMudmlld3BvcnQuZXF1YWxzQW5kVXBkYXRlQ2FjaGUoY2FjaGVWaWV3UG9ydCkpIHtcclxuXHRcdC8vIFx0Y29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBtaW5EZXB0aCwgbWF4RGVwdGggfSA9IHRoaXMudmlld3BvcnQ7XHJcblx0XHQvLyBwYXNzRW5jb2Rlci5zZXRWaWV3cG9ydCgwLCAwLCA0MDAsIDQwMCwgMCwgMSk7XHJcblx0XHQvL31cclxuXHRcdGlmICh0aGlzLmJsZW5kQ29uc3RhbnQpIHBhc3NFbmNvZGVyLnNldEJsZW5kQ29uc3RhbnQodGhpcy5ibGVuZENvbnN0YW50KTtcclxuXHRcdC8vIGlmICh0aGlzLnNjaXNzb3JUZXN0LmVxdWFsc0FuZFVwZGF0ZUNhY2hlKGNhY2hlU2Npc3NvclRlc3QpKSB7XHJcblx0XHQvLyBcdGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5zY2lzc29yVGVzdDtcclxuXHRcdC8vIFx0cGFzc0VuY29kZXIuc2V0U2Npc3NvclJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XHJcblx0XHQvLyB9XHJcblx0fVxyXG5cdHNldFZpZXdQb3J0KHgsIHksIHdpZHRoLCBoZWlnaHQsIG1pbkRlcHRoID0gMCwgbWF4RGVwdGggPSAxKSB7XHJcblx0XHRpZiAodGhpcy52aWV3cG9ydCkge1xyXG5cdFx0XHR0aGlzLnZpZXdwb3J0LnNldCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBtaW5EZXB0aCwgbWF4RGVwdGgpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy52aWV3cG9ydCA9IG5ldyBWaWV3UG9ydCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBtaW5EZXB0aCwgbWF4RGVwdGgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRzZXRTY2lzc29yUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XHJcblx0XHRpZiAodGhpcy5zY2lzc29yVGVzdCkge1xyXG5cdFx0XHR0aGlzLnNjaXNzb3JUZXN0LnNldCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuc2Npc3NvclRlc3QgPSBuZXcgU2Npc3NvclRlc3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGRlc3Ryb3koKSB7XHJcblx0XHR0aGlzLnNjaXNzb3JUZXN0ID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy52aWV3cG9ydCA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuZGVwdGhTdGVuY2lsID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5ibGVuZENvbnN0YW50ID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5zdGVuY2lsUmVmZXJlbmNlID0gLTE7XHJcblx0XHR0aGlzLm11bHRpc2FtcGxlID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5wcmltaXRpdmUgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLnN0ZW5jaWxFbmFibGVkID0gZmFsc2U7XHJcblx0XHR0aGlzLnNjaXNzb3JUZXN0RW5hYmxlZCA9IGZhbHNlO1xyXG5cdH1cclxufVxyXG5leHBvcnQgY2xhc3MgQmxlbmRDb25zdGFudCB7XHJcblx0cjogbnVtYmVyO1xyXG5cdGc6IG51bWJlcjtcclxuXHRiOiBudW1iZXI7XHJcblx0YTogbnVtYmVyO1xyXG5cdGNvbnN0cnVjdG9yKHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGE6IG51bWJlcikge1xyXG5cdFx0dGhpcy5yID0gcjtcclxuXHRcdHRoaXMuZyA9IGc7XHJcblx0XHR0aGlzLmIgPSBiO1xyXG5cdFx0dGhpcy5hID0gYTtcclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIE11bHRpU2FtcGxlIHtcclxuXHRjb3VudDogbnVtYmVyO1xyXG5cdG1hc2s6IG51bWJlcjtcclxuXHRhbHBoYVRvQ292ZXJhZ2VFbmFibGVkOiBib29sZWFuO1xyXG5cdGNvbnN0cnVjdG9yKGNvdW50OiBudW1iZXIgPSAxLCBtYXNrOiBudW1iZXIgPSAweGZmZmZmZmZmLCBhbHBoYVRvQ292ZXJhZ2VFbmFibGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcclxuXHRcdHRoaXMubWFzayA9IG1hc2s7XHJcblx0XHR0aGlzLmFscGhhVG9Db3ZlcmFnZUVuYWJsZWQgPSBhbHBoYVRvQ292ZXJhZ2VFbmFibGVkO1xyXG5cdH1cclxuXHRnZXRNdWx0aVNhbXBsZURlYygpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNvdW50OiB0aGlzLmNvdW50LFxyXG5cdFx0XHRtYXNrOiB0aGlzLm1hc2ssXHJcblx0XHRcdGFscGhhVG9Db3ZlcmFnZUVuYWJsZWQ6IHRoaXMuYWxwaGFUb0NvdmVyYWdlRW5hYmxlZFxyXG5cdFx0fTtcclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFNjaXNzb3JUZXN0IHtcclxuXHR4OiBudW1iZXI7XHJcblx0eTogbnVtYmVyO1xyXG5cdHdpZHRoOiBudW1iZXI7XHJcblx0aGVpZ2h0OiBudW1iZXI7XHJcblx0dmFyaWFibGU6IGJvb2xlYW47XHJcblx0Y29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCwgd2lkdGg6IG51bWJlciA9IDAsIGhlaWdodDogbnVtYmVyID0gMCwgdmFyaWFibGU6IGJvb2xlYW4gPSB0cnVlKSB7XHJcblx0XHR0aGlzLnggPSB4O1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcclxuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cdFx0dGhpcy52YXJpYWJsZSA9IHZhcmlhYmxlO1xyXG5cdH1cclxuXHRzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XHJcblx0XHR0aGlzLnggPSB4O1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcclxuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cdH1cclxuXHRlcXVhbHNBbmRVcGRhdGVDYWNoZShzY2lzc29yVGVzdDogU2Npc3NvclRlc3QpOiBib29sZWFuIHtcclxuXHRcdGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gc2Npc3NvclRlc3Q7XHJcblx0XHRpZiAodGhpcy54ICE9IHggfHwgdGhpcy55ICE9IHkgfHwgdGhpcy53aWR0aCAhPSB3aWR0aCB8fCB0aGlzLmhlaWdodCAhPSBoZWlnaHQpIHtcclxuXHRcdFx0c2Npc3NvclRlc3Quc2V0KHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufVxyXG5leHBvcnQgY2xhc3MgVmlld1BvcnQge1xyXG5cdHg6IG51bWJlcjtcclxuXHR5OiBudW1iZXI7XHJcblx0d2lkdGg6IG51bWJlcjtcclxuXHRoZWlnaHQ6IG51bWJlcjtcclxuXHRtaW5EZXB0aDogbnVtYmVyO1xyXG5cdG1heERlcHRoOiBudW1iZXI7XHJcblx0dmFyaWFibGU6IGJvb2xlYW47XHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHR4OiBudW1iZXIgPSAwLFxyXG5cdFx0eTogbnVtYmVyID0gMCxcclxuXHRcdHdpZHRoOiBudW1iZXIgPSAwLFxyXG5cdFx0aGVpZ2h0OiBudW1iZXIgPSAwLFxyXG5cdFx0bWluRGVwdGg6IG51bWJlciA9IDAsXHJcblx0XHRtYXhEZXB0aDogbnVtYmVyID0gMSxcclxuXHRcdHZhcmlhYmxlOiBib29sZWFuID0gdHJ1ZVxyXG5cdCkge1xyXG5cdFx0dGhpcy54ID0geDtcclxuXHRcdHRoaXMueSA9IHk7XHJcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XHJcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuXHRcdHRoaXMubWluRGVwdGggPSBtaW5EZXB0aDtcclxuXHRcdHRoaXMubWF4RGVwdGggPSBtYXhEZXB0aDtcclxuXHRcdHRoaXMudmFyaWFibGUgPSB2YXJpYWJsZTtcclxuXHR9XHJcblx0c2V0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgbWluRGVwdGg6IG51bWJlciA9IDAsIG1heERlcHRoOiBudW1iZXIgPSAxKSB7XHJcblx0XHRpZiAoIXRoaXMudmFyaWFibGUpIHJldHVybjtcclxuXHRcdHRoaXMueCA9IHg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xyXG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcblx0XHR0aGlzLm1pbkRlcHRoID0gbWluRGVwdGg7XHJcblx0XHR0aGlzLm1heERlcHRoID0gbWF4RGVwdGg7XHJcblx0fVxyXG5cdGVxdWFsc0FuZFVwZGF0ZUNhY2hlKHZpZXdQb3J0OiBWaWV3UG9ydCk6IGJvb2xlYW4ge1xyXG5cdFx0Y29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBtaW5EZXB0aCwgbWF4RGVwdGggfSA9IHZpZXdQb3J0O1xyXG5cdFx0aWYgKFxyXG5cdFx0XHR0aGlzLnggIT0geCB8fFxyXG5cdFx0XHR0aGlzLnkgIT0geSB8fFxyXG5cdFx0XHR0aGlzLndpZHRoICE9IHdpZHRoIHx8XHJcblx0XHRcdHRoaXMuaGVpZ2h0ICE9IGhlaWdodCB8fFxyXG5cdFx0XHR0aGlzLm1pbkRlcHRoICE9IG1pbkRlcHRoIHx8XHJcblx0XHRcdHRoaXMubWF4RGVwdGggIT0gbWF4RGVwdGhcclxuXHRcdCkge1xyXG5cdFx0XHR2aWV3UG9ydC5zZXQodGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLm1pbkRlcHRoLCB0aGlzLm1heERlcHRoKTtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG59XHJcbmV4cG9ydCBjbGFzcyBQcmltaXRpdmUge1xyXG5cdGZyb250RmFjZTogRnJvbnRGYWNlO1xyXG5cdGN1bGxNb2RlOiBDdWxsTW9kZTtcclxuXHR1bmNsaXBwZWREZXB0aDogYm9vbGVhbjtcclxuXHR0b3BvbG9neTogUHJpbWl0aXZlVG9wb2xvZ3k7XHJcblx0Y29uc3RydWN0b3IodG9wb2xvZ3k/OiBQcmltaXRpdmVUb3BvbG9neSwgY3VsbE1vZGU/OiBDdWxsTW9kZSwgZnJvbnRGYWNlPzogRnJvbnRGYWNlLCB1bmNsaXBwZWREZXB0aD86IGJvb2xlYW4pIHtcclxuXHRcdHRoaXMuZnJvbnRGYWNlID0gZGVmYXVsdFZhbHVlKGZyb250RmFjZSwgRnJvbnRGYWNlLkNDVyk7XHJcblx0XHR0aGlzLmN1bGxNb2RlID0gZGVmYXVsdFZhbHVlKGN1bGxNb2RlLCBDdWxsTW9kZS5Ob25lKTtcclxuXHRcdHRoaXMudW5jbGlwcGVkRGVwdGggPSBkZWZhdWx0VmFsdWUodW5jbGlwcGVkRGVwdGgsIGZhbHNlKTtcclxuXHRcdHRoaXMudG9wb2xvZ3kgPSBkZWZhdWx0VmFsdWUodG9wb2xvZ3ksIFByaW1pdGl2ZVRvcG9sb2d5LlRyaWFuZ2xlTGlzdCk7XHJcblx0fVxyXG5cdGdldEdQVVByaW1pdGl2ZURlYygpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZyb250RmFjZTogdGhpcy5mcm9udEZhY2UsXHJcblx0XHRcdGN1bGxNb2RlOiB0aGlzLmN1bGxNb2RlLFxyXG5cdFx0XHR1bmNsaXBwZWREZXB0aDogdGhpcy51bmNsaXBwZWREZXB0aCxcclxuXHRcdFx0dG9wb2xvZ3k6IHRoaXMudG9wb2xvZ3lcclxuXHRcdH07XHJcblx0fVxyXG59XHJcbmV4cG9ydCBjbGFzcyBEZXB0aFN0ZW5jaWwge1xyXG5cdGZvcm1hdDogVGV4dHVyZUZvcm1hdDtcclxuXHRkZXB0aFdyaXRlRW5hYmxlZDogYm9vbGVhbjtcclxuXHRkZXB0aENvbXBhcmU6IENvbXBhcmVGdW5jdGlvbjtcclxuXHRzdGVuY2lsUmVhZE1hc2s6IG51bWJlcjtcclxuXHRzdGVuY2lsV3JpdGVNYXNrOiBudW1iZXI7XHJcblx0c3RlbmNpbEZyb250Q29tcGFyZTogQ29tcGFyZUZ1bmN0aW9uO1xyXG5cdHN0ZW5jaWxGcm9udEZhaWxPcDogU3RlbmNpbE9wZXJhdGlvbjtcclxuXHRzdGVuY2lsRnJvbnREZXB0aEZhaWxPcDogU3RlbmNpbE9wZXJhdGlvbjtcclxuXHRzdGVuY2lsRnJvbnRQYXNzT3A6IFN0ZW5jaWxPcGVyYXRpb247XHJcblxyXG5cdHN0ZW5jaWxCYWNrQ29tcGFyZTogQ29tcGFyZUZ1bmN0aW9uO1xyXG5cdHN0ZW5jaWxCYWNrRmFpbE9wOiBTdGVuY2lsT3BlcmF0aW9uO1xyXG5cdHN0ZW5jaWxCYWNrRGVwdGhGYWlsT3A6IFN0ZW5jaWxPcGVyYXRpb247XHJcblx0c3RlbmNpbEJhY2tQYXNzT3A6IFN0ZW5jaWxPcGVyYXRpb247XHJcblx0ZGVwdGhCaWFzOiBudW1iZXI7XHJcblx0ZGVwdGhCaWFzU2xvcGVTY2FsZTogbnVtYmVyO1xyXG5cdGRlcHRoQmlhc0NsYW1wOiBudW1iZXI7XHJcblx0Y29uc3RydWN0b3Iob3B0aW9ucz86IERlcHRoU3RlbmNpbFByb3BzKSB7XHJcblx0XHR0aGlzLmZvcm1hdCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5mb3JtYXQsIFRleHR1cmVGb3JtYXQuRGVwdGgyNFBsdXMpO1xyXG5cdFx0dGhpcy5kZXB0aFdyaXRlRW5hYmxlZCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5kZXB0aFdyaXRlRW5hYmxlZCwgdHJ1ZSk7XHJcblx0XHR0aGlzLmRlcHRoQ29tcGFyZSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5kZXB0aENvbXBhcmUsIENvbXBhcmVGdW5jdGlvbi5MZXNzKTtcclxuXHRcdHRoaXMuc3RlbmNpbFJlYWRNYXNrID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LnN0ZW5jaWxSZWFkTWFzaywgMHhmZmZmZmZmZik7XHJcblx0XHR0aGlzLnN0ZW5jaWxXcml0ZU1hc2sgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbFdyaXRlTWFzaywgMHhmZmZmZmZmZik7XHJcblx0XHR0aGlzLnN0ZW5jaWxGcm9udENvbXBhcmUgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbEZyb250Q29tcGFyZSwgQ29tcGFyZUZ1bmN0aW9uLkFsd2F5cyk7XHJcblx0XHR0aGlzLnN0ZW5jaWxGcm9udEZhaWxPcCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5zdGVuY2lsRnJvbnRGYWlsT3AsIFN0ZW5jaWxPcGVyYXRpb24uS2VlcCk7XHJcblx0XHR0aGlzLnN0ZW5jaWxGcm9udERlcHRoRmFpbE9wID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LnN0ZW5jaWxGcm9udERlcHRoRmFpbE9wLCBTdGVuY2lsT3BlcmF0aW9uLktlZXApO1xyXG5cdFx0dGhpcy5zdGVuY2lsRnJvbnRQYXNzT3AgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbEZyb250UGFzc09wLCBTdGVuY2lsT3BlcmF0aW9uLktlZXApO1xyXG5cdFx0dGhpcy5zdGVuY2lsQmFja0NvbXBhcmUgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbEJhY2tDb21wYXJlLCBDb21wYXJlRnVuY3Rpb24uQWx3YXlzKTtcclxuXHRcdHRoaXMuc3RlbmNpbEJhY2tGYWlsT3AgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbEJhY2tGYWlsT3AsIFN0ZW5jaWxPcGVyYXRpb24uS2VlcCk7XHJcblx0XHR0aGlzLnN0ZW5jaWxCYWNrRGVwdGhGYWlsT3AgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbEJhY2tEZXB0aEZhaWxPcCwgU3RlbmNpbE9wZXJhdGlvbi5LZWVwKTtcclxuXHRcdHRoaXMuc3RlbmNpbEJhY2tQYXNzT3AgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbEJhY2tQYXNzT3AsIFN0ZW5jaWxPcGVyYXRpb24uS2VlcCk7XHJcblx0XHR0aGlzLmRlcHRoQmlhcyA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5kZXB0aEJpYXMsIDApO1xyXG5cdFx0dGhpcy5kZXB0aEJpYXNTbG9wZVNjYWxlID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmRlcHRoQmlhc1Nsb3BlU2NhbGUsIDApO1xyXG5cdFx0dGhpcy5kZXB0aEJpYXNDbGFtcCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5kZXB0aEJpYXNDbGFtcCwgMCk7XHJcblx0fVxyXG5cdGdldEdQVURlcHRoU3RlbmNpbERlYygpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZvcm1hdDogdGhpcy5mb3JtYXQsXHJcblx0XHRcdGRlcHRoV3JpdGVFbmFibGVkOiB0aGlzLmRlcHRoV3JpdGVFbmFibGVkLFxyXG5cdFx0XHRkZXB0aENvbXBhcmU6IHRoaXMuZGVwdGhDb21wYXJlLFxyXG5cdFx0XHRzdGVuY2lsUmVhZE1hc2s6IHRoaXMuc3RlbmNpbFJlYWRNYXNrLFxyXG5cdFx0XHRzdGVuY2lsV3JpdGVNYXNrOiB0aGlzLnN0ZW5jaWxXcml0ZU1hc2ssXHJcblx0XHRcdHN0ZW5jaWxGcm9udDoge1xyXG5cdFx0XHRcdGNvbXBhcmU6IHRoaXMuc3RlbmNpbEZyb250Q29tcGFyZSxcclxuXHRcdFx0XHRmYWlsT3A6IHRoaXMuc3RlbmNpbEZyb250RmFpbE9wLFxyXG5cdFx0XHRcdGRlcHRoRmFpbE9wOiB0aGlzLnN0ZW5jaWxGcm9udERlcHRoRmFpbE9wLFxyXG5cdFx0XHRcdHBhc3NPcDogdGhpcy5zdGVuY2lsRnJvbnRQYXNzT3BcclxuXHRcdFx0fSxcclxuXHRcdFx0c3RlbmNpbEJhY2s6IHtcclxuXHRcdFx0XHRjb21wYXJlOiB0aGlzLnN0ZW5jaWxCYWNrQ29tcGFyZSxcclxuXHRcdFx0XHRmYWlsT3A6IHRoaXMuc3RlbmNpbEJhY2tGYWlsT3AsXHJcblx0XHRcdFx0ZGVwdGhGYWlsT3A6IHRoaXMuc3RlbmNpbEJhY2tEZXB0aEZhaWxPcCxcclxuXHRcdFx0XHRwYXNzT3A6IHRoaXMuc3RlbmNpbEJhY2tQYXNzT3BcclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVwdGhCaWFzOiB0aGlzLmRlcHRoQmlhcyxcclxuXHRcdFx0ZGVwdGhCaWFzU2xvcGVTY2FsZTogdGhpcy5kZXB0aEJpYXNTbG9wZVNjYWxlLFxyXG5cdFx0XHRkZXB0aEJpYXNDbGFtcDogdGhpcy5kZXB0aEJpYXNDbGFtcFxyXG5cdFx0fTtcclxuXHR9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFRhcmdldCB7XHJcblx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0O1xyXG5cdGJsZW5kQ29sb3JPcGVyYXRpb24/OiBCbGVuZE9wZXJhdGlvbjtcclxuXHRibGVuZENvbG9yU3JjRmFjdG9yPzogQmxlbmRGYWN0b3I7XHJcblx0YmxlbmRDb2xvckRzdEZhY3Rvcj86IEJsZW5kRmFjdG9yO1xyXG5cdGJsZW5kQWxwaGFPcGVyYXRpb24/OiBCbGVuZE9wZXJhdGlvbjtcclxuXHRibGVuZEFscGhhU3JjRmFjdG9yPzogQmxlbmRGYWN0b3I7XHJcblx0YmxlbmRBbHBoYURzdEZhY3Rvcj86IEJsZW5kRmFjdG9yO1xyXG5cdHdyaXRlTWFzazogR1BVQ29sb3JXcml0ZTtcclxuXHRjb25zdHJ1Y3RvcihvcHRpb25zPzogVGFyZ2V0UHJvcHMpIHtcclxuXHRcdHRoaXMuZm9ybWF0ID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmZvcm1hdCwgVGV4dHVyZUZvcm1hdC5CR1JBOFVub3JtKTtcclxuXHRcdHRoaXMuYmxlbmRDb2xvck9wZXJhdGlvbiA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5ibGVuZENvbG9yT3BlcmF0aW9uLCBCbGVuZE9wZXJhdGlvbi5BZGQpO1xyXG5cdFx0dGhpcy5ibGVuZENvbG9yU3JjRmFjdG9yID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmJsZW5kQ29sb3JTcmNGYWN0b3IsIEJsZW5kRmFjdG9yPy5TcmNBbHBoYSk7XHJcblx0XHR0aGlzLmJsZW5kQ29sb3JEc3RGYWN0b3IgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uYmxlbmRDb2xvckRzdEZhY3RvciwgQmxlbmRGYWN0b3IuT25lTWludXNTcmNBbHBoYSk7XHJcblx0XHR0aGlzLmJsZW5kQWxwaGFPcGVyYXRpb24gPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uYmxlbmRBbHBoYU9wZXJhdGlvbiwgQmxlbmRPcGVyYXRpb24uQWRkKTtcclxuXHRcdHRoaXMuYmxlbmRBbHBoYVNyY0ZhY3RvciA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5ibGVuZEFscGhhU3JjRmFjdG9yLCBCbGVuZEZhY3Rvci5PbmUpO1xyXG5cdFx0dGhpcy5ibGVuZEFscGhhRHN0RmFjdG9yID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmJsZW5kQWxwaGFEc3RGYWN0b3IsIEJsZW5kRmFjdG9yLk9uZSk7XHJcblx0XHR0aGlzLndyaXRlTWFzayA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy53cml0ZU1hc2ssIEdQVUNvbG9yV3JpdGUuQWxsKTtcclxuXHR9XHJcblx0Z2V0R1BVVGFyZ2V0RGVjKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Zm9ybWF0OiB0aGlzLmZvcm1hdCxcclxuXHRcdFx0YmxlbmQ6IHtcclxuXHRcdFx0XHRjb2xvcjoge1xyXG5cdFx0XHRcdFx0b3BlcmF0aW9uOiB0aGlzLmJsZW5kQ29sb3JPcGVyYXRpb24sXHJcblx0XHRcdFx0XHRzcmNGYWN0b3I6IHRoaXMuYmxlbmRDb2xvclNyY0ZhY3RvcixcclxuXHRcdFx0XHRcdGRzdEZhY3RvcjogdGhpcy5ibGVuZENvbG9yRHN0RmFjdG9yXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRhbHBoYToge1xyXG5cdFx0XHRcdFx0b3BlcmF0aW9uOiB0aGlzLmJsZW5kQWxwaGFPcGVyYXRpb24sXHJcblx0XHRcdFx0XHRzcmNGYWN0b3I6IHRoaXMuYmxlbmRBbHBoYVNyY0ZhY3RvcixcclxuXHRcdFx0XHRcdGRzdEZhY3RvcjogdGhpcy5ibGVuZEFscGhhRHN0RmFjdG9yXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR3cml0ZU1hc2s6IHRoaXMud3JpdGVNYXNrXHJcblx0XHR9O1xyXG5cdH1cclxufVxyXG5jb25zdCBjYWNoZVZpZXdQb3J0ID0gbmV3IFZpZXdQb3J0KCk7XHJcbmNvbnN0IGNhY2hlU2Npc3NvclRlc3QgPSBuZXcgU2Npc3NvclRlc3QoKTtcclxudHlwZSBEZXB0aFN0ZW5jaWxQcm9wcyA9IHtcclxuXHRmb3JtYXQ/OiBUZXh0dXJlRm9ybWF0O1xyXG5cdGRlcHRoV3JpdGVFbmFibGVkPzogYm9vbGVhbjtcclxuXHRkZXB0aENvbXBhcmU/OiBDb21wYXJlRnVuY3Rpb247XHJcblx0c3RlbmNpbFJlYWRNYXNrPzogbnVtYmVyO1xyXG5cdHN0ZW5jaWxXcml0ZU1hc2s/OiBudW1iZXI7XHJcblx0c3RlbmNpbEZyb250Q29tcGFyZT86IENvbXBhcmVGdW5jdGlvbjtcclxuXHRzdGVuY2lsRnJvbnRGYWlsT3A/OiBTdGVuY2lsT3BlcmF0aW9uO1xyXG5cdHN0ZW5jaWxGcm9udERlcHRoRmFpbE9wPzogU3RlbmNpbE9wZXJhdGlvbjtcclxuXHRzdGVuY2lsRnJvbnRQYXNzT3A/OiBTdGVuY2lsT3BlcmF0aW9uO1xyXG5cclxuXHRzdGVuY2lsQmFja0NvbXBhcmU/OiBDb21wYXJlRnVuY3Rpb247XHJcblx0c3RlbmNpbEJhY2tGYWlsT3A/OiBTdGVuY2lsT3BlcmF0aW9uO1xyXG5cdHN0ZW5jaWxCYWNrRGVwdGhGYWlsT3A/OiBTdGVuY2lsT3BlcmF0aW9uO1xyXG5cdHN0ZW5jaWxCYWNrUGFzc09wPzogU3RlbmNpbE9wZXJhdGlvbjtcclxuXHRkZXB0aEJpYXM/OiBudW1iZXI7XHJcblx0ZGVwdGhCaWFzU2xvcGVTY2FsZT86IG51bWJlcjtcclxuXHRkZXB0aEJpYXNDbGFtcD86IG51bWJlcjtcclxufTtcclxudHlwZSBUYXJnZXRQcm9wcyA9IHtcclxuXHRmb3JtYXQ/OiBUZXh0dXJlRm9ybWF0O1xyXG5cdGJsZW5kQ29sb3JPcGVyYXRpb24/OiBCbGVuZE9wZXJhdGlvbjtcclxuXHRibGVuZENvbG9yU3JjRmFjdG9yPzogQmxlbmRGYWN0b3I7XHJcblx0YmxlbmRDb2xvckRzdEZhY3Rvcj86IEJsZW5kRmFjdG9yO1xyXG5cdGJsZW5kQWxwaGFPcGVyYXRpb24/OiBCbGVuZE9wZXJhdGlvbjtcclxuXHRibGVuZEFscGhhU3JjRmFjdG9yPzogQmxlbmRGYWN0b3I7XHJcblx0YmxlbmRBbHBoYURzdEZhY3Rvcj86IEJsZW5kRmFjdG9yO1xyXG5cdHdyaXRlTWFzaz86IEdQVUNvbG9yV3JpdGU7XHJcbn07XHJcbiIsImltcG9ydCB7IEF0dGFjaG1lbnRPcHRpb25zIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVVHlwZXNcIjtcclxuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4vVGV4dHVyZVwiO1xyXG5cclxuY2xhc3MgQXR0YWNobWVudCB7XHJcblx0cHVibGljIG9wOiBHUFVMb2FkT3AgPSBcImNsZWFyXCI7XHJcblx0cHVibGljIHN0b3JlT3A6IEdQVVN0b3JlT3AgPSBcInN0b3JlXCI7XHJcblxyXG5cdHB1YmxpYyB0ZXh0dXJlPzogVGV4dHVyZTtcclxuXHRwdWJsaWMgcmVzb2x2ZVRhcmdldD86IFRleHR1cmU7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHB1YmxpYyB2YWx1ZTogR1BVQ29sb3JEaWN0IHwgR1BVQ29sb3IgfCBudW1iZXIsIG9wdGlvbnM/OiBBdHRhY2htZW50T3B0aW9ucykge1xyXG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEF0dGFjaG1lbnQ7XHJcbiIsImltcG9ydCB7IFZlcnRleEZvcm1hdCB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZSB7XHJcbiAgcHVibGljIG9mZnNldDogbnVtYmVyO1xyXG4gIHB1YmxpYyBzaGFkZXJMb2NhdGlvbjogbnVtYmVyO1xyXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmc7XHJcbiAgcHVibGljIGZvcm1hdDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhdHRyaWJ1dGVCeXRlU2l6ZTogbnVtYmVyO1xyXG4gIHB1YmxpYyBzdGF0aWMgdjMgPSBuZXcgVmVjdG9yMygpO1xyXG4gIHB1YmxpYyBzdGF0aWMgdjIgPSBuZXcgVmVjdG9yMigpO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyxcclxuICAgIHB1YmxpYyB2YWx1ZTogQXJyYXk8bnVtYmVyPixcclxuICAgIHB1YmxpYyBpdGVtU2l6ZTogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgdGhpcy5zaGFkZXJMb2NhdGlvbiA9IDA7XHJcbiAgfVxyXG4gIGdldEdQVUF0dHJpYnV0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNoYWRlckxvY2F0aW9uOiB0aGlzLnNoYWRlckxvY2F0aW9uLFxyXG4gICAgICBmb3JtYXQ6IHRoaXMuZm9ybWF0LFxyXG4gICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxyXG4gICAgfTtcclxuICB9XHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMudmFsdWUgPSBbXTtcclxuICB9XHJcbiAgYXBwbHlNYXRyaXgzKG1hdHJpeDMpIHtcclxuICAgIGlmICh0aGlzLml0ZW1TaXplID09PSAyKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy52YWx1ZS5sZW5ndGggLyB0aGlzLml0ZW1TaXplOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgQXR0cmlidXRlLnYyLmZyb21CdWZmZXJBdHRyaWJ1dGUodGhpcywgaSk7XHJcbiAgICAgICAgQXR0cmlidXRlLnYyLmFwcGx5TWF0cml4MyhtYXRyaXgzKTtcclxuICAgICAgICB0aGlzLnNldFhZKGksIEF0dHJpYnV0ZS52Mi54LCBBdHRyaWJ1dGUudjIueSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodGhpcy5pdGVtU2l6ZSA9PT0gMykge1xyXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMudmFsdWUubGVuZ3RoIC8gdGhpcy5pdGVtU2l6ZTsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIEF0dHJpYnV0ZS52My5mcm9tQnVmZmVyQXR0cmlidXRlKHRoaXMsIGkpO1xyXG4gICAgICAgIEF0dHJpYnV0ZS52My5hcHBseU1hdHJpeDMobWF0cml4Myk7XHJcbiAgICAgICAgdGhpcy5zZXRYWVooaSwgQXR0cmlidXRlLnYzLngsIEF0dHJpYnV0ZS52My55LCBBdHRyaWJ1dGUudjMueik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBhcHBseU1hdHJpeDQobWF0cml4NCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLnZhbHVlLmxlbmd0aCAvIHRoaXMuaXRlbVNpemU7IGkgPCBsOyBpKyspIHtcclxuICAgICAgQXR0cmlidXRlLnYzLmZyb21CdWZmZXJBdHRyaWJ1dGUodGhpcywgaSk7XHJcbiAgICAgIEF0dHJpYnV0ZS52My5hcHBseU1hdHJpeDQobWF0cml4NCk7XHJcbiAgICAgIHRoaXMuc2V0WFlaKGksIEF0dHJpYnV0ZS52My54LCBBdHRyaWJ1dGUudjMueSwgQXR0cmlidXRlLnYzLnopO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIHNldFgoaW5kZXgsIHgpIHtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKiB0aGlzLml0ZW1TaXplXSA9IHg7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgZ2V0WChpbmRleCkge1xyXG4gICAgbGV0IHggPSB0aGlzLnZhbHVlW2luZGV4ICogdGhpcy5pdGVtU2l6ZV07XHJcbiAgICByZXR1cm4geDtcclxuICB9XHJcbiAgc2V0WShpbmRleCwgeSkge1xyXG4gICAgdGhpcy52YWx1ZVtpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxXSA9IHk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgZ2V0WShpbmRleCkge1xyXG4gICAgbGV0IHkgPSB0aGlzLnZhbHVlW2luZGV4ICogdGhpcy5pdGVtU2l6ZSArIDFdO1xyXG4gICAgcmV0dXJuIHk7XHJcbiAgfVxyXG4gIHNldFooaW5kZXgsIHopIHtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMl0gPSB6O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGdldFooaW5kZXgpIHtcclxuICAgIGxldCB6ID0gdGhpcy52YWx1ZVtpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyXTtcclxuICAgIHJldHVybiB6O1xyXG4gIH1cclxuICBnZXRXKGluZGV4KSB7XHJcbiAgICBsZXQgdyA9IHRoaXMudmFsdWVbaW5kZXggKiB0aGlzLml0ZW1TaXplICsgM107XHJcbiAgICByZXR1cm4gdztcclxuICB9XHJcbiAgc2V0WFkoaW5kZXgsIHgsIHkpIHtcclxuICAgIGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XHJcbiAgICB0aGlzLnZhbHVlW2luZGV4ICsgMF0gPSB4O1xyXG4gICAgdGhpcy52YWx1ZVtpbmRleCArIDFdID0geTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBzZXRYWVooaW5kZXgsIHgsIHksIHopIHtcclxuICAgIGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XHJcbiAgICB0aGlzLnZhbHVlW2luZGV4ICsgMF0gPSB4O1xyXG4gICAgdGhpcy52YWx1ZVtpbmRleCArIDFdID0geTtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKyAyXSA9IHo7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgc2V0WFlaVyhpbmRleCwgeCwgeSwgeiwgdykge1xyXG4gICAgaW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKyAwXSA9IHg7XHJcbiAgICB0aGlzLnZhbHVlW2luZGV4ICsgMV0gPSB5O1xyXG4gICAgdGhpcy52YWx1ZVtpbmRleCArIDJdID0gejtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKyAzXSA9IHc7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEZsb2F0MzJBdHRyaWJ1dGUgZXh0ZW5kcyBBdHRyaWJ1dGUge1xyXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IEFycmF5PG51bWJlcj4sIGl0ZW1TaXplOiBudW1iZXIpIHtcclxuICAgIHN1cGVyKG5hbWUsIHZhbHVlLCBpdGVtU2l6ZSk7XHJcbiAgICB0aGlzLmZvcm1hdCA9IGdldEF0dHJpYnV0ZUZvcm1hdChcImZsb2F0MzJcIiwgaXRlbVNpemUpO1xyXG4gICAgdGhpcy5hdHRyaWJ1dGVCeXRlU2l6ZSA9IEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIGl0ZW1TaXplO1xyXG4gIH1cclxufVxyXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVGb3JtYXQodHlwZTogc3RyaW5nLCBpdGVtU2l6ZTogbnVtYmVyKSB7XHJcbiAgY29uc3Qga2V5ID0gYCR7dHlwZX14JHtpdGVtU2l6ZX1gO1xyXG4gIGxldCBmb3JtYXQ7XHJcbiAgc3dpdGNoIChrZXkpIHtcclxuICAgIGNhc2UgXCJmbG9hdDMyXCI6XHJcbiAgICAgIGZvcm1hdCA9IFZlcnRleEZvcm1hdC5GbG9hdDMyO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJmbG9hdDMyeDJcIjpcclxuICAgICAgZm9ybWF0ID0gVmVydGV4Rm9ybWF0LkZsb2F0MzJ4MjtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwiZmxvYXQzMngzXCI6XHJcbiAgICAgIGZvcm1hdCA9IFZlcnRleEZvcm1hdC5GbG9hdDMyeDM7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBcImZsb2F0MzJ4NFwiOlxyXG4gICAgICBmb3JtYXQgPSBWZXJ0ZXhGb3JtYXQuRmxvYXQzMng0O1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuICByZXR1cm4gZm9ybWF0O1xyXG59XHJcbiIsIi8vIEB0cy1ub2NoZWNrXHJcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuL1ZlY3RvcjNcIjtcclxuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XHJcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi91dGlscy9kZWZpbmVkXCI7XHJcbmltcG9ydCBHTWF0aCBmcm9tIFwiLi9NYXRoXCI7XHJcbmltcG9ydCBNYXRyaXgzIGZyb20gXCIuL01hdHJpeDNcIjtcclxuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4vTWF0cml4NFwiO1xyXG4vKipcclxuICogQSBzZXQgb2YgNC1kaW1lbnNpb25hbCBjb29yZGluYXRlcyB1c2VkIHRvIHJlcHJlc2VudCByb3RhdGlvbiBpbiAzLWRpbWVuc2lvbmFsIHNwYWNlLlxyXG4gKiBAYWxpYXMgUXVhdGVybmlvblxyXG4gKiBAY29uc3RydWN0b3JcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IFt4PTAuMF0gVGhlIFggY29tcG9uZW50LlxyXG4gKiBAcGFyYW0ge051bWJlcn0gW3k9MC4wXSBUaGUgWSBjb21wb25lbnQuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbej0wLjBdIFRoZSBaIGNvbXBvbmVudC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFt3PTAuMF0gVGhlIFcgY29tcG9uZW50LlxyXG4gKlxyXG4gKiBAc2VlIFBhY2thYmxlRm9ySW50ZXJwb2xhdGlvblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFF1YXRlcm5pb24ge1xyXG5cdHB1YmxpYyBzdGF0aWMgWkVSTyA9IE9iamVjdC5mcmVlemUobmV3IFF1YXRlcm5pb24oMC4wLCAwLjAsIDAuMCwgMC4wKSk7XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgSURFTlRJVFkgPSBPYmplY3QuZnJlZXplKG5ldyBRdWF0ZXJuaW9uKDAuMCwgMC4wLCAwLjAsIDEuMCkpO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihwdWJsaWMgeDogbnVtYmVyID0gMCwgcHVibGljIHk6IG51bWJlciA9IDAsIHB1YmxpYyB6OiBudW1iZXIgPSAwLCBwdWJsaWMgdzogbnVtYmVyID0gMSkge31cclxuXHRzZXQoeCwgeSwgeiwgdykge1xyXG5cdFx0dGhpcy54ID0geDtcclxuXHRcdHRoaXMueSA9IHk7XHJcblx0XHR0aGlzLnogPSB6O1xyXG5cdFx0dGhpcy53ID0gdztcclxuXHR9XHJcblx0bm9ybWFsaXplKCkge1xyXG5cdFx0Y29uc3QgaW52ZXJzZU1hZ25pdHVkZSA9IDEuMCAvIFF1YXRlcm5pb24ubWFnbml0dWRlKHRoaXMpO1xyXG5cdFx0Y29uc3QgeCA9IHRoaXMueCAqIGludmVyc2VNYWduaXR1ZGU7XHJcblx0XHRjb25zdCB5ID0gdGhpcy55ICogaW52ZXJzZU1hZ25pdHVkZTtcclxuXHRcdGNvbnN0IHogPSB0aGlzLnogKiBpbnZlcnNlTWFnbml0dWRlO1xyXG5cdFx0Y29uc3QgdyA9IHRoaXMudyAqIGludmVyc2VNYWduaXR1ZGU7XHJcblxyXG5cdFx0dGhpcy54ID0geDtcclxuXHRcdHRoaXMueSA9IHk7XHJcblx0XHR0aGlzLnogPSB6O1xyXG5cdFx0dGhpcy53ID0gdztcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRpbnZlcnQoKSB7XHJcblx0XHR0aGlzLnggKj0gLTE7XHJcblx0XHR0aGlzLnkgKj0gLTE7XHJcblx0XHR0aGlzLnogKj0gLTE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdGRvdCh2OiBRdWF0ZXJuaW9uKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2LnogKyB0aGlzLncgKiB2Lnc7XHJcblx0fVxyXG5cdHNldEZyb21Vbml0VmVjdG9ycyh2RnJvbTogVmVjdG9yMywgdlRvOiBWZWN0b3IzKTogUXVhdGVybmlvbiB7XHJcblx0XHQvLyBhc3N1bWVzIGRpcmVjdGlvbiB2ZWN0b3JzIHZGcm9tIGFuZCB2VG8gYXJlIG5vcm1hbGl6ZWRcclxuXHRcdGxldCByID0gVmVjdG9yMy5kb3QodkZyb20sIHZUbykgKyAxO1xyXG5cdFx0aWYgKHIgPCBOdW1iZXIuRVBTSUxPTikge1xyXG5cdFx0XHQvLyB2RnJvbSBhbmQgdlRvIHBvaW50IGluIG9wcG9zaXRlIGRpcmVjdGlvbnNcclxuXHJcblx0XHRcdHIgPSAwO1xyXG5cclxuXHRcdFx0aWYgKE1hdGguYWJzKHZGcm9tLngpID4gTWF0aC5hYnModkZyb20ueikpIHtcclxuXHRcdFx0XHR0aGlzLnggPSAtdkZyb20ueTtcclxuXHRcdFx0XHR0aGlzLnkgPSB2RnJvbS54O1xyXG5cdFx0XHRcdHRoaXMueiA9IDA7XHJcblx0XHRcdFx0dGhpcy53ID0gcjtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLnggPSAwO1xyXG5cdFx0XHRcdHRoaXMueSA9IC12RnJvbS56O1xyXG5cdFx0XHRcdHRoaXMueiA9IHZGcm9tLnk7XHJcblx0XHRcdFx0dGhpcy53ID0gcjtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gY3Jvc3NWZWN0b3JzKCB2RnJvbSwgdlRvICk7IC8vIGlubGluZWQgdG8gYXZvaWQgY3ljbGljIGRlcGVuZGVuY3kgb24gVmVjdG9yM1xyXG5cclxuXHRcdFx0dGhpcy5feCA9IHZGcm9tLnkgKiB2VG8ueiAtIHZGcm9tLnogKiB2VG8ueTtcclxuXHRcdFx0dGhpcy5feSA9IHZGcm9tLnogKiB2VG8ueCAtIHZGcm9tLnggKiB2VG8uejtcclxuXHRcdFx0dGhpcy5feiA9IHZGcm9tLnggKiB2VG8ueSAtIHZGcm9tLnkgKiB2VG8ueDtcclxuXHRcdFx0dGhpcy5fdyA9IHI7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XHJcblx0fVxyXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeChtYXRyaXg6IE1hdHJpeDQpOiBRdWF0ZXJuaW9uIHtcclxuXHRcdGNvbnN0IHRlID0gbWF0cml4LFxyXG5cdFx0XHRtMTEgPSB0ZVswXSxcclxuXHRcdFx0bTEyID0gdGVbNF0sXHJcblx0XHRcdG0xMyA9IHRlWzhdLFxyXG5cdFx0XHRtMjEgPSB0ZVsxXSxcclxuXHRcdFx0bTIyID0gdGVbNV0sXHJcblx0XHRcdG0yMyA9IHRlWzldLFxyXG5cdFx0XHRtMzEgPSB0ZVsyXSxcclxuXHRcdFx0bTMyID0gdGVbNl0sXHJcblx0XHRcdG0zMyA9IHRlWzEwXSxcclxuXHRcdFx0dHJhY2UgPSBtMTEgKyBtMjIgKyBtMzM7XHJcblxyXG5cdFx0aWYgKHRyYWNlID4gMCkge1xyXG5cdFx0XHRjb25zdCBzID0gMC41IC8gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKTtcclxuXHJcblx0XHRcdHRoaXMudyA9IDAuMjUgLyBzO1xyXG5cdFx0XHR0aGlzLnggPSAobTMyIC0gbTIzKSAqIHM7XHJcblx0XHRcdHRoaXMueSA9IChtMTMgLSBtMzEpICogcztcclxuXHRcdFx0dGhpcy56ID0gKG0yMSAtIG0xMikgKiBzO1xyXG5cdFx0fSBlbHNlIGlmIChtMTEgPiBtMjIgJiYgbTExID4gbTMzKSB7XHJcblx0XHRcdGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTExIC0gbTIyIC0gbTMzKTtcclxuXHJcblx0XHRcdHRoaXMudyA9IChtMzIgLSBtMjMpIC8gcztcclxuXHRcdFx0dGhpcy54ID0gMC4yNSAqIHM7XHJcblx0XHRcdHRoaXMueSA9IChtMTIgKyBtMjEpIC8gcztcclxuXHRcdFx0dGhpcy56ID0gKG0xMyArIG0zMSkgLyBzO1xyXG5cdFx0fSBlbHNlIGlmIChtMjIgPiBtMzMpIHtcclxuXHRcdFx0Y29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCgxLjAgKyBtMjIgLSBtMTEgLSBtMzMpO1xyXG5cclxuXHRcdFx0dGhpcy53ID0gKG0xMyAtIG0zMSkgLyBzO1xyXG5cdFx0XHR0aGlzLnggPSAobTEyICsgbTIxKSAvIHM7XHJcblx0XHRcdHRoaXMueSA9IDAuMjUgKiBzO1xyXG5cdFx0XHR0aGlzLnogPSAobTIzICsgbTMyKSAvIHM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KDEuMCArIG0zMyAtIG0xMSAtIG0yMik7XHJcblxyXG5cdFx0XHR0aGlzLncgPSAobTIxIC0gbTEyKSAvIHM7XHJcblx0XHRcdHRoaXMueCA9IChtMTMgKyBtMzEpIC8gcztcclxuXHRcdFx0dGhpcy55ID0gKG0yMyArIG0zMikgLyBzO1xyXG5cdFx0XHR0aGlzLnogPSAwLjI1ICogcztcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRjbG9uZSgpIHtcclxuXHRcdHJldHVybiBRdWF0ZXJuaW9uLmNsb25lKHRoaXMsIHRoaXMpO1xyXG5cdH1cclxuXHJcblx0ZXF1YWxzKHJpZ2h0OiBRdWF0ZXJuaW9uKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gUXVhdGVybmlvbi5lcXVhbHModGhpcywgcmlnaHQpO1xyXG5cdH1cclxuXHJcblx0ZXF1YWxzRXBzaWxvbihyaWdodDogUXVhdGVybmlvbiwgZXBzaWxvbjogbnVtYmVyID0gMCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIFF1YXRlcm5pb24uZXF1YWxzRXBzaWxvbih0aGlzLCByaWdodCwgZXBzaWxvbik7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbUF4aXNBbmdsZShheGlzOiBWZWN0b3IzLCBhbmdsZTogbnVtYmVyKTogUXVhdGVybmlvbiB7XHJcblx0XHRjb25zdCBoYWxmQW5nbGUgPSBhbmdsZSAvIDIuMDtcclxuXHRcdGNvbnN0IHMgPSBNYXRoLnNpbihoYWxmQW5nbGUpO1xyXG5cdFx0ZnJvbUF4aXNBbmdsZVNjcmF0Y2ggPSBWZWN0b3IzLm5vcm1hbGl6ZShheGlzLCBmcm9tQXhpc0FuZ2xlU2NyYXRjaCk7XHJcblxyXG5cdFx0Y29uc3QgeCA9IGZyb21BeGlzQW5nbGVTY3JhdGNoLnggKiBzO1xyXG5cdFx0Y29uc3QgeSA9IGZyb21BeGlzQW5nbGVTY3JhdGNoLnkgKiBzO1xyXG5cdFx0Y29uc3QgeiA9IGZyb21BeGlzQW5nbGVTY3JhdGNoLnogKiBzO1xyXG5cdFx0Y29uc3QgdyA9IE1hdGguY29zKGhhbGZBbmdsZSk7XHJcblx0XHQvLyBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0Ly8gICByZXR1cm5cclxuXHRcdC8vIH1cclxuXHRcdGxldCByZXN1bHQgPSBuZXcgUXVhdGVybmlvbih4LCB5LCB6LCB3KTtcclxuXHRcdHJlc3VsdC54ID0geDtcclxuXHRcdHJlc3VsdC55ID0geTtcclxuXHRcdHJlc3VsdC56ID0gejtcclxuXHRcdHJlc3VsdC53ID0gdztcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbVJvdGF0aW9uTWF0cml4KG1hdHJpeDogTWF0cml4MywgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcblx0XHRsZXQgcm9vdDtcclxuXHRcdGxldCB4O1xyXG5cdFx0bGV0IHk7XHJcblx0XHRsZXQgejtcclxuXHRcdGxldCB3O1xyXG5cclxuXHRcdGNvbnN0IG0wMCA9IG1hdHJpeFtNYXRyaXgzLkNPTFVNTjBST1cwXTtcclxuXHRcdGNvbnN0IG0xMSA9IG1hdHJpeFtNYXRyaXgzLkNPTFVNTjFST1cxXTtcclxuXHRcdGNvbnN0IG0yMiA9IG1hdHJpeFtNYXRyaXgzLkNPTFVNTjJST1cyXTtcclxuXHRcdGNvbnN0IHRyYWNlID0gbTAwICsgbTExICsgbTIyO1xyXG5cclxuXHRcdGlmICh0cmFjZSA+IDAuMCkge1xyXG5cdFx0XHQvLyB8d3wgPiAxLzIsIG1heSBhcyB3ZWxsIGNob29zZSB3ID4gMS8yXHJcblx0XHRcdHJvb3QgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApOyAvLyAyd1xyXG5cdFx0XHR3ID0gMC41ICogcm9vdDtcclxuXHRcdFx0cm9vdCA9IDAuNSAvIHJvb3Q7IC8vIDEvKDR3KVxyXG5cclxuXHRcdFx0eCA9IChtYXRyaXhbTWF0cml4My5DT0xVTU4xUk9XMl0gLSBtYXRyaXhbTWF0cml4My5DT0xVTU4yUk9XMV0pICogcm9vdDtcclxuXHRcdFx0eSA9IChtYXRyaXhbTWF0cml4My5DT0xVTU4yUk9XMF0gLSBtYXRyaXhbTWF0cml4My5DT0xVTU4wUk9XMl0pICogcm9vdDtcclxuXHRcdFx0eiA9IChtYXRyaXhbTWF0cml4My5DT0xVTU4wUk9XMV0gLSBtYXRyaXhbTWF0cml4My5DT0xVTU4xUk9XMF0pICogcm9vdDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIHx3fCA8PSAxLzJcclxuXHRcdFx0Y29uc3QgbmV4dCA9IGZyb21Sb3RhdGlvbk1hdHJpeE5leHQ7XHJcblxyXG5cdFx0XHRsZXQgaSA9IDA7XHJcblx0XHRcdGlmIChtMTEgPiBtMDApIHtcclxuXHRcdFx0XHRpID0gMTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAobTIyID4gbTAwICYmIG0yMiA+IG0xMSkge1xyXG5cdFx0XHRcdGkgPSAyO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnN0IGogPSBuZXh0W2ldO1xyXG5cdFx0XHRjb25zdCBrID0gbmV4dFtqXTtcclxuXHJcblx0XHRcdHJvb3QgPSBNYXRoLnNxcnQoXHJcblx0XHRcdFx0bWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KGksIGkpXSAtXHJcblx0XHRcdFx0XHRtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoaiwgaildIC1cclxuXHRcdFx0XHRcdG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChrLCBrKV0gK1xyXG5cdFx0XHRcdFx0MS4wXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHRjb25zdCBxdWF0ID0gZnJvbVJvdGF0aW9uTWF0cml4UXVhdDtcclxuXHRcdFx0cXVhdFtpXSA9IDAuNSAqIHJvb3Q7XHJcblx0XHRcdHJvb3QgPSAwLjUgLyByb290O1xyXG5cdFx0XHR3ID0gKG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChrLCBqKV0gLSBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoaiwgayldKSAqIHJvb3Q7XHJcblx0XHRcdHF1YXRbal0gPSAobWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KGosIGkpXSArIG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChpLCBqKV0pICogcm9vdDtcclxuXHRcdFx0cXVhdFtrXSA9IChtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoaywgaSldICsgbWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KGksIGspXSkgKiByb290O1xyXG5cclxuXHRcdFx0eCA9IC1xdWF0WzBdO1xyXG5cdFx0XHR5ID0gLXF1YXRbMV07XHJcblx0XHRcdHogPSAtcXVhdFsyXTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFF1YXRlcm5pb24oeCwgeSwgeiwgdyk7XHJcblx0XHR9XHJcblx0XHRyZXN1bHQueCA9IHg7XHJcblx0XHRyZXN1bHQueSA9IHk7XHJcblx0XHRyZXN1bHQueiA9IHo7XHJcblx0XHRyZXN1bHQudyA9IHc7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNsb25lKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJlc3VsdDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xyXG5cdFx0aWYgKCFkZWZpbmVkKHF1YXRlcm5pb24pKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBRdWF0ZXJuaW9uKHF1YXRlcm5pb24ueCwgcXVhdGVybmlvbi55LCBxdWF0ZXJuaW9uLnosIHF1YXRlcm5pb24udyk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmVzdWx0LnggPSBxdWF0ZXJuaW9uLng7XHJcblx0XHRyZXN1bHQueSA9IHF1YXRlcm5pb24ueTtcclxuXHRcdHJlc3VsdC56ID0gcXVhdGVybmlvbi56O1xyXG5cdFx0cmVzdWx0LncgPSBxdWF0ZXJuaW9uLnc7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNvbmp1Z2F0ZShxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uLCByZXN1bHQ6IFF1YXRlcm5pb24pOiBRdWF0ZXJuaW9uIHtcclxuXHRcdHJlc3VsdC54ID0gLXF1YXRlcm5pb24ueDtcclxuXHRcdHJlc3VsdC55ID0gLXF1YXRlcm5pb24ueTtcclxuXHRcdHJlc3VsdC56ID0gLXF1YXRlcm5pb24uejtcclxuXHRcdHJlc3VsdC53ID0gcXVhdGVybmlvbi53O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtYWduaXR1ZGVTcXVhcmVkKHF1YXRlcm5pb246IFF1YXRlcm5pb24pOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0cXVhdGVybmlvbi54ICogcXVhdGVybmlvbi54ICtcclxuXHRcdFx0cXVhdGVybmlvbi55ICogcXVhdGVybmlvbi55ICtcclxuXHRcdFx0cXVhdGVybmlvbi56ICogcXVhdGVybmlvbi56ICtcclxuXHRcdFx0cXVhdGVybmlvbi53ICogcXVhdGVybmlvbi53XHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG1hZ25pdHVkZShxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBNYXRoLnNxcnQoUXVhdGVybmlvbi5tYWduaXR1ZGVTcXVhcmVkKHF1YXRlcm5pb24pKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBub3JtYWxpemUocXVhdGVybmlvbjogUXVhdGVybmlvbiwgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcblx0XHRjb25zdCBpbnZlcnNlTWFnbml0dWRlID0gMS4wIC8gUXVhdGVybmlvbi5tYWduaXR1ZGUocXVhdGVybmlvbik7XHJcblx0XHRjb25zdCB4ID0gcXVhdGVybmlvbi54ICogaW52ZXJzZU1hZ25pdHVkZTtcclxuXHRcdGNvbnN0IHkgPSBxdWF0ZXJuaW9uLnkgKiBpbnZlcnNlTWFnbml0dWRlO1xyXG5cdFx0Y29uc3QgeiA9IHF1YXRlcm5pb24ueiAqIGludmVyc2VNYWduaXR1ZGU7XHJcblx0XHRjb25zdCB3ID0gcXVhdGVybmlvbi53ICogaW52ZXJzZU1hZ25pdHVkZTtcclxuXHJcblx0XHRyZXN1bHQueCA9IHg7XHJcblx0XHRyZXN1bHQueSA9IHk7XHJcblx0XHRyZXN1bHQueiA9IHo7XHJcblx0XHRyZXN1bHQudyA9IHc7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGludmVyc2UocXVhdGVybmlvbjogUXVhdGVybmlvbiwgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcblx0XHRjb25zdCBtYWduaXR1ZGVTcXVhcmVkID0gUXVhdGVybmlvbi5tYWduaXR1ZGVTcXVhcmVkKHF1YXRlcm5pb24pO1xyXG5cdFx0cmVzdWx0ID0gUXVhdGVybmlvbi5jb25qdWdhdGUocXVhdGVybmlvbiwgcmVzdWx0KTtcclxuXHRcdHJldHVybiBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIocmVzdWx0LCAxLjAgLyBtYWduaXR1ZGVTcXVhcmVkLCByZXN1bHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGFkZChsZWZ0OiBRdWF0ZXJuaW9uLCByaWdodDogUXVhdGVybmlvbiwgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcblx0XHRyZXN1bHQueCA9IGxlZnQueCArIHJpZ2h0Lng7XHJcblx0XHRyZXN1bHQueSA9IGxlZnQueSArIHJpZ2h0Lnk7XHJcblx0XHRyZXN1bHQueiA9IGxlZnQueiArIHJpZ2h0Lno7XHJcblx0XHRyZXN1bHQudyA9IGxlZnQudyArIHJpZ2h0Lnc7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHN1YnRyYWN0KGxlZnQ6IFF1YXRlcm5pb24sIHJpZ2h0OiBRdWF0ZXJuaW9uLCByZXN1bHQ6IFF1YXRlcm5pb24pOiBRdWF0ZXJuaW9uIHtcclxuXHRcdHJlc3VsdC54ID0gbGVmdC54IC0gcmlnaHQueDtcclxuXHRcdHJlc3VsdC55ID0gbGVmdC55IC0gcmlnaHQueTtcclxuXHRcdHJlc3VsdC56ID0gbGVmdC56IC0gcmlnaHQuejtcclxuXHRcdHJlc3VsdC53ID0gbGVmdC53IC0gcmlnaHQudztcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbmVnYXRlKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJlc3VsdDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xyXG5cdFx0cmVzdWx0LnggPSAtcXVhdGVybmlvbi54O1xyXG5cdFx0cmVzdWx0LnkgPSAtcXVhdGVybmlvbi55O1xyXG5cdFx0cmVzdWx0LnogPSAtcXVhdGVybmlvbi56O1xyXG5cdFx0cmVzdWx0LncgPSAtcXVhdGVybmlvbi53O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBkb3QobGVmdDogUXVhdGVybmlvbiwgcmlnaHQ6IFF1YXRlcm5pb24pOiBRdWF0ZXJuaW9uIHtcclxuXHRcdHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0LnogKyBsZWZ0LncgKiByaWdodC53O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG11bHRpcGx5KGxlZnQ6IFF1YXRlcm5pb24sIHJpZ2h0OiBRdWF0ZXJuaW9uLCByZXN1bHQ6IFF1YXRlcm5pb24pOiBRdWF0ZXJuaW9uIHtcclxuXHRcdGNvbnN0IGxlZnRYID0gbGVmdC54O1xyXG5cdFx0Y29uc3QgbGVmdFkgPSBsZWZ0Lnk7XHJcblx0XHRjb25zdCBsZWZ0WiA9IGxlZnQuejtcclxuXHRcdGNvbnN0IGxlZnRXID0gbGVmdC53O1xyXG5cclxuXHRcdGNvbnN0IHJpZ2h0WCA9IHJpZ2h0Lng7XHJcblx0XHRjb25zdCByaWdodFkgPSByaWdodC55O1xyXG5cdFx0Y29uc3QgcmlnaHRaID0gcmlnaHQuejtcclxuXHRcdGNvbnN0IHJpZ2h0VyA9IHJpZ2h0Lnc7XHJcblxyXG5cdFx0Y29uc3QgeCA9IGxlZnRXICogcmlnaHRYICsgbGVmdFggKiByaWdodFcgKyBsZWZ0WSAqIHJpZ2h0WiAtIGxlZnRaICogcmlnaHRZO1xyXG5cdFx0Y29uc3QgeSA9IGxlZnRXICogcmlnaHRZIC0gbGVmdFggKiByaWdodFogKyBsZWZ0WSAqIHJpZ2h0VyArIGxlZnRaICogcmlnaHRYO1xyXG5cdFx0Y29uc3QgeiA9IGxlZnRXICogcmlnaHRaICsgbGVmdFggKiByaWdodFkgLSBsZWZ0WSAqIHJpZ2h0WCArIGxlZnRaICogcmlnaHRXO1xyXG5cdFx0Y29uc3QgdyA9IGxlZnRXICogcmlnaHRXIC0gbGVmdFggKiByaWdodFggLSBsZWZ0WSAqIHJpZ2h0WSAtIGxlZnRaICogcmlnaHRaO1xyXG5cclxuXHRcdHJlc3VsdC54ID0geDtcclxuXHRcdHJlc3VsdC55ID0geTtcclxuXHRcdHJlc3VsdC56ID0gejtcclxuXHRcdHJlc3VsdC53ID0gdztcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlCeVNjYWxhcihxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uLCBzY2FsYXI6IG51bWJlciwgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcblx0XHRyZXN1bHQueCA9IHF1YXRlcm5pb24ueCAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdC55ID0gcXVhdGVybmlvbi55ICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0LnogPSBxdWF0ZXJuaW9uLnogKiBzY2FsYXI7XHJcblx0XHRyZXN1bHQudyA9IHF1YXRlcm5pb24udyAqIHNjYWxhcjtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZGl2aWRlQnlTY2FsYXIocXVhdGVybmlvbjogUXVhdGVybmlvbiwgc2NhbGFyOiBudW1iZXIsIHJlc3VsdDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xyXG5cdFx0cmVzdWx0LnggPSBxdWF0ZXJuaW9uLnggLyBzY2FsYXI7XHJcblx0XHRyZXN1bHQueSA9IHF1YXRlcm5pb24ueSAvIHNjYWxhcjtcclxuXHRcdHJlc3VsdC56ID0gcXVhdGVybmlvbi56IC8gc2NhbGFyO1xyXG5cdFx0cmVzdWx0LncgPSBxdWF0ZXJuaW9uLncgLyBzY2FsYXI7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNvbXB1dGVBeGlzKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0Y29uc3QgdyA9IHF1YXRlcm5pb24udztcclxuXHRcdGlmIChNYXRoLmFicyh3IC0gMS4wKSA8IEdNYXRoLkVQU0lMT042KSB7XHJcblx0XHRcdHJlc3VsdC54ID0gcmVzdWx0LnkgPSByZXN1bHQueiA9IDA7XHJcblx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgc2NhbGFyID0gMS4wIC8gTWF0aC5zcXJ0KDEuMCAtIHcgKiB3KTtcclxuXHJcblx0XHRyZXN1bHQueCA9IHF1YXRlcm5pb24ueCAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdC55ID0gcXVhdGVybmlvbi55ICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0LnogPSBxdWF0ZXJuaW9uLnogKiBzY2FsYXI7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNvbXB1dGVBbmdsZShxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uKTogbnVtYmVyIHtcclxuXHRcdGlmIChNYXRoLmFicyhxdWF0ZXJuaW9uLncgLSAxLjApIDwgR01hdGguRVBTSUxPTjYpIHtcclxuXHRcdFx0cmV0dXJuIDAuMDtcclxuXHRcdH1cclxuXHRcdHJldHVybiAyLjAgKiBNYXRoLmFjb3MocXVhdGVybmlvbi53KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBsZXJwKHN0YXJ0OiBRdWF0ZXJuaW9uLCBlbmQ6IFF1YXRlcm5pb24sIHQ6IG51bWJlciwgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcblx0XHRsZXJwU2NyYXRjaCA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihlbmQsIHQsIGxlcnBTY3JhdGNoKTtcclxuXHRcdHJlc3VsdCA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihzdGFydCwgMS4wIC0gdCwgcmVzdWx0KTtcclxuXHRcdHJldHVybiBRdWF0ZXJuaW9uLmFkZChsZXJwU2NyYXRjaCwgcmVzdWx0LCByZXN1bHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHNsZXJwKHN0YXJ0OiBRdWF0ZXJuaW9uLCBlbmQ6IFF1YXRlcm5pb24sIHQ6IG51bWJlciwgcmVzdWx0OiBRdWF0ZXJuaW9uKTogbnVtYmVyIHtcclxuXHRcdGxldCBkb3QgPSBRdWF0ZXJuaW9uLmRvdChzdGFydCwgZW5kKTtcclxuXHJcblx0XHQvLyBUaGUgYW5nbGUgYmV0d2VlbiBzdGFydCBtdXN0IGJlIGFjdXRlLiBTaW5jZSBxIGFuZCAtcSByZXByZXNlbnRcclxuXHRcdC8vIHRoZSBzYW1lIHJvdGF0aW9uLCBuZWdhdGUgcSB0byBnZXQgdGhlIGFjdXRlIGFuZ2xlLlxyXG5cdFx0bGV0IHIgPSBlbmQ7XHJcblx0XHRpZiAoZG90IDwgMC4wKSB7XHJcblx0XHRcdGRvdCA9IC1kb3Q7XHJcblx0XHRcdHIgPSBzbGVycEVuZE5lZ2F0ZWQgPSBRdWF0ZXJuaW9uLm5lZ2F0ZShlbmQsIHNsZXJwRW5kTmVnYXRlZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZG90ID4gMCwgYXMgdGhlIGRvdCBwcm9kdWN0IGFwcHJvYWNoZXMgMSwgdGhlIGFuZ2xlIGJldHdlZW4gdGhlXHJcblx0XHQvLyBxdWF0ZXJuaW9ucyB2YW5pc2hlcy4gdXNlIGxpbmVhciBpbnRlcnBvbGF0aW9uLlxyXG5cdFx0aWYgKDEuMCAtIGRvdCA8IEdNYXRoLkVQU0lMT042KSB7XHJcblx0XHRcdHJldHVybiBRdWF0ZXJuaW9uLmxlcnAoc3RhcnQsIHIsIHQsIHJlc3VsdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgdGhldGEgPSBNYXRoLmFjb3MoZG90KTtcclxuXHRcdHNsZXJwU2NhbGVkUCA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihzdGFydCwgTWF0aC5zaW4oKDEgLSB0KSAqIHRoZXRhKSwgc2xlcnBTY2FsZWRQKTtcclxuXHRcdHNsZXJwU2NhbGVkUiA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihyLCBNYXRoLnNpbih0ICogdGhldGEpLCBzbGVycFNjYWxlZFIpO1xyXG5cdFx0cmVzdWx0ID0gUXVhdGVybmlvbi5hZGQoc2xlcnBTY2FsZWRQLCBzbGVycFNjYWxlZFIsIHJlc3VsdCk7XHJcblx0XHRyZXR1cm4gUXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKHJlc3VsdCwgMS4wIC8gTWF0aC5zaW4odGhldGEpLCByZXN1bHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNvbXB1dGVJbm5lclF1YWRyYW5nbGUocTA6IFF1YXRlcm5pb24sIHExOiBRdWF0ZXJuaW9uLCBxMjogUXVhdGVybmlvbiwgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcblx0XHRjb25zdCBxSW52ID0gUXVhdGVybmlvbi5jb25qdWdhdGUocTEsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24wKTtcclxuXHRcdFF1YXRlcm5pb24ubXVsdGlwbHkocUludiwgcTIsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xKTtcclxuXHRcdGNvbnN0IGNhcnQwID0gUXVhdGVybmlvbi5sb2coc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEsIHNxdWFkU2NyYXRjaENhcnRlc2lhbjApO1xyXG5cclxuXHRcdFF1YXRlcm5pb24ubXVsdGlwbHkocUludiwgcTAsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xKTtcclxuXHRcdGNvbnN0IGNhcnQxID0gUXVhdGVybmlvbi5sb2coc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEsIHNxdWFkU2NyYXRjaENhcnRlc2lhbjEpO1xyXG5cclxuXHRcdFZlY3RvcjMuYWRkKGNhcnQwLCBjYXJ0MSwgY2FydDApO1xyXG5cdFx0VmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGNhcnQwLCAwLjI1LCBjYXJ0MCk7XHJcblx0XHRWZWN0b3IzLm5lZ2F0ZShjYXJ0MCwgY2FydDApO1xyXG5cdFx0UXVhdGVybmlvbi5leHAoY2FydDAsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24wKTtcclxuXHJcblx0XHRyZXR1cm4gUXVhdGVybmlvbi5tdWx0aXBseShxMSwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjAsIHJlc3VsdCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc3F1YWQoXHJcblx0XHRxMDogUXVhdGVybmlvbixcclxuXHRcdHExOiBRdWF0ZXJuaW9uLFxyXG5cdFx0czA6IFF1YXRlcm5pb24sXHJcblx0XHRzMTogUXVhdGVybmlvbixcclxuXHRcdHQ6IG51bWJlcixcclxuXHRcdHJlc3VsdDogUXVhdGVybmlvblxyXG5cdCk6IFF1YXRlcm5pb24ge1xyXG5cdFx0Y29uc3Qgc2xlcnAwID0gUXVhdGVybmlvbi5zbGVycChxMCwgcTEsIHQsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24wKTtcclxuXHRcdGNvbnN0IHNsZXJwMSA9IFF1YXRlcm5pb24uc2xlcnAoczAsIHMxLCB0LCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMSk7XHJcblx0XHRyZXR1cm4gUXVhdGVybmlvbi5zbGVycChzbGVycDAsIHNsZXJwMSwgMi4wICogdCAqICgxLjAgLSB0KSwgcmVzdWx0KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmYXN0U2xlcnAoc3RhcnQ6IFF1YXRlcm5pb24sIGVuZDogUXVhdGVybmlvbiwgdDogbnVtYmVyLCByZXN1bHQ6IG51bWJlcik6IFF1YXRlcm5pb24ge1xyXG5cdFx0bGV0IHggPSBRdWF0ZXJuaW9uLmRvdChzdGFydCwgZW5kKTtcclxuXHJcblx0XHRsZXQgc2lnbjtcclxuXHRcdGlmICh4ID49IDApIHtcclxuXHRcdFx0c2lnbiA9IDEuMDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHNpZ24gPSAtMS4wO1xyXG5cdFx0XHR4ID0gLXg7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgeG0xID0geCAtIDEuMDtcclxuXHRcdGNvbnN0IGQgPSAxLjAgLSB0O1xyXG5cdFx0Y29uc3Qgc3FyVCA9IHQgKiB0O1xyXG5cdFx0Y29uc3Qgc3FyRCA9IGQgKiBkO1xyXG5cclxuXHRcdGZvciAobGV0IGkgPSA3OyBpID49IDA7IC0taSkge1xyXG5cdFx0XHRiVFtpXSA9ICh1W2ldICogc3FyVCAtIHZbaV0pICogeG0xO1xyXG5cdFx0XHRiRFtpXSA9ICh1W2ldICogc3FyRCAtIHZbaV0pICogeG0xO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGNUID1cclxuXHRcdFx0c2lnbiAqXHJcblx0XHRcdHQgKlxyXG5cdFx0XHQoMS4wICtcclxuXHRcdFx0XHRiVFswXSAqXHJcblx0XHRcdFx0XHQoMS4wICtcclxuXHRcdFx0XHRcdFx0YlRbMV0gKlxyXG5cdFx0XHRcdFx0XHRcdCgxLjAgK1xyXG5cdFx0XHRcdFx0XHRcdFx0YlRbMl0gKlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQoMS4wICsgYlRbM10gKiAoMS4wICsgYlRbNF0gKiAoMS4wICsgYlRbNV0gKiAoMS4wICsgYlRbNl0gKiAoMS4wICsgYlRbN10pKSkpKSkpKTtcclxuXHRcdGNvbnN0IGNEID1cclxuXHRcdFx0ZCAqXHJcblx0XHRcdCgxLjAgK1xyXG5cdFx0XHRcdGJEWzBdICpcclxuXHRcdFx0XHRcdCgxLjAgK1xyXG5cdFx0XHRcdFx0XHRiRFsxXSAqXHJcblx0XHRcdFx0XHRcdFx0KDEuMCArXHJcblx0XHRcdFx0XHRcdFx0XHRiRFsyXSAqXHJcblx0XHRcdFx0XHRcdFx0XHRcdCgxLjAgKyBiRFszXSAqICgxLjAgKyBiRFs0XSAqICgxLjAgKyBiRFs1XSAqICgxLjAgKyBiRFs2XSAqICgxLjAgKyBiRFs3XSkpKSkpKSkpO1xyXG5cclxuXHRcdGNvbnN0IHRlbXAgPSBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIoc3RhcnQsIGNELCBmYXN0U2xlcnBTY3JhdGNoUXVhdGVybmlvbik7XHJcblx0XHRRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIoZW5kLCBjVCwgcmVzdWx0KTtcclxuXHRcdHJldHVybiBRdWF0ZXJuaW9uLmFkZCh0ZW1wLCByZXN1bHQsIHJlc3VsdCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZmFzdFNxdWFkKFxyXG5cdFx0cTA6IFF1YXRlcm5pb24sXHJcblx0XHRxMTogUXVhdGVybmlvbixcclxuXHRcdHMwOiBRdWF0ZXJuaW9uLFxyXG5cdFx0czE6IFF1YXRlcm5pb24sXHJcblx0XHR0OiBudW1iZXIsXHJcblx0XHRyZXN1bHQ6IG51bWJlclxyXG5cdCk6IFF1YXRlcm5pb24ge1xyXG5cdFx0Y29uc3Qgc2xlcnAwID0gUXVhdGVybmlvbi5mYXN0U2xlcnAocTAsIHExLCB0LCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMCk7XHJcblx0XHRjb25zdCBzbGVycDEgPSBRdWF0ZXJuaW9uLmZhc3RTbGVycChzMCwgczEsIHQsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xKTtcclxuXHRcdHJldHVybiBRdWF0ZXJuaW9uLmZhc3RTbGVycChzbGVycDAsIHNsZXJwMSwgMi4wICogdCAqICgxLjAgLSB0KSwgcmVzdWx0KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBlcXVhbHMobGVmdDogUXVhdGVybmlvbiwgcmlnaHQ6IFF1YXRlcm5pb24pOiBib29sZWFuIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdGxlZnQgPT09IHJpZ2h0IHx8XHJcblx0XHRcdChkZWZpbmVkKGxlZnQpICYmXHJcblx0XHRcdFx0ZGVmaW5lZChyaWdodCkgJiZcclxuXHRcdFx0XHRsZWZ0LnggPT09IHJpZ2h0LnggJiZcclxuXHRcdFx0XHRsZWZ0LnkgPT09IHJpZ2h0LnkgJiZcclxuXHRcdFx0XHRsZWZ0LnogPT09IHJpZ2h0LnogJiZcclxuXHRcdFx0XHRsZWZ0LncgPT09IHJpZ2h0LncpXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGVxdWFsc0Vwc2lsb24obGVmdDogUXVhdGVybmlvbiwgcmlnaHQ6IFF1YXRlcm5pb24sIGVwc2lsb246IG51bWJlciA9IDApOiBib29sZWFuIHtcclxuXHRcdGVwc2lsb24gPSBkZWZhdWx0VmFsdWUoZXBzaWxvbiwgMCk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0bGVmdCA9PT0gcmlnaHQgfHxcclxuXHRcdFx0KGRlZmluZWQobGVmdCkgJiZcclxuXHRcdFx0XHRkZWZpbmVkKHJpZ2h0KSAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnQueCAtIHJpZ2h0LngpIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0LnkgLSByaWdodC55KSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdC56IC0gcmlnaHQueikgPD0gZXBzaWxvbiAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnQudyAtIHJpZ2h0LncpIDw9IGVwc2lsb24pXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGxvZyhxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuXHRcdGNvbnN0IHRoZXRhID0gR01hdGguYWNvc0NsYW1wZWQocXVhdGVybmlvbi53KTtcclxuXHRcdGxldCB0aGV0YU92ZXJTaW5UaGV0YSA9IDAuMDtcclxuXHJcblx0XHRpZiAodGhldGEgIT09IDAuMCkge1xyXG5cdFx0XHR0aGV0YU92ZXJTaW5UaGV0YSA9IHRoZXRhIC8gTWF0aC5zaW4odGhldGEpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBWZWN0b3IzLm11bHRpcGx5QnlTY2FsYXIocXVhdGVybmlvbiwgdGhldGFPdmVyU2luVGhldGEsIHJlc3VsdCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZXhwKGNhcnRlc2lhbjogVmVjdG9yMywgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcblx0XHRjb25zdCB0aGV0YSA9IFZlY3RvcjMubWFnbml0dWRlKGNhcnRlc2lhbik7XHJcblx0XHRsZXQgc2luVGhldGFPdmVyVGhldGEgPSAwLjA7XHJcblxyXG5cdFx0aWYgKHRoZXRhICE9PSAwLjApIHtcclxuXHRcdFx0c2luVGhldGFPdmVyVGhldGEgPSBNYXRoLnNpbih0aGV0YSkgLyB0aGV0YTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXN1bHQueCA9IGNhcnRlc2lhbi54ICogc2luVGhldGFPdmVyVGhldGE7XHJcblx0XHRyZXN1bHQueSA9IGNhcnRlc2lhbi55ICogc2luVGhldGFPdmVyVGhldGE7XHJcblx0XHRyZXN1bHQueiA9IGNhcnRlc2lhbi56ICogc2luVGhldGFPdmVyVGhldGE7XHJcblx0XHRyZXN1bHQudyA9IE1hdGguY29zKHRoZXRhKTtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxufVxyXG5cclxubGV0IGZyb21BeGlzQW5nbGVTY3JhdGNoID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNvbnN0IGZyb21Sb3RhdGlvbk1hdHJpeE5leHQgPSBbMSwgMiwgMF07XHJcbmNvbnN0IGZyb21Sb3RhdGlvbk1hdHJpeFF1YXQgPSBuZXcgQXJyYXkoMyk7XHJcblxyXG5jb25zdCBzY3JhdGNoSFBSUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbmxldCBzY3JhdGNoSGVhZGluZ1F1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5sZXQgc2NyYXRjaFBpdGNoUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbmxldCBzY3JhdGNoUm9sbFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cclxuY29uc3Qgc2FtcGxlZFF1YXRlcm5pb25BeGlzID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2FtcGxlZFF1YXRlcm5pb25Sb3RhdGlvbiA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNhbXBsZWRRdWF0ZXJuaW9uVGVtcFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5jb25zdCBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wID0gbmV3IFF1YXRlcm5pb24oKTtcclxuY29uc3Qgc2FtcGxlZFF1YXRlcm5pb25RdWF0ZXJuaW9uMENvbmp1Z2F0ZSA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcblxyXG5sZXQgbGVycFNjcmF0Y2ggPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cclxubGV0IHNsZXJwRW5kTmVnYXRlZCA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbmxldCBzbGVycFNjYWxlZFAgPSBuZXcgUXVhdGVybmlvbigpO1xyXG5sZXQgc2xlcnBTY2FsZWRSID0gbmV3IFF1YXRlcm5pb24oKTtcclxuXHJcbmNvbnN0IGZhc3RTbGVycFNjcmF0Y2hRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvc3Mtb2YtcHJlY2lzaW9uXHJcbmNvbnN0IG9wbXUgPSAxLjkwMTEwNzQ1MzUxNzMwMDM3O1xyXG5jb25zdCB1ID0gbmV3IEZsb2F0MzJBcnJheSg4KTtcclxuY29uc3QgdiA9IG5ldyBGbG9hdDMyQXJyYXkoOCk7XHJcbmNvbnN0IGJUID0gbmV3IEZsb2F0MzJBcnJheSg4KTtcclxuY29uc3QgYkQgPSBuZXcgRmxvYXQzMkFycmF5KDgpO1xyXG5cclxuZm9yIChsZXQgaSA9IDA7IGkgPCA3OyArK2kpIHtcclxuXHRjb25zdCBzID0gaSArIDEuMDtcclxuXHRjb25zdCB0ID0gMi4wICogcyArIDEuMDtcclxuXHR1W2ldID0gMS4wIC8gKHMgKiB0KTtcclxuXHR2W2ldID0gcyAvIHQ7XHJcbn1cclxuXHJcbnVbN10gPSBvcG11IC8gKDguMCAqIDE3LjApO1xyXG52WzddID0gKG9wbXUgKiA4LjApIC8gMTcuMDtcclxuXHJcbmNvbnN0IHNxdWFkU2NyYXRjaENhcnRlc2lhbjAgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4xID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjAgPSBuZXcgUXVhdGVybmlvbigpO1xyXG5jb25zdCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMSA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbiIsImltcG9ydCBNYXRyaXgzIGZyb20gXCIuLi9tYXRoL01hdHJpeDNcIjtcclxuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4uL21hdGgvTWF0cml4NFwiO1xyXG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSBcIi4uL21hdGgvUXVhdGVybmlvblwiO1xyXG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW5kZXJPYmplY3Qge1xyXG5cdHB1YmxpYyB1cDogVmVjdG9yMztcclxuXHRwcml2YXRlIF9wb3NpdGlvbjogVmVjdG9yMztcclxuXHRwcml2YXRlIF9zY2FsZTogVmVjdG9yMztcclxuXHRwcml2YXRlIF9xdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uO1xyXG5cdG1vZGVsTWF0cml4OiBNYXRyaXg0O1xyXG5cdHByaXZhdGUgX25vcm1hbE1hdHJpeDogTWF0cml4NDtcclxuXHRpc0NhbWVyYTogYm9vbGVhbjtcclxuXHRpc0xpZ2h0OiBib29sZWFuO1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5fcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0dGhpcy5fc2NhbGUgPSBuZXcgVmVjdG9yMygxLCAxLCAxKTtcclxuXHRcdHRoaXMuX3F1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cdFx0dGhpcy5tb2RlbE1hdHJpeCA9IE1hdHJpeDQuY2xvbmUoTWF0cml4NC5JREVOVElUWSwgbmV3IE1hdHJpeDQoKSk7XHJcblx0XHR0aGlzLl9ub3JtYWxNYXRyaXggPSBNYXRyaXg0LmNsb25lKE1hdHJpeDQuSURFTlRJVFksIG5ldyBNYXRyaXg0KCkpO1xyXG5cdFx0dGhpcy51cCA9IG5ldyBWZWN0b3IzKDAsIDEsIDApO1xyXG5cdH1cclxuXHRwdWJsaWMgZ2V0IG5vcm1hbE1hdHJpeCgpOiBNYXRyaXg0IHtcclxuXHRcdHJldHVybiB0aGlzLl9ub3JtYWxNYXRyaXg7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0IHBvc2l0aW9uKCk6IFZlY3RvcjMge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xyXG5cdH1cclxuXHRwdWJsaWMgZ2V0IHNjYWxlKCk6IFZlY3RvcjMge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NjYWxlO1xyXG5cdH1cclxuXHRwdWJsaWMgZ2V0IHF1YXRlcm5pb24oKTogUXVhdGVybmlvbiB7XHJcblx0XHRyZXR1cm4gdGhpcy5fcXVhdGVybmlvbjtcclxuXHR9XHJcblx0cHJpdmF0ZSB1cGRhdGVOb3JtYWxNYXRyaXgoKSB7XHJcblx0XHRNYXRyaXg0LmludmVyc2UodGhpcy5tb2RlbE1hdHJpeCwgdGhpcy5fbm9ybWFsTWF0cml4KTtcclxuXHRcdE1hdHJpeDQudHJhbnNwb3NlKHRoaXMuX25vcm1hbE1hdHJpeCwgdGhpcy5fbm9ybWFsTWF0cml4KTtcclxuXHR9XHJcblx0dXBkYXRlTWF0cml4KG1hdHJpeD86IE1hdHJpeDQpIHtcclxuXHRcdE1hdHJpeDQuZnJvbVRyYW5zbGF0aW9uUXVhdGVybmlvblJvdGF0aW9uU2NhbGUodGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlLCB0aGlzLm1vZGVsTWF0cml4KTtcclxuXHRcdGlmIChtYXRyaXgpIE1hdHJpeDQubXVsdGlwbHkodGhpcy5tb2RlbE1hdHJpeCwgbWF0cml4LCB0aGlzLm1vZGVsTWF0cml4KTtcclxuXHRcdHRoaXMudXBkYXRlTm9ybWFsTWF0cml4KCk7XHJcblx0fVxyXG5cdGxvb2tBdCh4LCB5LCB6KSB7XHJcblx0XHRfdGFyZ2V0LnNldCh4LCB5LCB6KTtcclxuXHRcdGlmICh0aGlzLmlzQ2FtZXJhIHx8IHRoaXMuaXNMaWdodCkge1xyXG5cdFx0XHRfbTEubG9va0F0KHRoaXMucG9zaXRpb24sIF90YXJnZXQsIHRoaXMudXApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0X20xLmxvb2tBdChfdGFyZ2V0LCB0aGlzLnBvc2l0aW9uLCB0aGlzLnVwKTtcclxuXHRcdH1cclxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoX20xKTtcclxuXHR9XHJcblx0cm90YXRlT25BeGlzKGF4aXMsIGFuZ2xlKSB7XHJcblx0XHRjb25zdCBxdWF0ID0gUXVhdGVybmlvbi5mcm9tQXhpc0FuZ2xlKGF4aXMsIGFuZ2xlKTtcclxuXHRcdFF1YXRlcm5pb24ubXVsdGlwbHkodGhpcy5xdWF0ZXJuaW9uLCBxdWF0LCB0aGlzLnF1YXRlcm5pb24pO1xyXG5cdH1cclxuXHRyb3RhdGVYKGFuZ2xlKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoX3hBeGlzLCBhbmdsZSk7XHJcblx0fVxyXG5cdHJvdGF0ZVkoYW5nbGUpIHtcclxuXHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyhfeUF4aXMsIGFuZ2xlKTtcclxuXHR9XHJcblx0cm90YXRlWihhbmdsZSkge1xyXG5cdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKF96QXhpcywgYW5nbGUpO1xyXG5cdH1cclxufVxyXG5jb25zdCBfeEF4aXMgPSBuZXcgVmVjdG9yMygxLCAwLCAwKTtcclxuY29uc3QgX3lBeGlzID0gbmV3IFZlY3RvcjMoMCwgMSwgMCk7XHJcbmNvbnN0IF96QXhpcyA9IG5ldyBWZWN0b3IzKDAsIDAsIDEpO1xyXG5jb25zdCBfbTEgPSBuZXcgTWF0cml4NCgpO1xyXG5jb25zdCBfdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgX21hdHJpeDMgPSBuZXcgTWF0cml4MygpO1xyXG5jb25zdCBfbXZNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xyXG4iLCJpbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvQ2FtZXJhXCI7XG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xuaW1wb3J0IHsgSW50ZXJzZWN0IH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcbmltcG9ydCBSZW5kZXJPYmplY3QgZnJvbSBcIi4uL2NvcmUvUmVuZGVyT2JqZWN0XCI7XG5pbXBvcnQgeyBDb21tYW5kU3ViVHlwZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5pbXBvcnQgR2VvbWV0cnkgZnJvbSBcIi4uL2dlb21ldHJ5L0dlb21ldHJ5XCI7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuLi9tYXRlcmlhbC9NYXRlcmlhbFwiO1xuaW1wb3J0IERyYXdDb21tYW5kIGZyb20gXCIuLi9yZW5kZXIvRHJhd0NvbW1hbmRcIjtcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9tYXRoL01hdHJpeDRcIjtcbmV4cG9ydCBjbGFzcyBNZXNoIGV4dGVuZHMgUmVuZGVyT2JqZWN0IHtcblx0W3g6IHN0cmluZ106IGFueTtcblx0Z2VvbWV0cnk/OiBHZW9tZXRyeTtcblx0bWF0ZXJpYWw/OiBNYXRlcmlhbDtcblx0aW5zdGFuY2VzPzogbnVtYmVyO1xuXHRwcmlvcml0eT86IG51bWJlcjtcblx0ZHJhd0NvbW1hbmQ/OiBEcmF3Q29tbWFuZDtcblx0c3ViQ29tbWFuZHM6IHsgW3Byb3A6IHN0cmluZ106IERyYXdDb21tYW5kIH07XG5cdGRpc3RhbmNlVG9DYW1lcmE/OiBudW1iZXI7XG5cdGlzTWVzaDogYm9vbGVhbjtcblx0Y29uc3RydWN0b3IoZ2VvbWV0cnk/OiBHZW9tZXRyeSwgbWF0ZXJpYWw/OiBNYXRlcmlhbCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXHRcdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblx0XHR0aGlzLnR5cGUgPSBcIm1lc2hcIjtcblx0XHR0aGlzLmlzTWVzaCA9IHRydWU7XG5cdFx0dGhpcy5zdWJDb21tYW5kcyA9IHt9O1xuXHR9XG5cdGdldCByZWFkeSgpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXRlcmlhbC5yZWFkeTtcblx0fVxuXHR1cGRhdGUoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSwgY2FtZXJhPzogQ2FtZXJhLCBtYXRyaXg/OiBNYXRyaXg0KSB7XG5cdFx0Ly91cGRhdGUgbWF0cml4XG5cdFx0dGhpcy51cGRhdGVNYXRyaXgobWF0cml4KTtcblx0XHQvL2NyZWF0ZVxuXHRcdHRoaXMuZ2VvbWV0cnkudXBkYXRlKGZyYW1lU3RhdGUpO1xuXG5cdFx0dGhpcy5tYXRlcmlhbC51cGRhdGUoZnJhbWVTdGF0ZSwgdGhpcyk7XG5cdFx0Ly8gdXBkYXRlIGJvdW5kaW5nU3BoZXJlXG5cdFx0dGhpcy5nZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS51cGRhdGUodGhpcy5tb2RlbE1hdHJpeCk7XG5cdFx0dGhpcy5tYXRlcmlhbC5zaGFkZXJTb3VyY2Uuc2V0RGVmaW5lcyhmcmFtZVN0YXRlLmRlZmluZXMpO1xuXHRcdHRoaXMuZGlzdGFuY2VUb0NhbWVyYSA9IHRoaXMuZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUuZGlzdGFuY2VUb0NhbWVyYShjYW1lcmEpO1xuXG5cdFx0Y29uc3QgdmlzaWJpbGl0eSA9IGZyYW1lU3RhdGUuY3VsbGluZ1ZvbHVtZS5jb21wdXRlVmlzaWJpbGl0eSh0aGlzLmdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlKTtcblx0XHQvL+inhumUpeWJlOmZpFxuXHRcdGlmICh2aXNpYmlsaXR5ID09PSBJbnRlcnNlY3QuSU5URVJTRUNUSU5HIHx8IHZpc2liaWxpdHkgPT09IEludGVyc2VjdC5JTlNJREUpIHtcblx0XHRcdGlmICh0aGlzLm1hdGVyaWFsLnRyYW5zcGFyZW50KSB7XG5cdFx0XHRcdGZyYW1lU3RhdGUucmVuZGVyUXVldWUudHJhbnNwYXJlbnQucHVzaCh0aGlzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZyYW1lU3RhdGUucmVuZGVyUXVldWUub3BhcXVlLnB1c2godGhpcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGJlZm9yZVJlbmRlcigpIHt9XG5cdGFmdGVyUmVuZGVyKCkge31cblx0cHVibGljIGdldERyYXdDb21tYW5kKG92ZXJyaWRlTWF0ZXJpYWw/OiBNYXRlcmlhbCwgY29tbWFuZFN1YlR5cGU/OiBDb21tYW5kU3ViVHlwZSkge1xuXHRcdGlmICghdGhpcy5kcmF3Q29tbWFuZCB8fCB0aGlzLm1hdGVyaWFsLmRpcnR5KSB7XG5cdFx0XHR0aGlzLm1hdGVyaWFsLnNoYWRlclNvdXJjZS5zZXREZWZpbmVzKFxuXHRcdFx0XHRPYmplY3QuYXNzaWduKHRoaXMubWF0ZXJpYWwuc2hhZGVyRGF0YS5kZWZpbmVzLCB0aGlzLmdlb21ldHJ5LmRlZmluZXMpXG5cdFx0XHQpO1xuXHRcdFx0aWYgKHRoaXMubWF0ZXJpYWwuZGlydHkpIHRoaXMubWF0ZXJpYWwuZGlydHkgPSBmYWxzZTtcblx0XHRcdHRoaXMuZHJhd0NvbW1hbmQgPSBuZXcgRHJhd0NvbW1hbmQoe1xuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXI6IHRoaXMuZ2VvbWV0cnkudmVydEJ1ZmZlcixcblx0XHRcdFx0aW5kZXhCdWZmZXI6IHRoaXMuZ2VvbWV0cnkuaW5kZXhCdWZmZXIsXG5cdFx0XHRcdHNoYWRlckRhdGE6IHRoaXMubWF0ZXJpYWwuc2hhZGVyRGF0YSxcblx0XHRcdFx0aW5zdGFuY2VzOiB0aGlzLmluc3RhbmNlcyxcblx0XHRcdFx0Y291bnQ6IHRoaXMuZ2VvbWV0cnkuY291bnQsXG5cdFx0XHRcdHJlbmRlclN0YXRlOiB0aGlzLm1hdGVyaWFsLnJlbmRlclN0YXRlLFxuXHRcdFx0XHRzaGFkZXJTb3VyY2U6IHRoaXMubWF0ZXJpYWwuc2hhZGVyU291cmNlLFxuXHRcdFx0XHR0eXBlOiBcInJlbmRlclwiLFxuXHRcdFx0XHRsaWdodDogdGhpcy5tYXRlcmlhbC5saWdodCxcblx0XHRcdFx0bW9kZWxNYXRyaXg6IHRoaXMubW9kZWxNYXRyaXhcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAob3ZlcnJpZGVNYXRlcmlhbCkge1xuXHRcdFx0aWYgKCF0aGlzLnN1YkNvbW1hbmRzW2NvbW1hbmRTdWJUeXBlXSkge1xuXHRcdFx0XHRjb25zdCBjb3B5TWF0ID0gb3ZlcnJpZGVNYXRlcmlhbC5jbG9uZSgpO1xuXHRcdFx0XHRvdmVycmlkZU1hdGVyaWFsLnVwZGF0ZSgpO1xuXHRcdFx0XHRjb3B5TWF0LnVwZGF0ZSgpO1xuXHRcdFx0XHRpZiAoY29weU1hdC5kaXJ0eSkgY29weU1hdC5kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLnN1YkNvbW1hbmRzW2NvbW1hbmRTdWJUeXBlXSA9IHRoaXMuZHJhd0NvbW1hbmQuc2hhbGxvd0Nsb25lKGNvcHlNYXQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuc3ViQ29tbWFuZHNbY29tbWFuZFN1YlR5cGVdO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5kcmF3Q29tbWFuZDtcblx0fVxuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMuZ2VvbWV0cnkuZGVzdHJveSgpO1xuXHRcdHRoaXMubWF0ZXJpYWwuZGVzdHJveSgpO1xuXHR9XG59XG4iLCJpbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvQ2FtZXJhXCI7XHJcbmltcG9ydCBHTWF0aCBmcm9tIFwiLi4vbWF0aC9NYXRoXCI7XHJcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9tYXRoL01hdHJpeDRcIjtcclxuaW1wb3J0IFBsYW5lIGZyb20gXCIuLi9tYXRoL1BsYW5lXCI7XHJcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XHJcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi91dGlscy9kZWZpbmVkXCI7XHJcbmltcG9ydCB7IEludGVyc2VjdCB9IGZyb20gXCIuL1dlYkdQVUNvbnN0YW50XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3VuZGluZ1NwaGVyZSB7XHJcblx0cmFkaXVzOiBudW1iZXI7XHJcblx0Y2VudGVyOiBWZWN0b3IzO1xyXG5cdG9yaWdpblJhZGl1czogbnVtYmVyO1xyXG5cdG9yaWdpbkNlbnRlcjogVmVjdG9yMztcclxuXHRjb25zdHJ1Y3RvcihjZW50ZXI6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygwLCAwLCAwKSwgcmFkaXVzID0gMCkge1xyXG5cdFx0dGhpcy5jZW50ZXIgPSBjZW50ZXI7XHJcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuXHRcdHRoaXMub3JpZ2luQ2VudGVyID0gdGhpcy5jZW50ZXIuY2xvbmUoKTtcclxuXHRcdHRoaXMub3JpZ2luUmFkaXVzID0gcmFkaXVzO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBAcGFyYW0ge1ZlY3RvcjNbXX0gW3Bvc2l0aW9uc10gQW4gYXJyYXkgb2YgcG9pbnRzIHRoYXQgdGhlIGJvdW5kaW5nIHNwaGVyZSB3aWxsIGVuY2xvc2UuICBFYWNoIHBvaW50IG11c3QgaGF2ZSA8Y29kZT54PC9jb2RlPiwgPGNvZGU+eTwvY29kZT4sIGFuZCA8Y29kZT56PC9jb2RlPiBwcm9wZXJ0aWVzLlxyXG5cdCAqIEByZXR1cm5zIHtCb3VuZGluZ1NwaGVyZX0gVGhlIG1vZGlmaWVkIHJlc3VsdCBwYXJhbWV0ZXIgb3IgYSBuZXcgQm91bmRpbmdTcGhlcmUgaW5zdGFuY2UgaWYgb25lIHdhcyBub3QgcHJvdmlkZWQuXHJcblx0ICovXHJcblx0c3RhdGljIGZyb21Qb2ludHMocG9zaXRpb25zOiBWZWN0b3IzW10pIHtcclxuXHRcdGxldCByZXN1bHQgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTtcclxuXHJcblx0XHRpZiAoIWRlZmluZWQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdHJlc3VsdC5jZW50ZXIgPSBWZWN0b3IzLmNsb25lKFZlY3RvcjMuWkVSTywgcmVzdWx0LmNlbnRlcik7XHJcblx0XHRcdHJlc3VsdC5yYWRpdXMgPSAwLjA7XHJcblx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgY3VycmVudFBvcyA9IFZlY3RvcjMuY2xvbmUocG9zaXRpb25zWzBdLCBmcm9tUG9pbnRzQ3VycmVudFBvcyk7XHJcblxyXG5cdFx0Y29uc3QgeE1pbiA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNaW4pO1xyXG5cdFx0Y29uc3QgeU1pbiA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1lNaW4pO1xyXG5cdFx0Y29uc3Qgek1pbiA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1pNaW4pO1xyXG5cclxuXHRcdGNvbnN0IHhNYXggPSBWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNYTWF4KTtcclxuXHRcdGNvbnN0IHlNYXggPSBWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNZTWF4KTtcclxuXHRcdGNvbnN0IHpNYXggPSBWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNaTWF4KTtcclxuXHJcblx0XHRjb25zdCBudW1Qb3NpdGlvbnMgPSBwb3NpdGlvbnMubGVuZ3RoO1xyXG5cdFx0bGV0IGk7XHJcblx0XHRmb3IgKGkgPSAxOyBpIDwgbnVtUG9zaXRpb25zOyBpKyspIHtcclxuXHRcdFx0VmVjdG9yMy5jbG9uZShwb3NpdGlvbnNbaV0sIGN1cnJlbnRQb3MpO1xyXG5cclxuXHRcdFx0Y29uc3QgeCA9IGN1cnJlbnRQb3MueDtcclxuXHRcdFx0Y29uc3QgeSA9IGN1cnJlbnRQb3MueTtcclxuXHRcdFx0Y29uc3QgeiA9IGN1cnJlbnRQb3MuejtcclxuXHJcblx0XHRcdC8vIFN0b3JlIHBvaW50cyBjb250YWluaW5nIHRoZSB0aGUgc21hbGxlc3QgYW5kIGxhcmdlc3QgY29tcG9uZW50c1xyXG5cdFx0XHRpZiAoeCA8IHhNaW4ueCkge1xyXG5cdFx0XHRcdFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgeE1pbik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh4ID4geE1heC54KSB7XHJcblx0XHRcdFx0VmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCB4TWF4KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHkgPCB5TWluLnkpIHtcclxuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHlNaW4pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoeSA+IHlNYXgueSkge1xyXG5cdFx0XHRcdFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgeU1heCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh6IDwgek1pbi56KSB7XHJcblx0XHRcdFx0VmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCB6TWluKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHogPiB6TWF4LnopIHtcclxuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHpNYXgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29tcHV0ZSB4LSwgeS0sIGFuZCB6LXNwYW5zIChTcXVhcmVkIGRpc3RhbmNlcyBiL24gZWFjaCBjb21wb25lbnQncyBtaW4uIGFuZCBtYXguKS5cclxuXHRcdGNvbnN0IHhTcGFuID0gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKFZlY3RvcjMuc3VidHJhY3QoeE1heCwgeE1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpKTtcclxuXHRcdGNvbnN0IHlTcGFuID0gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKFZlY3RvcjMuc3VidHJhY3QoeU1heCwgeU1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpKTtcclxuXHRcdGNvbnN0IHpTcGFuID0gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKFZlY3RvcjMuc3VidHJhY3Qoek1heCwgek1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpKTtcclxuXHJcblx0XHQvLyBTZXQgdGhlIGRpYW1ldGVyIGVuZHBvaW50cyB0byB0aGUgbGFyZ2VzdCBzcGFuLlxyXG5cdFx0bGV0IGRpYW1ldGVyMSA9IHhNaW47XHJcblx0XHRsZXQgZGlhbWV0ZXIyID0geE1heDtcclxuXHRcdGxldCBtYXhTcGFuID0geFNwYW47XHJcblx0XHRpZiAoeVNwYW4gPiBtYXhTcGFuKSB7XHJcblx0XHRcdG1heFNwYW4gPSB5U3BhbjtcclxuXHRcdFx0ZGlhbWV0ZXIxID0geU1pbjtcclxuXHRcdFx0ZGlhbWV0ZXIyID0geU1heDtcclxuXHRcdH1cclxuXHRcdGlmICh6U3BhbiA+IG1heFNwYW4pIHtcclxuXHRcdFx0bWF4U3BhbiA9IHpTcGFuO1xyXG5cdFx0XHRkaWFtZXRlcjEgPSB6TWluO1xyXG5cdFx0XHRkaWFtZXRlcjIgPSB6TWF4O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSB0aGUgY2VudGVyIG9mIHRoZSBpbml0aWFsIHNwaGVyZSBmb3VuZCBieSBSaXR0ZXIncyBhbGdvcml0aG1cclxuXHRcdGNvbnN0IHJpdHRlckNlbnRlciA9IGZyb21Qb2ludHNSaXR0ZXJDZW50ZXI7XHJcblx0XHRyaXR0ZXJDZW50ZXIueCA9IChkaWFtZXRlcjEueCArIGRpYW1ldGVyMi54KSAqIDAuNTtcclxuXHRcdHJpdHRlckNlbnRlci55ID0gKGRpYW1ldGVyMS55ICsgZGlhbWV0ZXIyLnkpICogMC41O1xyXG5cdFx0cml0dGVyQ2VudGVyLnogPSAoZGlhbWV0ZXIxLnogKyBkaWFtZXRlcjIueikgKiAwLjU7XHJcblxyXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSByYWRpdXMgb2YgdGhlIGluaXRpYWwgc3BoZXJlIGZvdW5kIGJ5IFJpdHRlcidzIGFsZ29yaXRobVxyXG5cdFx0bGV0IHJhZGl1c1NxdWFyZWQgPSBWZWN0b3IzLm1hZ25pdHVkZVNxdWFyZWQoVmVjdG9yMy5zdWJ0cmFjdChkaWFtZXRlcjIsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpKTtcclxuXHRcdGxldCByaXR0ZXJSYWRpdXMgPSBNYXRoLnNxcnQocmFkaXVzU3F1YXJlZCk7XHJcblxyXG5cdFx0Ly8gRmluZCB0aGUgY2VudGVyIG9mIHRoZSBzcGhlcmUgZm91bmQgdXNpbmcgdGhlIE5haXZlIG1ldGhvZC5cclxuXHRcdGNvbnN0IG1pbkJveFB0ID0gZnJvbVBvaW50c01pbkJveFB0O1xyXG5cdFx0bWluQm94UHQueCA9IHhNaW4ueDtcclxuXHRcdG1pbkJveFB0LnkgPSB5TWluLnk7XHJcblx0XHRtaW5Cb3hQdC56ID0gek1pbi56O1xyXG5cclxuXHRcdGNvbnN0IG1heEJveFB0ID0gZnJvbVBvaW50c01heEJveFB0O1xyXG5cdFx0bWF4Qm94UHQueCA9IHhNYXgueDtcclxuXHRcdG1heEJveFB0LnkgPSB5TWF4Lnk7XHJcblx0XHRtYXhCb3hQdC56ID0gek1heC56O1xyXG5cclxuXHRcdGNvbnN0IG5haXZlQ2VudGVyID0gVmVjdG9yMy5taWRwb2ludChtaW5Cb3hQdCwgbWF4Qm94UHQsIGZyb21Qb2ludHNOYWl2ZUNlbnRlclNjcmF0Y2gpO1xyXG5cclxuXHRcdC8vIEJlZ2luIDJuZCBwYXNzIHRvIGZpbmQgbmFpdmUgcmFkaXVzIGFuZCBtb2RpZnkgdGhlIHJpdHRlciBzcGhlcmUuXHJcblx0XHRsZXQgbmFpdmVSYWRpdXMgPSAwO1xyXG5cdFx0Zm9yIChpID0gMDsgaSA8IG51bVBvc2l0aW9uczsgaSsrKSB7XHJcblx0XHRcdFZlY3RvcjMuY2xvbmUocG9zaXRpb25zW2ldLCBjdXJyZW50UG9zKTtcclxuXHJcblx0XHRcdC8vIEZpbmQgdGhlIGZ1cnRoZXN0IHBvaW50IGZyb20gdGhlIG5haXZlIGNlbnRlciB0byBjYWxjdWxhdGUgdGhlIG5haXZlIHJhZGl1cy5cclxuXHRcdFx0Y29uc3QgciA9IFZlY3RvcjMubWFnbml0dWRlKFZlY3RvcjMuc3VidHJhY3QoY3VycmVudFBvcywgbmFpdmVDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKSk7XHJcblx0XHRcdGlmIChyID4gbmFpdmVSYWRpdXMpIHtcclxuXHRcdFx0XHRuYWl2ZVJhZGl1cyA9IHI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1ha2UgYWRqdXN0bWVudHMgdG8gdGhlIFJpdHRlciBTcGhlcmUgdG8gaW5jbHVkZSBhbGwgcG9pbnRzLlxyXG5cdFx0XHRjb25zdCBvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCA9IFZlY3RvcjMubWFnbml0dWRlU3F1YXJlZChcclxuXHRcdFx0XHRWZWN0b3IzLnN1YnRyYWN0KGN1cnJlbnRQb3MsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpXHJcblx0XHRcdCk7XHJcblx0XHRcdGlmIChvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCA+IHJhZGl1c1NxdWFyZWQpIHtcclxuXHRcdFx0XHRjb25zdCBvbGRDZW50ZXJUb1BvaW50ID0gTWF0aC5zcXJ0KG9sZENlbnRlclRvUG9pbnRTcXVhcmVkKTtcclxuXHRcdFx0XHQvLyBDYWxjdWxhdGUgbmV3IHJhZGl1cyB0byBpbmNsdWRlIHRoZSBwb2ludCB0aGF0IGxpZXMgb3V0c2lkZVxyXG5cdFx0XHRcdHJpdHRlclJhZGl1cyA9IChyaXR0ZXJSYWRpdXMgKyBvbGRDZW50ZXJUb1BvaW50KSAqIDAuNTtcclxuXHRcdFx0XHRyYWRpdXNTcXVhcmVkID0gcml0dGVyUmFkaXVzICogcml0dGVyUmFkaXVzO1xyXG5cdFx0XHRcdC8vIENhbGN1bGF0ZSBjZW50ZXIgb2YgbmV3IFJpdHRlciBzcGhlcmVcclxuXHRcdFx0XHRjb25zdCBvbGRUb05ldyA9IG9sZENlbnRlclRvUG9pbnQgLSByaXR0ZXJSYWRpdXM7XHJcblx0XHRcdFx0cml0dGVyQ2VudGVyLnggPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnggKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueCkgLyBvbGRDZW50ZXJUb1BvaW50O1xyXG5cdFx0XHRcdHJpdHRlckNlbnRlci55ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci55ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLnkpIC8gb2xkQ2VudGVyVG9Qb2ludDtcclxuXHRcdFx0XHRyaXR0ZXJDZW50ZXIueiA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueiArIG9sZFRvTmV3ICogY3VycmVudFBvcy56KSAvIG9sZENlbnRlclRvUG9pbnQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocml0dGVyUmFkaXVzIDwgbmFpdmVSYWRpdXMpIHtcclxuXHRcdFx0VmVjdG9yMy5jbG9uZShyaXR0ZXJDZW50ZXIsIHJlc3VsdC5jZW50ZXIpO1xyXG5cdFx0XHRyZXN1bHQucmFkaXVzID0gcml0dGVyUmFkaXVzO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0VmVjdG9yMy5jbG9uZShuYWl2ZUNlbnRlciwgcmVzdWx0LmNlbnRlcik7XHJcblx0XHRcdHJlc3VsdC5yYWRpdXMgPSBuYWl2ZVJhZGl1cztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBDb21wdXRlcyBhIHRpZ2h0LWZpdHRpbmcgYm91bmRpbmcgc3BoZXJlIGVuY2xvc2luZyBhIGxpc3Qgb2YgM0QgcG9pbnRzLCB3aGVyZSB0aGUgcG9pbnRzIGFyZVxyXG5cdCAqIHN0b3JlZCBpbiBhIGZsYXQgYXJyYXkgaW4gWCwgWSwgWiwgb3JkZXIuICBUaGUgYm91bmRpbmcgc3BoZXJlIGlzIGNvbXB1dGVkIGJ5IHJ1bm5pbmcgdHdvXHJcblx0ICogYWxnb3JpdGhtcywgYSBuYWl2ZSBhbGdvcml0aG0gYW5kIFJpdHRlcidzIGFsZ29yaXRobS4gVGhlIHNtYWxsZXIgb2YgdGhlIHR3byBzcGhlcmVzIGlzIHVzZWQgdG9cclxuXHQgKiBlbnN1cmUgYSB0aWdodCBmaXQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge051bWJlcltdfSBbcG9zaXRpb25zXSBBbiBhcnJheSBvZiBwb2ludHMgdGhhdCB0aGUgYm91bmRpbmcgc3BoZXJlIHdpbGwgZW5jbG9zZS4gIEVhY2ggcG9pbnRcclxuXHQgKiAgICAgICAgaXMgZm9ybWVkIGZyb20gdGhyZWUgZWxlbWVudHMgaW4gdGhlIGFycmF5IGluIHRoZSBvcmRlciBYLCBZLCBaLlxyXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW2NlbnRlcj1WZWN0b3IzLlpFUk9dIFRoZSBwb3NpdGlvbiB0byB3aGljaCB0aGUgcG9zaXRpb25zIGFyZSByZWxhdGl2ZSwgd2hpY2ggbmVlZCBub3QgYmUgdGhlXHJcblx0ICogICAgICAgIG9yaWdpbiBvZiB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0uICBUaGlzIGlzIHVzZWZ1bCB3aGVuIHRoZSBwb3NpdGlvbnMgYXJlIHRvIGJlIHVzZWQgZm9yXHJcblx0ICogICAgICAgIHJlbGF0aXZlLXRvLWNlbnRlciAoUlRDKSByZW5kZXJpbmcuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzdHJpZGU9M10gVGhlIG51bWJlciBvZiBhcnJheSBlbGVtZW50cyBwZXIgdmVydGV4LiAgSXQgbXVzdCBiZSBhdCBsZWFzdCAzLCBidXQgaXQgbWF5XHJcblx0ICogICAgICAgIGJlIGhpZ2hlci4gIFJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIHRoaXMgcGFyYW1ldGVyLCB0aGUgWCBjb29yZGluYXRlIG9mIHRoZSBmaXJzdCBwb3NpdGlvblxyXG5cdCAqICAgICAgICBpcyBhdCBhcnJheSBpbmRleCAwLCB0aGUgWSBjb29yZGluYXRlIGlzIGF0IGFycmF5IGluZGV4IDEsIGFuZCB0aGUgWiBjb29yZGluYXRlIGlzIGF0IGFycmF5IGluZGV4XHJcblx0ICogICAgICAgIDIuICBXaGVuIHN0cmlkZSBpcyAzLCB0aGUgWCBjb29yZGluYXRlIG9mIHRoZSBuZXh0IHBvc2l0aW9uIHRoZW4gYmVnaW5zIGF0IGFycmF5IGluZGV4IDMuICBJZlxyXG5cdCAqICAgICAgICB0aGUgc3RyaWRlIGlzIDUsIGhvd2V2ZXIsIHR3byBhcnJheSBlbGVtZW50cyBhcmUgc2tpcHBlZCBhbmQgdGhlIG5leHQgcG9zaXRpb24gYmVnaW5zIGF0IGFycmF5XHJcblx0ICogICAgICAgIGluZGV4IDUuXHJcblx0ICogQHBhcmFtIHtCb3VuZGluZ1NwaGVyZX0gW3Jlc3VsdF0gVGhlIG9iamVjdCBvbnRvIHdoaWNoIHRvIHN0b3JlIHRoZSByZXN1bHQuXHJcblx0ICogQHJldHVybnMge0JvdW5kaW5nU3BoZXJlfSBUaGUgbW9kaWZpZWQgcmVzdWx0IHBhcmFtZXRlciBvciBhIG5ldyBCb3VuZGluZ1NwaGVyZSBpbnN0YW5jZSBpZiBvbmUgd2FzIG5vdCBwcm92aWRlZC5cclxuXHQgKlxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogLy8gQ29tcHV0ZSB0aGUgYm91bmRpbmcgc3BoZXJlIGZyb20gMyBwb3NpdGlvbnMsIGVhY2ggc3BlY2lmaWVkIHJlbGF0aXZlIHRvIGEgY2VudGVyLlxyXG5cdCAqIC8vIEluIGFkZGl0aW9uIHRvIHRoZSBYLCBZLCBhbmQgWiBjb29yZGluYXRlcywgdGhlIHBvaW50cyBhcnJheSBjb250YWlucyB0d28gYWRkaXRpb25hbFxyXG5cdCAqIC8vIGVsZW1lbnRzIHBlciBwb2ludCB3aGljaCBhcmUgaWdub3JlZCBmb3IgdGhlIHB1cnBvc2Ugb2YgY29tcHV0aW5nIHRoZSBib3VuZGluZyBzcGhlcmUuXHJcblx0ICogY29uc3QgY2VudGVyID0gbmV3IFZlY3RvcjMoMS4wLCAyLjAsIDMuMCk7XHJcblx0ICogY29uc3QgcG9pbnRzID0gWzEuMCwgMi4wLCAzLjAsIDAuMSwgMC4yLFxyXG5cdCAqICAgICAgICAgICAgICAgNC4wLCA1LjAsIDYuMCwgMC4xLCAwLjIsXHJcblx0ICogICAgICAgICAgICAgICA3LjAsIDguMCwgOS4wLCAwLjEsIDAuMl07XHJcblx0ICogY29uc3Qgc3BoZXJlID0gQm91bmRpbmdTcGhlcmUuZnJvbVZlcnRpY2VzKHBvaW50cywgY2VudGVyLCA1KTtcclxuXHQgKlxyXG5cdCAqL1xyXG5cdHN0YXRpYyBmcm9tVmVydGljZXMocG9zaXRpb25zOiBudW1iZXJbXSwgY2VudGVyOiBWZWN0b3IzID0gVmVjdG9yMy5aRVJPLCBzdHJpZGU6IG51bWJlciA9IDMpIHtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpO1xyXG5cclxuXHRcdGlmICghZGVmaW5lZChwb3NpdGlvbnMpIHx8IHBvc2l0aW9ucy5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0cmVzdWx0LmNlbnRlciA9IFZlY3RvcjMuY2xvbmUoVmVjdG9yMy5aRVJPLCByZXN1bHQuY2VudGVyKTtcclxuXHRcdFx0cmVzdWx0LnJhZGl1cyA9IDAuMDtcclxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdH1cclxuXHJcblx0XHRjZW50ZXIgPSBkZWZhdWx0VmFsdWUoY2VudGVyLCBWZWN0b3IzLlpFUk8pO1xyXG5cclxuXHRcdHN0cmlkZSA9IGRlZmF1bHRWYWx1ZShzdHJpZGUsIDMpO1xyXG5cclxuXHRcdGNvbnN0IGN1cnJlbnRQb3MgPSBmcm9tUG9pbnRzQ3VycmVudFBvcztcclxuXHRcdGN1cnJlbnRQb3MueCA9IHBvc2l0aW9uc1swXSArIGNlbnRlci54O1xyXG5cdFx0Y3VycmVudFBvcy55ID0gcG9zaXRpb25zWzFdICsgY2VudGVyLnk7XHJcblx0XHRjdXJyZW50UG9zLnogPSBwb3NpdGlvbnNbMl0gKyBjZW50ZXIuejtcclxuXHJcblx0XHRjb25zdCB4TWluID0gVmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCBmcm9tUG9pbnRzWE1pbik7XHJcblx0XHRjb25zdCB5TWluID0gVmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCBmcm9tUG9pbnRzWU1pbik7XHJcblx0XHRjb25zdCB6TWluID0gVmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCBmcm9tUG9pbnRzWk1pbik7XHJcblxyXG5cdFx0Y29uc3QgeE1heCA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNYXgpO1xyXG5cdFx0Y29uc3QgeU1heCA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1lNYXgpO1xyXG5cdFx0Y29uc3Qgek1heCA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1pNYXgpO1xyXG5cclxuXHRcdGNvbnN0IG51bUVsZW1lbnRzID0gcG9zaXRpb25zLmxlbmd0aDtcclxuXHRcdGxldCBpO1xyXG5cdFx0Zm9yIChpID0gMDsgaSA8IG51bUVsZW1lbnRzOyBpICs9IHN0cmlkZSkge1xyXG5cdFx0XHRjb25zdCB4ID0gcG9zaXRpb25zW2ldICsgY2VudGVyLng7XHJcblx0XHRcdGNvbnN0IHkgPSBwb3NpdGlvbnNbaSArIDFdICsgY2VudGVyLnk7XHJcblx0XHRcdGNvbnN0IHogPSBwb3NpdGlvbnNbaSArIDJdICsgY2VudGVyLno7XHJcblxyXG5cdFx0XHRjdXJyZW50UG9zLnggPSB4O1xyXG5cdFx0XHRjdXJyZW50UG9zLnkgPSB5O1xyXG5cdFx0XHRjdXJyZW50UG9zLnogPSB6O1xyXG5cclxuXHRcdFx0Ly8gU3RvcmUgcG9pbnRzIGNvbnRhaW5pbmcgdGhlIHRoZSBzbWFsbGVzdCBhbmQgbGFyZ2VzdCBjb21wb25lbnRzXHJcblx0XHRcdGlmICh4IDwgeE1pbi54KSB7XHJcblx0XHRcdFx0VmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCB4TWluKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHggPiB4TWF4LngpIHtcclxuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHhNYXgpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoeSA8IHlNaW4ueSkge1xyXG5cdFx0XHRcdFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgeU1pbik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh5ID4geU1heC55KSB7XHJcblx0XHRcdFx0VmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCB5TWF4KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHogPCB6TWluLnopIHtcclxuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHpNaW4pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoeiA+IHpNYXgueikge1xyXG5cdFx0XHRcdFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgek1heCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb21wdXRlIHgtLCB5LSwgYW5kIHotc3BhbnMgKFNxdWFyZWQgZGlzdGFuY2VzIGIvbiBlYWNoIGNvbXBvbmVudCdzIG1pbi4gYW5kIG1heC4pLlxyXG5cdFx0Y29uc3QgeFNwYW4gPSBWZWN0b3IzLm1hZ25pdHVkZVNxdWFyZWQoVmVjdG9yMy5zdWJ0cmFjdCh4TWF4LCB4TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkpO1xyXG5cdFx0Y29uc3QgeVNwYW4gPSBWZWN0b3IzLm1hZ25pdHVkZVNxdWFyZWQoVmVjdG9yMy5zdWJ0cmFjdCh5TWF4LCB5TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkpO1xyXG5cdFx0Y29uc3QgelNwYW4gPSBWZWN0b3IzLm1hZ25pdHVkZVNxdWFyZWQoVmVjdG9yMy5zdWJ0cmFjdCh6TWF4LCB6TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkpO1xyXG5cclxuXHRcdC8vIFNldCB0aGUgZGlhbWV0ZXIgZW5kcG9pbnRzIHRvIHRoZSBsYXJnZXN0IHNwYW4uXHJcblx0XHRsZXQgZGlhbWV0ZXIxID0geE1pbjtcclxuXHRcdGxldCBkaWFtZXRlcjIgPSB4TWF4O1xyXG5cdFx0bGV0IG1heFNwYW4gPSB4U3BhbjtcclxuXHRcdGlmICh5U3BhbiA+IG1heFNwYW4pIHtcclxuXHRcdFx0bWF4U3BhbiA9IHlTcGFuO1xyXG5cdFx0XHRkaWFtZXRlcjEgPSB5TWluO1xyXG5cdFx0XHRkaWFtZXRlcjIgPSB5TWF4O1xyXG5cdFx0fVxyXG5cdFx0aWYgKHpTcGFuID4gbWF4U3Bhbikge1xyXG5cdFx0XHRtYXhTcGFuID0gelNwYW47XHJcblx0XHRcdGRpYW1ldGVyMSA9IHpNaW47XHJcblx0XHRcdGRpYW1ldGVyMiA9IHpNYXg7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSBjZW50ZXIgb2YgdGhlIGluaXRpYWwgc3BoZXJlIGZvdW5kIGJ5IFJpdHRlcidzIGFsZ29yaXRobVxyXG5cdFx0Y29uc3Qgcml0dGVyQ2VudGVyID0gZnJvbVBvaW50c1JpdHRlckNlbnRlcjtcclxuXHRcdHJpdHRlckNlbnRlci54ID0gKGRpYW1ldGVyMS54ICsgZGlhbWV0ZXIyLngpICogMC41O1xyXG5cdFx0cml0dGVyQ2VudGVyLnkgPSAoZGlhbWV0ZXIxLnkgKyBkaWFtZXRlcjIueSkgKiAwLjU7XHJcblx0XHRyaXR0ZXJDZW50ZXIueiA9IChkaWFtZXRlcjEueiArIGRpYW1ldGVyMi56KSAqIDAuNTtcclxuXHJcblx0XHQvLyBDYWxjdWxhdGUgdGhlIHJhZGl1cyBvZiB0aGUgaW5pdGlhbCBzcGhlcmUgZm91bmQgYnkgUml0dGVyJ3MgYWxnb3JpdGhtXHJcblx0XHRsZXQgcmFkaXVzU3F1YXJlZCA9IFZlY3RvcjMubWFnbml0dWRlU3F1YXJlZChWZWN0b3IzLnN1YnRyYWN0KGRpYW1ldGVyMiwgcml0dGVyQ2VudGVyLCBmcm9tUG9pbnRzU2NyYXRjaCkpO1xyXG5cdFx0bGV0IHJpdHRlclJhZGl1cyA9IE1hdGguc3FydChyYWRpdXNTcXVhcmVkKTtcclxuXHJcblx0XHQvLyBGaW5kIHRoZSBjZW50ZXIgb2YgdGhlIHNwaGVyZSBmb3VuZCB1c2luZyB0aGUgTmFpdmUgbWV0aG9kLlxyXG5cdFx0Y29uc3QgbWluQm94UHQgPSBmcm9tUG9pbnRzTWluQm94UHQ7XHJcblx0XHRtaW5Cb3hQdC54ID0geE1pbi54O1xyXG5cdFx0bWluQm94UHQueSA9IHlNaW4ueTtcclxuXHRcdG1pbkJveFB0LnogPSB6TWluLno7XHJcblxyXG5cdFx0Y29uc3QgbWF4Qm94UHQgPSBmcm9tUG9pbnRzTWF4Qm94UHQ7XHJcblx0XHRtYXhCb3hQdC54ID0geE1heC54O1xyXG5cdFx0bWF4Qm94UHQueSA9IHlNYXgueTtcclxuXHRcdG1heEJveFB0LnogPSB6TWF4Lno7XHJcblxyXG5cdFx0Y29uc3QgbmFpdmVDZW50ZXIgPSBWZWN0b3IzLm1pZHBvaW50KG1pbkJveFB0LCBtYXhCb3hQdCwgZnJvbVBvaW50c05haXZlQ2VudGVyU2NyYXRjaCk7XHJcblxyXG5cdFx0Ly8gQmVnaW4gMm5kIHBhc3MgdG8gZmluZCBuYWl2ZSByYWRpdXMgYW5kIG1vZGlmeSB0aGUgcml0dGVyIHNwaGVyZS5cclxuXHRcdGxldCBuYWl2ZVJhZGl1cyA9IDA7XHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgbnVtRWxlbWVudHM7IGkgKz0gc3RyaWRlKSB7XHJcblx0XHRcdGN1cnJlbnRQb3MueCA9IHBvc2l0aW9uc1tpXSArIGNlbnRlci54O1xyXG5cdFx0XHRjdXJyZW50UG9zLnkgPSBwb3NpdGlvbnNbaSArIDFdICsgY2VudGVyLnk7XHJcblx0XHRcdGN1cnJlbnRQb3MueiA9IHBvc2l0aW9uc1tpICsgMl0gKyBjZW50ZXIuejtcclxuXHJcblx0XHRcdC8vIEZpbmQgdGhlIGZ1cnRoZXN0IHBvaW50IGZyb20gdGhlIG5haXZlIGNlbnRlciB0byBjYWxjdWxhdGUgdGhlIG5haXZlIHJhZGl1cy5cclxuXHRcdFx0Y29uc3QgciA9IFZlY3RvcjMubWFnbml0dWRlKFZlY3RvcjMuc3VidHJhY3QoY3VycmVudFBvcywgbmFpdmVDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKSk7XHJcblx0XHRcdGlmIChyID4gbmFpdmVSYWRpdXMpIHtcclxuXHRcdFx0XHRuYWl2ZVJhZGl1cyA9IHI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1ha2UgYWRqdXN0bWVudHMgdG8gdGhlIFJpdHRlciBTcGhlcmUgdG8gaW5jbHVkZSBhbGwgcG9pbnRzLlxyXG5cdFx0XHRjb25zdCBvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCA9IFZlY3RvcjMubWFnbml0dWRlU3F1YXJlZChcclxuXHRcdFx0XHRWZWN0b3IzLnN1YnRyYWN0KGN1cnJlbnRQb3MsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpXHJcblx0XHRcdCk7XHJcblx0XHRcdGlmIChvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCA+IHJhZGl1c1NxdWFyZWQpIHtcclxuXHRcdFx0XHRjb25zdCBvbGRDZW50ZXJUb1BvaW50ID0gTWF0aC5zcXJ0KG9sZENlbnRlclRvUG9pbnRTcXVhcmVkKTtcclxuXHRcdFx0XHQvLyBDYWxjdWxhdGUgbmV3IHJhZGl1cyB0byBpbmNsdWRlIHRoZSBwb2ludCB0aGF0IGxpZXMgb3V0c2lkZVxyXG5cdFx0XHRcdHJpdHRlclJhZGl1cyA9IChyaXR0ZXJSYWRpdXMgKyBvbGRDZW50ZXJUb1BvaW50KSAqIDAuNTtcclxuXHRcdFx0XHRyYWRpdXNTcXVhcmVkID0gcml0dGVyUmFkaXVzICogcml0dGVyUmFkaXVzO1xyXG5cdFx0XHRcdC8vIENhbGN1bGF0ZSBjZW50ZXIgb2YgbmV3IFJpdHRlciBzcGhlcmVcclxuXHRcdFx0XHRjb25zdCBvbGRUb05ldyA9IG9sZENlbnRlclRvUG9pbnQgLSByaXR0ZXJSYWRpdXM7XHJcblx0XHRcdFx0cml0dGVyQ2VudGVyLnggPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnggKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueCkgLyBvbGRDZW50ZXJUb1BvaW50O1xyXG5cdFx0XHRcdHJpdHRlckNlbnRlci55ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci55ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLnkpIC8gb2xkQ2VudGVyVG9Qb2ludDtcclxuXHRcdFx0XHRyaXR0ZXJDZW50ZXIueiA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueiArIG9sZFRvTmV3ICogY3VycmVudFBvcy56KSAvIG9sZENlbnRlclRvUG9pbnQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocml0dGVyUmFkaXVzIDwgbmFpdmVSYWRpdXMpIHtcclxuXHRcdFx0VmVjdG9yMy5jbG9uZShyaXR0ZXJDZW50ZXIsIHJlc3VsdC5jZW50ZXIpO1xyXG5cdFx0XHRyZXN1bHQucmFkaXVzID0gcml0dGVyUmFkaXVzO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0VmVjdG9yMy5jbG9uZShuYWl2ZUNlbnRlciwgcmVzdWx0LmNlbnRlcik7XHJcblx0XHRcdHJlc3VsdC5yYWRpdXMgPSBuYWl2ZVJhZGl1cztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0aW50ZXJzZWN0UGxhbmUocGxhbmU6IFBsYW5lKSB7XHJcblx0XHRjb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcclxuXHRcdGNvbnN0IHJhZGl1cyA9IHRoaXMucmFkaXVzO1xyXG5cdFx0Y29uc3Qgbm9ybWFsID0gcGxhbmUubm9ybWFsO1xyXG5cdFx0Y29uc3QgZGlzdGFuY2VUb1BsYW5lID0gVmVjdG9yMy5kb3Qobm9ybWFsLCBjZW50ZXIpICsgcGxhbmUuZGlzdGFuY2U7XHJcblxyXG5cdFx0aWYgKGRpc3RhbmNlVG9QbGFuZSA8IC1yYWRpdXMpIHtcclxuXHRcdFx0Ly8gVGhlIGNlbnRlciBwb2ludCBpcyBuZWdhdGl2ZSBzaWRlIG9mIHRoZSBwbGFuZSBub3JtYWxcclxuXHRcdFx0cmV0dXJuIEludGVyc2VjdC5PVVRTSURFO1xyXG5cdFx0fSBlbHNlIGlmIChkaXN0YW5jZVRvUGxhbmUgPCByYWRpdXMpIHtcclxuXHRcdFx0Ly8gVGhlIGNlbnRlciBwb2ludCBpcyBwb3NpdGl2ZSBzaWRlIG9mIHRoZSBwbGFuZSwgYnV0IHJhZGl1cyBleHRlbmRzIGJleW9uZCBpdDsgcGFydGlhbCBvdmVybGFwXHJcblx0XHRcdHJldHVybiBJbnRlcnNlY3QuSU5URVJTRUNUSU5HO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIEludGVyc2VjdC5JTlNJREU7XHJcblx0fVxyXG5cdHVwZGF0ZSh0cmFuc2Zvcm06IE1hdHJpeDQpIHtcclxuXHRcdE1hdHJpeDQubXVsdGlwbHlCeVBvaW50KHRyYW5zZm9ybSwgdGhpcy5vcmlnaW5DZW50ZXIsIHRoaXMuY2VudGVyKTtcclxuXHRcdHRoaXMucmFkaXVzID0gTWF0cml4NC5nZXRNYXhpbXVtU2NhbGUodHJhbnNmb3JtKSAqIHRoaXMub3JpZ2luUmFkaXVzO1xyXG5cdH1cclxuXHRkaXN0YW5jZVRvQ2FtZXJhKGNhbWVyYTogQ2FtZXJhKSB7XHJcblx0XHRyZXR1cm4gTWF0aC5tYXgoMC4wLCBWZWN0b3IzLmRpc3RhbmNlKHRoaXMuY2VudGVyLCBjYW1lcmEucG9zaXRpb24pIC0gdGhpcy5yYWRpdXMpO1xyXG5cdH1cclxufVxyXG5jb25zdCBmcm9tUG9pbnRzWE1pbiA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IGZyb21Qb2ludHNZTWluID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgZnJvbVBvaW50c1pNaW4gPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBmcm9tUG9pbnRzWE1heCA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IGZyb21Qb2ludHNZTWF4ID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgZnJvbVBvaW50c1pNYXggPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBmcm9tUG9pbnRzQ3VycmVudFBvcyA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IGZyb21Qb2ludHNTY3JhdGNoID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgZnJvbVBvaW50c1JpdHRlckNlbnRlciA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IGZyb21Qb2ludHNNaW5Cb3hQdCA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IGZyb21Qb2ludHNNYXhCb3hQdCA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IGZyb21Qb2ludHNOYWl2ZUNlbnRlclNjcmF0Y2ggPSBuZXcgVmVjdG9yMygpO1xyXG4iLCJpbXBvcnQgeyBJbnB1dFN0ZXBNb2RlIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcbmltcG9ydCBBdHRyaWJ1dGVzIGZyb20gXCIuL0F0dHJpYnV0ZXNcIjtcbmltcG9ydCBCdWZmZXIgZnJvbSBcIi4vQnVmZmVyXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJ0ZXh0QnVmZmVyIHtcblx0cHVibGljIGluZGV4OiBudW1iZXI7XG5cdHB1YmxpYyBhcnJheVN0cmlkZTogbnVtYmVyO1xuXHRwdWJsaWMgc3RlcE1vZGU6IHN0cmluZztcblx0cHVibGljIGJ1ZmZlcjogQnVmZmVyO1xuXHRwdWJsaWMgYXR0cmlidXRlczogQXR0cmlidXRlcztcblx0cHVibGljIGRpcnR5OiBCb29sZWFuO1xuXHRwcml2YXRlIGxhYmVsOiBzdHJpbmc7XG5cdGNvbnN0cnVjdG9yKGxhYmVsOiBzdHJpbmcsIGF0dHJpYnV0ZXM/OiBBdHRyaWJ1dGVzLCBpbmRleD86IG51bWJlciwgc3RlcE1vZGU/OiBzdHJpbmcpIHtcblx0XHR0aGlzLmluZGV4ID0gaW5kZXggfHwgMDtcblx0XHR0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzIHx8IHVuZGVmaW5lZDtcblx0XHR0aGlzLnN0ZXBNb2RlID0gSW5wdXRTdGVwTW9kZS5WZXJ0ZXg7XG5cdFx0dGhpcy5kaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5sYWJlbCA9IGxhYmVsO1xuXHR9XG5cdHB1YmxpYyBnZXRCdWZmZXJEZXMoKSB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdHtcblx0XHRcdFx0YXJyYXlTdHJpZGU6IHRoaXMuYXJyYXlTdHJpZGUsXG5cdFx0XHRcdHN0ZXBNb2RlOiB0aGlzLnN0ZXBNb2RlLFxuXHRcdFx0XHRhdHRyaWJ1dGVzOiB0aGlzLmF0dHJpYnV0ZXMuZ2V0R1BVQXR0cmlidXRlcygpXG5cdFx0XHR9XG5cdFx0XTtcblx0fVxuXHRwdWJsaWMgc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzOiBBdHRyaWJ1dGVzKSB7XG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcblx0XHR0aGlzLmRpcnR5ID0gdHJ1ZTtcblx0fVxuXHRwdWJsaWMgYmluZChkZXZpY2U6IEdQVURldmljZSwgcGFzc0VuY29kZXI6IEdQVVJlbmRlclBhc3NFbmNvZGVyKSB7XG5cdFx0aWYgKHRoaXMuZGlydHkpIHtcblx0XHRcdHRoaXMuZGlydHkgPSBmYWxzZTtcblx0XHRcdGNvbnN0IHsgYXJyYXlTdHJpZGUsIHR5cGVBcnJheSB9ID0gdGhpcy5hdHRyaWJ1dGVzLmdldE1lcmVnZUF0cnJpYnV0ZVZhbHVlcygpO1xuXHRcdFx0dGhpcy5hcnJheVN0cmlkZSA9XG5cdFx0XHRcdGFycmF5U3RyaWRlLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBpdGVtLCBpbmRleCwgYXJyKSB7XG5cdFx0XHRcdFx0cmV0dXJuIChzdW0gKz0gaXRlbSk7XG5cdFx0XHRcdH0sIDApICogdHlwZUFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xuXHRcdFx0dGhpcy5idWZmZXIgPSBCdWZmZXIuY3JlYXRlVmVydGV4QnVmZmVyKHRoaXMubGFiZWwsIGRldmljZSwgdHlwZUFycmF5KTtcblx0XHR9XG5cdFx0cGFzc0VuY29kZXIuc2V0VmVydGV4QnVmZmVyKHRoaXMuaW5kZXgsIHRoaXMuYnVmZmVyLmdwdUJ1ZmZlcik7XG5cdH1cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLmJ1ZmZlci5kZXN0cm95KCk7XG5cdH1cbn1cbiIsImltcG9ydCB7IEF0dHJpYnV0ZSB9IGZyb20gXCIuL0F0dHJpYnV0ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdHRyaWJ1dGVzIHtcclxuICBwcml2YXRlIF9hdHRyaWJ1dGVzOiBNYXA8c3RyaW5nLCBBdHRyaWJ1dGU+O1xyXG4gIHByaXZhdGUgc2hhZGVyTG9jYXRpb246IG51bWJlcjtcclxuICBwcml2YXRlIG9mZnNldDogbnVtYmVyO1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fYXR0cmlidXRlcyA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMuc2hhZGVyTG9jYXRpb24gPSAwO1xyXG4gICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gIH1cclxuICBnZXRBdHRyaWJ1dGUobmFtZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMuZ2V0KG5hbWUpO1xyXG4gIH1cclxuICBzZXRBdHRyaWJ1dGUoYXR0cmlidXRlOiBBdHRyaWJ1dGUpIHtcclxuICAgIGlmICh0aGlzLl9hdHRyaWJ1dGVzLmhhcyhhdHRyaWJ1dGUubmFtZSkpIHJldHVybjtcclxuICAgIGF0dHJpYnV0ZS5zaGFkZXJMb2NhdGlvbiA9IHRoaXMuc2hhZGVyTG9jYXRpb247XHJcbiAgICB0aGlzLnNoYWRlckxvY2F0aW9uICs9IDE7XHJcbiAgICBhdHRyaWJ1dGUub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICB0aGlzLm9mZnNldCArPSBhdHRyaWJ1dGUuYXR0cmlidXRlQnl0ZVNpemU7XHJcbiAgICB0aGlzLl9hdHRyaWJ1dGVzLnNldChhdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlKTtcclxuICB9XHJcbiAgZ2V0R1BVQXR0cmlidXRlcygpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgdGhpcy5fYXR0cmlidXRlcy5mb3JFYWNoKChhdHRyaWJ1dGUpID0+IHtcclxuICAgICAgcmVzdWx0LnB1c2goYXR0cmlidXRlLmdldEdQVUF0dHJpYnV0ZSgpKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgZ2V0TWVyZWdlQXRycmlidXRlVmFsdWVzKCk6IHtcclxuICAgIGFycmF5U3RyaWRlOiBBcnJheTxudW1iZXI+O1xyXG4gICAgdHlwZUFycmF5OiBGbG9hdDMyQXJyYXk7XHJcbiAgfSB7XHJcbiAgICBjb25zdCBhcnJheVN0cmlkZSA9IFtdO1xyXG4gICAgY29uc3QgYXJyYXlzID0gW107XHJcbiAgICB0aGlzLl9hdHRyaWJ1dGVzLmZvckVhY2goKGF0dHJpYnV0ZSkgPT4ge1xyXG4gICAgICBhcnJheVN0cmlkZS5wdXNoKGF0dHJpYnV0ZS5pdGVtU2l6ZSk7XHJcbiAgICAgIGFycmF5cy5wdXNoKGF0dHJpYnV0ZS52YWx1ZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGFycmF5U3RyaWRlLFxyXG4gICAgICB0eXBlQXJyYXk6IHRoaXMuaW50ZXJsZWF2ZVR5cGVkQXJyYXkoXHJcbiAgICAgICAgRmxvYXQzMkFycmF5LFxyXG4gICAgICAgIGFycmF5U3RyaWRlLFxyXG4gICAgICAgIC4uLmFycmF5c1xyXG4gICAgICApLFxyXG4gICAgfTtcclxuICB9XHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMuX2F0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XHJcbiAgICAgIGF0dHJpYnV0ZS5kZXN0cm95KCk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogSW50ZXJsZWF2ZSBuIHR5cGVkIGFycmF5c1xyXG4gICAqIEBhbGlhcyBtb2R1bGU6aW50ZXJsZWF2ZVR5cGVkQXJyYXlcclxuICAgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IFJlc3VsdENvbnN0cnVjdG9yIFJldHVybmVkIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHtBcnJheX0gZWxlbWVudHMgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIGdyb3VwIGZvciBlYWNoIHR5cGVkIGFycmF5XHJcbiAgICogQHBhcmFtIHsuLi5UeXBlZEFycmF5fSBhcnJheXMgQXJyYXlzIHRvIGludGVybGVhdmVcclxuICAgKiBAcmV0dXJucyB7VHlwZWRBcnJheX1cclxuICAgKi9cclxuICBpbnRlcmxlYXZlVHlwZWRBcnJheShSZXN1bHRDb25zdHJ1Y3RvciwgZWxlbWVudHMsIC4uLmFycmF5cykge1xyXG4gICAgY29uc3QgdG90YWxMZW5ndGggPSBhcnJheXMucmVkdWNlKCh0b3RhbCwgYXJyKSA9PiB0b3RhbCArIGFyci5sZW5ndGgsIDApO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFJlc3VsdENvbnN0cnVjdG9yKHRvdGFsTGVuZ3RoKTtcclxuICAgIGNvbnN0IHN0cmlkZSA9IGVsZW1lbnRzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxMZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgb2Zmc2V0ID0gMDtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBlbGVtZW50cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZWxlbWVudHNbal07IGsrKykge1xyXG4gICAgICAgICAgcmVzdWx0W2kgKiBzdHJpZGUgKyBvZmZzZXRdID0gYXJyYXlzW2pdW2VsZW1lbnRzW2pdICogaSArIGtdO1xyXG4gICAgICAgICAgb2Zmc2V0Kys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJbmRleEZvcm1hdCB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5pbXBvcnQgQnVmZmVyIGZyb20gXCIuL0J1ZmZlclwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5kZXhCdWZmZXIge1xuXHRidWZmZXI6IEJ1ZmZlcjtcblx0aW5kaWNlczogQXJyYXk8bnVtYmVyPjtcblx0aW5kZXhGb3JtYXQ6IEdQVUluZGV4Rm9ybWF0O1xuXHRkaXJ0eTogYm9vbGVhbjtcblx0cHJpdmF0ZSBsYWJlbDogc3RyaW5nO1xuXHRjb25zdHJ1Y3RvcihsYWJlbDogc3RyaW5nLCBpbmRpY2VzPzogQXJyYXk8bnVtYmVyPikge1xuXHRcdHRoaXMubGFiZWwgPSBsYWJlbDtcblx0XHR0aGlzLmluZGljZXMgPSBpbmRpY2VzO1xuXHRcdHRoaXMuaW5kZXhGb3JtYXQgPSBJbmRleEZvcm1hdC5VaW50MTY7XG5cdFx0dGhpcy5kaXJ0eSA9IHRydWU7XG5cdH1cblx0c2V0SW5kaWNlcyhpbmRpY2VzKSB7XG5cdFx0dGhpcy5pbmRpY2VzID0gaW5kaWNlcztcblx0XHR0aGlzLmRpcnR5ID0gdHJ1ZTtcblx0fVxuXHRiaW5kKGRldmljZTogR1BVRGV2aWNlLCBwYXNzRW5jb2RlcjogR1BVUmVuZGVyUGFzc0VuY29kZXIpIHtcblx0XHRpZiAodGhpcy5kaXJ0eSkge1xuXHRcdFx0dGhpcy5kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5idWZmZXIgPSBCdWZmZXIuY3JlYXRlSW5kZXhCdWZmZXIoXG5cdFx0XHRcdHRoaXMubGFiZWwsXG5cdFx0XHRcdGRldmljZSxcblx0XHRcdFx0dGhpcy5pbmRleEZvcm1hdCA9PSBJbmRleEZvcm1hdC5VaW50MTYgPyBuZXcgVWludDE2QXJyYXkodGhpcy5pbmRpY2VzKSA6IG5ldyBVaW50MzJBcnJheSh0aGlzLmluZGljZXMpXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRwYXNzRW5jb2Rlci5zZXRJbmRleEJ1ZmZlcih0aGlzLmJ1ZmZlci5ncHVCdWZmZXIsIHRoaXMuaW5kZXhGb3JtYXQpO1xuXHR9XG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5idWZmZXIuZGVzdHJveSgpO1xuXHR9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuL2RlZmF1bHRWYWx1ZVwiO1xyXG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi9kZWZpbmVkXCI7XHJcblxyXG4vKipcclxuICogTWVyZ2VzIHR3byBvYmplY3RzLCBjb3B5aW5nIHRoZWlyIHByb3BlcnRpZXMgb250byBhIG5ldyBjb21iaW5lZCBvYmplY3QuIFdoZW4gdHdvIG9iamVjdHMgaGF2ZSB0aGUgc2FtZVxyXG4gKiBwcm9wZXJ0eSwgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBvbiB0aGUgZmlyc3Qgb2JqZWN0IGlzIHVzZWQuICBJZiBlaXRoZXIgb2JqZWN0IGlzIHVuZGVmaW5lZCxcclxuICogaXQgd2lsbCBiZSB0cmVhdGVkIGFzIGFuIGVtcHR5IG9iamVjdC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogY29uc3Qgb2JqZWN0MSA9IHtcclxuICogICAgIHByb3BPbmUgOiAxLFxyXG4gKiAgICAgcHJvcFR3byA6IHtcclxuICogICAgICAgICB2YWx1ZTEgOiAxMFxyXG4gKiAgICAgfVxyXG4gKiB9XHJcbiAqIGNvbnN0IG9iamVjdDIgPSB7XHJcbiAqICAgICBwcm9wVHdvIDogMlxyXG4gKiB9XHJcbiAqIGNvbnN0IGZpbmFsID0gQ2VzaXVtLmNvbWJpbmUob2JqZWN0MSwgb2JqZWN0Mik7XHJcbiAqXHJcbiAqIC8vIGZpbmFsID09PSB7XHJcbiAqIC8vICAgICBwcm9wT25lIDogMSxcclxuICogLy8gICAgIHByb3BUd28gOiB7XHJcbiAqIC8vICAgICAgICAgdmFsdWUxIDogMTBcclxuICogLy8gICAgIH1cclxuICogLy8gfVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdDFdIFRoZSBmaXJzdCBvYmplY3QgdG8gbWVyZ2UuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0Ml0gVGhlIHNlY29uZCBvYmplY3QgdG8gbWVyZ2UuXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2RlZXA9ZmFsc2VdIFBlcmZvcm0gYSByZWN1cnNpdmUgbWVyZ2UuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjb21iaW5lZCBvYmplY3QgY29udGFpbmluZyBhbGwgcHJvcGVydGllcyBmcm9tIGJvdGggb2JqZWN0cy5cclxuICpcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21iaW5lKG9iamVjdDEsIG9iamVjdDIsIGRlZXApIHtcclxuICBkZWVwID0gZGVmYXVsdFZhbHVlKGRlZXAsIGZhbHNlKTtcclxuXHJcbiAgY29uc3QgcmVzdWx0ID0ge307XHJcblxyXG4gIGNvbnN0IG9iamVjdDFEZWZpbmVkID0gZGVmaW5lZChvYmplY3QxKTtcclxuICBjb25zdCBvYmplY3QyRGVmaW5lZCA9IGRlZmluZWQob2JqZWN0Mik7XHJcbiAgbGV0IHByb3BlcnR5O1xyXG4gIGxldCBvYmplY3QxVmFsdWU7XHJcbiAgbGV0IG9iamVjdDJWYWx1ZTtcclxuICBpZiAob2JqZWN0MURlZmluZWQpIHtcclxuICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0MSkge1xyXG4gICAgICBpZiAob2JqZWN0MS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICBvYmplY3QxVmFsdWUgPSBvYmplY3QxW3Byb3BlcnR5XTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBvYmplY3QyRGVmaW5lZCAmJlxyXG4gICAgICAgICAgZGVlcCAmJlxyXG4gICAgICAgICAgdHlwZW9mIG9iamVjdDFWYWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxyXG4gICAgICAgICAgb2JqZWN0Mi5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgIG9iamVjdDJWYWx1ZSA9IG9iamVjdDJbcHJvcGVydHldO1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3QyVmFsdWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgcmVzdWx0W3Byb3BlcnR5XSA9IGNvbWJpbmUob2JqZWN0MVZhbHVlLCBvYmplY3QyVmFsdWUsIGRlZXApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0W3Byb3BlcnR5XSA9IG9iamVjdDFWYWx1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzdWx0W3Byb3BlcnR5XSA9IG9iamVjdDFWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgaWYgKG9iamVjdDJEZWZpbmVkKSB7XHJcbiAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdDIpIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIG9iamVjdDIuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmXHJcbiAgICAgICAgIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgb2JqZWN0MlZhbHVlID0gb2JqZWN0Mltwcm9wZXJ0eV07XHJcbiAgICAgICAgcmVzdWx0W3Byb3BlcnR5XSA9IG9iamVjdDJWYWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmU7XHJcbiIsImltcG9ydCBCb3VuZGluZ1NwaGVyZSBmcm9tIFwiLi4vY29yZS9Cb3VuZGluZ1NwaGVyZVwiO1xyXG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgVmVydGV4dEJ1ZmZlciBmcm9tIFwiLi4vcmVuZGVyL1ZlcnRleHRCdWZmZXJcIjtcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xyXG5pbXBvcnQgVmVjdG9yNCBmcm9tIFwiLi4vbWF0aC9WZWN0b3I0XCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZSB9IGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlXCI7XHJcbmltcG9ydCBBdHRyaWJ1dGVzIGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlc1wiO1xyXG5pbXBvcnQgSW5kZXhCdWZmZXIgZnJvbSBcIi4uL3JlbmRlci9JbmRleEJ1ZmZlclwiO1xyXG5pbXBvcnQgY29tYmluZSBmcm9tIFwiLi4vdXRpbHMvY29tYmluZVwiO1xyXG5pbXBvcnQgeyBQcmltaXRpdmVUb3BvbG9neSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuaW1wb3J0IEJvdW5kaW5nQm94IGZyb20gXCIuLi9jb3JlL0JvdW5kaW5nQm94XCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdlb21ldHJ5IHtcclxuXHRub3JtYWxzOiBudW1iZXJbXTtcclxuXHR1dnM6IG51bWJlcltdO1xyXG5cdHBvc2l0aW9uczogbnVtYmVyW107XHJcblx0aW5kaWNlczogbnVtYmVyW107XHJcblx0dGFuZ2VudHM6IG51bWJlcltdO1xyXG5cdHR5cGU6IHN0cmluZztcclxuXHRkaXJ0eTogYm9vbGVhbjtcclxuXHRpbmRleEJ1ZmZlcj86IEluZGV4QnVmZmVyO1xyXG5cdHZlcnRCdWZmZXI6IFZlcnRleHRCdWZmZXI7XHJcblx0Y291bnQ6IG51bWJlcjtcclxuXHRib3VuZGluZ1NwaGVyZT86IEJvdW5kaW5nU3BoZXJlO1xyXG5cdGJvdW5kaW5nQm94PzogQm91bmRpbmdCb3g7XHJcblx0cHJpdmF0ZSBfZGVmaW5lczogeyBbcHJvcDogc3RyaW5nXTogYm9vbGVhbiB8IG51bWJlciB9O1xyXG5cdHByaXZhdGUgYXR0cmlidXRlczogQXR0cmlidXRlcztcclxuXHRwcml2YXRlIGxvY2F0aW9uSW5kZXg/OiBudW1iZXI7XHJcblx0ZGVmaW5lc0RpcnR5OiBib29sZWFuO1xyXG5cdHRvcG9sb2d5OiBQcmltaXRpdmVUb3BvbG9neTtcclxuXHRnZXQgZGVmaW5lcygpIHtcclxuXHRcdHJldHVybiB0aGlzLl9kZWZpbmVzO1xyXG5cdH1cclxuXHRzZXQgZGVmaW5lcyh2YWx1ZSkge1xyXG5cdFx0dGhpcy5kZWZpbmVzRGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5fZGVmaW5lcyA9IGNvbWJpbmUodmFsdWUsIHRoaXMuX2RlZmluZXMsIGZhbHNlKTtcclxuXHR9XHJcblx0Y29uc3RydWN0b3Iob3B0aW9ucz86IGFueSkge1xyXG5cdFx0dGhpcy50eXBlID0gb3B0aW9ucy50eXBlIHx8IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLmRpcnR5ID0gZmFsc2U7XHJcblx0XHR0aGlzLmRlZmluZXNEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLmxvY2F0aW9uSW5kZXggPSAwO1xyXG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0gbmV3IEF0dHJpYnV0ZXMoKTtcclxuXHRcdHRoaXMudmVydEJ1ZmZlciA9IG5ldyBWZXJ0ZXh0QnVmZmVyKHRoaXMudHlwZSwgdGhpcy5hdHRyaWJ1dGVzLCAwKTtcclxuXHRcdHRoaXMuX2RlZmluZXMgPSB7fTtcclxuXHRcdHRoaXMubm9ybWFscyA9IFtdO1xyXG5cdFx0dGhpcy51dnMgPSBbXTtcclxuXHRcdHRoaXMucG9zaXRpb25zID0gW107XHJcblx0XHR0aGlzLmluZGljZXMgPSBbXTtcclxuXHRcdHRoaXMudGFuZ2VudHMgPSBbXTtcclxuXHR9XHJcblx0Z2V0QXR0cmlidXRlKG5hbWU6IHN0cmluZykge1xyXG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXRBdHRyaWJ1dGUobmFtZSk7XHJcblx0fVxyXG5cdHNldEF0dHJpYnV0ZShhdHRyaWJ1dGU6IEF0dHJpYnV0ZSkge1xyXG5cdFx0aWYgKCF0aGlzLl9kZWZpbmVzW2F0dHJpYnV0ZT8ubmFtZT8uY29uY2F0KFwiTG9jYXRpb25cIildKSB7XHJcblx0XHRcdHRoaXMuX2RlZmluZXNbYXR0cmlidXRlPy5uYW1lPy5jb25jYXQoXCJMb2NhdGlvblwiKV0gPSB0aGlzLmxvY2F0aW9uSW5kZXg7XHJcblx0XHRcdHRoaXMubG9jYXRpb25JbmRleCArPSAxO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5hdHRyaWJ1dGVzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xyXG5cdH1cclxuXHRzZXRJbmRpY2UoaW5kaWNlczogQXJyYXk8bnVtYmVyPikge1xyXG5cdFx0dGhpcy5pbmRpY2VzID0gaW5kaWNlcztcclxuXHRcdGlmICghdGhpcy5pbmRleEJ1ZmZlcikgdGhpcy5pbmRleEJ1ZmZlciA9IG5ldyBJbmRleEJ1ZmZlcih0aGlzLnR5cGUgKyBcIkluZGV4QnVmZmVyXCIpO1xyXG5cdFx0dGhpcy5pbmRleEJ1ZmZlci5zZXRJbmRpY2VzKGluZGljZXMpO1xyXG5cdH1cclxuXHR1cGRhdGUoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSkge31cclxuXHRjb21wdXRlQm91bmRpbmdTcGhlcmUocG9zaXRpb25zKSB7XHJcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmUuZnJvbVZlcnRpY2VzKHRoaXMucG9zaXRpb25zLCBuZXcgVmVjdG9yMygwLCAwLCAwKSwgMyk7XHJcblx0fVxyXG5cdC8qKlxyXG5cdCAqIENhbGN1bGF0ZSBtZXNoIHRhbmdlbnQuXHJcblx0ICogQHJlbWFyayBuZWVkIHRvIHNldCBwb3NpdGlvbnMod2l0aCBvciBub3Qgd2l0aCBpbmRpY2VzKSwgbm9ybWFscywgdXYgYmVmb3JlIGNhbGN1bGF0aW9uLlxyXG5cdCAqIEByZW1hcmsgYmFzZWQgb24gaHR0cDovL2ZvdW5kYXRpb25zb2ZnYW1lZW5naW5lZGV2LmNvbS9GR0VEMi1zYW1wbGUucGRmXHJcblx0ICovXHJcblx0Y2FsY3VsYXRlVGFuZ2VudHMoKTogdm9pZCB7XHJcblx0XHRpZiAoIXRoaXMubm9ybWFscyB8fCAhdGhpcy51dnMpIHtcclxuXHRcdFx0dGhyb3cgXCJTZXQgbm9ybWFsIGFuZCB1diBiZWZvcmUgY2FsY3VsYXRpb24uXCI7XHJcblx0XHR9XHJcblx0XHRjb25zdCB7IGluZGljZXMsIHBvc2l0aW9ucywgbm9ybWFscywgdXZzIH0gPSB0aGlzO1xyXG5cdFx0Y29uc3QgdGVtcFBvczAgPSBuZXcgVmVjdG9yMygpLFxyXG5cdFx0XHR0ZW1wUG9zMSA9IG5ldyBWZWN0b3IzKCksXHJcblx0XHRcdHRlbXBQb3MyID0gbmV3IFZlY3RvcjMoKSxcclxuXHRcdFx0dGVtcFVWMCA9IG5ldyBWZWN0b3IyKCksXHJcblx0XHRcdHRlbXBVVjEgPSBuZXcgVmVjdG9yMigpLFxyXG5cdFx0XHR0ZW1wVVYyID0gbmV3IFZlY3RvcjIoKTtcclxuXHRcdGNvbnN0IGUxID0gbmV3IFZlY3RvcjMoKSxcclxuXHRcdFx0ZTIgPSBuZXcgVmVjdG9yMygpLFxyXG5cdFx0XHR0ID0gbmV3IFZlY3RvcjMoKSxcclxuXHRcdFx0YiA9IG5ldyBWZWN0b3IzKCksXHJcblx0XHRcdHRlbXAgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Y29uc3QgdmVydGV4Q291bnQgPSB0aGlzLmluZGljZXMubGVuZ3RoO1xyXG5cdFx0Y29uc3QgdHJpYW5nbGVDb3VudCA9IGluZGljZXMgPyBpbmRpY2VzLmxlbmd0aCAvIDMgOiBwb3NpdGlvbnMubGVuZ3RoIC8gMztcclxuXHRcdGNvbnN0IHRhbmdlbnRzID0gbmV3IEFycmF5PFZlY3RvcjQ+KHZlcnRleENvdW50KTtcclxuXHRcdGNvbnN0IGJpVGFuZ2VudHMgPSBuZXcgQXJyYXk8VmVjdG9yMz4odmVydGV4Q291bnQpO1xyXG5cdFx0dGhpcy50YW5nZW50cyA9IFtdO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgaSsrKSB7XHJcblx0XHRcdHRhbmdlbnRzW2ldID0gbmV3IFZlY3RvcjQoKTtcclxuXHRcdFx0YmlUYW5nZW50c1tpXSA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsY3VsYXRlIHRhbmdlbnQgYW5kIGJpLXRhbmdlbnQgZm9yIGVhY2ggdHJpYW5nbGUgYW5kIGFkZCB0byBhbGwgdGhyZWUgdmVydGljZXMuXHJcblx0XHRmb3IgKGxldCBrID0gMDsgayA8IHRyaWFuZ2xlQ291bnQ7IGsrKykge1xyXG5cdFx0XHRsZXQgaTAgPSAzICogaztcclxuXHRcdFx0bGV0IGkxID0gMyAqIGsgKyAxO1xyXG5cdFx0XHRsZXQgaTIgPSAzICogayArIDI7XHJcblx0XHRcdGlmIChpbmRpY2VzKSB7XHJcblx0XHRcdFx0aTAgPSBpbmRpY2VzW2kwXTtcclxuXHRcdFx0XHRpMSA9IGluZGljZXNbaTFdO1xyXG5cdFx0XHRcdGkyID0gaW5kaWNlc1tpMl07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IHAwID0gdGVtcFBvczAuc2V0KHBvc2l0aW9uc1tpMF0sIHBvc2l0aW9uc1tpMCArIDFdLCBwb3NpdGlvbnNbaTAgKyAyXSk7XHJcblx0XHRcdGNvbnN0IHAxID0gdGVtcFBvczEuc2V0KHBvc2l0aW9uc1tpMV0sIHBvc2l0aW9uc1tpMSArIDFdLCBwb3NpdGlvbnNbaTEgKyAyXSk7XHJcblx0XHRcdGNvbnN0IHAyID0gdGVtcFBvczIuc2V0KHBvc2l0aW9uc1tpMl0sIHBvc2l0aW9uc1tpMiArIDFdLCBwb3NpdGlvbnNbaTIgKyAyXSk7XHJcblx0XHRcdGNvbnN0IHcwID0gdGVtcFVWMC5zZXQodXZzW2kwXSwgdXZzW2kwICsgMV0pO1xyXG5cdFx0XHRjb25zdCB3MSA9IHRlbXBVVjEuc2V0KHV2c1tpMV0sIHV2c1tpMSArIDFdKTtcclxuXHRcdFx0Y29uc3QgdzIgPSB0ZW1wVVYyLnNldCh1dnNbaTJdLCB1dnNbaTIgKyAxXSk7XHJcblxyXG5cdFx0XHRWZWN0b3IzLnN1YnRyYWN0KHAxLCBwMCwgZTEpO1xyXG5cdFx0XHRWZWN0b3IzLnN1YnRyYWN0KHAyLCBwMCwgZTIpO1xyXG5cdFx0XHRjb25zdCB4MSA9IHcxLnggLSB3MC54O1xyXG5cdFx0XHRjb25zdCB4MiA9IHcyLnggLSB3MC54O1xyXG5cdFx0XHRjb25zdCB5MSA9IHcxLnkgLSB3MC55O1xyXG5cdFx0XHRjb25zdCB5MiA9IHcyLnkgLSB3MC55O1xyXG5cdFx0XHRjb25zdCByID0gMS4wIC8gKHgxICogeTIgLSB4MiAqIHkxKTtcclxuXHJcblx0XHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihlMSwgeTIgKiByLCB0KTtcclxuXHRcdFx0VmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGUyLCB5MSAqIHIsIHRlbXApO1xyXG5cdFx0XHRWZWN0b3IzLnN1YnRyYWN0KHQsIHRlbXAsIHQpO1xyXG5cdFx0XHRWZWN0b3IzLm11bHRpcGx5QnlTY2FsYXIoZTIsIHgxICogciwgYik7XHJcblx0XHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihlMSwgeDIgKiByLCB0ZW1wKTtcclxuXHRcdFx0VmVjdG9yMy5zdWJ0cmFjdChiLCB0ZW1wLCBiKTtcclxuXHJcblx0XHRcdGxldCB0YW5nZW50ID0gdGFuZ2VudHNbaTBdO1xyXG5cdFx0XHR0YW5nZW50LnNldCh0YW5nZW50LnggKyB0LngsIHRhbmdlbnQueSArIHQueSwgdGFuZ2VudC56ICsgdC56LCAxLjApO1xyXG5cclxuXHRcdFx0dGFuZ2VudCA9IHRhbmdlbnRzW2kxXTtcclxuXHRcdFx0dGFuZ2VudC5zZXQodGFuZ2VudC54ICsgdC54LCB0YW5nZW50LnkgKyB0LnksIHRhbmdlbnQueiArIHQueiwgMS4wKTtcclxuXHJcblx0XHRcdHRhbmdlbnQgPSB0YW5nZW50c1tpMl07XHJcblx0XHRcdHRhbmdlbnQuc2V0KHRhbmdlbnQueCArIHQueCwgdGFuZ2VudC55ICsgdC55LCB0YW5nZW50LnogKyB0LnosIDEuMCk7XHJcblx0XHRcdGJpVGFuZ2VudHNbaTBdLmFkZChiKTtcclxuXHRcdFx0YmlUYW5nZW50c1tpMV0uYWRkKGIpO1xyXG5cdFx0XHRiaVRhbmdlbnRzW2kyXS5hZGQoYik7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3J0aG9ub3JtYWxpemUgZWFjaCB0YW5nZW50IGFuZCBjYWxjdWxhdGUgdGhlIGhhbmRlZG5lc3MuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRleENvdW50OyBpKyspIHtcclxuXHRcdFx0Y29uc3QgbiA9IG5ldyBWZWN0b3IzKG5vcm1hbHNbMyAqIGldLCBub3JtYWxzWzMgKiBpICsgMV0sIG5vcm1hbHNbMyAqIGkgKyAyXSk7XHJcblx0XHRcdGNvbnN0IGIgPSBiaVRhbmdlbnRzW2ldO1xyXG5cdFx0XHRjb25zdCB0YW5nZW50ID0gdGFuZ2VudHNbaV07XHJcblx0XHRcdHQuc2V0KHRhbmdlbnQueCwgdGFuZ2VudC55LCB0YW5nZW50LnopO1xyXG5cclxuXHRcdFx0VmVjdG9yMy5jcm9zcyh0LCBiLCB0ZW1wKTtcclxuXHRcdFx0Y29uc3QgdyA9IFZlY3RvcjMuZG90KHRlbXAsIG4pID4gMC4wID8gMSA6IC0xO1xyXG5cdFx0XHRWZWN0b3IzLm11bHRpcGx5QnlTY2FsYXIobiwgVmVjdG9yMy5kb3QodCwgbiksIHRlbXApO1xyXG5cdFx0XHRWZWN0b3IzLnN1YnRyYWN0KHQsIHRlbXAsIHQpO1xyXG5cdFx0XHRWZWN0b3IzLm5vcm1hbGl6ZSh0LCB0KTtcclxuXHRcdFx0Ly8gdC5ub3JtYWxpemUoKTtcclxuXHRcdFx0dGFuZ2VudC5zZXQodC54LCB0LnksIHQueiwgdyk7XHJcblx0XHRcdHRoaXMudGFuZ2VudHMucHVzaCh0LngsIHQueSwgdC56LCB3KTtcclxuXHRcdH1cclxuXHRcdC8vIHRoaXMuc2V0VGFuZ2VudHModGFuZ2VudHMpO1xyXG5cdH1cclxuXHRkZXN0cm95KCkge1xyXG5cdFx0dGhpcz8uaW5kZXhCdWZmZXIuZGVzdHJveSgpO1xyXG5cdFx0dGhpcy52ZXJ0QnVmZmVyLmRlc3Ryb3koKTtcclxuXHRcdHRoaXMuYXR0cmlidXRlcy5kZXN0cm95KCk7XHJcblx0XHR0aGlzLm5vcm1hbHMgPSBudWxsO1xyXG5cdFx0dGhpcy51dnMgPSBudWxsO1xyXG5cdFx0dGhpcy5wb3NpdGlvbnMgPSBudWxsO1xyXG5cdFx0dGhpcy5pbmRpY2VzID0gbnVsbDtcclxuXHRcdHRoaXMudGFuZ2VudHMgPSBudWxsO1xyXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IHVuZGVmaW5lZDtcclxuXHR9XHJcbn1cclxuIiwiY29uc3QgcHJlcHJvY2Vzc29yU3ltYm9scyA9IC8jKFteXFxzXSopKFxccyopL2dtO1xyXG4vLyBUZW1wbGF0ZSBsaXRlcmFsIHRhZyB0aGF0IGhhbmRsZXMgc2ltcGxlIHByZXByb2Nlc3NvciBzeW1ib2xzIGZvciBXR1NMXHJcbi8vIHNoYWRlcnMuIFN1cHBvcnRzICNpZi9lbGlmL2Vsc2UvZW5kaWYgc3RhdGVtZW50cy5cclxuZXhwb3J0IGZ1bmN0aW9uIHdnc2xQYXJzZURlZmluZXMoc3RyaW5ncywgLi4udmFsdWVzKSB7XHJcblx0Y29uc3Qgc3RhdGVTdGFjayA9IFtdO1xyXG5cdGxldCBzdGF0ZSA9IHsgZnJhZzogXCJcIiwgZWxzZUlzVmFsaWQ6IGZhbHNlLCBleHByZXNzaW9uOiB0cnVlIH07XHJcblx0bGV0IGRlcHRoID0gMTtcclxuXHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgKytpKSB7XHJcblx0XHRjb25zdCBmcmFnID0gc3RyaW5nc1tpXTtcclxuXHRcdGNvbnN0IG1hdGNoZWRTeW1ib2xzID0gZnJhZy5tYXRjaEFsbChwcmVwcm9jZXNzb3JTeW1ib2xzKTtcclxuXHJcblx0XHRsZXQgbGFzdEluZGV4ID0gMDtcclxuXHRcdGxldCB2YWx1ZUNvbnN1bWVkID0gZmFsc2U7XHJcblxyXG5cdFx0Zm9yIChjb25zdCBtYXRjaCBvZiBtYXRjaGVkU3ltYm9scykge1xyXG5cdFx0XHRzdGF0ZS5mcmFnICs9IGZyYWcuc3Vic3RyaW5nKGxhc3RJbmRleCwgbWF0Y2guaW5kZXgpO1xyXG5cclxuXHRcdFx0c3dpdGNoIChtYXRjaFsxXSkge1xyXG5cdFx0XHRcdGNhc2UgXCJpZlwiOlxyXG5cdFx0XHRcdFx0aWYgKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoICE9IGZyYWcubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIiNpZiBtdXN0IGJlIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IGEgdGVtcGxhdGUgZXhwcmVzc2lvbiAoaWU6ICR7dmFsdWV9KVwiKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHZhbHVlQ29uc3VtZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0c3RhdGVTdGFjay5wdXNoKHN0YXRlKTtcclxuXHRcdFx0XHRcdGRlcHRoKys7XHJcblx0XHRcdFx0XHRzdGF0ZSA9IHsgZnJhZzogXCJcIiwgZWxzZUlzVmFsaWQ6IHRydWUsIGV4cHJlc3Npb246ICEhdmFsdWVzW2ldIH07XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFwiZWxpZlwiOlxyXG5cdFx0XHRcdFx0aWYgKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoICE9IGZyYWcubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIiNlbGlmIG11c3QgYmUgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgYSB0ZW1wbGF0ZSBleHByZXNzaW9uIChpZTogJHt2YWx1ZX0pXCIpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIXN0YXRlLmVsc2VJc1ZhbGlkKSB7XHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIiNlbGlmIG5vdCBwcmVjZWVkZWQgYnkgYW4gI2lmIG9yICNlbGlmXCIpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHZhbHVlQ29uc3VtZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0aWYgKHN0YXRlLmV4cHJlc3Npb24gJiYgc3RhdGVTdGFjay5sZW5ndGggIT0gZGVwdGgpIHtcclxuXHRcdFx0XHRcdFx0c3RhdGVTdGFjay5wdXNoKHN0YXRlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHN0YXRlID0geyBmcmFnOiBcIlwiLCBlbHNlSXNWYWxpZDogdHJ1ZSwgZXhwcmVzc2lvbjogISF2YWx1ZXNbaV0gfTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJlbHNlXCI6XHJcblx0XHRcdFx0XHRpZiAoIXN0YXRlLmVsc2VJc1ZhbGlkKSB7XHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIiNlbHNlIG5vdCBwcmVjZWVkZWQgYnkgYW4gI2lmIG9yICNlbGlmXCIpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChzdGF0ZS5leHByZXNzaW9uICYmIHN0YXRlU3RhY2subGVuZ3RoICE9IGRlcHRoKSB7XHJcblx0XHRcdFx0XHRcdHN0YXRlU3RhY2sucHVzaChzdGF0ZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRzdGF0ZSA9IHsgZnJhZzogbWF0Y2hbMl0sIGVsc2VJc1ZhbGlkOiBmYWxzZSwgZXhwcmVzc2lvbjogdHJ1ZSB9O1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcImVuZGlmXCI6XHJcblx0XHRcdFx0XHRpZiAoIXN0YXRlU3RhY2subGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIiNlbmRpZiBub3QgcHJlY2VlZGVkIGJ5IGFuICNpZlwiKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRjb25zdCBicmFuY2hTdGF0ZSA9IHN0YXRlU3RhY2subGVuZ3RoID09IGRlcHRoID8gc3RhdGVTdGFjay5wb3AoKSA6IHN0YXRlO1xyXG5cdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0YWNrLnBvcCgpO1xyXG5cdFx0XHRcdFx0ZGVwdGgtLTtcclxuXHRcdFx0XHRcdGlmIChicmFuY2hTdGF0ZS5leHByZXNzaW9uKSB7XHJcblx0XHRcdFx0XHRcdHN0YXRlLmZyYWcgKz0gYnJhbmNoU3RhdGUuZnJhZztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHN0YXRlLmZyYWcgKz0gbWF0Y2hbMl07XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0Ly8gVW5rbm93biBwcmVwcm9jZXNzb3Igc3ltYm9sLiBFbWl0IGl0IGJhY2sgaW50byB0aGUgb3V0cHV0IGZyYWcgdW5jaGFuZ2VkLlxyXG5cdFx0XHRcdFx0c3RhdGUuZnJhZyArPSBtYXRjaFswXTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB0aGUgZnJhZyBkaWRuJ3QgZW5kIG9uIG9uZSBvZiB0aGUgcHJlcHJvY2Vzc29yIHN5bWJvbHMgYXBwZW5kIHRoZSByZXN0IG9mIGl0IGhlcmUuXHJcblx0XHRpZiAobGFzdEluZGV4ICE9IGZyYWcubGVuZ3RoKSB7XHJcblx0XHRcdHN0YXRlLmZyYWcgKz0gZnJhZy5zdWJzdHJpbmcobGFzdEluZGV4LCBmcmFnLmxlbmd0aCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWYgdGhlIG5leHQgdmFsdWUgd2Fzbid0IGNvbnN1bWVkIGJ5IHRoZSBwcmVwcm9jZXNzb3Igc3ltYm9sLCBhcHBlbmQgaXQgaGVyZS5cclxuXHRcdGlmICghdmFsdWVDb25zdW1lZCAmJiB2YWx1ZXMubGVuZ3RoID4gaSkge1xyXG5cdFx0XHRzdGF0ZS5mcmFnICs9IHZhbHVlc1tpXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmIChzdGF0ZVN0YWNrLmxlbmd0aCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiTWlzbWF0Y2hlZCAjaWYvI2VuZGlmIGNvdW50XCIpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHN0YXRlLmZyYWc7XHJcbn1cclxuIiwiaW1wb3J0IHsgd2dzbFBhcnNlRGVmaW5lcyB9IGZyb20gXCIuLi8uLi9XZ3NsUHJlcHJvY2Vzc29yXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpZ2h0KGRlZmluZXMpIHtcclxuXHRyZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2AgXHJcbiAgICBzdHJ1Y3QgUmVmbGVjdGVkTGlnaHQge1xyXG4gICAgICAgIGFtYmllbnQ6IHZlYzM8ZjMyPixcclxuICAgICAgICBkaXJlY3REaWZmdXNlOnZlYzM8ZjMyPixcclxuICAgICAgICBkaXJlY3RTcGVjdWxhcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgaW5kaXJlY3REaWZmdXNlOnZlYzM8ZjMyPixcclxuICAgICAgICBpbmRpcmVjdFNwZWN1bGFyOnZlYzM8ZjMyPixcclxuICAgIH07IFxyXG4gICAgc3RydWN0IEluY2lkZW50TGlnaHQge1xyXG4gICAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgZGlyZWN0aW9uOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgdmlzaWJsZTogYm9vbCxcclxuICAgIH07XHJcbiAgICBzdHJ1Y3QgR2VvbWV0cnkge1xyXG4gICAgICAgIHBvc2l0aW9uOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgbm9ybWFsOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgdmlld0RpcjogdmVjMzxmMzI+LFxyXG4gICAgICAgIGRvdE5WOmYzMixcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVR9XHJcbiAgICAgICAgICAgIHZlYzMgY2xlYXJjb2F0Tm9ybWFsO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgfTtcclxuXHJcbiAgICAjaWYgJHtkZWZpbmVzLnNwb3RMaWdodHNDb3VudCA+IDB9XHJcbiAgICAgICAgc3RydWN0IFNwb3RMaWdodCB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgIGRpc3RhbmNlOiBmMzIsXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogdmVjMzxmMzI+LFxyXG4gICAgICAgICAgICBjb25lQ29zOiBmMzIsXHJcbiAgICAgICAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgIHBlbnVtYnJhQ29zOiBmMzIsXHJcbiAgICAgICAgICAgIGRlY2F5OiBmMzIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmbiBnZXRTcG90TGlnaHRJbmZvKHNwb3RMaWdodDpTcG90TGlnaHQsd29ybGRQb3M6dmVjMzxmMzI+LHNoaW5pbmVzczpmMzIsTjp2ZWMzPGYzMj4sVjp2ZWMzPGYzMj4pLT5SZWZsZWN0ZWRMaWdodHtcclxuICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb246dmVjMzxmMzI+ID0gc3BvdExpZ2h0LnBvc2l0aW9uIC0gd29ybGRQb3M7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlnaHRDb2xvcjpSZWZsZWN0ZWRMaWdodDtcclxuICAgICAgICAgICAgICAgIGxldCBsaWdodERpc3RhbmNlOmYzMiA9IGxlbmd0aChkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gbm9ybWFsaXplKGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBsZXQgYW5nbGVDb3M6ZjMyID0gZG90KCBkaXJlY3Rpb24sIHNwb3RMaWdodC5kaXJlY3Rpb24gKTtcclxuICAgICAgICAgICAgICAgIGxldCBkZWNheTpmMzIgPSBjbGFtcCgxLjAgLSBwb3cobGlnaHREaXN0YW5jZS9zcG90TGlnaHQuZGlzdGFuY2UsIHNwb3RMaWdodC5kZWNheSksIDAuMCwgMS4wKTtcclxuICAgICAgICAgICAgICAgIGxldCBzcG90RWZmZWN0OmYzMiA9IHNtb290aHN0ZXAoIHNwb3RMaWdodC5wZW51bWJyYUNvcywgc3BvdExpZ2h0LmNvbmVDb3MsIGFuZ2xlQ29zICk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGVjYXlUb3RhbDpmMzIgPSBkZWNheSAqIHNwb3RFZmZlY3Q7XHJcbiAgICAgICAgICAgICAgICBsZXQgZDpmMzIgPSBtYXgoIGRvdCggTiwgZGlyZWN0aW9uICksIDAuMCApICAqIGRlY2F5VG90YWw7XHJcbiAgICAgICAgICAgICAgICBsaWdodENvbG9yLmRpcmVjdERpZmZ1c2U9IHNwb3RMaWdodC5jb2xvciAqIGQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgaGFsZkRpcjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIFYgKyBkaXJlY3Rpb24gKTtcclxuICAgICAgICAgICAgICAgIGxldCBzOmYzMiA9IHBvdyggY2xhbXAoIGRvdCggTiwgaGFsZkRpciApLCAwLjAsIDEuMCApLCBzaGluaW5lc3MgKSAqIGRlY2F5VG90YWw7XHJcbiAgICAgICAgICAgICAgICBsaWdodENvbG9yLmRpcmVjdFNwZWN1bGFyPSBzcG90TGlnaHQuY29sb3IgKiBzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpZ2h0Q29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIGdldFNwb3RMaWdodEluY2lkZW50TGlnaHQoc3BvdExpZ2h0OlNwb3RMaWdodCwgZ2VvbWV0cnk6R2VvbWV0cnkpLT5JbmNpZGVudExpZ2h0IHtcclxuICAgICAgICAgICAgdmFyIGluY2lkZW50TGlnaHQ6SW5jaWRlbnRMaWdodDtcclxuICAgICAgICAgICAgbGV0IGxWZWN0b3I6dmVjMzxmMzI+ID0gc3BvdExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnkucG9zaXRpb247XHJcbiAgICAgICAgICAgIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XHJcbiAgICBcclxuICAgICAgICAgICAgbGV0IGxpZ2h0RGlzdGFuY2U6ZjMyID0gbGVuZ3RoKCBsVmVjdG9yICk7XHJcbiAgICAgICAgICAgIGxldCBhbmdsZUNvczpmMzIgPSBkb3QoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uLCBzcG90TGlnaHQuZGlyZWN0aW9uICk7XHJcbiAgICBcclxuICAgICAgICAgICAgbGV0IHNwb3RFZmZlY3Q6ZjMyID0gc21vb3Roc3RlcCggc3BvdExpZ2h0LnBlbnVtYnJhQ29zLCBzcG90TGlnaHQuY29uZUNvcywgYW5nbGVDb3MgKTtcclxuICAgICAgICAgICAgbGV0IGRlY2F5RWZmZWN0OmYzMiA9IGNsYW1wKDEuMCAtIHBvdyhsaWdodERpc3RhbmNlL3Nwb3RMaWdodC5kaXN0YW5jZSwgNC4wKSwgMC4wLCAxLjApO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGluY2lkZW50TGlnaHQuY29sb3I9c3BvdExpZ2h0LmNvbG9yKnNwb3RFZmZlY3QgKiBkZWNheUVmZmVjdDsgXHJcbiAgICAgICAgICAgIHJldHVybiAgaW5jaWRlbnRMaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgI2VuZGlmIFxyXG5cclxuICAgICNpZiAke2RlZmluZXMucG9pbnRMaWdodHNDb3VudCA+IDB9XHJcbiAgICAgICAgc3RydWN0IFBvaW50TGlnaHQge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogdmVjMzxmMzI+LFxyXG4gICAgICAgICAgICBkaXN0YW5jZTogZjMyLFxyXG4gICAgICAgICAgICBjb2xvcjogdmVjMzxmMzI+LFxyXG4gICAgICAgICAgICBkZWNheTogZjMyLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm4gZ2V0UG9pbnRMaWdodEluZm8ocG9pbnRMaWdodDpQb2ludExpZ2h0LHdvcmxkUG9zOnZlYzM8ZjMyPixzaGluaW5lc3M6ZjMyLE46dmVjMzxmMzI+LFY6dmVjMzxmMzI+KS0+UmVmbGVjdGVkTGlnaHR7XHJcbiAgICAgICAgICAgIHZhciBsaWdodENvbG9yOlJlZmxlY3RlZExpZ2h0O1xyXG4gICAgICAgICAgICB2YXIgZGlyZWN0aW9uOnZlYzM8ZjMyPiA9IHdvcmxkUG9zIC0gcG9pbnRMaWdodC5wb3NpdGlvbjtcclxuICAgICAgICAgICAgbGV0IGRpc3Q6ZjMyID0gbGVuZ3RoKCBkaXJlY3Rpb24gKTtcclxuICAgICAgICAgICAgZGlyZWN0aW9uID0gbm9ybWFsaXplKGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIGxldCBkZWNheSA9IGNsYW1wKDEuMCAtIHBvdyhkaXN0IC8gcG9pbnRMaWdodC5kaXN0YW5jZSwgcG9pbnRMaWdodC5kZWNheSksIDAuMCwgMS4wKTtcclxuICAgIFxyXG4gICAgICAgICAgICBsZXQgZCA9ICBtYXgoIGRvdCggTiwgLWRpcmVjdGlvbiApLCAwLjAgKSAqIGRlY2F5O1xyXG4gICAgICAgICAgICBsaWdodENvbG9yLmRpcmVjdERpZmZ1c2UgPSBwb2ludExpZ2h0LmNvbG9yICogZDtcclxuICAgIFxyXG4gICAgICAgICAgICBsZXQgaGFsZkRpcjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIFYgLSBkaXJlY3Rpb24gKTtcclxuICAgICAgICAgICAgbGV0IHM6ZjMyID0gcG93KCBjbGFtcCggZG90KCBOLCBoYWxmRGlyICksIDAuMCwgMS4wICksIHNoaW5pbmVzcyApICAqIGRlY2F5O1xyXG4gICAgICAgICAgICBsaWdodENvbG9yLmRpcmVjdFNwZWN1bGFyID0gcG9pbnRMaWdodC5jb2xvciAqIHM7XHJcbiAgICAgICAgICAgIHJldHVybiBsaWdodENvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBnZXRQb2ludExpZ2h0SW5jaWRlbnRMaWdodChwb2ludExpZ2h0OlBvaW50TGlnaHQsIGdlb21ldHJ5Okdlb21ldHJ5KS0+SW5jaWRlbnRMaWdodCB7XHJcbiAgICAgICAgICAgIHZhciBpbmNpZGVudExpZ2h0OkluY2lkZW50TGlnaHQ7XHJcbiAgICAgICAgICAgIGxldCBsVmVjdG9yOnZlYzM8ZjMyPiA9IHBvaW50TGlnaHQucG9zaXRpb24tZ2VvbWV0cnkucG9zaXRpb247XHJcbiAgICAgICAgICAgIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcclxuICAgICAgICAgICAgbGV0IGxpZ2h0RGlzdGFuY2U6ZjMyID0gbGVuZ3RoKCBsVmVjdG9yICk7XHJcbiAgICAgICAgICAgIC8vIGxldCB3ZWlnaHQ6ZjMyPTEuMCAtIHBvdyhsaWdodERpc3RhbmNlL3BvaW50TGlnaHQuZGlzdGFuY2UsIDQuMCk7XHJcbiAgICAgICAgICAgIGluY2lkZW50TGlnaHQuY29sb3I9cG9pbnRMaWdodC5jb2xvcipjbGFtcCgxLjAgLSBwb3cobGlnaHREaXN0YW5jZS9wb2ludExpZ2h0LmRpc3RhbmNlLCA0LjApLCAwLjAsIDEuMCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmNpZGVudExpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICNlbmRpZlxyXG4gICAgI2lmICR7ZGVmaW5lcy5kaXJ0ZWN0TGlnaHRzQ291bnQgPiAwfVxyXG4gICAgICAgIHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0IHtcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmbiBnZXREaXJlY3RMaWdodEluZm8oZGlyZWN0aW9uYWxMaWdodDpEaXJlY3Rpb25hbExpZ2h0LHNoaW5pbmVzczpmMzIsTjp2ZWMzPGYzMj4sVjp2ZWMzPGYzMj4pLT5SZWZsZWN0ZWRMaWdodHtcclxuICAgICAgICAgICAgdmFyIGxpZ2h0Q29sb3I6UmVmbGVjdGVkTGlnaHQ7XHJcbiAgICAgICAgICAgIGxldCBkOmYzMiA9IG1heChkb3QoTiwgLWRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uKSwgMC4wKTtcclxuICAgICAgICAgICAgbGlnaHRDb2xvci5kaXJlY3REaWZmdXNlICs9IGRpcmVjdGlvbmFsTGlnaHQuY29sb3IgKiBkO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGxldCBoYWxmRGlyOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggViAtIGRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uICk7XHJcbiAgICAgICAgICAgIGxldCBzOmYzMiA9IHBvdyggY2xhbXAoIGRvdCggTiwgaGFsZkRpciApLCAwLjAsIDEuMCApLCBzaGluaW5lc3MgKTtcclxuICAgICAgICAgICAgbGlnaHRDb2xvci5kaXJlY3RTcGVjdWxhciArPSBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yICogcztcclxuICAgICAgICAgICAgcmV0dXJuIGxpZ2h0Q29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJbmNpZGVudExpZ2h0KGRpcmVjdGlvbmFsTGlnaHQ6RGlyZWN0aW9uYWxMaWdodCxnZW9tZXRyeTpHZW9tZXRyeSktPkluY2lkZW50TGlnaHQge1xyXG4gICAgICAgICAgICB2YXIgaW5jaWRlbnRMaWdodDpJbmNpZGVudExpZ2h0O1xyXG4gICAgICAgICAgICBpbmNpZGVudExpZ2h0LmNvbG9yID0gZGlyZWN0aW9uYWxMaWdodC5jb2xvcjtcclxuICAgICAgICAgICAgaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICByZXR1cm4gaW5jaWRlbnRMaWdodDsgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAjZW5kaWZcclxuXHJcbiAgICAjaWYgJHtkZWZpbmVzLm9wZW5TaGFkb3d9IFxyXG4gICAgICAgIHN0cnVjdCBMaWdodEluZm8ge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb246IHZlYzM8ZjMyPixcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZuIGxpbmVhcml6ZURlcHRoKGRlcHRoOiBmMzIsIG5lYXI6IGYzMiwgZmFyOiBmMzIpLT5mMzIge1xyXG4gICAgICAgICAgICByZXR1cm4gMiAqIChuZWFyICogZmFyKSAvIChmYXIgKyBuZWFyIC0gZGVwdGggKiAoZmFyIC0gbmVhcikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm4gZ2V0U2hhZG93VmFsdWUoc2hhZG93TWFwQXJyYXk6dGV4dHVyZV9kZXB0aF8yZF9hcnJheSwgc2hhZG93U2FtcGxlcjpzYW1wbGVyX2NvbXBhcmlzb24sIGxpZ2h0UG9zOnZlYzQ8ZjMyPiwgZ2VvbWV0cnk6R2VvbWV0cnksIGxpZ2h0SW5mbzpMaWdodEluZm8sIGluZGV4OnUzMiwgaXNQZXJzcGVjdGl2ZUNhbWVyYTogYm9vbCwgbmVhcjogZjMyLCBmYXI6IGYzMiktPmYzMiB7XHJcbiAgICAgICAgICAgIHZhciB2aXNpYmlsaXR5ID0gMC4wO1xyXG4gICAgICAgICAgICB2YXIgcHJvamVjdFBvczogdmVjMzxmMzI+ID0gbGlnaHRQb3MueHl6IC8gbGlnaHRQb3MudztcclxuICAgICAgICAgICAgdmFyIHNoYWRvd1BvczogdmVjMzxmMzI+ID0gdmVjMyhwcm9qZWN0UG9zLnh5ICogdmVjMigwLjUsIC0wLjUpICsgdmVjMigwLjUpLCBwcm9qZWN0UG9zLnopO1xyXG4gICAgICAgICAgICB2YXIgZDpmMzIgPSBkb3QoZ2VvbWV0cnkubm9ybWFsLCAtbGlnaHRJbmZvLmRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIHZhciBiaWFzID0gbWF4KDAuMDEyICogKDEuMCAtIGQpLCAwLjAwMSkgLyBsaWdodFBvcy53O1xyXG4gICAgICAgICAgICBsZXQgb25lT3ZlclNoYWRvd0RlcHRoVGV4dHVyZVNpemUgPSAxLjAgLyAxMDI0LjA7XHJcbiAgICAgICAgICAgIC8vIHZhciBkZXB0aCA9IHNlbGVjdChzaGFkb3dQb3MueiwgKGxpbmVhcml6ZURlcHRoKHNoYWRvd1Bvcy56LCBuZWFyLCBmYXIpIC0gbmVhcikgLyAoZmFyLSBuZWFyKSwgaXNQZXJzcGVjdGl2ZUNhbWVyYSk7XHJcbiAgICAgICAgICAgIHZhciBkZXB0aCA9IHNoYWRvd1Bvcy56O1xyXG4gICAgICAgICAgICBmb3IgKHZhciB5ID0gLTE7IHkgPD0gMTsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gLTE7IHggPD0gMTsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IHZlYzI8ZjMyPih2ZWMyKHgsIHkpKSAqIG9uZU92ZXJTaGFkb3dEZXB0aFRleHR1cmVTaXplO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eSArPSB0ZXh0dXJlU2FtcGxlQ29tcGFyZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93TWFwQXJyYXksIHNoYWRvd1NhbXBsZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvd1Bvcy54eSArIG9mZnNldCwgaW5kZXgsIGRlcHRoIC0gYmlhcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmlzaWJpbGl0eSAvPSA5LjA7XHJcbiAgICAgICAgICAgIHZhciBpbkZydXN0dW0gPSBzaGFkb3dQb3MueCA+PSAwLjAgJiYgc2hhZG93UG9zLnggPD0gMS4wICYmIHNoYWRvd1Bvcy55ID49IDAuMCAmJiBzaGFkb3dQb3MueSA8PSAxLjA7XHJcbiAgICAgICAgICAgIGlmICghaW5GcnVzdHVtIHx8IGRlcHRoID4gMS4wKSB7XHJcbiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5ID0gMS4wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICNlbmRpZlxyXG5cclxuICAgICNpZiAke1xyXG5cdFx0ZGVmaW5lcy5hbWJpZW50TGlnaHRDb3VudCB8fCBkZWZpbmVzLnNwb3RMaWdodHNDb3VudCB8fCBkZWZpbmVzLnBvaW50TGlnaHRzQ291bnQgfHwgZGVmaW5lcy5kaXJ0ZWN0TGlnaHRzQ291bnRcclxuXHR9XHJcbiAgICAgICAgc3RydWN0IExpZ2h0VW5pZm9ybXN7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuYW1iaWVudExpZ2h0Q291bnR9XHJcbiAgICAgICAgICAgICAgICBhbWJpZW50OnZlYzQ8ZjMyPixcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuc3BvdExpZ2h0c0NvdW50fVxyXG4gICAgICAgICAgICAgICAgc3BvdExpZ2h0czphcnJheTxTcG90TGlnaHQsJHtkZWZpbmVzLnNwb3RMaWdodHNDb3VudH0+LFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5wb2ludExpZ2h0c0NvdW50fVxyXG4gICAgICAgICAgICAgICAgcG9pbnRMaWdodHM6YXJyYXk8UG9pbnRMaWdodCwke2RlZmluZXMucG9pbnRMaWdodHNDb3VudH0+LFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5kaXJ0ZWN0TGlnaHRzQ291bnR9XHJcbiAgICAgICAgICAgICAgICBkaXJ0ZWN0TGlnaHRzOmFycmF5PERpcmVjdGlvbmFsTGlnaHQsJHtkZWZpbmVzLmRpcnRlY3RMaWdodHNDb3VudH0+LFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICB9XHJcbiAgICAgICAgQGdyb3VwKDIpIEBiaW5kaW5nKCR7ZGVmaW5lcy5saWdodEJpbmRpbmd9KSB2YXI8c3RvcmFnZSwgcmVhZD4gbGlnaHRVbmlmb3JtczogTGlnaHRVbmlmb3JtcztcclxuXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5vcGVuU2hhZG93fVxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLnNwb3RMaWdodFNoYWRvd01hcHNDb3VudH1cclxuICAgICAgICAgICAgICAgIHN0cnVjdCBTcG90TGlnaHRTaGFkb3cge1xyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NhbWVyYVZQTWF0cml4QXJyYXk6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NhbWVyYU5lYXI6IGYzMixcclxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDYW1lcmFGYXI6IGYzMlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5wb2ludExpZ2h0U2hhZG93TWFwc0NvdW50fVxyXG4gICAgICAgICAgICAgICAgc3RydWN0IFBvaW50TGlnaHRTaGFkb3cge1xyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NhbWVyYVZQTWF0cml4QXJyYXk6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NhbWVyYU5lYXI6IGYzMixcclxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDYW1lcmFGYXI6IGYzMlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5kaXJlY3RMaWdodFNoYWRvd01hcHNDb3VudH1cclxuICAgICAgICAgICAgICAgIHN0cnVjdCBEaXJlY3RMaWdodFNoYWRvdyB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q2FtZXJhVlBNYXRyaXhBcnJheTogbWF0NHg0PGYzMj4sXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICBzdHJ1Y3QgU2hhZG93VW5pZm9ybXN7XHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLnNwb3RMaWdodFNoYWRvd01hcHNDb3VudH1cclxuICAgICAgICAgICAgICAgICAgICBzcG90TGlnaHRTaGFkb3dzOmFycmF5PFNwb3RMaWdodFNoYWRvdywke2RlZmluZXMuc3BvdExpZ2h0U2hhZG93TWFwc0NvdW50fT4sXHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMucG9pbnRMaWdodFNoYWRvd01hcHNDb3VudH1cclxuICAgICAgICAgICAgICAgICAgICBwb2ludExpZ2h0U2hhZG93czphcnJheTxQb2ludExpZ2h0U2hhZG93LCR7ZGVmaW5lcy5wb2ludExpZ2h0U2hhZG93TWFwc0NvdW50fT4sXHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuZGlyZWN0TGlnaHRTaGFkb3dNYXBzQ291bnR9XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0TGlnaHRTaGFkb3dzOmFycmF5PERpcmVjdExpZ2h0U2hhZG93LCR7ZGVmaW5lcy5kaXJlY3RMaWdodFNoYWRvd01hcHNDb3VudH0+LFxyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQGdyb3VwKDIpIEBiaW5kaW5nKCR7ZGVmaW5lcy5zaGFkb3dCaW5kaW5nfSkgdmFyPHN0b3JhZ2UsIHJlYWQ+IHNoYWRvd1VuaWZvcm1zOiBTaGFkb3dVbmlmb3JtcztcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuc3BvdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5QmluZGluZ31cclxuICAgICAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygke1xyXG5cdFx0XHRcdFx0ZGVmaW5lcy5zcG90TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXlCaW5kaW5nXHJcblx0XHRcdFx0fSkgdmFyIHNwb3RMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheTogdGV4dHVyZV9kZXB0aF8yZF9hcnJheTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMucG9pbnRMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheUJpbmRpbmd9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoJHtcclxuXHRcdFx0XHRcdGRlZmluZXMucG9pbnRMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheUJpbmRpbmdcclxuXHRcdFx0XHR9KSB2YXIgcG9pbnRMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheTogdGV4dHVyZV9kZXB0aF8yZF9hcnJheTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuZGlyZWN0TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXlCaW5kaW5nfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDIpIEBiaW5kaW5nKCR7XHJcblx0XHRcdFx0XHRkZWZpbmVzLmRpcmVjdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5QmluZGluZ1xyXG5cdFx0XHRcdH0pIHZhciBkaXJlY3RMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheTogdGV4dHVyZV9kZXB0aF8yZF9hcnJheTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygke2RlZmluZXMuc2hhZG93U2FtcGxlckJpbmRpbmd9KSB2YXIgc2hhZG93U2FtcGxlcjogc2FtcGxlcl9jb21wYXJpc29uO1xyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICNlbmRpZlxyXG4gICAgI2lmICR7ZGVmaW5lcy5tYXRlcmlhbFBob25nfVxyXG4gICAgICAgIGZuIHBhcnNlTGlnaHRzKGdlb21ldHJ5Okdlb21ldHJ5LHNoaW5pbmVzczpmMzIpLT5SZWZsZWN0ZWRMaWdodCB7XHJcbiAgICAjZWxpZiAke2RlZmluZXMubWF0ZXJpYWxQYnJ9XHJcbiAgICAgICAgZm4gcGFyc2VMaWdodHMoZ2VvbWV0cnk6R2VvbWV0cnksbWF0ZXJpYWw6UGh5c2ljYWxNYXRlcmlhbCktPlJlZmxlY3RlZExpZ2h0e1xyXG4gICAgI2VuZGlmXHJcbiAgICAgICAgdmFyIHJlZmxlY3RlZExpZ2h0OlJlZmxlY3RlZExpZ2h0O1xyXG4gICAgICAgIHZhciBzaGFkb3dWYWx1ZTpmMzIgPSAxLjA7XHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5hbWJpZW50TGlnaHRDb3VudCA+IDB9XHJcbiAgICAgICAgICAgIC8v5aSE55CG546v5aKD5YWJXHJcbiAgICAgICAgICAgIHZhciBhbWJpZW50Q29sb3I6dmVjMzxmMzI+ID0gbGlnaHRVbmlmb3Jtcy5hbWJpZW50Lnh5eiAqIGxpZ2h0VW5pZm9ybXMuYW1iaWVudC53O1xyXG4gICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5hbWJpZW50ICs9IGFtYmllbnRDb2xvcjtcclxuICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5zcG90TGlnaHRzQ291bnQgPiAwfVxyXG4gICAgICAgICAgICAvL+WkhOeQhuiBmuWFieeBr1xyXG4gICAgICAgICAgICB2YXIgc3BvdExpZ2h0OlNwb3RMaWdodDtcclxuICAgICAgICAgICAgZm9yICh2YXIgayA9IDB1OyBrIDwgJHtkZWZpbmVzLnNwb3RMaWdodHNDb3VudH07IGsgPSBrICsgMXUpIHtcclxuICAgICAgICAgICAgICAgIHNwb3RMaWdodD0gbGlnaHRVbmlmb3Jtcy5zcG90TGlnaHRzW2tdO1xyXG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5tYXRlcmlhbFBob25nICYmIGRlZmluZXMub3BlblNoYWRvdyAmJiBkZWZpbmVzLnNwb3RMaWdodFNoYWRvd01hcHNDb3VudH1cclxuICAgICAgICAgICAgICAgICAgICBpZiBrIDwgdGV4dHVyZU51bUxheWVycyhzcG90TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwb3RMaWdodFNoYWRvdzpTcG90TGlnaHRTaGFkb3cgPSBzaGFkb3dVbmlmb3Jtcy5zcG90TGlnaHRTaGFkb3dzW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlnaHRQb3M6IHZlYzQ8ZjMyPiA9IHNwb3RMaWdodFNoYWRvdy5zaGFkb3dDYW1lcmFWUE1hdHJpeEFycmF5ICogdmVjNDxmMzI+KGdlb21ldHJ5LnBvc2l0aW9uLDEuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaWdodEluZm86TGlnaHRJbmZvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodEluZm8uZGlyZWN0aW9uID0gbm9ybWFsaXplKGdlb21ldHJ5LnBvc2l0aW9uIC0gc3BvdExpZ2h0LnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93VmFsdWUgPSBnZXRTaGFkb3dWYWx1ZShzcG90TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXksIHNoYWRvd1NhbXBsZXIsIGxpZ2h0UG9zLCBnZW9tZXRyeSwgbGlnaHRJbmZvLCBrLCB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BvdExpZ2h0U2hhZG93LnNoYWRvd0NhbWVyYU5lYXIsIHNwb3RMaWdodFNoYWRvdy5zaGFkb3dDYW1lcmFGYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzcG90TGlnaHQuY29sb3IgKj0gc2hhZG93VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMubWF0ZXJpYWxQaG9uZ31cclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3BSZWZsZWN0ZWRMaWdodD1nZXRTcG90TGlnaHRJbmZvKHNwb3RMaWdodCxnZW9tZXRyeS5wb3NpdGlvbixzaGluaW5lc3MsZ2VvbWV0cnkubm9ybWFsLGdlb21ldHJ5LnZpZXdEaXIpO1xyXG4gICAgICAgICAgICAgICAgI2VsaWYgJHtkZWZpbmVzLm1hdGVyaWFsUGJyfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmNpZGVudExpZ2h0PWdldFNwb3RMaWdodEluY2lkZW50TGlnaHQoc3BvdExpZ2h0LGdlb21ldHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3BSZWZsZWN0ZWRMaWdodD1kaXJlY3RfUGh5c2ljYWwoaW5jaWRlbnRMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UrPXNwUmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZTtcclxuICAgICAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyKz1zcFJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5wb2ludExpZ2h0c0NvdW50ID4gMH1cclxuICAgICAgICAgICAgLy/lpITnkIbngrnlhYnmupBcclxuICAgICAgICAgICAgdmFyIHBvaW50TGlnaHQ6UG9pbnRMaWdodDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaj0gMHU7IGogPCAke2RlZmluZXMucG9pbnRMaWdodHNDb3VudH07aiA9IGogKyAxdSkge1xyXG4gICAgICAgICAgICAgICAgcG9pbnRMaWdodCA9IGxpZ2h0VW5pZm9ybXMucG9pbnRMaWdodHNbal07XHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLm1hdGVyaWFsUGhvbmcgJiYgZGVmaW5lcy5vcGVuU2hhZG93ICYmIGRlZmluZXMucG9pbnRMaWdodFNoYWRvd01hcHNDb3VudH1cclxuICAgICAgICAgICAgICAgICAgICBpZiBqIDwgdGV4dHVyZU51bUxheWVycyhwb2ludExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludExpZ2h0U2hhZG93OlBvaW50TGlnaHRTaGFkb3cgPSBzaGFkb3dVbmlmb3Jtcy5wb2ludExpZ2h0U2hhZG93c1tqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpZ2h0UG9zOiB2ZWM0PGYzMj4gPSBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0NhbWVyYVZQTWF0cml4QXJyYXkgKiB2ZWM0PGYzMj4oZ2VvbWV0cnkucG9zaXRpb24sMS4wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpZ2h0SW5mbzpMaWdodEluZm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0SW5mby5kaXJlY3Rpb24gPSBub3JtYWxpemUoZ2VvbWV0cnkucG9zaXRpb24gLSBwb2ludExpZ2h0LnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvd1ZhbHVlID0gZ2V0U2hhZG93VmFsdWUocG9pbnRMaWdodFNoYWRvd01hcFRleHR1cmVBcnJheSwgc2hhZG93U2FtcGxlciwgbGlnaHRQb3MsIGdlb21ldHJ5LCBsaWdodEluZm8sIGosIHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0NhbWVyYUZhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50TGlnaHQuY29sb3IgKj0gc2hhZG93VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMubWF0ZXJpYWxQaG9uZ31cclxuICAgICAgICAgICAgICAgICAgICBsZXQgcG9pUmVmbGVjdGVkTGlnaHQ9Z2V0UG9pbnRMaWdodEluZm8ocG9pbnRMaWdodCxnZW9tZXRyeS5wb3NpdGlvbixzaGluaW5lc3MsZ2VvbWV0cnkubm9ybWFsLGdlb21ldHJ5LnZpZXdEaXIpO1xyXG4gICAgICAgICAgICAgICAgI2VsaWYgJHtkZWZpbmVzLm1hdGVyaWFsUGJyfVxyXG4gICAgICAgICAgICAgICAgICAgbGV0IGluY2lkZW50TGlnaHQ9Z2V0UG9pbnRMaWdodEluY2lkZW50TGlnaHQocG9pbnRMaWdodCxnZW9tZXRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICBsZXQgcG9pUmVmbGVjdGVkTGlnaHQ9ZGlyZWN0X1BoeXNpY2FsKGluY2lkZW50TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlKz1wb2lSZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlO1xyXG4gICAgICAgICAgICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIrPXBvaVJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5kaXJ0ZWN0TGlnaHRzQ291bnQgPiAwfVxyXG4gICAgICAgICAgICAvL+WkhOeQhuaWueWQkeWFiVxyXG4gICAgICAgICAgICB2YXIgZGlyZWN0aW9uYWxMaWdodDpEaXJlY3Rpb25hbExpZ2h0O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpPSAwdTsgaSA8JHtkZWZpbmVzLmRpcnRlY3RMaWdodHNDb3VudH07IGkgPSBpICsgMXUpIHtcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHQgPSBsaWdodFVuaWZvcm1zLmRpcnRlY3RMaWdodHNbaV07XHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLm1hdGVyaWFsUGhvbmcgJiYgZGVmaW5lcy5vcGVuU2hhZG93ICYmIGRlZmluZXMuZGlyZWN0TGlnaHRTaGFkb3dNYXBzQ291bnR9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgaSA8IHRleHR1cmVOdW1MYXllcnMoZGlyZWN0TGlnaHRTaGFkb3dNYXBUZXh0dXJlQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdExpZ2h0U2hhZG93OkRpcmVjdExpZ2h0U2hhZG93ID0gc2hhZG93VW5pZm9ybXMuZGlyZWN0TGlnaHRTaGFkb3dzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlnaHRQb3M6IHZlYzQ8ZjMyPiA9IGRpcmVjdExpZ2h0U2hhZG93LnNoYWRvd0NhbWVyYVZQTWF0cml4QXJyYXkgKiB2ZWM0PGYzMj4oZ2VvbWV0cnkucG9zaXRpb24sMS4wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpZ2h0SW5mbzpMaWdodEluZm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0SW5mby5kaXJlY3Rpb24gPSBkaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dWYWx1ZSA9IGdldFNoYWRvd1ZhbHVlKGRpcmVjdExpZ2h0U2hhZG93TWFwVGV4dHVyZUFycmF5LCBzaGFkb3dTYW1wbGVyLCBsaWdodFBvcywgZ2VvbWV0cnksIGxpZ2h0SW5mbywgaSwgZmFsc2UsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yICo9IHNoYWRvd1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5tYXRlcmlhbFBob25nfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkaXJSZWZsZWN0ZWRMaWdodD1nZXREaXJlY3RMaWdodEluZm8oZGlyZWN0aW9uYWxMaWdodCxzaGluaW5lc3MsZ2VvbWV0cnkubm9ybWFsLGdlb21ldHJ5LnZpZXdEaXIpO1xyXG4gICAgICAgICAgICAgICAgI2VsaWYgJHtkZWZpbmVzLm1hdGVyaWFsUGJyfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmNpZGVudExpZ2h0PWdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJbmNpZGVudExpZ2h0KGRpcmVjdGlvbmFsTGlnaHQsZ2VvbWV0cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkaXJSZWZsZWN0ZWRMaWdodD1kaXJlY3RfUGh5c2ljYWwoaW5jaWRlbnRMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UrPWRpclJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2U7XHJcbiAgICAgICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhcis9ZGlyUmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICByZXR1cm4gcmVmbGVjdGVkTGlnaHQ7XHJcbiAgICB9YDtcclxufVxyXG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uLy4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlnaHRDb21tb24oZGVmaW5lcykge1xyXG5cdHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxyXG4gICAgc3RydWN0IFJlZmxlY3RlZExpZ2h0IHtcclxuICAgICAgICBkaXJlY3REaWZmdXNlOnZlYzM8ZjMyPixcclxuICAgICAgICBkaXJlY3RTcGVjdWxhcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgaW5kaXJlY3REaWZmdXNlOnZlYzM8ZjMyPixcclxuICAgICAgICBpbmRpcmVjdFNwZWN1bGFyOnZlYzM8ZjMyPixcclxuICAgIH07XHJcbiAgICBzdHJ1Y3QgR2VvbWV0cnkge1xyXG4gICAgICAgIHBvc2l0aW9uOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgbm9ybWFsOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgdmlld0RpcjogdmVjMzxmMzI+LFxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cclxuICAgICAgICAgICAgdmVjMyBjbGVhcmNvYXROb3JtYWw7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICB9O1xyXG4gICAgZm4gZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZShhbWJpZW50TGlnaHRDb2xvcjogdmVjMzxmMzI+KSAtPiB2ZWMzPGYzMj4ge1xyXG4gICAgICAgIGxldCBpcnJhZGlhbmNlID0gYW1iaWVudExpZ2h0Q29sb3I7XHJcbiAgICAgICAgcmV0dXJuIGlycmFkaWFuY2U7XHJcbiAgICB9XHJcbiAgICBmbiBnZXREaXN0YW5jZUF0dGVudWF0aW9uKGxpZ2h0RGlzdGFuY2U6IGYzMiwgY3V0b2ZmRGlzdGFuY2U6IGYzMiwgZGVjYXlFeHBvbmVudDogZjMyKSAtPiBmMzIge1xyXG4gICAgICAgIGlmIChjdXRvZmZEaXN0YW5jZSA+IDAuMCAmJiBkZWNheUV4cG9uZW50ID4gMC4wKSB7XHJcbiAgICAgICAgICAgIGxldCB4OmYzMiA9IHNhdHVyYXRlKC0gbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICsgMS4wKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBvdyh4LCBkZWNheUV4cG9uZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDEuMDtcclxuICAgIH1cclxuICAgIGZuIGdldFNwb3RBdHRlbnVhdGlvbihjb25lQ29zaW5lOiBmMzIsIHBlbnVtYnJhQ29zaW5lOiBmMzIsIGFuZ2xlQ29zaW5lOiBmMzIpIC0+IGYzMiB7XHJcbiAgICAgICAgcmV0dXJuIHNtb290aHN0ZXAoY29uZUNvc2luZSwgcGVudW1icmFDb3NpbmUsIGFuZ2xlQ29zaW5lKTtcclxuICAgIH1cclxuICAgIGZuIHNoR2V0SXJyYWRpYW5jZUF0KCBub3JtYWw6dmVjMzxmMzI+LCBzaENvZWZmaWNpZW50czphcnJheTx2ZWMzPGYzMj4sOT4pLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgIGxldCB4OmYzMiA9IG5vcm1hbC54OyBcclxuICAgICAgICBsZXQgeTpmMzIgPSBub3JtYWwueTsgXHJcbiAgICAgICAgbGV0IHo6ZjMyID0gbm9ybWFsLno7XHJcbiAgICAgICAgdmFyIHJlc3VsdDp2ZWMzPGYzMj4gPSBzaENvZWZmaWNpZW50c1sgMCBdICogMC44ODYyMjc7XHJcbiAgICAgICAgcmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAxIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHk7XHJcbiAgICAgICAgcmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAyIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHo7XHJcbiAgICAgICAgcmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAzIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHg7XHJcbiAgICAgICAgcmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA0IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB5O1xyXG4gICAgICAgIHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNSBdICogMi4wICogMC40MjkwNDMgKiB5ICogejtcclxuICAgICAgICByZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDYgXSAqICggMC43NDMxMjUgKiB6ICogeiAtIDAuMjQ3NzA4ICk7XHJcbiAgICAgICAgcmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA3IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB6O1xyXG4gICAgICAgIHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgOCBdICogMC40MjkwNDMgKiAoIHggKiB4IC0geSAqIHkgKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZm4gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggZGlyOnZlYzM8ZjMyPiwgbWF0cml4Om1hdDR4NDxmMzI+ICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0PGYzMj4oIGRpciwgMC4wICkgKiBtYXRyaXggKS54eXogKTtcclxuICAgIH1cclxuIGA7XHJcbn1cclxuIiwiaW1wb3J0IHsgd2dzbFBhcnNlRGVmaW5lcyB9IGZyb20gXCIuLi8uLi9XZ3NsUHJlcHJvY2Vzc29yXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJyZGYoZGVmaW5lcykge1xyXG5cdHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOfVxyXG4gICAgICAgICAgICAgICAgZm4gRF9DaGFybGllKCByb3VnaG5lc3M6ZjMyLGRvdE5IOmYzMiApLT5mMzIge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhbHBoYTpmMzIgPSBwb3cyKCByb3VnaG5lc3MgKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW52QWxwaGE6ZjMyID0gMS4wIC8gYWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvczJoOmYzMiA9IGRvdE5IICogZG90Tkg7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpbjJoOmYzMiA9IG1heCggMS4wIC0gY29zMmgsIDAuMDA3ODEyNSApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoIDIuMCArIGludkFscGhhICkgKiBwb3coIHNpbjJoLCBpbnZBbHBoYSAqIDAuNSApIC8gKCAyLjAgKiBQSSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm4gVl9OZXViZWx0KCBkb3ROVjpmMzIsIGRvdE5MOmYzMiApLT5mMzIge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzYXR1cmF0ZSggMS4wIC8gKCA0LjAgKiAoIGRvdE5MICsgZG90TlYgLSBkb3ROTCAqIGRvdE5WICkgKSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm4gQlJERl9TaGVlbihsaWdodERpcjp2ZWMzPGYzMj4sIHZpZXdEaXI6dmVjMzxmMzI+LCBub3JtYWw6dmVjMzxmMzI+LHNoZWVuQ29sb3I6dmVjMzxmMzI+LHNoZWVuUm91Z2huZXNzOmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBoYWxmRGlyOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRvdE5MOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgbGlnaHREaXIgKSApO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkb3ROVjpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkb3ROSDpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBEOmYzMiA9IERfQ2hhcmxpZSggc2hlZW5Sb3VnaG5lc3MsIGRvdE5IICk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IFY6ZjMyID0gVl9OZXViZWx0KCBkb3ROViwgZG90TkwgKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hlZW5Db2xvciAqICggRCAqIFYgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICBmbiBCUkRGX0xhbWJlcnQoZGlmZnVzZUNvbG9yOnZlYzM8ZjMyPiktPnZlYzM8ZjMyPiB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gUkVDSVBST0NBTF9QSSAqIGRpZmZ1c2VDb2xvcjtcclxuXHJcbiAgICAgICAgfSAvLyB2YWxpZGF0ZWRcclxuXHJcbiAgICAgICAgZm4gRl9TY2hsaWNrKCBmMDp2ZWMzPGYzMj4sIGRvdFZIOmYzMiApLT52ZWMzPGYzMj4ge1xyXG5cclxuICAgICAgICAgICAgLy8gT3JpZ2luYWwgYXBwcm94aW1hdGlvbiBieSBDaHJpc3RvcGhlIFNjaGxpY2sgJzk0XHJcbiAgICAgICAgICAgIC8vIGZsb2F0IGZyZXNuZWwgPSBwb3coIDEuMCAtIGRvdFZILCA1LjAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE9wdGltaXplZCB2YXJpYW50IChwcmVzZW50ZWQgYnkgRXBpYyBhdCBTSUdHUkFQSCAnMTMpXHJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vY2RuMi51bnJlYWxlbmdpbmUuY29tL1Jlc291cmNlcy9maWxlcy8yMDEzU2lnZ3JhcGhQcmVzZW50YXRpb25zTm90ZXMtMjY5MTU3MzgucGRmXHJcbiAgICAgICAgICAgbGV0IGZyZXNuZWwgPSBleHAyKCAoIC0gNS41NTQ3MyAqIGRvdFZIIC0gNi45ODMxNiApICogZG90VkggKTtcclxuICAgICAgICAgICByZXR1cm4gKCAxLjAgLSBmMCApICogZnJlc25lbCArIGYwO1xyXG5cclxuICAgICAgICB9IC8vIHZhbGlkYXRlZFxyXG5cclxuICAgICAgICBmbiBTY2hsaWNrX3RvX0YwKGY6dmVjMzxmMzI+LCBmOTA6ZjMyLCBkb3RWSDpmMzIgKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICAgICAgbGV0IHg6ZjMyID0gY2xhbXAoIDEuMCAtIGRvdFZILCAwLjAsIDEuMCApO1xyXG4gICAgICAgICAgICBsZXQgeDI6ZjMyID0geCAqIHg7XHJcbiAgICAgICAgICAgIGxldCB4NTpmMzIgPSBjbGFtcCggeCAqIHgyICogeDIsIDAuMCwgMC45OTk5ICk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKCBmIC0gdmVjMyggZjkwICkgKiB4NSApIC8gKCAxLjAgLSB4NSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBWX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGFscGhhOmYzMiwgZG90Tkw6ZjMyLGRvdE5WOmYzMiApLT5mMzIge1xyXG5cclxuICAgICAgICAgICAgbGV0IGEyIDpmMzI9IHBvdzIoIGFscGhhICk7XHJcblxyXG4gICAgICAgICAgICBsZXQgZ3Y6ZjMyID0gZG90TkwgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcclxuICAgICAgICAgICAgbGV0IGdsOmYzMiA9IGRvdE5WICogc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROTCApICk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gMC41IC8gbWF4KChndiArIGdsKSwgMC4wMDAwMDAwMDEgKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIERfR0dYKCBhbHBoYTpmMzIsIGRvdE5IOmYzMiApLT5mMzIge1xyXG5cclxuICAgICAgICAgICAgbGV0IGEyOmYzMiA9IHBvdzIoIGFscGhhICk7XHJcblxyXG4gICAgICAgICAgICBsZXQgZGVub206ZjMyID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDsgLy8gYXZvaWQgYWxwaGEgPSAwIHdpdGggZG90TkggPSAxXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyIC8gcG93MiggZGVub20gKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIEJSREZfR0dYKCBsaWdodERpcjp2ZWMzPGYzMj4sIHZpZXdEaXI6dmVjMzxmMzI+LCBub3JtYWw6dmVjMzxmMzI+LCBmMDp2ZWMzPGYzMj4sICByb3VnaG5lc3M6ZjMyICktPnZlYzM8ZjMyPiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgYWxwaGE6ZjMyID0gcG93Miggcm91Z2huZXNzICk7IC8vIFVFNCdzIHJvdWdobmVzc1xyXG5cclxuICAgICAgICAgICAgbGV0IGhhbGZEaXIgPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xyXG5cclxuICAgICAgICAgICAgbGV0IGRvdE5MOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgbGlnaHREaXIgKSApO1xyXG4gICAgICAgICAgICBsZXQgZG90TlY6ZjMyID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCB2aWV3RGlyICkgKTtcclxuICAgICAgICAgICAgbGV0IGRvdE5IOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XHJcbiAgICAgICAgICAgIGxldCBkb3RWSDpmMzIgPSBzYXR1cmF0ZSggZG90KCBsaWdodERpciwgaGFsZkRpciApICk7XHJcblxyXG4gICAgICAgICAgICBsZXQgRiA9IEZfU2NobGljayggZjAsICBkb3RWSCApO1xyXG5cclxuICAgICAgICAgICAgbGV0IFYgPSBWX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGFscGhhLCBkb3ROTCwgZG90TlYgKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBEID0gRF9HR1goIGFscGhhLCBkb3ROSCApO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIEYgKiAoIFYgKiBEICk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBkaXJlY3RfUGh5c2ljYWwoIGRpcmVjdExpZ2h0OkluY2lkZW50TGlnaHQsIGdlb21ldHJ5Okdlb21ldHJ5LG1hdGVyaWFsOlBoeXNpY2FsTWF0ZXJpYWwpLT5SZWZsZWN0ZWRMaWdodCB7XHJcbiAgICAgICAgICAgIHZhciByZWZsZWN0ZWRMaWdodDpSZWZsZWN0ZWRMaWdodDtcclxuICAgICAgICAgICAgbGV0IGRvdE5MOmYzMiA9IHNhdHVyYXRlKGRvdCggZ2VvbWV0cnkubm9ybWFsLGdlb21ldHJ5LnZpZXdEaXIpKTtcclxuICAgICAgICAgICAgbGV0IGlycmFkaWFuY2U6dmVjMzxmMzI+ID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvciozLjE0MTU5MjY7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyID0gaXJyYWRpYW5jZSAqIEJSREZfR0dYKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwucm91Z2huZXNzICk7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZmxlY3RlZExpZ2h0O1xyXG4gICAgICAgIH1cclxuICBgO1xyXG59XHJcbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGJyRnVuY3Rpb24oZGVmaW5lcykge1xyXG5cdHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxyXG5cclxuICAgICNpZiAke2RlZmluZXMuRElUSEVSSU5HfVxyXG4gICAgICAgIGZuIGRpdGhlcmluZyhjb2xvcjp2ZWMzPGYzMj4gKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICAgICAgbGV0IGdyaWRfcG9zaXRpb246ZjMyID0gcmFuZCggZ2xfRnJhZ0Nvb3JkLnh5ICk7XHJcbiAgICAgICAgICAgIGxldCBkaXRoZXJfc2hpZnRfUkdCOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggMC4yNSAvIDI1NS4wLCAtMC4yNSAvIDI1NS4wLCAwLjI1IC8gMjU1LjAgKTtcclxuICAgICAgICAgICAgZGl0aGVyX3NoaWZ0X1JHQiA9IG1peCggMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgLTIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIGdyaWRfcG9zaXRpb24gKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yICsgZGl0aGVyX3NoaWZ0X1JHQjtcclxuICAgICAgICB9XHJcbiAgICAjZW5kaWZcclxuXHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9JUklERVNDRU5DRX1cclxuICAgICAgICBmbiBCUkRGX0dHWF9JcmlkZXNjZW5jZSggbGlnaHREaXI6dmVjMzxmMzI+LCB2aWV3RGlyOnZlYzM8ZjMyPixub3JtYWw6dmVjMzxmMzI+LCBmMDp2ZWMzPGYzMj4sIGY5MDpmMzIsaXJpZGVzY2VuY2U6ZjMyLCBpcmlkZXNjZW5jZUZyZXNuZWw6dmVjMzxmMzI+LHJvdWdobmVzczpmMzIgKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICAgICAgbGV0IGFscGhhOmYzMiA9IHBvdzIoIHJvdWdobmVzcyApO1xyXG4gICAgICAgICAgICBsZXQgaGFsZkRpcjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xyXG4gICAgICAgICAgICBsZXQgZG90Tkw6ZjMyID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBsaWdodERpciApICk7XHJcbiAgICAgICAgICAgIGxldCBkb3ROVjpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xyXG4gICAgICAgICAgICBsZXQgZG90Tkg6ZjMyID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcclxuICAgICAgICAgICAgbGV0IGRvdFZIOmYzMiA9IHNhdHVyYXRlKCBkb3QoIHZpZXdEaXIsIGhhbGZEaXIgKSApO1xyXG4gICAgICAgICAgICBsZXQgRjp2ZWMzPGYzMj4gPSBtaXgoIEZfU2NobGljayggZjAsIGY5MCwgZG90VkggKSwgaXJpZGVzY2VuY2VGcmVzbmVsLCBpcmlkZXNjZW5jZSApO1xyXG4gICAgICAgICAgICBsZXQgVjpmMzIgPSBWX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGFscGhhLCBkb3ROTCwgZG90TlYgKTtcclxuICAgICAgICAgICAgbGV0IEQ6ZjMyID0gRF9HR1goIGFscGhhLCBkb3ROSCApO1xyXG4gICAgICAgICAgICByZXR1cm4gRiAqICggViAqIEQgKTtcclxuICAgICAgICB9XHJcbiAgICAjZW5kaWZcclxuXHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTn1cclxuICAgICAgICBmbiBEX0NoYXJsaWUoIHJvdWdobmVzczpmMzIsZG90Tkg6ZjMyICktPmYzMiB7XHJcbiAgICAgICAgICAgIGxldCBhbHBoYTpmMzIgPSBwb3cyKCByb3VnaG5lc3MgKTtcclxuICAgICAgICAgICAgbGV0IGludkFscGhhOmYzMiA9IDEuMCAvIGFscGhhO1xyXG4gICAgICAgICAgICBsZXQgY29zMmg6ZjMyID0gZG90TkggKiBkb3ROSDtcclxuICAgICAgICAgICAgbGV0IHNpbjJoOmYzMiA9IG1heCggMS4wIC0gY29zMmgsIDAuMDA3ODEyNSApO1xyXG4gICAgICAgICAgICByZXR1cm4gKCAyLjAgKyBpbnZBbHBoYSApICogcG93KCBzaW4yaCwgaW52QWxwaGEgKiAwLjUgKSAvICggMi4wICogUEkgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4gVl9OZXViZWx0KCBkb3ROVjpmMzIsIGRvdE5MOmYzMiApLT5mMzIge1xyXG4gICAgICAgICAgICByZXR1cm4gc2F0dXJhdGUoIDEuMCAvICggNC4wICogKCBkb3ROTCArIGRvdE5WIC0gZG90TkwgKiBkb3ROViApICkgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4gQlJERl9TaGVlbihsaWdodERpcjp2ZWMzPGYzMj4sIHZpZXdEaXI6dmVjMzxmMzI+LCBub3JtYWw6dmVjMzxmMzI+LHNoZWVuQ29sb3I6dmVjMzxmMzI+LHNoZWVuUm91Z2huZXNzOmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICBsZXQgaGFsZkRpcjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xyXG4gICAgICAgICAgICBsZXQgZG90Tkw6ZjMyID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBsaWdodERpciApICk7XHJcbiAgICAgICAgICAgIGxldCBkb3ROVjpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xyXG4gICAgICAgICAgICBsZXQgZG90Tkg6ZjMyID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcclxuICAgICAgICAgICAgbGV0IEQ6ZjMyID0gRF9DaGFybGllKCBzaGVlblJvdWdobmVzcywgZG90TkggKTtcclxuICAgICAgICAgICAgbGV0IFY6ZjMyID0gVl9OZXViZWx0KCBkb3ROViwgZG90TkwgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNoZWVuQ29sb3IgKiAoIEQgKiBWICk7XHJcbiAgICAgICAgfVxyXG4gICAgI2VuZGlmXHJcblxyXG4gICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0V9XHJcbiAgICAgICAgbGV0IFhZWl9UT19SRUM3MDk6IG1hdDN4MzxmMzI+ID0gbWF0M3gzPGYzMj4oXHJcbiAgICAgICAgMy4yNDA0NTQyLCAtMC45NjkyNjYwLCAwLjA1NTY0MzQsIC0xLjUzNzEzODUsIDEuODc2MDEwOCwgLTAuMjA0MDI1OSwgLTAuNDk4NTMxNCwgMC4wNDE1NTYwLCAxLjA1NzIyNTJcclxuICAgICAgICApO1xyXG4gICAgICAgIGZuIEZyZXNuZWwwVG9Jb3IoIGZyZXNuZWwwOnZlYzM8ZjMyPiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICBsZXQgc3FydEYwOnZlYzM8ZjMyPiA9IHNxcnQoIGZyZXNuZWwwICk7XHJcbiAgICAgICAgICAgIHJldHVybiAoIHZlYzM8ZjMyPiggMS4wICkgKyBzcXJ0RjAgKSAvICggdmVjMzxmMzI+KCAxLjAgKSAtIHNxcnRGMCApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBJb3JUb0ZyZXNuZWwwKHRyYW5zbWl0dGVkSW9yOnZlYzM8ZjMyPixpbmNpZGVudElvcjpmMzIgKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHBvdzJWZWN0b3IoICggdHJhbnNtaXR0ZWRJb3IgLSB2ZWMzPGYzMj4oIGluY2lkZW50SW9yICkgKSAvICggdHJhbnNtaXR0ZWRJb3IgKyB2ZWMzPGYzMj4oIGluY2lkZW50SW9yICkgKSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBJb3JUb0ZyZXNuZWwwKHRyYW5zbWl0dGVkSW9yOmYzMiwgaW5jaWRlbnRJb3I6ZjMyICktPmYzMiB7XHJcbiAgICAgICAgICAgIHJldHVybiBwb3cyVmVjdG9yKCAoIHRyYW5zbWl0dGVkSW9yIC0gaW5jaWRlbnRJb3IgKSAvICggdHJhbnNtaXR0ZWRJb3IgKyBpbmNpZGVudElvciApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4gZXZhbFNlbnNpdGl2aXR5KE9QRDpmMzIsc2hpZnQ6dmVjMzxmMzI+ICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgICAgIGxldCBwaGFzZTpmMzIgPSAyLjAgKiBQSSAqIE9QRCAqIDEuMGUtOTtcclxuICAgICAgICAgICAgbGV0IHZhbDp2ZWMzPGYzMj4gPSB2ZWMzPGYzMj4oIDUuNDg1NmUtMTMsIDQuNDIwMWUtMTMsIDUuMjQ4MWUtMTMgKTtcclxuICAgICAgICAgICAgbGV0IHBvczp2ZWMzPGYzMj4gPSB2ZWMzPGYzMj4oIDEuNjgxMGUrMDYsIDEuNzk1M2UrMDYsIDIuMjA4NGUrMDYgKTtcclxuICAgICAgICAgICAgbGV0IHZhcnQ6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCA0LjMyNzhlKzA5LCA5LjMwNDZlKzA5LCA2LjYxMjFlKzA5ICk7XHJcbiAgICAgICAgICAgIGxldCB4eXo6dmVjMzxmMzI+ID0gdmFsICogc3FydCggMi4wICogUEkgKiB2YXJ0ICkgKiBjb3MoIHBvcyAqIHBoYXNlICsgc2hpZnQgKSAqIGV4cCggLSBwb3cyKCBwaGFzZSApICogdmFydCApO1xyXG4gICAgICAgICAgICB4eXoueCArPSA5Ljc0NzBlLTE0ICogc3FydCggMi4wICogUEkgKiA0LjUyODJlKzA5ICkgKiBjb3MoIDIuMjM5OWUrMDYgKiBwaGFzZSArIHNoaWZ0WyAwIF0gKSAqIGV4cCggLSA0LjUyODJlKzA5ICogcG93MiggcGhhc2UgKSApO1xyXG4gICAgICAgICAgICB4eXogLz0gMS4wNjg1ZS03O1xyXG4gICAgICAgICAgICBsZXQgcmdiOnZlYzM8ZjMyPiA9IFhZWl9UT19SRUM3MDkgKiB4eXo7XHJcbiAgICAgICAgICAgIHJldHVybiByZ2I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIGV2YWxJcmlkZXNjZW5jZShvdXRzaWRlSU9SOmYzMiwgZXRhMjpmMzIsY29zVGhldGExOmYzMix0aGluRmlsbVRoaWNrbmVzczpmMzIsYmFzZUYwOnZlYzM8ZjMyPiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICB2YXIgSTp2ZWMzPGYzMj47XHJcbiAgICAgICAgICAgIGxldCBpcmlkZXNjZW5jZUlPUjpmMzIgPSBtaXgoIG91dHNpZGVJT1IsIGV0YTIsIHNtb290aHN0ZXAoIDAuMCwgMC4wMywgdGhpbkZpbG1UaGlja25lc3MgKSApO1xyXG4gICAgICAgICAgICBsZXQgc2luVGhldGEyU3E6ZjMyID0gcG93Miggb3V0c2lkZUlPUiAvIGlyaWRlc2NlbmNlSU9SICkgKiAoIDEuMCAtIHBvdzIoIGNvc1RoZXRhMSApICk7XHJcbiAgICAgICAgICAgIGxldCBjb3NUaGV0YTJTcTpmMzIgPSAxLjAgLSBzaW5UaGV0YTJTcTtcclxuICAgICAgICAgICAgaWYgKCBjb3NUaGV0YTJTcSA8IDAuMCApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2ZWMzPGYzMj4oIDEuMCApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjb3NUaGV0YTI6ZjMyID0gc3FydCggY29zVGhldGEyU3EgKTtcclxuICAgICAgICAgICAgbGV0IFIwOmYzMiA9IElvclRvRnJlc25lbDAoIGlyaWRlc2NlbmNlSU9SLCBvdXRzaWRlSU9SICk7XHJcbiAgICAgICAgICAgIGxldCBSMTI6ZjMyID0gRl9TY2hsaWNrKCBSMCwgMS4wLCBjb3NUaGV0YTEgKTtcclxuICAgICAgICAgICAgbGV0IFIyMTpmMzIgPSBSMTI7XHJcbiAgICAgICAgICAgIGxldCBUMTIxOmYzMiA9IDEuMCAtIFIxMjtcclxuICAgICAgICAgICAgbGV0IHBoaTEyOmYzMiA9IDAuMDtcclxuICAgICAgICAgICAgaWYgKCBpcmlkZXNjZW5jZUlPUiA8IG91dHNpZGVJT1IgKSBwaGkxMiA9IFBJO1xyXG4gICAgICAgICAgICBsZXQgcGhpMjE6ZjMyID0gUEkgLSBwaGkxMjtcclxuICAgICAgICAgICAgbGV0IGJhc2VJT1I6dmVjMzxmMzI+ID0gRnJlc25lbDBUb0lvciggY2xhbXAoIGJhc2VGMCwgMC4wLCAwLjk5OTkgKSApO1xyXG4gICAgICAgICAgICBsZXQgUjE6dmVjMzxmMzI+ID0gSW9yVG9GcmVzbmVsMCggYmFzZUlPUiwgaXJpZGVzY2VuY2VJT1IgKTtcclxuICAgICAgICAgICAgbGV0IFIyMzp2ZWMzPGYzMj4gPSBGX1NjaGxpY2soIFIxLCAxLjAsIGNvc1RoZXRhMiApO1xyXG4gICAgICAgICAgICBsZXQgcGhpMjM6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCAwLjAgKTtcclxuICAgICAgICAgICAgaWYgKCBiYXNlSU9SWyAwIF0gPCBpcmlkZXNjZW5jZUlPUiApIHBoaTIzWyAwIF0gPSBQSTtcclxuICAgICAgICAgICAgaWYgKCBiYXNlSU9SWyAxIF0gPCBpcmlkZXNjZW5jZUlPUiApIHBoaTIzWyAxIF0gPSBQSTtcclxuICAgICAgICAgICAgaWYgKCBiYXNlSU9SWyAyIF0gPCBpcmlkZXNjZW5jZUlPUiApIHBoaTIzWyAyIF0gPSBQSTtcclxuICAgICAgICAgICAgbGV0IE9QRDpmMzIgPSAyLjAgKiBpcmlkZXNjZW5jZUlPUiAqIHRoaW5GaWxtVGhpY2tuZXNzICogY29zVGhldGEyO1xyXG4gICAgICAgICAgICBsZXQgcGhpOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggcGhpMjEgKSArIHBoaTIzO1xyXG4gICAgICAgICAgICBsZXQgUjEyMzp2ZWMzPGYzMj4gPSBjbGFtcCggUjEyICogUjIzLCAxZS01LCAwLjk5OTkgKTtcclxuICAgICAgICAgICAgbGV0IHIxMjM6dmVjMzxmMzI+ID0gc3FydCggUjEyMyApO1xyXG4gICAgICAgICAgICBsZXQgUnM6dmVjMzxmMzI+ID0gcG93MiggVDEyMSApICogUjIzIC8gKCB2ZWMzPGYzMj4oIDEuMCApIC0gUjEyMyApO1xyXG4gICAgICAgICAgICBsZXQgQzA6dmVjMzxmMzI+ID0gUjEyICsgUnM7XHJcbiAgICAgICAgICAgIEkgPSBDMDtcclxuICAgICAgICAgICAgbGV0IENtOnZlYzM8ZjMyPiA9IFJzIC0gVDEyMTtcclxuICAgICAgICAgICAgZm9yICggbGV0IG0gOiB1MzIgPSAxO20gPD0gMjsgKysgbSApIHtcclxuICAgICAgICAgICAgICAgIENtICo9IHIxMjM7XHJcbiAgICAgICAgICAgICAgICBTbTp2ZWMzPGYzMj4gPSAyLjAgKiBldmFsU2Vuc2l0aXZpdHkoIGYzMiggbSApICogT1BELCBmMzIoIG0gKSAqIHBoaSApO1xyXG4gICAgICAgICAgICAgICAgSSArPSBDbSAqIFNtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBtYXgoIEksIHZlYzM8ZjMyPiggMC4wICkgKTtcclxuICAgICAgICB9XHJcbiAgICAjZW5kaWZcclxuICAgIGNvbnN0IGNsZWFyY29hdFNwZWN1bGFyOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggMC4wICk7XHJcbiAgICBjb25zdCBzaGVlblNwZWN1bGFyOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggMC4wICk7XHJcblxyXG4gICAgZm4gSUJMU2hlZW5CUkRGKCBub3JtYWw6dmVjMzxmMzI+LCB2aWV3RGlyOnZlYzM8ZjMyPiwgcm91Z2huZXNzOmYzMiApLT5mMzIge1xyXG4gICAgICAgIGxldCBkb3ROVjpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xyXG4gICAgICAgIGxldCByMjpmMzIgPSByb3VnaG5lc3MgKiByb3VnaG5lc3M7XHJcbiAgICAgICAgbGV0IGE6ZjMyID1zZWxlY3QoLTguNDggKiByMiArIDE0LjMgKiByb3VnaG5lc3MgLSA5Ljk1LC0zMzkuMiAqIHIyICsgMTYxLjQgKiByb3VnaG5lc3MgLSAyNS45LHJvdWdobmVzcyA8IDAuMjUpO1xyXG4gICAgICAgIC8vbGV0IGE6ZjMyID0gcm91Z2huZXNzIDwgMC4yNSA/IC0zMzkuMiAqIHIyICsgMTYxLjQgKiByb3VnaG5lc3MgLSAyNS45IDogLTguNDggKiByMiArIDE0LjMgKiByb3VnaG5lc3MgLSA5Ljk1O1xyXG4gICAgICAgIGxldCBiOmYzMj1zZWxlY3QoMS45NyAqIHIyIC0gMy4yNyAqIHJvdWdobmVzcyArIDAuNzIsNDQuMCAqIHIyIC0gMjMuNyAqIHJvdWdobmVzcyArIDMuMjYsIHJvdWdobmVzcyA8IDAuMjUpO1xyXG4gICAgICAgIC8vbGV0IGI6ZjMyID0gcm91Z2huZXNzIDwgMC4yNSA/IDQ0LjAgKiByMiAtIDIzLjcgKiByb3VnaG5lc3MgKyAzLjI2IDogMS45NyAqIHIyIC0gMy4yNyAqIHJvdWdobmVzcyArIDAuNzI7XHJcbiAgICAgICAgLy9sZXQgREc6ZjMyID0gZXhwKCBhICogZG90TlYgKyBiICkgKyAoIHJvdWdobmVzcyA8IDAuMjUgPyAwLjAgOiAwLjEgKiAoIHJvdWdobmVzcyAtIDAuMjUgKSApO1xyXG4gICAgICAgIGxldCBERzpmMzIgPSBleHAoIGEgKiBkb3ROViArIGIgKSArIHNlbGVjdCgwLjEgKiAoIHJvdWdobmVzcyAtIDAuMjUgKSwwLjAscm91Z2huZXNzIDwgMC4yNSk7XHJcbiAgICAgICAgcmV0dXJuIHNhdHVyYXRlKCBERyAqIFJFQ0lQUk9DQUxfUEkgKTtcclxuICAgIH1cclxuICAgIGZuIERGR0FwcHJveCggc3BlY3VsYXJDb2xvcjp2ZWMzPGYzMj4sIHJvdWdobmVzczpmMzIsZG90TlY6ZjMyICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgY29uc3QgYzA6dmVjNDxmMzI+ID0gdmVjNDxmMzI+KCAtIDEsIC0gMC4wMjc1LCAtIDAuNTcyLCAwLjAyMiApO1xyXG4gICAgICAgIGxldCBjMTp2ZWM0PGYzMj4gPSB2ZWM0PGYzMj4oIDEsIDAuMDQyNSwgMS4wNCwgLSAwLjA0ICk7XHJcbiAgICAgICAgbGV0IHI6dmVjNDxmMzI+ID0gcm91Z2huZXNzICogYzAgKyBjMTtcclxuICAgICAgICBsZXQgYTAwNDpmMzIgPSBtaW4oIHIueCAqIHIueCwgZXhwMiggLSA5LjI4ICogZG90TlYgKSApICogci54ICsgci55O1xyXG4gICAgICAgIGxldCBmYWI6dmVjMjxmMzI+ID0gdmVjMjxmMzI+KCAtIDEuMDQsIDEuMDQgKSAqIGEwMDQgKyByLnp3O1xyXG4gICAgICAgIHJldHVybiBzcGVjdWxhckNvbG9yICogZmFiLnggKyBmYWIueTtcclxuICAgIH1cclxuICAgIGZuIEVudmlyb25tZW50QlJERiggbm9ybWFsOnZlYzM8ZjMyPix2aWV3RGlyOnZlYzM8ZjMyPixzcGVjdWxhckNvbG9yOnZlYzM8ZjMyPiwgc3BlY3VsYXJGOTA6ZjMyLHJvdWdobmVzczpmMzIgKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICBsZXQgZmFiOnZlYzI8ZjMyPiA9IERGR0FwcHJveCggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcclxuICAgICAgICByZXR1cm4gc3BlY3VsYXJDb2xvciAqIGZhYi54ICsgc3BlY3VsYXJGOTAgKiBmYWIueTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZm4gY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBkb3ROVjpmMzIsIGFtYmllbnRPY2NsdXNpb246ZjMyLCByb3VnaG5lc3M6ZjMyICktPmYzMiB7XHJcbiAgICAgICAgcmV0dXJuIHNhdHVyYXRlKCBwb3coIGRvdE5WICsgYW1iaWVudE9jY2x1c2lvbiwgZXhwMiggLSAxNi4wICogcm91Z2huZXNzIC0gMS4wICkgKSAtIDEuMCArIGFtYmllbnRPY2NsdXNpb24gKTtcclxuICAgIH1cclxuICAgICNpZiAke2RlZmluZXMuVVNFX1RSQU5TTUlTU0lPTn1cclxuXHJcbiAgICBmbiBnZXRWb2x1bWVUcmFuc21pc3Npb25SYXkoIG46dmVjMzxmMzI+LCB2OnZlYzM8ZjMyPiwgdGhpY2tuZXNzOmYzMiwgaW9yOmYzMiwgbW9kZWxNYXRyaXg6bWF0NHg0OmYzMiktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgdmFyIHJlZnJhY3Rpb25WZWN0b3I6dmVjMzxmMzI+ID0gcmVmcmFjdCggLSB2LCBub3JtYWxpemUoIG4gKSwgMS4wIC8gaW9yICk7XHJcbiAgICAgICAgdmFyIG1vZGVsU2NhbGU6dmVjMzxmMzI+O1xyXG4gICAgICAgIG1vZGVsU2NhbGUueCA9IGxlbmd0aCggdmVjMzxmMzI+KCBtb2RlbE1hdHJpeFswXS54eXogKSApO1xyXG4gICAgICAgIG1vZGVsU2NhbGUueSA9IGxlbmd0aCggdmVjMzxmMzI+KCBtb2RlbE1hdHJpeFsxXS54eXogKSApO1xyXG4gICAgICAgIG1vZGVsU2NhbGUueiA9IGxlbmd0aCggdmVjMzxmMzI+KCBtb2RlbE1hdHJpeFsyXS54eXogKSApO1xyXG4gICAgICAgIHJldHVybiBub3JtYWxpemUoIHJlZnJhY3Rpb25WZWN0b3IgKSAqIHRoaWNrbmVzcyAqIG1vZGVsU2NhbGU7XHJcbiAgICB9XHJcbiAgICBmbiBhcHBseUlvclRvUm91Z2huZXNzKHJvdWdobmVzczpmMzIsIGlvcjpmMzIgKS0+ZjMyIHtcclxuICAgICAgICByZXR1cm4gcm91Z2huZXNzICogY2xhbXAoIGlvciAqIDIuMCAtIDIuMCwgMC4wLCAxLjAgKTtcclxuICAgIH1cclxuICAgIGZuIGdldFRyYW5zbWlzc2lvblNhbXBsZSggZnJhZ0Nvb3JkOnZlYzI8ZjMyPiwgcm91Z2huZXNzOmYzMixpb3I6ZjMyICktPnZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgbGV0IGZyYW1lYnVmZmVyTG9kOmYzMiA9IGxvZzIoIG1hdGVyaWFsVW5pZm9ybS50cmFuc21pc3Npb25TYW1wbGVyU2l6ZS54ICkgKiBhcHBseUlvclRvUm91Z2huZXNzKCByb3VnaG5lc3MsIGlvciApO1xyXG4gICAgICAgIHJldHVybiB0ZXh0dXJlU2FtcGxlTGV2ZWwodHJhbnNtaXNzaW9uU2FtcGxlclRleHR1cmUsYmFzZVNhbXBsZXIsZnJhZ0Nvb3JkLnh5LCBmcmFtZWJ1ZmZlckxvZCk7XHJcblxyXG4gICAgfVxyXG4gICAgZm4gYXBwbHlWb2x1bWVBdHRlbnVhdGlvbiggcmFkaWFuY2U6dmVjMzx2ZWMzPiwgdHJhbnNtaXNzaW9uRGlzdGFuY2U6ZjMyLGF0dGVudWF0aW9uQ29sb3I6dmVjMzxmMzI+LGF0dGVudWF0aW9uRGlzdGFuY2U6ZjMyICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgaWYgKCBpc2luZiggYXR0ZW51YXRpb25EaXN0YW5jZSApICkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmFkaWFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgYXR0ZW51YXRpb25Db2VmZmljaWVudDp2ZWMzPGYzMj4gPSAtbG9nKCBhdHRlbnVhdGlvbkNvbG9yICkgLyBhdHRlbnVhdGlvbkRpc3RhbmNlO1xyXG4gICAgICAgICAgICBsZXQgdHJhbnNtaXR0YW5jZTp2ZWMzPGYzMj4gPSBleHAoIC0gYXR0ZW51YXRpb25Db2VmZmljaWVudCAqIHRyYW5zbWlzc2lvbkRpc3RhbmNlICk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc21pdHRhbmNlICogcmFkaWFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICB9XHJcbiAgICBmbiBnZXRJQkxWb2x1bWVSZWZyYWN0aW9uKCBuOnZlYzM8ZjMyPix2OnZlYzM8ZjMyPiwgcm91Z2huZXNzOmYzMiwgZGlmZnVzZUNvbG9yOnZlYzM8ZjMyPixzcGVjdWxhckNvbG9yOnZlYzM8ZjMyPiwgc3BlY3VsYXJGOTA6ZjMyLHBvc2l0aW9uOnZlYzM8ZjMyPiwgbW9kZWxNYXRyaXg6bWF0NHg0PGYzMj4sIHZpZXdNYXRyaXg6bWF0NHg0PGYzMj4scHJvak1hdHJpeDptYXQ0eDQ8ZjMyPixpb3I6ZjMyLCB0aGlja25lc3M6ZjMyLGF0dGVudWF0aW9uQ29sb3I6dmVjMzxmMzI+LGF0dGVudWF0aW9uRGlzdGFuY2U6ZjMyICktPnZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgbGV0IHRyYW5zbWlzc2lvblJheTp2ZWMzPGYzMj4gPSBnZXRWb2x1bWVUcmFuc21pc3Npb25SYXkoIG4sIHYsIHRoaWNrbmVzcywgaW9yLCBtb2RlbE1hdHJpeCApO1xyXG4gICAgICAgIGxldCByZWZyYWN0ZWRSYXlFeGl0OnZlYzM8ZjMyPiA9IHBvc2l0aW9uICsgdHJhbnNtaXNzaW9uUmF5O1xyXG4gICAgICAgIGxldCBuZGNQb3M6dmVjNDxmMzI+ID0gcHJvak1hdHJpeCAqIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZyYWN0ZWRSYXlFeGl0LCAxLjAgKTtcclxuICAgICAgICBsZXQgcmVmcmFjdGlvbkNvb3Jkczp2ZWMyPGYzMj4gPSBuZGNQb3MueHkgLyBuZGNQb3MudztcclxuICAgICAgICByZWZyYWN0aW9uQ29vcmRzICs9IDEuMDtcclxuICAgICAgICByZWZyYWN0aW9uQ29vcmRzIC89IDIuMDtcclxuICAgICAgICBsZXQgdHJhbnNtaXR0ZWRMaWdodDp2ZWM0PGYzMj4gPSBnZXRUcmFuc21pc3Npb25TYW1wbGUoIHJlZnJhY3Rpb25Db29yZHMsIHJvdWdobmVzcywgaW9yICk7XHJcbiAgICAgICAgbGV0IGF0dGVudWF0ZWRDb2xvcjp2ZWMzPGYzMj4gPSBhcHBseVZvbHVtZUF0dGVudWF0aW9uKCB0cmFuc21pdHRlZExpZ2h0LnJnYiwgbGVuZ3RoKCB0cmFuc21pc3Npb25SYXkgKSwgYXR0ZW51YXRpb25Db2xvciwgYXR0ZW51YXRpb25EaXN0YW5jZSApO1xyXG4gICAgICAgIGxldCBGOnZlYzM8ZjMyPiA9IEVudmlyb25tZW50QlJERiggbiwgdiwgc3BlY3VsYXJDb2xvciwgc3BlY3VsYXJGOTAsIHJvdWdobmVzcyApO1xyXG4gICAgICAgIHJldHVybiB2ZWM0PGYzMj4oICggMS4wIC0gRiApICogYXR0ZW51YXRlZENvbG9yICogZGlmZnVzZUNvbG9yLCB0cmFuc21pdHRlZExpZ2h0LmEgKTtcclxuICAgIH1cclxuICAgICNlbmRpZlxyXG5cclxuICAgICNpZiAke2RlZmluZXMuVVNFX0JVTVBURVhUVVJFfVxyXG4gICAgICAgIGZuIGRIZHh5X2Z3ZCgpLT52ZWMyPGYzMj4ge1xyXG4gICAgICAgICAgICBsZXQgZFNUZHg6dmVjMjxmMzI+ID0gZHBkeCggdlV2ICk7XHJcbiAgICAgICAgICAgIGxldCBkU1RkeTp2ZWMyPGYzMj4gPSBkcGR5KCB2VXYgKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBIbGw6ZjMyID0gbWF0ZXJpYWxVbmlmb3JtLmJ1bXBTY2FsZSAqIHRleHR1cmVTYW1wbGUoYnVtcFRleHR1cmUsIGJhc2VTYW1wbGVyLCB2VXYpLng7XHJcbiAgICAgICAgICAgIGxldCBkQng6ZjMyID0gbWF0ZXJpYWxVbmlmb3JtLmJ1bXBTY2FsZSAqIHRleHR1cmVTYW1wbGUoYnVtcFRleHR1cmUsIGJhc2VTYW1wbGVyLCB2VXYgKyBkU1RkeCkueCAtIEhsbDtcclxuICAgICAgICAgICAgbGV0IGRCeTpmMzIgPSBtYXRlcmlhbFVuaWZvcm0uYnVtcFNjYWxlICogdGV4dHVyZVNhbXBsZShidW1wVGV4dHVyZSwgYmFzZVNhbXBsZXIsIHZVdiArIGRTVGR5KS54IC0gSGxsO1xyXG4gICAgICAgICAgICByZXR1cm4gdmVjMjxmMzI+KCBkQngsIGRCeSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBwZXJ0dXJiTm9ybWFsQXJiKCBzdXJmX3Bvczp2ZWMzPGYzMj4sIHN1cmZfbm9ybTp2ZWMzPGYzMj4sIGRIZHh5OnZlYzI8ZjMyPiwgZmFjZURpcmVjdGlvbjpmMzIgKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICAgICAgbGV0IHZTaWdtYVg6dmVjMzxmMzI+ID0gZHBkeCggc3VyZl9wb3MueHl6ICk7XHJcbiAgICAgICAgICAgIGxldCB2U2lnbWFZOnZlYzM8ZjMyPiA9IGRwZHkoIHN1cmZfcG9zLnh5eiApO1xyXG4gICAgICAgICAgICBsZXQgdk46dmVjMzxmMzI+ID0gc3VyZl9ub3JtO1xyXG4gICAgICAgICAgICBsZXQgUjE6dmVjMzxmMzI+ID0gY3Jvc3MoIHZTaWdtYVksIHZOICk7XHJcbiAgICAgICAgICAgIGxldCBSMjp2ZWMzPGYzMj4gPSBjcm9zcyggdk4sIHZTaWdtYVggKTtcclxuICAgICAgICAgICAgbGV0IGZEZXQ6ZjMyID0gZG90KCB2U2lnbWFYLCBSMSApICogZmFjZURpcmVjdGlvbjtcclxuICAgICAgICAgICAgbGV0IHZHcmFkOnZlYzM8ZjMyPiA9IHNpZ24oIGZEZXQgKSAqICggZEhkeHkueCAqIFIxICsgZEhkeHkueSAqIFIyICk7XHJcbiAgICAgICAgICAgIHJldHVybiBub3JtYWxpemUoIGFicyggZkRldCApICogc3VyZl9ub3JtIC0gdkdyYWQgKTtcclxuICAgICAgICB9XHJcbiAgICAjZW5kaWZcclxuXHJcbiAgICAvLyEgZGVmaW5lZCAoIFVTRV9UQU5HRU5UICkgJiYgKCBkZWZpbmVkICggVEFOR0VOVFNQQUNFX05PUk1BTFRFWFRVUkUgKSB8fCBkZWZpbmVkICggVVNFX0NMRUFSQ09BVF9OT1JNQUxURVhUVVJFICkgKVxyXG4gICAgI2lmICR7KCFkZWZpbmVzLlVTRV9UQU5HRU5UICYmIGRlZmluZXMuVEFOR0VOVFNQQUNFX05PUk1BTFRFWFRVUkUpIHx8IGRlZmluZXMuVVNFX0NMRUFSQ09BVF9OT1JNQUxURVhUVVJFfVxyXG4gICAgZm4gcGVydHVyYk5vcm1hbDJBcmIoIGV5ZV9wb3M6dmVjMzxmMzI+LCBzdXJmX25vcm06dmVjMzxmMzI+LCB0ZXh0dXJlTjp2ZWMzPGYzMj4sIGZhY2VEaXJlY3Rpb246ZjMyICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgbGV0IHEwOnZlYzM8ZjMyPiA9IGRwZHgoIGV5ZV9wb3MueHl6ICk7XHJcbiAgICAgICAgbGV0IHExOnZlYzM8ZjMyPiA9IGRwZHkoIGV5ZV9wb3MueHl6ICk7XHJcbiAgICAgICAgbGV0IHN0MDp2ZWMyPGYzMj4gPSBkcGR4KCB2VXYuc3QgKTtcclxuICAgICAgICBsZXQgc3QxOnZlYzI8ZjMyPiA9IGRwZHkoIHZVdi5zdCApO1xyXG4gICAgICAgIGxldCBOOnZlYzM8ZjMyPiA9IHN1cmZfbm9ybTtcclxuICAgICAgICBsZXQgcTFwZXJwOnZlYzM8ZjMyPiA9IGNyb3NzKCBxMSwgTiApO1xyXG4gICAgICAgIGxldCBxMHBlcnA6dmVjMzxmMzI+ID0gY3Jvc3MoIE4sIHEwICk7XHJcbiAgICAgICAgbGV0IFQ6dmVjMzxmMzI+ID0gcTFwZXJwICogc3QwLnggKyBxMHBlcnAgKiBzdDEueDtcclxuICAgICAgICBsZXQgQjp2ZWMzPGYzMj4gPSBxMXBlcnAgKiBzdDAueSArIHEwcGVycCAqIHN0MS55O1xyXG4gICAgICAgIGxldCBkZXQ6ZjMyID0gbWF4KCBkb3QoIFQsIFQgKSwgZG90KCBCLCBCICkgKTtcclxuICAgICAgICBsZXQgc2NhbGU6ZjMyID0gKCBkZXQgPT0gMC4wICkgPyAwLjAgOiBmYWNlRGlyZWN0aW9uICogaW52ZXJzZXNxcnQoIGRldCApO1xyXG4gICAgICAgIHJldHVybiBub3JtYWxpemUoIFQgKiAoIHRleHR1cmVOLnggKiBzY2FsZSApICsgQiAqICggdGV4dHVyZU4ueSAqIHNjYWxlICkgKyBOICogdGV4dHVyZU4ueiApO1xyXG4gICAgfVxyXG4gICAgI2VuZGlmXHJcbiAgICBzdHJ1Y3QgTXVsdGlBbmRTaW5nbGVTY2F0dGVye1xyXG4gICAgICAgIG11bHRpU2NhdHRlcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgc2luZ2xlU2NhdHRlcjp2ZWMzPGYzMj5cclxuICAgIH1cclxuICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0V9XHJcbiAgIC8vLy8vLy8vaW5vdXQgdmVjMyBzaW5nbGVTY2F0dGVyLCBpbm91dCB2ZWMzIG11bHRpU2NhdHRlclxyXG4gICAgICAgZm4gY29tcHV0ZU11bHRpc2NhdHRlcmluZ0lyaWRlc2NlbmNlKCBub3JtYWw6dmVjMzxmMzI+LCB2aWV3RGlyOnZlYzM8ZjMyPiwgc3BlY3VsYXJDb2xvcjp2ZWMzPGYzMj4sIHNwZWN1bGFyRjkwOmYzMiwgaXJpZGVzY2VuY2U6ZjMyLGlyaWRlc2NlbmNlRjA6dmVjMzxmMzI+LCByb3VnaG5lc3M6ZjMyICktPk11bHRpQW5kU2luZ2xlU2NhdHRlciB7XHJcbiAgICNlbHNlXHJcbiAgIC8vLy8vLy8vaW5vdXQgdmVjMyBzaW5nbGVTY2F0dGVyLCBpbm91dCB2ZWMzIG11bHRpU2NhdHRlclxyXG4gICAgICAgZm4gY29tcHV0ZU11bHRpc2NhdHRlcmluZyggbm9ybWFsOnZlYzM8ZjMyPix2aWV3RGlyOnZlYzM8ZjMyPiwgc3BlY3VsYXJDb2xvcjp2ZWMzPGYzMj4sIHNwZWN1bGFyRjkwOmYzMiwgcm91Z2huZXNzOmYzMiktPk11bHRpQW5kU2luZ2xlU2NhdHRlciB7XHJcbiAgICNlbmRpZlxyXG4gICBsZXQgZmFiOnZlYzI8ZjMyPiA9IERGR0FwcHJveCggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcclxuXHJcbiAgIHZhciBtdWx0aUFuZFNpbmdsZVNjYXR0ZXI6TXVsdGlBbmRTaW5nbGVTY2F0dGVyO1xyXG5cclxuICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0V9XHJcbiAgICAgICBsZXQgRnI6dmVjMzxmMzI+ID0gbWl4KCBzcGVjdWxhckNvbG9yLCBpcmlkZXNjZW5jZUYwLCBpcmlkZXNjZW5jZSApO1xyXG4gICAjZWxzZVxyXG4gICAgICAgbGV0IEZyOnZlYzM8ZjMyPiA9IHNwZWN1bGFyQ29sb3I7XHJcbiAgICNlbmRpZlxyXG4gICAgICAgbGV0IEZzc0Vzczp2ZWMzPGYzMj4gPSBGciAqIGZhYi54ICsgc3BlY3VsYXJGOTAgKiBmYWIueTtcclxuICAgICAgIGxldCBFc3M6ZjMyID0gZmFiLnggKyBmYWIueTtcclxuICAgICAgIGxldCBFbXM6ZjMyID0gMS4wIC0gRXNzO1xyXG4gICAgICAgbGV0IEZhdmc6dmVjMzxmMzI+ID0gRnIgKyAoIDEuMCAtIEZyICkgKiAwLjA0NzYxOTtcclxuICAgICAgIGxldCBGbXM6dmVjMzxmMzI+ID0gRnNzRXNzICogRmF2ZyAvICggMS4wIC0gRW1zICogRmF2ZyApO1xyXG4gICAgLy8gICAgc2luZ2xlU2NhdHRlciArPSBGc3NFc3M7XHJcbiAgICAvLyAgICBtdWx0aVNjYXR0ZXIgKz0gRm1zICogRW1zO1xyXG4gICAgICAgbXVsdGlBbmRTaW5nbGVTY2F0dGVyLm11bHRpU2NhdHRlcj1GbXMgKiBFbXM7XHJcbiAgICAgICBtdWx0aUFuZFNpbmdsZVNjYXR0ZXIuc2luZ2xlU2NhdHRlcj1Gc3NFc3M7XHJcbiAgICAgICByZXR1cm4gbXVsdGlBbmRTaW5nbGVTY2F0dGVyO1xyXG4gICB9XHJcbiAgIC8v55u05o6l5YWJ54WnXHJcbiAgIGZuIFJFX0RpcmVjdF9QaHlzaWNhbCggZGlyZWN0TGlnaHQ6SW5jaWRlbnRMaWdodCwgZ2VvbWV0cnk6R2VvbWV0cmljQ29udGV4dCwgIG1hdGVyaWFsOlBoeXNpY2FsTWF0ZXJpYWwpLT5SZWZsZWN0ZWRMaWdodCB7XHJcbiAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ7XHJcbiAgICAgICBsZXQgZG90Tkw6ZjMyID0gc2F0dXJhdGUoZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbikpO1xyXG4gICAgICAgbGV0IGlycmFkaWFuY2U6dmVjMzxmMzI+ID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcclxuICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cclxuICAgICAgICAgICBsZXQgZG90TkxjYzpmMzIgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XHJcbiAgICAgICAgICAgbGV0IGNjSXJyYWRpYW5jZTp2ZWMzPGYzMj4gPSBkb3ROTGNjICogZGlyZWN0TGlnaHQuY29sb3I7XHJcbiAgICAgICAgICAgY2xlYXJjb2F0U3BlY3VsYXIgKz0gY2NJcnJhZGlhbmNlICogQlJERl9HR1goIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbC5jbGVhcmNvYXRGMCwgbWF0ZXJpYWwuY2xlYXJjb2F0RjkwLCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKTtcclxuICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOfVxyXG4gICAgICAgICAgIHNoZWVuU3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIEJSREZfU2hlZW4oIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsLCBtYXRlcmlhbC5zaGVlbkNvbG9yLCBtYXRlcmlhbC5zaGVlblJvdWdobmVzcyApO1xyXG4gICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0V9XHJcbiAgICAgICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgPSBpcnJhZGlhbmNlICogQlJERl9HR1hfSXJpZGVzY2VuY2UoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckY5MCwgbWF0ZXJpYWwuaXJpZGVzY2VuY2UsIG1hdGVyaWFsLmlyaWRlc2NlbmNlRnJlc25lbCwgbWF0ZXJpYWwucm91Z2huZXNzICk7XHJcbiAgICAgICAjZWxzZVxyXG4gICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyID0gaXJyYWRpYW5jZSAqIEJSREZfR0dYKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsIG1hdGVyaWFsLnJvdWdobmVzcyApO1xyXG4gICAgICAgI2VuZGlmXHJcbiAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlID0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XHJcbiAgICAgICByZXR1cm4gcmVmbGVjdGVkTGlnaHQ7XHJcbiAgIH1cclxuICAgLy/pl7TmjqXlhYnnhadcclxuICAgZm4gUkVfSW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsKCBpcnJhZGlhbmNlOnZlYzM8ZjMyPiwgZ2VvbWV0cnk6R2VvbWV0cmljQ29udGV4dCwgbWF0ZXJpYWw6UGh5c2ljYWxNYXRlcmlhbCApLT5SZWZsZWN0ZWRMaWdodCB7XHJcbiAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ7XHJcbiAgICAgICByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcclxuICAgICAgIHJldHVybiByZWZsZWN0ZWRMaWdodDtcclxuICAgfVxyXG4gICAvL+mXtOaOpemrmOWFiVxyXG4gICBmbiBSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKCByYWRpYW5jZTp2ZWMzPGYzMj4sIGlycmFkaWFuY2U6dmVjMzxmMzI+LCBjbGVhcmNvYXRSYWRpYW5jZTp2ZWMzPGYzMj4sIGdlb21ldHJ5Okdlb21ldHJpY0NvbnRleHQsIG1hdGVyaWFsOlBoeXNpY2FsTWF0ZXJpYWwpLT5SZWZsZWN0ZWRMaWdodCB7XHJcbiAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ7XHJcbiAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVR9XHJcbiAgICAgICAgICAgY2xlYXJjb2F0U3BlY3VsYXIgKz0gY2xlYXJjb2F0UmFkaWFuY2UgKiBFbnZpcm9ubWVudEJSREYoIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciwgbWF0ZXJpYWwuY2xlYXJjb2F0RjAsIG1hdGVyaWFsLmNsZWFyY29hdEY5MCwgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICk7XHJcbiAgICAgICAjZW5kaWZcclxuICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOfVxyXG4gICAgICAgICAgIHNoZWVuU3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIG1hdGVyaWFsLnNoZWVuQ29sb3IgKiBJQkxTaGVlbkJSREYoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciwgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKTtcclxuICAgICAgICNlbmRpZlxyXG4gICAgICAgdmFyIHNpbmdsZVNjYXR0ZXJpbmc6dmVjMzxmMzI+O1xyXG4gICAgICAgdmFyIG11bHRpU2NhdHRlcmluZzp2ZWMzPGYzMj47XHJcbiAgICAgICBsZXQgY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlOnZlYzM8ZjMyPiA9IGlycmFkaWFuY2UgKiBSRUNJUFJPQ0FMX1BJO1xyXG4gICAgICAgdmFyIHRlbXBNdWx0aUFuZFNpbmdsZVNjYXR0ZXI6TXVsdGlBbmRTaW5nbGVTY2F0dGVyO1xyXG4gICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0V9XHJcbiAgICAgICAgICAgICB0ZW1wTXVsdGlBbmRTaW5nbGVTY2F0dGVyPWNvbXB1dGVNdWx0aXNjYXR0ZXJpbmdJcmlkZXNjZW5jZSggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckY5MCwgbWF0ZXJpYWwuaXJpZGVzY2VuY2UsIG1hdGVyaWFsLmlyaWRlc2NlbmNlRnJlc25lbCwgbWF0ZXJpYWwucm91Z2huZXNzICk7XHJcbiAgICAgICAjZWxzZVxyXG4gICAgICAgICAgICB0ZW1wTXVsdGlBbmRTaW5nbGVTY2F0dGVyPSBjb21wdXRlTXVsdGlzY2F0dGVyaW5nKCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLCBtYXRlcmlhbC5yb3VnaG5lc3MgKTtcclxuICAgICAgICNlbmRpZlxyXG4gICAgICAgc2luZ2xlU2NhdHRlcmluZz10ZW1wTXVsdGlBbmRTaW5nbGVTY2F0dGVyLnNpbmdsZVNjYXR0ZXI7IFxyXG4gICAgICAgbXVsdGlTY2F0dGVyaW5nPXRlbXBNdWx0aUFuZFNpbmdsZVNjYXR0ZXIubXVsdGlTY2F0dGVyO1xyXG4gICAgICAgbGV0IHRvdGFsU2NhdHRlcmluZzp2ZWMzPGYzMj4gPSBzaW5nbGVTY2F0dGVyaW5nICsgbXVsdGlTY2F0dGVyaW5nO1xyXG4gICAgICAgbGV0IGRpZmZ1c2U6dmVjMzxmMzI+ID0gbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogKCAxLjAgLSBtYXgoIG1heCggdG90YWxTY2F0dGVyaW5nLnIsIHRvdGFsU2NhdHRlcmluZy5nICksIHRvdGFsU2NhdHRlcmluZy5iICkgKTtcclxuICAgICAgIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgPSByYWRpYW5jZSAqIHNpbmdsZVNjYXR0ZXJpbmc7XHJcbiAgICAgICByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyID0gbXVsdGlTY2F0dGVyaW5nICogY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlO1xyXG4gICAgICAgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlID0gZGlmZnVzZSAqIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZTtcclxuICAgICAgIHJldHVybiByZWZsZWN0ZWRMaWdodDtcclxuICAgfVxyXG4gICBgO1xyXG59XHJcbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGJyU3RydWN0KGRlZmluZXMpIHtcclxuICByZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2BcclxuICAgICAgICBzdHJ1Y3QgTWF0ZXJpYWxVbmlmb3Jte1xyXG5cclxuICAgICAgICAgICAgbW9kZWxNYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgXHJcbiAgICAgICAgICAgIGRpZmZ1c2U6dmVjMzxmMzI+LFxyXG4gICAgXHJcbiAgICAgICAgICAgIG9wYWNpdHk6ZjMyLFxyXG4gICAgXHJcbiAgICAgICAgICAgIG5vcm1hbE1hdHJpeDogbWF0M3gzPGYzMj4sXHJcbiAgICBcclxuICAgICAgICAgICAgZW1pc3NpdmU6dmVjMzxmMzI+LFxyXG4gICAgXHJcbiAgICAgICAgICAgIHJvdWdobmVzczpmMzIsXHJcbiAgICBcclxuICAgICAgICAgICAgbWV0YWxuZXNzOmYzMixcclxuICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlRPTkVfTUFQUElOR31cclxuICAgICAgICAgICAgICAgIHRvbmVNYXBwaW5nRXhwb3N1cmU6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5TUEVDVUxBUn1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgIHNwZWN1bGFyQ29sb3I6dmVjMzxmMzI+LFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgc3BlY3VsYXJJbnRlbnNpdHk6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBzaGVlbkNvbG9yOnZlYzM8ZjMyPixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgc2hlZW5Sb3VnaG5lc3M6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RSQU5TTUlTU0lPTn1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgYXR0ZW51YXRpb25Db2xvcjp2ZWMzPGYzMj4sXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHRyYW5zbWlzc2lvbjpmMzIsXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHRyYW5zbWlzc2lvblNhbXBsZXJTaXplOnZlYzI8ZjMyPixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpY2tuZXNzOmYzMixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgYXR0ZW51YXRpb25EaXN0YW5jZTpmMzIsXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TS0lOTklOR31cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgYmluZE1hdHJpeDptYXQ0eDQ8ZjMyPixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgYmluZE1hdHJpeEludmVyc2U6bWF0NHg0PGYzMj4sXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGJvbmVUZXh0dXJlU2l6ZTp1MzIsXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICBub3JtYWxTY2FsZTp2ZWMyPGYzMj4sXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuSU9SfVxyXG4gICAgICAgICAgICAgICAgaW9yOmYzMixcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICBcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVRfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICAgICBjbGVhcmNvYXROb3JtYWxTY2FsZTp2ZWMyPGYzMj4sXHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgIGNsZWFyY29hdDpmMzIsXHJcbiAgICBcclxuICAgICAgICAgICAgICAgICBjbGVhcmNvYXRSb3VnaG5lc3M6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JUklERVNDRU5DRX1cclxuICAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlOmYzMixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaXJpZGVzY2VuY2VJT1I6ZjMyLFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW06ZjMyLFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW06ZjMyLFxyXG4gICAgXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQU9URVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgIGFvVGV4dHVyZUludGVuc2l0eTpmMzIsXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTElHSFRURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgIGxpZ2h0VGV4dHVyZUludGVuc2l0eTpmMzIsXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0VOVlRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBlbnZUZXh0dXJlSW50ZW5zaXR5OmYzMixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZmxpcEVudlRleHR1cmU6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0JVTVBURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgYnVtcFNjYWxlOmYzMjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9ESVNQTEFDRU1FTlRURVhUVVJFfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBkaXNwbGFjZW1lbnRTY2FsZTpmMzIsXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGRpc3BsYWNlbWVudEJpYXM6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX01PUlBIVEFSR0VUU31cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlOmYzMixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5NT1JQSFRBUkdFVFNfVEVYVFVSRX0gXHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICBtb3JwaFRhcmdldHNUZXh0dXJlU2l6ZTp2ZWMyPHUzMj4sXHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICBNT1JQSFRBUkdFVFNfQ09VTlQ6dTMyLFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgbW9ycGhUYXJnZXRJbmZsdWVuY2VzOmFycmF5PGYzMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgIH1cclxuXHJcbiAgIGA7XHJcbn1cclxuIiwiaW1wb3J0IHsgd2dzbFBhcnNlRGVmaW5lcyB9IGZyb20gXCIuLi8uLi9XZ3NsUHJlcHJvY2Vzc29yXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYnJUZXh0dXJlKGRlZmluZXMpIHtcclxuICByZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2AgICAgICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9CVU1QVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYnVtcFRleHR1cmVCaW5kaW5nfSkgdmFyIGJ1bXBUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UUkFOU01JU1NJT059XHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UUkFOU01JU1NJT05URVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMudHJhbnNtaXNzaW9uVGV4dHVyZUJpbmRpbmd9KSB2YXIgdHJhbnNtaXNzaW9uVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9USElDS05FU1NURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMudGhpY2tuZXNzVGV4dHVyZUJpbmRpbmd9KSB2YXIgdGhpY2tuZXNzVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnRyYW5zbWlzc2lvblNhbXBsZXJUZXh0dXJlQmluZGluZ30pIHZhciB0cmFuc21pc3Npb25TYW1wbGVyVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRU5WVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuZW52VGV4dHVyZUJpbmRpbmd9KSB2YXIgZW52VGV4dHVyZTogdGV4dHVyZV9jdWJlPGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9OT1JNQUxURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5ub3JtYWxUZXh0dXJlQmluZGluZ30pIHZhciBub3JtYWxUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuY2xlYXJjb2F0VGV4dHVyZUJpbmRpbmd9KSB2YXIgY2xlYXJjb2F0VGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5jbGVhcmNvYXRSY2xlYXJjb2F0Um91Z2huZXNzVGV4dHVyZUJpbmRpbmd9KSB2YXIgY2xlYXJjb2F0Um91Z2huZXNzVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVF9OT1JNQUxURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5jbGVhcmNvYXROb3JtYWxUZXh0dXJlQmluZGluZ30pIHZhciBjbGVhcmNvYXROb3JtYWxUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0VURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5pcmlkZXNjZW5jZVRleHR1cmVCaW5kaW5nfSkgdmFyIGlyaWRlc2NlbmNlVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFX1RISUNLTkVTU1RFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmlyaWRlc2NlbmNlVGhpY2tuZXNzVGV4dHVyZUJpbmRpbmd9KSB2YXIgaXJpZGVzY2VuY2VUaGlja25lc3NUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfUk9VR0hORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMucm91Z2huZXNzVGV4dHVyZUJpbmRpbmd9KSB2YXIgcm91Z2huZXNzVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX01FVEFMTkVTU1RFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLm1ldGFsbmVzc1RleHR1cmVCaW5kaW5nfSkgdmFyIG1ldGFsbmVzc1RleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlNQRUNVTEFSfVxyXG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU1BFQ1VMQVJJTlRFTlNJVFlURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuc3BlY3VsYXJJbnRlbnNpdHlUZXh0dXJlQmluZGluZ30pIHZhciBzcGVjdWxhckludGVuc2l0eVRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NQRUNVTEFSQ09MT1JURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuc3BlY3VsYXJDb2xvclRleHR1cmVCaW5kaW5nfSkgdmFyIHNwZWN1bGFyQ29sb3JUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTn1cclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOQ09MT1JURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuc2hlZW5Db2xvclRleHR1cmVCaW5kaW5nfSkgdmFyIHNoZWVuQ29sb3JUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOUk9VR0hORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnNoZWVuUm91Z2huZXNzVGV4dHVyZUJpbmRpbmd9KSB2YXIgc2hlZW5Sb3VnaG5lc3NUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9URVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5iYXNlU2FtcGxlckJpbmRpbmd9KSB2YXIgYmFzZVNhbXBsZXI6IHNhbXBsZXI7XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmJhc2VUZXh0dXJlQmluZGluZ30pIHZhciBiYXNlVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0FMUEhBVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYWxwaGFUZXh0dXJlQmluZGluZ30pIHZhciBhbHBoYVRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9BT1RFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmFvVGV4dHVyZUJpbmRpbmd9KSB2YXIgYW9UZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0xJR0hUVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMubGlnaHRUZXh0dXJlQmluZGluZ30pIHZhciBsaWdodFRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9FTUlTU0lWRVRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmVtaXNzaXZlVGV4dHVyZUJpbmRpbmd9KSB2YXIgZW1pc3NpdmVUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgIGA7XHJcbn1cclxuIiwiaW1wb3J0IHsgd2dzbFBhcnNlRGVmaW5lcyB9IGZyb20gXCIuLi8uLi9XZ3NsUHJlcHJvY2Vzc29yXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYnJVdGlscyhkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIHdnc2xQYXJzZURlZmluZXNgXHJcbiAgICBjb25zdCBQSTpmMzI9IDMuMTQxNTkyNjUzNTg5NzkzO1xyXG4gICAgY29uc3QgUEkyOmYzMj0gNi4yODMxODUzMDcxNzk1ODY7XHJcbiAgICBjb25zdCBQSV9IQUxGOmYzMj0gMS41NzA3OTYzMjY3OTQ4OTY2O1xyXG4gICAgY29uc3QgUkVDSVBST0NBTF9QSTpmMzI9IDAuMzE4MzA5ODg2MTgzNzkwNztcclxuICAgIGNvbnN0IFJFQ0lQUk9DQUxfUEkyOmYzMj0gMC4xNTkxNTQ5NDMwOTE4OTUzNTtcclxuICAgIGNvbnN0IEVQU0lMT046ZjMyPSAxZS02O1xyXG5cclxuICAgIGZuIHBvdzIoeDpmMzIgKS0+ZjMyIHtcclxuICAgICAgICByZXR1cm4geCp4O1xyXG4gICAgfVxyXG4gICAgZm4gcG93MlZlY3Rvcih4OnZlYzM8ZjMyPiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgIHJldHVybiB4Kng7XHJcbiAgICB9XHJcbiAgICBmbiBwb3czKCB4OmYzMiApLT5mMzIge1xyXG4gICAgICAgIHJldHVybiB4KngqeDtcclxuICAgIH1cclxuICAgIGZuIHBvdzQoIHg6ZjMyICktPmYzMiB7XHJcbiAgICAgICAgbGV0IHgyOmYzMiA9IHgqeDtcclxuICAgICAgICByZXR1cm4geDIqeDI7XHJcbiAgICB9XHJcbiAgICBmbiBtYXgzKCB2OnZlYzM8ZjMyPiApLT5mMzIge1xyXG4gICAgICAgIHJldHVybiBtYXgoIG1heCggdi54LCB2LnkgKSwgdi56ICk7XHJcbiAgICB9XHJcbiAgICBmbiBhdmVyYWdlKHY6dmVjMzxmMzI+ICktPmYzMiB7XHJcbiAgICAgICAgcmV0dXJuIGRvdCggdiwgdmVjMzxmMzI+KCAwLjMzMzMzMzMgKSApO1xyXG4gICAgfVxyXG4gICAgZm4gcmFuZCggdXY6dmVjMjxmMzI+ICktPmYzMiB7XHJcbiAgICAgICAgbGV0IGE6ZjMyID0gMTIuOTg5ODtcclxuICAgICAgICBsZXQgYjpmMzIgPSA3OC4yMzM7XHJcbiAgICAgICAgbGV0IGM6ZjMyID0gNDM3NTguNTQ1MztcclxuICAgICAgICBsZXQgZHQ6ZjMyID0gZG90KCB1di54eSwgdmVjMjxmMzI+KCBhLCBiICkgKTtcclxuICAgICAgICBsZXQgc246ZjMyID0gZHQgJSBQSTtcclxuICAgICAgICByZXR1cm4gZnJhY3QoIHNpbiggc24gKSAqIGMgKTtcclxuICAgIH1cclxuICAgIGZuIHRyYW5zZm9ybURpcmVjdGlvbiggZGlyOnZlYzM8ZjMyPiwgbWF0cml4Om1hdDR4NDxmMzI+ICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZSggKCBtYXRyaXggKiB2ZWM0PGYzMj4oIGRpciwgMC4wICkgKS54eXogKTtcclxuICAgIH1cclxuXHJcbiAgICBmbiB0cmFuc3Bvc2VNYXQzKCBtOm1hdDN4MzxmMzI+ICktPm1hdDN4MzxmMzI+IHtcclxuICAgICAgICB2YXIgdG1wOm1hdDN4MzxmMzI+O1xyXG4gICAgICAgIHRtcFsgMCBdID0gdmVjMzxmMzI+KCBtWyAwIF0ueCwgbVsgMSBdLngsIG1bIDIgXS54ICk7XHJcbiAgICAgICAgdG1wWyAxIF0gPSB2ZWMzPGYzMj4oIG1bIDAgXS55LCBtWyAxIF0ueSwgbVsgMiBdLnkgKTtcclxuICAgICAgICB0bXBbIDIgXSA9IHZlYzM8ZjMyPiggbVsgMCBdLnosIG1bIDEgXS56LCBtWyAyIF0ueiApO1xyXG4gICAgICAgIHJldHVybiB0bXA7XHJcbiAgICB9XHJcbiAgICBmbiBsdW1pbmFuY2UoIHJnYjp2ZWMzPGYzMj4gKS0+ZjMyIHtcclxuICAgICAgICBsZXQgd2VpZ2h0czp2ZWMzPGYzMj4gPSB2ZWMzPGYzMj4oMC4yMTI2NzI5LCAwLjcxNTE1MjIsIDAuMDcyMTc1MCApO1xyXG4gICAgICAgIHJldHVybiBkb3QoIHdlaWdodHMsIHJnYiApO1xyXG4gICAgfVxyXG4gICAgZm4gTGluZWFyVG9uZU1hcHBpbmcoIGNvbG9yOnZlYzM8ZjMyPix0b25lTWFwcGluZ0V4cG9zdXJlOmYzMiAgKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICByZXR1cm4gdG9uZU1hcHBpbmdFeHBvc3VyZSAqIGNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGZuIFJlaW5oYXJkVG9uZU1hcHBpbmcoIGNvbG9yOnZlYzM8ZjMyPix0b25lTWFwcGluZ0V4cG9zdXJlOmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgIHZhciB0ZW1wQ29sb3I6dmVjMzxmMzI+O1xyXG4gICAgICAgIHRlbXBDb2xvcj1jb2xvcjtcclxuICAgICAgICB0ZW1wQ29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcclxuICAgICAgICByZXR1cm4gc2F0dXJhdGUoIHRlbXBDb2xvciAvICggdmVjMzxmMzI+KCAxLjAgKSArIHRlbXBDb2xvciApICk7XHJcbiAgICB9XHJcbiAgICBmbiBDdXN0b21Ub25lTWFwcGluZyggY29sb3I6dmVjMzxmMzI+ICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgcmV0dXJuIGNvbG9yO1xyXG4gICAgfVxyXG4gICAgZm4gdG9uZU1hcHBpbmcoIGNvbG9yOnZlYzM8ZjMyPix0b25lTWFwcGluZ0V4cG9zdXJlOmYzMiAgKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICByZXR1cm4gUmVpbmhhcmRUb25lTWFwcGluZyggY29sb3IsdG9uZU1hcHBpbmdFeHBvc3VyZSApO1xyXG4gICAgfVxyXG5cclxuICAgIGZuIExpbmVhclRvTGluZWFyKCB2YWx1ZTp2ZWM0PGYzMj4gKS0+dmVjNDxmMzI+IHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBmbiBsZXNzVGhhbkVxdWFsKGE6dmVjMzxmMzI+LGI6dmVjMzxmMzI+KS0+dmVjMzxmMzI+e1xyXG4gICAgICAgbGV0IHhWYWx1ZTpmMzI9c2VsZWN0KGIueCxhLngsYS54PD1iLngpO1xyXG4gICAgICAgbGV0IHlWYWx1ZTpmMzI9c2VsZWN0KGIueSxhLnksYS55PD1iLnkpO1xyXG4gICAgICAgbGV0IHpWYWx1ZTpmMzI9c2VsZWN0KGIueixhLnosYS56PD1iLnopO1xyXG4gICAgICAgcmV0dXJuIHZlYzM8ZjMyPih4VmFsdWUseVZhbHVlLHpWYWx1ZSk7ICAgIFxyXG4gICAgfVxyXG4gICAgZm4gTGluZWFyVG9zUkdCKCB2YWx1ZTp2ZWM0PGYzMj4gKS0+dmVjNDxmMzI+IHtcclxuICAgICAgICByZXR1cm4gdmVjNDxmMzI+KCBtaXgoIHBvdyggdmFsdWUucmdiLCB2ZWMzPGYzMj4oIDAuNDE2NjYgKSApICogMS4wNTUgLSB2ZWMzPGYzMj4oIDAuMDU1ICksIHZhbHVlLnJnYiAqIDEyLjkyLCB2ZWMzPGYzMj4oIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMzxmMzI+KCAwLjAwMzEzMDggKSApICkgKSwgdmFsdWUuYSApO1xyXG4gICAgfVxyXG4gICAgZm4gbGluZWFyVG9PdXRwdXRUZXhlbCh2YWx1ZTp2ZWM0PGYzMj4gKS0+dmVjNDxmMzI+IHtcclxuICAgICAgICByZXR1cm4gTGluZWFyVG9zUkdCKCB2YWx1ZSApO1xyXG4gICAgfVxyXG4gICAgYDtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwaG9uZ0Z1bmN0aW9uKGRlZmluZXMpIHtcclxuICByZXR1cm4gYFxyXG4gICAgZm4gR19CbGlublBob25nX0ltcGxpY2l0KCApLT5mMzIge1xyXG5cclxuICAgICAgICAvLyBnZW9tZXRyeSB0ZXJtIGlzIChuIGRvdCBsKShuIGRvdCB2KSAvIDQobiBkb3QgbCkobiBkb3QgdilcclxuICAgICAgICByZXR1cm4gMC4yNTtcclxuXHJcbiAgICB9XHJcbiAgICBmbiBEX0JsaW5uUGhvbmcoIHNoaW5pbmVzczpmMzIsIGRvdE5IOmYzMiApLT5mMzIge1xyXG5cclxuICAgICAgICByZXR1cm4gUkVDSVBST0NBTF9QSSAqICggc2hpbmluZXNzICogMC41ICsgMS4wICkgKiBwb3coZG90TkgsIHNoaW5pbmVzcyk7XHJcblxyXG4gICAgfVxyXG4gICAgZm4gQlJERl9CbGlublBob25nKCBsaWdodERpcjp2ZWMzPGYzMj4sIHZpZXdEaXI6dmVjMzxmMzI+LCBub3JtYWw6dmVjMzxmMzI+LCBzcGVjdWxhckNvbG9yOnZlYzM8ZjMyPiwgc2hpbmluZXNzOmYzMiApLT52ZWMzPGYzMj4ge1xyXG5cclxuICAgICAgICBsZXQgIGhhbGZEaXIgPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xyXG5cclxuICAgICAgICBsZXQgIGRvdE5IOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XHJcbiAgICAgICAgbGV0IGRvdFZIOmYzMiA9IHNhdHVyYXRlKCBkb3QoIHZpZXdEaXIsIGhhbGZEaXIgKSApO1xyXG5cclxuICAgICAgICBsZXQgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgMS4wLCBkb3RWSCApO1xyXG5cclxuICAgICAgICBsZXQgRzpmMzIgPSBHX0JsaW5uUGhvbmdfSW1wbGljaXQoICk7XHJcblxyXG4gICAgICAgIGxldCBEID0gRF9CbGlublBob25nKCBzaGluaW5lc3MsIGRvdE5IICk7XHJcblxyXG4gICAgICAgIHJldHVybiBGICogKCBHICogRCApO1xyXG5cclxuICAgIH0gXHJcbiAgICBmbiBSRV9EaXJlY3RfQmxpbm5QaG9uZyggIGRpcmVjdExpZ2h0OkluY2lkZW50TGlnaHQsZ2VvbWV0cnk6R2VvbWV0cmljQ29udGV4dCwgbWF0ZXJpYWw6Qmxpbm5QaG9uZ01hdGVyaWFsICktPlJlZmxlY3RlZExpZ2h0e1xyXG4gICAgICAgIHZhciByZWZsZWN0ZWRMaWdodDpSZWZsZWN0ZWRMaWdodDsgXHJcbiAgICAgICAgbGV0IGRvdE5MOmYzMiA9IHNhdHVyYXRlKGRvdChnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbikpO1xyXG4gICAgICAgIGxldCBpcnJhZGlhbmNlOnZlYzM8ZjMyPiA9IGRvdE5MKmRpcmVjdExpZ2h0LmNvbG9yO1xyXG5cclxuICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcclxuXHJcbiAgICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXI9IGlycmFkaWFuY2UgKiBCUkRGX0JsaW5uUGhvbmcoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyApICogbWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aDtcclxuICAgICAgICByZXR1cm4gcmVmbGVjdGVkTGlnaHQ7XHJcbiAgICB9XHJcbiAgICBmbiBSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZyggaXJyYWRpYW5jZTp2ZWMzPGYzMj4sIGdlb21ldHJ5Okdlb21ldHJpY0NvbnRleHQsIG1hdGVyaWFsOkJsaW5uUGhvbmdNYXRlcmlhbCktPlJlZmxlY3RlZExpZ2h0IHtcclxuICAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ7IFxyXG4gICAgICAgIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcclxuICAgICAgICByZXR1cm4gcmVmbGVjdGVkTGlnaHQ7XHJcbiAgICB9XHJcbiAgICBgO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBob25nVXRpbHMoZGVmaW5lcykge1xyXG4gIHJldHVybiBgXHJcbiAgIHN0cnVjdCBCbGlublBob25nTWF0ZXJpYWwge1xyXG4gICAgICAgIGRpZmZ1c2VDb2xvcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgc3BlY3VsYXJDb2xvcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgc3BlY3VsYXJTaGluaW5lc3M6ZjMyLFxyXG4gICAgICAgIHNwZWN1bGFyU3RyZW5ndGg6ZjMyLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IFJFQ0lQUk9DQUxfUEk6ZjMyPSAwLjMxODMwOTg4NjE4Mzc5MDc7XHJcbiAgIGZuIHBvdzIoIHg6ZjMyICktPmYzMiB7IHJldHVybiB4Kng7IH1cclxuICAgZm4gcG93MyggeDpmMzIgKS0+ZjMyIHsgcmV0dXJuIHgqeCp4OyB9XHJcbiAgIGZuIHBvdzQoeDpmMzIgKS0+ZjMyIHsgbGV0IHgyID0geCp4OyByZXR1cm4geDIqeDI7IH1cclxuICAgZm4gbWF4Myggdjp2ZWMzPGYzMj4gKS0+ZjMyIHsgcmV0dXJuIG1heCggbWF4KCB2LngsIHYueSApLCB2LnogKTsgfVxyXG4gICBmbiBhdmVyYWdlKHY6dmVjMzxmMzI+ICktPmYzMiB7IFxyXG4gICAgICAgbGV0IHJlc3VsdD12ZWMzPGYzMj4oIDAuMzMzMzMzMywgIDAuMzMzMzMzMywgMC4zMzMzMzMzKTtcclxuICAgICAgIHJldHVybiBkb3QoIHYscmVzdWx0ICk7IFxyXG4gICB9XHJcbiAgIGA7XHJcbn1cclxuIiwiaW1wb3J0IHsgd2dzbFBhcnNlRGVmaW5lcyB9IGZyb20gXCIuLi8uLi9XZ3NsUHJlcHJvY2Vzc29yXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVudmlyb25tZW50KGRlZmluZXMpIHtcclxuICByZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2BcclxuICAgI2lmICR7ZGVmaW5lcy5FTlZURVhUVVJFX1RZUEVfQ1VCRV9VVn1cclxuICAgICAgICBjb25zdCBjdWJlVVZfbWluTWlwTGV2ZWw6ZjMyPSA0LjA7XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX21pblRpbGVTaXplOmYzMj0gMTYuMDtcclxuICAgICAgICBjb25zdCBDVUJFVVZfTUFYX01JUDpmMzI9Ni4wO1xyXG4gICAgICAgIGNvbnN0IENVQkVVVl9URVhFTF9XSURUSDpmMzI9MS4wLzI1Ni4wO1xyXG4gICAgICAgIGNvbnN0IENVQkVVVl9URVhFTF9IRUlHSFQ6ZjMyPTEuMC8yNTYuMDtcclxuICAgICAgICBmbiBnZXRGYWNlKGRpcmVjdGlvbjp2ZWMzPGYzMj4gKS0+ZjMyIHtcclxuICAgICAgICAgICAgbGV0IGFic0RpcmVjdGlvbjp2ZWMzPGYzMj4gPSBhYnMoIGRpcmVjdGlvbiApO1xyXG4gICAgICAgICAgICB2YXIgZmFjZTpmMzIgPSAtIDEuMDtcclxuICAgICAgICAgICAgaWYgKCBhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi56ICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCBhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi55ICl7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZSA9c2VsZWN0KDMuMCwwLjAsZGlyZWN0aW9uLnggPiAwLjApO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZSA9c2VsZWN0KDQuMCwxLjAsZGlyZWN0aW9uLnkgPiAwLjApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIGFic0RpcmVjdGlvbi56ID4gYWJzRGlyZWN0aW9uLnkgKXtcclxuICAgICAgICAgICAgICAgICAgICBmYWNlID1zZWxlY3QoNS4wLDIuMCxkaXJlY3Rpb24ueiA+IDAuMCk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBmYWNlID1zZWxlY3QoNC4wLDEuMCxkaXJlY3Rpb24ueSA+IDAuMCk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBnZXRVViggZGlyZWN0aW9uOnZlYzM8ZjMyPiwgZmFjZTpmMzIgKS0+dmVjMjxmMzI+IHtcclxuICAgICAgICAgICAgdmFyIHV2OnZlYzI8ZjMyPjtcclxuICAgICAgICAgICAgaWYgKCBmYWNlID09IDAuMCApIHtcclxuICAgICAgICAgICAgICAgIHV2ID0gdmVjMjxmMzI+KCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnggKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICggZmFjZSA9PSAxLjAgKSB7XHJcbiAgICAgICAgICAgICAgICB1diA9IHZlYzI8ZjMyPiggLSBkaXJlY3Rpb24ueCwgLSBkaXJlY3Rpb24ueiApIC8gYWJzKCBkaXJlY3Rpb24ueSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCBmYWNlID09IDIuMCApIHtcclxuICAgICAgICAgICAgICAgIHV2ID0gdmVjMjxmMzI+KCAtIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueiApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCBmYWNlID09IDMuMCApIHtcclxuICAgICAgICAgICAgICAgIHV2ID0gdmVjMjxmMzI+KCAtIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueCApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCBmYWNlID09IDQuMCApIHtcclxuICAgICAgICAgICAgICAgIHV2ID0gdmVjMjxmMzI+KCAtIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueiApIC8gYWJzKCBkaXJlY3Rpb24ueSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXYgPSB2ZWMyPGYzMj4oIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueiApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAwLjUgKiAoIHV2ICsgMS4wICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIGJpbGluZWFyQ3ViZVVWKGVudlRleHR1cmU6dGV4dHVyZV9jdWJlPGYzMj4sYmFzZVNhbXBsZXI6c2FtcGxlcixkaXJlY3Rpb246dmVjMzxmMzI+LCBtaXBJbnQ6ZjMyICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgICAgIHZhciBmYWNlOmYzMiA9IGdldEZhY2UoIGRpcmVjdGlvbiApO1xyXG4gICAgICAgICAgICBsZXQgZmlsdGVySW50OmYzMiA9IG1heCggY3ViZVVWX21pbk1pcExldmVsIC0gbWlwSW50LCAwLjAgKTtcclxuICAgICAgICAgICAgbGV0IHRlbXBNaXBJbnQgPSBtYXgoIG1pcEludCwgY3ViZVVWX21pbk1pcExldmVsICk7XHJcbiAgICAgICAgICAgIGxldCBmYWNlU2l6ZTpmMzIgPSBleHAyKCB0ZW1wTWlwSW50ICk7XHJcbiAgICAgICAgICAgIHZhciB1djp2ZWMyPGYzMj4gPSBnZXRVViggZGlyZWN0aW9uLCBmYWNlICkgKiAoIGZhY2VTaXplIC0gMi4wICkgKyAxLjA7XHJcbiAgICAgICAgICAgIGlmICggZmFjZSA+IDIuMCApIHtcclxuICAgICAgICAgICAgICAgIHV2LnkgKz0gZmFjZVNpemU7XHJcbiAgICAgICAgICAgICAgICBmYWNlIC09IDMuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1di54ICs9IGZhY2UgKiBmYWNlU2l6ZTtcclxuICAgICAgICAgICAgdXYueCArPSBmaWx0ZXJJbnQgKiAzLjAgKiBjdWJlVVZfbWluVGlsZVNpemU7XHJcbiAgICAgICAgICAgIHV2LnkgKz0gNC4wICogKCBleHAyKCBDVUJFVVZfTUFYX01JUCApIC0gZmFjZVNpemUgKTtcclxuICAgICAgICAgICAgdXYueCAqPSBDVUJFVVZfVEVYRUxfV0lEVEg7XHJcbiAgICAgICAgICAgIHV2LnkgKj0gQ1VCRVVWX1RFWEVMX0hFSUdIVDtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVTYW1wbGUoZW52VGV4dHVyZSxiYXNlU2FtcGxlcixkaXJlY3Rpb24pLnJnYjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX3IwOmYzMj0gMS4wO1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl92MDpmMzI9IDAuMzM5O1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl9tMDpmMzI9IC0gMi4wO1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl9yMTpmMzI9IDAuODtcclxuICAgICAgICBjb25zdCBjdWJlVVZfdjE6ZjMyPSAwLjI3NjtcclxuICAgICAgICBjb25zdCBjdWJlVVZfbTE6ZjMyPSAtIDEuMDtcclxuICAgICAgICBjb25zdCBjdWJlVVZfcjQ6ZjMyPSAwLjQ7XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX3Y0OmYzMj0gMC4wNDY7XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX200OmYzMj0gMi4wO1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl9yNTpmMzI9IDAuMzA1O1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl92NTpmMzI9IDAuMDE2O1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl9tNTpmMzI9IDMuMDtcclxuICAgICAgICBjb25zdCBjdWJlVVZfcjY6ZjMyPSAwLjIxO1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl92NjpmMzI9IDAuMDAzODtcclxuICAgICAgICBjb25zdCBjdWJlVVZfbTY6ZjMyPSA0LjA7XHJcbiAgICAgICAgZm4gcm91Z2huZXNzVG9NaXAoIHJvdWdobmVzczpmMzIpLT5mMzIge1xyXG4gICAgICAgICAgICB2YXIgbWlwOmYzMiA9IDAuMDtcclxuICAgICAgICAgICAgaWYgKCByb3VnaG5lc3MgPj0gY3ViZVVWX3IxICkge1xyXG4gICAgICAgICAgICAgICAgbWlwID0gKCBjdWJlVVZfcjAgLSByb3VnaG5lc3MgKSAqICggY3ViZVVWX20xIC0gY3ViZVVWX20wICkgLyAoIGN1YmVVVl9yMCAtIGN1YmVVVl9yMSApICsgY3ViZVVWX20wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCByb3VnaG5lc3MgPj0gY3ViZVVWX3I0ICkge1xyXG4gICAgICAgICAgICAgICAgbWlwID0gKCBjdWJlVVZfcjEgLSByb3VnaG5lc3MgKSAqICggY3ViZVVWX200IC0gY3ViZVVWX20xICkgLyAoIGN1YmVVVl9yMSAtIGN1YmVVVl9yNCApICsgY3ViZVVWX20xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCByb3VnaG5lc3MgPj0gY3ViZVVWX3I1ICkge1xyXG4gICAgICAgICAgICAgICAgbWlwID0gKCBjdWJlVVZfcjQgLSByb3VnaG5lc3MgKSAqICggY3ViZVVWX201IC0gY3ViZVVWX200ICkgLyAoIGN1YmVVVl9yNCAtIGN1YmVVVl9yNSApICsgY3ViZVVWX200O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCByb3VnaG5lc3MgPj0gY3ViZVVWX3I2ICkge1xyXG4gICAgICAgICAgICAgICAgbWlwID0gKCBjdWJlVVZfcjUgLSByb3VnaG5lc3MgKSAqICggY3ViZVVWX202IC0gY3ViZVVWX201ICkgLyAoIGN1YmVVVl9yNSAtIGN1YmVVVl9yNiApICsgY3ViZVVWX201O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWlwID0gLSAyLjAgKiBsb2cyKCAxLjE2ICogcm91Z2huZXNzICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1pcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4gdGV4dHVyZUN1YmVVVihlbnZUZXh0dXJlOnRleHR1cmVfY3ViZTxmMzI+LCBiYXNlU2FtcGxlcjpzYW1wbGVyLHNhbXBsZURpcjp2ZWMzPGYzMj4scm91Z2huZXNzOmYzMiApLT52ZWM0PGYzMj4ge1xyXG4gICAgICAgICAgICBsZXQgbWlwID0gY2xhbXAoIHJvdWdobmVzc1RvTWlwKCByb3VnaG5lc3MgKSwgY3ViZVVWX20wLCBDVUJFVVZfTUFYX01JUCApO1xyXG4gICAgICAgICAgICBsZXQgbWlwRiA9IGZyYWN0KCBtaXAgKTtcclxuICAgICAgICAgICAgbGV0IG1pcEludCA9IGZsb29yKCBtaXAgKTtcclxuICAgICAgICAgICAgbGV0IGNvbG9yMDp2ZWMzPGYzMj4gPSBiaWxpbmVhckN1YmVVViggZW52VGV4dHVyZSxiYXNlU2FtcGxlcixzYW1wbGVEaXIsIG1pcEludCApO1xyXG4gICAgICAgICAgICBpZiAoIG1pcEYgPT0gMC4wICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlYzQ8ZjMyPihjb2xvcjAsIDEuMCApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbG9yMTp2ZWMzPGYzMj4gPSBiaWxpbmVhckN1YmVVViggZW52VGV4dHVyZSxiYXNlU2FtcGxlciwgc2FtcGxlRGlyLCBtaXBJbnQgKyAxLjAgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2ZWM0PGYzMj4obWl4KCBjb2xvcjAsIGNvbG9yMSwgbWlwRiApLCAxLjAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgI2VuZGlmXHJcbiAgICNpZiAke2RlZmluZXMuVVNFX0VOVlRFWFRVUkV9XHJcbiAgICAgICAgZm4gZ2V0SUJMSXJyYWRpYW5jZSggbm9ybWFsOnZlYzM8ZjMyPixiYXNlU2FtcGxlcjpzYW1wbGVyLHZpZXdNYXRyaXg6bWF0NHg0PGYzMj4pLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLkVOVlRFWFRVUkVfVFlQRV9DVUJFX1VWfVxyXG4gICAgICAgICAgICAgICAgbGV0IHdvcmxkTm9ybWFsOnZlYzM8ZjMyPiA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVudlRleHR1cmVDb2xvcjp2ZWM0PGYzMj4gPSB0ZXh0dXJlQ3ViZVVWKCBlbnZUZXh0dXJlLGJhc2VTYW1wbGVyLCB3b3JsZE5vcm1hbCwgMS4wICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUEkgKiBlbnZUZXh0dXJlQ29sb3IucmdiICogbWF0ZXJpYWxVbmlmb3JtLmVudlRleHR1cmVJbnRlbnNpdHk7XHJcbiAgICAgICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmVjMzxmMzI+KCAwLjAgKTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIGdldElCTFJhZGlhbmNlKCB2aWV3RGlyOnZlYzM8ZjMyPixiYXNlU2FtcGxlcjpzYW1wbGVyLHZpZXdNYXRyaXg6bWF0NHg0PGYzMj4sbm9ybWFsOnZlYzM8ZjMyPiwgcm91Z2huZXNzOmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLkVOVlRFWFRVUkVfVFlQRV9DVUJFX1VWfVxyXG4gICAgICAgICAgICAgICAgdmFyIHJlZmxlY3RWZWM6dmVjMzxmMzI+ID0gcmVmbGVjdCggLSB2aWV3RGlyLCBub3JtYWwgKTtcclxuICAgICAgICAgICAgICAgIHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIG1peCggcmVmbGVjdFZlYywgbm9ybWFsLCByb3VnaG5lc3MgKiByb3VnaG5lc3MpICk7XHJcbiAgICAgICAgICAgICAgICByZWZsZWN0VmVjID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggcmVmbGVjdFZlYywgdmlld01hdHJpeCApO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVudlRleHR1cmVDb2xvcjp2ZWM0PGYzMj4gPSB0ZXh0dXJlQ3ViZVVWKCBlbnZUZXh0dXJlLGJhc2VTYW1wbGVyLCByZWZsZWN0VmVjLCByb3VnaG5lc3MgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnZUZXh0dXJlQ29sb3IucmdiICogbWF0ZXJpYWxVbmlmb3JtLmVudlRleHR1cmVJbnRlbnNpdHk7XHJcbiAgICAgICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmVjMzxmMzI+KCAwLjAgKTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIH1cclxuICAgICNlbmRpZlxyXG4gICBgO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJsaW5uX3Bob25nKGRlZmluZXMpIHtcclxuXHRyZXR1cm4gYFxyXG4gICAgICAgZm4gZ2V0UG9pbnRMaWdodEluZm8ocG9pbnRMaWdodDpQb2ludExpZ2h0LHdvcmxkUG9zOnZlYzM8ZjMyPixzaGluaW5lc3M6ZjMyLE46dmVjMzxmMzI+LFY6dmVjMzxmMzI+KS0+dmVjMzxmMzI+e1xyXG4gICAgICAgIHZhciBjb2xvcj12ZWMzPGYzMj4oMC4wLDAuMCwwLjApO1xyXG4gICAgICAgIHZhciBkaXJlY3Rpb246dmVjMzxmMzI+ID0gd29ybGRQb3MgLSBwb2ludExpZ2h0LnBvc2l0aW9uO1xyXG4gICAgICAgIGxldCBkaXN0OmYzMiA9IGxlbmd0aCggZGlyZWN0aW9uICk7XHJcbiAgICAgICAgZGlyZWN0aW9uID0gbm9ybWFsaXplKGRpcmVjdGlvbik7XHJcbiAgICAgICAgbGV0IGRlY2F5ID0gY2xhbXAoMS4wIC0gcG93KGRpc3QgLyBwb2ludExpZ2h0LmRpc3RhbmNlLCA0LjApLCAwLjAsIDEuMCk7XHJcblxyXG4gICAgICAgIGxldCBkID0gIG1heCggZG90KCBOLCAtZGlyZWN0aW9uICksIDAuMCApICogZGVjYXk7XHJcbiAgICAgICAgY29sb3IgKz0gcG9pbnRMaWdodC5jb2xvciAqIGQ7XHJcblxyXG4gICAgICAgIGxldCBoYWxmRGlyOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggViAtIGRpcmVjdGlvbiApO1xyXG4gICAgICAgIGxldCBzOmYzMiA9IHBvdyggY2xhbXAoIGRvdCggTiwgaGFsZkRpciApLCAwLjAsIDEuMCApLCBzaGluaW5lc3MgKSAgKiBkZWNheTtcclxuICAgICAgICBjb2xvciArPSBwb2ludExpZ2h0LmNvbG9yICogcztcclxuICAgICAgICByZXR1cm4gY29sb3I7XHJcbiAgICAgICB9XHJcbiAgICAgICBmbiBnZXRTcG90TGlnaHRJbmZvKHNwb3RMaWdodDpTcG90TGlnaHQsd29ybGRQb3M6dmVjMzxmMzI+LHNoaW5pbmVzczpmMzIsTjp2ZWMzPGYzMj4sVjp2ZWMzPGYzMj4pLT52ZWMzPGYzMj57XHJcbiAgICAgICAgdmFyIGNvbG9yPXZlYzM8ZjMyPigwLjAsMC4wLDAuMCk7XHJcbiAgICAgICAgICAgIHZhciBkaXJlY3Rpb246dmVjMzxmMzI+ID0gc3BvdExpZ2h0LnBvc2l0aW9uIC0gd29ybGRQb3M7XHJcbiAgICAgICAgICAgIGxldCBsaWdodERpc3RhbmNlOmYzMiA9IGxlbmd0aChkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBub3JtYWxpemUoZGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgbGV0IGFuZ2xlQ29zOmYzMiA9IGRvdCggZGlyZWN0aW9uLCAtc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xyXG4gICAgICAgICAgICBsZXQgZGVjYXk6ZjMyID0gY2xhbXAoMS4wIC0gcG93KGxpZ2h0RGlzdGFuY2Uvc3BvdExpZ2h0LmRpc3RhbmNlLCA0LjApLCAwLjAsIDEuMCk7XHJcbiAgICAgICAgICAgIGxldCBzcG90RWZmZWN0OmYzMiA9IHNtb290aHN0ZXAoIHNwb3RMaWdodC5wZW51bWJyYUNvcywgc3BvdExpZ2h0LmNvbmVDb3MsIGFuZ2xlQ29zICk7XHJcbiAgICAgICAgICAgIGxldCBkZWNheVRvdGFsOmYzMiA9IGRlY2F5ICogc3BvdEVmZmVjdDtcclxuICAgICAgICAgICAgbGV0IGQ6ZjMyID0gbWF4KCBkb3QoIE4sIGRpcmVjdGlvbiApLCAwLjAgKSAgKiBkZWNheVRvdGFsO1xyXG4gICAgICAgICAgICBjb2xvciArPSBzcG90TGlnaHQuY29sb3IgKiBkO1xyXG4gICAgICAgICAgICBsZXQgaGFsZkRpcjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIFYgKyBkaXJlY3Rpb24gKTtcclxuICAgICAgICAgICAgbGV0IHM6ZjMyID0gcG93KCBjbGFtcCggZG90KCBOLCBoYWxmRGlyICksIDAuMCwgMS4wICksIHNoaW5pbmVzcyApICogZGVjYXlUb3RhbDtcclxuICAgICAgICAgICAgY29sb3IgKz0gc3BvdExpZ2h0LmNvbG9yICogcztcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xyXG4gICAgICAgfVxyXG4gICAgc3RydWN0IERpcmVjdGlvbmFsTGlnaHQge1xyXG4gICAgICAgIGRpcmVjdGlvbjogdmVjMzxmMzI+LFxyXG4gICAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXHJcbiAgICB9O1xyXG4gICAgICBmbiBnZXREaXJlY3RMaWdodEluZm8oZGlyZWN0aW9uYWxMaWdodDpEaXJlY3Rpb25hbExpZ2h0LHNoaW5pbmVzczpmMzIsTjp2ZWMzPGYzMj4sVjp2ZWMzPGYzMj4pLT52ZWMzPGYzMj57XHJcbiAgICAgICAgdmFyIGNvbG9yPXZlYzM8ZjMyPigwLjAsMC4wLDAuMCk7XHJcbiAgICAgICAgbGV0IGQ6ZjMyID0gbWF4KGRvdChOLCAtZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb24pLCAwLjApO1xyXG4gICAgICAgIGNvbG9yICs9IGRpcmVjdGlvbmFsTGlnaHQuY29sb3IgKiBkO1xyXG5cclxuICAgICAgICBsZXQgaGFsZkRpcjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIFYgLSBkaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbiApO1xyXG4gICAgICAgIGxldCBzOmYzMiA9IHBvdyggY2xhbXAoIGRvdCggTiwgaGFsZkRpciApLCAwLjAsIDEuMCApLCBzaGluaW5lc3MgKTtcclxuICAgICAgICBjb2xvciArPSBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yICogcztcclxuICAgICAgICByZXR1cm4gY29sb3I7XHJcbiAgICAgICB9XHJcbiAgICBgO1xyXG59XHJcbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpYmwoZGVmaW5lcykge1xyXG5cdHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxyXG4gIGZuIGdldExpZ2h0UHJvYmVSYWRpYW5jZSggdmlld0Rpcjp2ZWMzPGYzMj4sbm9ybWFsOnZlYzM8ZjMyPiwgcm91Z2huZXNzOmYzMiApLT52ZWMzPGYzMj57XHJcbiAgICB2YXIgcmVmbGVjdFZlYzp2ZWMzPGYzMj4gPSByZWZsZWN0KCAtdmlld0Rpciwgbm9ybWFsICk7XHJcbiAgICByZWZsZWN0VmVjLnggPSAtcmVmbGVjdFZlYy54OyAvLyBUZXh0dXJlQ3ViZSBpcyBsZWZ0LWhhbmQsc28geCBuZWVkIGludmVyc2VcclxuICAgIGxldCBtaXBDb3VudDpmMzIgPSAxMC4wOyAvLyByZXNvbHV0aW9uIG9mIDI1NngyNTZcclxuICAgIGxldCBsb2Q6ZjMyID0gcm91Z2huZXNzICogbWlwQ291bnQ7XHJcbiAgICBsZXQgc3BlY3VsYXJMaWdodDp2ZWMzPGYzMj4gPSB0ZXh0dXJlU2FtcGxlTGV2ZWwoc3BlY3VsYXJFbnZUZXh0dXJlLHNwZWN1bGFyRW52U2FtcGxlciwgcmVmbGVjdFZlYywgbG9kKS5yZ2I7XHJcbiAgICByZXR1cm4gc3BlY3VsYXJMaWdodDtcclxuICB9XHJcbiAgZm4gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmU6YXJyYXk8dmVjMzxmMzI+LDk+LCBub3JtYWw6dmVjMzxmMzI+KS0+dmVjMzxmMzI+IHtcclxuICAgIHZhciB3b3JsZE5vcm1hbDp2ZWMzPGYzMj4gPSBub3JtYWw7XHJcbiAgICB3b3JsZE5vcm1hbC54ID0gLW5vcm1hbC54O1xyXG4gICAgdmFyIGlycmFkaWFuY2U6dmVjMzxmMzI+ID0gbGlnaHRQcm9iZVswXTtcclxuICAgIGlycmFkaWFuY2UrPWxpZ2h0UHJvYmVbMV0gKiAobm9ybWFsLnkpO1xyXG4gICAgaXJyYWRpYW5jZSs9bGlnaHRQcm9iZVsyXSAqIChub3JtYWwueikgO1xyXG4gICAgaXJyYWRpYW5jZSs9bGlnaHRQcm9iZVszXSAqIChub3JtYWwueCkgO1xyXG5cclxuICAgIGlycmFkaWFuY2UrPWxpZ2h0UHJvYmVbNF0gKiAobm9ybWFsLnkgKiBub3JtYWwueCkgO1xyXG4gICAgaXJyYWRpYW5jZSs9bGlnaHRQcm9iZVs1XSAqIChub3JtYWwueSAqIG5vcm1hbC56KSA7XHJcbiAgICBpcnJhZGlhbmNlKz1saWdodFByb2JlWzZdICogKDMuMCAqIG5vcm1hbC56ICogbm9ybWFsLnogLSAxLjApO1xyXG4gICAgaXJyYWRpYW5jZSs9bGlnaHRQcm9iZVs3XSAqIChub3JtYWwueiAqIG5vcm1hbC54KSA7XHJcbiAgICBpcnJhZGlhbmNlKz1saWdodFByb2JlWzhdICogKG5vcm1hbC54ICogbm9ybWFsLnggLSBub3JtYWwueSAqIG5vcm1hbC55KTtcclxuXHJcbiAgICByZXR1cm4gbWF4KGlycmFkaWFuY2UsIHZlYzM8ZjMyPigwLjAsMC4wLDAuMCkpO1xyXG4gIH1cclxuICBmbiBERkdBcHByb3goIHNwZWN1bGFyQ29sb3I6dmVjMzxmMzI+LCByb3VnaG5lc3M6ZjMyLGRvdE5WOmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgY29uc3QgYzA6dmVjNDxmMzI+ID0gdmVjNDxmMzI+KCAtIDEsIC0gMC4wMjc1LCAtIDAuNTcyLCAwLjAyMiApO1xyXG4gICAgbGV0IGMxOnZlYzQ8ZjMyPiA9IHZlYzQ8ZjMyPiggMSwgMC4wNDI1LCAxLjA0LCAtIDAuMDQgKTtcclxuICAgIGxldCByOnZlYzQ8ZjMyPiA9IHJvdWdobmVzcyAqIGMwICsgYzE7XHJcbiAgICBsZXQgYTAwNDpmMzIgPSBtaW4oIHIueCAqIHIueCwgZXhwMiggLSA5LjI4ICogZG90TlYgKSApICogci54ICsgci55O1xyXG4gICAgbGV0IGZhYjp2ZWMyPGYzMj4gPSB2ZWMyPGYzMj4oIC0gMS4wNCwgMS4wNCApICogYTAwNCArIHIuenc7XHJcbiAgICByZXR1cm4gc3BlY3VsYXJDb2xvciAqIGZhYi54ICsgZmFiLnk7XHJcbiAgfVxyXG4gIC8v6Ze05o6l5YWJ54WnXHJcbiAgZm4gaW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsKGdlb21ldHJ5Okdlb21ldHJ5LCBtYXRlcmlhbDpQaHlzaWNhbE1hdGVyaWFsICktPlJlZmxlY3RlZExpZ2h0IHtcclxuICAgICAgdmFyIHJlZmxlY3RlZExpZ2h0OlJlZmxlY3RlZExpZ2h0O1xyXG4gICAgICB2YXIgaXJyYWRpYW5jZTp2ZWMzPGYzMj4gPSBsaWdodFVuaWZvcm1zLmFtYmllbnQueHl6KmxpZ2h0VW5pZm9ybXMuYW1iaWVudC53O1xyXG4gICAgICBpcnJhZGlhbmNlICo9IFBJO1xyXG4gICAgICByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XHJcbiAgICAgIHJldHVybiByZWZsZWN0ZWRMaWdodDtcclxuICB9XHJcbiAgLy/pl7TmjqXpq5jlhYlcclxuICBmbiBpbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKGdlb21ldHJ5Okdlb21ldHJ5LCBtYXRlcmlhbDpQaHlzaWNhbE1hdGVyaWFsKS0+UmVmbGVjdGVkTGlnaHQge1xyXG4gICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ7XHJcbiAgICAgIC8vIElCTCBzcGVjdWxhclxyXG4gICAgICBsZXQgcmFkaWFuY2U6dmVjMzxmMzI+ID0gZ2V0TGlnaHRQcm9iZVJhZGlhbmNlKGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwucm91Z2huZXNzKTtcclxuICAgICAgbGV0IHJhZGlhbmNlQXR0ZW51YXRpb246ZjMyID0gMS4wO1xyXG4gICAgICByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IHJhZGlhbmNlQXR0ZW51YXRpb24gKiByYWRpYW5jZSAqIERGR0FwcHJveChtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5yb3VnaG5lc3MsIGdlb21ldHJ5LmRvdE5WICk7XHJcbiAgICAgIHJldHVybiByZWZsZWN0ZWRMaWdodDtcclxuICAgIH1cclxuICBgO1xyXG59XHJcbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Tm9ybWFsKGRlZmluZXMpIHtcclxuXHRyZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2BcclxuICAgICAgZm4gZ2V0Tm9ybWFsKGlucHV0OlZlcnRJbnB1dCktPnZlYzM8ZjMyPntcclxuICAgICAgICB2YXIgbm9ybWFsOnZlYzM8ZjMyPjtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLkhBU19OT1JNQUx9XHJcbiAgICAgICAgICAgIG5vcm1hbD0gaW5wdXQubm9ybWFsO1xyXG4gICAgICAgICNlbHNlXHJcbiAgICAgICAgICBsZXQgcG9zX2R4ID0gZHBkeChpbnB1dC53b3JsZFBvcyk7XHJcbiAgICAgICAgICBsZXQgcG9zX2R5ID0gZHBkeShpbnB1dC53b3JsZFBvcyk7XHJcbiAgICAgICAgICBub3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKHBvc19keSwgcG9zX2R4KSApO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIHJldHVybiBub3JtYWwqKGYzMihpbnB1dC5mcm9udEZhY2luZykgKiAyLjAgLSAxLjApO1xyXG4gICAgICB9XHJcbiAgICBgO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROb3JtYWxCeU5vcm1hbFRleHR1cmUoZGVmaW5lcykge1xyXG5cdHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxyXG4gICAgICBmbiBnZXROb3JtYWxCeU5vcm1hbFRleHR1cmUoaW5wdXQ6VmVydElucHV0KS0+dmVjMzxmMzI+e1xyXG4gICAgICAgIHZhciBuOnZlYzM8ZjMyPiA9IHRleHR1cmVTYW1wbGUobm9ybWFsVGV4dHVyZSxub3JtYWxTYW1wbGVyLCBpbnB1dC51dikucmdiO1xyXG4gICAgICAgIGxldCB0Ym46bWF0M3gzPGYzMj4gPWdldFRCTihpbnB1dCk7XHJcbiAgICAgICAgbiA9IG5vcm1hbGl6ZSh0Ym4gKiAoMi4wICogbiAtIHZlYzMoMS4wKSkpO1xyXG4gICAgICAgIG49biooZjMyKGlucHV0LmZyb250RmFjaW5nKSAqIDIuMCAtIDEuMCk7XHJcbiAgICAgICAgcmV0dXJuIG47XHJcbiAgICAgIH1cclxuICAgIGA7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRCTihkZWZpbmVzKSB7XHJcblx0cmV0dXJuIHdnc2xQYXJzZURlZmluZXNgXHJcbiAgICAgICAgZm4gZ2V0VEJOKGlucHV0OlZlcnRJbnB1dCktPm1hdDN4MzxmMzI+e1xyXG4gICAgICAgICNpZiAke2RlZmluZXMuSEFTX1RBTkdFTlR9XHJcbiAgICAgICAgICAgIGxldCB0Ym46bWF0M3gzPGYzMj4gPSBpbnB1dC50Ym47XHJcbiAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgbGV0IG5vcm1hbDp2ZWMzPGYzMj4gPW5vcm1hbGl6ZShpbnB1dC5ub3JtYWwpO1xyXG4gICAgICAgICAgICBsZXQgdXY6dmVjMjxmMzI+ID0gc2VsZWN0KC1pbnB1dC51dixpbnB1dC51dixpbnB1dC5mcm9udEZhY2luZyk7XHJcbiAgICAgICAgICAgICAgLy8gcmVmOiBodHRwOi8vd3d3LnRoZXRlbnRocGxhbmV0LmRlL2FyY2hpdmVzLzExODBcclxuICAgICAgICAgICAgICAvLyBnZXQgZWRnZSB2ZWN0b3JzIG9mIHRoZSBwaXhlbCB0cmlhbmdsZVxyXG4gICAgICAgICAgICAgIGxldCBkcDE6dmVjMzxmMzI+ID0gIHZlYzM8ZjMyPihkcGR4KGlucHV0LndvcmxkUG9zLngpLCBkcGR4KGlucHV0LndvcmxkUG9zLnkpLCBkcGR4KGlucHV0LndvcmxkUG9zLnopKTtcclxuICAgICAgICAgICAgICBsZXQgZHAyOnZlYzM8ZjMyPiA9ICB2ZWMzPGYzMj4oZHBkeShpbnB1dC53b3JsZFBvcy54KSwgZHBkeShpbnB1dC53b3JsZFBvcy55KSwgZHBkeShpbnB1dC53b3JsZFBvcy56KSk7XHJcbiAgICAgICAgICAgICAgbGV0IGR1djE6dmVjMjxmMzI+ID0gZHBkeCh1dik7XHJcbiAgICAgICAgICAgICAgbGV0IGR1djI6dmVjMjxmMzI+ID0gZHBkeSh1dik7XHJcblxyXG4gICAgICAgICAgICAgIC8vIHNvbHZlIHRoZSBsaW5lYXIgc3lzdGVtXHJcbiAgICAgICAgICAgICAgbGV0IGRwMnBlcnA6dmVjMzxmMzI+ID0gY3Jvc3MoZHAyLCBub3JtYWwpO1xyXG4gICAgICAgICAgICAgIGxldCBkcDFwZXJwOnZlYzM8ZjMyPiA9IGNyb3NzKG5vcm1hbCwgZHAxKTtcclxuICAgICAgICAgICAgICBsZXQgdGFuZ2VudDp2ZWMzPGYzMj4gPSBkcDJwZXJwICogZHV2MS54ICsgZHAxcGVycCAqIGR1djIueDtcclxuICAgICAgICAgICAgICBsZXQgYmlub3JtYWw6dmVjMzxmMzI+ID0gZHAycGVycCAqIGR1djEueSArIGRwMXBlcnAgKiBkdXYyLnk7XHJcbiAgICAgICAgICAgICAgLy8gY29uc3RydWN0IGEgc2NhbGUtaW52YXJpYW50IGZyYW1lIFxyXG4gICAgICAgICAgICAgIGxldCByZXN1bHQ6ZjMyPW1heChkb3QodGFuZ2VudCwgdGFuZ2VudCksIGRvdChiaW5vcm1hbCwgYmlub3JtYWwpKTtcclxuICAgICAgICAgICAgICBsZXQgaW52bWF4OmYzMiA9IDEuMC9zcXJ0KHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgbGV0IHRibjptYXQzeDM8ZjMyPiA9IG1hdDN4MzxmMzI+KHRhbmdlbnQgKiBpbnZtYXgsIGJpbm9ybWFsICogaW52bWF4LCBub3JtYWwpO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIHJldHVybiB0Ym47XHJcbiAgICAgIH1cclxuICBgO1xyXG59XHJcbiIsImltcG9ydCBsaWdodCBmcm9tIFwiLi9saWdodC9saWdodFwiO1xuaW1wb3J0IGxpZ2h0Q29tbW9uIGZyb20gXCIuL2xpZ2h0L2xpZ2h0Q29tbW9uXCI7XG5pbXBvcnQgYnJkZiBmcm9tIFwiLi9wYnIvYnJkZlwiO1xuaW1wb3J0IHBickZ1bmN0aW9uIGZyb20gXCIuL3Bici9wYnJGdW5jdGlvblwiO1xuaW1wb3J0IHBiclN0cnVjdCBmcm9tIFwiLi9wYnIvcGJyU3RydWN0XCI7XG5pbXBvcnQgcGJyVGV4dHVyZSBmcm9tIFwiLi9wYnIvcGJyVGV4dHVyZVwiO1xuaW1wb3J0IHBiclV0aWxzIGZyb20gXCIuL3Bici9wYnJVdGlsc1wiO1xuaW1wb3J0IHBob25nRnVuY3Rpb24gZnJvbSBcIi4vcGhvbmcvcGhvbmdGdW5jdGlvblwiO1xuaW1wb3J0IHBob25nVXRpbHMgZnJvbSBcIi4vcGhvbmcvcGhvbmdVdGlsc1wiO1xuaW1wb3J0IGVudmlyb25tZW50IGZyb20gXCIuL2Vudmlyb25tZW50L2Vudmlyb25tZW50XCI7XG5pbXBvcnQgYmxpbm5fcGhvbmcgZnJvbSBcIi4vcGhvbmcvYmxpbm5fcGhvbmdcIjtcbi8vIGltcG9ydCBnZXROb3JtYWwgZnJvbSBcIi4vbm9ybWFsL2dldE5vcm1hbFwiO1xuaW1wb3J0IGlibCBmcm9tIFwiLi9wYnIvaWJsXCI7XG5pbXBvcnQgeyBnZXROb3JtYWxCeU5vcm1hbFRleHR1cmUsIGdldFRCTiwgZ2V0Tm9ybWFsIH0gZnJvbSBcIi4vbm9ybWFsL2dldE5vcm1hbEJhY2tVcFwiO1xuY29uc3QgU2hhZGVyQ2h1bmsgPSB7XG5cdGxpZ2h0OiBsaWdodCxcblx0YnJkZjogYnJkZixcblx0cGhvbmdGdW5jdGlvbjogcGhvbmdGdW5jdGlvbixcblx0cGhvbmdVdGlsczogcGhvbmdVdGlscyxcblx0bGlnaHRDb21tb246IGxpZ2h0Q29tbW9uLFxuXHRwYnJTdHJ1Y3Q6IHBiclN0cnVjdCxcblx0cGJyRnVuY3Rpb246IHBickZ1bmN0aW9uLFxuXHRwYnJUZXh0dXJlOiBwYnJUZXh0dXJlLFxuXHRwYnJVdGlsczogcGJyVXRpbHMsXG5cdGVudmlyb25tZW50OiBlbnZpcm9ubWVudCxcblx0Ymxpbm5fcGhvbmc6IGJsaW5uX3Bob25nLFxuXHRnZXROb3JtYWw6IGdldE5vcm1hbCxcblx0Z2V0VEJOOiBnZXRUQk4sXG5cdGdldE5vcm1hbEJ5Tm9ybWFsVGV4dHVyZTogZ2V0Tm9ybWFsQnlOb3JtYWxUZXh0dXJlLFxuXHRpYmw6IGlibFxufTtcbmV4cG9ydCBkZWZhdWx0IFNoYWRlckNodW5rO1xuIiwiaW1wb3J0IHsgd2dzbFBhcnNlRGVmaW5lcyB9IGZyb20gXCIuLi9XZ3NsUHJlcHJvY2Vzc29yXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwaG9uZ1ZlcnQoZGVmaW5lcykge1xuXHRyZXR1cm4gYFxuICAgICAgc3RydWN0IFZlcnRleE91dHB1dCB7XG4gICAgICAgICAgICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb246IHZlYzQ8ZjMyPixcbiAgICAgICAgICAgIEBsb2NhdGlvbigwKSB1djogdmVjMjxmMzI+LFxuICAgICAgICAgICAgQGxvY2F0aW9uKDEpIHZpZXc6IHZlYzM8ZjMyPiwgLy8gVmVjdG9yIGZyb20gdmVydGV4IHRvIGNhbWVyYS5cbiAgICAgICAgICAgIEBsb2NhdGlvbigyKSB3b3JsZFBvczogdmVjMzxmMzI+LFxuICAgICAgICAgICAgQGxvY2F0aW9uKDMpIGNvbG9yOiB2ZWM0PGYzMj4sXG4gICAgICAgICAgICBAbG9jYXRpb24oNCkgbm9ybWFsOiB2ZWMzPGYzMj4sXG4gICAgICAgICAgICBAbG9jYXRpb24oNSkgdmlld1Bvc2l0aW9uOiB2ZWMzPGYzMj4sXG4gICAgICB9O1xuICAgICAgc3RydWN0IE1hdGVyaWFsVW5pZm9ybSB7XG4gICAgICAgICAgICBtb2RlbE1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgICAgICBjb2xvcjogdmVjMzxmMzI+LFxuICAgICAgICAgICAgb3BhY2l0eTpmMzIsXG4gICAgICAgICAgICBub3JtYWxNYXRyaXg6IG1hdDR4NDxmMzI+LFxuICAgICAgICAgICAgZW1pc3NpdmU6dmVjMzxmMzI+LFxuICAgICAgICAgICAgc3BlY3VsYXI6dmVjMzxmMzI+LFxuICAgICAgICAgICAgc2hpbmluZXNzOmYzMixcbiAgICAgIH1cbiAgICAgIHN0cnVjdCBTeXN0ZW1Vbmlmb3JtIHtcbiAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXg6IG1hdDR4NDxmMzI+LFxuICAgICAgICAgICAgdmlld01hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgICAgICBpbnZlcnNlVmlld01hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgICAgICBjYW1lcmFQb3NpdGlvbjogdmVjMzxmMzI+LFxuICAgICAgfTsgXG5cbiAgICAgIEBiaW5kaW5nKCR7ZGVmaW5lcy5waG9uZ0JpbmRpbmd9KSBAZ3JvdXAoMCkgdmFyPHVuaWZvcm0+IHNlbGZVbmlmb3JtIDogTWF0ZXJpYWxVbmlmb3JtO1xuICAgICAgQGJpbmRpbmcoJHtkZWZpbmVzLmNhbWVyYUJpbmRpbmd9KSBAZ3JvdXAoMSkgdmFyPHVuaWZvcm0+IHN5c3RlbVVuaWZvcm0gOiBTeXN0ZW1Vbmlmb3JtO1xuXG4gICAgICBzdHJ1Y3QgVmVydGV4SW5wdXQge1xuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5wb3NpdGlvbkxvY2F0aW9ufSkgcG9zaXRpb246IHZlYzM8ZjMyPiwgICAgICAgXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLm5vcm1hbExvY2F0aW9ufSkgbm9ybWFsOiB2ZWMzPGYzMj4sXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnV2TG9jYXRpb259KSB1djogdmVjMjxmMzI+LFxuICAgICAgfVxuICAgICAgQHZlcnRleFxuICAgICAgZm4gbWFpbihpbnB1dDogVmVydGV4SW5wdXQpIC0+IFZlcnRleE91dHB1dCB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0OiBWZXJ0ZXhPdXRwdXQ7XG4gICAgICAgICAgICBvdXRwdXQudXYgPSBpbnB1dC51djtcbiAgICAgICAgICAgIGxldCBtb2RlbFBvcz1zZWxmVW5pZm9ybS5tb2RlbE1hdHJpeCAqdmVjNDxmMzI+KGlucHV0LnBvc2l0aW9uLDEuMCk7XG4gICAgICAgICAgICBvdXRwdXQud29ybGRQb3MgPSBtb2RlbFBvcy54eXovbW9kZWxQb3MudztcbiAgICAgICAgICAgIGxldCB2Tm9ybWFsVmlldyA9IHNlbGZVbmlmb3JtLm5vcm1hbE1hdHJpeCAqIHZlYzQ8ZjMyPihpbnB1dC5ub3JtYWwsMC4wKTtcbiAgICAgICAgICAgIG91dHB1dC5ub3JtYWwgPSAgdk5vcm1hbFZpZXcueHl6O1xuICAgICAgICAgICAgb3V0cHV0LnZpZXcgPSBzeXN0ZW1Vbmlmb3JtLmNhbWVyYVBvc2l0aW9uLnh5eiAtIG1vZGVsUG9zLnh5ejtcbiAgICAgICAgICAgIGxldCB2aWV3UG9zaXRpb249c3lzdGVtVW5pZm9ybS52aWV3TWF0cml4ICogbW9kZWxQb3M7XG4gICAgICAgICAgICBvdXRwdXQudmlld1Bvc2l0aW9uID0gLXZpZXdQb3NpdGlvbi54eXo7XG4gICAgICAgICAgICBvdXRwdXQucG9zaXRpb24gPSBzeXN0ZW1Vbmlmb3JtLnByb2plY3Rpb25NYXRyaXggKiBzeXN0ZW1Vbmlmb3JtLnZpZXdNYXRyaXggKiBtb2RlbFBvcztcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICB9YDtcbn1cbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwaG9uZ0ZyYWcoZGVmaW5lcykge1xyXG5cdHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYCAgXHJcbiAgc3RydWN0IFZlcnRJbnB1dCB7XHJcbiAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxyXG4gICAgICBAYnVpbHRpbihmcm9udF9mYWNpbmcpIGZyb250RmFjaW5nOiBib29sLFxyXG4gICAgICBAbG9jYXRpb24oMCkgdXY6IHZlYzI8ZjMyPixcclxuICAgICAgQGxvY2F0aW9uKDEpIHZpZXc6IHZlYzM8ZjMyPiwgLy8gVmVjdG9yIGZyb20gdmVydGV4IHRvIGNhbWVyYS5cclxuICAgICAgQGxvY2F0aW9uKDIpIHdvcmxkUG9zOiB2ZWMzPGYzMj4sXHJcbiAgICAgIEBsb2NhdGlvbigzKSBjb2xvcjogdmVjNDxmMzI+LFxyXG4gICAgICBAbG9jYXRpb24oNCkgbm9ybWFsOiB2ZWMzPGYzMj4sXHJcbiAgICAgIEBsb2NhdGlvbig1KSB2aWV3UG9zaXRpb246IHZlYzM8ZjMyPixcclxuICAgIH07XHJcbiAgICBcclxuICAgIHN0cnVjdCBNYXRlcmlhbFVuaWZvcm0ge1xyXG4gICAgICBtb2RlbE1hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXHJcbiAgICAgIG9wYWNpdHk6ZjMyLFxyXG4gICAgICBub3JtYWxNYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICBlbWlzc2l2ZTp2ZWMzPGYzMj4sXHJcbiAgICAgIHNoaW5pbmVzczpmMzIsXHJcbiAgICAgIHNwZWN1bGFyOnZlYzM8ZjMyPiwgICAgICBcclxuICAgfVxyXG4gICBzdHJ1Y3QgU3lzdGVtVW5pZm9ybSB7XHJcbiAgICAgIHByb2plY3Rpb25NYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICB2aWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgaW52ZXJzZVZpZXdNYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICBjYW1lcmFQb3NpdGlvbjogdmVjMzxmMzI+LFxyXG4gIH07IFxyXG5cclxuICAgICNpZiR7ZGVmaW5lcy5VU0VfQ09MT1JURVhUVVJFfVxyXG4gICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmJhc2VDb2xvclNhbXBsZXJCaW5kaW5nfSkgdmFyIGJhc2VDb2xvclNhbXBsZXI6IHNhbXBsZXI7XHJcbiAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYmFzZUNvbG9yVGV4dHVyZUJpbmRpbmd9KSB2YXIgYmFzZUNvbG9yVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgI2VuZGlmXHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9OT1JNQUxURVhUVVJFfVxyXG4gICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLm5vcm1hbFRleHR1cmVCaW5kaW5nfSkgdmFyIG5vcm1hbFRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5ub3JtYWxTYW1wbGVyQmluZGluZ30pIHZhciBub3JtYWxTYW1wbGVyOiBzYW1wbGVyO1xyXG4gICAgI2VuZGlmXHJcbiAgICBAYmluZGluZygke2RlZmluZXMucGhvbmdCaW5kaW5nfSkgQGdyb3VwKDApIHZhcjx1bmlmb3JtPiBtYXRlcmlhbFVuaWZvcm0gOiBNYXRlcmlhbFVuaWZvcm07XHJcbiAgICBAYmluZGluZygke2RlZmluZXMuY2FtZXJhQmluZGluZ30pIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gc3lzdGVtVW5pZm9ybSA6IFN5c3RlbVVuaWZvcm07XHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9OT1JNQUxURVhUVVJFfVxyXG4gICAgICAjaW5jbHVkZSA8Z2V0VEJOPlxyXG4gICAgICAjaW5jbHVkZSA8Z2V0Tm9ybWFsQnlOb3JtYWxUZXh0dXJlPlxyXG4gICAgI2Vsc2VcclxuICAgICAgICAjaW5jbHVkZSA8Z2V0Tm9ybWFsPlxyXG4gICAgI2VuZGlmXHJcblxyXG4gICAgI2luY2x1ZGUgPGxpZ2h0PlxyXG5cclxuICAgIEBmcmFnbWVudFxyXG4gICAgZm4gbWFpbihpbnB1dDpWZXJ0SW5wdXQpIC0+IEBsb2NhdGlvbigwKSB2ZWM0PGYzMj4ge1xyXG4gICAgICAgIHZhciB0b3RhbEVtaXNzaXZlUmFkaWFuY2U6dmVjMzxmMzI+ID0gbWF0ZXJpYWxVbmlmb3JtLmVtaXNzaXZlO1xyXG4gICAgICAgIHZhciBjb2xvcjp2ZWM0PGYzMj47XHJcbiAgICAgICAgI2lmJHtkZWZpbmVzLlVTRV9DT0xPUlRFWFRVUkV9XHJcbiAgICAgICAgICAgIGNvbG9yPSB2ZWM0PGYzMj4odGV4dHVyZVNhbXBsZShiYXNlQ29sb3JUZXh0dXJlLCBiYXNlQ29sb3JTYW1wbGVyLCBpbnB1dC51dikucmdiK21hdGVyaWFsVW5pZm9ybS5jb2xvcixtYXRlcmlhbFVuaWZvcm0ub3BhY2l0eSk7XHJcbiAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgY29sb3I9dmVjNDxmMzI+KG1hdGVyaWFsVW5pZm9ybS5jb2xvcixtYXRlcmlhbFVuaWZvcm0ub3BhY2l0eSk7XHJcbiAgICAgICAgI2VuZGlmICAgICBcclxuICAgICAgICBsZXQgIFY6dmVjMzxmMzI+ID0gIG5vcm1hbGl6ZSggc3lzdGVtVW5pZm9ybS5jYW1lcmFQb3NpdGlvbiAtIGlucHV0LndvcmxkUG9zKTtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9OT1JNQUxURVhUVVJFfVxyXG4gICAgICAgICAgICBsZXQgTjp2ZWMzPGYzMj4gPSBnZXROb3JtYWxCeU5vcm1hbFRleHR1cmUoaW5wdXQpOyAgXHJcbiAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgbGV0IE46dmVjMzxmMzI+ID0gZ2V0Tm9ybWFsKGlucHV0KTtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICB2YXIgZ2VvbWV0cnk6R2VvbWV0cnk7XHJcbiAgICAgICAgZ2VvbWV0cnkubm9ybWFsPU47XHJcbiAgICAgICAgZ2VvbWV0cnkudmlld0Rpcj1WO1xyXG4gICAgICAgIGdlb21ldHJ5LnBvc2l0aW9uPWlucHV0LndvcmxkUG9zO1xyXG4gICAgICAgIGxldCBsaWdodENvbG9yOlJlZmxlY3RlZExpZ2h0PXBhcnNlTGlnaHRzKGdlb21ldHJ5LG1hdGVyaWFsVW5pZm9ybS5zaGluaW5lc3MpO1xyXG4gICAgICAgIC8vIHZhciBmaW5uYWxDb2xvcjp2ZWMzPGYzMj49Y29sb3IueHl6ICsgKGxpZ2h0Q29sb3IuZGlyZWN0RGlmZnVzZSArIGxpZ2h0Q29sb3IuZGlyZWN0U3BlY3VsYXIgKyBsaWdodENvbG9yLmFtYmllbnQpO1xyXG4gICAgICAgIHZhciBmaW5uYWxDb2xvcjp2ZWMzPGYzMj49Y29sb3IueHl6ICogKGxpZ2h0Q29sb3IuZGlyZWN0RGlmZnVzZSArIGxpZ2h0Q29sb3IuZGlyZWN0U3BlY3VsYXIgKyBsaWdodENvbG9yLmFtYmllbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gdmVjNDxmMzI+KGZpbm5hbENvbG9yLGNvbG9yLmEpO1xyXG4gICAgfWA7XHJcbn1cclxuIiwiLy8gaW1wb3J0IENvbG9yIGZyb20gXCIuLi8uLi9tYXRoL0NvbG9yXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvckZyYWcoZGVmaW5lcykge1xyXG4gIHJldHVybiBgXHJcbiAgICBzdHJ1Y3QgVmVydGV4T3V0cHV0IHtcclxuICAgICAgICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb246IHZlYzQ8ZjMyPixcclxuICAgICAgICBAbG9jYXRpb24oMCkgY29sb3I6IHZlYzQ8ZjMyPixcclxuICAgIH07XHJcbiAgICBAZnJhZ21lbnRcclxuICAgIGZuIG1haW4oaW5wdXQ6VmVydGV4T3V0cHV0KSAtPiBAbG9jYXRpb24oMCkgdmVjNDxmMzI+IHtcclxuICAgICAgcmV0dXJuIGlucHV0LmNvbG9yO1xyXG4gICAgfVxyXG4gICAgYDtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvclZlcnQoZGVmaW5lcykge1xuXHRyZXR1cm4gYFxuICAgc3RydWN0IFZlcnRleElucHV0IHtcbiAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5wb3NpdGlvbkxvY2F0aW9ufSkgcG9zaXRpb246IHZlYzM8ZjMyPiwgICAgICAgXG4gICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMuY29sb3JMb2NhdGlvbn0pIGNvbG9yOiB2ZWM0PGYzMj4sXG4gICB9XG4gICBzdHJ1Y3QgVmVydGV4T3V0cHV0IHtcbiAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uOiB2ZWM0PGYzMj4sXG4gICAgICAgIEBsb2NhdGlvbigwKSBjb2xvcjogdmVjNDxmMzI+LFxuICAgIH07XG4gICBzdHJ1Y3QgU2VsZlVuaWZvcm0ge1xuICAgICAgbW9kZWxNYXRyaXg6IG1hdDR4NDxmMzI+LFxuICAgfVxuICAgc3RydWN0IFN5c3RlbVVuaWZvcm0ge1xuICAgICAgcHJvamVjdGlvbk1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICB2aWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgIGludmVyc2VWaWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgIGNhbWVyYVBvc2l0aW9uOiB2ZWMzPGYzMj4sXG4gICB9OyBcbiAgIEBiaW5kaW5nKCR7ZGVmaW5lcy5jb2xvckJpbmRpbmd9KSBAZ3JvdXAoMCkgdmFyPHVuaWZvcm0+IHNlbGZVbmlmb3JtIDogU2VsZlVuaWZvcm07XG4gICBAYmluZGluZygke2RlZmluZXMuY2FtZXJhQmluZGluZ30pIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gc3lzdGVtVW5pZm9ybSA6IFN5c3RlbVVuaWZvcm07XG4gICBAdmVydGV4XG4gICBmbiBtYWluKGlucHV0OiBWZXJ0ZXhJbnB1dCkgLT4gVmVydGV4T3V0cHV0IHtcbiAgICB2YXIgb3V0cHV0OlZlcnRleE91dHB1dDtcbiAgICBvdXRwdXQuY29sb3I9aW5wdXQuY29sb3I7XG4gICAgb3V0cHV0LnBvc2l0aW9uID0gc3lzdGVtVW5pZm9ybS5wcm9qZWN0aW9uTWF0cml4ICogc3lzdGVtVW5pZm9ybS52aWV3TWF0cml4ICpzZWxmVW5pZm9ybS5tb2RlbE1hdHJpeCp2ZWM0PGYzMj4oaW5wdXQucG9zaXRpb24sMS4wKTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICAgfVxuICAgYDtcbn1cbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGJyRnJhZyhkZWZpbmVzKSB7XHJcblx0cmV0dXJuIHdnc2xQYXJzZURlZmluZXNgXHJcbiAgICAjaW5jbHVkZSA8bGlnaHRDb21tb24+XHJcbiAgICAjaW5jbHVkZSA8bGlnaHQ+XHJcbiAgICAjaW5jbHVkZSA8YnJkZj5cclxuICAgICNpbmNsdWRlIDxwYnJTdHJ1Y3Q+XHJcbiAgICAjaW5jbHVkZSA8cGJyVXRpbHM+XHJcbiAgICAjaW5jbHVkZSA8cGJyRnVuY3Rpb24+XHJcbiAgICAjaW5jbHVkZSA8cGJyVGV4dHVyZT5cclxuICAgICNpbmNsdWRlIDxlbnZpcm9ubWVudD5cclxuICAgIHN0cnVjdCBTeXN0ZW1Vbmlmb3JtIHtcclxuICAgICAgICBwcm9qZWN0aW9uTWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICB2aWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICBpbnZlcnNlVmlld01hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgICAgICAgY2FtZXJhUG9zaXRpb246IHZlYzM8ZjMyPixcclxuICAgIH07IFxyXG4gICAgLy8gdW5pZm9ybSB2ZWMzIGxpZ2h0UHJvYmVbOV0sXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5zdHJ1Y3QgVmVydGV4T3V0cHV0IHtcclxuICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxyXG4gICAgQGJ1aWx0aW4oZnJvbnRfZmFjaW5nKSBpc19mcm9udDogYm9vbCxcclxuICAgIEBsb2NhdGlvbigwKSB2VXY6IHZlYzI8ZjMyPixcclxuICAgIEBsb2NhdGlvbigxKSB2Vmlld1Bvc2l0aW9uOiB2ZWMzPGYzMj4sIC8vIFZlY3RvciBmcm9tIHZlcnRleCB0byBjYW1lcmEuXHJcbiAgICBAbG9jYXRpb24oMikgdldvcmxkUG9zaXRpb246IHZlYzM8ZjMyPixcclxuICAgIEBsb2NhdGlvbigzKSB2Tm9ybWFsOiB2ZWMzPGYzMj4sXHJcbiAgICAvLyDlj6/pgIlcclxuICAgICNpZiAke2RlZmluZXMuVVNFX0xJR0hUVEVYVFVSRSB8fCBkZWZpbmVzLlVTRV9BT1RFWFRVUkV9XHJcbiAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy52VXYyT3V0TG9jYXRpb259KSB2VXYyOiB2ZWMyPGYzMj4sXHJcbiAgICAjZW5kaWZcclxuXHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9DT0xPUl9BTFBIQX1cclxuICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnZDb2xvck91dExvY2F0aW9ufSkgdkNvbG9yOiB2ZWM0PGYzMj4sXHJcbiAgICAjZWxpZiAke2RlZmluZXMuVVNFX0NPTE9SIHx8IGRlZmluZXMuVVNFX0lOU1RBTkNJTkdfQ09MT1J9XHJcbiAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy52Q29sb3JPdXRMb2NhdGlvbn0pIHZDb2xvcjogdmVjMzxmMzI+LFxyXG4gICAgI2VuZGlmXHJcblxyXG4gICAgI2lmICR7ZGVmaW5lcy5VU0VfVEFOR0VOVH1cclxuICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnZUYW5nZW50T3V0TG9jYXRpb259KSB2VGFuZ2VudDogdmVjMzxmMzI+LFxyXG4gICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMudkJpdGFuZ2VudE91dExvY2F0aW9ufSkgdkJpdGFuZ2VudDogdmVjMzxmMzI+LFxyXG4gICAgI2VuZGlmXHJcbn07XHJcbiAgICAgICAgc3RydWN0IFBoeXNpY2FsTWF0ZXJpYWwge1xyXG4gICAgICAgICAgICAgZGlmZnVzZUNvbG9yOnZlYzM8ZjMyPixcclxuICAgICAgICAgICAgIHJvdWdobmVzczpmMzIsXHJcbiAgICAgICAgICAgICBzcGVjdWxhckNvbG9yOnZlYzM8ZjMyPixcclxuICAgICAgICAgICAgIHNwZWN1bGFyRjkwOmYzMixcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUfVxyXG4gICAgICAgICAgICAgICAgY2xlYXJjb2F0OmYzMixcclxuICAgICAgICAgICAgICAgIGNsZWFyY29hdFJvdWdobmVzczpmMzIsXHJcbiAgICAgICAgICAgICAgICBjbGVhcmNvYXRGMDp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICAgICBjbGVhcmNvYXRGOTA6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFfVxyXG4gICAgICAgICAgICAgICAgaXJpZGVzY2VuY2U6ZjMyLFxyXG4gICAgICAgICAgICAgICAgaXJpZGVzY2VuY2VJT1I6ZjMyLFxyXG4gICAgICAgICAgICAgICAgaXJpZGVzY2VuY2VUaGlja25lc3M6ZjMyLFxyXG4gICAgICAgICAgICAgICAgaXJpZGVzY2VuY2VGcmVzbmVsOnZlYzM8ZjMyPixcclxuICAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlRjA6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOfVxyXG4gICAgICAgICAgICAgICAgc2hlZW5Db2xvcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICAgICBzaGVlblJvdWdobmVzczpmMzIsXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5JT1J9XHJcbiAgICAgICAgICAgICAgICAgaW9yOmYzMixcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UUkFOU01JU1NJT059XHJcbiAgICAgICAgICAgICAgICB0cmFuc21pc3Npb246ZjMyLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNtaXNzaW9uQWxwaGE6ZjMyLFxyXG4gICAgICAgICAgICAgICAgdGhpY2tuZXNzOmYzMixcclxuICAgICAgICAgICAgICAgIGF0dGVudWF0aW9uRGlzdGFuY2U6ZjMyLFxyXG4gICAgICAgICAgICAgICAgYXR0ZW51YXRpb25Db2xvcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgIH07XHJcbkBiaW5kaW5nKDApIEBncm91cCgwKSB2YXI8dW5pZm9ybT4gbWF0ZXJpYWxVbmlmb3JtIDogTWF0ZXJpYWxVbmlmb3JtO1xyXG5AYmluZGluZygwKSBAZ3JvdXAoMSkgdmFyPHVuaWZvcm0+IHN5c3RlbVVuaWZvcm0gOiBTeXN0ZW1Vbmlmb3JtO1xyXG5AZnJhZ21lbnRcclxuZm4gbWFpbihpbnB1dDpWZXJ0ZXhPdXRwdXQpLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgdmFyIGRpZmZ1c2VDb2xvcjp2ZWM0PGYzMj4gPSB2ZWM0KG1hdGVyaWFsVW5pZm9ybS5kaWZmdXNlLCBtYXRlcmlhbFVuaWZvcm0ub3BhY2l0eSApO1xyXG4gICAgICAgLy8gUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcclxuICAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ7XHJcbiAgICAgICAgdmFyIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTp2ZWMzPGYzMj4gPSBtYXRlcmlhbFVuaWZvcm0uZW1pc3NpdmU7XHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEVYVFVSRX1cclxuICAgICAgICAgICAgdmFyIHNhbXBsZWREaWZmdXNlQ29sb3I6dmVjNDxmMzI+ID10ZXh0dXJlU2FtcGxlKGJhc2VUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KTtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5ERUNPREVfVklERU9fVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIHNhbXBsZWREaWZmdXNlQ29sb3IgPSB2ZWM0PGYzMj4oIG1peCggcG93KCBzYW1wbGVkRGlmZnVzZUNvbG9yLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzM8ZjMyPiggMC4wNTIxMzI3MDE0ICksIHZlYzM8ZjMyPiggMi40ICkgKSwgc2FtcGxlZERpZmZ1c2VDb2xvci5yZ2IgKiAwLjA3NzM5OTM4MDgsIHZlYzM8ZjMyPiggbGVzc1RoYW5FcXVhbCggc2FtcGxlZERpZmZ1c2VDb2xvci5yZ2IsIHZlYzM8ZjMyPiggMC4wNDA0NSApICkgKSApLCBzYW1wbGVkRGlmZnVzZUNvbG9yLncgKTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICBkaWZmdXNlQ29sb3IgKj0gc2FtcGxlZERpZmZ1c2VDb2xvcjtcclxuICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgdmFyIHJvdWdobmVzc0ZhY3RvcjpmMzIgPSBtYXRlcmlhbFVuaWZvcm0ucm91Z2huZXNzO1xyXG4gICAgXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfUk9VR0hORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgbGV0IHRleGVsUm91Z2huZXNzOnZlYzQ8ZjMyPj10ZXh0dXJlU2FtcGxlKHJvdWdobmVzc1RleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpO1xyXG4gICAgICAgICAgICByb3VnaG5lc3NGYWN0b3IgKj0gdGV4ZWxSb3VnaG5lc3MuZztcclxuICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgdmFyIG1ldGFsbmVzc0ZhY3RvcjpmMzIgPSBtYXRlcmlhbFVuaWZvcm0ubWV0YWxuZXNzO1xyXG4gICAgXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTUVUQUxORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgbGV0IHRleGVsTWV0YWxuZXNzOnZlYzQ8ZjMyPiA9dGV4dHVyZVNhbXBsZShtZXRhbG5lc3NUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KTtcclxuICAgICAgICAgICAgbWV0YWxuZXNzRmFjdG9yICo9IHRleGVsTWV0YWxuZXNzLmI7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgIGxldCBmYWNlRGlyZWN0aW9uOmYzMiA9c2VsZWN0KC0xLjAsMS4wLGlucHV0LmlzX2Zyb250KTtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLkZMQVRfU0hBREVEfVxyXG4gICAgICAgICAgICBsZXQgZmR4OnZlYzM8ZjMyPiA9IGRwZHgoIGlucHV0LnZWaWV3UG9zaXRpb24gKTtcclxuICAgICAgICAgICAgbGV0IGZkeTp2ZWMzPGYzMj4gPSBkcGR5KCBpbnB1dC52Vmlld1Bvc2l0aW9uICk7XHJcbiAgICAgICAgICAgIGxldCBub3JtYWw6dmVjMzxmMzI+ID0gbm9ybWFsaXplKCBjcm9zcyggZmR5LCBmZHggKSApO1xyXG4gICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgIGxldCBub3JtYWw6dmVjMzxmMzI+ID0gbm9ybWFsaXplKCBpbnB1dC52Tm9ybWFsICk7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuRE9VQkxFX1NJREVEfVxyXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gbm9ybWFsICogZmFjZURpcmVjdGlvbjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RBTkdFTlR9XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFuZ2VudDp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIGlucHV0LnZUYW5nZW50ICk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYml0YW5nZW50OnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggaW5wdXQudkJpdGFuZ2VudCApO1xyXG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5ET1VCTEVfU0lERUR9XHJcbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudCA9IHRhbmdlbnQgKiBmYWNlRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGJpdGFuZ2VudCA9IGJpdGFuZ2VudCAqIGZhY2VEaXJlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVEFOR0VOVFNQQUNFX05PUk1BTFRFWFRVUkUgfHwgZGVmaW5lcy5VU0VfQ0xFQVJDT0FUX05PUk1BTFRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZUQk46bWF0M3gzPGYzMj4gPSBtYXQzeDM8ZjMyPiggdGFuZ2VudCwgYml0YW5nZW50LCBub3JtYWwgKTtcclxuICAgICAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAjZW5kaWZcclxuICAgIFxyXG4gICAgICAgIGxldCBnZW9tZXRyeU5vcm1hbDp2ZWMzPGYzMj4gPSBub3JtYWw7XHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuT0JKRUNUU1BBQ0VfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgICAgbm9ybWFsID10ZXh0dXJlU2FtcGxlKG5vcm1hbFRleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpLnh5eiAqIDIuMCAtIDEuMDtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5GTElQX1NJREVEfVxyXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gLSBub3JtYWw7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLkRPVUJMRV9TSURFRH1cclxuICAgICAgICAgICAgICAgIG5vcm1hbCA9IG5vcm1hbCAqIGZhY2VEaXJlY3Rpb247XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgbm9ybWFsID0gbm9ybWFsaXplKG1hdGVyaWFsVW5pZm9ybS5ub3JtYWxNYXRyaXggKiBub3JtYWwgKTtcclxuXHJcbiAgICAgICAgICAgICNlbGlmICR7ZGVmaW5lcy5UQU5HRU5UU1BBQ0VfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgICAgbGV0IHRlbXBNYXBOOnZlYzM8ZjMyPiA9dGV4dHVyZVNhbXBsZShub3JtYWxUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KS54eXogKiAyLjAgLSAxLjA7XHJcbiAgICAgICAgICAgIGxldCBtYXBOOnZlYzM8ZjMyPiA9dGVtcE1hcE4ueHkgKj0gbWF0ZXJpYWxVbmlmb3JtLm5vcm1hbFNjYWxlO1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UQU5HRU5UfVxyXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gbm9ybWFsaXplKCB2VEJOICogbWFwTiApO1xyXG4gICAgICAgICAgICAjZWxzZVxyXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gcGVydHVyYk5vcm1hbDJBcmIoIC0gaW5wdXQudlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBtYXBOLCBmYWNlRGlyZWN0aW9uICk7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2VsaWYgJHtkZWZpbmVzLlVTRV9CVU1QVEVYVFVSRX1cclxuXHJcbiAgICAgICAgICAgICAgICBub3JtYWwgPSBwZXJ0dXJiTm9ybWFsQXJiKCAtIGlucHV0LnZWaWV3UG9zaXRpb24sIG5vcm1hbCwgZEhkeHlfZndkKCksIGZhY2VEaXJlY3Rpb24gKTtcclxuICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUfVxyXG4gICAgICAgICAgICB2YXIgY2xlYXJjb2F0Tm9ybWFsOnZlYzM8ZjMyPiA9IGdlb21ldHJ5Tm9ybWFsO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVF9OT1JNQUxURVhUVVJFfVxyXG4gICAgICAgICAgICB2YXIgY2xlYXJjb2F0TWFwTjp2ZWMzPGYzMj4gPXRleHR1cmVTYW1wbGUoY2xlYXJjb2F0Tm9ybWFsVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdikueHl6ICogMi4wIC0gMS4wO1xyXG4gICAgICAgICAgICBjbGVhcmNvYXRNYXBOLnh5ICo9IG1hdGVyaWFsVW5pZm9ybS5jbGVhcmNvYXROb3JtYWxTY2FsZTtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEFOR0VOVH1cclxuICAgICAgICAgICAgICAgIGNsZWFyY29hdE5vcm1hbCA9IG5vcm1hbGl6ZSggdlRCTiAqIGNsZWFyY29hdE1hcE4gKTtcclxuICAgICAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgICAgIGNsZWFyY29hdE5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtIGlucHV0LnZWaWV3UG9zaXRpb24sIGNsZWFyY29hdE5vcm1hbCwgY2xlYXJjb2F0TWFwTiwgZmFjZURpcmVjdGlvbiApO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9FTUlTU0lWRVRFWFRVUkV9XHJcbiAgICAgICAgICAgIGxldCBlbWlzc2l2ZUNvbG9yOnZlYzQ8ZjMyPiA9dGV4dHVyZVNhbXBsZShlbWlzc2l2ZVRleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpO1xyXG4gICAgICAgICAgICB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgKj0gZW1pc3NpdmVDb2xvci5yZ2I7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgIHZhciBtYXRlcmlhbDpQaHlzaWNhbE1hdGVyaWFsO1xyXG4gICAgICAgIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2IgKiAoIDEuMCAtIG1ldGFsbmVzc0ZhY3RvciApO1xyXG4gICAgICAgIGxldCBkeHk6dmVjMzxmMzI+ID0gbWF4KCBhYnMoIGRwZHgoIGdlb21ldHJ5Tm9ybWFsICkgKSwgYWJzKCBkcGR5KCBnZW9tZXRyeU5vcm1hbCApICkgKTtcclxuICAgICAgICBsZXQgZ2VvbWV0cnlSb3VnaG5lc3M6ZjMyID0gbWF4KCBtYXgoIGR4eS54LCBkeHkueSApLCBkeHkueiApO1xyXG4gICAgICAgIG1hdGVyaWFsLnJvdWdobmVzcyA9IG1heCggcm91Z2huZXNzRmFjdG9yLCAwLjA1MjUgKTtcclxuICAgICAgICBtYXRlcmlhbC5yb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XHJcbiAgICAgICAgbWF0ZXJpYWwucm91Z2huZXNzID0gbWluKCBtYXRlcmlhbC5yb3VnaG5lc3MsIDEuMCApO1xyXG5cclxuICAgICAgICAjaWYgJHtkZWZpbmVzLklPUn1cclxuICAgICAgICAgICAgbWF0ZXJpYWwuaW9yID0gbWF0ZXJpYWxVbmlmb3JtLmlvcjtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5TUEVDVUxBUn1cclxuICAgICAgICAgICAgICAgIGxldCBzcGVjdWxhckludGVuc2l0eUZhY3RvcjpmMzIgPSBtYXRlcmlhbFVuaWZvcm0uc3BlY3VsYXJJbnRlbnNpdHk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3BlY3VsYXJDb2xvckZhY3Rvcjp2ZWMzPGYzMj4gPSBtYXRlcmlhbFVuaWZvcm0uc3BlY3VsYXJDb2xvcjtcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NQRUNVTEFSSU5URU5TSVRZVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICAgICBzcGVjdWxhckludGVuc2l0eUZhY3RvciAqPXRleHR1cmVTYW1wbGUoc3BlY3VsYXJJbnRlbnNpdHlUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KS5hO1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU1BFQ1VMQVJDT0xPUlRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICAgICAgc3BlY3VsYXJDb2xvckZhY3RvciAqPXRleHR1cmVTYW1wbGUoc3BlY3VsYXJDb2xvclRleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpLnJnYjtcclxuICAgICAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyRjkwID0gbWl4KCBzcGVjdWxhckludGVuc2l0eUZhY3RvciwgMS4wLCBtZXRhbG5lc3NGYWN0b3IgKTtcclxuICAgICAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgICAgIGxldCBzcGVjdWxhckludGVuc2l0eUZhY3RvcjpmMzIgPSAxLjA7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3BlY3VsYXJDb2xvckZhY3Rvcjp2ZWMzPGYzMj4gPSB2ZWMzPGYzMj4oIDEuMCApO1xyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXJGOTAgPSAxLjA7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICBtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCBtaW4oIHBvdzIoICggbWF0ZXJpYWwuaW9yIC0gMS4wICkgLyAoIG1hdGVyaWFsLmlvciArIDEuMCApICkgKiBzcGVjdWxhckNvbG9yRmFjdG9yLCB2ZWMzKCAxLjAgKSApICogc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IsIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xyXG4gICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBtaXgoIHZlYzM8ZjMyPiggMC4wNCApLCBkaWZmdXNlQ29sb3IucmdiLCBtZXRhbG5lc3NGYWN0b3IgKTtcclxuICAgICAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXJGOTAgPSAxLjA7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUfVxyXG4gICAgICAgICAgICBtYXRlcmlhbC5jbGVhcmNvYXQgPSBtYXRlcmlhbFVuaWZvcm0uY2xlYXJjb2F0O1xyXG4gICAgICAgICAgICBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBtYXRlcmlhbFVuaWZvcm0uY2xlYXJjb2F0Um91Z2huZXNzO1xyXG4gICAgICAgICAgICBtYXRlcmlhbC5jbGVhcmNvYXRGMCA9IHZlYzM8ZjMyPiggMC4wNCApO1xyXG4gICAgICAgICAgICBtYXRlcmlhbC5jbGVhcmNvYXRGOTAgPSAxLjA7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVFRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5jbGVhcmNvYXQgKj10ZXh0dXJlU2FtcGxlKGNsZWFyY29hdFRleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpLng7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVRfUk9VR0hORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyAqPXRleHR1cmVTYW1wbGUoY2xlYXJjb2F0Um91Z2huZXNzVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdikueTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdCA9IHNhdHVyYXRlKCBtYXRlcmlhbC5jbGVhcmNvYXQgKTtcclxuICAgICAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gbWF4KCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIDAuMDUyNSApO1xyXG4gICAgICAgICAgICBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IG1pbiggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCAxLjAgKTtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JUklERVNDRU5DRX1cclxuICAgICAgICAgICAgbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPSBtYXRlcmlhbFVuaWZvcm0uaXJpZGVzY2VuY2U7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmlyaWRlc2NlbmNlSU9SID0gbWF0ZXJpYWxVbmlmb3JtLmlyaWRlc2NlbmNlSU9SO1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JUklERVNDRU5DRVRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5pcmlkZXNjZW5jZSAqPXRleHR1cmVTYW1wbGUoaXJpZGVzY2VuY2VUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KS5yO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzID0gKG1hdGVyaWFsVW5pZm9ybS5pcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW0gLSBtYXRlcmlhbFVuaWZvcm0uaXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtKSAqIHRleHR1cmVTYW1wbGUoaXJpZGVzY2VuY2VUaGlja25lc3NUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KS5nICsgbWF0ZXJpYWxVbmlmb3JtLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWluaW11bTtcclxuICAgICAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzID0gbWF0ZXJpYWxVbmlmb3JtLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU0hFRU59XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLnNoZWVuQ29sb3IgPSBtYXRlcmlhbFVuaWZvcm0uc2hlZW5Db2xvcjtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU0hFRU5DT0xPUlRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5zaGVlbkNvbG9yICo9dGV4dHVyZVNhbXBsZShzaGVlbkNvbG9yVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdikucmdiO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgPSBjbGFtcCggbWF0ZXJpYWxVbmlmb3JtLnNoZWVuUm91Z2huZXNzLCAwLjA3LCAxLjAgKTtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU0hFRU5ST1VHSE5FU1NURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKj10ZXh0dXJlU2FtcGxlKHNoZWVuUm91Z2huZXNzVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdikuYTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGdlb21ldHJ5Okdlb21ldHJpY0NvbnRleHQ7XHJcbiAgICAgICAgZ2VvbWV0cnkucG9zaXRpb24gPSAtIGlucHV0LnZWaWV3UG9zaXRpb247XHJcbiAgICAgICAgZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsO1xyXG4gICAgICAgLy8gZ2VvbWV0cnkudmlld0RpciA9ICggaXNPcnRob2dyYXBoaWMgKSA/IHZlYzMoIDAsIDAsIDEgKSA6IG5vcm1hbGl6ZSggaW5wdXQudlZpZXdQb3NpdGlvbiApO1xyXG4gICAgICAgIGdlb21ldHJ5LnZpZXdEaXIgPSBub3JtYWxpemUoIGlucHV0LnZWaWV3UG9zaXRpb24pOyBcclxuXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUfVxyXG4gICAgICAgICAgICBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwgPSBjbGVhcmNvYXROb3JtYWw7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFfVxyXG4gICAgICAgICAgICBsZXQgZG90TlZpOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XHJcbiAgICAgICAgICAgIGlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3MgPT0gMC4wICkge1xyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5pcmlkZXNjZW5jZSA9IHNhdHVyYXRlKCBtYXRlcmlhbC5pcmlkZXNjZW5jZSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPiAwLjAgKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwgPSBldmFsSXJpZGVzY2VuY2UoIDEuMCwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VJT1IsIGRvdE5WaSwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3MsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKTtcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmlyaWRlc2NlbmNlRjAgPSBTY2hsaWNrX3RvX0YwKCBtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwsIDEuMCwgZG90TlZpICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgdmFyIGlibElycmFkaWFuY2U6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCAwLjAgKTtcclxuICAgICAgICB2YXIgaXJyYWRpYW5jZTp2ZWMzPGYzMj4gPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKGNvbW1vbkxpZ2h0c1Bhcm1zLmFtYmllbnQpO1xyXG4gICAgICAgIC8vaXJyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSXJyYWRpYW5jZSggbGlnaHRQcm9iZSwgZ2VvbWV0cnkubm9ybWFsLHN5c3RlbVVuaWZvcm0udmlld01hdHJpeCApO1xyXG5cclxuICAgICAgICB2YXIgcmFkaWFuY2U6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCAwLjAgKTtcclxuICAgICAgICB2YXIgY2xlYXJjb2F0UmFkaWFuY2U6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCAwLjAgKTtcclxuXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTElHSFRURVhUVVJFfVxyXG4gICAgICAgICAgICBsZXQgbGlnaHRNYXBUZXhlbDp2ZWM0PGYzMj4gPXRleHR1cmVTYW1wbGUobGlnaHRUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2Mik7XHJcbiAgICAgICAgICAgIGxldCBsaWdodE1hcElycmFkaWFuY2U6dmVjMzxmMzI+ID0gbGlnaHRNYXBUZXhlbC5yZ2IgKiBtYXRlcmlhbFVuaWZvcm0ubGlnaHRUZXh0dXJlSW50ZW5zaXR5O1xyXG4gICAgICAgICAgICBpcnJhZGlhbmNlICs9IGxpZ2h0TWFwSXJyYWRpYW5jZTtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAvLyYmIGRlZmluZXMuU1RBTkRBUkQmJmRlZmluZXMuRU5WVEVYVFVSRV9UWVBFX0NVQkVfVVZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9FTlZURVhUVVJFfSBcclxuICAgICAgICAgICAgaWJsSXJyYWRpYW5jZSArPSBnZXRJQkxJcnJhZGlhbmNlKCBnZW9tZXRyeS5ub3JtYWwsYmFzZVNhbXBsZXIsc3lzdGVtVW5pZm9ybS52aWV3TWF0cml4ICk7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRU5WVEVYVFVSRX1cclxuICAgICAgICAgICAgcmFkaWFuY2UgKz0gZ2V0SUJMUmFkaWFuY2UoIGdlb21ldHJ5LnZpZXdEaXIsYmFzZVNhbXBsZXIsc3lzdGVtVW5pZm9ybS52aWV3TWF0cml4LCBnZW9tZXRyeS5ub3JtYWwsIG1hdGVyaWFsVW5pZm9ybS5yb3VnaG5lc3MgKTtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUfVxyXG4gICAgICAgICAgICAgICAgY2xlYXJjb2F0UmFkaWFuY2UgKz0gZ2V0SUJMUmFkaWFuY2UoIGdlb21ldHJ5LnZpZXdEaXIsYmFzZVNhbXBsZXIsc3lzdGVtVW5pZm9ybS52aWV3TWF0cml4LCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAvL+ebtOaOpeWFieeFp1xyXG4gICAgICAgICAgICBsZXQgZGlyUmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ9IHBhcnNlTGlnaHRzKGdlb21ldHJ5LG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPWRpclJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2U7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9ZGlyUmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXI7XHJcbiAgICAgICAgLy/pl7TmjqXmvKvlj43lsIRcclxuICAgICAgICAgICAgbGV0IGluZGlyZWN0RGlmZnVzZUxpZ2h0OlJlZmxlY3RlZExpZ2h0PSBSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWwoIGlycmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz1pbmRpcmVjdERpZmZ1c2VMaWdodC5pbmRpcmVjdERpZmZ1c2U7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9aW5kaXJlY3REaWZmdXNlTGlnaHQuaW5kaXJlY3RTcGVjdWxhcjtcclxuICAgICAgICAvL+mXtOaOpemrmOWFiVxyXG4gICAgICAgICAgICBsZXQgaW5kaXJlY3RTcGVjdWxhckxpZ2h0OlJlZmxlY3RlZExpZ2h0PVJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWwoIHJhZGlhbmNlLCBpYmxJcnJhZGlhbmNlLCBjbGVhcmNvYXRSYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPWluZGlyZWN0U3BlY3VsYXJMaWdodC5pbmRpcmVjdERpZmZ1c2U7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9aW5kaXJlY3RTcGVjdWxhckxpZ2h0LmluZGlyZWN0U3BlY3VsYXI7XHJcbiAgICAgICAgLy/njq/looPlhYnpga7olL1cclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9BT1RFWFRVUkV9XHJcbiAgICAgICAgICAgIGxldCBhbWJpZW50T2NjbHVzaW9uOmYzMiA9ICh0ZXh0dXJlU2FtcGxlKGFvVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdjIpLnIgLSAxLjAgKSAqIG1hdGVyaWFsVW5pZm9ybS5hb1RleHR1cmVJbnRlbnNpdHkgKyAxLjA7XHJcblxyXG4gICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcclxuICAgICAgICAgICAgLy8mJmRlZmluZXMuU1RBTkRBUkRcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRU5WVEVYVFVSRX0gXHJcbiAgICAgICAgICAgICAgICBsZXQgZG90TlY6ZjMyID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcclxuICAgICAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKj0gY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBkb3ROViwgYW1iaWVudE9jY2x1c2lvbiwgbWF0ZXJpYWwucm91Z2huZXNzICk7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICB2YXIgdG90YWxEaWZmdXNlOnZlYzM8ZjMyPiA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2U7XHJcbiAgICAgICAgdmFyIHRvdGFsU3BlY3VsYXI6dmVjMzxmMzI+ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyO1xyXG4gICAgICAgIC8v6YCP5bCEXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVFJBTlNNSVNTSU9OfVxyXG4gICAgICAgICAgICBtYXRlcmlhbC50cmFuc21pc3Npb24gPSBtYXRlcmlhbFVuaWZvcm0udHJhbnNtaXNzaW9uO1xyXG4gICAgICAgICAgICBtYXRlcmlhbC50cmFuc21pc3Npb25BbHBoYSA9IDEuMDtcclxuICAgICAgICAgICAgbWF0ZXJpYWwudGhpY2tuZXNzID0gbWF0ZXJpYWxVbmlmb3JtLnRoaWNrbmVzcztcclxuICAgICAgICAgICAgbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZSA9IG1hdGVyaWFsVW5pZm9ybS5hdHRlbnVhdGlvbkRpc3RhbmNlO1xyXG4gICAgICAgICAgICBtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yID0gbWF0ZXJpYWxVbmlmb3JtLmF0dGVudWF0aW9uQ29sb3I7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RSQU5TTUlTU0lPTlRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC50cmFuc21pc3Npb24gKj10ZXh0dXJlU2FtcGxlKHRyYW5zbWlzc2lvblRleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpLnI7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9USElDS05FU1NURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwudGhpY2tuZXNzICo9dGV4dHVyZVNhbXBsZSh0aGlja25lc3NUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KS5nO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgbGV0IHBvczp2ZWMzPGYzMj4gPSB2V29ybGRQb3NpdGlvbjtcclxuICAgICAgICAgICAgbGV0IHY6dmVjMzxmMzI+ID0gbm9ybWFsaXplKCBjYW1lcmFQb3NpdGlvbiAtIHBvcyApO1xyXG4gICAgICAgICAgICBsZXQgbjp2ZWMzPGYzMj4gPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHN5c3RlbVVuaWZvcm0udmlld01hdHJpeCApO1xyXG4gICAgICAgICAgICBsZXQgdHJhbnNtaXNzaW9uOnZlYzQ8ZjMyPiA9IGdldElCTFZvbHVtZVJlZnJhY3Rpb24oXHJcbiAgICAgICAgICAgIG4sIHYsIG1hdGVyaWFsLnJvdWdobmVzcywgbWF0ZXJpYWwuZGlmZnVzZUNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckY5MCwgcG9zLCBtb2RlbE1hdHJpeCwgc3lzdGVtVW5pZm9ybS52aWV3TWF0cml4LCBzeXN0ZW1Vbmlmb3JtLnByb2plY3Rpb25NYXRyaXgsIG1hdGVyaWFsLmlvciwgbWF0ZXJpYWwudGhpY2tuZXNzLCBtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yLCBtYXRlcmlhbC5hdHRlbnVhdGlvbkRpc3RhbmNlICk7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLnRyYW5zbWlzc2lvbkFscGhhID0gbWl4KCBtYXRlcmlhbC50cmFuc21pc3Npb25BbHBoYSwgdHJhbnNtaXNzaW9uLmEsIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiApO1xyXG4gICAgICAgICAgICB0b3RhbERpZmZ1c2UgPSBtaXgoIHRvdGFsRGlmZnVzZSwgdHJhbnNtaXNzaW9uLnJnYiwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uICk7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgIGxldCBvdXRnb2luZ0xpZ2h0OnZlYzM8ZjMyPiA9IHRvdGFsRGlmZnVzZSArIHRvdGFsU3BlY3VsYXIgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOfVxyXG4gICAgICAgICAgICBsZXQgc2hlZW5FbmVyZ3lDb21wOmYzMiA9IDEuMCAtIDAuMTU3ICogbWF4MyggbWF0ZXJpYWwuc2hlZW5Db2xvciApO1xyXG4gICAgICAgICAgICBvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqIHNoZWVuRW5lcmd5Q29tcCArIHNoZWVuU3BlY3VsYXI7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cclxuICAgICAgICAgICAgbGV0IGRvdE5WY2M6ZjMyID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcclxuICAgICAgICAgICAgbGV0IEZjYzp2ZWMzPGYzMj4gPSBGX1NjaGxpY2soIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIGRvdE5WY2MgKTtcclxuICAgICAgICAgICAgb3V0Z29pbmdMaWdodCA9IG91dGdvaW5nTGlnaHQgKiAoIDEuMCAtIG1hdGVyaWFsLmNsZWFyY29hdCAqIEZjYyApICsgY2xlYXJjb2F0U3BlY3VsYXIgKiBtYXRlcmlhbC5jbGVhcmNvYXQ7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RSQU5TTUlTU0lPTn1cclxuICAgICAgICAgICAgZGlmZnVzZUNvbG9yLmEgKj0gbWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGEgKyAwLjE7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgIHZhciBmaW5uYWxDb2xvcjp2ZWM0PGYzMj47XHJcbiAgICAgICAgZmlubmFsQ29sb3IgPSB2ZWM0PGYzMj4oIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5UT05FX01BUFBJTkd9XHJcbiAgICAgICAgICAgZmlubmFsQ29sb3IucmdiID0gdG9uZU1hcHBpbmcoIGZpbm5hbENvbG9yLnJnYixtYXRlcmlhbFVuaWZvcm0udG9uZU1hcHBpbmdFeHBvc3VyZSApO1xyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgIGZpbm5hbENvbG9yID0gbGluZWFyVG9PdXRwdXRUZXhlbCggZmlubmFsQ29sb3IpO1xyXG5cclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlBSRU1VTFRJUExJRURfQUxQSEF9XHJcbiAgICAgICAgICAgIGZpbm5hbENvbG9yLnJnYiAqPSBmaW5uYWxDb2xvci5hO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuRElUSEVSSU5HfVxyXG4gICAgICAgICAgICBmaW5uYWxDb2xvci5yZ2IgPSBkaXRoZXJpbmcoIGZpbm5hbENvbG9yLnJnYiApO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIHJldHVybiBmaW5uYWxDb2xvcjtcclxuICAgIH1gO1xyXG59XHJcbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGJyVmVydChkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIHdnc2xQYXJzZURlZmluZXNgXHJcbiAgICAjaW5jbHVkZSA8cGJyU3RydWN0PlxyXG4gICAgc3RydWN0IFZlcnRleE91dHB1dCB7XHJcbiAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uOiB2ZWM0PGYzMj4sXHJcbiAgICAgICAgQGxvY2F0aW9uKDApIHZVdjogdmVjMjxmMzI+LFxyXG4gICAgICAgIEBsb2NhdGlvbigxKSB2Vmlld1Bvc2l0aW9uOiB2ZWMzPGYzMj4sIC8vIFZlY3RvciBmcm9tIHZlcnRleCB0byBjYW1lcmEuXHJcbiAgICAgICAgQGxvY2F0aW9uKDIpIHZXb3JsZFBvc2l0aW9uOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgQGxvY2F0aW9uKDMpIHZOb3JtYWw6IHZlYzM8ZjMyPixcclxuICAgICAgICAvLyDlj6/pgIlcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9MSUdIVFRFWFRVUkUgfHwgZGVmaW5lcy5VU0VfQU9URVhUVVJFfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnZVdjJPdXRMb2NhdGlvbn0pIHZVdjI6IHZlYzI8ZjMyPixcclxuICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ09MT1JfQUxQSEF9XHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMudkNvbG9yT3V0TG9jYXRpb259KSB2Q29sb3I6IHZlYzQ8ZjMyPixcclxuICAgICAgICAjZWxpZiAke2RlZmluZXMuVVNFX0NPTE9SIHx8IGRlZmluZXMuVVNFX0lOU1RBTkNJTkdfQ09MT1J9XHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMudkNvbG9yT3V0TG9jYXRpb259KSB2Q29sb3I6IHZlYzM8ZjMyPixcclxuICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEFOR0VOVH1cclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy52VGFuZ2VudE91dExvY2F0aW9ufSkgdlRhbmdlbnQ6IHZlYzM8ZjMyPixcclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy52Qml0YW5nZW50T3V0TG9jYXRpb259KSB2Qml0YW5nZW50OiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICB9O1xyXG4gICAgc3RydWN0IEdsb2JhbFVuaWZvcm0ge1xyXG4gICAgICAgIHByb2plY3Rpb25NYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgIHZpZXdNYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgIGludmVyc2VWaWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICBjYW1lcmFQb3NpdGlvbjogdmVjMzxmMzI+LFxyXG4gICAgfTtcclxuXHJcbiAgICAvL3RleHR1cmUgYW5kIHNhbXBsZXJcclxuICAgIC8vIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuc2FtcGxlckJpbmRpbmd9KSB2YXIgYmFzZVNhbXBsZXI6IHNhbXBsZXI7XHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9TS0lOTklOR31cclxuICAgICAgICAvL3VuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGJvbmVUZXh0dXJlO1xyXG4gICAgICAgIEBncm91cCgwKSBAYmluZGluZygke1xyXG4gICAgICAgICAgZGVmaW5lcy5ib25lVGV4dHVyZUJpbmRpbmdcclxuICAgICAgICB9KSB2YXIgYm9uZVRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICNlbmRpZlxyXG5cclxuICAgICNpZiAke2RlZmluZXMuVVNFX0RJU1BMQUNFTUVOVFRFWFRVUkV9XHJcbiAgICAgICAgLy91bmlmb3JtIHNhbXBsZXIyRCBkaXNwbGFjZW1lbnRNYXA7XHJcbiAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7XHJcbiAgICAgICAgICBkZWZpbmVzLmRpc3BsYWNlbWVudFRleHR1cmVCaW5kaW5nXHJcbiAgICAgICAgfSkgdmFyIGRpc3BsYWNlbWVudE1hcDogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgI2VuZGlmXHJcblxyXG4gICAgI2lmICR7ZGVmaW5lcy5NT1JQSFRBUkdFVFNfVEVYVFVSRX1cclxuICAgICAgICAvL3VuaWZvcm0gc2FtcGxlcjJEQXJyYXkgbW9ycGhUYXJnZXRzVGV4dHVyZTtcclxuICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtcclxuICAgICAgICAgIGRlZmluZXMubW9ycGhUYXJnZXRzVGV4dHVyZUJpbmRpbmdcclxuICAgICAgICB9KSB2YXIgbW9ycGhUYXJnZXRzVGV4dHVyZTogdGV4dHVyZV8yZF9hcnJheTxmMzI+O1xyXG4gICAgI2VuZGlmXHJcblxyXG4gICAgc3RydWN0IFZlcnRleElucHV0IHtcclxuICAgICAgICBAbG9jYXRpb24oMCkgcG9zaXRpb246IHZlYzM8ZjMyPiwgIFxyXG5cclxuICAgICAgICBAbG9jYXRpb24oMSkgbm9ybWFsOiB2ZWMzPGYzMj4sXHJcblxyXG4gICAgICAgIEBsb2NhdGlvbigyKSB1djogdmVjMjxmMzI+LFxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0xJR0hUVEVYVFVSRSB8fCBkZWZpbmVzLlVTRV9BT1RFWFRVUkV9XHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMudXYyTG9jYXRpb259KSB1djI6dmVjMjxmMzI+LFxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lOU1RBTkNJTkd9XHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke1xyXG4gICAgICAgICAgICAgIGRlZmluZXMuaW5zdGFuY2VNYXRyaXhMb2NhdGlvblxyXG4gICAgICAgICAgICB9KSBpbnN0YW5jZU1hdHJpeDptYXQ0eDQ8ZjMyPixcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JTlNUQU5DSU5HX0NPTE9SfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLmluc3RhbmNlQ29sb3JMb2NhdGlvbn0pIGluc3RhbmNlQ29sb3I6dmVjMzxmMzI+LFxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIFxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RBTkdFTlR9XHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMudGFuZ2VudExvY2F0aW9ufSkgdGFuZ2VudDp2ZWM0PGYzMj4sXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ09MT1JfQUxQSEF9XHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMuY29sb3JMb2NhdGlvbn0pIGNvbG9yOnZlYzQ8ZjMyPixcclxuICAgICAgICAjZWxpZiAke2RlZmluZXMuVVNFX0NPTE9SfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLmNvbG9yTG9jYXRpb259KSBjb2xvcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX01PUlBIVEFSR0VUUyAmJiAhZGVmaW5lcy5NT1JQSFRBUkdFVFNfVEVYVFVSRX1cclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5tb3JwaFRhcmdldDBMb2NhdGlvbn0pIG1vcnBoVGFyZ2V0MDp2ZWMzPGYzMj4sXHJcblxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLm1vcnBoVGFyZ2V0MUxvY2F0aW9ufSkgbW9ycGhUYXJnZXQxOnZlYzM8ZjMyPixcclxuXHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMubW9ycGhUYXJnZXQyTG9jYXRpb259KSBtb3JwaFRhcmdldDI6dmVjMzxmMzI+LFxyXG5cclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5tb3JwaFRhcmdldDNMb2NhdGlvbn0pIG1vcnBoVGFyZ2V0Mzp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX01PUlBITk9STUFMU31cclxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigke1xyXG4gICAgICAgICAgICAgICAgICBkZWZpbmVzLm1vcnBoTm9ybWFsMExvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB9KSBtb3JwaE5vcm1hbDA6dmVjMzxmMzI+LFxyXG5cclxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigke1xyXG4gICAgICAgICAgICAgICAgICBkZWZpbmVzLm1vcnBoTm9ybWFsMUxvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB9KSBtb3JwaE5vcm1hbDE6dmVjMzxmMzI+LFxyXG5cclxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigke1xyXG4gICAgICAgICAgICAgICAgICBkZWZpbmVzLm1vcnBoTm9ybWFsMkxvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB9KSBtb3JwaE5vcm1hbDI6dmVjMzxmMzI+LFxyXG5cclxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigke1xyXG4gICAgICAgICAgICAgICAgICBkZWZpbmVzLm1vcnBoTm9ybWFsM0xvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB9KSBtb3JwaE5vcm1hbDM6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICAjZWxzZVxyXG4gICAgICAgICAgICAgICAgQGxvY2F0aW9uKCR7XHJcbiAgICAgICAgICAgICAgICAgIGRlZmluZXMubW9ycGhUYXJnZXQ0TG9jYXRpb25cclxuICAgICAgICAgICAgICAgIH0pIG1vcnBoVGFyZ2V0NDp2ZWMzPGYzMj4sXHJcblxyXG4gICAgICAgICAgICAgICAgQGxvY2F0aW9uKCR7XHJcbiAgICAgICAgICAgICAgICAgIGRlZmluZXMubW9ycGhUYXJnZXQ1TG9jYXRpb25cclxuICAgICAgICAgICAgICAgIH0pIG1vcnBoVGFyZ2V0NTp2ZWMzPGYzMj4sXHJcblxyXG4gICAgICAgICAgICAgICAgQGxvY2F0aW9uKCR7XHJcbiAgICAgICAgICAgICAgICAgIGRlZmluZXMubW9ycGhUYXJnZXQ2TG9jYXRpb25cclxuICAgICAgICAgICAgICAgIH0pIG1vcnBoVGFyZ2V0Njp2ZWMzPGYzMj4sXHJcblxyXG4gICAgICAgICAgICAgICAgQGxvY2F0aW9uKCR7XHJcbiAgICAgICAgICAgICAgICAgIGRlZmluZXMubW9ycGhUYXJnZXQ3TG9jYXRpb25cclxuICAgICAgICAgICAgICAgIH0pIG1vcnBoVGFyZ2V0Nzp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NLSU5OSU5HfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnNraW5JbmRleExvY2F0aW9ufSkgc2tpbkluZGV4OnZlYzQ8ZjMyPixcclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5za2luV2VpZ2h0TG9jYXRpb259KSBza2luV2VpZ2h0OnZlYzQ8ZjMyPixcclxuICAgICAgICAjZW5kaWZcclxuICB9XHJcblxyXG4gICAgI2lmICR7ZGVmaW5lcy5NT1JQSFRBUkdFVFNfVEVYVFVSRX1cclxuICAgICAgICBmbiBnZXRNb3JwaCggdmVydGV4SW5kZXg6dTMyLCBtb3JwaFRhcmdldEluZGV4OnUzMixvZmZzZXQ6dTMyICktPnZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgICAgIGxldCB0ZXhlbEluZGV4OnUzMiA9IHZlcnRleEluZGV4ICogTU9SUEhUQVJHRVRTX1RFWFRVUkVfU1RSSURFICsgb2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgeTp1MzIgPSB0ZXhlbEluZGV4IC8gbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XHJcbiAgICAgICAgICAgIGxldCB4OnUzMiA9IHRleGVsSW5kZXggLSB5ICogbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XHJcbiAgICAgICAgICAgIGxldCBtb3JwaFVWOnZlYzM8dTMyPiA9IHZlYzM8dTMyPiggeCwgeSwgbW9ycGhUYXJnZXRJbmRleCApO1xyXG4gICAgICAgICAgICAvL3RleHR1cmVMb2FkXHJcbiAgICAgICAgICAgIC8vcmV0dXJuIHRleGVsRmV0Y2goIG1vcnBoVGFyZ2V0c1RleHR1cmUsIG1vcnBoVVYsIDAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVMb2FkKCBtb3JwaFRhcmdldHNUZXh0dXJlLCBtb3JwaFVWLCAwICk7XHJcbiAgICAgICAgfVxyXG4gICAgI2VuZGlmXHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9TS0lOTklOR31cclxuICAgICAgICBmbiBnZXRCb25lTWF0cml4KCBpOmYzMiApLT5tYXQ0eDQ8ZjMyPiB7XHJcbiAgICAgICAgICAgIGxldCBqOmYzMiA9IGkgKiA0LjA7XHJcbiAgICAgICAgICAgIGxldCB4OmYzMiA9IGolZjMyKCBtYXRlcmlhbFVuaWZvcm0uYm9uZVRleHR1cmVTaXplICk7XHJcbiAgICAgICAgICAgIGxldCB5OmYzMiA9IGZsb29yKCBqIC8gZjMyKCBtYXRlcmlhbFVuaWZvcm0uYm9uZVRleHR1cmVTaXplICkgKTtcclxuICAgICAgICAgICAgbGV0IGR4OmYzMiA9IDEuMCAvIGYzMiggbWF0ZXJpYWxVbmlmb3JtLmJvbmVUZXh0dXJlU2l6ZSApO1xyXG4gICAgICAgICAgICBsZXQgZHk6ZjMyID0gMS4wIC8gZjMyKCBtYXRlcmlhbFVuaWZvcm0uYm9uZVRleHR1cmVTaXplICk7XHJcbiAgICAgICAgICAgIHkgPSBkeSAqICggeSArIDAuNSApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IHYxOnZlYzQ8ZjMyPiA9IHRleHR1cmVTYW1wbGUoYm9uZVRleHR1cmUsIGJhc2VTYW1wbGVyLCB2ZWMyPGYzMj4oIGR4ICogKCB4ICsgMC41ICksIHkgKSApO1xyXG4gICAgICAgICAgICBsZXQgdjI6dmVjNDxmMzI+ID0gdGV4dHVyZVNhbXBsZShib25lVGV4dHVyZSwgYmFzZVNhbXBsZXIsIHZlYzI8ZjMyPiggZHggKiAoIHggKyAxLjUgKSwgeSApICk7XHJcbiAgICAgICAgICAgIGxldCB2Mzp2ZWM0PGYzMj4gPSB0ZXh0dXJlU2FtcGxlKGJvbmVUZXh0dXJlLCBiYXNlU2FtcGxlciwgdmVjMjxmMzI+KCBkeCAqICggeCArIDIuNSApLCB5ICkgKTtcclxuICAgICAgICAgICAgbGV0IHY0OnZlYzQ8ZjMyPiA9IHRleHR1cmVTYW1wbGUoYm9uZVRleHR1cmUsIGJhc2VTYW1wbGVyLCB2ZWMyPGYzMj4oIGR4ICogKCB4ICsgMy41ICksIHkgKSApO1xyXG4gICAgICAgICAgICBsZXQgYm9uZTptYXQ0eDQ8ZjMyPiA9IG1hdDR4NDxmMzI+KCB2MSwgdjIsIHYzLCB2NCApO1xyXG4gICAgICAgICAgICByZXR1cm4gYm9uZTtcclxuICAgICAgICB9XHJcbiAgICAjZW5kaWZcclxuXHJcbiAgICBAYmluZGluZygwKSBAZ3JvdXAoMCkgdmFyPHVuaWZvcm0+IG1hdGVyaWFsVW5pZm9ybSA6IE1hdGVyaWFsVW5pZm9ybTtcclxuICAgIEBiaW5kaW5nKDApIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gZ2xvYmFsVW5pZm9ybSA6IEdsb2JhbFVuaWZvcm07XHJcbiAgICBAdmVydGV4XHJcbiAgICBmbiBtYWluKGlucHV0OlZlcnRleElucHV0KS0+VmVydGV4T3V0cHV0IHtcclxuICAgICAgICB2YXIgdmVydGV4T3V0cHV0OlZlcnRleE91dHB1dDtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9URVhUVVJFfVxyXG4gICAgICAgICAgICB2ZXJ0ZXhPdXRwdXQudlV2ID0gaW5wdXQudXY7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTElHSFRURVhUVVJFIHx8IGRlZmluZXMuVVNFX0FPVEVYVFVSRX1cclxuICAgICAgICAgICAgdmVydGV4T3V0cHV0LnZVdjIgaW5wdXQudXYyO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NPTE9SX0FMUEhBfVxyXG4gICAgICAgICAgICB2ZXJ0ZXhPdXRwdXQudkNvbG9yID0gdmVjNCggMS4wICk7XHJcbiAgICAgICAgICAgICNlbGlmICR7ZGVmaW5lcy5VU0VfQ09MT1IgfHwgZGVmaW5lcy5VU0VfSU5TVEFOQ0lOR19DT0xPUn1cclxuICAgICAgICAgICAgdmVydGV4T3V0cHV0LnZDb2xvciA9IHZlYzMoIDEuMCApO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NPTE9SfVxyXG4gICAgICAgICAgICB2ZXJ0ZXhPdXRwdXQudkNvbG9yICo9IGlucHV0LmNvbG9yO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lOU1RBTkNJTkdfQ09MT1J9XHJcbiAgICAgICAgICAgIHZlcnRleE91dHB1dC52Q29sb3IueHl6ICo9IGlucHV0Lmluc3RhbmNlQ29sb3IueHl6O1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX01PUlBIQ09MT1JTICYmIGRlZmluZXMuTU9SUEhUQVJHRVRTX1RFWFRVUkV9XHJcbiAgICAgICAgICAgIHZlcnRleE91dHB1dC52Q29sb3IgKj0gbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA6IHUzMiA9IDB1OyBpIDwgbWF0ZXJpYWxVbmlmb3JtLk1PUlBIVEFSR0VUU19DT1VOVDsgaSA9IGkgKyAxdSApIHtcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NPTE9SX0FMUEhBfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICEgPSAwLjAgKSB2ZXJ0ZXhPdXRwdXQudkNvbG9yICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMiApICogbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xyXG4gICAgICAgICAgICAgICAgICAgICNlbGlmICR7ZGVmaW5lcy5VU0VfQ09MT1J9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gISA9IDAuMCApIHZlcnRleE91dHB1dC52Q29sb3IgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAyICkucmdiICogbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICB2YXIgb2JqZWN0Tm9ybWFsOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPihpbnB1dC5ub3JtYWwpO1xyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RBTkdFTlR9XHJcbiAgICAgICAgICAgIGxldCBvYmplY3RUYW5nZW50OnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggaW5wdXQudGFuZ2VudC54eXogKTtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NT1JQSE5PUk1BTFN9XHJcbiAgICAgICAgICAgIG9iamVjdE5vcm1hbCAqPSBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLk1PUlBIVEFSR0VUU19URVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgZm9yICggbGV0IGkgOiB1MzIgPSAwdTsgaSA8IG1hdGVyaWFsVW5pZm9ybS5NT1JQSFRBUkdFVFNfQ09VTlQ7IGkgPSBpICsgMXUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhID0gMC4wICkgb2JqZWN0Tm9ybWFsICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMSApLnh5eiAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgICAgIG9iamVjdE5vcm1hbCArPSBtb3JwaE5vcm1hbDAgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XHJcbiAgICAgICAgICAgICAgICBvYmplY3ROb3JtYWwgKz0gbW9ycGhOb3JtYWwxICogbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0Tm9ybWFsICs9IG1vcnBoTm9ybWFsMiAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcclxuICAgICAgICAgICAgICAgIG9iamVjdE5vcm1hbCArPSBtb3JwaE5vcm1hbDMgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NLSU5OSU5HfVxyXG4gICAgICAgICAgICBsZXQgYm9uZU1hdFg6bWF0NHg0PGYzMj4gPSBnZXRCb25lTWF0cml4KCBpbnB1dC5za2luSW5kZXgueCApO1xyXG4gICAgICAgICAgICBsZXQgYm9uZU1hdFk6bWF0NHg0PGYzMj4gPSBnZXRCb25lTWF0cml4KCBpbnB1dC5za2luSW5kZXgueSApO1xyXG4gICAgICAgICAgICBsZXQgYm9uZU1hdFo6bWF0NHg0PGYzMj4gPSBnZXRCb25lTWF0cml4KCBpbnB1dC5za2luSW5kZXgueiApO1xyXG4gICAgICAgICAgICBsZXQgYm9uZU1hdFc6bWF0NHg0PGYzMj4gPSBnZXRCb25lTWF0cml4KCBpbnB1dC5za2luSW5kZXgudyApO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NLSU5OSU5HfVxyXG4gICAgICAgICAgICBsZXQgc2tpbk1hdHJpeDptYXQ0eDQ8ZjMyPiA9IG1hdDR4NDxmMzI+KCAwLjAgKTtcclxuICAgICAgICAgICAgc2tpbk1hdHJpeCArPSBpbnB1dC5za2luV2VpZ2h0LnggKiBib25lTWF0WDtcclxuICAgICAgICAgICAgc2tpbk1hdHJpeCArPSBpbnB1dC5za2luV2VpZ2h0LnkgKiBib25lTWF0WTtcclxuICAgICAgICAgICAgc2tpbk1hdHJpeCArPSBpbnB1dC5za2luV2VpZ2h0LnogKiBib25lTWF0WjtcclxuICAgICAgICAgICAgc2tpbk1hdHJpeCArPSBpbnB1dC5za2luV2VpZ2h0LncgKiBib25lTWF0VztcclxuICAgICAgICAgICAgc2tpbk1hdHJpeCA9IG1hdGVyaWFsVW5pZm9ybS5iaW5kTWF0cml4SW52ZXJzZSAqIHNraW5NYXRyaXggKiBtYXRlcmlhbFVuaWZvcm0uYmluZE1hdHJpeDtcclxuICAgICAgICAgICAgb2JqZWN0Tm9ybWFsID0gdmVjNDxmMzI+KCBza2luTWF0cml4ICogdmVjNDxmMzI+KCBvYmplY3ROb3JtYWwsIDAuMCApICkueHl6O1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UQU5HRU5UfVxyXG4gICAgICAgICAgICAgICAgb2JqZWN0VGFuZ2VudCA9IHZlYzQ8ZjMyPiggc2tpbk1hdHJpeCAqIHZlYzQ8ZjMyPiggb2JqZWN0VGFuZ2VudCwgMC4wICkgKS54eXo7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIHZhciB0cmFuc2Zvcm1lZE5vcm1hbDp2ZWMzPGYzMj4gPSBvYmplY3ROb3JtYWw7XHJcbiAgICAgICAgLy8gdHJhbnNmb3JtZWROb3JtYWwrPXZlYzM8ZjMyPigwLjApO1xyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lOU1RBTkNJTkd9XHJcbiAgICAgICAgICAgIGxldCBtOm1hdDN4MzxmMzI+ID0gbWF0M3gzPGYzMj4oIGlucHV0Lmluc3RhbmNlTWF0cml4ICk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkTm9ybWFsIC89IHZlYzM8ZjMyPiggZG90KCBtWyAwIF0sIG1bIDAgXSApLCBkb3QoIG1bIDEgXSwgbVsgMSBdICksIGRvdCggbVsgMiBdLCBtWyAyIF0gKSApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm1lZE5vcm1hbCA9IG0gKiB0cmFuc2Zvcm1lZE5vcm1hbDtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICB0cmFuc2Zvcm1lZE5vcm1hbCA9IG1hdGVyaWFsVW5pZm9ybS5ub3JtYWxNYXRyaXggKiB0cmFuc2Zvcm1lZE5vcm1hbDtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLkZMSVBfU0lERUR9XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkTm9ybWFsID0gLSB0cmFuc2Zvcm1lZE5vcm1hbDtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UQU5HRU5UfVxyXG4gICAgICAgICAgICBsZXQgdHJhbnNmb3JtZWRUYW5nZW50OnZlYzM8ZjMyPiA9IChnbG9iYWxVbmlmb3JtLnZpZXdNYXRyaXgqbWF0ZXJpYWxVbmlmb3JtLm1vZGVsTWF0cml4ICogdmVjNDxmMzI+KCBvYmplY3RUYW5nZW50LCAwLjAgKSApLnh5ejtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5GTElQX1NJREVEfVxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRUYW5nZW50ID0gLSB0cmFuc2Zvcm1lZFRhbmdlbnQ7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIHZlcnRleE91dHB1dC52Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xyXG4gICAgICAgICNpZiAke2RlZmluZXMuRkxBVF9TSEFERUR9XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RBTkdFTlR9XHJcbiAgICAgICAgICAgICAgICB2VGFuZ2VudCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWRUYW5nZW50ICk7XHJcbiAgICAgICAgICAgICAgICB2Qml0YW5nZW50ID0gbm9ybWFsaXplKCBjcm9zcyggdk5vcm1hbCwgdlRhbmdlbnQgKSAqIGlucHV0LnRhbmdlbnQudyApO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICBsZXQgdHJhbnNmb3JtZWQ6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCBpbnB1dC5wb3NpdGlvbiApO1xyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX01PUlBIVEFSR0VUU31cclxuICAgICAgICAgICAgdHJhbnNmb3JtZWQgKj0gbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5NT1JQSFRBUkdFVFNfVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIGZvciAoIGxldCBpIDogdTMyID0gMHU7IGkgPCBtYXRlcmlhbFVuaWZvcm0uTU9SUEhUQVJHRVRTX0NPVU5UOyBpID0gaSArIDF1ICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICEgPSAwLjAgKSB0cmFuc2Zvcm1lZCArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDAgKS54eXogKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkICs9IGlucHV0Lm1vcnBoVGFyZ2V0MCAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkICs9IGlucHV0Lm1vcnBoVGFyZ2V0MSAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkICs9IGlucHV0Lm1vcnBoVGFyZ2V0MiAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkICs9IGlucHV0Lm1vcnBoVGFyZ2V0MyAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX01PUlBITk9STUFMU31cclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZCArPSBpbnB1dC5tb3JwaFRhcmdldDQgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtZWQgKz0gaW5wdXQubW9ycGhUYXJnZXQ1ICogbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNSBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkICs9IGlucHV0Lm1vcnBoVGFyZ2V0NiAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIDYgXTtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZCArPSBpbnB1dC5tb3JwaFRhcmdldDcgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA3IF07XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU0tJTk5JTkd9XHJcbiAgICAgICAgICAgIGxldCBza2luVmVydGV4OnZlYzQ8ZjMyPiA9IG1hdGVyaWFsVW5pZm9ybS5iaW5kTWF0cml4ICogdmVjNDxmMzI+KCB0cmFuc2Zvcm1lZCwgMS4wICk7XHJcbiAgICAgICAgICAgIGxldCBza2lubmVkOnZlYzQ8ZjMyPiA9IHZlYzQ8ZjMyPiggMC4wICk7XHJcbiAgICAgICAgICAgIHNraW5uZWQgKz0gYm9uZU1hdFggKiBza2luVmVydGV4ICogaW5wdXQuc2tpbldlaWdodC54O1xyXG4gICAgICAgICAgICBza2lubmVkICs9IGJvbmVNYXRZICogc2tpblZlcnRleCAqIGlucHV0LnNraW5XZWlnaHQueTtcclxuICAgICAgICAgICAgc2tpbm5lZCArPSBib25lTWF0WiAqIHNraW5WZXJ0ZXggKiBpbnB1dC5za2luV2VpZ2h0Lno7XHJcbiAgICAgICAgICAgIHNraW5uZWQgKz0gYm9uZU1hdFcgKiBza2luVmVydGV4ICogaW5wdXQuc2tpbldlaWdodC53O1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm1lZCA9ICggbWF0ZXJpYWxVbmlmb3JtLmJpbmRNYXRyaXhJbnZlcnNlICogc2tpbm5lZCApLnh5ejtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9ESVNQTEFDRU1FTlRURVhUVVJFfSBcclxuICAgICAgICAgICAgdHJhbnNmb3JtZWQgKz0gbm9ybWFsaXplKCBvYmplY3ROb3JtYWwgKSAqICh0ZXh0dXJlU2FtcGxlKGRpc3BsYWNlbWVudE1hcCwgYmFzZVNhbXBsZXIsIHZVdikueCAqIG1hdGVyaWFsVW5pZm9ybS5kaXNwbGFjZW1lbnRTY2FsZSArIG1hdGVyaWFsVW5pZm9ybS5kaXNwbGFjZW1lbnRCaWFzICk7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgdmFyIG12UG9zaXRpb246dmVjNDxmMzI+ID0gdmVjNDxmMzI+KCB0cmFuc2Zvcm1lZCwgMS4wICk7XHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSU5TVEFOQ0lOR31cclxuICAgICAgICAgICAgbXZQb3NpdGlvbiA9IGlucHV0Lmluc3RhbmNlTWF0cml4ICogbXZQb3NpdGlvbjtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICBtdlBvc2l0aW9uID0gZ2xvYmFsVW5pZm9ybS52aWV3TWF0cml4Km1hdGVyaWFsVW5pZm9ybS5tb2RlbE1hdHJpeCAqIG12UG9zaXRpb247XHJcbiAgICAgICAgdmVydGV4T3V0cHV0LnBvc2l0aW9uID0gZ2xvYmFsVW5pZm9ybS5wcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcclxuICAgICAgICB2ZXJ0ZXhPdXRwdXQudlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXovbXZQb3NpdGlvbi53O1xyXG4gICAgICAgICNpZiAke1xyXG4gICAgICAgICAgZGVmaW5lcy5VU0VfRU5WVEVYVFVSRSB8fCBkZWZpbmVzLkRJU1RBTkNFIHx8IGRlZmluZXMuVVNFX1RSQU5TTUlTU0lPTlxyXG4gICAgICAgIH0gXHJcbiAgICAgICAgICAgIHZhciB3b3JsZFBvc2l0aW9uOnZlYzQ8ZjMyPiA9IHZlYzQ8ZjMyPiggdHJhbnNmb3JtZWQsIDEuMCApO1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JTlNUQU5DSU5HfVxyXG4gICAgICAgICAgICAgICAgd29ybGRQb3NpdGlvbiA9IGlucHV0Lmluc3RhbmNlTWF0cml4ICogd29ybGRQb3NpdGlvbjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIHdvcmxkUG9zaXRpb24gPSBtYXRlcmlhbFVuaWZvcm0ubW9kZWxNYXRyaXggKiB3b3JsZFBvc2l0aW9uO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RSQU5TTUlTU0lPTn1cclxuICAgICAgICAgICAgdmVydGV4T3V0cHV0LnZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgcmV0dXJuIHZlcnRleE91dHB1dDtcclxuICAgIH1cclxuICAgIGA7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2t5Qm94RnJhZyhkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIGBcclxuICAgIGZuIGxlc3NUaGFuRXF1YWwoYTp2ZWMzPGYzMj4sYjp2ZWMzPGYzMj4pLT52ZWMzPGYzMj57XHJcbiAgICAgICAgbGV0IHhWYWx1ZTpmMzI9c2VsZWN0KGIueCxhLngsYS54PD1iLngpO1xyXG4gICAgICAgIGxldCB5VmFsdWU6ZjMyPXNlbGVjdChiLnksYS55LGEueTw9Yi55KTtcclxuICAgICAgICBsZXQgelZhbHVlOmYzMj1zZWxlY3QoYi56LGEueixhLno8PWIueik7XHJcbiAgICAgICAgcmV0dXJuIHZlYzM8ZjMyPih4VmFsdWUseVZhbHVlLHpWYWx1ZSk7ICAgIFxyXG4gICAgIH1cclxuICAgIGZuIExpbmVhclRvc1JHQiggdmFsdWU6dmVjNDxmMzI+ICktPnZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgcmV0dXJuIHZlYzQ8ZjMyPiggbWl4KCBwb3coIHZhbHVlLnJnYiwgdmVjMzxmMzI+KCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMzxmMzI+KCAwLjA1NSApLCB2YWx1ZS5yZ2IgKiAxMi45MiwgdmVjMzxmMzI+KCBsZXNzVGhhbkVxdWFsKCB2YWx1ZS5yZ2IsIHZlYzM8ZjMyPiggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLmEgKTtcclxuICAgIH1cclxuICBzdHJ1Y3QgRnJhZ21lbnRJbnB1dCB7XHJcbiAgICBAbG9jYXRpb24oMCkgdGV4Q29vcmQgOiB2ZWMzPGYzMj5cclxuICB9O1xyXG4gIEBncm91cCgwKSBAYmluZGluZygyKSB2YXIgZGVmYXVsdFNhbXBsZXI6IHNhbXBsZXI7XHJcbiAgQGdyb3VwKDApIEBiaW5kaW5nKDEpIHZhciBza3lib3hUZXh0dXJlOiB0ZXh0dXJlX2N1YmU8ZjMyPjtcclxuICBAZnJhZ21lbnRcclxuICBmbiBtYWluKGlucHV0IDogRnJhZ21lbnRJbnB1dCkgLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XHJcbiAgICBsZXQgY29sb3IgPSB0ZXh0dXJlU2FtcGxlKHNreWJveFRleHR1cmUsIGRlZmF1bHRTYW1wbGVyLCBpbnB1dC50ZXhDb29yZCk7XHJcbiAgICByZXR1cm4gTGluZWFyVG9zUkdCKGNvbG9yKTtcclxuICB9XHJcbmA7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2t5Qm94VmVydChkZWZpbmVzKSB7XG5cdHJldHVybiBgXG4gICBzdHJ1Y3QgU3lzdGVtVW5pZm9ybSB7XG4gICAgICAgcHJvamVjdGlvbk1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgdmlld01hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgaW52ZXJzZVZpZXdNYXRyaXg6IG1hdDR4NDxmMzI+LFxuICAgICAgIGNhbWVyYVBvc2l0aW9uOiB2ZWMzPGYzMj4sXG4gICB9OyBcbiAgIHN0cnVjdCBNYXRlcmlhbFVuaWZvcm0ge1xuICAgIG1vZGVsTWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiB9XG4gICBAYmluZGluZygke2RlZmluZXMuc2t5Ym94QmluZGluZ30pIEBncm91cCgwKSB2YXI8dW5pZm9ybT4gc2VsZlVuaWZvcm0gOiBNYXRlcmlhbFVuaWZvcm07XG4gICBAYmluZGluZygke2RlZmluZXMuY2FtZXJhQmluZGluZ30pIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gc3lzdGVtVW5pZm9ybSA6IFN5c3RlbVVuaWZvcm07XG4gICAgIHN0cnVjdCBWZXJ0ZXhJbnB1dCB7XG4gICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5wb3NpdGlvbkxvY2F0aW9ufSkgcG9zaXRpb24gOiB2ZWMzPGYzMj4sXG4gICAgIH07XG4gICAgIHN0cnVjdCBWZXJ0ZXhPdXRwdXQge1xuICAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbiA6IHZlYzQ8ZjMyPixcbiAgICAgICBAbG9jYXRpb24oMCkgdGV4Q29vcmQgOiB2ZWMzPGYzMj4sXG4gICAgIH07XG4gICAgIEB2ZXJ0ZXhcbiAgICAgZm4gbWFpbihpbnB1dCA6IFZlcnRleElucHV0KSAtPiBWZXJ0ZXhPdXRwdXQge1xuICAgICAgIHZhciBvdXRwdXQgOiBWZXJ0ZXhPdXRwdXQ7XG4gICAgICAgb3V0cHV0LnRleENvb3JkID0gaW5wdXQucG9zaXRpb24ueHl6O1xuICAgICAgIHZhciBtb2RlbFZpZXcgPSBzeXN0ZW1Vbmlmb3JtLnZpZXdNYXRyaXg7XG4gICAgICAgLy8gRHJvcCB0aGUgdHJhbnNsYXRpb24gcG9ydGlvbiBvZiB0aGUgbW9kZWxWaWV3IG1hdHJpeFxuICAgICAgIG1vZGVsVmlld1szXSA9IHZlYzQoMC4wLCAwLjAsIDAuMCwgbW9kZWxWaWV3WzNdLncpO1xuICAgICAgIG91dHB1dC5wb3NpdGlvbiA9IHN5c3RlbVVuaWZvcm0ucHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlldyAqIHZlYzQ8ZjMyPihpbnB1dC5wb3NpdGlvbiwxLjApO1xuICAgICAgIC8vIFJldHVybmluZyB0aGUgVyBjb21wb25lbnQgZm9yIGJvdGggWiBhbmQgVyBmb3JjZXMgdGhlIGdlb21ldHJ5IGRlcHRoIHRvXG4gICAgICAgLy8gdGhlIGZhciBwbGFuZS4gV2hlbiBjb21iaW5lZCB3aXRoIGEgZGVwdGggZnVuYyBvZiBcImxlc3MtZXF1YWxcIiB0aGlzIG1ha2VzXG4gICAgICAgLy8gdGhlIHNreSB3cml0ZSB0byBhbnkgZGVwdGggZnJhZ21lbnQgdGhhdCBoYXMgbm90IGJlZW4gd3JpdHRlbiB0byB5ZXQuXG4gICAgICAgb3V0cHV0LnBvc2l0aW9uID0gb3V0cHV0LnBvc2l0aW9uLnh5d3c7XG4gICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgfVxuICAgYDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YWRGcmFnKGRlZmluZXMpIHtcclxuXHRyZXR1cm4gYFxyXG4gICAgQGdyb3VwKDApIEBiaW5kaW5nKDEpIHZhciBiYXNlU2FtcGxlcjogc2FtcGxlcjtcclxuICAgIEBncm91cCgwKSBAYmluZGluZygwKSB2YXIgY29sb3JUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICBzdHJ1Y3QgVmVydGV4T3V0cHV0IHtcclxuICAgICAgICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb246IHZlYzQ8ZjMyPixcclxuICAgICAgICBAbG9jYXRpb24oMCkgdXY6IHZlYzI8ZjMyPixcclxuICAgIH07XHJcbiAgICBAZnJhZ21lbnRcclxuICAgIGZuIG1haW4oaW5wdXQ6VmVydGV4T3V0cHV0KSAtPiBAbG9jYXRpb24oMCkgdmVjNDxmMzI+IHtcclxuICAgICAgcmV0dXJuIHRleHR1cmVTYW1wbGUoY29sb3JUZXh0dXJlLCBiYXNlU2FtcGxlciwgdmVjMjxmMzI+KGlucHV0LnV2LngsMS4wLWlucHV0LnV2LnkpKTtcclxuICAgIH1cclxuICAgIGA7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhZFZlcnQoZGVmaW5lcykge1xuXHRyZXR1cm4gYFxuICAgIHN0cnVjdCBWZXJ0ZXhJbnB1dCB7XG4gICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnBvc2l0aW9uTG9jYXRpb259KSBwb3NpdGlvbjogdmVjMjxmMzI+LCAgICAgICBcbiAgICB9XG4gICAgc3RydWN0IFZlcnRleE91dHB1dCB7XG4gICAgICAgICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb246IHZlYzQ8ZjMyPixcbiAgICAgICAgIEBsb2NhdGlvbigwKSB1djogdmVjMjxmMzI+LFxuICAgICB9O1xuICAgIEB2ZXJ0ZXhcbiAgICBmbiBtYWluKGlucHV0OiBWZXJ0ZXhJbnB1dCkgLT4gVmVydGV4T3V0cHV0IHtcbiAgICAgdmFyIG91dHB1dDpWZXJ0ZXhPdXRwdXQ7XG4gICAgIG91dHB1dC51diA9IGlucHV0LnBvc2l0aW9uICogMC41ICsgMC41O1xuICAgICBvdXRwdXQucG9zaXRpb24gPSB2ZWM0PGYzMj4oaW5wdXQucG9zaXRpb24sIDAuMCwgMS4wKTs7XG4gICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuICAgIGA7XG59XG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGJyX3ZzKGRlZmluZXMpIHtcclxuXHRyZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2BcclxuICAgc3RydWN0IE1hdGVyaWFsVW5pZm9ybSB7XHJcbiAgICAgICAgbW9kZWxNYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgb3BhY2l0eTpmMzIsXHJcbiAgICAgICAgbm9ybWFsTWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICBlbWlzc2l2ZTp2ZWMzPGYzMj4sXHJcbiAgICAgICAgbWV0YWxsaWM6ZjMyLFxyXG4gICAgICAgIHJvdWdobmVzczpmMzIsXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgICAgbm9ybWFsVGV4dHVyZVNjYWxlOnZlYzI8ZjMyPixcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9BT1RFWFRVUkV9XHJcbiAgICAgICAgICAgIG9jY2x1c2lvblN0cmVuZ3RoOmYzMixcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLkhBU19TS0lOfSBcclxuICAgICAgICAgICAgIGpvaW50TWF0cml4Q291bnQ6ZjMyLFxyXG4gICAgICAgICAgICAgam9pbnRNYXRyaXhzOmFycmF5PG1hdDR4ND4sXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgIH1cclxuXHJcbiAgIHN0cnVjdCBTeXN0ZW1Vbmlmb3JtIHtcclxuICAgICAgICBwcm9qZWN0aW9uTWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICB2aWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICBpbnZlcnNlVmlld01hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgICAgICAgY2FtZXJhUG9zaXRpb246IHZlYzM8ZjMyPixcclxuICAgfTsgXHJcbiAgIFxyXG4gICBzdHJ1Y3QgVmVydGV4SW5wdXQge1xyXG4gICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMucG9zaXRpb25Mb2NhdGlvbn0pIHBvc2l0aW9uOiB2ZWMzPGYzMj4sICAgICAgIFxyXG4gICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMubm9ybWFsTG9jYXRpb259KSBub3JtYWw6IHZlYzM8ZjMyPixcclxuICAgICAgICAjaWYke2RlZmluZXMuSEFTX0NPTE9SfSBcclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5jb2xvckxvY2F0aW9ufSkgY29sb3I6IHZlYzM8ZjMyPixcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLkhBU19VVn1cclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy51dkxvY2F0aW9ufSkgdXY6IHZlYzI8ZjMyPixcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYke2RlZmluZXMuSEFTX1NLSU59IFxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLmpvaW50MExvY2F0aW9ufSkgam9pbnQwOnZlYzQ8ZjMyPjtcclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy53ZWlnaHQwTG9jYXRpb259KSB3ZWlnaHQwOnZlYzQ8ZjMyPjtcclxuICAgICAgICAgICAgI2lmJHtkZWZpbmVzLlNLSU5fVkVDOH1cclxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMuam9pbnQxTG9jYXRpb259KSBqb2ludDE6dmVjNDxmMzI+O1xyXG4gICAgICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy53ZWlnaHQxTG9jYXRpb259KSB3ZWlnaHQxOnZlYzQ6PGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG4gICB9XHJcbiAgICBzdHJ1Y3QgVmVydGV4T3V0cHV0IHtcclxuICAgICAgICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb246dmVjNDxmMzI+LFxyXG4gICAgICAgIEBsb2NhdGlvbigwKSB3b3JsZFBvczp2ZWMzPGYzMj4sXHJcbiAgICAgICAgQGxvY2F0aW9uKDEpIG5vcm1hbDp2ZWMzPGYzMj4sXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5IQVNfVVZ9XHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigyKSB1djp2ZWMyPGYzMj5cclxuICAgICAgICAjZW5kaWZcclxuICAgIH0gIFxyXG5cclxuICAgIEBiaW5kaW5nKCR7ZGVmaW5lcy5wYnJCaW5kaW5nfSkgQGdyb3VwKDApIHZhcjx1bmlmb3JtPiBtYXRlcmlhbFVuaWZvcm0gOiBNYXRlcmlhbFVuaWZvcm07XHJcbiAgICBAYmluZGluZygke2RlZmluZXMuY2FtZXJhQmluZGluZ30pIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gc3lzdGVtVW5pZm9ybSA6IFN5c3RlbVVuaWZvcm07XHJcbiAgICBAdmVydGV4XHJcbiAgIGZuIG1haW4oaW5wdXQ6IFZlcnRleElucHV0KS0+IFZlcnRleE91dHB1dFxyXG4gICB7XHJcbiAgICAgICAjaWYgJHtkZWZpbmVzLkhBU19TS0lOfSBcclxuICAgICAgICAgICAgdmFyIHNraW5NYXRyaXg6bWF0NHg0PGYzMj4gPSBcclxuICAgICAgICAgICAgICAgICAgIGlucHV0LndlaWdodDAueCAqIG1hdGVyaWFsVW5pZm9ybS5qb2ludE1hdHJpeHNbdTMyKGlucHV0LmpvaW50MC54KV0gK1xyXG4gICAgICAgICAgICAgICAgICAgaW5wdXQud2VpZ2h0MC55ICogbWF0ZXJpYWxVbmlmb3JtLmpvaW50TWF0cml4c1t1MzIoaW5wdXQuam9pbnQwLnkpXSArXHJcbiAgICAgICAgICAgICAgICAgICBpbnB1dC53ZWlnaHQwLnogKiBtYXRlcmlhbFVuaWZvcm0uam9pbnRNYXRyaXhzW3UzMihpbnB1dC5qb2ludDAueildICtcclxuICAgICAgICAgICAgICAgICAgIGlucHV0LndlaWdodDAudyAqIG1hdGVyaWFsVW5pZm9ybS5qb2ludE1hdHJpeHNbdTMyKGlucHV0LmpvaW50MC53KV07XHJcbiAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5TS0lOX1ZFQzh9IFxyXG4gICAgICAgICAgICAgICBza2luTWF0cml4ICs9XHJcbiAgICAgICAgICAgICAgICAgICBpbnB1dC53ZWlnaHQxLnggKiBtYXRlcmlhbFVuaWZvcm0uam9pbnRNYXRyaXhzW3UzMihqb2ludDEueCldICtcclxuICAgICAgICAgICAgICAgICAgIGlucHV0LndlaWdodDEueSAqIG1hdGVyaWFsVW5pZm9ybS5qb2ludE1hdHJpeHNbdTMyKGpvaW50MS55KV0gK1xyXG4gICAgICAgICAgICAgICAgICAgaW5wdXQud2VpZ2h0MS56ICogbWF0ZXJpYWxVbmlmb3JtLmpvaW50TWF0cml4c1t1MzIoam9pbnQxLnopXSArXHJcbiAgICAgICAgICAgICAgICAgICBpbnB1dC53ZWlnaHQxLncgKiBtYXRlcmlhbFVuaWZvcm0uam9pbnRNYXRyaXhzW3UzMihqb2ludDEudyldO1xyXG4gICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIHZhciBvdXRwdXQ6IFZlcnRleE91dHB1dDtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLkhBU19VVn1cclxuICAgICAgICAgICAgb3V0cHV0LnV2ID0gaW5wdXQudXY7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5IQVNfU0tJTn0gXHJcbiAgICAgICAgICAgIG91dHB1dC5ub3JtYWwgPSBub3JtYWxpemUoKG1hdGVyaWFsVW5pZm9ybS5ub3JtYWxNYXRyaXggKiB0cmFuc3Bvc2UoaW52ZXJzZShza2luTWF0cml4KSkgKiB2ZWM0PGYzMj4oaW5wdXQubm9ybWFsLCAwLjApKS54eXopO1xyXG4gICAgICAgICAgICBsZXQgcG9zOnZlYzQ8ZjMyPiA9IHN5c3RlbVVuaWZvcm0udmlld01hdHJpeCAqbWF0ZXJpYWxVbmlmb3JtLm1vZGVsTWF0cml4KnNraW5NYXRyaXggKiB2ZWM0PGYzMj4oaW5wdXQucG9zaXRpb24sIDEuMCk7XHJcbiAgICAgICAgICAgIG91dHB1dC5wb3NpdGlvbiA9IHN5c3RlbVVuaWZvcm0ucHJvamVjdGlvbk1hdHJpeCAqIHN5c3RlbVVuaWZvcm0udmlld01hdHJpeCptYXRlcmlhbFVuaWZvcm0ubW9kZWxNYXRyaXggKiBza2luTWF0cml4ICogdmVjNDxmMzI+KGlucHV0LnBvc2l0aW9uLDEuMCk7XHJcbiAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgbGV0IHZOb3JtYWxWaWV3ID0gbWF0ZXJpYWxVbmlmb3JtLm5vcm1hbE1hdHJpeCAqIHZlYzQ8ZjMyPihpbnB1dC5ub3JtYWwsMC4wKTtcclxuICAgICAgICAgICAgb3V0cHV0Lm5vcm1hbCA9IHZOb3JtYWxWaWV3Lnh5ejtcclxuICAgICAgICAgICAgbGV0IHBvczp2ZWM0PGYzMj49c3lzdGVtVW5pZm9ybS52aWV3TWF0cml4ICptYXRlcmlhbFVuaWZvcm0ubW9kZWxNYXRyaXgqdmVjNDxmMzI+KGlucHV0LnBvc2l0aW9uLCAxLjApO1xyXG4gICAgICAgICAgICBvdXRwdXQucG9zaXRpb24gPSBzeXN0ZW1Vbmlmb3JtLnByb2plY3Rpb25NYXRyaXggKiBzeXN0ZW1Vbmlmb3JtLnZpZXdNYXRyaXggKm1hdGVyaWFsVW5pZm9ybS5tb2RlbE1hdHJpeCogdmVjNDxmMzI+KGlucHV0LnBvc2l0aW9uLCAxLjApO1xyXG4gICAgICAgICNlbmRpZiAgICAgIFxyXG4gICAgICAgIC8vIG91dHB1dC53b3JsZFBvcyA9IHBvcy54eXovcG9zLnc7IFxyXG4gICAgICAgIGxldCBtb2RlbFBvcz1tYXRlcmlhbFVuaWZvcm0ubW9kZWxNYXRyaXggKnZlYzQ8ZjMyPihpbnB1dC5wb3NpdGlvbiwxLjApO1xyXG4gICAgICAgIG91dHB1dC53b3JsZFBvcyA9IG1vZGVsUG9zLnh5ei9tb2RlbFBvcy53O1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7ICAgXHJcbiAgIH1cclxuICAgYDtcclxufVxyXG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGJyX2ZzKGRlZmluZXMpIHtcclxuXHRyZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2BcclxuICAgICAgICAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi1XZWJHTC1QQlIvYmxvYi9tYXN0ZXIvc2hhZGVycy9wYnItZnJhZy5nbHNsXHJcbiAgICAgICAgI2luY2x1ZGUgPHBiclV0aWxzPlxyXG4gICAgICAgICNpbmNsdWRlIDxsaWdodD5cclxuICAgICAgICAjaW5jbHVkZSA8YnJkZj5cclxuICAgICAgICBzdHJ1Y3QgTWF0ZXJpYWxVbmlmb3JtIHtcclxuICAgICAgICAgICAgbW9kZWxNYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgICAgICBjb2xvcjogdmVjMzxmMzI+LFxyXG4gICAgICAgICAgICBvcGFjaXR5OmYzMixcclxuICAgICAgICAgICAgbm9ybWFsTWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICAgICAgZW1pc3NpdmU6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICBtZXRhbGxpYzpmMzIsXHJcbiAgICAgICAgICAgIHJvdWdobmVzczpmMzIsXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX05PUk1BTFRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBub3JtYWxUZXh0dXJlU2NhbGU6dmVjMjxmMzI+LFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQU9URVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgb2NjbHVzaW9uU3RyZW5ndGg6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgfVxyXG4gICAgICAgICBzdHJ1Y3QgU3lzdGVtVW5pZm9ybSB7XHJcbiAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgICAgICB2aWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICAgICAgaW52ZXJzZVZpZXdNYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgICAgICBjYW1lcmFQb3NpdGlvbjogdmVjMzxmMzI+LFxyXG4gICAgICAgIH07IFxyXG4gICAgICAgIHN0cnVjdCBWZXJ0SW5wdXQge1xyXG4gICAgICAgICAgICBAYnVpbHRpbihmcm9udF9mYWNpbmcpIGZyb250RmFjaW5nOiBib29sLFxyXG4gICAgICAgICAgICBAbG9jYXRpb24oMCkgd29ybGRQb3M6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICBAbG9jYXRpb24oMSkgbm9ybWFsOnZlYzM8ZjMyPixcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5IQVNfVVZ9XHJcbiAgICAgICAgICAgICAgICBAbG9jYXRpb24oMikgdXY6dmVjMjxmMzI+XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgIH0gICAgXHJcbiAgICAgICAgc3RydWN0IFBoeXNpY2FsTWF0ZXJpYWwge1xyXG4gICAgICAgICAgICBkaWZmdXNlQ29sb3I6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICByb3VnaG5lc3M6ZjMyLFxyXG4gICAgICAgICAgICBzcGVjdWxhckNvbG9yOnZlYzM8ZjMyPixcclxuICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVR9XHJcbiAgICAgICAgICAgICAgIGNsZWFyY29hdDpmMzIsXHJcbiAgICAgICAgICAgICAgIGNsZWFyY29hdFJvdWdobmVzczpmMzIsXHJcbiAgICAgICAgICAgICAgIGNsZWFyY29hdEYwOnZlYzM8ZjMyPixcclxuICAgICAgICAgICAgICAgY2xlYXJjb2F0RjkwOmYzMixcclxuICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0V9XHJcbiAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlOmYzMixcclxuICAgICAgICAgICAgICAgaXJpZGVzY2VuY2VJT1I6ZjMyLFxyXG4gICAgICAgICAgICAgICBpcmlkZXNjZW5jZVRoaWNrbmVzczpmMzIsXHJcbiAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlRnJlc25lbDp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlRjA6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTn1cclxuICAgICAgICAgICAgICAgc2hlZW5Db2xvcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICAgIHNoZWVuUm91Z2huZXNzOmYzMixcclxuICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5JT1J9XHJcbiAgICAgICAgICAgICAgICBpb3I6ZjMyLFxyXG4gICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UUkFOU01JU1NJT059XHJcbiAgICAgICAgICAgICAgIHRyYW5zbWlzc2lvbjpmMzIsXHJcbiAgICAgICAgICAgICAgIHRyYW5zbWlzc2lvbkFscGhhOmYzMixcclxuICAgICAgICAgICAgICAgdGhpY2tuZXNzOmYzMixcclxuICAgICAgICAgICAgICAgYXR0ZW51YXRpb25EaXN0YW5jZTpmMzIsXHJcbiAgICAgICAgICAgICAgIGF0dGVudWF0aW9uQ29sb3I6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgfTtcclxuICAgICAgICBjb25zdCBNX1BJOmYzMiA9IDMuMTQxNTkyNjUzNTg5NzkzO1xyXG4gICAgICAgIGNvbnN0IGNfTWluUm91Z2huZXNzOmYzMiA9IDAuMDQ7XHJcbiAgICAgICAgQGJpbmRpbmcoJHtkZWZpbmVzLnBickJpbmRpbmd9KSBAZ3JvdXAoMCkgdmFyPHVuaWZvcm0+IG1hdGVyaWFsVW5pZm9ybSA6IE1hdGVyaWFsVW5pZm9ybTtcclxuICAgICAgICBAYmluZGluZygke2RlZmluZXMuY2FtZXJhQmluZGluZ30pIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gc3lzdGVtVW5pZm9ybSA6IFN5c3RlbVVuaWZvcm07XHJcbiAgICAgICAgLy8gSUJMXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSUJMfVxyXG4gICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnNwZWN1bGFyRW52VGV4dHVyZUJpbmRpbmd9KSB2YXIgc3BlY3VsYXJFbnZUZXh0dXJlOiB0ZXh0dXJlX2N1YmU8ZjMyPjtcclxuICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5zcGVjdWxhckVudlNhbXBsZXJCaW5kaW5nfSkgdmFyIHNwZWN1bGFyRW52U2FtcGxlcjogc2FtcGxlcjtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9URVhUVVJFfVxyXG4gICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYmFzZUNvbG9yVGV4dHVyZUJpbmRpbmd9KSB2YXIgYmFzZUNvbG9yVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYmFzZUNvbG9yU2FtcGxlckJpbmRpbmd9KSB2YXIgYmFzZUNvbG9yU2FtcGxlcjogc2FtcGxlcjtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAvLyBub3JtYWwgbWFwXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMubm9ybWFsVGV4dHVyZUJpbmRpbmd9KSB2YXIgbm9ybWFsVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5ub3JtYWxTYW1wbGVyQmluZGluZ30pIHZhciBub3JtYWxTYW1wbGVyOiBzYW1wbGVyO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIC8vIGVtbWlzdmUgbWFwXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRU1JU1NJVkVURVhUVVJFfVxyXG4gICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmVtaXNzaXZlVGV4dHVyZUJpbmRpbmd9KSB2YXIgZW1pc3NpdmVUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuZW1pc3NpdmVTYW1wbGVyQmluZGluZ30pIHZhciBlbWlzc2l2ZVNhbXBsZXI6IHNhbXBsZXI7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgIC8vIG1ldGFsIHJvdWdobmVzc1xyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX01FVEFMTkVTU1RFWFRVUkV9XHJcbiAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLm1ldGFsbmVzc1JvdWdobmVzc1RleHR1cmVCaW5kaW5nfSkgdmFyIG1ldGFsbmVzc1JvdWdobmVzc1RleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMubWV0YWxuZXNzUm91Z2huZXNzU2FtcGxlckJpbmRpbmd9KSB2YXIgbWV0YWxuZXNzUm91Z2huZXNzU2FtcGxlcjogc2FtcGxlcjtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAvLyBvY2NsdXNpb24gdGV4dHVyZVxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0FPVEVYVFVSRX1cclxuICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYW9UZXh0dXJlQmluZGluZ30pIHZhciBhb1RleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYW9TYW1wbGVyQmluZGluZ30pIHZhciBhb1NhbXBsZXI6IHNhbXBsZXI7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgICAgI2luY2x1ZGUgPGdldFRCTj5cclxuICAgICAgICAgICAgI2luY2x1ZGUgPGdldE5vcm1hbEJ5Tm9ybWFsVGV4dHVyZT5cclxuICAgICAgICAjZWxzZVxyXG4gICAgICAgICAgICAjaW5jbHVkZSA8Z2V0Tm9ybWFsPlxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lCTH1cclxuICAgICAgICAgICAgI2luY2x1ZGUgPGlibD5cclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICBAZnJhZ21lbnRcclxuICAgICAgICBmbiBtYWluKGlucHV0OlZlcnRJbnB1dCkgLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBwZXJjZXB0dWFsUm91Z2huZXNzOmYzMiA9IG1hdGVyaWFsVW5pZm9ybS5yb3VnaG5lc3M7XHJcbiAgICAgICAgICAgIHZhciBtZXRhbGxpYzpmMzIgPSBtYXRlcmlhbFVuaWZvcm0ubWV0YWxsaWM7XHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NRVRBTE5FU1NURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgbGV0IG1yU2FtcGxlOnZlYzQ8ZjMyPiA9IHRleHR1cmVTYW1wbGUobWV0YWxuZXNzUm91Z2huZXNzVGV4dHVyZSxtZXRhbG5lc3NSb3VnaG5lc3NTYW1wbGVyLCBpbnB1dC51dik7XHJcbiAgICAgICAgICAgICAgICBwZXJjZXB0dWFsUm91Z2huZXNzID0gbXJTYW1wbGUuZyAqIHBlcmNlcHR1YWxSb3VnaG5lc3M7XHJcbiAgICAgICAgICAgICAgICBtZXRhbGxpYyA9IG1yU2FtcGxlLmIgKiBtZXRhbGxpYztcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIHBlcmNlcHR1YWxSb3VnaG5lc3MgPSBjbGFtcChwZXJjZXB0dWFsUm91Z2huZXNzLCBjX01pblJvdWdobmVzcywgMS4wKTtcclxuICAgICAgICAgICAgbWV0YWxsaWMgPSBjbGFtcChtZXRhbGxpYywgMC4wLCAxLjApO1xyXG4gICAgICAgICAgICBsZXQgYWxwaGFSb3VnaG5lc3M6ZjMyID0gcGVyY2VwdHVhbFJvdWdobmVzcyAqIHBlcmNlcHR1YWxSb3VnaG5lc3M7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gVGhlIGFsYmVkbyBtYXkgYmUgZGVmaW5lZCBmcm9tIGEgYmFzZSB0ZXh0dXJlIG9yIGEgZmxhdCBjb2xvclxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9URVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgbGV0IGJhc2VDb2xvcjp2ZWM0PGYzMj4gPSB0ZXh0dXJlU2FtcGxlKGJhc2VDb2xvclRleHR1cmUsYmFzZUNvbG9yU2FtcGxlciwgaW5wdXQudXYpIDtcclxuICAgICAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgICAgIGxldCBiYXNlQ29sb3I6dmVjNDxmMzI+ID0gdmVjNDxmMzI+KG1hdGVyaWFsVW5pZm9ybS5jb2xvciwxLjApO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX05PUk1BTFRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBsZXQgbjp2ZWMzPGYzMj4gPSBnZXROb3JtYWxCeU5vcm1hbFRleHR1cmUoaW5wdXQpOyAgXHJcbiAgICAgICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgICAgICBsZXQgbjp2ZWMzPGYzMj4gPSBnZXROb3JtYWwoaW5wdXQpO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgdmFyIG1hdGVyaWFsOlBoeXNpY2FsTWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmRpZmZ1c2VDb2xvcj1iYXNlQ29sb3IucmdiKiggMS4wIC0gbWV0YWxsaWMgKTtcclxuICAgICAgICAgICAgbWF0ZXJpYWwucm91Z2huZXNzPXBlcmNlcHR1YWxSb3VnaG5lc3M7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3I9bWl4KCB2ZWMzPGYzMj4oIDAuMDQpLCBiYXNlQ29sb3IucmdiLCBtZXRhbGxpYyApO1xyXG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnk6R2VvbWV0cnk7XHJcbiAgICAgICAgICAgIGdlb21ldHJ5Lm5vcm1hbD1uO1xyXG4gICAgICAgICAgICBnZW9tZXRyeS52aWV3RGlyPW5vcm1hbGl6ZShzeXN0ZW1Vbmlmb3JtLmNhbWVyYVBvc2l0aW9uIC0gaW5wdXQud29ybGRQb3MpO1xyXG4gICAgICAgICAgICBnZW9tZXRyeS5wb3NpdGlvbj1pbnB1dC53b3JsZFBvcztcclxuICAgICAgICAgICAgZ2VvbWV0cnkuZG90TlYgPSBzYXR1cmF0ZShkb3QoZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyKSApO1xyXG4gICAgICAgICAgICAvL2xpZ2h0IHNoYWRpbmdcclxuICAgICAgICAgICAgdmFyIHJlZmxlY3RlZExpZ2h0PXBhcnNlTGlnaHRzKGdlb21ldHJ5LG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgdmFyIGNvbG9yPXJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UrcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXI7XHJcbiAgICAgICAgICAgIC8vSUJMXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lCTCYmZGVmaW5lcy5IQVNfVVZ9XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHREaWZmdXNlPWluZGlyZWN0RGlmZnVzZV9QaHlzaWNhbChnZW9tZXRyeSxtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHRTcGVjdWxhcj1pbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKGdlb21ldHJ5LG1hdGVyaWFsKTtcclxuICAgICAgICAgICAgICAgIGNvbG9yKz1yZWZsZWN0ZWRMaWdodERpZmZ1c2UuaW5kaXJlY3REaWZmdXNlO1xyXG4gICAgICAgICAgICAgICAgY29sb3IrPXJlZmxlY3RlZExpZ2h0U3BlY3VsYXIuaW5kaXJlY3RTcGVjdWxhcjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0FPVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIGxldCBhbzpmMzIgPSB0ZXh0dXJlU2FtcGxlKGFvVGV4dHVyZSxhb1NhbXBsZXIsIGlucHV0LnV2KS5yO1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBtaXgoY29sb3IsIGNvbG9yICogYW8sIG1hdGVyaWFsVW5pZm9ybS5vY2NsdXNpb25TdHJlbmd0aCk7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRU1JU1NJVkVURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgbGV0IGVtaXNzaXZlOnZlYzM8ZjMyPiA9IHRleHR1cmVTYW1wbGUoZW1pc3NpdmVUZXh0dXJlLCBlbWlzc2l2ZVNhbXBsZXIsaW5wdXQudXYpLnJnYiA7XHJcbiAgICAgICAgICAgICAgICBjb2xvciArPSBlbWlzc2l2ZTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICByZXR1cm4gdmVjNDxmMzI+KGNvbG9yLCBiYXNlQ29sb3IuYSk7XHJcbiAgICB9XHJcbiAgIGA7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmx1cihkZWZpbmVzKSB7XHJcblx0cmV0dXJuIGBcclxuICAgIHN0cnVjdCBGcmFnSW5wdXQge1xyXG4gICAgICAgIEBsb2NhdGlvbigwKSB1djogdmVjMjxmMzI+LFxyXG4gICAgfVxyXG4gICAgc3RydWN0IEJsdXJVbmlmb3JtcyB7XHJcbiAgICAgICAgZGlyZWN0aW9uOnZlYzI8ZjMyPixcclxuICAgIH1cclxuICAgIGZuIGdhdXNzaWFuUGRmKHg6ZjMyLCBzaWdtYTpmMzIpLT5mMzIge1xyXG4gICAgICAgIHJldHVybiAwLjM5ODk0ICogZXhwKCAtMC41ICogeCAqIHgvKCBzaWdtYSAqIHNpZ21hKSkvc2lnbWE7XHJcbiAgICB9XHJcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoMCkgIHZhcjx1bmlmb3JtPiBibHVyVW5pZm9ybXMgOiBCbHVyVW5pZm9ybXM7XHJcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoe3t0RGlmZnVzZUJpbmRpbmd9fSkgdmFyIHREaWZmdXNlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoe3t0U2FtcGxlckJpbmRpbmd9fSkgdmFyIHRTYW1wbGVyOiBzYW1wbGVyO1xyXG4gICAgQGZyYWdtZW50XHJcbiAgICBmbiBtYWluKGlucHV0OkZyYWdJbnB1dCkgLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgbGV0IGludlNpemU6dmVjMjxmMzI+ID0gdmVjMjxmMzI+KDEuMCwxLjApIC8gdmVjMjxmMzI+KHRleHR1cmVEaW1lbnNpb25zKHREaWZmdXNlKSk7XHJcbiAgICAgICAgbGV0IGZTaWdtYTpmMzIgPWYzMigke2RlZmluZXMuU0lHTUF9KTtcclxuICAgICAgICB2YXIgd2VpZ2h0U3VtOmYzMiA9IGdhdXNzaWFuUGRmKDAuMCwgZlNpZ21hKTtcclxuICAgICAgICBsZXQgYmFzZUNvbG9yPXRleHR1cmVTYW1wbGUodERpZmZ1c2UsIHRTYW1wbGVyLCBpbnB1dC51dik7XHJcbiAgICAgICAgdmFyIGRpZmZ1c2VTdW06dmVjMzxmMzI+ID0gYmFzZUNvbG9yLnJnYiAqIHdlaWdodFN1bTtcclxuICAgICAgICBsZXQgdXZPZmZzZXQ6dmVjMjxmMzI+ID0gYmx1clVuaWZvcm1zLmRpcmVjdGlvbiAqIGludlNpemU7XHJcbiAgICAgICAgZm9yKCB2YXIgaSA6IHUzMiA9IDE7IGkgPCAke2RlZmluZXMuS0VSTkVMX1JBRElVU307aSA9IGkgKyAxICkge1xyXG4gICAgICAgICAgICBsZXQgeDpmMzIgPSBmMzIoaSk7XHJcbiAgICAgICAgICAgIGxldCB3OmYzMiA9IGdhdXNzaWFuUGRmKHgsIGZTaWdtYSk7XHJcbiAgICAgICAgICAgIGxldCBzYW1wbGUxOnZlYzM8ZjMyPj10ZXh0dXJlU2FtcGxlKHREaWZmdXNlLCB0U2FtcGxlciwgaW5wdXQudXYrIHV2T2Zmc2V0KngpLnJnYjtcclxuICAgICAgICAgICAgbGV0IHNhbXBsZTI6dmVjMzxmMzI+PXRleHR1cmVTYW1wbGUodERpZmZ1c2UsIHRTYW1wbGVyLCBpbnB1dC51di0gdXZPZmZzZXQqeCkucmdiO1xyXG4gICAgICAgICAgICBkaWZmdXNlU3VtID1kaWZmdXNlU3VtKyAoc2FtcGxlMitzYW1wbGUyKSogdztcclxuICAgICAgICAgICAgd2VpZ2h0U3VtICs9IDIuMCAqIHc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpZmZ1c2VTdW0vPXdlaWdodFN1bTtcclxuICAgICAgcmV0dXJuIHZlYzQ8ZjMyPihkaWZmdXNlU3VtLGJhc2VDb2xvci5hKTtcclxuICAgIH1cclxuICBgO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEx1bWlub3NpdHlIaWdoKGRlZmluZXMpIHtcclxuXHRyZXR1cm4gYFxyXG4gICAgc3RydWN0IEx1bWlub3NpdHlVbmlmb3Jtc3tcclxuICAgICAgICBsdW1pbm9zaXR5VGhyZXNob2xkOmYzMixcclxuICAgICAgICBzbW9vdGhXaWR0aDpmMzIsXHJcbiAgICAgICAgZGVmYXVsdENvbG9yOnZlYzM8ZjMyPixcclxuICAgICAgICBkZWZhdWx0T3BhY2l0eTpmMzIsXHJcbiAgICB9XHJcbiAgICBzdHJ1Y3QgRnJhZ0lucHV0IHtcclxuICAgICAgICBAbG9jYXRpb24oMCkgdXY6IHZlYzI8ZjMyPixcclxuICAgIH07XHJcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoMCkgIHZhcjx1bmlmb3JtPiBsdW1pbm9zaXR5VW5pZm9ybXMgOiBMdW1pbm9zaXR5VW5pZm9ybXM7XHJcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoe3t0RGlmZnVzZUJpbmRpbmd9fSkgdmFyIHREaWZmdXNlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoe3t0U2FtcGxlckJpbmRpbmd9fSkgdmFyIHRTYW1wbGVyOiBzYW1wbGVyO1xyXG4gICAgQGZyYWdtZW50XHJcbiAgICBmbiBtYWluKGlucHV0OkZyYWdJbnB1dCktPiBAbG9jYXRpb24oMCkgdmVjNDxmMzI+IHtcclxuXHJcbiAgICAgICAgbGV0IHRleGVsOnZlYzQ8ZjMyPiA9IHRleHR1cmVTYW1wbGUodERpZmZ1c2UsIHRTYW1wbGVyLCBpbnB1dC51dik7XHJcblxyXG4gICAgICAgIGxldCBsdW1hOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggMC4yOTksMC41ODcsMC4xMTQgKTtcclxuXHJcbiAgICAgICAgbGV0IHY6ZjMyID0gZG90KCB0ZXhlbC54eXosIGx1bWEgKTtcclxuXHJcbiAgICAgICAgbGV0IG91dHB1dENvbG9yOnZlYzQ8ZjMyPiA9IHZlYzQ8ZjMyPiggbHVtaW5vc2l0eVVuaWZvcm1zLmRlZmF1bHRDb2xvci5yZ2IsIGx1bWlub3NpdHlVbmlmb3Jtcy5kZWZhdWx0T3BhY2l0eSApO1xyXG5cclxuICAgICAgICBsZXQgYWxwaGE6ZjMyID0gc21vb3Roc3RlcCggbHVtaW5vc2l0eVVuaWZvcm1zLmx1bWlub3NpdHlUaHJlc2hvbGQsIGx1bWlub3NpdHlVbmlmb3Jtcy5sdW1pbm9zaXR5VGhyZXNob2xkICsgbHVtaW5vc2l0eVVuaWZvcm1zLnNtb290aFdpZHRoLCB2ICk7XHJcblxyXG4gICAgICAgcmV0dXJuIG1peCggb3V0cHV0Q29sb3IsIHRleGVsLCBhbHBoYSApO1xyXG4gICAgfVxyXG4gICAgYDtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBibGVuZEZyYWcoZGVmaW5lcykge1xyXG5cdHJldHVybiBgXHJcbiAgICBzdHJ1Y3QgRnJhZ0lucHV0IHtcclxuICAgICAgICBAbG9jYXRpb24oMCkgdXY6IHZlYzI8ZjMyPixcclxuICAgIH07XHJcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoe3t0RGlmZnVzZUJpbmRpbmd9fSkgdmFyIHREaWZmdXNlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoe3tiYXNlQ29sb3JUZXh0dXJlQmluZGluZ319KSB2YXIgYmFzZUNvbG9yVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7dFNhbXBsZXJCaW5kaW5nfX0pIHZhciB0U2FtcGxlcjogc2FtcGxlcjtcclxuICAgIEBmcmFnbWVudFxyXG4gICAgZm4gbWFpbihpbnB1dDpGcmFnSW5wdXQpIC0+IEBsb2NhdGlvbigwKSB2ZWM0PGYzMj4ge1xyXG4gICAgICAgIGxldCBwb3N0Q29sb3I6dmVjNDxmMzI+ID0gdGV4dHVyZVNhbXBsZSh0RGlmZnVzZSwgdFNhbXBsZXIsIGlucHV0LnV2KTtcclxuICAgICAgICBsZXQgYmFzZUNvbG9yOnZlYzQ8ZjMyPiA9IHRleHR1cmVTYW1wbGUoYmFzZUNvbG9yVGV4dHVyZSwgdFNhbXBsZXIsIGlucHV0LnV2KTtcclxuICAgICAgcmV0dXJuIGJhc2VDb2xvcitwb3N0Q29sb3I7XHJcbiAgICB9ICAgXHJcbiAgICBgO1xyXG59XHJcbiIsImltcG9ydCBTaGFkZXJDaHVuayBmcm9tIFwiLi9zaGFkZXJDaHVuay9TaGFkZXJDaHVua1wiO1xyXG5pbXBvcnQgcGhvbmdWZXJ0IGZyb20gXCIuL21hdGVyaWFsL3Bob25nVmVydFwiO1xyXG5pbXBvcnQgcGhvbmdGcmFnIGZyb20gXCIuL21hdGVyaWFsL3Bob25nRnJhZ1wiO1xyXG5pbXBvcnQgY29sb3JGcmFnIGZyb20gXCIuL21hdGVyaWFsL2NvbG9yRnJhZ1wiO1xyXG5pbXBvcnQgY29sb3JWZXJ0IGZyb20gXCIuL21hdGVyaWFsL2NvbG9yVmVydFwiO1xyXG5pbXBvcnQgcGJyRnJhZyBmcm9tIFwiLi9tYXRlcmlhbC9wYnJGcmFnXCI7XHJcbmltcG9ydCBwYnJWZXJ0IGZyb20gXCIuL21hdGVyaWFsL3BiclZlcnRcIjtcclxuaW1wb3J0IHNreUJveEZyYWcgZnJvbSBcIi4vbWF0ZXJpYWwvc2t5Qm94RnJhZ1wiO1xyXG5pbXBvcnQgc2t5Qm94VmVydCBmcm9tIFwiLi9tYXRlcmlhbC9za3lCb3hWZXJ0XCI7XHJcbmltcG9ydCBxdWFkRnJhZyBmcm9tIFwiLi9tYXRlcmlhbC9xdWFkRnJhZ1wiO1xyXG5pbXBvcnQgc2hhZG93VGVzdEZyYWcgZnJvbSBcIi4vbWF0ZXJpYWwvc2hhZG93VGVzdEZyYWdcIjtcclxuaW1wb3J0IHF1YWRWZXJ0IGZyb20gXCIuL21hdGVyaWFsL3F1YWRWZXJ0XCI7XHJcbmltcG9ydCBwYnJfdnMgZnJvbSBcIi4vbWF0ZXJpYWwvcGJyX3ZzXCI7XHJcbmltcG9ydCBwYnJfZnMgZnJvbSBcIi4vbWF0ZXJpYWwvcGJyX2ZzXCI7XHJcbmltcG9ydCBCbHVyIGZyb20gXCIuL3Bvc3RQcm9jZXNzL2Jsb29tL0JsdXJcIjtcclxuaW1wb3J0IEx1bWlub3NpdHlIaWdoIGZyb20gXCIuL3Bvc3RQcm9jZXNzL2Jsb29tL0x1bWlub3NpdHlIaWdoXCI7XHJcbmltcG9ydCBibGVuZEZyYWcgZnJvbSBcIi4vcG9zdFByb2Nlc3MvYmxlbmQvYmxlbmRGcmFnXCI7XHJcblxyXG5mdW5jdGlvbiByZWR1Y2VDb21tYShzaGFkZXIpIHtcclxuXHQvL+WvueaJgOacieeahGluY2x1ZGXlpITnkIZcclxuXHRjb25zdCBzdHIgPSByZXNvbHZlSW5jbHVkZXMoc2hhZGVyKTtcclxuXHRyZXR1cm4gc3RyO1xyXG59XHJcbmNvbnN0IGluY2x1ZGVQYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcclxubGV0IGN1cnJlbnREZWZpbmVzID0ge307XHJcbmNvbnN0IHNoYWRlcnMgPSB7XHJcblx0cGhvbmc6IHtcclxuXHRcdGZyYWc6IHBob25nRnJhZyxcclxuXHRcdHZlcnQ6IHBob25nVmVydFxyXG5cdH0sXHJcblx0Y29sb3I6IHtcclxuXHRcdGZyYWc6IGNvbG9yRnJhZyxcclxuXHRcdHZlcnQ6IGNvbG9yVmVydFxyXG5cdH0sXHJcblx0cGJyOiB7XHJcblx0XHRmcmFnOiBwYnJGcmFnLFxyXG5cdFx0dmVydDogcGJyVmVydFxyXG5cdH0sXHJcblx0c2t5Ym94OiB7XHJcblx0XHRmcmFnOiBza3lCb3hGcmFnLFxyXG5cdFx0dmVydDogc2t5Qm94VmVydFxyXG5cdH0sXHJcblx0cmVzb2x2ZToge1xyXG5cdFx0ZnJhZzogcXVhZEZyYWcsXHJcblx0XHR2ZXJ0OiBxdWFkVmVydFxyXG5cdH0sXHJcblx0cGJyX21hdDoge1xyXG5cdFx0ZnJhZzogcGJyX2ZzLFxyXG5cdFx0dmVydDogcGJyX3ZzXHJcblx0fSxcclxuXHRibHVyOiB7XHJcblx0XHRmcmFnOiBCbHVyLFxyXG5cdFx0dmVydDogcXVhZFZlcnRcclxuXHR9LFxyXG5cdGx1bWlub3NpdHlIaWdoOiB7XHJcblx0XHRmcmFnOiBMdW1pbm9zaXR5SGlnaCxcclxuXHRcdHZlcnQ6IHF1YWRWZXJ0XHJcblx0fSxcclxuXHRibGVuZDoge1xyXG5cdFx0ZnJhZzogYmxlbmRGcmFnLFxyXG5cdFx0dmVydDogcXVhZFZlcnRcclxuXHR9XHJcbn07XHJcblxyXG5mdW5jdGlvbiByZXNvbHZlSW5jbHVkZXMoc3RyaW5nKSB7XHJcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKGluY2x1ZGVQYXR0ZXJuLCBpbmNsdWRlUmVwbGFjZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmNsdWRlUmVwbGFjZXIobWF0Y2gsIGluY2x1ZGUpIHtcclxuXHRjb25zdCBleGN1dGUgPSBTaGFkZXJDaHVua1tpbmNsdWRlXTtcclxuXHRpZiAoZXhjdXRlID09PSB1bmRlZmluZWQpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcihgQ2FuIG5vdCByZXNvbHZlICNpbmNsdWRlIDwke2luY2x1ZGV9PmApO1xyXG5cdH1cclxuXHRjb25zdCByZXN1bHQgPSBleGN1dGUoY3VycmVudERlZmluZXMpO1xyXG5cdHJldHVybiByZXNvbHZlSW5jbHVkZXMocmVzdWx0KTtcclxufVxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWZXJ0RnJhZyh0eXBlLCBkZWZpbmVzID0ge30pIHtcclxuXHRjb25zdCBleGN1dGVGdW5jID0gc2hhZGVyc1t0eXBlXTtcclxuXHRjdXJyZW50RGVmaW5lcyA9IGRlZmluZXM7XHJcblx0cmV0dXJuIHtcclxuXHRcdHZlcnQ6IHJlZHVjZUNvbW1hKGV4Y3V0ZUZ1bmMudmVydChjdXJyZW50RGVmaW5lcykpLFxyXG5cdFx0ZnJhZzogcmVkdWNlQ29tbWEoZXhjdXRlRnVuYy5mcmFnKGN1cnJlbnREZWZpbmVzKSlcclxuXHR9O1xyXG59XHJcbiIsImltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xuaW1wb3J0IGdldFZlcnRGcmFnIGZyb20gXCIuL1NoYWRlcnNcIjtcbmV4cG9ydCBpbnRlcmZhY2UgR1BVU2hhZGVyTW9kdWxlT2JqZWN0IHtcblx0dmVydDogR1BVU2hhZGVyTW9kdWxlO1xuXHRmcmFnOiBHUFVTaGFkZXJNb2R1bGU7XG59XG5leHBvcnQgY2xhc3MgU2hhZGVyU291cmNlIHtcblx0dmVydEVudHJ5UG9pbnQ/OiBzdHJpbmc7XG5cdGZyYWdFbnRyeVBvaW50Pzogc3RyaW5nO1xuXHR2ZXJ0Pzogc3RyaW5nIHwgRnVuY3Rpb247XG5cdGZyYWc/OiBzdHJpbmcgfCBGdW5jdGlvbjtcblx0Y29tcHV0ZT86IHN0cmluZyB8IEZ1bmN0aW9uO1xuXHRjb21wdXRlTWFpbj86IHN0cmluZztcblx0ZGVmaW5lcz86IHt9O1xuXHRkaXJ0eTogYm9vbGVhbjtcblx0cmVuZGVyOiBib29sZWFuO1xuXHR0eXBlOiBzdHJpbmc7XG5cdHByaXZhdGUgX3VpZDogc3RyaW5nO1xuXHRwcml2YXRlIGN1c3RvbTogYm9vbGVhbjtcblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcblx0XHR0aGlzLmRlZmluZXMgPSBvcHRpb25zLmRlZmluZXM7XG5cdFx0dGhpcy5jdXN0b20gPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5jdXN0b20sIGZhbHNlKTtcblx0XHR0aGlzLmRpcnR5ID0gdHJ1ZTtcblx0XHRpZiAob3B0aW9ucy5yZW5kZXIpIHtcblx0XHRcdHRoaXMucmVuZGVyID0gdHJ1ZTtcblx0XHRcdHRoaXMudmVydEVudHJ5UG9pbnQgPSBvcHRpb25zLnZlcnRNYWluIHx8IFwibWFpblwiO1xuXHRcdFx0dGhpcy5mcmFnRW50cnlQb2ludCA9IG9wdGlvbnMuZnJhZ01haW4gfHwgXCJtYWluXCI7XG5cdFx0XHR0aGlzLnZlcnQgPSBvcHRpb25zLnZlcnQgfHwgdW5kZWZpbmVkO1xuXHRcdFx0dGhpcy5mcmFnID0gb3B0aW9ucy5mcmFnIHx8IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5jb21wdXRlID0gb3B0aW9ucy5jb21wdXRlIHx8IHVuZGVmaW5lZDtcblx0XHRcdHRoaXMuY29tcHV0ZU1haW4gPSBvcHRpb25zLmNvbXB1dGVNYWluIHx8IFwibWFpblwiO1xuXHRcdH1cblx0fVxuXHRnZXQgdWlkKCkge1xuXHRcdHRoaXMuX3VpZCA9IHRoaXMudHlwZS5jb25jYXQoSlNPTi5zdHJpbmdpZnkodGhpcy5kZWZpbmVzKSk7XG5cdFx0cmV0dXJuIHRoaXMuX3VpZDtcblx0fVxuXHRwcml2YXRlIHVwZGF0ZVNoYWRlclN0cigpIHtcblx0XHRpZiAodGhpcy5jdXN0b20pIHtcblx0XHRcdGlmICh0aGlzLmNvbXB1dGUpIHtcblx0XHRcdFx0dGhpcy5jb21wdXRlID0gKDxGdW5jdGlvbj50aGlzLmNvbXB1dGUpKHRoaXMuZGVmaW5lcyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnZlcnQgPSB0aGlzLnZlcnQgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IHRoaXMudmVydCh0aGlzLmRlZmluZXMpIDogdGhpcy52ZXJ0O1xuXHRcdFx0XHR0aGlzLmZyYWcgPSB0aGlzLmZyYWcgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IHRoaXMuZnJhZyh0aGlzLmRlZmluZXMpIDogdGhpcy5mcmFnO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBzb3VyY2UgPSBnZXRWZXJ0RnJhZyh0aGlzLnR5cGUsIHRoaXMuZGVmaW5lcyk7XG5cblx0XHRcdHRoaXMudmVydCA9IHNvdXJjZS52ZXJ0O1xuXHRcdFx0dGhpcy5mcmFnID0gc291cmNlLmZyYWc7XG5cdFx0fVxuXHR9XG5cdHB1YmxpYyBzZXREZWZpbmVzKGRlZmluZXMpIHtcblx0XHR0aGlzLmRpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLmRlZmluZXMgPSBPYmplY3QuYXNzaWduKHRoaXMuZGVmaW5lcywgZGVmaW5lcyk7XG5cdH1cblx0Y3JlYXRlU2hhZGVyTW9kdWxlKGRldmljZTogR1BVRGV2aWNlKTogeyB2ZXJ0OiBHUFVTaGFkZXJNb2R1bGU7IGZyYWc6IEdQVVNoYWRlck1vZHVsZSB9IHwgR1BVU2hhZGVyTW9kdWxlIHtcblx0XHRpZiAodGhpcy5kaXJ0eSkge1xuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTdHIoKTtcblx0XHRcdHRoaXMuZGlydHkgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKHRoaXMucmVuZGVyKSB7XG5cdFx0XHRjb25zdCB2ZXJ0ID0gdGhpcy52ZXJ0XG5cdFx0XHRcdD8gZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG5cdFx0XHRcdFx0XHRjb2RlOiA8c3RyaW5nPnRoaXMudmVydFxuXHRcdFx0XHQgIH0pXG5cdFx0XHRcdDogdW5kZWZpbmVkO1xuXHRcdFx0Y29uc3QgZnJhZyA9IHRoaXMuZnJhZ1xuXHRcdFx0XHQ/IGRldmljZS5jcmVhdGVTaGFkZXJNb2R1bGUoe1xuXHRcdFx0XHRcdFx0Y29kZTogPHN0cmluZz50aGlzLmZyYWdcblx0XHRcdFx0ICB9KVxuXHRcdFx0XHQ6IHVuZGVmaW5lZDtcblxuXHRcdFx0cmV0dXJuIHsgdmVydCwgZnJhZyB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBjb21wdXRlID0gZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG5cdFx0XHRcdGNvZGU6IDxzdHJpbmc+dGhpcy5jb21wdXRlXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBjb21wdXRlO1xuXHRcdH1cblx0fVxuXHRzdGF0aWMgcmVwbGFjZU1haW4oc291cmNlOiBzdHJpbmcsIHJlbmFtZWRNYWluOiBzdHJpbmcpIHtcblx0XHRyZW5hbWVkTWFpbiA9IGB2b2lkICR7cmVuYW1lZE1haW59KClgO1xuXHRcdHJldHVybiBzb3VyY2UucmVwbGFjZSgvdm9pZFxccyttYWluXFxzKlxcKFxccyooPzp2b2lkKT9cXHMqXFwpL2csIHJlbmFtZWRNYWluKTtcblx0fVxuXHRzdGF0aWMgY29tcGlsZUN1c3RvbVNoYWRlcmJhY2tVcCh0ZW1wbGF0ZSwgZGVmaW5lcyk6IHN0cmluZyB7XG5cdFx0Y29uc3QgcmVnID0gL1xce1xceyhcXHcrKVxcfVxcfS87XG5cdFx0aWYgKHJlZy50ZXN0KHRlbXBsYXRlKSkge1xuXHRcdFx0Y29uc3QgbmFtZSA9IHJlZy5leGVjKHRlbXBsYXRlKVsxXTtcblx0XHRcdHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShyZWcsIGRlZmluZXNbbmFtZV0pO1xuXHRcdFx0cmV0dXJuIFNoYWRlclNvdXJjZS5jb21waWxlQ3VzdG9tU2hhZGVyKHRlbXBsYXRlLCBkZWZpbmVzKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHR9XG5cdHN0YXRpYyBjb21waWxlQ3VzdG9tU2hhZGVyKHRlbXBsYXRlLCBkZWZpbmVzKTogc3RyaW5nIHtcblx0XHRjb25zdCByZWcgPSAvXFwkeyhcXHcrKS4oXFx3Kyl9Lztcblx0XHRpZiAocmVnLnRlc3QodGVtcGxhdGUpKSB7XG5cdFx0XHRjb25zdCByZWdWYWx1ZSA9IHJlZy5leGVjKHRlbXBsYXRlKTtcblx0XHRcdGNvbnN0IGRlZmluZSA9IHJlZ1ZhbHVlWzJdO1xuXHRcdFx0Y29uc3QgbmFtZSA9IHJlZ1ZhbHVlWzBdO1xuXHRcdFx0dGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKG5hbWUsIGRlZmluZXNbZGVmaW5lXSk7XG5cdFx0XHRyZXR1cm4gU2hhZGVyU291cmNlLmNvbXBpbGVDdXN0b21TaGFkZXIodGVtcGxhdGUsIGRlZmluZXMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdH1cbn1cbiIsImltcG9ydCB7IERlcHRoU3RlbmNpbCwgUmVuZGVyU3RhdGUsIFRhcmdldCwgUHJpbWl0aXZlIH0gZnJvbSBcIi4uL3JlbmRlci9SZW5kZXJTdGF0ZVwiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4uL3JlbmRlci9TYW1wbGVyXCI7XG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcbmltcG9ydCB7IFNoYWRlclNvdXJjZSB9IGZyb20gXCIuLi9zaGFkZXIvU2hhZGVyU291cmNlXCI7XG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xuaW1wb3J0IENvbG9yIGZyb20gXCIuLi9tYXRoL0NvbG9yXCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xuaW1wb3J0IFNoYWRlckRhdGEgZnJvbSBcIi4uL3JlbmRlci9TaGFkZXJEYXRhXCI7XG5pbXBvcnQgeyBDdWxsTW9kZSwgUHJpbWl0aXZlVG9wb2xvZ3kgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuZXhwb3J0IGNsYXNzIE1hdGVyaWFsIHtcblx0cHVibGljIHNoYWRlckRhdGE6IFNoYWRlckRhdGE7XG5cblx0Y29sb3I/OiBDb2xvcjtcblxuXHRiYXNlU2FtcGxlcj86IFNhbXBsZXI7XG5cblx0YmFzZVRleHR1cmU/OiBUZXh0dXJlO1xuXG5cdHR5cGU6IHN0cmluZztcblxuXHRsYWJlbDogc3RyaW5nO1xuXG5cdHNoYWRlclNvdXJjZTogU2hhZGVyU291cmNlO1xuXG5cdHRyYW5zcGFyZW50OiBib29sZWFuO1xuXG5cdGRpcnR5OiBib29sZWFuO1xuXG5cdGxpZ2h0OiBib29sZWFuO1xuXG5cdHJlYWR5OiBib29sZWFuO1xuXG5cdHByaXZhdGUgX2VtaXNzaXZlOiBDb2xvcjtcblxuXHRwcml2YXRlIF9vcGFjaXR5OiBudW1iZXI7XG5cblx0cHJpdmF0ZSBfZW1pc3NpdmVJbnRlbnNpdHk6IG51bWJlcjtcblxuXHRwcml2YXRlIF9kaWZmdXNlOiBDb2xvcjtcblxuXHRwcml2YXRlIF9yZW5kZXJTdGF0ZTogUmVuZGVyU3RhdGU7XG5cblx0cHJpdmF0ZSBfZG91YmxlU2lkZWQ6IGJvb2xlYW47XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5sYWJlbCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5iYXNlVGV4dHVyZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmJhc2VTYW1wbGVyID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuX2RpZmZ1c2UgPSBuZXcgQ29sb3IoMC4wLCAwLjAsIDAuMCk7XG5cdFx0dGhpcy5fb3BhY2l0eSA9IDEuMDtcblx0XHQvL0J1ZmZlclxuXHRcdHRoaXMuc2hhZGVyRGF0YSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnNoYWRlclNvdXJjZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmRpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLl9lbWlzc2l2ZSA9IG5ldyBDb2xvcigwLjAsIDAuMCwgMCk7XG5cdFx0dGhpcy5fZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XG5cdFx0dGhpcy5fZG91YmxlU2lkZWQgPSB0cnVlO1xuXHRcdHRoaXMubGlnaHQgPSBmYWxzZTtcblx0XHR0aGlzLnJlYWR5ID0gZmFsc2U7XG5cdFx0dGhpcy5pbml0KCk7XG5cdH1cblx0cHVibGljIHNldCB3aXJlZnJhbWUodmFsdWU6IEJvb2xlYW4pIHtcblx0XHR0aGlzLnJlbmRlclN0YXRlLnByaW1pdGl2ZS50b3BvbG9neSA9IHZhbHVlID8gUHJpbWl0aXZlVG9wb2xvZ3kuTGluZUxpc3QgOiBQcmltaXRpdmVUb3BvbG9neS5UcmlhbmdsZUxpc3Q7XG5cdH1cblx0cHVibGljIGdldCBkb3VibGVTaWRlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fZG91YmxlU2lkZWQ7XG5cdH1cblx0cHVibGljIHNldCBkb3VibGVTaWRlZCh2YWx1ZTogYm9vbGVhbikge1xuXHRcdHRoaXMuX3JlbmRlclN0YXRlLnByaW1pdGl2ZS5jdWxsTW9kZSA9IHZhbHVlID8gQ3VsbE1vZGUuTm9uZSA6IEN1bGxNb2RlLkJhY2s7XG5cdFx0dGhpcy5fZG91YmxlU2lkZWQgPSB2YWx1ZTtcblx0fVxuXHRwdWJsaWMgZ2V0IHJlbmRlclN0YXRlKCkge1xuXHRcdHJldHVybiB0aGlzLl9yZW5kZXJTdGF0ZTtcblx0fVxuXHRwdWJsaWMgc2V0IHJlbmRlclN0YXRlKHZhbHVlOiBSZW5kZXJTdGF0ZSkge1xuXHRcdHRoaXMuX3JlbmRlclN0YXRlID0gdmFsdWU7XG5cdH1cblx0cHVibGljIGdldCBkaWZmdXNlKCk6IENvbG9yIHtcblx0XHRyZXR1cm4gdGhpcy5fZGlmZnVzZTtcblx0fVxuXHRwdWJsaWMgc2V0IGRpZmZ1c2UodjogQ29sb3IpIHtcblx0XHR0aGlzLl9kaWZmdXNlID0gdjtcblx0fVxuXHRwdWJsaWMgZ2V0IGVtaXNzaXZlKCk6IENvbG9yIHtcblx0XHRyZXR1cm4gdGhpcy5fZW1pc3NpdmU7XG5cdH1cblx0cHVibGljIHNldCBlbWlzc2l2ZSh2OiBDb2xvcikge1xuXHRcdHRoaXMuX2VtaXNzaXZlID0gdjtcblx0fVxuXHRwdWJsaWMgZ2V0IGVtaXNzaXZlSW50ZW5zaXR5KCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIHRoaXMuX2VtaXNzaXZlSW50ZW5zaXR5O1xuXHR9XG5cdHB1YmxpYyBzZXQgZW1pc3NpdmVJbnRlbnNpdHkodjogbnVtYmVyKSB7XG5cdFx0dGhpcy5fZW1pc3NpdmVJbnRlbnNpdHkgPSB2O1xuXHR9XG5cdHB1YmxpYyBnZXQgb3BhY2l0eSgpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLl9vcGFjaXR5O1xuXHR9XG5cdHB1YmxpYyBzZXQgb3BhY2l0eSh2OiBudW1iZXIpIHtcblx0XHR0aGlzLl9vcGFjaXR5ID0gdjtcblx0fVxuXHRvbkJlZm9yZVJlbmRlcigpIHt9XG5cblx0b25CZWZvcmVDb21waWxlKCkge31cblx0Y2xvbmUoKTogTWF0ZXJpYWwge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHVwZGF0ZShmcmFtZVN0YXRlPzogRnJhbWVTdGF0ZSwgbWVzaD86IE1lc2gpIHt9XG5cdHByb3RlY3RlZCBjcmVhdGVTaGFkZXJEYXRhKG1lc2g6IE1lc2gsIGZyYW1lU3RhdGU/OiBGcmFtZVN0YXRlKSB7XG5cdFx0aWYgKHRoaXMuc2hhZGVyRGF0YSkgdGhpcy5zaGFkZXJEYXRhLmRlc3Ryb3koKTtcblx0XHR0aGlzLnNoYWRlckRhdGEgPSBuZXcgU2hhZGVyRGF0YSh0aGlzLnR5cGUsIDApO1xuXHRcdHRoaXMucmVhZHkgPSB0cnVlO1xuXHR9XG5cdHByaXZhdGUgaW5pdCgpIHtcblx0XHQvL+m7mOiupOa4suafk+eKtuaAgVxuXHRcdGNvbnN0IHByaW1pdGl2ZSA9IG5ldyBQcmltaXRpdmUoKTtcblx0XHRjb25zdCB0YXJnZXQgPSBuZXcgVGFyZ2V0KCk7XG5cdFx0Y29uc3QgZGVwdGhTdGVuY2lsID0gbmV3IERlcHRoU3RlbmNpbCgpO1xuXHRcdHRoaXMuX3JlbmRlclN0YXRlID0gbmV3IFJlbmRlclN0YXRlKCk7XG5cdFx0dGhpcy5fcmVuZGVyU3RhdGUucHJpbWl0aXZlID0gcHJpbWl0aXZlO1xuXHRcdHRoaXMuX3JlbmRlclN0YXRlLnRhcmdldHMgPSBbdGFyZ2V0XTtcblx0XHR0aGlzLl9yZW5kZXJTdGF0ZS5kZXB0aFN0ZW5jaWwgPSBkZXB0aFN0ZW5jaWw7XG5cdH1cblx0cHVibGljIGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5sYWJlbCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5iYXNlVGV4dHVyZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmJhc2VTYW1wbGVyID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuY29sb3IgPSB1bmRlZmluZWQ7XG5cdH1cbn1cbiIsImltcG9ydCB7IFNoYWRlclNvdXJjZSB9IGZyb20gXCIuLi9zaGFkZXIvU2hhZGVyU291cmNlXCI7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuL01hdGVyaWFsXCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGVcIjtcbmltcG9ydCBVbmlmb3JtQnVmZmVyIGZyb20gXCIuLi9yZW5kZXIvVW5pZm9ybUJ1ZmZlclwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sb3JNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSBcImNvbG9yXCI7XG5cdFx0dGhpcy5zaGFkZXJTb3VyY2UgPSBuZXcgU2hhZGVyU291cmNlKHtcblx0XHRcdHR5cGU6IHRoaXMudHlwZSxcblx0XHRcdHJlbmRlcjogdHJ1ZSxcblx0XHRcdGRlZmluZXM6IHt9XG5cdFx0fSk7XG5cdH1cblx0dXBkYXRlKGZyYW1lU3RhdGU6IEZyYW1lU3RhdGUsIG1lc2g6IE1lc2gpIHtcblx0XHRpZiAoIXRoaXMuc2hhZGVyRGF0YSB8fCB0aGlzLmRpcnR5KSB0aGlzLmNyZWF0ZVNoYWRlckRhdGEobWVzaCk7XG5cdFx0Y29uc3QgdW5pZm9ybUJ1ZmZlciA9IG5ldyBVbmlmb3JtQnVmZmVyKFwiY29sb3JcIik7XG5cdFx0dW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXg0KFwibW9kZWxNYXRyaXhcIiwgKCkgPT4ge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSk7XG5cdFx0dGhpcy5zaGFkZXJEYXRhLnNldFVuaWZvcm1CdWZmZXIoXCJjb2xvclwiLCB1bmlmb3JtQnVmZmVyKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGVcIjtcbmltcG9ydCBHZW9tZXRyeSBmcm9tIFwiLi4vZ2VvbWV0cnkvR2VvbWV0cnlcIjtcbmltcG9ydCBDb2xvck1hdGVyaWFsIGZyb20gXCIuLi9tYXRlcmlhbC9Db2xvck1hdGVyaWFsXCI7XG5pbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi9NZXNoXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBeGVzIGV4dGVuZHMgTWVzaCB7XG5cdHR5cGU6IHN0cmluZztcblx0bWF0ZXJpYWw6IENvbG9yTWF0ZXJpYWw7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5kaXN0YW5jZVRvQ2FtZXJhID0gMTA7XG5cdFx0dGhpcy5tYXRlcmlhbCA9IG5ldyBDb2xvck1hdGVyaWFsKCk7XG5cdFx0dGhpcy5tYXRlcmlhbC53aXJlZnJhbWUgPSB0cnVlO1xuXHRcdHRoaXMuaW5pdCgpO1xuXHR9XG5cdHVwZGF0ZShmcmFtZVN0YXRlOiBGcmFtZVN0YXRlKSB7XG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblx0XHR0aGlzLm1hdGVyaWFsLnVwZGF0ZShmcmFtZVN0YXRlLCB0aGlzKTtcblx0XHRmcmFtZVN0YXRlLnJlbmRlclF1ZXVlLm9wYXF1ZS5wdXNoKHRoaXMpO1xuXHR9XG5cdHByaXZhdGUgaW5pdCgpIHtcblx0XHRjb25zdCBwb3NpdGlvbiA9IFswLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAwLCAxXTtcblx0XHRjb25zdCBjb2xvcnMgPSBbMSwgMCwgMCwgMSwgMSwgMC41LCAwLjUsIDEsIDAsIDEsIDAsIDEsIDAuNSwgMSwgMC41LCAxLCAwLCAwLCAxLCAxLCAwLjUsIDAuNSwgMSwgMV07XG5cdFx0Y29uc3QgaW5kaWNlcyA9IFswLCAxLCAyLCAzLCA0LCA1XTtcblx0XHR0aGlzLmdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KHt9KTtcblx0XHR0aGlzLmdlb21ldHJ5LnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHBvc2l0aW9uLCAzKSk7XG5cdFx0dGhpcy5nZW9tZXRyeS5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJjb2xvclwiLCBjb2xvcnMsIDQpKTtcblx0XHR0aGlzLmdlb21ldHJ5LnNldEluZGljZShpbmRpY2VzKTtcblx0XHR0aGlzLmdlb21ldHJ5LmNvdW50ID0gaW5kaWNlcy5sZW5ndGg7XG5cdH1cbn1cbiIsImltcG9ydCB7IEZsb2F0MzJBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vcmVuZGVyL0F0dHJpYnV0ZVwiO1xyXG5pbXBvcnQgR2VvbWV0cnkgZnJvbSBcIi4vR2VvbWV0cnlcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2t5Qm94R2VvbWV0cnkgZXh0ZW5kcyBHZW9tZXRyeSB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRzdXBlcih7XHJcblx0XHRcdHR5cGU6IFwic2t5Qm94R2VvbWV0cnlcIlxyXG5cdFx0fSk7XHJcblx0XHR0aGlzLmluaXQoKTtcclxuXHR9XHJcblx0cHVibGljIHVwZGF0ZShmcmFtZVN0YXRlKSB7XHJcblx0XHRjb25zdCB7IGRldmljZSB9ID0gZnJhbWVTdGF0ZS5jb250ZXh0O1xyXG5cdH1cclxuXHRwdWJsaWMgaW5pdCgpIHtcclxuXHRcdHRoaXMucG9zaXRpb25zID0gW1xyXG5cdFx0XHQxLjAsXHJcblx0XHRcdDEuMCxcclxuXHRcdFx0MS4wLCAvLyAwXHJcblx0XHRcdC0xLjAsXHJcblx0XHRcdDEuMCxcclxuXHRcdFx0MS4wLCAvLyAxXHJcblx0XHRcdDEuMCxcclxuXHRcdFx0LTEuMCxcclxuXHRcdFx0MS4wLCAvLyAyXHJcblx0XHRcdC0xLjAsXHJcblx0XHRcdC0xLjAsXHJcblx0XHRcdDEuMCwgLy8gM1xyXG5cdFx0XHQxLjAsXHJcblx0XHRcdDEuMCxcclxuXHRcdFx0LTEuMCwgLy8gNFxyXG5cdFx0XHQtMS4wLFxyXG5cdFx0XHQxLjAsXHJcblx0XHRcdC0xLjAsIC8vIDVcclxuXHRcdFx0MS4wLFxyXG5cdFx0XHQtMS4wLFxyXG5cdFx0XHQtMS4wLCAvLyA2XHJcblx0XHRcdC0xLjAsXHJcblx0XHRcdC0xLjAsXHJcblx0XHRcdC0xLjAgLy8gN1xyXG5cdFx0XTtcclxuXHRcdHRoaXMuaW5kaWNlcyA9IFtcclxuXHRcdFx0Ly8gUG9zWCAoUmlnaHQpXHJcblx0XHRcdDAsIDIsIDQsIDYsIDQsIDIsXHJcblxyXG5cdFx0XHQvLyBOZWdYIChMZWZ0KVxyXG5cdFx0XHQ1LCAzLCAxLCAzLCA1LCA3LFxyXG5cclxuXHRcdFx0Ly8gUG9zWSAoVG9wKVxyXG5cdFx0XHQ0LCAxLCAwLCAxLCA0LCA1LFxyXG5cclxuXHRcdFx0Ly8gTmVnWSAoQm90dG9tKVxyXG5cdFx0XHQyLCAzLCA2LCA3LCA2LCAzLFxyXG5cclxuXHRcdFx0Ly8gUG9zWiAoRnJvbnQpXHJcblx0XHRcdDAsIDEsIDIsIDMsIDIsIDEsXHJcblxyXG5cdFx0XHQvLyBOZWdaIChCYWNrKVxyXG5cdFx0XHQ2LCA1LCA0LCA1LCA2LCA3XHJcblx0XHRdO1xyXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCB0aGlzLnBvc2l0aW9ucywgMykpO1xyXG5cdFx0dGhpcy5zZXRJbmRpY2UodGhpcy5pbmRpY2VzKTtcclxuXHRcdHRoaXMuY291bnQgPSB0aGlzLmluZGljZXMubGVuZ3RoO1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgU2FtcGxlciBmcm9tIFwiLi4vcmVuZGVyL1NhbXBsZXJcIjtcclxuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBDdWJlVGV4dHVyZUxvYWRlcih1cmxzKSB7XHJcbiAgY29uc3QgcHJvbWlzZXMgPSB1cmxzLm1hcCgoc3JjKSA9PiB7XHJcbiAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgaW1nLnNyYyA9IHNyYztcclxuICAgIHJldHVybiBpbWcuZGVjb2RlKCkudGhlbigoKSA9PiBjcmVhdGVJbWFnZUJpdG1hcChpbWcpKTtcclxuICB9KTtcclxuICBjb25zdCBpbWFnZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcbiAgYXdhaXQgUHJvbWlzZS5hbGwoaW1hZ2VzKTtcclxuICBjb25zdCBiYXNlU2FtcGxlciA9IG5ldyBTYW1wbGVyKHtcclxuICAgIG1hZ0ZpbHRlcjogXCJsaW5lYXJcIixcclxuICAgIG1pbkZpbHRlcjogXCJsaW5lYXJcIixcclxuICB9KTtcclxuICBjb25zdCBkYXRhID0gaW1hZ2VzLm1hcCgoaW1hZ2UsIGkpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNvdXJjZTogaW1hZ2UsXHJcbiAgICAgIHdpZHRoOiBpbWFnZS53aWR0aCxcclxuICAgICAgaGVpZ2h0OiBpbWFnZS5oZWlnaHQsXHJcbiAgICAgIGRlcHRoOiAxLFxyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiAwLFxyXG4gICAgICB6OiBpLFxyXG4gICAgfTtcclxuICB9KTtcclxuICBjb25zdCBiYXNlVGV4dHVyZSA9IG5ldyBUZXh0dXJlKHtcclxuICAgIHNpemU6IHtcclxuICAgICAgd2lkdGg6IGltYWdlc1swXS53aWR0aCxcclxuICAgICAgaGVpZ2h0OiBpbWFnZXNbMF0uaGVpZ2h0LFxyXG4gICAgICBkZXB0aDogNixcclxuICAgIH0sXHJcbiAgICBmb3JtYXQ6IFwicmdiYTh1bm9ybVwiLFxyXG4gICAgdXNhZ2U6XHJcbiAgICAgIEdQVVRleHR1cmVVc2FnZS5URVhUVVJFX0JJTkRJTkcgfFxyXG4gICAgICBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9EU1QgfFxyXG4gICAgICBHUFVUZXh0dXJlVXNhZ2UuUkVOREVSX0FUVEFDSE1FTlQsXHJcbiAgICBzYW1wbGVyOiBiYXNlU2FtcGxlcixcclxuICAgIGRhdGEsXHJcbiAgICB2aWV3Rm9ybWF0czogXCJjdWJlXCIsXHJcbiAgICBtaXBMZXZlbENvdW50OiA2LFxyXG4gICAgbmVlZE1pcE1hcDogdHJ1ZSxcclxuICB9KTtcclxuICByZXR1cm4ge1xyXG4gICAgdGV4dHVyZTogYmFzZVRleHR1cmUsXHJcbiAgICBzYW1wbGVyOiBiYXNlU2FtcGxlcixcclxuICB9O1xyXG59XHJcbiIsImZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lPYmplY3Qob2JqZWN0KSB7XG5cdC8vIG1lc3NhZ2UgPW1lc3NhZ2V8fFwiVGhpcyBvYmplY3Qgd2FzIGRlc3Ryb3llZCwgaS5lLiwgZGVzdHJveSgpIHdhcyBjYWxsZWQuXCI7XG5cblx0ZnVuY3Rpb24gdGhyb3dPbkRlc3Ryb3llZCgpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG9iamVjdCB3YXMgZGVzdHJveWVkLCBpLmUuLCBkZXN0cm95KCkgd2FzIGNhbGxlZC5cIik7XG5cdH1cblxuXHRmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcblx0XHRpZiAodHlwZW9mIG9iamVjdFtrZXldID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdG9iamVjdFtrZXldID0gdGhyb3dPbkRlc3Ryb3llZDtcblx0XHR9XG5cdH1cblxuXHRvYmplY3QuaXNEZXN0cm95ZWQgPSByZXR1cm5UcnVlO1xuXG5cdHJldHVybiB1bmRlZmluZWQ7XG59XG4iLCJpbXBvcnQgU2FtcGxlciBmcm9tIFwiLi4vcmVuZGVyL1NhbXBsZXJcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9yZW5kZXIvVGV4dHVyZVwiO1xuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcbmltcG9ydCB7IGRlc3Ryb3lPYmplY3QgfSBmcm9tIFwiLi4vdXRpbHMvZGVzdHJveU9iamVjdFwiO1xudHlwZSBUZXh0dXJlQ2FjaGVQcm9wID0ge1xuXHR0ZXh0dXJlOiBUZXh0dXJlO1xuXHRjb3VudDogbnVtYmVyO1xufTtcbmNsYXNzIFRleHR1cmVDYWNoZSB7XG5cdHB1YmxpYyBkZWZhdWx0U2FtcGxlcjogU2FtcGxlcjtcblx0cHJpdmF0ZSBfbnVtYmVyT2ZUZXh0dXJlczogbnVtYmVyO1xuXHRwcml2YXRlIF90ZXh0dXJlczogTWFwPHN0cmluZywgVGV4dHVyZUNhY2hlUHJvcD47XG5cdHByaXZhdGUgX3RleHR1cmVzVG9SZWxlYXNlOiBNYXA8c3RyaW5nLCBUZXh0dXJlQ2FjaGVQcm9wPjtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5fbnVtYmVyT2ZUZXh0dXJlcyA9IDA7XG5cdFx0dGhpcy5fdGV4dHVyZXMgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5fbnVtYmVyT2ZUZXh0dXJlcyA9IDA7XG5cdFx0dGhpcy5fdGV4dHVyZXNUb1JlbGVhc2UgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5kZWZhdWx0U2FtcGxlciA9IG5ldyBTYW1wbGVyKHtcblx0XHRcdG1hZ0ZpbHRlcjogXCJsaW5lYXJcIixcblx0XHRcdG1pbkZpbHRlcjogXCJsaW5lYXJcIixcblx0XHRcdGFkZHJlc3NNb2RlVTogXCJyZXBlYXRcIixcblx0XHRcdGFkZHJlc3NNb2RlVjogXCJyZXBlYXRcIlxuXHRcdH0pO1xuXHR9XG5cdGdldCBudW1iZXJPZlRleHR1cmVzKCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIHRoaXMuX251bWJlck9mVGV4dHVyZXM7XG5cdH1cblx0Z2V0VGV4dHVyZShrZXl3b3JkKSB7XG5cdFx0Y29uc3QgY2FjaGVkVGV4dHVyZSA9IHRoaXMuX3RleHR1cmVzLmdldChrZXl3b3JkKTtcblx0XHRpZiAoIWRlZmluZWQoY2FjaGVkVGV4dHVyZSkpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdC8vIE5vIGxvbmdlciB3YW50IHRvIHJlbGVhc2UgdGhpcyBpZiBpdCB3YXMgcHJldmlvdXNseSByZWxlYXNlZC5cblx0XHRkZWxldGUgdGhpcy5fdGV4dHVyZXNUb1JlbGVhc2Vba2V5d29yZF07XG5cblx0XHQrK2NhY2hlZFRleHR1cmUuY291bnQ7XG5cdFx0cmV0dXJuIGNhY2hlZFRleHR1cmUudGV4dHVyZTtcblx0fVxuXHRhZGRUZXh0dXJlKGtleXdvcmQsIHRleHR1cmUpIHtcblx0XHRjb25zdCBjYWNoZWRUZXh0dXJlID0ge1xuXHRcdFx0dGV4dHVyZTogdGV4dHVyZSxcblx0XHRcdGNvdW50OiAxXG5cdFx0fTtcblxuXHRcdHRleHR1cmUuZmluYWxEZXN0cm95ID0gdGV4dHVyZS5kZXN0cm95O1xuXG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0dGV4dHVyZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKC0tY2FjaGVkVGV4dHVyZS5jb3VudCA9PT0gMCkge1xuXHRcdFx0XHR0aGF0Ll90ZXh0dXJlc1RvUmVsZWFzZS5zZXQoa2V5d29yZCwgY2FjaGVkVGV4dHVyZSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMuX3RleHR1cmVzLnNldChrZXl3b3JkLCBjYWNoZWRUZXh0dXJlKTtcblx0XHQrK3RoaXMuX251bWJlck9mVGV4dHVyZXM7XG5cdH1cblx0cmVsZWFzZWRUZXh0dXJlcygpIHtcblx0XHR0aGlzLl90ZXh0dXJlc1RvUmVsZWFzZS5mb3JFYWNoKChjYWNoZVRleHR1cmUpID0+IHtcblx0XHRcdGNhY2hlVGV4dHVyZS50ZXh0dXJlPy5maW5hbERlc3Ryb3koKTtcblx0XHRcdC0tdGhpcy5fbnVtYmVyT2ZUZXh0dXJlcztcblx0XHR9KTtcblxuXHRcdHRoaXMuX3RleHR1cmVzVG9SZWxlYXNlLmNsZWFyKCk7XG5cdH1cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLl90ZXh0dXJlcy5mb3JFYWNoKChjYWNoZWRUZXh0dXJlKSA9PiB7XG5cdFx0XHRjYWNoZWRUZXh0dXJlLnRleHR1cmU/LmZpbmFsRGVzdHJveSgpO1xuXHRcdH0pO1xuXHRcdHJldHVybiBkZXN0cm95T2JqZWN0KHRoaXMpO1xuXHR9XG59XG5jb25zdCB0ZXh0dXJlQ2FjaGUgPSBuZXcgVGV4dHVyZUNhY2hlKCk7XG5leHBvcnQgZGVmYXVsdCB0ZXh0dXJlQ2FjaGU7XG4iLCJpbXBvcnQgeyBTaGFkZXJTb3VyY2UgfSBmcm9tIFwiLi4vc2hhZGVyL1NoYWRlclNvdXJjZVwiO1xyXG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuL01hdGVyaWFsXCI7XHJcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi4vbWVzaC9NZXNoXCI7XHJcbmltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi4vY29yZS9GcmFtZVN0YXRlXCI7XHJcbmltcG9ydCB7IENvbXBhcmVGdW5jdGlvbiB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCBDdWJlVGV4dHVyZUxvYWRlciBmcm9tIFwiLi4vbG9hZGVyL0N1YmVUZXh0dXJlTG9hZGVyXCI7XHJcbmltcG9ydCBVbmlmb3JtQnVmZmVyIGZyb20gXCIuLi9yZW5kZXIvVW5pZm9ybUJ1ZmZlclwiO1xyXG5pbXBvcnQgdGV4dHVyZUNhY2hlIGZyb20gXCIuLi9jb3JlL1RleHR1cmVDYWNoZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTa3lCb3hNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcclxuXHRsb2FkRmlzaDogQm9vbGVhbjtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLnR5cGUgPSBcInNreWJveFwiO1xyXG5cdFx0dGhpcy5zaGFkZXJTb3VyY2UgPSBuZXcgU2hhZGVyU291cmNlKHtcclxuXHRcdFx0dHlwZTogdGhpcy50eXBlLFxyXG5cdFx0XHRyZW5kZXI6IHRydWUsXHJcblx0XHRcdGRlZmluZXM6IHt9XHJcblx0XHR9KTtcclxuXHRcdHRoaXMubG9hZEZpc2ggPSBmYWxzZTtcclxuXHRcdHRoaXMucmVuZGVyU3RhdGUuZGVwdGhTdGVuY2lsLmRlcHRoV3JpdGVFbmFibGVkID0gZmFsc2U7XHJcblx0XHR0aGlzLnJlbmRlclN0YXRlLmRlcHRoU3RlbmNpbC5kZXB0aENvbXBhcmUgPSBDb21wYXJlRnVuY3Rpb24uTGVzc0VxdWFsO1xyXG5cdH1cclxuXHRhc3luYyBsb2FkVGV4dHVyZSh1cmxzKSB7XHJcblx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBDdWJlVGV4dHVyZUxvYWRlcih1cmxzKTtcclxuXHRcdHRoaXMubG9hZEZpc2ggPSB0cnVlO1xyXG5cdFx0dGV4dHVyZUNhY2hlLmFkZFRleHR1cmUoXCJzcGVjdWxhclwiLCByZXN1bHQudGV4dHVyZSk7XHJcblx0XHR0aGlzLmJhc2VUZXh0dXJlID0gcmVzdWx0LnRleHR1cmU7XHJcblx0XHR0aGlzLmJhc2VTYW1wbGVyID0gcmVzdWx0LnNhbXBsZXI7XHJcblx0fVxyXG5cdHVwZGF0ZShmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBtZXNoOiBNZXNoKSB7XHJcblx0XHRpZiAoIXRoaXMubG9hZEZpc2gpIHJldHVybjtcclxuXHRcdGlmICghdGhpcy5zaGFkZXJEYXRhKSB7XHJcblx0XHRcdHRoaXMuY3JlYXRlU2hhZGVyRGF0YShtZXNoKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cHJvdGVjdGVkIGNyZWF0ZVNoYWRlckRhdGEobWVzaDogTWVzaCkge1xyXG5cdFx0c3VwZXIuY3JlYXRlU2hhZGVyRGF0YShtZXNoKTtcclxuXHRcdGNvbnN0IHVuaWZvcm1CdWZmZXIgPSBuZXcgVW5pZm9ybUJ1ZmZlcihcInNreWJveFwiKTtcclxuXHRcdHVuaWZvcm1CdWZmZXIuc2V0TWF0cml4NChcIm1vZGVsTWF0cml4XCIsICgpID0+IHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9KTtcclxuXHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRVbmlmb3JtQnVmZmVyKFwic2t5Ym94XCIsIHVuaWZvcm1CdWZmZXIpO1xyXG5cdFx0dGhpcy5zaGFkZXJEYXRhLnNldFRleHR1cmUoXCJiYXNlVGV4dHVyZVwiLCB0aGlzLmJhc2VUZXh0dXJlKTtcclxuXHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRTYW1wbGVyKFwiYmFzZVNhbXBsZXJcIiwgdGhpcy5iYXNlU2FtcGxlcik7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi4vY29yZS9GcmFtZVN0YXRlXCI7XHJcbmltcG9ydCBTa3lCb3hHZW9tZXRyeSBmcm9tIFwiLi4vZ2VvbWV0cnkvU2t5Qm94R2VvbWV0cnlcIjtcclxuaW1wb3J0IFNreUJveE1hdGVyaWFsIGZyb20gXCIuLi9tYXRlcmlhbC9Ta3lCb3hNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4vTWVzaFwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTa3lCb3ggZXh0ZW5kcyBNZXNoIHtcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgbWF0ZXJpYWw6IFNreUJveE1hdGVyaWFsO1xyXG4gIGlzU2t5Qm94OiBib29sZWFuO1xyXG4gIGNvbnN0cnVjdG9yKHVybHM/OiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5kaXN0YW5jZVRvQ2FtZXJhID0gMTA7XHJcbiAgICB0aGlzLm1hdGVyaWFsID0gbmV3IFNreUJveE1hdGVyaWFsKCk7XHJcbiAgICBpZiAodXJscykgdGhpcy5tYXRlcmlhbC5sb2FkVGV4dHVyZSh1cmxzKTtcclxuICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgU2t5Qm94R2VvbWV0cnkoKTtcclxuICAgIHRoaXMuaXNTa3lCb3ggPSB0cnVlO1xyXG4gIH1cclxuICB1cGRhdGUoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSkge1xyXG4gICAgdGhpcy51cGRhdGVNYXRyaXgoKTtcclxuICAgIHRoaXMuZ2VvbWV0cnkudXBkYXRlKGZyYW1lU3RhdGUpO1xyXG4gICAgdGhpcy5tYXRlcmlhbC51cGRhdGUoZnJhbWVTdGF0ZSwgdGhpcyk7XHJcbiAgICBmcmFtZVN0YXRlLnJlbmRlclF1ZXVlLnByZS5wdXNoKHRoaXMpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XHJcblxyXG4vKipcclxuICogVHdvIHRpbWVzIFBJLlxyXG4gKiBAY29uc3RhbnQge251bWJlcn1cclxuICovXHJcbmNvbnN0IFRBVSA9IE1hdGguUEkgKiAyO1xyXG5cclxuLyoqXHJcbiAqIFR3byB0aW1lcyBQSS5cclxuICogQGNvbnN0YW50IHtudW1iZXJ9XHJcbiAqL1xyXG5jb25zdCBIQUxGX1BJID0gTWF0aC5QSSAvIDI7XHJcblxyXG4vKipcclxuICogU3F1YXJlIHJvb3Qgb2YgMi5cclxuICogQGNvbnN0YW50IHtudW1iZXJ9XHJcbiAqL1xyXG5jb25zdCBTUVJUMiA9IE1hdGguc3FydCgyKTtcclxuXHJcbi8qKlxyXG4gKiBOb3JtYWxpemUgYSB2ZWN0b3IgMy5cclxuICogQHBhcmFtIHtudW1iZXJbXX0gdiBWZWN0b3IgMyBhcnJheVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IE5vcm1hbGl6ZWQgdmVjdG9yXHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemUodikge1xyXG4gIGNvbnN0IGwgPSAxIC8gKE1hdGguc3FydCh2WzBdICogdlswXSArIHZbMV0gKiB2WzFdICsgdlsyXSAqIHZbMl0pIHx8IDEpO1xyXG4gIHZbMF0gKj0gbDtcclxuICB2WzFdICo9IGw7XHJcbiAgdlsyXSAqPSBsO1xyXG4gIHJldHVybiB2O1xyXG59XHJcblxyXG4vKipcclxuICogRW5zdXJlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byB0aGUgcHJpbWl0aXZlIGZ1bmN0aW9ucyBpcyBhbiBvYmplY3RcclxuICogQHBhcmFtIHsuLi4qfSBhcmdzXHJcbiAqL1xyXG5mdW5jdGlvbiBjaGVja0FyZ3VtZW50cyhhcmdzKSB7XHJcbiAgY29uc3QgYXJndW1lbnRUeXBlID0gdHlwZW9mIGFyZ3NbMF07XHJcbiAgaWYgKGFyZ3VtZW50VHlwZSAhPT0gXCJvYmplY3RcIiAmJiBhcmd1bWVudFR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdC5cIik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmxldCBUWVBFRF9BUlJBWV9UWVBFO1xyXG5cclxuLyoqXHJcbiAqIEVuZm9yY2UgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciBmb3IgY2VsbHNcclxuICogQHBhcmFtIHsoQ2xhc3M8VWludDhBcnJheT58Q2xhc3M8VWludDE2QXJyYXk+fENsYXNzPFVpbnQzMkFycmF5Pil9IHR5cGVcclxuICovXHJcbmZ1bmN0aW9uIHNldFR5cGVkQXJyYXlUeXBlKHR5cGUpIHtcclxuICBUWVBFRF9BUlJBWV9UWVBFID0gdHlwZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlbGVjdCBjZWxscyB0eXBlZCBhcnJheSBmcm9tIGEgc2l6ZSBkZXRlcm1pbmVkIGJ5IGFtb3VudCBvZiB2ZXJ0aWNlcy5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgVGhlIG1heCB2YWx1ZSBleHBlY3RlZFxyXG4gKiBAcmV0dXJucyB7KFVpbnQ4QXJyYXl8VWludDE2QXJyYXl8VWludDMyQXJyYXkpfVxyXG4gKiBAc2VlIFtNRE4gVHlwZWRBcnJheSBvYmplY3RzXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9UeXBlZEFycmF5I3R5cGVkYXJyYXlfb2JqZWN0c31cclxuICovXHJcbmNvbnN0IGdldENlbGxzVHlwZWRBcnJheSA9IChzaXplKSA9PlxyXG4gIFRZUEVEX0FSUkFZX1RZUEUgfHxcclxuICAoc2l6ZSA8PSAyNTUgPyBVaW50OEFycmF5IDogc2l6ZSA8PSA2NTUzNSA/IFVpbnQxNkFycmF5IDogVWludDMyQXJyYXkpO1xyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBUTVAgPSBbMCwgMCwgMF07XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IFBMQU5FX0RJUkVDVElPTlMgPSB7XHJcbiAgejogWzAsIDEsIDIsIDEsIC0xLCAxXSxcclxuICBcIi16XCI6IFswLCAxLCAyLCAtMSwgLTEsIC0xXSxcclxuICBcIi14XCI6IFsyLCAxLCAwLCAxLCAtMSwgLTFdLFxyXG4gIHg6IFsyLCAxLCAwLCAtMSwgLTEsIDFdLFxyXG4gIHk6IFswLCAyLCAxLCAxLCAxLCAxXSxcclxuICBcIi15XCI6IFswLCAyLCAxLCAxLCAtMSwgLTFdLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21wdXRlUGxhbmUoXHJcbiAgZ2VvbWV0cnksXHJcbiAgaW5kaWNlcyxcclxuICBzdSxcclxuICBzdixcclxuICBudSxcclxuICBudixcclxuICBkaXJlY3Rpb24gPSBcInpcIixcclxuICBwdyA9IDAsXHJcbiAgcXVhZHMgPSBmYWxzZSxcclxuICB1dlNjYWxlID0gWzEsIDFdLFxyXG4gIHV2T2Zmc2V0ID0gWzAsIDBdLFxyXG4gIGNlbnRlciA9IFswLCAwLCAwXSxcclxuICBjY3cgPSB0cnVlXHJcbikge1xyXG4gIGNvbnN0IHsgcG9zaXRpb25zLCBub3JtYWxzLCB1dnMsIGNlbGxzIH0gPSBnZW9tZXRyeTtcclxuICBjb25zdCBbdSwgdiwgdywgZmxpcFUsIGZsaXBWLCBub3JtYWxdID0gUExBTkVfRElSRUNUSU9OU1tkaXJlY3Rpb25dO1xyXG5cclxuICBjb25zdCB2ZXJ0ZXhPZmZzZXQgPSBpbmRpY2VzLnZlcnRleDtcclxuXHJcbiAgZm9yIChsZXQgaiA9IDA7IGogPD0gbnY7IGorKykge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbnU7IGkrKykge1xyXG4gICAgICBwb3NpdGlvbnNbaW5kaWNlcy52ZXJ0ZXggKiAzICsgdV0gPVxyXG4gICAgICAgICgtc3UgLyAyICsgKGkgKiBzdSkgLyBudSkgKiBmbGlwVSArIGNlbnRlclt1XTtcclxuICAgICAgcG9zaXRpb25zW2luZGljZXMudmVydGV4ICogMyArIHZdID1cclxuICAgICAgICAoLXN2IC8gMiArIChqICogc3YpIC8gbnYpICogZmxpcFYgKyBjZW50ZXJbdl07XHJcbiAgICAgIHBvc2l0aW9uc1tpbmRpY2VzLnZlcnRleCAqIDMgKyB3XSA9IHB3ICsgY2VudGVyW3ddO1xyXG5cclxuICAgICAgbm9ybWFsc1tpbmRpY2VzLnZlcnRleCAqIDMgKyB3XSA9IG5vcm1hbDtcclxuXHJcbiAgICAgIHV2c1tpbmRpY2VzLnZlcnRleCAqIDJdID0gKGkgLyBudSkgKiB1dlNjYWxlWzBdICsgdXZPZmZzZXRbMF07XHJcbiAgICAgIHV2c1tpbmRpY2VzLnZlcnRleCAqIDIgKyAxXSA9ICgxIC0gaiAvIG52KSAqIHV2U2NhbGVbMV0gKyB1dk9mZnNldFsxXTtcclxuXHJcbiAgICAgIGluZGljZXMudmVydGV4Kys7XHJcblxyXG4gICAgICBpZiAoaiA8IG52ICYmIGkgPCBudSkge1xyXG4gICAgICAgIGNvbnN0IG4gPSB2ZXJ0ZXhPZmZzZXQgKyBqICogKG51ICsgMSkgKyBpO1xyXG4gICAgICAgIGlmIChxdWFkcykge1xyXG4gICAgICAgICAgY29uc3QgbyA9IHZlcnRleE9mZnNldCArIChqICsgMSkgKiAobnUgKyAxKSArIGk7XHJcbiAgICAgICAgICBjZWxsc1tpbmRpY2VzLmNlbGxdID0gbjtcclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbCArIDFdID0gbztcclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbCArIDJdID0gbyArIDE7XHJcbiAgICAgICAgICBjZWxsc1tpbmRpY2VzLmNlbGwgKyAzXSA9IG4gKyAxO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjZWxsc1tpbmRpY2VzLmNlbGxdID0gbjtcclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbCArIChjY3cgPyAxIDogMildID0gbiArIG51ICsgMTtcclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbCArIChjY3cgPyAyIDogMSldID0gbiArIG51ICsgMjtcclxuXHJcbiAgICAgICAgICBjZWxsc1tpbmRpY2VzLmNlbGwgKyAzXSA9IG47XHJcbiAgICAgICAgICBjZWxsc1tpbmRpY2VzLmNlbGwgKyAoY2N3ID8gNCA6IDUpXSA9IG4gKyBudSArIDI7XHJcbiAgICAgICAgICBjZWxsc1tpbmRpY2VzLmNlbGwgKyAoY2N3ID8gNSA6IDQpXSA9IG4gKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbmRpY2VzLmNlbGwgKz0gcXVhZHMgPyA0IDogNjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGdlb21ldHJ5O1xyXG59XHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDdWJlT3B0aW9uc1xyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3N4PTFdXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc3k9c3hdXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc3o9c3hdXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbng9MV1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtueT1ueF1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtuej1ueF1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDdWJlKHtcclxuICBzeCA9IDEsXHJcbiAgc3kgPSAxLFxyXG4gIHN6ID0gMSxcclxuICBueCA9IDEsXHJcbiAgbnkgPSAxLFxyXG4gIG56ID0gMSxcclxufSA9IHt9KSB7XHJcbiAgY2hlY2tBcmd1bWVudHMoYXJndW1lbnRzKTtcclxuXHJcbiAgY29uc3Qgc2l6ZSA9XHJcbiAgICAobnggKyAxKSAqIChueSArIDEpICogMiArIChueCArIDEpICogKG56ICsgMSkgKiAyICsgKG56ICsgMSkgKiAobnkgKyAxKSAqIDI7XHJcblxyXG4gIGNvbnN0IGdlb21ldHJ5ID0ge1xyXG4gICAgcG9zaXRpb25zOiBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKSxcclxuICAgIG5vcm1hbHM6IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpLFxyXG4gICAgdXZzOiBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAyKSxcclxuICAgIGNlbGxzOiBuZXcgKGdldENlbGxzVHlwZWRBcnJheShzaXplKSkoXHJcbiAgICAgIChueCAqIG55ICogMiArIG54ICogbnogKiAyICsgbnogKiBueSAqIDIpICogNlxyXG4gICAgKSxcclxuICB9O1xyXG5cclxuICBjb25zdCBoYWxmU1ggPSBzeCAqIDAuNTtcclxuICBjb25zdCBoYWxmU1kgPSBzeSAqIDAuNTtcclxuICBjb25zdCBoYWxmU1ogPSBzeiAqIDAuNTtcclxuXHJcbiAgY29uc3QgaW5kaWNlcyA9IHsgdmVydGV4OiAwLCBjZWxsOiAwIH07XHJcblxyXG4gIGNvbXB1dGVQbGFuZShnZW9tZXRyeSwgaW5kaWNlcywgc3gsIHN5LCBueCwgbnksIFwielwiLCBoYWxmU1opO1xyXG4gIGNvbXB1dGVQbGFuZShnZW9tZXRyeSwgaW5kaWNlcywgc3gsIHN5LCBueCwgbnksIFwiLXpcIiwgLWhhbGZTWik7XHJcbiAgY29tcHV0ZVBsYW5lKGdlb21ldHJ5LCBpbmRpY2VzLCBzeiwgc3ksIG56LCBueSwgXCIteFwiLCAtaGFsZlNYKTtcclxuICBjb21wdXRlUGxhbmUoZ2VvbWV0cnksIGluZGljZXMsIHN6LCBzeSwgbnosIG55LCBcInhcIiwgaGFsZlNYKTtcclxuICBjb21wdXRlUGxhbmUoZ2VvbWV0cnksIGluZGljZXMsIHN4LCBzeiwgbngsIG56LCBcInlcIiwgaGFsZlNZKTtcclxuICBjb21wdXRlUGxhbmUoZ2VvbWV0cnksIGluZGljZXMsIHN4LCBzeiwgbngsIG56LCBcIi15XCIsIC1oYWxmU1kpO1xyXG5cclxuICByZXR1cm4gZ2VvbWV0cnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBFbGxpcHNvaWRPcHRpb25zXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbcmFkaXVzPTAuNV1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtueD0zMl1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtueT0xNl1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtyeD0xXVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3J4PTAuNV1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtyej1yeV1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFt0aGV0YT1NYXRoLlBJXVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3RoZXRhT2Zmc2V0PTBdXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbcGhpPVRBVV1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtwaGlPZmZzZXQ9MF1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUVsbGlwc29pZCh7XHJcbiAgcmFkaXVzID0gMSxcclxuICBueCA9IDMyLFxyXG4gIG55ID0gMTYsXHJcbiAgcnggPSAwLjUsXHJcbiAgcnkgPSAwLjI1LFxyXG4gIHJ6ID0gcnksXHJcbiAgdGhldGEgPSBNYXRoLlBJLFxyXG4gIHRoZXRhT2Zmc2V0ID0gMCxcclxuICBwaGkgPSBUQVUsXHJcbiAgcGhpT2Zmc2V0ID0gMCxcclxufSA9IHt9KSB7XHJcbiAgY2hlY2tBcmd1bWVudHMoYXJndW1lbnRzKTtcclxuXHJcbiAgY29uc3Qgc2l6ZSA9IChueSArIDEpICogKG54ICsgMSk7XHJcblxyXG4gIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpO1xyXG4gIGNvbnN0IG5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKTtcclxuICBjb25zdCB1dnMgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAyKTtcclxuICBjb25zdCBjZWxscyA9IG5ldyAoZ2V0Q2VsbHNUeXBlZEFycmF5KHNpemUpKShueSAqIG54ICogNik7XHJcblxyXG4gIGxldCB2ZXJ0ZXhJbmRleCA9IDA7XHJcbiAgbGV0IGNlbGxJbmRleCA9IDA7XHJcblxyXG4gIGZvciAobGV0IHkgPSAwOyB5IDw9IG55OyB5KyspIHtcclxuICAgIGNvbnN0IHYgPSB5IC8gbnk7XHJcbiAgICBjb25zdCB0ID0gdiAqIHRoZXRhICsgdGhldGFPZmZzZXQ7XHJcbiAgICBjb25zdCBjb3NUaGV0YSA9IE1hdGguY29zKHQpO1xyXG4gICAgY29uc3Qgc2luVGhldGEgPSBNYXRoLnNpbih0KTtcclxuXHJcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8PSBueDsgeCsrKSB7XHJcbiAgICAgIGNvbnN0IHUgPSB4IC8gbng7XHJcbiAgICAgIGNvbnN0IHAgPSB1ICogcGhpICsgcGhpT2Zmc2V0O1xyXG4gICAgICBjb25zdCBjb3NQaGkgPSBNYXRoLmNvcyhwKTtcclxuICAgICAgY29uc3Qgc2luUGhpID0gTWF0aC5zaW4ocCk7XHJcblxyXG4gICAgICBUTVBbMF0gPSAtcnggKiBjb3NQaGkgKiBzaW5UaGV0YTtcclxuICAgICAgVE1QWzFdID0gLXJ5ICogY29zVGhldGE7XHJcbiAgICAgIFRNUFsyXSA9IHJ6ICogc2luUGhpICogc2luVGhldGE7XHJcblxyXG4gICAgICBwb3NpdGlvbnNbdmVydGV4SW5kZXggKiAzXSA9IHJhZGl1cyAqIFRNUFswXTtcclxuICAgICAgcG9zaXRpb25zW3ZlcnRleEluZGV4ICogMyArIDFdID0gcmFkaXVzICogVE1QWzFdO1xyXG4gICAgICBwb3NpdGlvbnNbdmVydGV4SW5kZXggKiAzICsgMl0gPSByYWRpdXMgKiBUTVBbMl07XHJcblxyXG4gICAgICBub3JtYWxpemUoVE1QKTtcclxuXHJcbiAgICAgIG5vcm1hbHNbdmVydGV4SW5kZXggKiAzXSA9IFRNUFswXTtcclxuICAgICAgbm9ybWFsc1t2ZXJ0ZXhJbmRleCAqIDMgKyAxXSA9IFRNUFsxXTtcclxuICAgICAgbm9ybWFsc1t2ZXJ0ZXhJbmRleCAqIDMgKyAyXSA9IFRNUFsyXTtcclxuXHJcbiAgICAgIHV2c1t2ZXJ0ZXhJbmRleCAqIDJdID0gdTtcclxuICAgICAgdXZzW3ZlcnRleEluZGV4ICogMiArIDFdID0gdjtcclxuXHJcbiAgICAgIHZlcnRleEluZGV4Kys7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHkgPiAwKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSB2ZXJ0ZXhJbmRleCAtIDIgKiAobnggKyAxKTsgaSArIG54ICsgMiA8IHZlcnRleEluZGV4OyBpKyspIHtcclxuICAgICAgICBjb25zdCBhID0gaTtcclxuICAgICAgICBjb25zdCBiID0gaSArIDE7XHJcbiAgICAgICAgY29uc3QgYyA9IGkgKyBueCArIDE7XHJcbiAgICAgICAgY29uc3QgZCA9IGkgKyBueCArIDI7XHJcbiAgICAgICAgY2VsbHNbY2VsbEluZGV4XSA9IGE7XHJcbiAgICAgICAgY2VsbHNbY2VsbEluZGV4ICsgMV0gPSBiO1xyXG4gICAgICAgIGNlbGxzW2NlbGxJbmRleCArIDJdID0gYztcclxuXHJcbiAgICAgICAgY2VsbHNbY2VsbEluZGV4ICsgM10gPSBjO1xyXG4gICAgICAgIGNlbGxzW2NlbGxJbmRleCArIDRdID0gYjtcclxuICAgICAgICBjZWxsc1tjZWxsSW5kZXggKyA1XSA9IGQ7XHJcblxyXG4gICAgICAgIGNlbGxJbmRleCArPSA2O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcG9zaXRpb25zLFxyXG4gICAgbm9ybWFscyxcclxuICAgIHV2cyxcclxuICAgIGNlbGxzLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCb3gob3B0aW9ucykge1xyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICBsZXQgZGltZW5zaW9ucyA9IG9wdGlvbnMuZGltZW5zaW9ucyB8fCBbMSwgMSwgMV07XHJcbiAgbGV0IHBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbiB8fCBbXHJcbiAgICAtZGltZW5zaW9uc1swXSAvIDIsXHJcbiAgICAtZGltZW5zaW9uc1sxXSAvIDIsXHJcbiAgICAtZGltZW5zaW9uc1syXSAvIDIsXHJcbiAgXTtcclxuICBsZXQgeCA9IHBvc2l0aW9uWzBdO1xyXG4gIGxldCB5ID0gcG9zaXRpb25bMV07XHJcbiAgbGV0IHogPSBwb3NpdGlvblsyXTtcclxuICBsZXQgd2lkdGggPSBkaW1lbnNpb25zWzBdO1xyXG4gIGxldCBoZWlnaHQgPSBkaW1lbnNpb25zWzFdO1xyXG4gIGxldCBkZXB0aCA9IGRpbWVuc2lvbnNbMl07XHJcblxyXG4gIGxldCBmYmwgPSB7IHg6IHgsIHk6IHksIHo6IHogKyBkZXB0aCB9O1xyXG4gIGxldCBmYnIgPSB7IHg6IHggKyB3aWR0aCwgeTogeSwgejogeiArIGRlcHRoIH07XHJcbiAgbGV0IGZ0bCA9IHsgeDogeCwgeTogeSArIGhlaWdodCwgejogeiArIGRlcHRoIH07XHJcbiAgbGV0IGZ0ciA9IHsgeDogeCArIHdpZHRoLCB5OiB5ICsgaGVpZ2h0LCB6OiB6ICsgZGVwdGggfTtcclxuICBsZXQgYmJsID0geyB4OiB4LCB5OiB5LCB6OiB6IH07XHJcbiAgbGV0IGJiciA9IHsgeDogeCArIHdpZHRoLCB5OiB5LCB6OiB6IH07XHJcbiAgbGV0IGJ0bCA9IHsgeDogeCwgeTogeSArIGhlaWdodCwgejogeiB9O1xyXG4gIGxldCBidHIgPSB7IHg6IHggKyB3aWR0aCwgeTogeSArIGhlaWdodCwgejogeiB9O1xyXG5cclxuICBsZXQgcG9zaXRpb25zID0gW1xyXG4gICAgLy9mcm9udFxyXG4gICAgZmJsLngsXHJcbiAgICBmYmwueSxcclxuICAgIGZibC56LFxyXG4gICAgZmJyLngsXHJcbiAgICBmYnIueSxcclxuICAgIGZici56LFxyXG4gICAgZnRsLngsXHJcbiAgICBmdGwueSxcclxuICAgIGZ0bC56LFxyXG4gICAgZnRsLngsXHJcbiAgICBmdGwueSxcclxuICAgIGZ0bC56LFxyXG4gICAgZmJyLngsXHJcbiAgICBmYnIueSxcclxuICAgIGZici56LFxyXG4gICAgZnRyLngsXHJcbiAgICBmdHIueSxcclxuICAgIGZ0ci56LFxyXG5cclxuICAgIC8vcmlnaHRcclxuICAgIGZici54LFxyXG4gICAgZmJyLnksXHJcbiAgICBmYnIueixcclxuICAgIGJici54LFxyXG4gICAgYmJyLnksXHJcbiAgICBiYnIueixcclxuICAgIGZ0ci54LFxyXG4gICAgZnRyLnksXHJcbiAgICBmdHIueixcclxuICAgIGZ0ci54LFxyXG4gICAgZnRyLnksXHJcbiAgICBmdHIueixcclxuICAgIGJici54LFxyXG4gICAgYmJyLnksXHJcbiAgICBiYnIueixcclxuICAgIGJ0ci54LFxyXG4gICAgYnRyLnksXHJcbiAgICBidHIueixcclxuXHJcbiAgICAvL2JhY2tcclxuICAgIGZici54LFxyXG4gICAgYmJyLnksXHJcbiAgICBiYnIueixcclxuICAgIGJibC54LFxyXG4gICAgYmJsLnksXHJcbiAgICBiYmwueixcclxuICAgIGJ0ci54LFxyXG4gICAgYnRyLnksXHJcbiAgICBidHIueixcclxuICAgIGJ0ci54LFxyXG4gICAgYnRyLnksXHJcbiAgICBidHIueixcclxuICAgIGJibC54LFxyXG4gICAgYmJsLnksXHJcbiAgICBiYmwueixcclxuICAgIGJ0bC54LFxyXG4gICAgYnRsLnksXHJcbiAgICBidGwueixcclxuXHJcbiAgICAvL2xlZnRcclxuICAgIGJibC54LFxyXG4gICAgYmJsLnksXHJcbiAgICBiYmwueixcclxuICAgIGZibC54LFxyXG4gICAgZmJsLnksXHJcbiAgICBmYmwueixcclxuICAgIGJ0bC54LFxyXG4gICAgYnRsLnksXHJcbiAgICBidGwueixcclxuICAgIGJ0bC54LFxyXG4gICAgYnRsLnksXHJcbiAgICBidGwueixcclxuICAgIGZibC54LFxyXG4gICAgZmJsLnksXHJcbiAgICBmYmwueixcclxuICAgIGZ0bC54LFxyXG4gICAgZnRsLnksXHJcbiAgICBmdGwueixcclxuXHJcbiAgICAvL3RvcFxyXG4gICAgZnRsLngsXHJcbiAgICBmdGwueSxcclxuICAgIGZ0bC56LFxyXG4gICAgZnRyLngsXHJcbiAgICBmdHIueSxcclxuICAgIGZ0ci56LFxyXG4gICAgYnRsLngsXHJcbiAgICBidGwueSxcclxuICAgIGJ0bC56LFxyXG4gICAgYnRsLngsXHJcbiAgICBidGwueSxcclxuICAgIGJ0bC56LFxyXG4gICAgZnRyLngsXHJcbiAgICBmdHIueSxcclxuICAgIGZ0ci56LFxyXG4gICAgYnRyLngsXHJcbiAgICBidHIueSxcclxuICAgIGJ0ci56LFxyXG5cclxuICAgIC8vYm90dG9tXHJcbiAgICBiYmwueCxcclxuICAgIGJibC55LFxyXG4gICAgYmJsLnosXHJcbiAgICBiYnIueCxcclxuICAgIGJici55LFxyXG4gICAgYmJyLnosXHJcbiAgICBmYmwueCxcclxuICAgIGZibC55LFxyXG4gICAgZmJsLnosXHJcbiAgICBmYmwueCxcclxuICAgIGZibC55LFxyXG4gICAgZmJsLnosXHJcbiAgICBiYnIueCxcclxuICAgIGJici55LFxyXG4gICAgYmJyLnosXHJcbiAgICBmYnIueCxcclxuICAgIGZici55LFxyXG4gICAgZmJyLnosXHJcbiAgXTtcclxuXHJcbiAgbGV0IHV2cyA9IFtcclxuICAgIC8vZnJvbnRcclxuICAgIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDEsIDEsIDAsIDEsIDEsXHJcblxyXG4gICAgLy9yaWdodFxyXG4gICAgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMSwgMSwgMCwgMSwgMSxcclxuXHJcbiAgICAvL2JhY2tcclxuICAgIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDEsIDEsIDAsIDEsIDEsXHJcblxyXG4gICAgLy9sZWZ0XHJcbiAgICAwLCAwLCAxLCAwLCAwLCAxLCAwLCAxLCAxLCAwLCAxLCAxLFxyXG5cclxuICAgIC8vdG9wXHJcbiAgICAwLCAwLCAxLCAwLCAwLCAxLCAwLCAxLCAxLCAwLCAxLCAxLFxyXG5cclxuICAgIC8vYm90dG9tXHJcbiAgICAwLCAwLCAxLCAwLCAwLCAxLCAwLCAxLCAxLCAwLCAxLCAxLFxyXG4gIF07XHJcblxyXG4gIGxldCBub3JtYWxzID0gW1xyXG4gICAgLy8gZnJvbnRcclxuICAgIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDEsXHJcblxyXG4gICAgLy8gcmlnaHRcclxuICAgIDEsIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDAsXHJcblxyXG4gICAgLy8gYmFja1xyXG4gICAgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMSxcclxuXHJcbiAgICAvLyBsZWZ0XHJcbiAgICAtMSwgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLFxyXG5cclxuICAgIC8vIHRvcFxyXG4gICAgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCxcclxuXHJcbiAgICAvLyBib3R0b21cclxuICAgIDAsIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsXHJcbiAgXTtcclxuICByZXR1cm4ge1xyXG4gICAgcG9zaXRpb25zOiBwb3NpdGlvbnMsXHJcbiAgICBub3JtYWxzOiBub3JtYWxzLFxyXG4gICAgdXZzOiB1dnMsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNwaGVyZShvcHRpb25zKSB7XHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gIGxldCBsb25nQmFuZHMgPSBvcHRpb25zLmxvbmdCYW5kcyB8fCAzMjtcclxuICBsZXQgbGF0QmFuZHMgPSBvcHRpb25zLmxhdEJhbmRzIHx8IDMyO1xyXG4gIGxldCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cyB8fCAxO1xyXG4gIGxldCBsYXRfc3RlcCA9IE1hdGguUEkgLyBsYXRCYW5kcztcclxuICBsZXQgbG9uZ19zdGVwID0gKDIgKiBNYXRoLlBJKSAvIGxvbmdCYW5kcztcclxuICBsZXQgbnVtX3Bvc2l0aW9ucyA9IGxvbmdCYW5kcyAqIGxhdEJhbmRzICogNDtcclxuICBsZXQgbnVtX2luZGljZXMgPSBsb25nQmFuZHMgKiBsYXRCYW5kcyAqIDY7XHJcbiAgbGV0IGxhdF9hbmdsZSwgbG9uZ19hbmdsZTtcclxuICBsZXQgcG9zaXRpb25zID0gbmV3IEFycmF5KG51bV9wb3NpdGlvbnMgKiAzKTtcclxuICBsZXQgbm9ybWFscyA9IG5ldyBBcnJheShudW1fcG9zaXRpb25zICogMyk7XHJcbiAgbGV0IHV2cyA9IG5ldyBBcnJheShudW1fcG9zaXRpb25zICogMik7XHJcbiAgbGV0IGluZGljZXMgPSBuZXcgQXJyYXkobnVtX2luZGljZXMpO1xyXG4gIGxldCB4MSwgeDIsIHgzLCB4NCwgeTEsIHkyLCB6MSwgejIsIHozLCB6NCwgdTEsIHUyLCB2MSwgdjI7XHJcbiAgbGV0IGksIGo7XHJcbiAgbGV0IGsgPSAwLFxyXG4gICAgbCA9IDA7XHJcbiAgbGV0IHZpLCB0aTtcclxuXHJcbiAgZm9yIChpID0gMDsgaSA8IGxhdEJhbmRzOyBpKyspIHtcclxuICAgIGxhdF9hbmdsZSA9IGkgKiBsYXRfc3RlcDtcclxuICAgIHkxID0gTWF0aC5jb3MobGF0X2FuZ2xlKTtcclxuICAgIHkyID0gTWF0aC5jb3MobGF0X2FuZ2xlICsgbGF0X3N0ZXApO1xyXG4gICAgZm9yIChqID0gMDsgaiA8IGxvbmdCYW5kczsgaisrKSB7XHJcbiAgICAgIGxvbmdfYW5nbGUgPSBqICogbG9uZ19zdGVwO1xyXG4gICAgICB4MSA9IE1hdGguc2luKGxhdF9hbmdsZSkgKiBNYXRoLmNvcyhsb25nX2FuZ2xlKTtcclxuICAgICAgeDIgPSBNYXRoLnNpbihsYXRfYW5nbGUpICogTWF0aC5jb3MobG9uZ19hbmdsZSArIGxvbmdfc3RlcCk7XHJcbiAgICAgIHgzID0gTWF0aC5zaW4obGF0X2FuZ2xlICsgbGF0X3N0ZXApICogTWF0aC5jb3MobG9uZ19hbmdsZSk7XHJcbiAgICAgIHg0ID0gTWF0aC5zaW4obGF0X2FuZ2xlICsgbGF0X3N0ZXApICogTWF0aC5jb3MobG9uZ19hbmdsZSArIGxvbmdfc3RlcCk7XHJcbiAgICAgIHoxID0gTWF0aC5zaW4obGF0X2FuZ2xlKSAqIE1hdGguc2luKGxvbmdfYW5nbGUpO1xyXG4gICAgICB6MiA9IE1hdGguc2luKGxhdF9hbmdsZSkgKiBNYXRoLnNpbihsb25nX2FuZ2xlICsgbG9uZ19zdGVwKTtcclxuICAgICAgejMgPSBNYXRoLnNpbihsYXRfYW5nbGUgKyBsYXRfc3RlcCkgKiBNYXRoLnNpbihsb25nX2FuZ2xlKTtcclxuICAgICAgejQgPSBNYXRoLnNpbihsYXRfYW5nbGUgKyBsYXRfc3RlcCkgKiBNYXRoLnNpbihsb25nX2FuZ2xlICsgbG9uZ19zdGVwKTtcclxuICAgICAgdTEgPSAxIC0gaiAvIGxvbmdCYW5kcztcclxuICAgICAgdTIgPSAxIC0gKGogKyAxKSAvIGxvbmdCYW5kcztcclxuICAgICAgdjEgPSAxIC0gaSAvIGxhdEJhbmRzO1xyXG4gICAgICB2MiA9IDEgLSAoaSArIDEpIC8gbGF0QmFuZHM7XHJcbiAgICAgIHZpID0gayAqIDM7XHJcbiAgICAgIHRpID0gayAqIDI7XHJcblxyXG4gICAgICBwb3NpdGlvbnNbdmldID0geDEgKiByYWRpdXM7XHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDFdID0geTEgKiByYWRpdXM7XHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDJdID0gejEgKiByYWRpdXM7IC8vdjBcclxuXHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDNdID0geDIgKiByYWRpdXM7XHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDRdID0geTEgKiByYWRpdXM7XHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDVdID0gejIgKiByYWRpdXM7IC8vdjFcclxuXHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDZdID0geDMgKiByYWRpdXM7XHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDddID0geTIgKiByYWRpdXM7XHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDhdID0gejMgKiByYWRpdXM7IC8vIHYyXHJcblxyXG4gICAgICBwb3NpdGlvbnNbdmkgKyA5XSA9IHg0ICogcmFkaXVzO1xyXG4gICAgICBwb3NpdGlvbnNbdmkgKyAxMF0gPSB5MiAqIHJhZGl1cztcclxuICAgICAgcG9zaXRpb25zW3ZpICsgMTFdID0gejQgKiByYWRpdXM7IC8vIHYzXHJcblxyXG4gICAgICBub3JtYWxzW3ZpXSA9IHgxO1xyXG4gICAgICBub3JtYWxzW3ZpICsgMV0gPSB5MTtcclxuICAgICAgbm9ybWFsc1t2aSArIDJdID0gejE7XHJcblxyXG4gICAgICBub3JtYWxzW3ZpICsgM10gPSB4MjtcclxuICAgICAgbm9ybWFsc1t2aSArIDRdID0geTE7XHJcbiAgICAgIG5vcm1hbHNbdmkgKyA1XSA9IHoyO1xyXG5cclxuICAgICAgbm9ybWFsc1t2aSArIDZdID0geDM7XHJcbiAgICAgIG5vcm1hbHNbdmkgKyA3XSA9IHkyO1xyXG4gICAgICBub3JtYWxzW3ZpICsgOF0gPSB6MztcclxuXHJcbiAgICAgIG5vcm1hbHNbdmkgKyA5XSA9IHg0O1xyXG4gICAgICBub3JtYWxzW3ZpICsgMTBdID0geTI7XHJcbiAgICAgIG5vcm1hbHNbdmkgKyAxMV0gPSB6NDtcclxuXHJcbiAgICAgIHV2c1t0aV0gPSB1MTtcclxuICAgICAgdXZzW3RpICsgMV0gPSB2MTtcclxuXHJcbiAgICAgIHV2c1t0aSArIDJdID0gdTI7XHJcbiAgICAgIHV2c1t0aSArIDNdID0gdjE7XHJcblxyXG4gICAgICB1dnNbdGkgKyA0XSA9IHUxO1xyXG4gICAgICB1dnNbdGkgKyA1XSA9IHYyO1xyXG5cclxuICAgICAgdXZzW3RpICsgNl0gPSB1MjtcclxuICAgICAgdXZzW3RpICsgN10gPSB2MjtcclxuXHJcbiAgICAgIGluZGljZXNbbF0gPSBrO1xyXG4gICAgICBpbmRpY2VzW2wgKyAxXSA9IGsgKyAxO1xyXG4gICAgICBpbmRpY2VzW2wgKyAyXSA9IGsgKyAyO1xyXG4gICAgICBpbmRpY2VzW2wgKyAzXSA9IGsgKyAyO1xyXG4gICAgICBpbmRpY2VzW2wgKyA0XSA9IGsgKyAxO1xyXG4gICAgICBpbmRpY2VzW2wgKyA1XSA9IGsgKyAzO1xyXG5cclxuICAgICAgayArPSA0O1xyXG4gICAgICBsICs9IDY7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcG9zaXRpb25zOiBwb3NpdGlvbnMsXHJcbiAgICBub3JtYWxzOiBub3JtYWxzLFxyXG4gICAgdXZzOiB1dnMsXHJcbiAgICBpbmRpY2VzOiBpbmRpY2VzLFxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgRmxvYXQzMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNwaGVyZSB9IGZyb20gXCIuLi91dGlscy9HZW9tZXRyeVV0aWxzXCI7XHJcbmltcG9ydCBHZW9tZXRyeSBmcm9tIFwiLi9HZW9tZXRyeVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BoZXJlR2VvbWV0cnkgZXh0ZW5kcyBHZW9tZXRyeSB7XHJcblx0cmFkaXVzOiBudW1iZXI7XHJcblx0Y29uc3RydWN0b3IocmFkaXVzOiBudW1iZXIpIHtcclxuXHRcdHN1cGVyKHtcclxuXHRcdFx0dHlwZTogXCJzcGhlcmVHZW9tZXRyeVwiXHJcblx0XHR9KTtcclxuXHRcdHRoaXMuZGVmaW5lcyA9IHtcclxuXHRcdFx0SEFTX05PUk1BTDogdHJ1ZVxyXG5cdFx0fTtcclxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG5cdFx0dGhpcy5pbml0KCk7XHJcblx0fVxyXG5cdHByaXZhdGUgaW5pdCgpIHtcclxuXHRcdGNvbnN0IHsgcG9zaXRpb25zLCBub3JtYWxzLCB1dnMsIGluZGljZXMgfSA9IGNyZWF0ZVNwaGVyZSh7IHJhZGl1czogdGhpcy5yYWRpdXMgfSk7XHJcblx0XHR0aGlzLnBvc2l0aW9ucyA9IHBvc2l0aW9ucztcclxuXHRcdHRoaXMubm9ybWFscyA9IG5vcm1hbHM7XHJcblx0XHR0aGlzLnV2cyA9IHV2cztcclxuXHRcdHRoaXMuaW5kaWNlcyA9IGluZGljZXM7XHJcblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSh0aGlzLnBvc2l0aW9ucyk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHRoaXMucG9zaXRpb25zLCAzKSk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcIm5vcm1hbFwiLCB0aGlzLm5vcm1hbHMsIDMpKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwidXZcIiwgdGhpcy51dnMsIDIpKTtcclxuXHJcblx0XHR0aGlzLnNldEluZGljZSh0aGlzLmluZGljZXMpO1xyXG5cdFx0dGhpcy5jb3VudCA9IHRoaXMuaW5kaWNlcy5sZW5ndGg7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCBHZW9tZXRyeSBmcm9tIFwiLi9HZW9tZXRyeVwiO1xyXG5pbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcclxuaW1wb3J0IHsgY3JlYXRlQm94IH0gZnJvbSBcIi4uL3V0aWxzL0dlb21ldHJ5VXRpbHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm94R2VvbWV0cnkgZXh0ZW5kcyBHZW9tZXRyeSB7XHJcblx0Y29uc3RydWN0b3IocHVibGljIHdpZHRoOiBudW1iZXIgPSAxMCwgcHVibGljIGhlaWdodDogbnVtYmVyID0gMTAsIHB1YmxpYyBkZXB0aDogbnVtYmVyID0gMTApIHtcclxuXHRcdHN1cGVyKHtcclxuXHRcdFx0dHlwZTogXCJib3hHZW9tZXRyeVwiXHJcblx0XHR9KTtcclxuXHRcdHRoaXMuZGVmaW5lcyA9IHtcclxuXHRcdFx0SEFTX05PUk1BTDogdHJ1ZVxyXG5cdFx0fTtcclxuXHRcdHRoaXMuaW5pdCgpO1xyXG5cdH1cclxuXHRwcml2YXRlIGluaXQoKSB7XHJcblx0XHQvL2dlbmVyYXRlIHBvcyB1diBub3JtYWwgc28gb25cclxuXHRcdGNvbnN0IHsgcG9zaXRpb25zLCBub3JtYWxzLCB1dnMgfSA9IGNyZWF0ZUJveCh7XHJcblx0XHRcdGRpbWVuc2lvbnM6IFt0aGlzLmRlcHRoLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodF1cclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7XHJcblx0XHR0aGlzLm5vcm1hbHMgPSBub3JtYWxzO1xyXG5cdFx0dGhpcy51dnMgPSB1dnM7XHJcblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSh0aGlzLnBvc2l0aW9ucyk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHRoaXMucG9zaXRpb25zLCAzKSk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcIm5vcm1hbFwiLCB0aGlzLm5vcm1hbHMsIDMpKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwidXZcIiwgdGhpcy51dnMsIDIpKTtcclxuXHRcdHRoaXMuY291bnQgPSAzNjtcclxuXHR9XHJcblx0cHVibGljIHVwZGF0ZShmcmFtZVN0YXRlKSB7fVxyXG59XHJcbiIsImltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuaW1wb3J0IHsgRmxvYXQzMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlXCI7XHJcbmltcG9ydCBHZW9tZXRyeSBmcm9tIFwiLi9HZW9tZXRyeVwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb3J1c0tub3RHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5IHtcclxuXHRyYWRpdXM6IG51bWJlcjtcclxuXHR0dWJlOiBudW1iZXI7XHJcblx0dHVidWxhclNlZ21lbnRzOiBudW1iZXI7XHJcblx0cmFkaWFsU2VnbWVudHM6IG51bWJlcjtcclxuXHRwOiBudW1iZXI7XHJcblx0cTogbnVtYmVyO1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0cmFkaXVzOiBudW1iZXIgPSAxLFxyXG5cdFx0dHViZTogbnVtYmVyID0gMC40LFxyXG5cdFx0dHVidWxhclNlZ21lbnRzOiBudW1iZXIgPSA2NCxcclxuXHRcdHJhZGlhbFNlZ21lbnRzOiBudW1iZXIgPSA4LFxyXG5cdFx0cDogbnVtYmVyID0gMixcclxuXHRcdHE6IG51bWJlciA9IDNcclxuXHQpIHtcclxuXHRcdHN1cGVyKHtcclxuXHRcdFx0dHlwZTogXCJ0b3J1c0tub3RHZW9tZXRyeVwiXHJcblx0XHR9KTtcclxuXHRcdHRoaXMuZGVmaW5lcyA9IHtcclxuXHRcdFx0SEFTX05PUk1BTDogdHJ1ZVxyXG5cdFx0fTtcclxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG5cdFx0dGhpcy50dWJlID0gdHViZTtcclxuXHRcdHRoaXMudHVidWxhclNlZ21lbnRzID0gdHVidWxhclNlZ21lbnRzO1xyXG5cdFx0dGhpcy5yYWRpYWxTZWdtZW50cyA9IHJhZGlhbFNlZ21lbnRzO1xyXG5cdFx0dGhpcy5wID0gcDtcclxuXHRcdHRoaXMucSA9IHE7XHJcblx0XHR0aGlzLmluZGljZXMgPSBbXTtcclxuXHRcdHRoaXMucG9zaXRpb25zID0gW107XHJcblx0XHR0aGlzLm5vcm1hbHMgPSBbXTtcclxuXHRcdHRoaXMudXZzID0gW107XHJcblx0XHR0aGlzLmNyZWF0ZUdlb21ldHJ5KCk7XHJcblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSh0aGlzLnBvc2l0aW9ucyk7XHJcblx0XHR0aGlzLmluaXQoKTtcclxuXHR9XHJcblx0cHVibGljIHVwZGF0ZShmcmFtZVN0YXRlKSB7XHJcblx0XHRjb25zdCB7IGRldmljZSB9ID0gZnJhbWVTdGF0ZS5jb250ZXh0O1xyXG5cdH1cclxuXHRwcml2YXRlIGluaXQoKSB7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHRoaXMucG9zaXRpb25zLCAzKSk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcIm5vcm1hbFwiLCB0aGlzLm5vcm1hbHMsIDMpKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwidXZcIiwgdGhpcy51dnMsIDIpKTtcclxuXHRcdHRoaXMuc2V0SW5kaWNlKHRoaXMuaW5kaWNlcyk7XHJcblx0XHR0aGlzLmNvdW50ID0gdGhpcy5pbmRpY2VzLmxlbmd0aDtcclxuXHR9XHJcblx0cHJpdmF0ZSBjcmVhdGVHZW9tZXRyeSgpIHtcclxuXHRcdGNvbnN0IHR1YnVsYXJTZWdtZW50cyA9IE1hdGguZmxvb3IodGhpcy50dWJ1bGFyU2VnbWVudHMpO1xyXG5cdFx0Y29uc3QgcmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKHRoaXMucmFkaWFsU2VnbWVudHMpO1xyXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xyXG5cclxuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdGNvbnN0IFAxID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdGNvbnN0IFAyID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRjb25zdCBCID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdGNvbnN0IFQgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Y29uc3QgTiA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xyXG5cclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgKytpKSB7XHJcblx0XHRcdC8vIHRoZSByYWRpYW4gXCJ1XCIgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9uIHRoZSB0b3J1cyBjdXJ2ZSBvZiB0aGUgY3VycmVudCB0dWJ1bGFyIHNlZ21lbnRcclxuXHJcblx0XHRcdGNvbnN0IHUgPSAoaSAvIHR1YnVsYXJTZWdtZW50cykgKiB0aGlzLnAgKiBNYXRoLlBJICogMjtcclxuXHJcblx0XHRcdC8vIG5vdyB3ZSBjYWxjdWxhdGUgdHdvIHBvaW50cy4gUDEgaXMgb3VyIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlLCBQMiBpcyBhIGxpdHRsZSBmYXJ0aGVyIGFoZWFkLlxyXG5cdFx0XHQvLyB0aGVzZSBwb2ludHMgYXJlIHVzZWQgdG8gY3JlYXRlIGEgc3BlY2lhbCBcImNvb3JkaW5hdGUgc3BhY2VcIiwgd2hpY2ggaXMgbmVjZXNzYXJ5IHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdCB2ZXJ0ZXggcG9zaXRpb25zXHJcblxyXG5cdFx0XHRjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUodSwgdGhpcy5wLCB0aGlzLnEsIHRoaXMucmFkaXVzLCBQMSk7XHJcblx0XHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSh1ICsgMC4wMSwgdGhpcy5wLCB0aGlzLnEsIHRoaXMucmFkaXVzLCBQMik7XHJcblxyXG5cdFx0XHQvLyBjYWxjdWxhdGUgb3J0aG9ub3JtYWwgYmFzaXNcclxuXHJcblx0XHRcdFZlY3RvcjMuc3VidHJhY3QoUDIsIFAxLCBUKTtcclxuXHRcdFx0Ly8gVC5zdWJWZWN0b3JzKCBQMiwgUDEgKTtcclxuXHRcdFx0VmVjdG9yMy5hZGQoUDIsIFAxLCBOKTtcclxuXHRcdFx0Ly8gTi5hZGRWZWN0b3JzKCBQMiwgUDEgKTtcclxuXHRcdFx0VmVjdG9yMy5jcm9zcyhULCBOLCBCKTtcclxuXHRcdFx0Ly9CLmNyb3NzVmVjdG9ycyggVCwgTiApO1xyXG5cdFx0XHRWZWN0b3IzLmNyb3NzKEIsIFQsIE4pO1xyXG5cdFx0XHQvLyBOLmNyb3NzVmVjdG9ycyggQiwgVCApO1xyXG5cclxuXHRcdFx0Ly8gbm9ybWFsaXplIEIsIE4uIFQgY2FuIGJlIGlnbm9yZWQsIHdlIGRvbid0IHVzZSBpdFxyXG5cclxuXHRcdFx0Qi5ub3JtYWxpemUoKTtcclxuXHRcdFx0Ti5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyArK2opIHtcclxuXHRcdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSB2ZXJ0aWNlcy4gdGhleSBhcmUgbm90aGluZyBtb3JlIHRoYW4gYW4gZXh0cnVzaW9uIG9mIHRoZSB0b3J1cyBjdXJ2ZS5cclxuXHRcdFx0XHQvLyBiZWNhdXNlIHdlIGV4dHJ1ZGUgYSBzaGFwZSBpbiB0aGUgeHktcGxhbmUsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGEgei12YWx1ZS5cclxuXHJcblx0XHRcdFx0Y29uc3QgdiA9IChqIC8gcmFkaWFsU2VnbWVudHMpICogTWF0aC5QSSAqIDI7XHJcblx0XHRcdFx0Y29uc3QgY3ggPSAtdGhpcy50dWJlICogTWF0aC5jb3Modik7XHJcblx0XHRcdFx0Y29uc3QgY3kgPSB0aGlzLnR1YmUgKiBNYXRoLnNpbih2KTtcclxuXHJcblx0XHRcdFx0Ly8gbm93IGNhbGN1bGF0ZSB0aGUgZmluYWwgdmVydGV4IHBvc2l0aW9uLlxyXG5cdFx0XHRcdC8vIGZpcnN0IHdlIG9yaWVudCB0aGUgZXh0cnVzaW9uIHdpdGggb3VyIGJhc2lzIHZlY3RvcnMsIHRoZW4gd2UgYWRkIGl0IHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZVxyXG5cclxuXHRcdFx0XHR2ZXJ0ZXgueCA9IFAxLnggKyAoY3ggKiBOLnggKyBjeSAqIEIueCk7XHJcblx0XHRcdFx0dmVydGV4LnkgPSBQMS55ICsgKGN4ICogTi55ICsgY3kgKiBCLnkpO1xyXG5cdFx0XHRcdHZlcnRleC56ID0gUDEueiArIChjeCAqIE4ueiArIGN5ICogQi56KTtcclxuXHJcblx0XHRcdFx0dGhpcy5wb3NpdGlvbnMucHVzaCh2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56KTtcclxuXHJcblx0XHRcdFx0Ly8gbm9ybWFsIChQMSBpcyBhbHdheXMgdGhlIGNlbnRlci9vcmlnaW4gb2YgdGhlIGV4dHJ1c2lvbiwgdGh1cyB3ZSBjYW4gdXNlIGl0IHRvIGNhbGN1bGF0ZSB0aGUgbm9ybWFsKVxyXG5cdFx0XHRcdFZlY3RvcjMuc3VidHJhY3QodmVydGV4LCBQMSwgbm9ybWFsKTtcclxuXHRcdFx0XHRub3JtYWwubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRcdHRoaXMubm9ybWFscy5wdXNoKG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnopO1xyXG5cclxuXHRcdFx0XHQvLyB1dlxyXG5cclxuXHRcdFx0XHR0aGlzLnV2cy5wdXNoKGkgLyB0dWJ1bGFyU2VnbWVudHMpO1xyXG5cdFx0XHRcdHRoaXMudXZzLnB1c2goaiAvIHJhZGlhbFNlZ21lbnRzKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcclxuXHJcblx0XHRmb3IgKGxldCBqID0gMTsgaiA8PSB0dWJ1bGFyU2VnbWVudHM7IGorKykge1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMTsgaSA8PSByYWRpYWxTZWdtZW50czsgaSsrKSB7XHJcblx0XHRcdFx0Ly8gaW5kaWNlc1xyXG5cclxuXHRcdFx0XHRjb25zdCBhID0gKHJhZGlhbFNlZ21lbnRzICsgMSkgKiAoaiAtIDEpICsgKGkgLSAxKTtcclxuXHRcdFx0XHRjb25zdCBiID0gKHJhZGlhbFNlZ21lbnRzICsgMSkgKiBqICsgKGkgLSAxKTtcclxuXHRcdFx0XHRjb25zdCBjID0gKHJhZGlhbFNlZ21lbnRzICsgMSkgKiBqICsgaTtcclxuXHRcdFx0XHRjb25zdCBkID0gKHJhZGlhbFNlZ21lbnRzICsgMSkgKiAoaiAtIDEpICsgaTtcclxuXHJcblx0XHRcdFx0Ly8gZmFjZXNcclxuXHJcblx0XHRcdFx0dGhpcy5pbmRpY2VzLnB1c2goYSwgYiwgZCk7XHJcblx0XHRcdFx0dGhpcy5pbmRpY2VzLnB1c2goYiwgYywgZCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn1cclxuZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKHUsIHAsIHEsIHJhZGl1cywgcG9zaXRpb24pIHtcclxuXHRjb25zdCBjdSA9IE1hdGguY29zKHUpO1xyXG5cdGNvbnN0IHN1ID0gTWF0aC5zaW4odSk7XHJcblx0Y29uc3QgcXVPdmVyUCA9IChxIC8gcCkgKiB1O1xyXG5cdGNvbnN0IGNzID0gTWF0aC5jb3MocXVPdmVyUCk7XHJcblxyXG5cdHBvc2l0aW9uLnggPSByYWRpdXMgKiAoMiArIGNzKSAqIDAuNSAqIGN1O1xyXG5cdHBvc2l0aW9uLnkgPSByYWRpdXMgKiAoMiArIGNzKSAqIHN1ICogMC41O1xyXG5cdHBvc2l0aW9uLnogPSByYWRpdXMgKiBNYXRoLnNpbihxdU92ZXJQKSAqIDAuNTtcclxufVxyXG4iLCJpbXBvcnQgR2VvbWV0cnkgZnJvbSBcIi4vR2VvbWV0cnlcIjtcclxuaW1wb3J0IHsgRmxvYXQzMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYW5lR2VvbWV0cnkgZXh0ZW5kcyBHZW9tZXRyeSB7XHJcblx0Y29uc3RydWN0b3IocHVibGljIHdpZHRoOiBudW1iZXIgPSAxMCwgcHVibGljIGhlaWdodDogbnVtYmVyID0gMTApIHtcclxuXHRcdHN1cGVyKHtcclxuXHRcdFx0dHlwZTogXCJwbGFuZUdlb21ldHJ5XCJcclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5kZWZpbmVzID0ge1xyXG5cdFx0XHRIQVNfTk9STUFMOiB0cnVlXHJcblx0XHR9O1xyXG5cdFx0dGhpcy5pbml0KCk7XHJcblx0fVxyXG5cdHByaXZhdGUgaW5pdCgpIHtcclxuXHRcdC8vZ2VuZXJhdGUgcG9zIHV2IG5vcm1hbCBzbyBvblxyXG5cdFx0Y29uc3QgeyBpbmRpY2VzLCBub3JtYWxzLCB1dnMsIHZlcnRpY2VzIH0gPSB0aGlzLmNyZWF0ZUdyaWQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG5cdFx0dGhpcy5wb3NpdGlvbnMgPSB2ZXJ0aWNlcztcclxuXHRcdHRoaXMubm9ybWFscyA9IG5vcm1hbHM7XHJcblx0XHR0aGlzLnV2cyA9IHV2cztcclxuXHRcdHRoaXMuaW5kaWNlcyA9IGluZGljZXM7XHJcblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSh0aGlzLnBvc2l0aW9ucyk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHRoaXMucG9zaXRpb25zLCAzKSk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcIm5vcm1hbFwiLCB0aGlzLm5vcm1hbHMsIDMpKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwidXZcIiwgdGhpcy51dnMsIDIpKTtcclxuXHRcdHRoaXMuc2V0SW5kaWNlKGluZGljZXMpO1xyXG5cdFx0dGhpcy5jb3VudCA9IHRoaXMuaW5kaWNlcy5sZW5ndGg7XHJcblx0XHQvLyB0aGlzLmNvdW50ID0gMzY7XHJcblx0fVxyXG5cdHB1YmxpYyB1cGRhdGUoZnJhbWVTdGF0ZSkge31cclxuXHRwcml2YXRlIGNyZWF0ZUdyaWQod2lkdGg6IG51bWJlciA9IDEsIGhlaWdodDogbnVtYmVyID0gMSwgd2lkdGhTZWdtZW50czogbnVtYmVyID0gMSwgaGVpZ2h0U2VnbWVudHM6IG51bWJlciA9IDEpIHtcclxuXHRcdGNvbnN0IHdpZHRoX2hhbGYgPSB3aWR0aCAvIDI7XHJcblx0XHRjb25zdCBoZWlnaHRfaGFsZiA9IGhlaWdodCAvIDI7XHJcblxyXG5cdFx0Y29uc3QgZ3JpZFggPSBNYXRoLmZsb29yKHdpZHRoU2VnbWVudHMpO1xyXG5cdFx0Y29uc3QgZ3JpZFkgPSBNYXRoLmZsb29yKGhlaWdodFNlZ21lbnRzKTtcclxuXHJcblx0XHRjb25zdCBncmlkWDEgPSBncmlkWCArIDE7XHJcblx0XHRjb25zdCBncmlkWTEgPSBncmlkWSArIDE7XHJcblxyXG5cdFx0Y29uc3Qgc2VnbWVudF93aWR0aCA9IHdpZHRoIC8gZ3JpZFg7XHJcblx0XHRjb25zdCBzZWdtZW50X2hlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xyXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcclxuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcclxuXHRcdGNvbnN0IHV2cyA9IFtdO1xyXG5cclxuXHRcdGZvciAobGV0IGl5ID0gMDsgaXkgPCBncmlkWTE7IGl5KyspIHtcclxuXHRcdFx0Y29uc3QgeSA9IGl5ICogc2VnbWVudF9oZWlnaHQgLSBoZWlnaHRfaGFsZjtcclxuXHJcblx0XHRcdGZvciAobGV0IGl4ID0gMDsgaXggPCBncmlkWDE7IGl4KyspIHtcclxuXHRcdFx0XHRjb25zdCB4ID0gaXggKiBzZWdtZW50X3dpZHRoIC0gd2lkdGhfaGFsZjtcclxuXHJcblx0XHRcdFx0dmVydGljZXMucHVzaCh4LCAteSwgMCk7XHJcblxyXG5cdFx0XHRcdG5vcm1hbHMucHVzaCgwLCAwLCAxKTtcclxuXHJcblx0XHRcdFx0dXZzLnB1c2goaXggLyBncmlkWCk7XHJcblx0XHRcdFx0dXZzLnB1c2goMSAtIGl5IC8gZ3JpZFkpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChsZXQgaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSsrKSB7XHJcblx0XHRcdGZvciAobGV0IGl4ID0gMDsgaXggPCBncmlkWDsgaXgrKykge1xyXG5cdFx0XHRcdGNvbnN0IGEgPSBpeCArIGdyaWRYMSAqIGl5O1xyXG5cdFx0XHRcdGNvbnN0IGIgPSBpeCArIGdyaWRYMSAqIChpeSArIDEpO1xyXG5cdFx0XHRcdGNvbnN0IGMgPSBpeCArIDEgKyBncmlkWDEgKiAoaXkgKyAxKTtcclxuXHRcdFx0XHRjb25zdCBkID0gaXggKyAxICsgZ3JpZFgxICogaXk7XHJcblxyXG5cdFx0XHRcdGluZGljZXMucHVzaChhLCBiLCBkKTtcclxuXHRcdFx0XHRpbmRpY2VzLnB1c2goYiwgYywgZCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiB7IGluZGljZXMsIG5vcm1hbHMsIHV2cywgdmVydGljZXMgfTtcclxuXHR9XHJcbn1cclxuIiwiaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tIFwiLi9NYXRlcmlhbFwiO1xuaW1wb3J0IHsgU2hhZGVyU291cmNlIH0gZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJTb3VyY2VcIjtcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi4vbWVzaC9NZXNoXCI7XG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xuaW1wb3J0IENvbG9yIGZyb20gXCIuLi9tYXRoL0NvbG9yXCI7XG5pbXBvcnQgVW5pZm9ybUJ1ZmZlciBmcm9tIFwiLi4vcmVuZGVyL1VuaWZvcm1CdWZmZXJcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9yZW5kZXIvVGV4dHVyZVwiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4uL3JlbmRlci9TYW1wbGVyXCI7XG5pbXBvcnQgdGV4dHVyZUNhY2hlIGZyb20gXCIuLi9jb3JlL1RleHR1cmVDYWNoZVwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxpbm5QaG9uZ01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXHRwdWJsaWMgc3BlY3VsYXI6IENvbG9yO1xuXHRwdWJsaWMgc2hpbmluZXNzOiBudW1iZXI7XG5cdHB1YmxpYyBub3JtYWxUZXh0dXJlOiBUZXh0dXJlO1xuXHRwdWJsaWMgbm9ybWFsU2FtcGxlcjogU2FtcGxlcjtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSBcInBob25nXCI7XG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigxLjAsIDAuMCwgMC4wKTtcblx0XHR0aGlzLnNoYWRlclNvdXJjZSA9IG5ldyBTaGFkZXJTb3VyY2Uoe1xuXHRcdFx0dHlwZTogdGhpcy50eXBlLFxuXHRcdFx0cmVuZGVyOiB0cnVlLFxuXHRcdFx0ZGVmaW5lczoge1xuXHRcdFx0XHRtYXRlcmlhbFBob25nOiB0cnVlXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dGhpcy5saWdodCA9IHRydWU7XG5cdFx0dGhpcy5zcGVjdWxhciA9IG5ldyBDb2xvcigxLjAsIDEuMCwgMS4wKTtcblx0XHR0aGlzLnNoaW5pbmVzcyA9IDMwLjA7XG5cdFx0dGhpcy5iYXNlVGV4dHVyZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmJhc2VTYW1wbGVyID0gdW5kZWZpbmVkO1xuXHR9XG5cdHVwZGF0ZShmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBtZXNoOiBNZXNoKSB7XG5cdFx0aWYgKCF0aGlzLnNoYWRlckRhdGEgfHwgdGhpcy5kaXJ0eSkgdGhpcy5jcmVhdGVTaGFkZXJEYXRhKG1lc2gpO1xuXHR9XG5cdHByb3RlY3RlZCBjcmVhdGVTaGFkZXJEYXRhKG1lc2g/OiBNZXNoKSB7XG5cdFx0c3VwZXIuY3JlYXRlU2hhZGVyRGF0YShtZXNoKTtcblx0XHRjb25zdCB1bmlmb3JtQnVmZmVyID0gbmV3IFVuaWZvcm1CdWZmZXIoXCJwaG9uZ1wiKTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldE1hdHJpeDQoXCJtb2RlbE1hdHJpeFwiLCAoKSA9PiB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9KTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldENvbG9yKFwiY29sb3JcIiwgdGhpcyk7XG5cdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdChcIm9wYWNpdHlcIiwgdGhpcyk7XG5cdFx0dW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXg0KFwibm9ybWFsTXRyaXhcIiwgKCkgPT4ge1xuXHRcdFx0cmV0dXJuIG1lc2gubm9ybWFsTWF0cml4O1xuXHRcdH0pO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0Q29sb3IoXCJlbWlzc2l2ZVwiLCB0aGlzKTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0KFwic2hpbmluZXNzXCIsIHRoaXMpO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0Q29sb3IoXCJzcGVjdWxhclwiLCB0aGlzKTtcblx0XHR0aGlzLnNoYWRlckRhdGEuc2V0VW5pZm9ybUJ1ZmZlcihcInBob25nXCIsIHVuaWZvcm1CdWZmZXIpO1xuXHRcdGlmICh0aGlzLmJhc2VUZXh0dXJlKSB7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0RGVmaW5lKFwiVVNFX0NPTE9SVEVYVFVSRVwiLCB0cnVlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwiYmFzZUNvbG9yVGV4dHVyZVwiLCB0aGlzLmJhc2VUZXh0dXJlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRTYW1wbGVyKFwiYmFzZUNvbG9yU2FtcGxlclwiLCB0aGlzLmJhc2VTYW1wbGVyIHx8IHRleHR1cmVDYWNoZS5kZWZhdWx0U2FtcGxlcik7XG5cdFx0fVxuXHRcdGlmICh0aGlzLm5vcm1hbFRleHR1cmUpIHtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXREZWZpbmUoXCJVU0VfTk9STUFMVEVYVFVSRVwiLCB0cnVlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwibm9ybWFsVGV4dHVyZVwiLCB0aGlzLm5vcm1hbFRleHR1cmUpO1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldFNhbXBsZXIoXCJub3JtYWxTYW1wbGVyXCIsIHRoaXMubm9ybWFsU2FtcGxlciB8fCB0ZXh0dXJlQ2FjaGUuZGVmYXVsdFNhbXBsZXIpO1xuXHRcdH1cblx0fVxuXHRkZXN0cm95KCkge31cbn1cbiIsImltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi4vY29yZS9GcmFtZVN0YXRlXCI7XG5pbXBvcnQgVmVjdG9yMiBmcm9tIFwiLi4vbWF0aC9WZWN0b3IyXCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuL01hdGVyaWFsXCI7XG5pbXBvcnQgeyBTaGFkZXJTb3VyY2UgfSBmcm9tIFwiLi4vc2hhZGVyL1NoYWRlclNvdXJjZVwiO1xuaW1wb3J0IHsgQ3VsbE1vZGUgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IHRleHR1cmVDYWNoZSBmcm9tIFwiLi4vY29yZS9UZXh0dXJlQ2FjaGVcIjtcbmltcG9ydCBVbmlmb3JtQnVmZmVyIGZyb20gXCIuLi9yZW5kZXIvVW5pZm9ybUJ1ZmZlclwiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4uL3JlbmRlci9TYW1wbGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBick1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXHRwdWJsaWMgc3BlY3VsYXJFbnZUZXh0dXJlOiBUZXh0dXJlO1xuXG5cdHB1YmxpYyBzcGVjdWxhckVudlNhbXBsZXI6IFNhbXBsZXI7XG5cblx0cHVibGljIGVtaXNzaXZlVGV4dHVyZTogVGV4dHVyZTtcblxuXHRwdWJsaWMgZW1pc3NpdmVTYW1wbGVyOiBTYW1wbGVyO1xuXG5cdHB1YmxpYyBub3JtYWxUZXh0dXJlOiBUZXh0dXJlO1xuXG5cdHB1YmxpYyBub3JtYWxTYW1wbGVyOiBTYW1wbGVyO1xuXG5cdHB1YmxpYyBhb1RleHR1cmU6IFRleHR1cmU7XG5cblx0cHVibGljIGFvU2FtcGxlcjogU2FtcGxlcjtcblxuXHRwdWJsaWMgbWV0YWxuZXNzUm91Z2huZXNzVGV4dHVyZTogVGV4dHVyZTtcblxuXHRwdWJsaWMgbWV0YWxuZXNzUm91Z2huZXNzU2FtcGxlcjogU2FtcGxlcjtcblxuXHRwcml2YXRlIF9yb3VnaG5lc3M6IG51bWJlcjtcblxuXHRwcml2YXRlIF9tZXRhbG5lc3M6IG51bWJlcjtcblxuXHRwcml2YXRlIF9hb1RleHR1cmVJbnRlbnNpdHk6IG51bWJlcjtcblxuXHRwcml2YXRlIF9ub3JtYWxTY2FsZTogVmVjdG9yMjtcblxuXHRwcml2YXRlIF9JQkxSZW5kZXI6IGJvb2xlYW47XG5cblx0cHVibGljIGdldCByb3VnaG5lc3MoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fcm91Z2huZXNzO1xuXHR9XG5cdHB1YmxpYyBzZXQgcm91Z2huZXNzKHZhbHVlKSB7XG5cdFx0dGhpcy5fcm91Z2huZXNzID0gdmFsdWU7XG5cdH1cblx0cHVibGljIGdldCBtZXRhbG5lc3MoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fbWV0YWxuZXNzO1xuXHR9XG5cdHB1YmxpYyBzZXQgbWV0YWxuZXNzKHY6IG51bWJlcikge1xuXHRcdHRoaXMuX21ldGFsbmVzcyA9IHY7XG5cdH1cblx0cHVibGljIGdldCBhb1RleHR1cmVJbnRlbnNpdHkoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fYW9UZXh0dXJlSW50ZW5zaXR5O1xuXHR9XG5cdHB1YmxpYyBzZXQgYW9UZXh0dXJlSW50ZW5zaXR5KHY6IG51bWJlcikge1xuXHRcdHRoaXMuX2FvVGV4dHVyZUludGVuc2l0eSA9IHY7XG5cdH1cblx0cHVibGljIGdldCBub3JtYWxTY2FsZSgpOiBWZWN0b3IyIHtcblx0XHRpZiAodGhpcy5yZW5kZXJTdGF0ZSAmJiB0aGlzLnJlbmRlclN0YXRlLnByaW1pdGl2ZSkge1xuXHRcdFx0aWYgKHRoaXMucmVuZGVyU3RhdGUucHJpbWl0aXZlLmN1bGxNb2RlID09IEN1bGxNb2RlLkJhY2spIHtcblx0XHRcdFx0cmV0dXJuIFZlY3RvcjIubmVnYXRlKHRoaXMuX25vcm1hbFNjYWxlLCBuZXcgVmVjdG9yMigpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX25vcm1hbFNjYWxlO1xuXHR9XG5cdHB1YmxpYyBzZXQgbm9ybWFsU2NhbGUodjogVmVjdG9yMikge1xuXHRcdHRoaXMuX25vcm1hbFNjYWxlID0gdjtcblx0fVxuXHRwdWJsaWMgc2V0IElCTFJlbmRlcih2YWx1ZSkge1xuXHRcdHRoaXMuX0lCTFJlbmRlciA9IHZhbHVlO1xuXHRcdHRoaXMuc2hhZGVyU291cmNlLnNldERlZmluZXMoe1xuXHRcdFx0VVNFX0lCTDogdGhpcy5fSUJMUmVuZGVyXG5cdFx0fSk7XG5cdFx0dGhpcy5kaXJ0eSA9IHRydWU7XG5cdH1cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSBcInBicl9tYXRcIjtcblxuXHRcdHRoaXMuX3JvdWdobmVzcyA9IDAuMTtcblxuXHRcdHRoaXMuX21ldGFsbmVzcyA9IDAuMTtcblxuXHRcdHRoaXMuX2FvVGV4dHVyZUludGVuc2l0eSA9IDEuMDtcblx0XHR0aGlzLmxpZ2h0ID0gdHJ1ZTtcblx0XHR0aGlzLl9ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKDEsIDEpO1xuXHRcdHRoaXMuX0lCTFJlbmRlciA9IHRydWU7XG5cdFx0dGhpcy5zaGFkZXJTb3VyY2UgPSBuZXcgU2hhZGVyU291cmNlKHtcblx0XHRcdHR5cGU6IHRoaXMudHlwZSxcblx0XHRcdHJlbmRlcjogdHJ1ZSxcblx0XHRcdGRlZmluZXM6IHtcblx0XHRcdFx0bWF0ZXJpYWxQYnI6IHRydWUsXG5cdFx0XHRcdFVTRV9JQkw6IHRoaXMuX0lCTFJlbmRlclxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdHVwZGF0ZShmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBtZXNoOiBNZXNoKSB7XG5cdFx0aWYgKCF0ZXh0dXJlQ2FjaGUuZ2V0VGV4dHVyZShcInNwZWN1bGFyXCIpKSByZXR1cm47XG5cdFx0aWYgKCF0aGlzLnNoYWRlckRhdGEgfHwgdGhpcy5kaXJ0eSkge1xuXHRcdFx0dGhpcy5jcmVhdGVTaGFkZXJEYXRhKG1lc2gsIGZyYW1lU3RhdGUpO1xuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgY3JlYXRlU2hhZGVyRGF0YShtZXNoOiBNZXNoLCBmcmFtZVN0YXRlPzogRnJhbWVTdGF0ZSkge1xuXHRcdHN1cGVyLmNyZWF0ZVNoYWRlckRhdGEobWVzaCk7XG5cdFx0Y29uc3QgdW5pZm9ybUJ1ZmZlciA9IG5ldyBVbmlmb3JtQnVmZmVyKFwicGJyXCIpO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0TWF0cml4NChcIm1vZGVsTWF0cml4XCIsICgpID0+IHtcblx0XHRcdHJldHVybiBtZXNoLm1vZGVsTWF0cml4O1xuXHRcdH0pO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0Q29sb3IoXCJjb2xvclwiLCB0aGlzKTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0KFwib3BhY2l0eVwiLCB0aGlzKTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldE1hdHJpeDQoXCJub3JtYWxNdHJpeFwiLCAoKSA9PiB7XG5cdFx0XHRyZXR1cm4gbWVzaC5ub3JtYWxNYXRyaXg7XG5cdFx0fSk7XG5cdFx0dW5pZm9ybUJ1ZmZlci5zZXRDb2xvcihcImVtaXNzaXZlXCIsIHRoaXMpO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0RmxvYXQoXCJtZXRhbG5lc3NcIiwgdGhpcyk7XG5cdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdChcInJvdWdobmVzc1wiLCB0aGlzKTtcblx0XHR0aGlzLnNoYWRlckRhdGEuc2V0VW5pZm9ybUJ1ZmZlcihcInBiclwiLCB1bmlmb3JtQnVmZmVyKTtcblx0XHR0aGlzLnNwZWN1bGFyRW52VGV4dHVyZSA9IHRleHR1cmVDYWNoZS5nZXRUZXh0dXJlKFwic3BlY3VsYXJcIik7XG5cdFx0aWYgKHRoaXMuYmFzZVRleHR1cmUpIHtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXREZWZpbmUoXCJVU0VfVEVYVFVSRVwiLCB0cnVlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwiYmFzZUNvbG9yVGV4dHVyZVwiLCB0aGlzLmJhc2VUZXh0dXJlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRTYW1wbGVyKFwiYmFzZUNvbG9yU2FtcGxlclwiLCB0aGlzLmJhc2VTYW1wbGVyIHx8IHRleHR1cmVDYWNoZS5kZWZhdWx0U2FtcGxlcik7XG5cdFx0fVxuXHRcdGlmICh0aGlzLm1ldGFsbmVzc1JvdWdobmVzc1RleHR1cmUpIHtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXREZWZpbmUoXCJVU0VfTUVUQUxORVNTVEVYVFVSRVwiLCB0cnVlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwibWV0YWxuZXNzUm91Z2huZXNzVGV4dHVyZVwiLCB0aGlzLm1ldGFsbmVzc1JvdWdobmVzc1RleHR1cmUpO1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldFNhbXBsZXIoXG5cdFx0XHRcdFwibWV0YWxuZXNzUm91Z2huZXNzU2FtcGxlclwiLFxuXHRcdFx0XHR0aGlzLm1ldGFsbmVzc1JvdWdobmVzc1NhbXBsZXIgfHwgdGV4dHVyZUNhY2hlLmRlZmF1bHRTYW1wbGVyXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5ub3JtYWxUZXh0dXJlKSB7XG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0VmVjMihcIm5vcm1hbFNjYWxlXCIsIHRoaXMpO1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldERlZmluZShcIlVTRV9OT1JNQUxURVhUVVJFXCIsIHRydWUpO1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldFRleHR1cmUoXCJub3JtYWxUZXh0dXJlXCIsIHRoaXMubm9ybWFsVGV4dHVyZSk7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0U2FtcGxlcihcIm5vcm1hbFNhbXBsZXJcIiwgdGhpcy5ub3JtYWxTYW1wbGVyIHx8IHRleHR1cmVDYWNoZS5kZWZhdWx0U2FtcGxlcik7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmFvVGV4dHVyZSkge1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldERlZmluZShcIlVTRV9BT1RFWFRVUkVcIiwgdHJ1ZSk7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0VGV4dHVyZShcImFvVGV4dHVyZVwiLCB0aGlzLmFvVGV4dHVyZSk7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0U2FtcGxlcihcImFvU2FtcGxlclwiLCB0aGlzLmFvU2FtcGxlciB8fCB0ZXh0dXJlQ2FjaGUuZGVmYXVsdFNhbXBsZXIpO1xuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdChcImFvVGV4dHVyZUludGVuc2l0eVwiLCB0aGlzKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuZW1pc3NpdmVUZXh0dXJlKSB7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0RGVmaW5lKFwiVVNFX0VNSVNTSVZFVEVYVFVSRVwiLCB0cnVlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwiZW1pc3NpdmVUZXh0dXJlXCIsIHRoaXMuZW1pc3NpdmVUZXh0dXJlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRTYW1wbGVyKFwiZW1pc3NpdmVTYW1wbGVyXCIsIHRoaXMuZW1pc3NpdmVTYW1wbGVyIHx8IHRleHR1cmVDYWNoZS5kZWZhdWx0U2FtcGxlcik7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnNwZWN1bGFyRW52VGV4dHVyZSAmJiB0aGlzLl9JQkxSZW5kZXIpIHtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwic3BlY3VsYXJFbnZUZXh0dXJlXCIsIHRoaXMuc3BlY3VsYXJFbnZUZXh0dXJlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRTYW1wbGVyKFwic3BlY3VsYXJFbnZTYW1wbGVyXCIsIHRoaXMuc3BlY3VsYXJFbnZTYW1wbGVyIHx8IHRleHR1cmVDYWNoZS5kZWZhdWx0U2FtcGxlcik7XG5cdFx0fVxuXHR9XG5cdGRlc3Ryb3koKSB7fVxufVxuIiwiaW1wb3J0IHsgSVVuaWZvcm0sIFVuaWZvcm1zIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVVHlwZXNcIjtcclxuaW1wb3J0IFNoYWRlckRhdGEgZnJvbSBcIi4uL3JlbmRlci9TaGFkZXJEYXRhXCI7XHJcbmltcG9ydCBVbmlmb3JtQnVmZmVyIGZyb20gXCIuLi9yZW5kZXIvVW5pZm9ybUJ1ZmZlclwiO1xyXG5jb25zdCB1bmlmb3JtQXJyYXlOYW1lcyA9IFtcImZsb2F0LWFycmF5XCIsIFwidmVjMi1hcnJheVwiLCBcInZlYzMtYXJyYXlcIiwgXCJ2ZWM0LWFycmF5XCJdO1xyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tDb250YWluRmxvYXRUeXBlKHVuaWZvcm1zKSB7XHJcblx0bGV0IHJlc3VsdCA9IDA7XHJcblx0bGV0IGhhc0FycmF5dHlwZSA9IGZhbHNlO1xyXG5cdGNvbnN0IHVuaWZvcm1zTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh1bmlmb3Jtcyk7XHJcblx0dW5pZm9ybXNOYW1lcy5tYXAoKHVuaWZvcm1zTmFtZSkgPT4ge1xyXG5cdFx0aWYgKHVuaWZvcm1zW3VuaWZvcm1zTmFtZV0udHlwZSA9PSBcInRleHR1cmVcIiB8fCB1bmlmb3Jtc1t1bmlmb3Jtc05hbWVdLnR5cGUgPT0gXCJzYW1wbGVyXCIpIHtcclxuXHRcdFx0cmVzdWx0ICs9IDA7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAoXHJcblx0XHRcdFx0dW5pZm9ybUFycmF5TmFtZXMuZmluZCgobmFtZSkgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG5hbWUgPT09IHVuaWZvcm1zW3VuaWZvcm1zTmFtZV0udHlwZTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHRoYXNBcnJheXR5cGUgPSB0cnVlO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdCArPSAxO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcblx0cmV0dXJuIHtcclxuXHRcdGhhc0Zsb2F0OiByZXN1bHQsXHJcblx0XHRoYXNBcnJheXR5cGVcclxuXHR9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRVbmlmb3JtVG9TaGFkZXJEYXRhKFxyXG5cdG5hbWU6IHN0cmluZyxcclxuXHR1bmlmb3JtOiBJVW5pZm9ybSxcclxuXHR1bmlmb3JtczogVW5pZm9ybXMsXHJcblx0c2hhZGVyRGF0YTogU2hhZGVyRGF0YSxcclxuXHR1bmlmb3JtQnVmZmVyPzogVW5pZm9ybUJ1ZmZlclxyXG4pIHtcclxuXHRzd2l0Y2ggKHVuaWZvcm0udHlwZSkge1xyXG5cdFx0Y2FzZSBcImZsb2F0XCI6XHJcblx0XHRcdHVuaWZvcm1CdWZmZXIuc2V0RmxvYXQobmFtZSwgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcInZlYzJcIjpcclxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdFZlYzIobmFtZSwgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcInZlYzNcIjpcclxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdFZlYzMobmFtZSwgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcImNvbG9yXCI6XHJcblx0XHRcdHVuaWZvcm1CdWZmZXIuc2V0Q29sb3IobmFtZSwgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcInZlYzRcIjpcclxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdFZlYzQobmFtZSwgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIFwibWF0MlwiOlxyXG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldE1hdHJpeDIobmFtZSwgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIm1hdDNcIjpcclxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXgzKG5hbWUsICgpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBcIm1hdDRcIjpcclxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXg0KG5hbWUsICgpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJmbG9hdC1hcnJheVwiOlxyXG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0QXJyYXkoXHJcblx0XHRcdFx0bmFtZSxcclxuXHRcdFx0XHQoKSA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR1bmlmb3Jtc1tuYW1lXS52YWx1ZS5sZW5ndGhcclxuXHRcdFx0KTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwidmVjMi1hcnJheVwiOlxyXG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldFZlYzJBcnJheShcclxuXHRcdFx0XHRuYW1lLFxyXG5cdFx0XHRcdCgpID0+IHtcclxuXHRcdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHVuaWZvcm1zW25hbWVdLnZhbHVlLmxlbmd0aFxyXG5cdFx0XHQpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJ2ZWMzLWFycmF5XCI6XHJcblx0XHRcdHVuaWZvcm1CdWZmZXIuc2V0VmVjM0FycmF5KFxyXG5cdFx0XHRcdG5hbWUsXHJcblx0XHRcdFx0KCkgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHVuaWZvcm1zW25hbWVdLnZhbHVlO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dW5pZm9ybXNbbmFtZV0udmFsdWUubGVuZ3RoXHJcblx0XHRcdCk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcInZlYzQtYXJyYXlcIjpcclxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRWZWM0QXJyYXkoXHJcblx0XHRcdFx0bmFtZSxcclxuXHRcdFx0XHQoKSA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR1bmlmb3Jtc1tuYW1lXS52YWx1ZS5sZW5ndGhcclxuXHRcdFx0KTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwidGV4dHVyZVwiOlxyXG5cdFx0XHRzaGFkZXJEYXRhLnNldFRleHR1cmUobmFtZSwgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcInNhbXBsZXJcIjpcclxuXHRcdFx0c2hhZGVyRGF0YS5zZXRTYW1wbGVyKG5hbWUsICgpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIm5vdCBtYXRjaCB1bmlmcm9tIHR5cGVcIik7XHJcblx0XHRcdGJyZWFrO1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xuaW1wb3J0IHsgQnVmZmVyVXNhZ2UgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IHsgU2hhZGVyTWF0ZXJpYWxQYXJtcywgVW5pZm9ybXMgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gXCIuLi9tZXNoL01lc2hcIjtcbmltcG9ydCBVbmlmb3JtQnVmZmVyIGZyb20gXCIuLi9yZW5kZXIvVW5pZm9ybUJ1ZmZlclwiO1xuaW1wb3J0IHsgU2hhZGVyU291cmNlIH0gZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJTb3VyY2VcIjtcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xuaW1wb3J0IHsgYWRkVW5pZm9ybVRvU2hhZGVyRGF0YSwgY2hlY2tDb250YWluRmxvYXRUeXBlIH0gZnJvbSBcIi4uL3V0aWxzL3VuaWZvcm1VdGlsc1wiO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tIFwiLi9NYXRlcmlhbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZXJNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblx0dW5pZm9ybXM6IFVuaWZvcm1zO1xuXHR1bmlmb3JtQnVmZmVyOiBVbmlmb3JtQnVmZmVyO1xuXHRwcml2YXRlIHNoYWRlck1hdGVyaWFsUGFybXM6IFNoYWRlck1hdGVyaWFsUGFybXM7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM6IFNoYWRlck1hdGVyaWFsUGFybXMpIHtcblx0XHRzdXBlcigpO1xuXHRcdGNvbnN0IHsgdHlwZSwgZnJhZywgdmVydCwgZGVmaW5lcywgbGlnaHQgfSA9IG9wdGlvbnM7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0XHR0aGlzLnNoYWRlck1hdGVyaWFsUGFybXMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc2hhZGVyU291cmNlID0gbmV3IFNoYWRlclNvdXJjZSh7XG5cdFx0XHR0eXBlLFxuXHRcdFx0ZnJhZyxcblx0XHRcdHZlcnQsXG5cdFx0XHRjdXN0b206IHRydWUsXG5cdFx0XHRkZWZpbmVzOiBkZWZhdWx0VmFsdWUoZGVmaW5lcywge30pLFxuXHRcdFx0cmVuZGVyOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy51bmlmb3JtcyA9IG9wdGlvbnMudW5pZm9ybXM7XG5cdFx0dGhpcy51bmlmb3JtQnVmZmVyID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMubGlnaHQgPSBsaWdodCB8fCBmYWxzZTtcblx0fVxuXHR1cGRhdGUoZnJhbWVTdGF0ZT86IEZyYW1lU3RhdGUsIG1lc2g/OiBNZXNoKSB7XG5cdFx0aWYgKCF0aGlzLnNoYWRlckRhdGEgfHwgdGhpcy5kaXJ0eSkgdGhpcy5jcmVhdGVTaGFkZXJEYXRhKG1lc2gpO1xuXHR9XG5cdGNsb25lKCkge1xuXHRcdHJldHVybiBuZXcgU2hhZGVyTWF0ZXJpYWwodGhpcy5zaGFkZXJNYXRlcmlhbFBhcm1zKTtcblx0fVxuXHRwcm90ZWN0ZWQgY3JlYXRlU2hhZGVyRGF0YShtZXNoPzogTWVzaCkge1xuXHRcdHN1cGVyLmNyZWF0ZVNoYWRlckRhdGEobWVzaCk7XG5cdFx0bGV0IHJlc3VsdCA9IGNoZWNrQ29udGFpbkZsb2F0VHlwZSh0aGlzLnVuaWZvcm1zKTtcblx0XHRpZiAocmVzdWx0Lmhhc0Zsb2F0KSB7XG5cdFx0XHR0aGlzLnVuaWZvcm1CdWZmZXIgPSByZXN1bHQuaGFzQXJyYXl0eXBlXG5cdFx0XHRcdD8gbmV3IFVuaWZvcm1CdWZmZXIodGhpcy50eXBlLCBcInJlYWQtb25seS1zdG9yYWdlXCIsIEJ1ZmZlclVzYWdlLlN0b3JhZ2UgfCBCdWZmZXJVc2FnZS5Db3B5RHN0KVxuXHRcdFx0XHQ6IG5ldyBVbmlmb3JtQnVmZmVyKHRoaXMudHlwZSk7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0VW5pZm9ybUJ1ZmZlcih0aGlzLnR5cGUsIHRoaXMudW5pZm9ybUJ1ZmZlcik7XG5cdFx0fVxuXHRcdGNvbnN0IHVuaWZvcm1zTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLnVuaWZvcm1zKTtcblx0XHR1bmlmb3Jtc05hbWVzLm1hcCgodW5pZm9ybXNOYW1lKSA9PiB7XG5cdFx0XHRhZGRVbmlmb3JtVG9TaGFkZXJEYXRhKFxuXHRcdFx0XHR1bmlmb3Jtc05hbWUsXG5cdFx0XHRcdHRoaXMudW5pZm9ybXNbdW5pZm9ybXNOYW1lXSxcblx0XHRcdFx0dGhpcy51bmlmb3Jtcyxcblx0XHRcdFx0dGhpcy5zaGFkZXJEYXRhLFxuXHRcdFx0XHR0aGlzLnVuaWZvcm1CdWZmZXJcblx0XHRcdCk7XG5cdFx0fSk7XG5cdH1cbn1cbiIsImV4cG9ydCBjbGFzcyBFdmVudERpc3BhdGNoZXIge1xyXG4gIHByaXZhdGUgX2xpc3RlbmVyczoge307XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xyXG5cclxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcclxuXHJcbiAgICBpZiAobGlzdGVuZXJzW3R5cGVdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgbGlzdGVuZXJzW3R5cGVdID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGxpc3RlbmVyc1t0eXBlXS5pbmRleE9mKGxpc3RlbmVyKSA9PT0gLTEpIHtcclxuICAgICAgbGlzdGVuZXJzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFzRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIGxpc3RlbmVyc1t0eXBlXSAhPT0gdW5kZWZpbmVkICYmIGxpc3RlbmVyc1t0eXBlXS5pbmRleE9mKGxpc3RlbmVyKSAhPT0gLTFcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcbiAgICBjb25zdCBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJzW3R5cGVdO1xyXG5cclxuICAgIGlmIChsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lckFycmF5LmluZGV4T2YobGlzdGVuZXIpO1xyXG5cclxuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgIGxpc3RlbmVyQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcGF0Y2hFdmVudChldmVudCkge1xyXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xyXG4gICAgY29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1tldmVudC50eXBlXTtcclxuXHJcbiAgICBpZiAobGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGV2ZW50LnRhcmdldCA9IHRoaXM7XHJcblxyXG4gICAgICBjb25zdCBhcnJheSA9IGxpc3RlbmVyQXJyYXkuc2xpY2UoMCk7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGFycmF5W2ldLmNhbGwodGhpcywgZXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICAgIGV2ZW50LnRhcmdldCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcbmltcG9ydCB7IENvbXB1dGUgfSBmcm9tIFwiLi4vY29tcHV0ZS9Db21wdXRlXCI7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuLi9tYXRlcmlhbC9NYXRlcmlhbFwiO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gXCIuLi9tZXNoL01lc2hcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuLi9yZW5kZXIvQ29udGV4dFwiO1xuaW1wb3J0IERyYXdDb21tYW5kIGZyb20gXCIuLi9yZW5kZXIvRHJhd0NvbW1hbmRcIjtcbmltcG9ydCB7IENvbW1hbmRTdWJUeXBlIH0gZnJvbSBcIi4vV2ViR1BVQ29uc3RhbnRcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlclF1ZXVlIHtcblx0cHVibGljIHByZTogQXJyYXk8TWVzaD47XG5cdHB1YmxpYyBvcGFxdWU6IEFycmF5PE1lc2g+O1xuXHRwdWJsaWMgdHJhbnNwYXJlbnQ6IEFycmF5PE1lc2g+O1xuXHRwdWJsaWMgY29tcHV0ZXM6IEFycmF5PENvbXB1dGU+O1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLnByZSA9IFtdO1xuXHRcdHRoaXMub3BhcXVlID0gW107XG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IFtdO1xuXHRcdHRoaXMuY29tcHV0ZXMgPSBbXTtcblx0fVxuXHRzb3J0KCkge1xuXHRcdFJlbmRlclF1ZXVlLnNvcnQodGhpcy5vcGFxdWUsIDAsIHRoaXMub3BhcXVlLmxlbmd0aCwgUmVuZGVyUXVldWUuX2NvbXBhcmVGcm9tTmVhclRvRmFyKTtcblx0XHRSZW5kZXJRdWV1ZS5zb3J0KHRoaXMudHJhbnNwYXJlbnQsIDAsIHRoaXMudHJhbnNwYXJlbnQubGVuZ3RoLCBSZW5kZXJRdWV1ZS5fY29tcGFyZUZyb21GYXJUb05lYXIpO1xuXHR9XG5cdG9wYXF1ZVJlbmRlcihcblx0XHRjYW1lcmE6IENhbWVyYSxcblx0XHRjb250ZXh0OiBDb250ZXh0LFxuXHRcdHBhc3NFbmNvZGVyPzogR1BVUmVuZGVyUGFzc0VuY29kZXIsXG5cdFx0cmVwbGFjZU1hdGVyaWFsPzogTWF0ZXJpYWwsXG5cdFx0Y29tbWFuZFN1YlR5cGU/OiBDb21tYW5kU3ViVHlwZVxuXHQpIHtcblx0XHR0aGlzLm9wYXF1ZS5tYXAoKG1lc2gpID0+IHtcblx0XHRcdGlmICghbWVzaC5yZWFkeSkgcmV0dXJuO1xuXHRcdFx0bWVzaC5iZWZvcmVSZW5kZXIoKTtcblx0XHRcdFJlbmRlclF1ZXVlLmV4Y3V0ZUNvbW1hbmQoXG5cdFx0XHRcdG1lc2guZ2V0RHJhd0NvbW1hbmQocmVwbGFjZU1hdGVyaWFsLCBjb21tYW5kU3ViVHlwZSksXG5cdFx0XHRcdGNvbnRleHQsXG5cdFx0XHRcdHBhc3NFbmNvZGVyLFxuXHRcdFx0XHRjYW1lcmFcblx0XHRcdCk7XG5cdFx0XHRtZXNoLmFmdGVyUmVuZGVyKCk7XG5cdFx0fSk7XG5cdH1cblx0dHJhbnNwYXJlbnRSZW5kZXIoXG5cdFx0Y2FtZXJhOiBDYW1lcmEsXG5cdFx0Y29udGV4dDogQ29udGV4dCxcblx0XHRwYXNzRW5jb2Rlcj86IEdQVVJlbmRlclBhc3NFbmNvZGVyLFxuXHRcdHJlcGxhY2VNYXRlcmlhbD86IE1hdGVyaWFsLFxuXHRcdGNvbW1hbmRTdWJUeXBlPzogQ29tbWFuZFN1YlR5cGVcblx0KSB7XG5cdFx0dGhpcy50cmFuc3BhcmVudC5tYXAoKG1lc2gpID0+IHtcblx0XHRcdGlmICghbWVzaC5yZWFkeSkgcmV0dXJuO1xuXHRcdFx0bWVzaC5iZWZvcmVSZW5kZXIoKTtcblx0XHRcdFJlbmRlclF1ZXVlLmV4Y3V0ZUNvbW1hbmQoXG5cdFx0XHRcdG1lc2guZ2V0RHJhd0NvbW1hbmQocmVwbGFjZU1hdGVyaWFsLCBjb21tYW5kU3ViVHlwZSksXG5cdFx0XHRcdGNvbnRleHQsXG5cdFx0XHRcdHBhc3NFbmNvZGVyLFxuXHRcdFx0XHRjYW1lcmFcblx0XHRcdCk7XG5cdFx0XHRtZXNoLmFmdGVyUmVuZGVyKCk7XG5cdFx0fSk7XG5cdH1cblx0Y29tcHV0ZVJlbmRlcihjb250ZXh0OiBDb250ZXh0LCBwYXNzRW5jb2Rlcj86IEdQVUNvbXB1dGVQYXNzRW5jb2Rlcikge1xuXHRcdHRoaXMuY29tcHV0ZXMubWFwKChjb21wdXRlKSA9PiB7XG5cdFx0XHRSZW5kZXJRdWV1ZS5leGN1dGVDb21wdXRlKGNvbXB1dGUuZ2V0Q29tbWFuZCgpLCBjb250ZXh0LCBwYXNzRW5jb2Rlcik7XG5cdFx0fSk7XG5cdH1cblx0cHJlUmVuZGVyKGNhbWVyYTogQ2FtZXJhLCBjb250ZXh0OiBDb250ZXh0LCBwYXNzRW5jb2Rlcj86IEdQVVJlbmRlclBhc3NFbmNvZGVyLCByZXBsYWNlTWF0ZXJpYWw/OiBNYXRlcmlhbCkge1xuXHRcdHRoaXMucHJlLm1hcCgobWVzaCkgPT4ge1xuXHRcdFx0aWYgKCFtZXNoLnJlYWR5KSByZXR1cm47XG5cdFx0XHRtZXNoLmJlZm9yZVJlbmRlcigpO1xuXHRcdFx0UmVuZGVyUXVldWUuZXhjdXRlQ29tbWFuZChtZXNoLmdldERyYXdDb21tYW5kKCksIGNvbnRleHQsIHBhc3NFbmNvZGVyLCBjYW1lcmEpO1xuXHRcdFx0bWVzaC5hZnRlclJlbmRlcigpO1xuXHRcdH0pO1xuXHR9XG5cdHN0YXRpYyBleGN1dGVDb21tYW5kKGNvbW1hbmQ6IERyYXdDb21tYW5kLCBjb250ZXh0PzogQ29udGV4dCwgcGFzc0VuY29kZXI/OiBHUFVSZW5kZXJQYXNzRW5jb2RlciwgY2FtZXJhPzogQ2FtZXJhKSB7XG5cdFx0aWYgKGNvbW1hbmQucmVuZGVyVGFyZ2V0KSB7XG5cdFx0XHRjb25zdCBjdXJyZW50UmVuZGVyUGFzc0VuY29kZXIgPSBjb21tYW5kLnJlbmRlclRhcmdldC5iZWdpblJlbmRlclBhc3NFbmNvZGVyKGNvbnRleHQpO1xuXHRcdFx0Y29udGV4dC5yZW5kZXIoY29tbWFuZCwgY3VycmVudFJlbmRlclBhc3NFbmNvZGVyLCBjYW1lcmEpO1xuXHRcdFx0Y29tbWFuZC5yZW5kZXJUYXJnZXQuZW5kUmVuZGVyUGFzc0VuY29kZXIoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dC5yZW5kZXIoY29tbWFuZCwgcGFzc0VuY29kZXIsIGNhbWVyYSk7XG5cdFx0fVxuXHR9XG5cdHN0YXRpYyBleGN1dGVDb21wdXRlKGNvbW1hbmQ6IERyYXdDb21tYW5kLCBjb250ZXh0PzogQ29udGV4dCwgcGFzc0VuY29kZXI/OiBHUFVDb21wdXRlUGFzc0VuY29kZXIpIHtcblx0XHRjb250ZXh0LmNvbXB1dGUoY29tbWFuZCwgcGFzc0VuY29kZXIpO1xuXHR9XG5cdHJlc2V0KCkge1xuXHRcdHRoaXMucHJlID0gW107XG5cdFx0dGhpcy5vcGFxdWUgPSBbXTtcblx0XHR0aGlzLnRyYW5zcGFyZW50ID0gW107XG5cdFx0dGhpcy5jb21wdXRlcyA9IFtdO1xuXHR9XG5cdHN0YXRpYyBfY29tcGFyZUZyb21OZWFyVG9GYXIoYTogTWVzaCwgYjogTWVzaCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5IHx8IGEuZGlzdGFuY2VUb0NhbWVyYSAtIGIuZGlzdGFuY2VUb0NhbWVyYTtcblx0fVxuXG5cdHN0YXRpYyBfY29tcGFyZUZyb21GYXJUb05lYXIoYTogTWVzaCwgYjogTWVzaCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5IHx8IGIuZGlzdGFuY2VUb0NhbWVyYSAtIGEuZGlzdGFuY2VUb0NhbWVyYTtcblx0fVxuXHQvL2FjY29yZGluZyB0byBjYW1lcmEgZGlzdGFuY2Vcblx0c3RhdGljIHNvcnQ8VD4oaW5zYXRuY2U6IFRbXSwgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyLCBjb21wYXJlRnVuYzogRnVuY3Rpb24pOiB2b2lkIHtcblx0XHRSZW5kZXJRdWV1ZS5fcXVpY2tTb3J0KGluc2F0bmNlLCBmcm9tLCB0bywgY29tcGFyZUZ1bmMpO1xuXHR9XG5cdC8vZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb2FzaXMtZW5naW5lL2VuZ2luZS9ibG9iL21haW4vcGFja2FnZXMvY29yZS9zcmMvUmVuZGVyUGlwZWxpbmUvUmVuZGVyUXVldWUudHNcblx0cHJpdmF0ZSBzdGF0aWMgX3F1aWNrU29ydDxUPihhOiBUW10sIGZyb206IG51bWJlciwgdG86IG51bWJlciwgY29tcGFyZUZ1bmM6IEZ1bmN0aW9uKTogdm9pZCB7XG5cdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdC8vIEluc2VydGlvbiBzb3J0IGlzIGZhc3RlciBmb3Igc2hvcnQgYXJyYXlzLlxuXHRcdFx0aWYgKHRvIC0gZnJvbSA8PSAxMCkge1xuXHRcdFx0XHRSZW5kZXJRdWV1ZS5faW5zZXJ0aW9uU29ydChhLCBmcm9tLCB0bywgY29tcGFyZUZ1bmMpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCB0aGlyZF9pbmRleCA9IChmcm9tICsgdG8pID4+IDE7XG5cdFx0XHQvLyBGaW5kIGEgcGl2b3QgYXMgdGhlIG1lZGlhbiBvZiBmaXJzdCwgbGFzdCBhbmQgbWlkZGxlIGVsZW1lbnQuXG5cdFx0XHRsZXQgdjAgPSBhW2Zyb21dO1xuXHRcdFx0bGV0IHYxID0gYVt0byAtIDFdO1xuXHRcdFx0bGV0IHYyID0gYVt0aGlyZF9pbmRleF07XG5cdFx0XHRjb25zdCBjMDEgPSBjb21wYXJlRnVuYyh2MCwgdjEpO1xuXHRcdFx0aWYgKGMwMSA+IDApIHtcblx0XHRcdFx0Ly8gdjEgPCB2MCwgc28gc3dhcCB0aGVtLlxuXHRcdFx0XHRjb25zdCB0bXAgPSB2MDtcblx0XHRcdFx0djAgPSB2MTtcblx0XHRcdFx0djEgPSB0bXA7XG5cdFx0XHR9IC8vIHYwIDw9IHYxLlxuXHRcdFx0Y29uc3QgYzAyID0gY29tcGFyZUZ1bmModjAsIHYyKTtcblx0XHRcdGlmIChjMDIgPj0gMCkge1xuXHRcdFx0XHQvLyB2MiA8PSB2MCA8PSB2MS5cblx0XHRcdFx0Y29uc3QgdG1wID0gdjA7XG5cdFx0XHRcdHYwID0gdjI7XG5cdFx0XHRcdHYyID0gdjE7XG5cdFx0XHRcdHYxID0gdG1wO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gdjAgPD0gdjEgJiYgdjAgPCB2MlxuXHRcdFx0XHRjb25zdCBjMTIgPSBjb21wYXJlRnVuYyh2MSwgdjIpO1xuXHRcdFx0XHRpZiAoYzEyID4gMCkge1xuXHRcdFx0XHRcdC8vIHYwIDw9IHYyIDwgdjFcblx0XHRcdFx0XHRjb25zdCB0bXAgPSB2MTtcblx0XHRcdFx0XHR2MSA9IHYyO1xuXHRcdFx0XHRcdHYyID0gdG1wO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyB2MCA8PSB2MSA8PSB2MlxuXHRcdFx0YVtmcm9tXSA9IHYwO1xuXHRcdFx0YVt0byAtIDFdID0gdjI7XG5cdFx0XHRjb25zdCBwaXZvdCA9IHYxO1xuXHRcdFx0bGV0IGxvd19lbmQgPSBmcm9tICsgMTsgLy8gVXBwZXIgYm91bmQgb2YgZWxlbWVudHMgbG93ZXIgdGhhbiBwaXZvdC5cblx0XHRcdGxldCBoaWdoX3N0YXJ0ID0gdG8gLSAxOyAvLyBMb3dlciBib3VuZCBvZiBlbGVtZW50cyBncmVhdGVyIHRoYW4gcGl2b3QuXG5cdFx0XHRhW3RoaXJkX2luZGV4XSA9IGFbbG93X2VuZF07XG5cdFx0XHRhW2xvd19lbmRdID0gcGl2b3Q7XG5cblx0XHRcdC8vIEZyb20gbG93X2VuZCB0byBpIGFyZSBlbGVtZW50cyBlcXVhbCB0byBwaXZvdC5cblx0XHRcdC8vIEZyb20gaSB0byBoaWdoX3N0YXJ0IGFyZSBlbGVtZW50cyB0aGF0IGhhdmVuJ3QgYmVlbiBjb21wYXJlZCB5ZXQuXG5cdFx0XHRwYXJ0aXRpb246IGZvciAobGV0IGkgPSBsb3dfZW5kICsgMTsgaSA8IGhpZ2hfc3RhcnQ7IGkrKykge1xuXHRcdFx0XHRsZXQgZWxlbWVudCA9IGFbaV07XG5cdFx0XHRcdGxldCBvcmRlciA9IGNvbXBhcmVGdW5jKGVsZW1lbnQsIHBpdm90KTtcblx0XHRcdFx0aWYgKG9yZGVyIDwgMCkge1xuXHRcdFx0XHRcdGFbaV0gPSBhW2xvd19lbmRdO1xuXHRcdFx0XHRcdGFbbG93X2VuZF0gPSBlbGVtZW50O1xuXHRcdFx0XHRcdGxvd19lbmQrKztcblx0XHRcdFx0fSBlbHNlIGlmIChvcmRlciA+IDApIHtcblx0XHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0XHRoaWdoX3N0YXJ0LS07XG5cdFx0XHRcdFx0XHRpZiAoaGlnaF9zdGFydCA9PSBpKSBicmVhayBwYXJ0aXRpb247XG5cdFx0XHRcdFx0XHRjb25zdCB0b3BfZWxlbSA9IGFbaGlnaF9zdGFydF07XG5cdFx0XHRcdFx0XHRvcmRlciA9IGNvbXBhcmVGdW5jKHRvcF9lbGVtLCBwaXZvdCk7XG5cdFx0XHRcdFx0fSB3aGlsZSAob3JkZXIgPiAwKTtcblx0XHRcdFx0XHRhW2ldID0gYVtoaWdoX3N0YXJ0XTtcblx0XHRcdFx0XHRhW2hpZ2hfc3RhcnRdID0gZWxlbWVudDtcblx0XHRcdFx0XHRpZiAob3JkZXIgPCAwKSB7XG5cdFx0XHRcdFx0XHRlbGVtZW50ID0gYVtpXTtcblx0XHRcdFx0XHRcdGFbaV0gPSBhW2xvd19lbmRdO1xuXHRcdFx0XHRcdFx0YVtsb3dfZW5kXSA9IGVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRsb3dfZW5kKys7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodG8gLSBoaWdoX3N0YXJ0IDwgbG93X2VuZCAtIGZyb20pIHtcblx0XHRcdFx0dGhpcy5fcXVpY2tTb3J0KGEsIGhpZ2hfc3RhcnQsIHRvLCBjb21wYXJlRnVuYyk7XG5cdFx0XHRcdHRvID0gbG93X2VuZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3F1aWNrU29ydChhLCBmcm9tLCBsb3dfZW5kLCBjb21wYXJlRnVuYyk7XG5cdFx0XHRcdGZyb20gPSBoaWdoX3N0YXJ0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRwcml2YXRlIHN0YXRpYyBfaW5zZXJ0aW9uU29ydDxUPihhOiBUW10sIGZyb206IG51bWJlciwgdG86IG51bWJlciwgY29tcGFyZUZ1bmM6IEZ1bmN0aW9uKTogdm9pZCB7XG5cdFx0Zm9yIChsZXQgaSA9IGZyb20gKyAxOyBpIDwgdG87IGkrKykge1xuXHRcdFx0bGV0IGo7XG5cdFx0XHRjb25zdCBlbGVtZW50ID0gYVtpXTtcblx0XHRcdGZvciAoaiA9IGkgLSAxOyBqID49IGZyb207IGotLSkge1xuXHRcdFx0XHRjb25zdCB0bXAgPSBhW2pdO1xuXHRcdFx0XHRjb25zdCBvcmRlciA9IGNvbXBhcmVGdW5jKHRtcCwgZWxlbWVudCk7XG5cdFx0XHRcdGlmIChvcmRlciA+IDApIHtcblx0XHRcdFx0XHRhW2ogKyAxXSA9IHRtcDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0YVtqICsgMV0gPSBlbGVtZW50O1xuXHRcdH1cblx0fVxufVxuIiwiaW1wb3J0IENvbnRleHQgZnJvbSBcIi4uL3JlbmRlci9Db250ZXh0XCI7XHJcbmltcG9ydCBQYXNzIGZyb20gXCIuLi9wYXNzL1Bhc3NcIjtcclxuaW1wb3J0IGNvbWJpbmUgZnJvbSBcIi4uL3V0aWxzL2NvbWJpbmVcIjtcclxuaW1wb3J0IEN1bGxpbmdWb2x1bWUgZnJvbSBcIi4vQ3VsbGluZ1ZvbHVtZVwiO1xyXG5pbXBvcnQgUmVuZGVyUXVldWUgZnJvbSBcIi4vUmVuZGVyUXVldWVcIjtcclxuaW1wb3J0IENhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0NhbWVyYVwiO1xyXG5leHBvcnQgY2xhc3MgRnJhbWVTdGF0ZSB7XHJcblx0cHVibGljIHBhc3M6IFBhc3M7XHJcblx0cHVibGljIHJlbmRlclF1ZXVlOiBSZW5kZXJRdWV1ZTtcclxuXHRwdWJsaWMgZHJhd0NhbGxudW1zOiBudW1iZXI7XHJcblx0cHVibGljIGdlb21ldHJ5TWVtb3J5OiBudW1iZXI7XHJcblx0cHVibGljIHRleHR1cmVNZW1vcnk6IG51bWJlcjtcclxuXHRwdWJsaWMgZnJhbWVOdW1iZXI6IG51bWJlcjtcclxuXHRwdWJsaWMgY3VsbGluZ1ZvbHVtZTogQ3VsbGluZ1ZvbHVtZTtcclxuXHRwdWJsaWMgZGVmaW5lc0RpcnR5OiBib29sZWFuO1xyXG5cdHB1YmxpYyB2aWV3cG9ydDogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfTtcclxuXHRwcml2YXRlIF9kZWZpbmVzOiB7fTtcclxuXHRjb25zdHJ1Y3RvcihwdWJsaWMgY29udGV4dDogQ29udGV4dCkge1xyXG5cdFx0dGhpcy5yZW5kZXJRdWV1ZSA9IG5ldyBSZW5kZXJRdWV1ZSgpO1xyXG5cdFx0dGhpcy5nZW9tZXRyeU1lbW9yeSA9IDA7XHJcblx0XHR0aGlzLnRleHR1cmVNZW1vcnkgPSAwO1xyXG5cdFx0dGhpcy5mcmFtZU51bWJlciA9IDA7XHJcblx0XHR0aGlzLl9kZWZpbmVzID0ge307XHJcblx0XHR0aGlzLmRlZmluZXNEaXJ0eSA9IHRydWU7XHJcblx0fVxyXG5cdGdldCBkZWZpbmVzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2RlZmluZXM7XHJcblx0fVxyXG5cdHNldCBkZWZpbmVzKHZhbHVlKSB7XHJcblx0XHR0aGlzLmRlZmluZXNEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLl9kZWZpbmVzID0gY29tYmluZSh2YWx1ZSwgdGhpcy5fZGVmaW5lcywgZmFsc2UpO1xyXG5cdH1cclxuXHR1cGRhdGUoY2FtZXJhOiBDYW1lcmEpIHtcclxuXHRcdHRoaXMucmVuZGVyUXVldWUucmVzZXQoKTtcclxuXHRcdHRoaXMuY3VsbGluZ1ZvbHVtZSA9IGNhbWVyYS5nZXRDdWxsaW5nVm9sdW1lKCk7XHJcblx0XHR0aGlzLmZyYW1lTnVtYmVyICs9IDE7XHJcblx0fVxyXG59XHJcbiIsImZ1bmN0aW9uIGNyZWF0ZUd1aWQoKSB7XHJcbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0XHJcbiAgcmV0dXJuIFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xyXG4gICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMDtcclxuICAgIGNvbnN0IHYgPSBjID09PSBcInhcIiA/IHIgOiAociAmIDB4MykgfCAweDg7XHJcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XHJcbiAgfSk7XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlR3VpZDtcclxuIiwiaW1wb3J0IENhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0NhbWVyYVwiO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gXCIuLi9tZXNoL01lc2hcIjtcbmltcG9ydCBjcmVhdGVHdWlkIGZyb20gXCIuLi91dGlscy9jcmVhdGVHdWlkXCI7XG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuL0ZyYW1lU3RhdGVcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByaW1pdGl2ZU1hbmdlciB7XG5cdHByaXZhdGUgX2xpc3Q6IEFycmF5PE1lc2g+O1xuXHRwcml2YXRlIF9ndWlkOiBhbnk7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuX2xpc3QgPSBbXTtcblx0XHR0aGlzLl9ndWlkID0gY3JlYXRlR3VpZCgpO1xuXHR9XG5cdGdldCBsZW5ndGgoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2xpc3QubGVuZ3RoO1xuXHR9XG5cdHVwZGF0ZShmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBjYW1lcmE6IENhbWVyYSkge1xuXHRcdHRoaXMuX2xpc3QubWFwKChpbnN0YW5jZSkgPT4ge1xuXHRcdFx0aW5zdGFuY2UudXBkYXRlKGZyYW1lU3RhdGUsIGNhbWVyYSk7XG5cdFx0fSk7XG5cdH1cblx0YWRkKGluc3RhbmNlOiBNZXNoLCBpbmRleD86IG51bWJlcikge1xuXHRcdGlmICh0aGlzLmNvbnRhaW5zKGluc3RhbmNlKSkgcmV0dXJuO1xuXHRcdGNvbnN0IGhhc0luZGV4ID0gZGVmaW5lZChpbmRleCk7XG5cdFx0aWYgKCFkZWZpbmVkKGluc3RhbmNlKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW5zdGFuY2UgaXMgcmVxdWlyZWQuXCIpO1xuXHRcdH1cblx0XHRpZiAoaGFzSW5kZXgpIHtcblx0XHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW5kZXggbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gemVyby5cIik7XG5cdFx0XHR9IGVsc2UgaWYgKGluZGV4ID4gdGhpcy5fbGlzdC5sZW5ndGgpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW5kZXggbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG51bWJlciBvZiBwcmltaXRpdmVzLlwiKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgZXh0ZXJuYWwgPSAoaW5zdGFuY2UuX2V4dGVybmFsID0gaW5zdGFuY2UuX2V4dGVybmFsIHx8IHt9KTtcblx0XHRjb25zdCBjb21wb3NpdGVzID0gKGV4dGVybmFsLl9jb21wb3NpdGVzID0gZXh0ZXJuYWwuX2NvbXBvc2l0ZXMgfHwge30pO1xuXHRcdGNvbXBvc2l0ZXNbdGhpcy5fZ3VpZF0gPSB7XG5cdFx0XHRjb2xsZWN0aW9uOiB0aGlzXG5cdFx0fTtcblx0XHRpZiAoIWhhc0luZGV4KSB7XG5cdFx0XHR0aGlzLl9saXN0LnB1c2goaW5zdGFuY2UpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9saXN0LnNwbGljZShpbmRleCwgMCwgaW5zdGFuY2UpO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbnN0YW5jZTtcblx0fVxuXHRyZW1vdmUoaW5zdGFuY2UpIHtcblx0XHRpZiAodGhpcy5jb250YWlucyhpbnN0YW5jZSkpIHtcblx0XHRcdGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdC5pbmRleE9mKGluc3RhbmNlKTtcblx0XHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0dGhpcy5fbGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuXG5cdFx0XHRcdGRlbGV0ZSBpbnN0YW5jZS5fZXh0ZXJuYWwuX2NvbXBvc2l0ZXNbdGhpcy5fZ3VpZF07XG5cdFx0XHRcdGluc3RhbmNlLmRlc3Ryb3koKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRjb250YWlucyhpbnN0YW5jZSkge1xuXHRcdHJldHVybiAhIShcblx0XHRcdGRlZmluZWQoaW5zdGFuY2UpICYmXG5cdFx0XHRpbnN0YW5jZS5fZXh0ZXJuYWwgJiZcblx0XHRcdGluc3RhbmNlLl9leHRlcm5hbC5fY29tcG9zaXRlcyAmJlxuXHRcdFx0aW5zdGFuY2UuX2V4dGVybmFsLl9jb21wb3NpdGVzW3RoaXMuX2d1aWRdXG5cdFx0KTtcblx0fVxufVxuIiwiaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tIFwiLi4vcmVuZGVyL1JlbmRlclRhcmdldC5qc1wiO1xyXG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuLi9tYXRlcmlhbC9NYXRlcmlhbC5qc1wiO1xyXG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi4vcmVuZGVyL0NvbnRleHQuanNcIjtcclxuaW1wb3J0IHsgVGFyZ2V0IH0gZnJvbSBcIi4uL3JlbmRlci9SZW5kZXJTdGF0ZVwiO1xyXG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmUuanNcIjtcclxuaW1wb3J0IFJlbmRlclF1ZXVlIGZyb20gXCIuLi9jb3JlL1JlbmRlclF1ZXVlLmpzXCI7XHJcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4uL2xpZ2h0L0xpZ2h0LmpzXCI7XHJcbmltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi4vY29yZS9GcmFtZVN0YXRlLmpzXCI7XHJcblxyXG5jbGFzcyBQYXNzIHtcclxuXHRwdWJsaWMgcmVuZGVyVGFyZ2V0OiBSZW5kZXJUYXJnZXQ7XHJcblx0cHVibGljIGNvbXB1dGVUYXJnZXQ6IFJlbmRlclRhcmdldDtcclxuXHRwdWJsaWMgY29udGV4dDogQ29udGV4dDtcclxuXHRwdWJsaWMgb3ZlcnJpZGVNYXRlcmlhbD86IE1hdGVyaWFsO1xyXG5cdHB1YmxpYyBjb2xvclRhcmdldHM/OiBBcnJheTxUYXJnZXQ+O1xyXG5cdHB1YmxpYyBwYXNzUmVuZGVyRW5jb2RlcjogR1BVUmVuZGVyUGFzc0VuY29kZXIgfCBudWxsO1xyXG5cdHB1YmxpYyBwYXNzQ29tcHV0ZUVuY29kZXI6IEdQVUNvbXB1dGVQYXNzRW5jb2RlcjtcclxuXHRjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XHJcblx0XHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG5cdH1cclxuXHRyZW5kZXIoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSk6IHZvaWQge31cclxuXHRiZWZvcmVSZW5kZXIoKSB7XHJcblx0XHR0aGlzLnBhc3NSZW5kZXJFbmNvZGVyID0gdGhpcy5yZW5kZXJUYXJnZXQuYmVnaW5SZW5kZXJQYXNzRW5jb2Rlcih0aGlzLmNvbnRleHQpO1xyXG5cdFx0aWYgKHRoaXMuY29tcHV0ZVRhcmdldCkgdGhpcy5wYXNzQ29tcHV0ZUVuY29kZXIgPSB0aGlzLmNvbXB1dGVUYXJnZXQuYmVnaW5Db21wdXRlUGFzc0VuY29kZXIodGhpcy5jb250ZXh0KTtcclxuXHR9XHJcblx0Z2V0Q29sb3JUZXh0dXJlKGluZGV4OiBudW1iZXIgPSAwKTogVGV4dHVyZSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yZW5kZXJUYXJnZXQuZ2V0Q29sb3JUZXh0dXJlKGluZGV4KSBhcyBUZXh0dXJlO1xyXG5cdH1cclxuXHRnZXREZXB0aFRleHR1cmUoKTogVGV4dHVyZSB8IHsgZ3B1VGV4dHVyZTogR1BVVGV4dHVyZSB9IHtcclxuXHRcdHJldHVybiB0aGlzLnJlbmRlclRhcmdldC5nZXREZXB0aFRleHR1cmUoKTtcclxuXHR9XHJcblx0YWZ0ZXJSZW5kZXIoKSB7XHJcblx0XHR0aGlzLnJlbmRlclRhcmdldC5lbmRSZW5kZXJQYXNzRW5jb2RlcigpO1xyXG5cdFx0aWYgKHRoaXMuY29tcHV0ZVRhcmdldCkgdGhpcy5jb21wdXRlVGFyZ2V0LmVuZENvbXB1dGVQYXNzRW5jb2RlcigpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFzcztcclxuIiwiaW1wb3J0IHsgUGFzc1R5cGUgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xuaW1wb3J0IEF0dGFjaG1lbnQgZnJvbSBcIi4vQXR0YWNobWVudFwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vQ29udGV4dFwiO1xuaW1wb3J0IFF1ZXJ5U2V0IGZyb20gXCIuL1F1ZXJ5U2V0XCI7XG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi9UZXh0dXJlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlclRhcmdldCB7XG5cdHB1YmxpYyBjb250ZXh0OiBDb250ZXh0O1xuXHRwcml2YXRlIF9yZW5kZXJQYXNzRGVzY3JpcHRvcjogR1BVUmVuZGVyUGFzc0Rlc2NyaXB0b3I7XG5cdHByaXZhdGUgcmVuZGVyRW5jb2RlcjogR1BVUmVuZGVyUGFzc0VuY29kZXI7XG5cdHByaXZhdGUgY29tbWFuZEVuY29kZXI6IEdQVUNvbW1hbmRFbmNvZGVyIHwgbnVsbDtcblx0cHJpdmF0ZSBjb21wdXRlRW5jb2RlcjogR1BVQ29tcHV0ZVBhc3NFbmNvZGVyO1xuXHR0ZXh0dXJlOiBhbnk7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHB1YmxpYyB0eXBlOiBQYXNzVHlwZSxcblx0XHRwdWJsaWMgY29sb3JBdHRhY2htZW50czogQXR0YWNobWVudFtdLFxuXHRcdHB1YmxpYyBkZXB0aEF0dGFjaG1lbnQ/OiBBdHRhY2htZW50LFxuXHRcdHB1YmxpYyBzdGVuY2lsQXR0YWNobWVudD86IEF0dGFjaG1lbnQsXG5cdFx0cHVibGljIHF1ZXJ5U2V0PzogUXVlcnlTZXRcblx0KSB7XG5cdFx0dGhpcy5yZW5kZXJFbmNvZGVyID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuY29tcHV0ZUVuY29kZXIgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5fcmVuZGVyUGFzc0Rlc2NyaXB0b3IgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5jb21tYW5kRW5jb2RlciA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmNvbnRleHQgPSB1bmRlZmluZWQ7XG5cdH1cblx0Z2V0IHJlbmRlclBhc3NEZXNjcmlwdG9yKCkge1xuXHRcdHRoaXMuX3JlbmRlclBhc3NEZXNjcmlwdG9yID0gdGhpcy5nZXRSZW5kZXJQYXNzRGVzY3JpcHRvcigpO1xuXHRcdHJldHVybiB0aGlzLl9yZW5kZXJQYXNzRGVzY3JpcHRvcjtcblx0fVxuXHRwdWJsaWMgZ2V0Q29sb3JUZXh0dXJlKGluZGV4OiBudW1iZXIgPSAwKTogVGV4dHVyZSB7XG5cdFx0Y29uc3QgY29sQXR0ID0gdGhpcy5jb2xvckF0dGFjaG1lbnRzW2luZGV4XTtcblx0XHRpZiAoY29sQXR0KSB7XG5cdFx0XHRyZXR1cm4gY29sQXR0LnRleHR1cmUgYXMgVGV4dHVyZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9XG5cdHB1YmxpYyBnZXREZXB0aFRleHR1cmUoKTogVGV4dHVyZSB7XG5cdFx0aWYgKHRoaXMuZGVwdGhBdHRhY2htZW50KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kZXB0aEF0dGFjaG1lbnQudGV4dHVyZSBhcyBUZXh0dXJlO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIGdldFJlbmRlclBhc3NEZXNjcmlwdG9yKCk6IEdQVVJlbmRlclBhc3NEZXNjcmlwdG9yIHwgbnVsbCB7XG5cdFx0dGhpcy5jaGVja1NpemUoKTtcblx0XHR0aGlzLmRlcHRoQXR0YWNobWVudD8udGV4dHVyZT8udXBkYXRlKHRoaXMuY29udGV4dCk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLih0aGlzLmNvbG9yQXR0YWNobWVudHMgJiYge1xuXHRcdFx0XHRjb2xvckF0dGFjaG1lbnRzOiB0aGlzLmNvbG9yQXR0YWNobWVudHMubWFwKChjb2xvckF0dGFjaG1lbnQpID0+IHtcblx0XHRcdFx0XHRjb2xvckF0dGFjaG1lbnQ/LnRleHR1cmU/LnVwZGF0ZSAmJiBjb2xvckF0dGFjaG1lbnQ/LnRleHR1cmU/LnVwZGF0ZSh0aGlzLmNvbnRleHQpO1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR2aWV3OlxuXHRcdFx0XHRcdFx0XHQvL+aaguaXtui/meS5iOWGmVxuXHRcdFx0XHRcdFx0XHRjb2xvckF0dGFjaG1lbnQudGV4dHVyZS50ZXh0dXJlVmlldyB8fCB1bmRlZmluZWQsXG5cdFx0XHRcdFx0XHRyZXNvbHZlVGFyZ2V0OlxuXHRcdFx0XHRcdFx0XHRjb2xvckF0dGFjaG1lbnQucmVzb2x2ZVRhcmdldCAhPSB1bmRlZmluZWRcblx0XHRcdFx0XHRcdFx0XHQ/IGNvbG9yQXR0YWNobWVudC5yZXNvbHZlVGFyZ2V0LnRleHR1cmVWaWV3XG5cdFx0XHRcdFx0XHRcdFx0OiB1bmRlZmluZWQsXG5cdFx0XHRcdFx0XHRjbGVhclZhbHVlOiBjb2xvckF0dGFjaG1lbnQudmFsdWUsXG5cdFx0XHRcdFx0XHRsb2FkT3A6IGNvbG9yQXR0YWNobWVudC5vcCxcblx0XHRcdFx0XHRcdHN0b3JlT3A6IGNvbG9yQXR0YWNobWVudC5zdG9yZU9wXG5cdFx0XHRcdFx0fSBhcyBHUFVSZW5kZXJQYXNzQ29sb3JBdHRhY2htZW50O1xuXHRcdFx0XHR9KVxuXHRcdFx0fSksXG5cdFx0XHQuLi4oKHRoaXMuZGVwdGhBdHRhY2htZW50IHx8IHRoaXMuc3RlbmNpbEF0dGFjaG1lbnQpICYmIHtcblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudDoge1xuXHRcdFx0XHRcdHZpZXc6IHRoaXMuZGVwdGhBdHRhY2htZW50Py50ZXh0dXJlPy50ZXh0dXJlVmlldyB8fCB1bmRlZmluZWQsXG5cdFx0XHRcdFx0ZGVwdGhMb2FkT3A6IHRoaXMuZGVwdGhBdHRhY2htZW50Py5vcCB8fCBcImNsZWFyXCIsXG5cdFx0XHRcdFx0ZGVwdGhDbGVhclZhbHVlOiB0aGlzLmRlcHRoQXR0YWNobWVudD8udmFsdWUgfHwgMS4wLFxuXHRcdFx0XHRcdGRlcHRoU3RvcmVPcDogdGhpcy5kZXB0aEF0dGFjaG1lbnQ/LnN0b3JlT3AgfHwgXCJzdG9yZVwiXG5cdFx0XHRcdFx0Ly8gc3RlbmNpbExvYWRPcDogdGhpcy5zdGVuY2lsQXR0YWNobWVudD8ub3AgfHwgXCJjbGVhclwiLFxuXHRcdFx0XHRcdC8vIHN0ZW5jaWxDbGVhclZhbHVlOiB0aGlzLnN0ZW5jaWxBdHRhY2htZW50Py52YWx1ZSB8fCAwLFxuXHRcdFx0XHRcdC8vIHN0ZW5jaWxTdG9yZU9wOiB0aGlzLnN0ZW5jaWxBdHRhY2htZW50Py5zdG9yZU9wIHx8IFwic3RvcmVcIixcblx0XHRcdFx0fSBhcyBHUFVSZW5kZXJQYXNzRGVwdGhTdGVuY2lsQXR0YWNobWVudFxuXHRcdFx0fSlcblx0XHR9O1xuXHR9XG5cblx0cHVibGljIGJlZ2luUmVuZGVyUGFzc0VuY29kZXIoY29udGV4dDogQ29udGV4dCkge1xuXHRcdGlmICghdGhpcy5jb250ZXh0KSB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXHRcdGNvbnN0IHsgZGV2aWNlIH0gPSB0aGlzLmNvbnRleHQ7XG5cdFx0dGhpcy5jb21tYW5kRW5jb2RlciA9IGRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuXHRcdHRoaXMucmVuZGVyRW5jb2RlciA9IHRoaXMuY29tbWFuZEVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKHRoaXMucmVuZGVyUGFzc0Rlc2NyaXB0b3IpO1xuXHRcdHJldHVybiB0aGlzLnJlbmRlckVuY29kZXI7XG5cdH1cblx0cHVibGljIGVuZFJlbmRlclBhc3NFbmNvZGVyKCkge1xuXHRcdHRoaXMucmVuZGVyRW5jb2Rlcj8uZW5kKCk7XG5cdFx0dGhpcy5jb250ZXh0LmRldmljZS5xdWV1ZS5zdWJtaXQoW3RoaXMuY29tbWFuZEVuY29kZXIuZmluaXNoKCldKTtcblx0XHR0aGlzLmNvbW1hbmRFbmNvZGVyID0gbnVsbDtcblx0XHR0aGlzLnJlbmRlckVuY29kZXIgPSBudWxsO1xuXHR9XG5cdHB1YmxpYyBiZWdpbkNvbXB1dGVQYXNzRW5jb2Rlcihjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0aWYgKCF0aGlzLmNvbnRleHQpIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG5cdFx0Y29uc3QgeyBkZXZpY2UgfSA9IHRoaXMuY29udGV4dDtcblx0XHR0aGlzLmNvbW1hbmRFbmNvZGVyID0gZGV2aWNlLmNyZWF0ZUNvbW1hbmRFbmNvZGVyKCk7XG5cdFx0dGhpcy5jb21wdXRlRW5jb2RlciA9IHRoaXMuY29tbWFuZEVuY29kZXIuYmVnaW5Db21wdXRlUGFzcygpO1xuXHRcdHJldHVybiB0aGlzLmNvbXB1dGVFbmNvZGVyO1xuXHR9XG5cdHB1YmxpYyBlbmRDb21wdXRlUGFzc0VuY29kZXIoKSB7XG5cdFx0dGhpcy5jb21wdXRlRW5jb2Rlcj8uZW5kKCk7XG5cdFx0dGhpcy5jb250ZXh0LmRldmljZS5xdWV1ZS5zdWJtaXQoW3RoaXMuY29tbWFuZEVuY29kZXIuZmluaXNoKCldKTtcblx0XHR0aGlzLmNvbW1hbmRFbmNvZGVyID0gbnVsbDtcblx0XHR0aGlzLnJlbmRlckVuY29kZXIgPSBudWxsO1xuXHR9XG5cdHByaXZhdGUgY2hlY2tTaXplKCkge1xuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgZGVwdGggfSA9IHRoaXMuY29udGV4dC5wcmVzZW50YXRpb25TaXplO1xuXHRcdGlmICh0aGlzLmRlcHRoQXR0YWNobWVudC50ZXh0dXJlKSB7XG5cdFx0XHRjb25zdCBzaXplID0gdGhpcy5kZXB0aEF0dGFjaG1lbnQ/LnRleHR1cmU/LnRleHR1cmVQcm9wPy5zaXplO1xuXHRcdFx0aWYgKHdpZHRoICE9IHNpemU/LndpZHRoIHx8IGhlaWdodCAhPSBzaXplPy5oZWlnaHQgfHwgZGVwdGggIT0gc2l6ZT8uZGVwdGgpIHtcblx0XHRcdFx0dGhpcy5kZXB0aEF0dGFjaG1lbnQudGV4dHVyZS5zZXRTaXplKHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHRoaXMuY29sb3JBdHRhY2htZW50cykge1xuXHRcdFx0dGhpcy5jb2xvckF0dGFjaG1lbnRzLmZvckVhY2goKGNvbG9yQXR0YWNobWVudCkgPT4ge1xuXHRcdFx0XHRpZiAoY29sb3JBdHRhY2htZW50LnRleHR1cmUpIHtcblx0XHRcdFx0XHRjb25zdCBzaXplID0gY29sb3JBdHRhY2htZW50Py50ZXh0dXJlPy50ZXh0dXJlUHJvcD8uc2l6ZTtcblx0XHRcdFx0XHRpZiAoc2l6ZSAmJiAod2lkdGggIT0gc2l6ZT8ud2lkdGggfHwgaGVpZ2h0ICE9IHNpemU/LmhlaWdodCB8fCBkZXB0aCAhPSBzaXplPy5kZXB0aCkpXG5cdFx0XHRcdFx0XHRjb2xvckF0dGFjaG1lbnQudGV4dHVyZS5zZXRTaXplKHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdGRlc3Ryb3koKSB7XG5cdFx0aWYgKHRoaXMuY29sb3JBdHRhY2htZW50cykge1xuXHRcdFx0dGhpcy5jb2xvckF0dGFjaG1lbnRzLmZvckVhY2goKGNvbG9yQXR0YWNobWVudCkgPT4ge1xuXHRcdFx0XHRpZiAoY29sb3JBdHRhY2htZW50LnRleHR1cmUpIHtcblx0XHRcdFx0XHRjb2xvckF0dGFjaG1lbnQudGV4dHVyZS5kZXN0cm95KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAodGhpcy5kZXB0aEF0dGFjaG1lbnQudGV4dHVyZSkgdGhpcy5kZXB0aEF0dGFjaG1lbnQudGV4dHVyZS5kZXN0cm95KCk7XG5cdH1cbn1cbiIsImltcG9ydCBBdHRhY2htZW50IGZyb20gXCIuLi9yZW5kZXIvQXR0YWNobWVudFwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4uL3JlbmRlci9Db250ZXh0XCI7XG5pbXBvcnQgUGFzcyBmcm9tIFwiLi9QYXNzXCI7XG5pbXBvcnQgUmVuZGVyVGFyZ2V0IGZyb20gXCIuLi9yZW5kZXIvUmVuZGVyVGFyZ2V0XCI7XG5pbXBvcnQgRHJhd0NvbW1hbmQgZnJvbSBcIi4uL3JlbmRlci9EcmF3Q29tbWFuZFwiO1xuaW1wb3J0IFJlbmRlclF1ZXVlIGZyb20gXCIuLi9jb3JlL1JlbmRlclF1ZXVlXCI7XG5pbXBvcnQgeyBUZXh0dXJlRm9ybWF0LCBUZXh0dXJlVXNhZ2UgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5pbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvQ2FtZXJhXCI7XG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgQmFzaWNQYXNzIGV4dGVuZHMgUGFzcyB7XG5cdHNreWJveERyYXdDb21hbmQ6IERyYXdDb21tYW5kO1xuXHRjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0c3VwZXIoY29udGV4dCk7XG5cdFx0dGhpcy5pbml0KGNvbnRleHQpO1xuXHR9XG5cdHJlbmRlcihmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBjYW1lcmE/OiBDYW1lcmEpIHtcblx0XHRjb25zdCB7IHJlbmRlclF1ZXVlIH0gPSBmcmFtZVN0YXRlO1xuXG5cdFx0cmVuZGVyUXVldWUuc29ydCgpO1xuXHRcdHJlbmRlclF1ZXVlLnByZVJlbmRlcihjYW1lcmEsIHRoaXMuY29udGV4dCwgdGhpcy5wYXNzUmVuZGVyRW5jb2Rlcik7XG5cdFx0cmVuZGVyUXVldWUudHJhbnNwYXJlbnRSZW5kZXIoY2FtZXJhLCB0aGlzLmNvbnRleHQsIHRoaXMucGFzc1JlbmRlckVuY29kZXIpO1xuXHRcdHJlbmRlclF1ZXVlLm9wYXF1ZVJlbmRlcihjYW1lcmEsIHRoaXMuY29udGV4dCwgdGhpcy5wYXNzUmVuZGVyRW5jb2Rlcik7XG5cdH1cblx0cHJpdmF0ZSBpbml0KGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHR0aGlzLmNyZWF0ZVJlbmRlclRhcmdldChjb250ZXh0KTtcblx0fVxuXHRwcml2YXRlIGNyZWF0ZVJlbmRlclRhcmdldChjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0Y29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9ID0gdGhpcy5jb250ZXh0LnByZXNlbnRhdGlvblNpemU7XG5cdFx0Y29uc3QgY29sb3JUZXh0dXJlID0gbmV3IFRleHR1cmUoe1xuXHRcdFx0bGFiZWw6IFwiYmFzaWNQYXNzQ29sb3JcIixcblx0XHRcdHNpemU6IHsgd2lkdGgsIGhlaWdodCwgZGVwdGggfSxcblx0XHRcdGZvcm1hdDogdGhpcy5jb250ZXh0LnByZXNlbnRhdGlvbkZvcm1hdCxcblx0XHRcdHVzYWdlOiBUZXh0dXJlVXNhZ2UuUmVuZGVyQXR0YWNobWVudCB8IFRleHR1cmVVc2FnZS5UZXh0dXJlQmluZGluZ1xuXHRcdH0pO1xuXHRcdGNvbnN0IGRlcHRoVGV4dHVyZSA9IG5ldyBUZXh0dXJlKHtcblx0XHRcdGxhYmVsOiBcImJhc2ljUGFzc0RlcHRoXCIsXG5cdFx0XHRzaXplOiB7IHdpZHRoLCBoZWlnaHQsIGRlcHRoIH0sXG5cdFx0XHRmb3JtYXQ6IFRleHR1cmVGb3JtYXQuRGVwdGgyNFBsdXMsXG5cdFx0XHR1c2FnZTogVGV4dHVyZVVzYWdlLlJlbmRlckF0dGFjaG1lbnRcblx0XHR9KTtcblx0XHRjb25zdCBjb2xvckF0dGFjaG1lbnQgPSBuZXcgQXR0YWNobWVudCh7IHI6IDAuMCwgZzogMC4wLCBiOiAwLjAsIGE6IDAuMCB9LCB7IHRleHR1cmU6IGNvbG9yVGV4dHVyZSB9KTtcblx0XHRjb25zdCBkZXB0aEF0dGFjaG1lbnQgPSBuZXcgQXR0YWNobWVudCgxLjAsIHsgdGV4dHVyZTogZGVwdGhUZXh0dXJlIH0pO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0ID0gbmV3IFJlbmRlclRhcmdldChcInJlbmRlclwiLCBbY29sb3JBdHRhY2htZW50XSwgZGVwdGhBdHRhY2htZW50KTtcblx0fVxufVxuIiwiaW1wb3J0IEF0dGFjaG1lbnQgZnJvbSBcIi4uL3JlbmRlci9BdHRhY2htZW50XCI7XG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi4vcmVuZGVyL0NvbnRleHRcIjtcbmltcG9ydCBQYXNzIGZyb20gXCIuL1Bhc3NcIjtcbmltcG9ydCBSZW5kZXJUYXJnZXQgZnJvbSBcIi4uL3JlbmRlci9SZW5kZXJUYXJnZXRcIjtcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcbmltcG9ydCB7IEJhc2VTaGFkb3cgfSBmcm9tIFwiLi4vbGlnaHQvc2hhZG93cy9CYXNlU2hhZG93XCI7XG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xuaW1wb3J0IFNoYWRlck1hdGVyaWFsIGZyb20gXCIuLi9tYXRlcmlhbC9TaGFkZXJNYXRlcmlhbFwiO1xuaW1wb3J0IGdldFZlcnRGcmFnIGZyb20gXCIuLi9zaGFkZXIvU2hhZGVyc1wiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5pbXBvcnQgeyBDb21tYW5kU3ViVHlwZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5leHBvcnQgY2xhc3MgU2hhZG93UGFzcyBleHRlbmRzIFBhc3Mge1xuXHRwdWJsaWMgc2hhZG93TWF0ZXJpYWw6IFNoYWRlck1hdGVyaWFsO1xuXHRfdGVzdFRleHR1cmU6IFRleHR1cmU7XG5cdGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHRzdXBlcihjb250ZXh0KTtcblx0XHR0aGlzLmluaXQoY29udGV4dCk7XG5cdH1cblx0cmVuZGVyKGZyYW1lU3RhdGU6IEZyYW1lU3RhdGUsIGNhbWVyYT86IENhbWVyYSkge1xuXHRcdGNvbnN0IHsgcmVuZGVyUXVldWUsIGNvbnRleHQgfSA9IGZyYW1lU3RhdGU7XG5cdFx0Y29uc3QgbGlnaHRzID0gY29udGV4dC5saWdodE1hbmdlci5nZXRBbGxMaWdodHMoKTtcblx0XHRpZiAobGlnaHRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaWdodHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGxpZ2h0ID0gbGlnaHRzW2ldO1xuXHRcdFx0Y29uc3Qgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXHRcdFx0aWYgKCFzaGFkb3cpIGNvbnRpbnVlO1xuXHRcdFx0Ly8gdGhpcy5fdGVzdFRleHR1cmUgPSBjb250ZXh0LmxpZ2h0TWFuZ2VyLl90ZXN0VGV4dHVyZVxuXHRcdFx0dGhpcy5zZXRSZW5kZXJUYXJnZXQoc2hhZG93KTtcblx0XHRcdHN1cGVyLmJlZm9yZVJlbmRlcigpO1xuXG5cdFx0XHRyZW5kZXJRdWV1ZS5zb3J0KCk7XG5cdFx0XHQvLyByZW5kZXJRdWV1ZS5wcmVSZW5kZXIoc2hhZG93LmNhbWVyYSwgdGhpcy5jb250ZXh0LCB0aGlzLnBhc3NSZW5kZXJFbmNvZGVyKTtcblx0XHRcdHJlbmRlclF1ZXVlLnRyYW5zcGFyZW50UmVuZGVyKFxuXHRcdFx0XHRzaGFkb3cuY2FtZXJhLFxuXHRcdFx0XHR0aGlzLmNvbnRleHQsXG5cdFx0XHRcdHRoaXMucGFzc1JlbmRlckVuY29kZXIsXG5cdFx0XHRcdHRoaXMuc2hhZG93TWF0ZXJpYWwsXG5cdFx0XHRcdENvbW1hbmRTdWJUeXBlLlNoYWRvd1xuXHRcdFx0KTtcblx0XHRcdHJlbmRlclF1ZXVlLm9wYXF1ZVJlbmRlcihcblx0XHRcdFx0c2hhZG93LmNhbWVyYSxcblx0XHRcdFx0dGhpcy5jb250ZXh0LFxuXHRcdFx0XHR0aGlzLnBhc3NSZW5kZXJFbmNvZGVyLFxuXHRcdFx0XHR0aGlzLnNoYWRvd01hdGVyaWFsLFxuXHRcdFx0XHRDb21tYW5kU3ViVHlwZS5TaGFkb3dcblx0XHRcdCk7XG5cdFx0XHRzdXBlci5hZnRlclJlbmRlcigpO1xuXHRcdH1cblx0XHRjb250ZXh0LmxpZ2h0TWFuZ2VyLnVwZGF0ZUxpZ2h0U2hhZG93KCk7XG5cdH1cblxuXHQvLyBnZXREZXB0aFRleHR1cmUoKTogVGV4dHVyZSB7XG5cdC8vIFx0cmV0dXJuIHRoaXMuX3Rlc3RUZXh0dXJlO1xuXHQvLyB9XG5cblx0cHJpdmF0ZSBzZXRSZW5kZXJUYXJnZXQoc2hhZG93OiBCYXNlU2hhZG93KSB7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQuZGVwdGhBdHRhY2htZW50LnRleHR1cmUgPSBzaGFkb3cuZ2V0U2hhZG93TWFwVGV4dHVyZSgpO1xuXHR9XG5cblx0cHJpdmF0ZSBpbml0KGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHR0aGlzLmNyZWF0ZVJlbmRlclRhcmdldChjb250ZXh0KTtcblx0XHR0aGlzLmNyZWF0ZVNoYWRvd01hdGVyaWFsKCk7XG5cdH1cblx0cHJpdmF0ZSBjcmVhdGVSZW5kZXJUYXJnZXQoY29udGV4dDogQ29udGV4dCkge1xuXHRcdGNvbnN0IGRlcHRoQXR0YWNobWVudCA9IG5ldyBBdHRhY2htZW50KDEuMCwgeyB0ZXh0dXJlOiB1bmRlZmluZWQgfSk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQgPSBuZXcgUmVuZGVyVGFyZ2V0KFwicmVuZGVyXCIsIFtdLCBkZXB0aEF0dGFjaG1lbnQpO1xuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVTaGFkb3dNYXRlcmlhbCgpIHtcblx0XHRjb25zdCBjb2xvclNoYWRlciA9IGdldFZlcnRGcmFnKFwiY29sb3JcIiwge1xuXHRcdFx0Y29sb3JCaW5kaW5nOiAwLFxuXHRcdFx0Y2FtZXJhQmluZGluZzogMCxcblx0XHRcdHBvc2l0aW9uTG9jYXRpb246IDAsXG5cdFx0XHRjb2xvckxvY2F0aW9uOiAxXG5cdFx0fSk7XG5cdFx0dGhpcy5zaGFkb3dNYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCh7XG5cdFx0XHR0eXBlOiBcInNoYWRvd01hdGVyaWFsXCIsXG5cdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHRtb2RlbE1hdHJpeDogeyB0eXBlOiBcIm1hdDRcIiwgdmFsdWU6IG51bGwgfVxuXHRcdFx0fSxcblx0XHRcdHZlcnQ6IGNvbG9yU2hhZGVyLnZlcnQsXG5cdFx0XHRmcmFnOiB1bmRlZmluZWQsXG5cdFx0XHRsaWdodDogdHJ1ZVxuXHRcdH0pO1xuXHR9XG59XG4iLCJpbXBvcnQgQ29udGV4dCBmcm9tIFwiLi4vcmVuZGVyL0NvbnRleHRcIjtcclxuaW1wb3J0IHsgQmFzaWNQYXNzIH0gZnJvbSBcIi4uL3Bhc3MvQmFzaWNQYXNzXCI7XHJcbmltcG9ydCBJQmFzZVJlbmRlckxpbmUgZnJvbSBcIi4vSUJhc2VSZW5kZXJMaW5lXCI7XHJcbmltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi4vY29yZS9GcmFtZVN0YXRlXCI7XHJcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcclxuaW1wb3J0IHsgU2hhZG93UGFzcyB9IGZyb20gXCIuLi9wYXNzL1NoYWRvd1Bhc3NcIjtcclxuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3J3YXJkUmVuZGVyTGluZSBpbXBsZW1lbnRzIElCYXNlUmVuZGVyTGluZSB7XHJcblx0cHJpdmF0ZSBiYXNpY1Bhc3M6IEJhc2ljUGFzcztcclxuXHRwcm90ZWN0ZWQgc2hhZG93UGFzczogU2hhZG93UGFzcztcclxuXHRjb25zdHJ1Y3RvcihwdWJsaWMgY29udGV4dDogQ29udGV4dCkge1xyXG5cdFx0dGhpcy5iYXNpY1Bhc3MgPSBuZXcgQmFzaWNQYXNzKGNvbnRleHQpO1xyXG5cdFx0dGhpcy5zaGFkb3dQYXNzID0gbmV3IFNoYWRvd1Bhc3MoY29udGV4dCk7XHJcblx0XHQvLyBjb25zdCBibG9vbT1uZXcgQmxvb21Qb3N0RWZmZWN0KHtcclxuXHRcdC8vIFx0d2lkdGgsXHJcblx0XHQvLyBcdGhlaWdodCxcclxuXHRcdC8vIFx0c3RyZW5ndGg6MC4zLFxyXG5cdFx0Ly8gXHRyYWRpdXM6MC4zLFxyXG5cdFx0Ly8gXHR0aHJlc2hvbGQ6MC41XHJcblx0XHQvLyB9KTtcclxuXHRcdC8vIHRoaXMucG9zdEVmZmVjdENvbGxlY3Rpb24uYWRkKGJsb29tKVxyXG5cdH1cclxuXHRnZXRPdXRwdXRUZXh0dXJlKCk6IFRleHR1cmUge1xyXG5cdFx0cmV0dXJuIHRoaXMuYmFzaWNQYXNzLmdldENvbG9yVGV4dHVyZSgwKTtcclxuXHRcdC8vIHJldHVybiB0aGlzLnNoYWRvd1Bhc3MuZ2V0RGVwdGhUZXh0dXJlKClcclxuXHR9XHJcblx0cmVuZGVyKGZyYW1lU3RhdGU6IEZyYW1lU3RhdGUsIGNhbWVyYT86IENhbWVyYSkge1xyXG5cdFx0dGhpcy5zaGFkb3dQYXNzLnJlbmRlcihmcmFtZVN0YXRlLCBjYW1lcmEpO1xyXG5cclxuXHRcdHRoaXMuYmFzaWNQYXNzLmJlZm9yZVJlbmRlcigpO1xyXG5cdFx0dGhpcy5iYXNpY1Bhc3MucmVuZGVyKGZyYW1lU3RhdGUsIGNhbWVyYSk7XHJcblx0XHR0aGlzLmJhc2ljUGFzcy5hZnRlclJlbmRlcigpO1xyXG5cdH1cclxuXHRkZXN0cm95KCkge1xyXG5cdFx0dGhpcy5iYXNpY1Bhc3MgPSB1bmRlZmluZWQ7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCB7IFRleHR1cmVGb3JtYXQsIFRleHR1cmVVc2FnZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5pbXBvcnQgR2VvbWV0cnkgZnJvbSBcIi4uL2dlb21ldHJ5L0dlb21ldHJ5XCI7XG5pbXBvcnQgU2hhZGVyTWF0ZXJpYWwgZnJvbSBcIi4uL21hdGVyaWFsL1NoYWRlck1hdGVyaWFsXCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xuaW1wb3J0IEF0dGFjaG1lbnQgZnJvbSBcIi4uL3JlbmRlci9BdHRhY2htZW50XCI7XG5pbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuLi9yZW5kZXIvQ29udGV4dFwiO1xuaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tIFwiLi4vcmVuZGVyL1JlbmRlclRhcmdldFwiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4uL3JlbmRlci9TYW1wbGVyXCI7XG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcbmltcG9ydCBnZXRWZXJ0RnJhZyBmcm9tIFwiLi4vc2hhZGVyL1NoYWRlcnNcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc29sdmVGcmFtZSB7XG5cdGNhbnZhc1JlbmRlclRhcmdldDogUmVuZGVyVGFyZ2V0O1xuXHRtYXRlcmlhbDogU2hhZGVyTWF0ZXJpYWw7XG5cdGdlb21ldHJ5OiBHZW9tZXRyeTtcblx0cXVhZE1lc2g6IE1lc2g7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnkoe30pO1xuXHRcdHRoaXMuZ2VvbWV0cnkuc2V0QXR0cmlidXRlKFxuXHRcdFx0bmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBbLTEuMCwgMS4wLCAtMS4wLCAtMS4wLCAxLjAsIC0xLjAsIDEuMCwgLTEuMCwgMS4wLCAxLjAsIC0xLjAsIDEuMF0sIDIpXG5cdFx0KTtcblx0XHR0aGlzLmdlb21ldHJ5LmNvdW50ID0gNjtcblx0XHRjb25zdCBzaGFkZXIgPSBnZXRWZXJ0RnJhZyhcInJlc29sdmVcIiwgeyBwb3NpdGlvbkxvY2F0aW9uOiAwIH0pO1xuXHRcdHRoaXMubWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoe1xuXHRcdFx0dHlwZTogXCJyZXNvbHZlXCIsXG5cdFx0XHRmcmFnOiBzaGFkZXIuZnJhZyxcblx0XHRcdHZlcnQ6IHNoYWRlci52ZXJ0LFxuXHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0dGV4dHVyZToge1xuXHRcdFx0XHRcdHR5cGU6IFwidGV4dHVyZVwiLFxuXHRcdFx0XHRcdHZhbHVlOiB1bmRlZmluZWRcblx0XHRcdFx0fSxcblx0XHRcdFx0c2FtcGxlcjoge1xuXHRcdFx0XHRcdHR5cGU6IFwic2FtcGxlclwiLFxuXHRcdFx0XHRcdHZhbHVlOiBuZXcgU2FtcGxlcih7XG5cdFx0XHRcdFx0XHRtYWdGaWx0ZXI6IFwibGluZWFyXCIsXG5cdFx0XHRcdFx0XHRtaW5GaWx0ZXI6IFwibGluZWFyXCJcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dGhpcy5xdWFkTWVzaCA9IG5ldyBNZXNoKHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwpO1xuXHR9XG5cdHJlbmRlcihjb250ZXh0OiBDb250ZXh0LCBjb2xvclRleHR1cmU/OiBUZXh0dXJlKSB7XG5cdFx0aWYgKCF0aGlzLmNhbnZhc1JlbmRlclRhcmdldCkgdGhpcy5pbml0UmVuZGVyVGFyZ2V0KGNvbnRleHQpO1xuXHRcdC8vIHRoaXMubWF0ZXJpYWxcblx0XHR0aGlzLm1hdGVyaWFsLnVuaWZvcm1zLnRleHR1cmUudmFsdWUgPSBjb2xvclRleHR1cmU7XG5cdFx0Ly9AdHMtaWdub3JlXG5cdFx0dGhpcy5jYW52YXNSZW5kZXJUYXJnZXQuY29sb3JBdHRhY2htZW50c1swXS50ZXh0dXJlID0ge1xuXHRcdFx0dGV4dHVyZVZpZXc6IGNvbnRleHQuY29udGV4dC5nZXRDdXJyZW50VGV4dHVyZSgpLmNyZWF0ZVZpZXcoKVxuXHRcdH07XG5cdFx0dGhpcy5tYXRlcmlhbC51cGRhdGUodW5kZWZpbmVkLCB0aGlzLnF1YWRNZXNoKTtcblxuXHRcdGNvbnN0IGRyYXdDb21hbmQgPSB0aGlzLnF1YWRNZXNoLmdldERyYXdDb21tYW5kKCk7XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyUGFzc0VuY29kZXIgPSB0aGlzLmNhbnZhc1JlbmRlclRhcmdldC5iZWdpblJlbmRlclBhc3NFbmNvZGVyKGNvbnRleHQpO1xuXG5cdFx0Y29udGV4dC5yZW5kZXIoZHJhd0NvbWFuZCwgY3VycmVudFJlbmRlclBhc3NFbmNvZGVyKTtcblxuXHRcdHRoaXMuY2FudmFzUmVuZGVyVGFyZ2V0LmVuZFJlbmRlclBhc3NFbmNvZGVyKCk7XG5cdH1cblx0cHJpdmF0ZSBpbml0UmVuZGVyVGFyZ2V0KGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGRlcHRoIH0gPSBjb250ZXh0LnByZXNlbnRhdGlvblNpemU7XG5cdFx0Y29uc3QgY29sb3JBdHRhY2htZW50ID0gbmV3IEF0dGFjaG1lbnQoXG5cdFx0XHR7IHI6IDAuMCwgZzogMC4wLCBiOiAwLjAsIGE6IDAgfSxcblx0XHRcdHtcblx0XHRcdFx0Ly9AdHMtaWdub3JlXG5cdFx0XHRcdHRleHR1cmU6IHtcblx0XHRcdFx0XHR0ZXh0dXJlVmlldzogdW5kZWZpbmVkXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHRcdGNvbnN0IGRlcHRoVGV4dHVyZSA9IG5ldyBUZXh0dXJlKHtcblx0XHRcdGxhYmVsOiBcInJlc29sdmVEZXB0aFwiLFxuXHRcdFx0c2l6ZTogeyB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9LFxuXHRcdFx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0LkRlcHRoMjRQbHVzLFxuXHRcdFx0dXNhZ2U6IFRleHR1cmVVc2FnZS5SZW5kZXJBdHRhY2htZW50XG5cdFx0fSk7XG5cdFx0Y29uc3QgZGVwdGhBdHRhY2htZW50ID0gbmV3IEF0dGFjaG1lbnQoMS4wLCB7IHRleHR1cmU6IGRlcHRoVGV4dHVyZSB9KTtcblx0XHR0aGlzLmNhbnZhc1JlbmRlclRhcmdldCA9IG5ldyBSZW5kZXJUYXJnZXQoXCJyZW5kZXJcIiwgW2NvbG9yQXR0YWNobWVudF0sIGRlcHRoQXR0YWNobWVudCk7XG5cdH1cbn1cbiIsImltcG9ydCBDb250ZXh0IGZyb20gXCIuLi9yZW5kZXIvQ29udGV4dFwiO1xyXG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcclxuaW1wb3J0IFBvc3RFZmZlY3QgZnJvbSBcIi4vUG9zdEVmZmVjdFwiO1xyXG5pbXBvcnQgUmVzb2x2ZUZyYW1lIGZyb20gXCIuL1Jlc29sdmVGcmFtZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdEVmZmVjdENvbGxlY3Rpb24ge1xyXG5cdHByaXZhdGUgX3Bvc3RFZmZlY3RzOiBNYXA8c3RyaW5nLCBQb3N0RWZmZWN0PjtcclxuXHRwdWJsaWMgY3VycmVudENvbG9yVGV4dHVyZTogVGV4dHVyZTtcclxuXHRwcml2YXRlIHJlc29sdmVGcmFtZTogUmVzb2x2ZUZyYW1lO1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5fcG9zdEVmZmVjdHMgPSBuZXcgTWFwKCk7XHJcblx0XHR0aGlzLmN1cnJlbnRDb2xvclRleHR1cmUgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLnJlc29sdmVGcmFtZSA9IG5ldyBSZXNvbHZlRnJhbWUoKTtcclxuXHR9XHJcblx0YWRkKHBvc3RFZmZlY3Q6IFBvc3RFZmZlY3QpIHtcclxuXHRcdHRoaXMuX3Bvc3RFZmZlY3RzLnNldChwb3N0RWZmZWN0LmlkLCBwb3N0RWZmZWN0KTtcclxuXHR9XHJcblx0cmVtb3ZlKHBvc3RFZmZlY3Q6IFBvc3RFZmZlY3QpIHtcclxuXHRcdHRoaXMuX3Bvc3RFZmZlY3RzLmRlbGV0ZShwb3N0RWZmZWN0LmlkKTtcclxuXHRcdHBvc3RFZmZlY3QuZGVzdHJveSgpO1xyXG5cdH1cclxuXHRyZW5kZXIoY29udGV4dDogQ29udGV4dCwgY29sb3JUZXh0dXJlOiBUZXh0dXJlKTogdm9pZCB7XHJcblx0XHR0aGlzLmN1cnJlbnRDb2xvclRleHR1cmUgPSBjb2xvclRleHR1cmU7XHJcblx0XHR0aGlzLl9wb3N0RWZmZWN0cy5mb3JFYWNoKChwb3N0RWZmZWN0KSA9PiB7XHJcblx0XHRcdHRoaXMuY3VycmVudENvbG9yVGV4dHVyZSA9IHBvc3RFZmZlY3QucmVuZGVyKGNvbnRleHQsIHRoaXMuY3VycmVudENvbG9yVGV4dHVyZSk7XHJcblx0XHR9KTtcclxuXHRcdHRoaXMucmVzb2x2ZUZyYW1lLnJlbmRlcihjb250ZXh0LCB0aGlzLmN1cnJlbnRDb2xvclRleHR1cmUpO1xyXG5cdH1cclxuXHRzZXRSZXNvbHZlRnJhbWVEaXJ0eSh2YWx1ZTogYm9vbGVhbikge1xyXG5cdFx0dGhpcy5yZXNvbHZlRnJhbWUubWF0ZXJpYWwuZGlydHkgPSB2YWx1ZTtcclxuXHR9XHJcblx0cHJpdmF0ZSBwb3N0RWZmZWN0c1NvcnQoKSB7XHJcblx0XHQvL3RoaXMuX3Bvc3RFZmZlY3RzLnNvcnQoKVxyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgUGVyc3BlY3RpdmVDYW1lcmEgZnJvbSBcIi4vY2FtZXJhL1BlcnNwZWN0aXZlQ2FtZXJhXCI7XHJcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCIuL2NvcmUvRXZlbnREaXNwYXRjaGVyXCI7XHJcbmltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi9jb3JlL0ZyYW1lU3RhdGVcIjtcclxuaW1wb3J0IFByaW1pdGl2ZU1hbmdlciBmcm9tIFwiLi9jb3JlL1ByaW1pdGl2ZU1hbmdlclwiO1xyXG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9yZW5kZXIvQ29udGV4dFwiO1xyXG5pbXBvcnQgRm9yd2FyZFJlbmRlckxpbmUgZnJvbSBcIi4vcmVuZGVycGlwZWxpbmUvRm9yd2FyZFJlbmRlckxpbmVcIjtcclxuaW1wb3J0IElCYXNlUmVuZGVyTGluZSBmcm9tIFwiLi9yZW5kZXJwaXBlbGluZS9JQmFzZVJlbmRlckxpbmVcIjtcclxuaW1wb3J0IHRleHR1cmVDYWNoZSBmcm9tIFwiLi9jb3JlL1RleHR1cmVDYWNoZVwiO1xyXG5pbXBvcnQgUG9zdEVmZmVjdENvbGxlY3Rpb24gZnJvbSBcIi4vcG9zdC1wcm9jZXNzL1Bvc3RFZmZlY3RDb2xsZWN0aW9uXCI7XHJcbmltcG9ydCBQb3N0RWZmZWN0IGZyb20gXCIuL3Bvc3QtcHJvY2Vzcy9Qb3N0RWZmZWN0XCI7XHJcbmltcG9ydCB7IEluc3RhbmNlIH0gZnJvbSBcIi4vY29yZS9XZWJHUFVUeXBlc1wiO1xyXG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4vbWVzaC9NZXNoXCI7XHJcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4vbGlnaHQvTGlnaHRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTY2VuZSBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XHJcblx0Y2FtZXJhOiBQZXJzcGVjdGl2ZUNhbWVyYTtcclxuXHRjb250ZXh0OiBDb250ZXh0O1xyXG5cdHJlcXVlc3RBZGFwdGVyOiB7fTtcclxuXHRkZXZpY2VEZXNjcmlwdG9yOiB7fTtcclxuXHRwcmVzZW50YXRpb25Db250ZXh0RGVzY3JpcHRvcjoge307XHJcblx0Y29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcclxuXHRmcmFtZVN0YXRlOiBGcmFtZVN0YXRlO1xyXG5cdGN1cnJlbnRSZW5kZXJQaXBlbGluZTogSUJhc2VSZW5kZXJMaW5lO1xyXG5cdHZpZXdwb3J0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9O1xyXG5cdHByaXZhdGUgcmVhZHk6IGJvb2xlYW47XHJcblx0cHJpdmF0ZSBpbml0ZWQ6IGJvb2xlYW47XHJcblx0cHJpdmF0ZSBwcmltaXRpdmVNYW5nZXI6IFByaW1pdGl2ZU1hbmdlcjtcclxuXHRwcml2YXRlIHBvc3RFZmZlY3RDb2xsZWN0aW9uOiBQb3N0RWZmZWN0Q29sbGVjdGlvbjtcclxuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5jb250YWluZXIgPVxyXG5cdFx0XHRvcHRpb25zLmNvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxEaXZFbGVtZW50XHJcblx0XHRcdFx0PyBvcHRpb25zLmNvbnRhaW5lclxyXG5cdFx0XHRcdDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5jb250YWluZXIpO1xyXG5cdFx0dGhpcy5wcmltaXRpdmVNYW5nZXIgPSBuZXcgUHJpbWl0aXZlTWFuZ2VyKCk7XHJcblx0XHR0aGlzLnBvc3RFZmZlY3RDb2xsZWN0aW9uID0gbmV3IFBvc3RFZmZlY3RDb2xsZWN0aW9uKCk7XHJcblx0XHR0aGlzLmNvbnRleHQgPSBuZXcgQ29udGV4dCh7XHJcblx0XHRcdGNhbnZhczogbnVsbCxcclxuXHRcdFx0Y29udGFpbmVyOiB0aGlzLmNvbnRhaW5lcixcclxuXHRcdFx0cGl4ZWxSYXRpbzogMVxyXG5cdFx0fSk7XHJcblx0XHR0aGlzLnJlcXVlc3RBZGFwdGVyID0gb3B0aW9ucy5yZXF1ZXN0QWRhcHRlciB8fCB7fTtcclxuXHRcdHRoaXMuZGV2aWNlRGVzY3JpcHRvciA9IG9wdGlvbnMuZGV2aWNlRGVzY3JpcHRvciB8fCB7fTtcclxuXHRcdHRoaXMucHJlc2VudGF0aW9uQ29udGV4dERlc2NyaXB0b3IgPSBvcHRpb25zLnByZXNlbnRhdGlvbkNvbnRleHREZXNjcmlwdG9yO1xyXG5cdFx0dGhpcy5yZWFkeSA9IGZhbHNlO1xyXG5cdFx0dGhpcy5pbml0ZWQgPSBmYWxzZTtcclxuXHR9XHJcblx0cHJpdmF0ZSBhc3luYyBpbml0KCkge1xyXG5cdFx0YXdhaXQgdGhpcy5jb250ZXh0LmluaXQodGhpcy5yZXF1ZXN0QWRhcHRlciwgdGhpcy5kZXZpY2VEZXNjcmlwdG9yLCB0aGlzLnByZXNlbnRhdGlvbkNvbnRleHREZXNjcmlwdG9yKTtcclxuXHRcdHRoaXMuY3VycmVudFJlbmRlclBpcGVsaW5lID0gbmV3IEZvcndhcmRSZW5kZXJMaW5lKHRoaXMuY29udGV4dCk7XHJcblx0XHR0aGlzLmZyYW1lU3RhdGUgPSBuZXcgRnJhbWVTdGF0ZSh0aGlzLmNvbnRleHQpO1xyXG5cdFx0dGhpcy52aWV3cG9ydCA9IHtcclxuXHRcdFx0eDogMCxcclxuXHRcdFx0eTogMCxcclxuXHRcdFx0d2lkdGg6IHRoaXMuY29udGV4dC5wcmVzZW50YXRpb25TaXplLndpZHRoLFxyXG5cdFx0XHRoZWlnaHQ6IHRoaXMuY29udGV4dC5wcmVzZW50YXRpb25TaXplLmhlaWdodFxyXG5cdFx0fTtcclxuXHRcdHRoaXMucmVhZHkgPSB0cnVlO1xyXG5cdH1cclxuXHRhZGQoaW5zdGFuY2U6IEluc3RhbmNlKSB7XHJcblx0XHRpZiAoKGluc3RhbmNlIGFzIE1lc2gpPy5pc01lc2gpIHtcclxuXHRcdFx0dGhpcy5wcmltaXRpdmVNYW5nZXIuYWRkKDxNZXNoPmluc3RhbmNlKTtcclxuXHRcdH0gZWxzZSBpZiAoKGluc3RhbmNlIGFzIExpZ2h0KT8uaXNMaWdodCkge1xyXG5cdFx0XHR0aGlzLmNvbnRleHQubGlnaHRNYW5nZXIuYWRkKDxMaWdodD5pbnN0YW5jZSk7XHJcblx0XHR9IGVsc2UgaWYgKChpbnN0YW5jZSBhcyBQb3N0RWZmZWN0KT8uaXNQb3N0RWZmZWN0KSB7XHJcblx0XHRcdHRoaXMucG9zdEVmZmVjdENvbGxlY3Rpb24uYWRkKDxQb3N0RWZmZWN0Pmluc3RhbmNlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmVtb3ZlKGluc3RhbmNlOiBJbnN0YW5jZSkge1xyXG5cdFx0aWYgKChpbnN0YW5jZSBhcyBNZXNoKT8uaXNNZXNoKSB7XHJcblx0XHRcdHRoaXMucHJpbWl0aXZlTWFuZ2VyLnJlbW92ZSg8TWVzaD5pbnN0YW5jZSk7XHJcblx0XHR9IGVsc2UgaWYgKChpbnN0YW5jZSBhcyBMaWdodCk/LmlzTGlnaHQpIHtcclxuXHRcdFx0dGhpcy5jb250ZXh0LmxpZ2h0TWFuZ2VyLnJlbW92ZSg8TGlnaHQ+aW5zdGFuY2UpO1xyXG5cdFx0fSBlbHNlIGlmICgoaW5zdGFuY2UgYXMgUG9zdEVmZmVjdCk/LmlzUG9zdEVmZmVjdCkge1xyXG5cdFx0XHR0aGlzLnBvc3RFZmZlY3RDb2xsZWN0aW9uLnJlbW92ZSg8UG9zdEVmZmVjdD5pbnN0YW5jZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHNldENhbWVyYShjYW1lcmEpIHtcclxuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xyXG5cdH1cclxuXHRyZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuXHRcdHRoaXMuY29udGV4dC5yZXNpemUod2lkdGgsIGhlaWdodCk7XHJcblx0XHR0aGlzLnBvc3RFZmZlY3RDb2xsZWN0aW9uLnNldFJlc29sdmVGcmFtZURpcnR5KHRydWUpO1xyXG5cdH1cclxuXHRhc3luYyByZW5kZXIoKSB7XHJcblx0XHRpZiAoIXRoaXMuaW5pdGVkKSB7XHJcblx0XHRcdHRoaXMuaW5pdGVkID0gdHJ1ZTtcclxuXHRcdFx0YXdhaXQgdGhpcy5pbml0KCk7XHJcblx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRwcml2YXRlIHVwZGF0ZSgpIHtcclxuXHRcdGlmICghdGhpcy5yZWFkeSkgcmV0dXJuO1xyXG5cdFx0Ly/ph4rmlL7nurnnkIZcclxuXHRcdHRleHR1cmVDYWNoZS5yZWxlYXNlZFRleHR1cmVzKCk7XHJcblx0XHQvL+abtOaWsOebuOaculxyXG5cdFx0dGhpcy5mcmFtZVN0YXRlLnZpZXdwb3J0ID0gdGhpcy52aWV3cG9ydDtcclxuXHRcdHRoaXMuZnJhbWVTdGF0ZS51cGRhdGUodGhpcy5jYW1lcmEpO1xyXG5cdFx0Ly/mm7TmlrDnga/lhYlcclxuXHRcdHRoaXMuY29udGV4dC5saWdodE1hbmdlci51cGRhdGUodGhpcy5mcmFtZVN0YXRlLCB0aGlzLmNhbWVyYSk7XHJcblx0XHQvL3VwZGF0ZSBwcmltaXRpdmUgYW5kIHNlbGVjdFxyXG5cdFx0dGhpcy5wcmltaXRpdmVNYW5nZXIudXBkYXRlKHRoaXMuZnJhbWVTdGF0ZSwgdGhpcy5jYW1lcmEpO1xyXG5cdFx0Ly9zZWxjdCByZW5kZXJQaXBlbGluZVxyXG5cdFx0dGhpcy5jdXJyZW50UmVuZGVyUGlwZWxpbmUucmVuZGVyKHRoaXMuZnJhbWVTdGF0ZSwgdGhpcy5jYW1lcmEpO1xyXG5cdFx0Ly/lkI7lpITnkIZcclxuXHRcdHRoaXMucG9zdEVmZmVjdENvbGxlY3Rpb24ucmVuZGVyKHRoaXMuY29udGV4dCwgdGhpcy5jdXJyZW50UmVuZGVyUGlwZWxpbmUuZ2V0T3V0cHV0VGV4dHVyZSgpKTtcclxuXHR9XHJcbn1cclxuIiwiaW1wb3J0IEdlb21ldHJ5IGZyb20gXCIuLi9nZW9tZXRyeS9HZW9tZXRyeVwiO1xyXG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xyXG5pbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcclxuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4uL3JlbmRlci9Db250ZXh0XCI7XHJcbmltcG9ydCB7IFByaW1pdGl2ZSwgUmVuZGVyU3RhdGUsIFRhcmdldCB9IGZyb20gXCIuLi9yZW5kZXIvUmVuZGVyU3RhdGVcIjtcclxuaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tIFwiLi4vcmVuZGVyL1JlbmRlclRhcmdldFwiO1xyXG5pbXBvcnQgU2FtcGxlciBmcm9tIFwiLi4vcmVuZGVyL1NhbXBsZXJcIjtcclxuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0RWZmZWN0IHtcclxuXHR3aWR0aDogbnVtYmVyO1xyXG5cclxuXHRoZWlnaHQ6IG51bWJlcjtcclxuXHJcblx0ZGVmYXVsdFNhbXBsZXI6IFNhbXBsZXI7XHJcblxyXG5cdHJlc29sdmVUb0NhbnZhczogYm9vbGVhbjtcclxuXHJcblx0Y3VycmVudFJlbmRlclRhcmdldDogUmVuZGVyVGFyZ2V0O1xyXG5cclxuXHRmdWxsU2NyZWVuUXVhZDogTWVzaDtcclxuXHJcblx0cmVuZGVyU3RhdGU6IFJlbmRlclN0YXRlO1xyXG5cclxuXHRpZDogc3RyaW5nO1xyXG5cclxuXHRwcmlvcml0eTogbnVtYmVyO1xyXG5cclxuXHRpc1Bvc3RFZmZlY3Q6IGJvb2xlYW47XHJcblxyXG5cdGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBpZDogc3RyaW5nKSB7XHJcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XHJcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuXHRcdHRoaXMuaW5pdERlZmF1bHRQYXJtcygpO1xyXG5cdFx0dGhpcy5pZCA9IGlkO1xyXG5cdFx0dGhpcy5wcmlvcml0eSA9IDA7XHJcblx0XHR0aGlzLmlzUG9zdEVmZmVjdCA9IHRydWU7XHJcblx0fVxyXG5cdHJlbmRlcihjb250ZXh0OiBDb250ZXh0LCBjb2xvclRleHR1cmU6IFRleHR1cmUpOiBUZXh0dXJlIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHRkZXN0cm95KCkge31cclxuXHRwcm90ZWN0ZWQgcmVuZGVyTWVzaChjb250ZXh0OiBDb250ZXh0KSB7XHJcblx0XHR0aGlzLmZ1bGxTY3JlZW5RdWFkLm1hdGVyaWFsLmRpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuZnVsbFNjcmVlblF1YWQubWF0ZXJpYWwudXBkYXRlKCk7XHJcblx0XHRjb25zdCBkcmF3Q29tYW5kID0gdGhpcy5mdWxsU2NyZWVuUXVhZC5nZXREcmF3Q29tbWFuZCgpO1xyXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclBhc3NFbmNvZGVyID0gdGhpcy5jdXJyZW50UmVuZGVyVGFyZ2V0LmJlZ2luUmVuZGVyUGFzc0VuY29kZXIoY29udGV4dCk7XHJcblx0XHRjb250ZXh0LnJlbmRlcihkcmF3Q29tYW5kLCBjdXJyZW50UmVuZGVyUGFzc0VuY29kZXIpO1xyXG5cdFx0dGhpcy5jdXJyZW50UmVuZGVyVGFyZ2V0LmVuZFJlbmRlclBhc3NFbmNvZGVyKCk7XHJcblx0fVxyXG5cdHByaXZhdGUgaW5pdERlZmF1bHRQYXJtcygpIHtcclxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KHt9KTtcclxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcclxuXHRcdFx0bmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBbLTEuMCwgMS4wLCAtMS4wLCAtMS4wLCAxLjAsIC0xLjAsIDEuMCwgLTEuMCwgMS4wLCAxLjAsIC0xLjAsIDEuMF0sIDIpXHJcblx0XHQpO1xyXG5cdFx0Z2VvbWV0cnkuY291bnQgPSA2O1xyXG5cdFx0Ly9yc1xyXG5cdFx0Y29uc3QgcHJpbWl0aXZlID0gbmV3IFByaW1pdGl2ZSgpO1xyXG5cdFx0Y29uc3QgdGFyZ2V0ID0gbmV3IFRhcmdldCgpO1xyXG5cdFx0Ly8gdGFyZ2V0LmZvcm1hdD1UZXh0dXJlRm9ybWF0LlJHQkE4VW5vcm1cclxuXHRcdGNvbnN0IHJlbmRlclN0YXRlID0gbmV3IFJlbmRlclN0YXRlKCk7XHJcblx0XHRyZW5kZXJTdGF0ZS5wcmltaXRpdmUgPSBwcmltaXRpdmU7XHJcblx0XHRyZW5kZXJTdGF0ZS50YXJnZXRzID0gW3RhcmdldF07XHJcblx0XHR0aGlzLnJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGU7XHJcblx0XHR0aGlzLmZ1bGxTY3JlZW5RdWFkID0gbmV3IE1lc2goZ2VvbWV0cnkpO1xyXG5cclxuXHRcdHRoaXMuZGVmYXVsdFNhbXBsZXIgPSBuZXcgU2FtcGxlcigpO1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgeyBUZXh0dXJlRm9ybWF0LCBUZXh0dXJlVXNhZ2UgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IHsgVW5pZm9ybXMgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xuaW1wb3J0IFNoYWRlck1hdGVyaWFsIGZyb20gXCIuLi9tYXRlcmlhbC9TaGFkZXJNYXRlcmlhbFwiO1xuaW1wb3J0IENvbG9yIGZyb20gXCIuLi9tYXRoL0NvbG9yXCI7XG5pbXBvcnQgVmVjdG9yMiBmcm9tIFwiLi4vbWF0aC9WZWN0b3IyXCI7XG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgQXR0YWNobWVudCBmcm9tIFwiLi4vcmVuZGVyL0F0dGFjaG1lbnRcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuLi9yZW5kZXIvQ29udGV4dFwiO1xuaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tIFwiLi4vcmVuZGVyL1JlbmRlclRhcmdldFwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5pbXBvcnQgZ2V0VmVydEZyYWcgZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJzXCI7XG5pbXBvcnQgUG9zdEVmZmVjdCBmcm9tIFwiLi9Qb3N0RWZmZWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJsb29tUG9zdEVmZmVjdCBleHRlbmRzIFBvc3RFZmZlY3Qge1xuXHRzdGF0aWMgQmx1ckRpcmVjdGlvblggPSBuZXcgVmVjdG9yMigxLjAsIDAuMCk7XG5cdHN0YXRpYyBCbHVyRGlyZWN0aW9uWSA9IG5ldyBWZWN0b3IyKDAuMCwgMS4wKTtcblx0c3RyZW5ndGg6IG51bWJlcjtcblx0cmFkaXVzOiBudW1iZXI7XG5cdHRocmVzaG9sZDogbnVtYmVyO1xuXHRyZW5kZXJUYXJnZXRzSG9yaXpvbnRhbDogUmVuZGVyVGFyZ2V0W107XG5cdHJlbmRlclRhcmdldHNWZXJ0aWNhbDogUmVuZGVyVGFyZ2V0W107XG5cdG5NaXBzOiBudW1iZXI7XG5cdHJlbmRlclRhcmdldEJyaWdodDogUmVuZGVyVGFyZ2V0O1xuXHRtYXRlcmlhbEhpZ2hQYXNzRmlsdGVyOiBTaGFkZXJNYXRlcmlhbDtcblx0aGlnaFBhc3NVbmlmb3JtczogVW5pZm9ybXM7XG5cdGNvbXBvc2l0ZU1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbDtcblx0c2VwYXJhYmxlQmx1ck1hdGVyaWFsczogU2hhZGVyTWF0ZXJpYWxbXTtcblx0c2VwYXJhYmxlQmx1cllNYXRlcmlhbHM6IFNoYWRlck1hdGVyaWFsW107XG5cdGJsZW5kVW5pZm9ybXM6IFVuaWZvcm1zO1xuXHRibGVuZE1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbDtcblx0YmxlbmRUYXJnZXQ6IFJlbmRlclRhcmdldDtcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zOiBCbG9vbVBvc3RFZmZlY3RQcm9wcykge1xuXHRcdHN1cGVyKG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0LCBcImJsb29tXCIpO1xuXHRcdHRoaXMuc3RyZW5ndGggPSBvcHRpb25zLnN0cmVuZ3RoO1xuXHRcdHRoaXMucmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG5cdFx0dGhpcy50aHJlc2hvbGQgPSBvcHRpb25zLnRocmVzaG9sZDtcblx0XHR0aGlzLmluaXQoKTtcblx0fVxuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0QnJpZ2h0LmRlc3Ryb3koKTtcblx0fVxuXHRyZW5kZXIoY29udGV4dDogQ29udGV4dCwgY29sb3JUZXh0dXJlOiBUZXh0dXJlKTogVGV4dHVyZSB7XG5cdFx0Ly8gMS4gRXh0cmFjdCBCcmlnaHQgQXJlYXNcblx0XHR0aGlzLmN1cnJlbnRSZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldEJyaWdodDtcblx0XHR0aGlzLmhpZ2hQYXNzVW5pZm9ybXMudERpZmZ1c2UudmFsdWUgPSBjb2xvclRleHR1cmU7XG5cdFx0dGhpcy5mdWxsU2NyZWVuUXVhZC5tYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWxIaWdoUGFzc0ZpbHRlcjtcblx0XHR0aGlzLnJlbmRlck1lc2goY29udGV4dCk7XG5cdFx0Ly8gMi4gQmx1ciBBbGwgdGhlIG1pcHMgcHJvZ3Jlc3NpdmVseVxuXHRcdGxldCBpbnB1dFJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyVGFyZ2V0QnJpZ2h0O1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uTWlwczsgaSsrKSB7XG5cdFx0XHR0aGlzLmZ1bGxTY3JlZW5RdWFkLm1hdGVyaWFsID0gdGhpcy5zZXBhcmFibGVCbHVyTWF0ZXJpYWxzW2ldO1xuXG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbHNbaV0udW5pZm9ybXMudERpZmZ1c2UudmFsdWUgPSBpbnB1dFJlbmRlclRhcmdldC5nZXRDb2xvclRleHR1cmUoKTtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsc1tpXS51bmlmb3Jtcy5kaXJlY3Rpb24udmFsdWUgPSBCbG9vbVBvc3RFZmZlY3QuQmx1ckRpcmVjdGlvblg7XG5cdFx0XHR0aGlzLmN1cnJlbnRSZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldHNIb3Jpem9udGFsW2ldO1xuXG5cdFx0XHR0aGlzLnJlbmRlck1lc2goY29udGV4dCk7XG5cdFx0XHR0aGlzLmZ1bGxTY3JlZW5RdWFkLm1hdGVyaWFsID0gdGhpcy5zZXBhcmFibGVCbHVyWU1hdGVyaWFsc1tpXTtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1cllNYXRlcmlhbHNbaV0udW5pZm9ybXMudERpZmZ1c2UudmFsdWUgPSB0aGlzLnJlbmRlclRhcmdldHNIb3Jpem9udGFsW2ldLmdldENvbG9yVGV4dHVyZSgpO1xuXHRcdFx0dGhpcy5zZXBhcmFibGVCbHVyWU1hdGVyaWFsc1tpXS51bmlmb3Jtcy5kaXJlY3Rpb24udmFsdWUgPSBCbG9vbVBvc3RFZmZlY3QuQmx1ckRpcmVjdGlvblk7XG5cdFx0XHR0aGlzLmN1cnJlbnRSZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFtpXTtcblxuXHRcdFx0dGhpcy5yZW5kZXJNZXNoKGNvbnRleHQpO1xuXG5cdFx0XHRpbnB1dFJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyVGFyZ2V0c1ZlcnRpY2FsW2ldO1xuXHRcdH1cblx0XHQvLyBDb21wb3NpdGUgQWxsIHRoZSBtaXBzXG5cdFx0dGhpcy5mdWxsU2NyZWVuUXVhZC5tYXRlcmlhbCA9IHRoaXMuY29tcG9zaXRlTWF0ZXJpYWw7XG5cdFx0dGhpcy5jdXJyZW50UmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXRzSG9yaXpvbnRhbFswXTtcblx0XHR0aGlzLnJlbmRlck1lc2goY29udGV4dCk7XG5cdFx0Ly9ibGVuZFxuXHRcdHRoaXMuYmxlbmRVbmlmb3Jtcy5iYXNlQ29sb3JUZXh0dXJlLnZhbHVlID0gY29sb3JUZXh0dXJlO1xuXHRcdHRoaXMuZnVsbFNjcmVlblF1YWQubWF0ZXJpYWwgPSB0aGlzLmJsZW5kTWF0ZXJpYWw7XG5cdFx0dGhpcy5jdXJyZW50UmVuZGVyVGFyZ2V0ID0gdGhpcy5ibGVuZFRhcmdldDtcblx0XHR0aGlzLnJlbmRlck1lc2goY29udGV4dCk7XG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudFJlbmRlclRhcmdldC5nZXRDb2xvclRleHR1cmUoKTtcblx0fVxuXHRwcml2YXRlIGluaXQoKSB7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRzSG9yaXpvbnRhbCA9IFtdO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0c1ZlcnRpY2FsID0gW107XG5cdFx0dGhpcy5uTWlwcyA9IDU7XG5cdFx0bGV0IHJlc3ggPSBNYXRoLnJvdW5kKHRoaXMud2lkdGggLyAyKTtcblx0XHRsZXQgcmVzeSA9IE1hdGgucm91bmQodGhpcy5oZWlnaHQgLyAyKTtcblxuXHRcdHRoaXMucmVuZGVyVGFyZ2V0QnJpZ2h0ID0gbmV3IFJlbmRlclRhcmdldChcInJlbmRlclwiLCBbdGhpcy5jcmVhdGVDb2xvckF0dGFjaG1lbnQocmVzeCwgcmVzeSldKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uTWlwczsgaSsrKSB7XG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXRIb3Jpem9uYWwgPSBuZXcgUmVuZGVyVGFyZ2V0KFwicmVuZGVyXCIsIFt0aGlzLmNyZWF0ZUNvbG9yQXR0YWNobWVudChyZXN4LCByZXN5KV0pO1xuXHRcdFx0dGhpcy5yZW5kZXJUYXJnZXRzSG9yaXpvbnRhbC5wdXNoKHJlbmRlclRhcmdldEhvcml6b25hbCk7XG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXRWZXJ0aWNhbCA9IG5ldyBSZW5kZXJUYXJnZXQoXCJyZW5kZXJcIiwgW3RoaXMuY3JlYXRlQ29sb3JBdHRhY2htZW50KHJlc3gsIHJlc3kpXSk7XG5cdFx0XHR0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbC5wdXNoKHJlbmRlclRhcmdldFZlcnRpY2FsKTtcblx0XHRcdHJlc3ggPSBNYXRoLnJvdW5kKHJlc3ggLyAyKTtcblx0XHRcdHJlc3kgPSBNYXRoLnJvdW5kKHJlc3kgLyAyKTtcblx0XHR9XG5cdFx0Ly8gbHVtaW5vc2l0eSBoaWdoIHBhc3MgbWF0ZXJpYWxcblx0XHR0aGlzLmhpZ2hQYXNzVW5pZm9ybXMgPSB7XG5cdFx0XHR0RGlmZnVzZTogeyB0eXBlOiBcInRleHR1cmVcIiwgdmFsdWU6IG51bGwgfSxcblx0XHRcdHRTYW1wbGVyOiB7XG5cdFx0XHRcdHR5cGU6IFwic2FtcGxlclwiLFxuXHRcdFx0XHR2YWx1ZTogdGhpcy5kZWZhdWx0U2FtcGxlclxuXHRcdFx0fSxcblx0XHRcdGx1bWlub3NpdHlUaHJlc2hvbDogeyB0eXBlOiBcImZsb2F0XCIsIHZhbHVlOiB0aGlzLnRocmVzaG9sZCB9LFxuXHRcdFx0c21vb3RoV2lkdGg6IHsgdHlwZTogXCJmbG9hdFwiLCB2YWx1ZTogMC4wMSB9LFxuXHRcdFx0ZGVmYXVsdENvbG9yOiB7IHR5cGU6IFwiY29sb3JcIiwgdmFsdWU6IG5ldyBDb2xvcigwLjAsIDAsIDApIH0sXG5cdFx0XHRkZWZhdWx0T3BhY2l0eTogeyB0eXBlOiBcImZsb2F0XCIsIHZhbHVlOiAxLjAgfVxuXHRcdH07XG5cdFx0Y29uc3Qgc2hhZGVyID0gZ2V0VmVydEZyYWcoXCJsdW1pbm9zaXR5SGlnaFwiLCB7IHBvc2l0aW9uTG9jYXRpb246IDAgfSk7XG5cdFx0dGhpcy5tYXRlcmlhbEhpZ2hQYXNzRmlsdGVyID0gbmV3IFNoYWRlck1hdGVyaWFsKHtcblx0XHRcdHR5cGU6IFwiYmxvb21cIixcblx0XHRcdHVuaWZvcm1zOiB0aGlzLmhpZ2hQYXNzVW5pZm9ybXMsXG5cdFx0XHR2ZXJ0OiBzaGFkZXIudmVydCxcblx0XHRcdGZyYWc6IHNoYWRlci5mcmFnXG5cdFx0fSk7XG5cdFx0Ly8gR2F1c3NpYW4gQmx1ciBNYXRlcmlhbHNcblx0XHR0aGlzLm1hdGVyaWFsSGlnaFBhc3NGaWx0ZXIucmVuZGVyU3RhdGUgPSB0aGlzLnJlbmRlclN0YXRlO1xuXHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFscyA9IFtdO1xuXHRcdHRoaXMuc2VwYXJhYmxlQmx1cllNYXRlcmlhbHMgPSBbXTtcblx0XHRjb25zdCBrZXJuZWxTaXplQXJyYXkgPSBbMywgNSwgNywgOSwgMTFdO1xuXHRcdHJlc3ggPSBNYXRoLnJvdW5kKHRoaXMud2lkdGggLyAyKTtcblx0XHRyZXN5ID0gTWF0aC5yb3VuZCh0aGlzLmhlaWdodCAvIDIpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5NaXBzOyBpKyspIHtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFscy5wdXNoKHRoaXMuZ2V0U2VwZXJhYmxlQmx1ck1hdGVyaWFsKGtlcm5lbFNpemVBcnJheVtpXSwgXCJCbHVyTWF0ZXJpYWxcIiArIGkpKTtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1cllNYXRlcmlhbHMucHVzaCh0aGlzLmdldFNlcGVyYWJsZUJsdXJNYXRlcmlhbChrZXJuZWxTaXplQXJyYXlbaV0sIFwiQmx1ck1hdGVyaWFsWVwiICsgaSkpO1xuXHRcdFx0cmVzeCA9IE1hdGgucm91bmQocmVzeCAvIDIpO1xuXG5cdFx0XHRyZXN5ID0gTWF0aC5yb3VuZChyZXN5IC8gMik7XG5cdFx0fVxuXHRcdC8vIENvbXBvc2l0ZSBtYXRlcmlhbFxuXHRcdHRoaXMuY29tcG9zaXRlTWF0ZXJpYWwgPSB0aGlzLmdldENvbXBvc2l0ZU1hdGVyaWFsKHRoaXMubk1pcHMsIFwiY29tcG9zaXRlTWF0ZXJpYWxcIik7XG5cdFx0dGhpcy5jb21wb3NpdGVNYXRlcmlhbC5yZW5kZXJTdGF0ZSA9IHRoaXMucmVuZGVyU3RhdGU7XG5cdFx0dGhpcy5ibGVuZFVuaWZvcm1zID0ge1xuXHRcdFx0dERpZmZ1c2U6IHsgdHlwZTogXCJ0ZXh0dXJlXCIsIHZhbHVlOiB0aGlzLnJlbmRlclRhcmdldHNIb3Jpem9udGFsWzBdLmdldENvbG9yVGV4dHVyZSgpIH0sXG5cdFx0XHRiYXNlQ29sb3JUZXh0dXJlOiB7IHR5cGU6IFwidGV4dHVyZVwiLCB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0dFNhbXBsZXI6IHtcblx0XHRcdFx0dHlwZTogXCJzYW1wbGVyXCIsXG5cdFx0XHRcdHZhbHVlOiB0aGlzLmRlZmF1bHRTYW1wbGVyXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRjb25zdCBibGVuZFNoYWRlciA9IGdldFZlcnRGcmFnKFwiYmxlbmRcIiwgeyBwb3NpdGlvbkxvY2F0aW9uOiAwIH0pO1xuXHRcdHRoaXMuYmxlbmRNYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCh7XG5cdFx0XHR0eXBlOiBcInBvc3RCbGVuZFwiLFxuXHRcdFx0dW5pZm9ybXM6IHRoaXMuYmxlbmRVbmlmb3Jtcyxcblx0XHRcdHZlcnQ6IGJsZW5kU2hhZGVyLnZlcnQsXG5cdFx0XHRmcmFnOiBibGVuZFNoYWRlci5mcmFnXG5cdFx0fSk7XG5cdFx0dGhpcy5ibGVuZE1hdGVyaWFsLnJlbmRlclN0YXRlID0gdGhpcy5yZW5kZXJTdGF0ZTtcblx0XHR0aGlzLmJsZW5kVGFyZ2V0ID0gbmV3IFJlbmRlclRhcmdldChcInJlbmRlclwiLCBbdGhpcy5jcmVhdGVDb2xvckF0dGFjaG1lbnQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpXSk7XG5cdH1cblx0cHJpdmF0ZSBjcmVhdGVDb2xvckF0dGFjaG1lbnQod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBBdHRhY2htZW50IHtcblx0XHRjb25zdCBjb2xvclRleHR1cmUgPSBuZXcgVGV4dHVyZSh7XG5cdFx0XHRzaXplOiB7IHdpZHRoLCBoZWlnaHQsIGRlcHRoOiAxIH0sXG5cdFx0XHRmb3JtYXQ6IFRleHR1cmVGb3JtYXQuQkdSQThVbm9ybSxcblx0XHRcdHVzYWdlOiBUZXh0dXJlVXNhZ2UuUmVuZGVyQXR0YWNobWVudCB8IFRleHR1cmVVc2FnZS5UZXh0dXJlQmluZGluZ1xuXHRcdH0pO1xuXHRcdGNvbnN0IGNvbG9yQXR0YWNobWVudCA9IG5ldyBBdHRhY2htZW50KHsgcjogMC4wLCBnOiAwLjAsIGI6IDAuMCwgYTogMC4wIH0sIHsgdGV4dHVyZTogY29sb3JUZXh0dXJlIH0pO1xuXHRcdHJldHVybiBjb2xvckF0dGFjaG1lbnQ7XG5cdH1cblx0cHJpdmF0ZSBnZXRDb21wb3NpdGVNYXRlcmlhbChuTWlwczogbnVtYmVyLCB0eXBlKTogU2hhZGVyTWF0ZXJpYWwge1xuXHRcdC8vQHRzLW5vY2hlY2tcblx0XHRyZXR1cm4gbmV3IFNoYWRlck1hdGVyaWFsKHtcblx0XHRcdHR5cGUsXG5cdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHRibHVyVGV4dHVyZTE6IHsgdHlwZTogXCJ0ZXh0dXJlXCIsIHZhbHVlOiB0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFswXS5nZXRDb2xvclRleHR1cmUoKSB9LFxuXHRcdFx0XHRibHVyVGV4dHVyZTI6IHsgdHlwZTogXCJ0ZXh0dXJlXCIsIHZhbHVlOiB0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFsxXS5nZXRDb2xvclRleHR1cmUoKSB9LFxuXHRcdFx0XHRibHVyVGV4dHVyZTM6IHsgdHlwZTogXCJ0ZXh0dXJlXCIsIHZhbHVlOiB0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFsyXS5nZXRDb2xvclRleHR1cmUoKSB9LFxuXHRcdFx0XHRibHVyVGV4dHVyZTQ6IHsgdHlwZTogXCJ0ZXh0dXJlXCIsIHZhbHVlOiB0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFszXS5nZXRDb2xvclRleHR1cmUoKSB9LFxuXHRcdFx0XHRibHVyVGV4dHVyZTU6IHsgdHlwZTogXCJ0ZXh0dXJlXCIsIHZhbHVlOiB0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFs0XS5nZXRDb2xvclRleHR1cmUoKSB9LFxuXHRcdFx0XHR0U2FtcGxlcjoge1xuXHRcdFx0XHRcdHR5cGU6IFwic2FtcGxlclwiLFxuXHRcdFx0XHRcdHZhbHVlOiB0aGlzLmRlZmF1bHRTYW1wbGVyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGJsb29tU3RyZW5ndGg6IHsgdHlwZTogXCJmbG9hdFwiLCB2YWx1ZTogdGhpcy5zdHJlbmd0aCB9LFxuXHRcdFx0XHRibG9vbVJhZGl1czogeyB0eXBlOiBcImZsb2F0XCIsIHZhbHVlOiB0aGlzLnJhZGl1cyB9LFxuXHRcdFx0XHRibG9vbUZhY3RvcnM6IHsgdHlwZTogXCJmbG9hdC1hcnJheVwiLCB2YWx1ZTogWzEuMCwgMC44LCAwLjYsIDAuNCwgMC4yXSB9LFxuXHRcdFx0XHRibG9vbVRpbnRDb2xvcnM6IHtcblx0XHRcdFx0XHR0eXBlOiBcInZlYzMtYXJyYXlcIixcblx0XHRcdFx0XHR2YWx1ZTogW1xuXHRcdFx0XHRcdFx0bmV3IFZlY3RvcjMoMSwgMSwgMSksXG5cdFx0XHRcdFx0XHRuZXcgVmVjdG9yMygxLCAxLCAxKSxcblx0XHRcdFx0XHRcdG5ldyBWZWN0b3IzKDEsIDEsIDEpLFxuXHRcdFx0XHRcdFx0bmV3IFZlY3RvcjMoMSwgMSwgMSksXG5cdFx0XHRcdFx0XHRuZXcgVmVjdG9yMygxLCAxLCAxKVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0dmVydDogKGRlZmluZXMpID0+IHtcblx0XHRcdFx0YFxuICAgICAgICAgICAgICBzdHJ1Y3QgVmVydGV4SW5wdXQge1xuICAgICAgICAgICAgICAgICAgICBAbG9jYXRpb24oMCkgcG9zaXRpb246IHZlYzI8ZjMyPiwgICAgICAgXG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBzdHJ1Y3QgVmVydGV4T3V0cHV0IHtcbiAgICAgICAgICAgICAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uOiB2ZWM0PGYzMj4sXG4gICAgICAgICAgICAgICAgICAgIEBsb2NhdGlvbigwKSB1djogdmVjMjxmMzI+LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICBAdmVydGV4XG4gICAgICAgICAgICAgICBmbiBtYWluKGlucHV0OiBWZXJ0ZXhJbnB1dCkgLT4gVmVydGV4T3V0cHV0IHtcbiAgICAgICAgICAgICAgICB2YXIgb3V0cHV0OlZlcnRleE91dHB1dDtcbiAgICAgICAgICAgICAgICBvdXRwdXQudXYgPSBpbnB1dC5wb3NpdGlvbiAqIDAuNSArIDAuNTtcbiAgICAgICAgICAgICAgICBvdXRwdXQucG9zaXRpb24gPSB2ZWM0PGYzMj4oaW5wdXQucG9zaXRpb24sIDAuMCwgMS4wKTs7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgO1xuXHRcdFx0fSxcblxuXHRcdFx0ZnJhZzogKGRlZmluZXMpID0+IHtcblx0XHRcdFx0YFxuICAgICAgICAgICAgICAgIHN0cnVjdCBGcmFnSW5wdXQge1xuICAgICAgICAgICAgICAgICAgICBAbG9jYXRpb24oMCkgdXY6IHZlYzI8ZjMyPixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHN0cnVjdCBCbG9vbVVuaWZvcm1ze1xuICAgICAgICAgICAgICAgICAgICBibG9vbVN0cmVuZ3RoOmYzMixcbiAgICAgICAgICAgICAgICAgICAgYmxvb21SYWRpdXM6ZjMyLFxuICAgICAgICAgICAgICAgICAgICBibG9vbUZhY3RvcnMgOiBhcnJheTxmMzIsNT4sXG4gICAgICAgICAgICAgICAgICAgIGJsb29tVGludENvbG9ycyA6IGFycmF5PHZlYzM8ZjMyPiw1PlxuICAgICAgICAgICAgICAgIH0gIFxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygwKSAgdmFyPHN0b3JhZ2UsIHJlYWQ+IGJsb29tVW5pZm9ybXMgOiBCbG9vbVVuaWZvcm1zO1xuXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5ibHVyVGV4dHVyZTFCaW5kaW5nfSkgdmFyIGJsdXJUZXh0dXJlMTogdGV4dHVyZV8yZDxmMzI+O1xuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYmx1clRleHR1cmUyQmluZGluZ30pIHZhciBibHVyVGV4dHVyZTI6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmJsdXJUZXh0dXJlM0JpbmRpbmd9KSB2YXIgYmx1clRleHR1cmUzOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5ibHVyVGV4dHVyZTRCaW5kaW5nfSkgdmFyIGJsdXJUZXh0dXJlNDogdGV4dHVyZV8yZDxmMzI+O1xuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYmx1clRleHR1cmU1QmluZGluZ30pIHZhciBibHVyVGV4dHVyZTU6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnRTYW1wbGVyQmluZGluZ319KSB2YXIgdFNhbXBsZXI6IHNhbXBsZXI7XG5cblx0XHRcdFx0Zm4gbGVycEJsb29tRmFjdG9yKGZhY3RvcjpmMzIpLT5mMzIge1xuXHRcdFx0XHRcdGxldCBtaXJyb3JGYWN0b3I6ZjMyID0gMS4yIC0gZmFjdG9yO1xuXHRcdFx0XHRcdHJldHVybiBtaXgoZmFjdG9yLCBtaXJyb3JGYWN0b3IsIGJsb29tVW5pZm9ybXMuYmxvb21SYWRpdXMpO1xuXHRcdFx0XHR9XG4gICAgICAgICAgICAgICAgQGZyYWdtZW50XG5cdFx0XHRcdGZuIG1haW4oaW5wdXQ6RnJhZ0lucHV0KS0+IEBsb2NhdGlvbigwKSB2ZWM0PGYzMj4gIHtcblx0XHRcdFx0XHRyZXR1cm4gYmxvb21Vbmlmb3Jtcy5ibG9vbVN0cmVuZ3RoICogKCBsZXJwQmxvb21GYWN0b3IoYmxvb21Vbmlmb3Jtcy5ibG9vbUZhY3RvcnNbMF0pICogdmVjNChibG9vbVVuaWZvcm1zLmJsb29tVGludENvbG9yc1swXSwgMS4wKSAqIHRleHR1cmVTYW1wbGUoYmx1clRleHR1cmUxLCB0U2FtcGxlciwgaW5wdXQudXYpICtcblx0XHRcdFx0XHRcdGxlcnBCbG9vbUZhY3RvcihibG9vbVVuaWZvcm1zLmJsb29tRmFjdG9yc1sxXSkgKiB2ZWM0PGYzMj4oYmxvb21Vbmlmb3Jtcy5ibG9vbVRpbnRDb2xvcnNbMV0sIDEuMCkgKiB0ZXh0dXJlU2FtcGxlKGJsdXJUZXh0dXJlMiwgdFNhbXBsZXIsIGlucHV0LnV2KSArXG5cdFx0XHRcdFx0XHRsZXJwQmxvb21GYWN0b3IoYmxvb21Vbmlmb3Jtcy5ibG9vbUZhY3RvcnNbMl0pICogdmVjNDxmMzI+KGJsb29tVW5pZm9ybXMuYmxvb21UaW50Q29sb3JzWzJdLCAxLjApICogdGV4dHVyZVNhbXBsZShibHVyVGV4dHVyZTMsIHRTYW1wbGVyLCBpbnB1dC51dikgK1xuXHRcdFx0XHRcdFx0bGVycEJsb29tRmFjdG9yKGJsb29tVW5pZm9ybXMuYmxvb21GYWN0b3JzWzNdKSAqIHZlYzQ8ZjMyPihibG9vbVVuaWZvcm1zLmJsb29tVGludENvbG9yc1szXSwgMS4wKSAqIHRleHR1cmVTYW1wbGUoYmx1clRleHR1cmU0LCB0U2FtcGxlciwgaW5wdXQudXYpICtcblx0XHRcdFx0XHRcdGxlcnBCbG9vbUZhY3RvcihibG9vbVVuaWZvcm1zLmJsb29tRmFjdG9yc1s0XSkgKiB2ZWM0PGYzMj4oYmxvb21Vbmlmb3Jtcy5ibG9vbVRpbnRDb2xvcnNbNF0sIDEuMCkgKiB0ZXh0dXJlU2FtcGxlKGJsdXJUZXh0dXJlNSwgdFNhbXBsZXIsIGlucHV0LnV2KSApO1xuXHRcdFx0XHR9YDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRwcml2YXRlIGdldFNlcGVyYWJsZUJsdXJNYXRlcmlhbChrZXJuZWxSYWRpdXMsIHR5cGUpIHtcblx0XHRjb25zdCBzaGFkZXIgPSBnZXRWZXJ0RnJhZyhcImJsdXJcIiwge1xuXHRcdFx0S0VSTkVMX1JBRElVUzoga2VybmVsUmFkaXVzLFxuXHRcdFx0U0lHTUE6IGtlcm5lbFJhZGl1cyxcblx0XHRcdHBvc2l0aW9uTG9jYXRpb246IDBcblx0XHR9KTtcblx0XHRjb25zdCBtYXQgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoe1xuXHRcdFx0dHlwZSxcblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdHREaWZmdXNlOiB7IHR5cGU6IFwidGV4dHVyZVwiLCB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0XHRkaXJlY3Rpb246IHsgdHlwZTogXCJ2ZWMyXCIsIHZhbHVlOiBuZXcgVmVjdG9yMigwLjAsIDAuMCkgfSxcblx0XHRcdFx0dFNhbXBsZXI6IHtcblx0XHRcdFx0XHR0eXBlOiBcInNhbXBsZXJcIixcblx0XHRcdFx0XHR2YWx1ZTogdGhpcy5kZWZhdWx0U2FtcGxlclxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHR2ZXJ0OiBzaGFkZXIudmVydCxcblxuXHRcdFx0ZnJhZzogc2hhZGVyLmZyYWdcblx0XHR9KTtcblx0XHRtYXQucmVuZGVyU3RhdGUgPSB0aGlzLnJlbmRlclN0YXRlO1xuXHRcdHJldHVybiBtYXQ7XG5cdH1cbn1cblxudHlwZSBCbG9vbVBvc3RFZmZlY3RQcm9wcyA9IHtcblx0d2lkdGg6IG51bWJlcjtcblx0aGVpZ2h0OiBudW1iZXI7XG5cdHN0cmVuZ3RoOiBudW1iZXI7XG5cdHJhZGl1czogbnVtYmVyO1xuXHR0aHJlc2hvbGQ6IG51bWJlcjtcbn07XG4iLCJpbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi9WZWN0b3IzXCI7XHJcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuL1ZlY3RvcjRcIjtcclxuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcclxuaW1wb3J0IEdNYXRoIGZyb20gXCIuL01hdGhcIjtcclxuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4vTWF0cml4NFwiO1xyXG5cclxuLyoqXHJcbiAqIEEgcGxhbmUgaW4gSGVzc2lhbiBOb3JtYWwgRm9ybSBkZWZpbmVkIGJ5XHJcbiAqIDxwcmU+XHJcbiAqIGF4ICsgYnkgKyBjeiArIGQgPSAwXHJcbiAqIDwvcHJlPlxyXG4gKiB3aGVyZSAoYSwgYiwgYykgaXMgdGhlIHBsYW5lJ3MgPGNvZGU+bm9ybWFsPC9jb2RlPiwgZCBpcyB0aGUgc2lnbmVkXHJcbiAqIDxjb2RlPmRpc3RhbmNlPC9jb2RlPiB0byB0aGUgcGxhbmUsIGFuZCAoeCwgeSwgeikgaXMgYW55IHBvaW50IG9uXHJcbiAqIHRoZSBwbGFuZS5cclxuICpcclxuICogQGFsaWFzIFBsYW5lXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge1ZlY3RvcjN9IG5vcm1hbCBUaGUgcGxhbmUncyBub3JtYWwgKG5vcm1hbGl6ZWQpLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gZGlzdGFuY2UgVGhlIHNob3J0ZXN0IGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiB0byB0aGUgcGxhbmUuICBUaGUgc2lnbiBvZlxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBUaGUgcGxhbmUgeD0wXHJcbiAqIGNvbnN0IHBsYW5lID0gbmV3IFBsYW5lKFZlY3RvcjMuVU5JVF9YLCAwLjApO1xyXG4gKlxyXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gTm9ybWFsIG11c3QgYmUgbm9ybWFsaXplZFxyXG4gKi9cclxuY2xhc3MgUGxhbmUge1xyXG4gIG5vcm1hbDogVmVjdG9yMztcclxuICBkaXN0YW5jZTogbnVtYmVyO1xyXG4gIHB1YmxpYyBzdGF0aWMgT1JJR0lOX1hZX1BMQU5FID0gT2JqZWN0LmZyZWV6ZShuZXcgUGxhbmUoVmVjdG9yMy5VTklUX1osIDAuMCkpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIE9SSUdJTl9ZWl9QTEFORSA9IE9iamVjdC5mcmVlemUobmV3IFBsYW5lKFZlY3RvcjMuVU5JVF9YLCAwLjApKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBPUklHSU5fWlhfUExBTkUgPSBPYmplY3QuZnJlZXplKG5ldyBQbGFuZShWZWN0b3IzLlVOSVRfWSwgMC4wKSk7XHJcbiAgY29uc3RydWN0b3Iobm9ybWFsOiBWZWN0b3IzLCBkaXN0YW5jZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLm5vcm1hbCA9IFZlY3RvcjMuY2xvbmUobm9ybWFsKTtcclxuXHJcbiAgICB0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgfVxyXG4gIG5vcm1hbGl6ZSgpIHtcclxuICAgIGNvbnN0IGludmVyc2VOb3JtYWxMZW5ndGggPSAxLjAgLyB0aGlzLm5vcm1hbC5sZW5ndGgoKTtcclxuICAgIHRoaXMubm9ybWFsID0gVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKFxyXG4gICAgICB0aGlzLm5vcm1hbCxcclxuICAgICAgaW52ZXJzZU5vcm1hbExlbmd0aCxcclxuICAgICAgdGhpcy5ub3JtYWxcclxuICAgICk7XHJcbiAgICB0aGlzLmRpc3RhbmNlICo9IGludmVyc2VOb3JtYWxMZW5ndGg7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tUG9pbnROb3JtYWwoXHJcbiAgICBwb2ludDogVmVjdG9yMyxcclxuICAgIG5vcm1hbDogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogUGxhbmVcclxuICApOiBQbGFuZSB7XHJcbiAgICBpZiAoIUdNYXRoLmVxdWFsc0Vwc2lsb24oVmVjdG9yMy5tYWduaXR1ZGUobm9ybWFsKSwgMS4wLCBHTWF0aC5FUFNJTE9ONikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9ybWFsIG11c3QgYmUgbm9ybWFsaXplZC5cIik7XHJcbiAgICB9XHJcbiAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcclxuXHJcbiAgICBjb25zdCBkaXN0YW5jZSA9IC1WZWN0b3IzLmRvdChub3JtYWwsIHBvaW50KTtcclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IFBsYW5lKG5vcm1hbCwgZGlzdGFuY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIFZlY3RvcjMuY2xvbmUobm9ybWFsLCByZXN1bHQubm9ybWFsKTtcclxuICAgIHJlc3VsdC5kaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tVmVjdG9yNChjb2VmZmljaWVudHM6IFZlY3RvcjQsIHJlc3VsdDogUGxhbmUpOiBQbGFuZSB7XHJcbiAgICBjb25zdCBub3JtYWwgPSBWZWN0b3IzLmZyb21WZWN0b3I0KGNvZWZmaWNpZW50cywgc2NyYXRjaE5vcm1hbCk7XHJcbiAgICBjb25zdCBkaXN0YW5jZSA9IGNvZWZmaWNpZW50cy53O1xyXG5cclxuICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XHJcbiAgICBpZiAoIUdNYXRoLmVxdWFsc0Vwc2lsb24oVmVjdG9yMy5tYWduaXR1ZGUobm9ybWFsKSwgMS4wLCBHTWF0aC5FUFNJTE9ONikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9ybWFsIG11c3QgYmUgbm9ybWFsaXplZC5cIik7XHJcbiAgICB9XHJcbiAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IFBsYW5lKG5vcm1hbCwgZGlzdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgVmVjdG9yMy5jbG9uZShub3JtYWwsIHJlc3VsdC5ub3JtYWwpO1xyXG4gICAgcmVzdWx0LmRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFBvaW50RGlzdGFuY2UocGxhbmU6IFBsYW5lLCBwb2ludDogVmVjdG9yMyk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMy5kb3QocGxhbmUubm9ybWFsLCBwb2ludCkgKyBwbGFuZS5kaXN0YW5jZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcm9qZWN0UG9pbnRPbnRvUGxhbmUoXHJcbiAgICBwbGFuZTogUGxhbmUsXHJcbiAgICBwb2ludDogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogVmVjdG9yM1xyXG4gICk6IFZlY3RvcjMge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmVzdWx0ID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwcm9qZWN0ZWRQb2ludCA9IHBvaW50IC0gKG5vcm1hbC5wb2ludCArIHNjYWxlKSAqIG5vcm1hbFxyXG4gICAgY29uc3QgcG9pbnREaXN0YW5jZSA9IFBsYW5lLmdldFBvaW50RGlzdGFuY2UocGxhbmUsIHBvaW50KTtcclxuICAgIGNvbnN0IHNjYWxlZE5vcm1hbCA9IFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihcclxuICAgICAgcGxhbmUubm9ybWFsLFxyXG4gICAgICBwb2ludERpc3RhbmNlLFxyXG4gICAgICBzY3JhdGNoQ2FydGVzaWFuXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBWZWN0b3IzLnN1YnRyYWN0KHBvaW50LCBzY2FsZWROb3JtYWwsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdHJhbnNmb3JtKHBsYW5lOiBQbGFuZSwgdHJhbnNmb3JtOiBNYXRyaXg0LCByZXN1bHQ6IFBsYW5lKTogUGxhbmUge1xyXG4gICAgY29uc3Qgbm9ybWFsID0gcGxhbmUubm9ybWFsO1xyXG4gICAgY29uc3QgZGlzdGFuY2UgPSBwbGFuZS5kaXN0YW5jZTtcclxuICAgIGNvbnN0IGludmVyc2VUcmFuc3Bvc2UgPSBNYXRyaXg0LmludmVyc2VUcmFuc3Bvc2UoXHJcbiAgICAgIHRyYW5zZm9ybSxcclxuICAgICAgc2NyYXRjaEludmVyc2VUcmFuc3Bvc2VcclxuICAgICk7XHJcbiAgICBsZXQgcGxhbmVBc0NhcnRlc2lhbjQgPSBWZWN0b3I0LmZyb21FbGVtZW50cyhcclxuICAgICAgbm9ybWFsLngsXHJcbiAgICAgIG5vcm1hbC55LFxyXG4gICAgICBub3JtYWwueixcclxuICAgICAgZGlzdGFuY2UsXHJcbiAgICAgIHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjRcclxuICAgICk7XHJcbiAgICBwbGFuZUFzQ2FydGVzaWFuNCA9IE1hdHJpeDQubXVsdGlwbHlCeVZlY3RvcihcclxuICAgICAgaW52ZXJzZVRyYW5zcG9zZSxcclxuICAgICAgcGxhbmVBc0NhcnRlc2lhbjQsXHJcbiAgICAgIHBsYW5lQXNDYXJ0ZXNpYW40XHJcbiAgICApO1xyXG5cclxuICAgIC8vIENvbnZlcnQgdGhlIHRyYW5zZm9ybWVkIHBsYW5lIHRvIEhlc3NpYW4gTm9ybWFsIEZvcm1cclxuICAgIGNvbnN0IHRyYW5zZm9ybWVkTm9ybWFsID0gVmVjdG9yMy5mcm9tVmVjdG9yNChcclxuICAgICAgcGxhbmVBc0NhcnRlc2lhbjQsXHJcbiAgICAgIHNjcmF0Y2hUcmFuc2Zvcm1Ob3JtYWxcclxuICAgICk7XHJcblxyXG4gICAgcGxhbmVBc0NhcnRlc2lhbjQgPSBWZWN0b3I0LmRpdmlkZUJ5U2NhbGFyKFxyXG4gICAgICBwbGFuZUFzQ2FydGVzaWFuNCxcclxuICAgICAgVmVjdG9yMy5tYWduaXR1ZGUodHJhbnNmb3JtZWROb3JtYWwpLFxyXG4gICAgICBwbGFuZUFzQ2FydGVzaWFuNFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gUGxhbmUuZnJvbVZlY3RvcjQocGxhbmVBc0NhcnRlc2lhbjQsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2xvbmUocGxhbmU6IFBsYW5lLCByZXN1bHQ6IFBsYW5lKTogUGxhbmUge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBQbGFuZShwbGFuZS5ub3JtYWwsIHBsYW5lLmRpc3RhbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICBWZWN0b3IzLmNsb25lKHBsYW5lLm5vcm1hbCwgcmVzdWx0Lm5vcm1hbCk7XHJcbiAgICByZXN1bHQuZGlzdGFuY2UgPSBwbGFuZS5kaXN0YW5jZTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBQbGFuZSwgcmlnaHQ6IFBsYW5lKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBsZWZ0LmRpc3RhbmNlID09PSByaWdodC5kaXN0YW5jZSAmJlxyXG4gICAgICBWZWN0b3IzLmVxdWFscyhsZWZ0Lm5vcm1hbCwgcmlnaHQubm9ybWFsKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuY29uc3Qgc2NyYXRjaE5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNjcmF0Y2hDYXJ0ZXNpYW4gPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY3JhdGNoSW52ZXJzZVRyYW5zcG9zZSA9IG5ldyBNYXRyaXg0KCk7XHJcbmNvbnN0IHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjQgPSBuZXcgVmVjdG9yNCgpO1xyXG5jb25zdCBzY3JhdGNoVHJhbnNmb3JtTm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBsYW5lO1xyXG4iLCJpbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XHJcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjRcIjtcclxuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XHJcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi91dGlscy9kZWZpbmVkXCI7XHJcbmltcG9ydCB7IEludGVyc2VjdCB9IGZyb20gXCIuL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCBQbGFuZSBmcm9tIFwiLi4vbWF0aC9QbGFuZVwiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBjdWxsaW5nIHZvbHVtZSBkZWZpbmVkIGJ5IHBsYW5lcy5cclxuICpcclxuICogQGFsaWFzIEN1bGxpbmdWb2x1bWVcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7VmVjdG9yNFtdfSBbcGxhbmVzXSBBbiBhcnJheSBvZiBjbGlwcGluZyBwbGFuZXMuXHJcbiAqL1xyXG5jbGFzcyBDdWxsaW5nVm9sdW1lIHtcclxuXHRwbGFuZXM6IFBsYW5lW107XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgTUFTS19PVVRTSURFID0gMHhmZmZmZmZmZjtcclxuXHJcblx0cHVibGljIHN0YXRpYyBNQVNLX0lOU0lERSA9IDB4MDAwMDAwMDA7XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgTUFTS19JTkRFVEVSTUlOQVRFID0gMHg3ZmZmZmZmZjtcclxuXHJcblx0Y29uc3RydWN0b3IocGxhbmVzPzogUGxhbmVbXSkge1xyXG5cdFx0dGhpcy5wbGFuZXMgPSBkZWZhdWx0VmFsdWUocGxhbmVzLCBbXHJcblx0XHRcdG5ldyBQbGFuZShWZWN0b3IzLlVOSVRfWiwgMC4wKSxcclxuXHRcdFx0bmV3IFBsYW5lKFZlY3RvcjMuVU5JVF9aLCAwLjApLFxyXG5cdFx0XHRuZXcgUGxhbmUoVmVjdG9yMy5VTklUX1osIDAuMCksXHJcblx0XHRcdG5ldyBQbGFuZShWZWN0b3IzLlVOSVRfWiwgMC4wKSxcclxuXHRcdFx0bmV3IFBsYW5lKFZlY3RvcjMuVU5JVF9aLCAwLjApLFxyXG5cdFx0XHRuZXcgUGxhbmUoVmVjdG9yMy5VTklUX1osIDAuMClcclxuXHRcdF0pO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3RzIGEgY3VsbGluZyB2b2x1bWUgZnJvbSBhIGJvdW5kaW5nIHNwaGVyZS4gQ3JlYXRlcyBzaXggcGxhbmVzIHRoYXQgY3JlYXRlIGEgYm94IGNvbnRhaW5pbmcgdGhlIHNwaGVyZS5cclxuXHQgKiBUaGUgcGxhbmVzIGFyZSBhbGlnbmVkIHRvIHRoZSB4LCB5LCBhbmQgeiBheGVzIGluIHdvcmxkIGNvb3JkaW5hdGVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtCb3VuZGluZ1NwaGVyZX0gYm91bmRpbmdTcGhlcmUgVGhlIGJvdW5kaW5nIHNwaGVyZSB1c2VkIHRvIGNyZWF0ZSB0aGUgY3VsbGluZyB2b2x1bWUuXHJcblx0ICogQHBhcmFtIHtDdWxsaW5nVm9sdW1lfSBbcmVzdWx0XSBUaGUgb2JqZWN0IG9udG8gd2hpY2ggdG8gc3RvcmUgdGhlIHJlc3VsdC5cclxuXHQgKiBAcmV0dXJucyB7Q3VsbGluZ1ZvbHVtZX0gVGhlIGN1bGxpbmcgdm9sdW1lIGNyZWF0ZWQgZnJvbSB0aGUgYm91bmRpbmcgc3BoZXJlLlxyXG5cdCAqL1xyXG5cdHN0YXRpYyBmcm9tQm91bmRpbmdTcGhlcmUoYm91bmRpbmdTcGhlcmUsIHJlc3VsdCkge1xyXG5cdFx0aWYgKCFkZWZpbmVkKGJvdW5kaW5nU3BoZXJlKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJib3VuZGluZ1NwaGVyZSBpcyByZXF1aXJlZC5cIik7XHJcblx0XHR9XHJcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0XHRyZXN1bHQgPSBuZXcgQ3VsbGluZ1ZvbHVtZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGxlbmd0aCA9IGZhY2VzLmxlbmd0aDtcclxuXHRcdGNvbnN0IHBsYW5lcyA9IHJlc3VsdC5wbGFuZXM7XHJcblx0XHRwbGFuZXMubGVuZ3RoID0gMiAqIGxlbmd0aDtcclxuXHJcblx0XHRjb25zdCBjZW50ZXIgPSBib3VuZGluZ1NwaGVyZS5jZW50ZXI7XHJcblx0XHRjb25zdCByYWRpdXMgPSBib3VuZGluZ1NwaGVyZS5yYWRpdXM7XHJcblxyXG5cdFx0bGV0IHBsYW5lSW5kZXggPSAwO1xyXG5cclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0Y29uc3QgZmFjZU5vcm1hbCA9IGZhY2VzW2ldO1xyXG5cclxuXHRcdFx0bGV0IHBsYW5lMCA9IHBsYW5lc1twbGFuZUluZGV4XTtcclxuXHRcdFx0bGV0IHBsYW5lMSA9IHBsYW5lc1twbGFuZUluZGV4ICsgMV07XHJcblxyXG5cdFx0XHRpZiAoIWRlZmluZWQocGxhbmUwKSkge1xyXG5cdFx0XHRcdHBsYW5lMCA9IHBsYW5lc1twbGFuZUluZGV4XSA9IG5ldyBWZWN0b3I0KCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFkZWZpbmVkKHBsYW5lMSkpIHtcclxuXHRcdFx0XHRwbGFuZTEgPSBwbGFuZXNbcGxhbmVJbmRleCArIDFdID0gbmV3IFZlY3RvcjQoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0VmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGZhY2VOb3JtYWwsIC1yYWRpdXMsIHNjcmF0Y2hQbGFuZUNlbnRlcik7XHJcblx0XHRcdFZlY3RvcjMuYWRkKGNlbnRlciwgc2NyYXRjaFBsYW5lQ2VudGVyLCBzY3JhdGNoUGxhbmVDZW50ZXIpO1xyXG5cclxuXHRcdFx0cGxhbmUwLnggPSBmYWNlTm9ybWFsLng7XHJcblx0XHRcdHBsYW5lMC55ID0gZmFjZU5vcm1hbC55O1xyXG5cdFx0XHRwbGFuZTAueiA9IGZhY2VOb3JtYWwuejtcclxuXHRcdFx0cGxhbmUwLncgPSAtVmVjdG9yMy5kb3QoZmFjZU5vcm1hbCwgc2NyYXRjaFBsYW5lQ2VudGVyKTtcclxuXHJcblx0XHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihmYWNlTm9ybWFsLCByYWRpdXMsIHNjcmF0Y2hQbGFuZUNlbnRlcik7XHJcblx0XHRcdFZlY3RvcjMuYWRkKGNlbnRlciwgc2NyYXRjaFBsYW5lQ2VudGVyLCBzY3JhdGNoUGxhbmVDZW50ZXIpO1xyXG5cclxuXHRcdFx0cGxhbmUxLnggPSAtZmFjZU5vcm1hbC54O1xyXG5cdFx0XHRwbGFuZTEueSA9IC1mYWNlTm9ybWFsLnk7XHJcblx0XHRcdHBsYW5lMS56ID0gLWZhY2VOb3JtYWwuejtcclxuXHRcdFx0cGxhbmUxLncgPSAtVmVjdG9yMy5kb3QoVmVjdG9yMy5uZWdhdGUoZmFjZU5vcm1hbCwgc2NyYXRjaFBsYW5lTm9ybWFsKSwgc2NyYXRjaFBsYW5lQ2VudGVyKTtcclxuXHJcblx0XHRcdHBsYW5lSW5kZXggKz0gMjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBib3VuZGluZyB2b2x1bWUgaW50ZXJzZWN0cyB0aGUgY3VsbGluZyB2b2x1bWUuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge09iamVjdH0gYm91bmRpbmdWb2x1bWUgVGhlIGJvdW5kaW5nIHZvbHVtZSB3aG9zZSBpbnRlcnNlY3Rpb24gd2l0aCB0aGUgY3VsbGluZyB2b2x1bWUgaXMgdG8gYmUgdGVzdGVkLlxyXG5cdCAqIEByZXR1cm5zIHtJbnRlcnNlY3R9ICBJbnRlcnNlY3QuT1VUU0lERSwgSW50ZXJzZWN0LklOVEVSU0VDVElORywgb3IgSW50ZXJzZWN0LklOU0lERS5cclxuXHQgKi9cclxuXHRjb21wdXRlVmlzaWJpbGl0eShib3VuZGluZ1ZvbHVtZSkge1xyXG5cdFx0aWYgKCFkZWZpbmVkKGJvdW5kaW5nVm9sdW1lKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJib3VuZGluZ1ZvbHVtZSBpcyByZXF1aXJlZC5cIik7XHJcblx0XHR9XHJcblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcclxuXHRcdGxldCBpbnRlcnNlY3RpbmcgPSBmYWxzZTtcclxuXHRcdGZvciAobGV0IGsgPSAwLCBsZW4gPSBwbGFuZXMubGVuZ3RoOyBrIDwgbGVuOyArK2spIHtcclxuXHRcdFx0Y29uc3QgcmVzdWx0ID0gYm91bmRpbmdWb2x1bWUuaW50ZXJzZWN0UGxhbmUocGxhbmVzW2tdKTtcclxuXHRcdFx0aWYgKHJlc3VsdCA9PT0gSW50ZXJzZWN0Lk9VVFNJREUpIHtcclxuXHRcdFx0XHRyZXR1cm4gSW50ZXJzZWN0Lk9VVFNJREU7XHJcblx0XHRcdH0gZWxzZSBpZiAocmVzdWx0ID09PSBJbnRlcnNlY3QuSU5URVJTRUNUSU5HKSB7XHJcblx0XHRcdFx0aW50ZXJzZWN0aW5nID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpbnRlcnNlY3RpbmcgPyBJbnRlcnNlY3QuSU5URVJTRUNUSU5HIDogSW50ZXJzZWN0LklOU0lERTtcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IGZhY2VzID0gW25ldyBWZWN0b3IzKCksIG5ldyBWZWN0b3IzKCksIG5ldyBWZWN0b3IzKCldO1xyXG5WZWN0b3IzLmNsb25lKFZlY3RvcjMuVU5JVF9YLCBmYWNlc1swXSk7XHJcblZlY3RvcjMuY2xvbmUoVmVjdG9yMy5VTklUX1ksIGZhY2VzWzFdKTtcclxuVmVjdG9yMy5jbG9uZShWZWN0b3IzLlVOSVRfWiwgZmFjZXNbMl0pO1xyXG5cclxuY29uc3Qgc2NyYXRjaFBsYW5lQ2VudGVyID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2NyYXRjaFBsYW5lTm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2NyYXRjaFBsYW5lcyA9IG5ldyBWZWN0b3I0KCk7XHJcbmNvbnN0IHNjcmF0Y2hQbGFuZSA9IG5ldyBQbGFuZShuZXcgVmVjdG9yMygxLjAsIDAuMCwgMC4wKSwgMC4wKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEN1bGxpbmdWb2x1bWU7XHJcbiIsImltcG9ydCBDdWxsaW5nVm9sdW1lIGZyb20gXCIuLi9jb3JlL0N1bGxpbmdWb2x1bWVcIjtcclxuaW1wb3J0IFJlbmRlck9iamVjdCBmcm9tIFwiLi4vY29yZS9SZW5kZXJPYmplY3RcIjtcclxuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4uL21hdGgvTWF0cml4NFwiO1xyXG5pbXBvcnQgUGxhbmUgZnJvbSBcIi4uL21hdGgvUGxhbmVcIjtcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xyXG5pbXBvcnQgU2hhZGVyRGF0YSBmcm9tIFwiLi4vcmVuZGVyL1NoYWRlckRhdGFcIjtcclxuaW1wb3J0IFVuaWZvcm1CdWZmZXIgZnJvbSBcIi4uL3JlbmRlci9Vbmlmb3JtQnVmZmVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW1lcmEgZXh0ZW5kcyBSZW5kZXJPYmplY3Qge1xyXG5cdHByaXZhdGUgX3ZpZXdNYXRyaXg6IE1hdHJpeDQ7XHJcblx0cHJvdGVjdGVkIF9wcm9qZWN0aW9uTWF0cml4OiBNYXRyaXg0O1xyXG5cdHByaXZhdGUgX3ZwTWF0cml4OiBNYXRyaXg0O1xyXG5cdGN1bGxpbmdWb2x1bWU6IEN1bGxpbmdWb2x1bWU7XHJcblx0cHJvamVjdE1hdHJpeERpcnR5OiBib29sZWFuO1xyXG5cdHNoYWRlckRhdGE6IFNoYWRlckRhdGE7XHJcblx0bmVhcjogbnVtYmVyO1xyXG5cdGZhcjogbnVtYmVyO1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuX3ZpZXdNYXRyaXggPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLmlzQ2FtZXJhID0gdHJ1ZTtcclxuXHRcdHRoaXMuY3VsbGluZ1ZvbHVtZSA9IG5ldyBDdWxsaW5nVm9sdW1lKCk7XHJcblx0XHR0aGlzLl92aWV3TWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcclxuXHRcdHRoaXMuX3ZwTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcclxuXHRcdHRoaXMucHJvamVjdE1hdHJpeERpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuY3JlYXRlU2hhZGVyRGF0YSgpO1xyXG5cdH1cclxuXHRnZXQgdmlld01hdHJpeCgpIHtcclxuXHRcdHRoaXMudXBkYXRlTWF0cml4KCk7XHJcblx0XHRNYXRyaXg0LmludmVyc2UodGhpcy5tb2RlbE1hdHJpeCwgdGhpcy5fdmlld01hdHJpeCk7XHJcblx0XHRyZXR1cm4gdGhpcy5fdmlld01hdHJpeDtcclxuXHR9XHJcblx0Z2V0IHByb2plY3Rpb25NYXRyaXgoKSB7XHJcblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHRcdHJldHVybiB0aGlzLl9wcm9qZWN0aW9uTWF0cml4O1xyXG5cdH1cclxuXHJcblx0Z2V0IHZwTWF0cml4KCkge1xyXG5cdFx0TWF0cml4NC5tdWx0aXBseSh0aGlzLnByb2plY3Rpb25NYXRyaXgsIHRoaXMudmlld01hdHJpeCwgdGhpcy5fdnBNYXRyaXgpO1xyXG5cdFx0cmV0dXJuIHRoaXMuX3ZwTWF0cml4O1xyXG5cdH1cclxuXHJcblx0Z2V0IGludmVyc2VWaWV3TWF0cml4KCkge1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHRcdHJldHVybiB0aGlzLm1vZGVsTWF0cml4O1xyXG5cdH1cclxuXHRwdWJsaWMgdXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHt9XHJcblx0LyoqXHJcblx0ICogZ2V0IGEgY3VsbGluZyB2b2x1bWUgZm9yIHRoaXMgZnJ1c3R1bS5cclxuXHQgKi9cclxuXHRnZXRDdWxsaW5nVm9sdW1lKCkge1xyXG5cdFx0Y29uc3QgY2xvbmVWaWV3TWF0cml4ID0gdGhpcy52aWV3TWF0cml4LmNsb25lKG5ldyBNYXRyaXg0KCkpO1xyXG5cdFx0Y29uc3QgdnBNYXRyaXggPSBNYXRyaXg0Lm11bHRpcGx5KHRoaXMucHJvamVjdGlvbk1hdHJpeCwgY2xvbmVWaWV3TWF0cml4LCBuZXcgTWF0cml4NCgpKTtcclxuXHRcdGNvbnN0IHBsYW5lcyA9IHRoaXMuY3VsbGluZ1ZvbHVtZS5wbGFuZXM7XHJcblx0XHRjb25zdCBtZSA9IHZwTWF0cml4O1xyXG5cdFx0Y29uc3QgbWUwID0gbWVbMF0sXHJcblx0XHRcdG1lMSA9IG1lWzFdLFxyXG5cdFx0XHRtZTIgPSBtZVsyXSxcclxuXHRcdFx0bWUzID0gbWVbM107XHJcblx0XHRjb25zdCBtZTQgPSBtZVs0XSxcclxuXHRcdFx0bWU1ID0gbWVbNV0sXHJcblx0XHRcdG1lNiA9IG1lWzZdLFxyXG5cdFx0XHRtZTcgPSBtZVs3XTtcclxuXHRcdGNvbnN0IG1lOCA9IG1lWzhdLFxyXG5cdFx0XHRtZTkgPSBtZVs5XSxcclxuXHRcdFx0bWUxMCA9IG1lWzEwXSxcclxuXHRcdFx0bWUxMSA9IG1lWzExXTtcclxuXHRcdGNvbnN0IG1lMTIgPSBtZVsxMl0sXHJcblx0XHRcdG1lMTMgPSBtZVsxM10sXHJcblx0XHRcdG1lMTQgPSBtZVsxNF0sXHJcblx0XHRcdG1lMTUgPSBtZVsxNV07XHJcblx0XHRwbGFuZXNbMF0gPSBuZXcgUGxhbmUobmV3IFZlY3RvcjMobWUzIC0gbWUwLCBtZTcgLSBtZTQsIG1lMTEgLSBtZTgpLCBtZTE1IC0gbWUxMik7XHJcblx0XHRwbGFuZXNbMF0ubm9ybWFsaXplKCk7XHJcblx0XHRwbGFuZXNbMV0gPSBuZXcgUGxhbmUobmV3IFZlY3RvcjMobWUzICsgbWUwLCBtZTcgKyBtZTQsIG1lMTEgKyBtZTgpLCBtZTE1ICsgbWUxMik7XHJcblx0XHRwbGFuZXNbMV0ubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0cGxhbmVzWzJdID0gbmV3IFBsYW5lKG5ldyBWZWN0b3IzKG1lMyArIG1lMSwgbWU3ICsgbWU1LCBtZTExICsgbWU5KSwgbWUxNSArIG1lMTMpO1xyXG5cdFx0cGxhbmVzWzJdLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdHBsYW5lc1szXSA9IG5ldyBQbGFuZShuZXcgVmVjdG9yMyhtZTMgLSBtZTEsIG1lNyAtIG1lNSwgbWUxMSAtIG1lOSksIG1lMTUgLSBtZTEzKTtcclxuXHRcdHBsYW5lc1szXS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRwbGFuZXNbNF0gPSBuZXcgUGxhbmUobmV3IFZlY3RvcjMobWUzIC0gbWUyLCBtZTcgLSBtZTYsIG1lMTEgLSBtZTEwKSwgbWUxNSAtIG1lMTQpO1xyXG5cdFx0cGxhbmVzWzRdLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdHBsYW5lc1s1XSA9IG5ldyBQbGFuZShuZXcgVmVjdG9yMyhtZTMgKyBtZTIsIG1lNyArIG1lNiwgbWUxMSArIG1lMTApLCBtZTE1ICsgbWUxNCk7XHJcblx0XHRwbGFuZXNbNV0ubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuY3VsbGluZ1ZvbHVtZTtcclxuXHR9XHJcblx0cHJpdmF0ZSBjcmVhdGVTaGFkZXJEYXRhKCkge1xyXG5cdFx0dGhpcy5zaGFkZXJEYXRhID0gbmV3IFNoYWRlckRhdGEoXCJjYW1lcmFcIiwgMCwgMSwgMSk7XHJcblx0XHRjb25zdCB1bmlmb3JtQnVmZmVyID0gbmV3IFVuaWZvcm1CdWZmZXIoXCJjYW1lcmFcIik7XHJcblx0XHR1bmlmb3JtQnVmZmVyLnNldE1hdHJpeDQoXCJwcm9qZWN0aW9uTWF0cml4XCIsICgpID0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucHJvamVjdGlvbk1hdHJpeDtcclxuXHRcdH0pO1xyXG5cdFx0dW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXg0KFwidmlld01hdHJpeFwiLCAoKSA9PiB7XHJcblx0XHRcdHJldHVybiB0aGlzLnZpZXdNYXRyaXg7XHJcblx0XHR9KTtcclxuXHRcdHVuaWZvcm1CdWZmZXIuc2V0TWF0cml4NChcImludmVyc2VWaWV3TWF0cml4XCIsICgpID0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuaW52ZXJzZVZpZXdNYXRyaXg7XHJcblx0XHR9KTtcclxuXHRcdHVuaWZvcm1CdWZmZXIuc2V0RmxvYXRWZWMzKFwicG9zaXRpb25cIiwgKCkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wb3NpdGlvbjtcclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5zaGFkZXJEYXRhLnNldFVuaWZvcm1CdWZmZXIoXCJjYW1lcmFcIiwgdW5pZm9ybUJ1ZmZlcik7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCBDdWxsaW5nVm9sdW1lIGZyb20gXCIuLi9jb3JlL0N1bGxpbmdWb2x1bWVcIjtcclxuaW1wb3J0IEdNYXRoIGZyb20gXCIuLi9tYXRoL01hdGhcIjtcclxuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4uL21hdGgvTWF0cml4NFwiO1xyXG5pbXBvcnQgQ2FtZXJhIGZyb20gXCIuL0NhbWVyYVwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJzcGVjdGl2ZUNhbWVyYSBleHRlbmRzIENhbWVyYSB7XHJcbiAgeE9mZnNldDogbnVtYmVyO1xyXG4gIHlPZmZzZXQ6IG51bWJlcjtcclxuICBjdWxsaW5nVm9sdW1lOiBhbnk7XHJcbiAgcHJpdmF0ZSBfYXNwZWN0OiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfZm92OiBudW1iZXI7XHJcbiAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgd2lkdGg6IG51bWJlcjtcclxuICBpc1BlcnNwZWN0aXZlQ2FtZXJhOiBib29sZWFuO1xyXG4gIG5lYXI6IG51bWJlcjtcclxuICBmYXI6IG51bWJlcjtcclxuICB0b3A6IG51bWJlcjtcclxuICBsZWZ0OiBudW1iZXI7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBmb3Y6IG51bWJlciA9IDUwLFxyXG4gICAgYXNwZWN0OiBudW1iZXIgPSAxLFxyXG4gICAgbmVhcjogbnVtYmVyID0gMC4xLFxyXG4gICAgZmFyOiBudW1iZXIgPSAyMDAwXHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5fYXNwZWN0ID0gYXNwZWN0O1xyXG4gICAgdGhpcy5mb3YgPSBmb3Y7XHJcbiAgICB0aGlzLm5lYXIgPSBuZWFyO1xyXG4gICAgdGhpcy5mYXIgPSBmYXI7XHJcbiAgICB0aGlzLnhPZmZzZXQgPSAwO1xyXG4gICAgdGhpcy55T2Zmc2V0ID0gMDtcclxuICAgIHRoaXMucHJvamVjdE1hdHJpeERpcnR5ID0gdHJ1ZTtcclxuICAgIHRoaXMudXBkYXRlQ2FtZXJhUGFybXMoKTtcclxuICAgIHRoaXMuY3VsbGluZ1ZvbHVtZSA9IG5ldyBDdWxsaW5nVm9sdW1lKCk7XHJcbiAgICB0aGlzLmlzUGVyc3BlY3RpdmVDYW1lcmEgPSB0cnVlO1xyXG4gIH1cclxuICBnZXQgYXNwZWN0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXNwZWN0O1xyXG4gIH1cclxuXHJcbiAgc2V0IGFzcGVjdCh2OiBudW1iZXIpIHtcclxuICAgIHRoaXMucHJvamVjdE1hdHJpeERpcnR5ID0gdHJ1ZTtcclxuICAgIHRoaXMuX2FzcGVjdCA9IHY7XHJcbiAgfVxyXG4gIGdldCBmb3YoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9mb3Y7XHJcbiAgfVxyXG5cclxuICBzZXQgZm92KHY6IG51bWJlcikge1xyXG4gICAgdGhpcy5wcm9qZWN0TWF0cml4RGlydHkgPSB0cnVlO1xyXG4gICAgdGhpcy5fZm92ID0gdjtcclxuICB9XHJcbiAgcHJpdmF0ZSB1cGRhdGVDYW1lcmFQYXJtcygpIHtcclxuICAgIHRoaXMudG9wID0gdGhpcy5uZWFyICogTWF0aC50YW4oMC41ICogR01hdGguUkFESUFOU19QRVJfREVHUkVFICogdGhpcy5mb3YpO1xyXG4gICAgdGhpcy5oZWlnaHQgPSAyICogdGhpcy50b3A7XHJcbiAgICB0aGlzLndpZHRoID0gdGhpcy5hc3BlY3QgKiB0aGlzLmhlaWdodDtcclxuICAgIHRoaXMubGVmdCA9IC0wLjUgKiB0aGlzLndpZHRoO1xyXG4gIH1cclxuICBwdWJsaWMgdXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHtcclxuICAgIGlmICh0aGlzLnByb2plY3RNYXRyaXhEaXJ0eSkge1xyXG4gICAgICB0aGlzLnVwZGF0ZUNhbWVyYVBhcm1zKCk7XHJcbiAgICAgIHRoaXMuX3Byb2plY3Rpb25NYXRyaXggPSBNYXRyaXg0Lm1ha2VQZXJzcGVjdGl2ZShcclxuICAgICAgICB0aGlzLmxlZnQsXHJcbiAgICAgICAgdGhpcy5sZWZ0ICsgdGhpcy53aWR0aCxcclxuICAgICAgICB0aGlzLnRvcCxcclxuICAgICAgICB0aGlzLnRvcCAtIHRoaXMuaGVpZ2h0LFxyXG4gICAgICAgIHRoaXMubmVhcixcclxuICAgICAgICB0aGlzLmZhclxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLnByb2plY3RNYXRyaXhEaXJ0eSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTWF0cml4NCBmcm9tIFwiLi4vbWF0aC9NYXRyaXg0XCI7XHJcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4vQ2FtZXJhXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ydGhvZ3JhcGhpY0NhbWVyYSBleHRlbmRzIENhbWVyYSB7XHJcbiAgcHJpdmF0ZSByaWdodDogbnVtYmVyO1xyXG4gIGlzT3J0aG9ncmFwaGljQ2FtZXJhOiBib29sZWFuO1xyXG4gIGJvdHRvbTogbnVtYmVyO1xyXG4gIGxlZnQ6IG51bWJlcjtcclxuICBuZWFyOiBudW1iZXI7XHJcbiAgZmFyOiBudW1iZXI7XHJcbiAgdG9wOiBudW1iZXI7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBsZWZ0OiBudW1iZXIgPSAtMSxcclxuICAgIHJpZ2h0OiBudW1iZXIgPSAxLFxyXG4gICAgdG9wOiBudW1iZXIgPSAxLFxyXG4gICAgYm90dG9tOiBudW1iZXIgPSAtMSxcclxuICAgIG5lYXI6IG51bWJlciA9IDAuMSxcclxuICAgIGZhcjogbnVtYmVyID0gMjAwMFxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMubmVhciA9IG5lYXI7XHJcbiAgICB0aGlzLmZhciA9IGZhcjtcclxuICAgIHRoaXMubGVmdCA9IGxlZnQ7XHJcbiAgICB0aGlzLnRvcCA9IHRvcDtcclxuICAgIHRoaXMuYm90dG9tID0gYm90dG9tO1xyXG4gICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xyXG4gICAgdGhpcy5pc09ydGhvZ3JhcGhpY0NhbWVyYSA9IHRydWU7XHJcbiAgfVxyXG4gIHByaXZhdGUgdXBkYXRlQ2FtZXJhUGFybXMoKSB7XHJcbiAgICBjb25zdCBkeCA9ICh0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0KSAvIDI7XHJcbiAgICBjb25zdCBkeSA9ICh0aGlzLnRvcCAtIHRoaXMuYm90dG9tKSAvIDI7XHJcbiAgICBjb25zdCBjeCA9ICh0aGlzLnJpZ2h0ICsgdGhpcy5sZWZ0KSAvIDI7XHJcbiAgICBjb25zdCBjeSA9ICh0aGlzLnRvcCArIHRoaXMuYm90dG9tKSAvIDI7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBsZWZ0OiBjeCAtIGR4LFxyXG4gICAgICByaWdodDogY3ggKyBkeCxcclxuICAgICAgdG9wOiBjeSArIGR5LFxyXG4gICAgICBib3R0b206IGN5IC0gZHksXHJcbiAgICB9O1xyXG4gIH1cclxuICBwdWJsaWMgdXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHtcclxuICAgIGlmICh0aGlzLnByb2plY3RNYXRyaXhEaXJ0eSkge1xyXG4gICAgICBjb25zdCB7IGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSB9ID0gdGhpcy51cGRhdGVDYW1lcmFQYXJtcygpO1xyXG4gICAgICB0aGlzLl9wcm9qZWN0aW9uTWF0cml4ID0gTWF0cml4NC5tYWtlT3J0aG9ncmFwaGljKFxyXG4gICAgICAgIGxlZnQsXHJcbiAgICAgICAgcmlnaHQsXHJcbiAgICAgICAgdG9wLFxyXG4gICAgICAgIGJvdHRvbSxcclxuICAgICAgICB0aGlzLm5lYXIsXHJcbiAgICAgICAgdGhpcy5mYXJcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5wcm9qZWN0TWF0cml4RGlydHkgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTGlnaHQgfSBmcm9tIFwiLi4vTGlnaHRcIjtcclxuaW1wb3J0IENhbWVyYSBmcm9tIFwiLi4vLi4vY2FtZXJhL0NhbWVyYVwiO1xyXG5pbXBvcnQgeyBUZXh0dXJlRm9ybWF0LCBUZXh0dXJlU2FtcGxlVHlwZSwgVGV4dHVyZVVzYWdlIH0gZnJvbSBcIi4uLy4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcclxuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uLy4uL3JlbmRlci9UZXh0dXJlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZVNoYWRvdyB7XHJcblx0cHJvdGVjdGVkIF9zaGFkb3dNYXBTaXplOiBudW1iZXI7XHJcblx0cHJvdGVjdGVkIF9jYW1lcmE6IENhbWVyYTtcclxuXHRwcm90ZWN0ZWQgX3NoYWRvd01hcDogVGV4dHVyZTtcclxuXHJcblx0Y29uc3RydWN0b3Ioc2hhZG93TWFwU2l6ZTogbnVtYmVyLCBjYW1lcmE6IENhbWVyYSkge1xyXG5cdFx0dGhpcy5fc2hhZG93TWFwU2l6ZSA9IHNoYWRvd01hcFNpemU7XHJcblx0XHR0aGlzLl9jYW1lcmEgPSBjYW1lcmE7XHJcblxyXG5cdFx0dGhpcy5faW5pdCgpO1xyXG5cdH1cclxuXHJcblx0Z2V0IGNhbWVyYSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9jYW1lcmE7XHJcblx0fVxyXG5cclxuXHRnZXQgc2hhZG93TWFwU2l6ZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9zaGFkb3dNYXBTaXplO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldFNoYWRvd01hcFRleHR1cmUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fc2hhZG93TWFwO1xyXG5cdH1cclxuXHJcblx0cHJvdGVjdGVkIF9pbml0KCkge1xyXG5cdFx0dGhpcy5faW5pdFNoYWRvd01hcFRleHR1cmUoKTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBfaW5pdFNoYWRvd01hcFRleHR1cmUoKSB7XHJcblx0XHR0aGlzLl9jcmVhdGVTaGFkb3dNYXBUZXh0dXJlKCk7XHJcblx0fVxyXG5cclxuXHRwcm90ZWN0ZWQgX2NyZWF0ZVNoYWRvd01hcFRleHR1cmUoKSB7XHJcblx0XHR0aGlzLl9zaGFkb3dNYXAgPSBuZXcgVGV4dHVyZSh7XHJcblx0XHRcdHNpemU6IHtcclxuXHRcdFx0XHR3aWR0aDogdGhpcy5fc2hhZG93TWFwU2l6ZSxcclxuXHRcdFx0XHRoZWlnaHQ6IHRoaXMuX3NoYWRvd01hcFNpemUsXHJcblx0XHRcdFx0ZGVwdGg6IDFcclxuXHRcdFx0fSxcclxuXHRcdFx0Zml4ZWRTaXplOiB0cnVlLFxyXG5cdFx0XHRzYW1wbGVUeXBlOiBUZXh0dXJlU2FtcGxlVHlwZS5EZXB0aCxcclxuXHRcdFx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0LkRlcHRoMjRQbHVzLFxyXG5cdFx0XHR1c2FnZTogVGV4dHVyZVVzYWdlLlJlbmRlckF0dGFjaG1lbnQgfCBUZXh0dXJlVXNhZ2UuVGV4dHVyZUJpbmRpbmcgfCBUZXh0dXJlVXNhZ2UuQ29weVNyY1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgdXBkYXRlKGxpZ2h0OiBMaWdodCkge31cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlU2hhZG93IH0gZnJvbSBcIi4vQmFzZVNoYWRvd1wiO1xyXG5pbXBvcnQgUGVyc3BlY3RpdmVDYW1lcmEgZnJvbSBcIi4uLy4uL2NhbWVyYS9QZXJzcGVjdGl2ZUNhbWVyYVwiO1xyXG5pbXBvcnQgeyBTcG90TGlnaHQgfSBmcm9tIFwiLi4vU3BvdExpZ2h0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3BvdExpZ2h0U2hhZG93IGV4dGVuZHMgQmFzZVNoYWRvdyB7XHJcblx0cHVibGljIHR5cGU6IHN0cmluZztcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdGNvbnN0IGNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSg2MCwgMSwgMC4xLCA1MDApO1xyXG5cdFx0c3VwZXIoMTAyNCwgY2FtZXJhKTtcclxuXHRcdHRoaXMudHlwZSA9IFwic3BvdExpZ2h0U2hhZG93XCI7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgdXBkYXRlKGxpZ2h0OiBTcG90TGlnaHQpIHtcclxuXHRcdHRoaXMudXBkYXRlTWF0cmljZXMobGlnaHQpO1xyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cmljZXMobGlnaHQ6IFNwb3RMaWdodCkge1xyXG5cdFx0dGhpcy5jYW1lcmEucG9zaXRpb24uY29weShsaWdodC5wb3NpdGlvbik7XHJcblx0XHRjb25zdCB7IHgsIHksIHogfSA9IGxpZ2h0LnRhcmdldDtcclxuXHRcdHRoaXMuY2FtZXJhLmxvb2tBdCh4LCB5LCB6KTtcclxuXHRcdHRoaXMuY2FtZXJhLnVwZGF0ZU1hdHJpeCgpO1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvQ2FtZXJhXCI7XHJcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuaW1wb3J0IHsgTGlnaHQgfSBmcm9tIFwiLi9MaWdodFwiO1xyXG5pbXBvcnQgeyBTcG90TGlnaHRTaGFkb3cgfSBmcm9tIFwiLi9zaGFkb3dzL1Nwb3RMaWdodFNoYWRvd1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNwb3RMaWdodCBleHRlbmRzIExpZ2h0IHtcclxuXHRwcml2YXRlIF9kaXN0YW5jZTogbnVtYmVyO1xyXG5cdHByaXZhdGUgX2FuZ2xlOiBudW1iZXI7XHJcblx0cHJpdmF0ZSBfcGVudW1icmE6IG51bWJlcjtcclxuXHRwcml2YXRlIF9kZWNheTogbnVtYmVyO1xyXG5cdGRlY2F5RGlydHk6IGJvb2xlYW47XHJcblx0ZGlzdGFuY2VEaXJ0eTogYm9vbGVhbjtcclxuXHRwcml2YXRlIF9jb25lQ29zOiBudW1iZXI7XHJcblx0cHJpdmF0ZSBfcGVudW1icmFDb3M6IG51bWJlcjtcclxuXHRjb25lQ29zRGlydHk6IGJvb2xlYW47XHJcblx0cGVudW1icmFEaXJ0eTogYm9vbGVhbjtcclxuXHRhbmdsZURpcnR5OiBib29sZWFuO1xyXG5cdHBlbnVtYnJhQ29zRGlydHk6IGJvb2xlYW47XHJcblx0Y29uc3RydWN0b3IoY29sb3IsIGludGVuc2l0eSwgZGlzdGFuY2UgPSAwLCBhbmdsZSA9IDYwLCBwZW51bWJyYSA9IDYwLCBkZWNheSA9IDQsIG9wZW5TaGFkb3cgPSB0cnVlKSB7XHJcblx0XHRzdXBlcihjb2xvciwgaW50ZW5zaXR5KTtcclxuXHRcdHRoaXMuX2Rpc3RhbmNlID0gZGlzdGFuY2U7XHJcblx0XHR0aGlzLl9hbmdsZSA9IChhbmdsZSAvIDE4MCkgKiBNYXRoLlBJO1xyXG5cdFx0dGhpcy5fcGVudW1icmEgPSAocGVudW1icmEgLyAxODApICogTWF0aC5QSTtcclxuXHRcdHRoaXMuX2RlY2F5ID0gZGVjYXk7XHJcblx0XHR0aGlzLnR5cGUgPSBcInNwb3RcIjtcclxuXHRcdHRoaXMuYW5nbGVEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLnBlbnVtYnJhRGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5kaXN0YW5jZURpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuZGVjYXlEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLmNvbmVDb3NEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLnBlbnVtYnJhQ29zRGlydHkgPSB0cnVlO1xyXG5cdFx0aWYgKG9wZW5TaGFkb3cpIHRoaXMuc2hhZG93ID0gbmV3IFNwb3RMaWdodFNoYWRvdygpO1xyXG5cdFx0dGhpcy51cGRhdGVDb25lQ29zT3JQZW51bWJyYUNvcygpO1xyXG5cdH1cclxuXHJcblx0Z2V0IGRpcnRlY3REaXJ0eSgpIHtcclxuXHRcdHJldHVybiB0aGlzLnBvc2l0aW9uRGlydHkgfHwgdGhpcy50YXJnZXREaXJ0eTtcclxuXHR9XHJcblxyXG5cdHNldCBkaXJ0ZWN0RGlydHkodmFsdWUpIHtcclxuXHRcdHRoaXMucG9zaXRpb25EaXJ0eSA9IHZhbHVlO1xyXG5cdFx0dGhpcy50YXJnZXREaXJ0eSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IGRpcmVjdGlvbmFsKCkge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdFZlY3RvcjMuc3VidHJhY3QodGhpcy5wb3NpdGlvbiwgdGhpcy50YXJnZXQsIHJlc3VsdCk7XHJcblx0XHRyZXR1cm4gVmVjdG9yMy5ub3JtYWxpemUocmVzdWx0LCBuZXcgVmVjdG9yMygpKTtcclxuXHR9XHJcblx0Z2V0IGFuZ2xlKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2FuZ2xlO1xyXG5cdH1cclxuXHRzZXQgYW5nbGUodmFsdWUpIHtcclxuXHRcdHRoaXMuYW5nbGVEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLl9hbmdsZSA9ICh2YWx1ZSAvIDE4MCkgKiBNYXRoLlBJO1xyXG5cdFx0dGhpcy51cGRhdGVDb25lQ29zT3JQZW51bWJyYUNvcygpO1xyXG5cdH1cclxuXHRnZXQgcGVudW1icmEoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fcGVudW1icmE7XHJcblx0fVxyXG5cdHNldCBwZW51bWJyYSh2YWx1ZSkge1xyXG5cdFx0dGhpcy5wZW51bWJyYURpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuX3BlbnVtYnJhID0gKHZhbHVlIC8gMTgwKSAqIE1hdGguUEk7XHJcblx0XHR0aGlzLnVwZGF0ZUNvbmVDb3NPclBlbnVtYnJhQ29zKCk7XHJcblx0fVxyXG5cdHNldCBkaXN0YW5jZSh2YWx1ZSkge1xyXG5cdFx0dGhpcy5kaXN0YW5jZURpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuX2Rpc3RhbmNlID0gdmFsdWU7XHJcblx0fVxyXG5cdGdldCBkaXN0YW5jZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9kaXN0YW5jZTtcclxuXHR9XHJcblx0c2V0IGRlY2F5KHZhbHVlKSB7XHJcblx0XHR0aGlzLmRlY2F5RGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5fZGVjYXkgPSB2YWx1ZTtcclxuXHR9XHJcblx0Z2V0IGRlY2F5KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2RlY2F5O1xyXG5cdH1cclxuXHRzZXQgY29uZUNvcyh2YWx1ZSkge1xyXG5cdFx0dGhpcy5jb25lQ29zRGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5fY29uZUNvcyA9IHZhbHVlO1xyXG5cdH1cclxuXHRnZXQgY29uZUNvcygpIHtcclxuXHRcdHJldHVybiB0aGlzLl9jb25lQ29zO1xyXG5cdH1cclxuXHRzZXQgcGVudW1icmFDb3ModmFsdWUpIHtcclxuXHRcdHRoaXMucGVudW1icmFDb3NEaXJ0eSA9IHRydWU7XHJcblx0XHR0aGlzLl9wZW51bWJyYUNvcyA9IHZhbHVlO1xyXG5cdH1cclxuXHRnZXQgcGVudW1icmFDb3MoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fcGVudW1icmFDb3M7XHJcblx0fVxyXG5cdHByaXZhdGUgdXBkYXRlQ29uZUNvc09yUGVudW1icmFDb3MoKSB7XHJcblx0XHR0aGlzLl9jb25lQ29zID0gTWF0aC5jb3ModGhpcy5hbmdsZSk7XHJcblx0XHR0aGlzLl9wZW51bWJyYUNvcyA9IE1hdGguY29zKHRoaXMuYW5nbGUgKyB0aGlzLnBlbnVtYnJhKTtcclxuXHR9XHJcbn1cclxuLy91bmlmb3JtXHJcbi8vIGNvbG9yOiB7fSxcclxuLy8gcG9zaXRpb246IHt9LFxyXG4vLyBkaXJlY3Rpb246IHt9LFxyXG4vLyBkaXN0YW5jZToge30sXHJcbi8vIGNvbmVDb3M6IHt9LFxyXG4vLyBwZW51bWJyYUNvczoge30sXHJcbi8vIGRlY2F5OiB7fVxyXG4iLCJpbXBvcnQgeyBMaWdodCB9IGZyb20gXCIuLi9MaWdodFwiO1xyXG5pbXBvcnQgeyBCYXNlU2hhZG93IH0gZnJvbSBcIi4vQmFzZVNoYWRvd1wiO1xyXG5pbXBvcnQgUGVyc3BlY3RpdmVDYW1lcmEgZnJvbSBcIi4uLy4uL2NhbWVyYS9QZXJzcGVjdGl2ZUNhbWVyYVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvaW50TGlnaHRTaGFkb3cgZXh0ZW5kcyBCYXNlU2hhZG93IHtcclxuXHRwdWJsaWMgdHlwZTogc3RyaW5nO1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0Y29uc3QgY2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKDYwLCAxLCAwLjEsIDUwMCk7XHJcblx0XHRzdXBlcigxMDI0LCBjYW1lcmEpO1xyXG5cdFx0dGhpcy50eXBlID0gXCJwb2ludExpZ2h0U2hhZG93XCI7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCBDb2xvciBmcm9tIFwiLi4vbWF0aC9Db2xvclwiO1xyXG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XHJcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4vTGlnaHRcIjtcclxuaW1wb3J0IHsgUG9pbnRMaWdodFNoYWRvdyB9IGZyb20gXCIuL3NoYWRvd3MvUG9pbnRMaWdodFNoYWRvd1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvaW50TGlnaHQgZXh0ZW5kcyBMaWdodCB7XHJcblx0cHJpdmF0ZSBfZGlzdGFuY2U6IG51bWJlcjtcclxuXHRwcml2YXRlIF9kZWNheTogbnVtYmVyO1xyXG5cdGRpc3RhbmNlRGlydHk6IGJvb2xlYW47XHJcblx0ZGVjYXlEaXJ0eTogYm9vbGVhbjtcclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdGNvbG9yOiBWZWN0b3IzLFxyXG5cdFx0aW50ZW5zaXR5OiBudW1iZXIsXHJcblx0XHRkaXN0YW5jZTogbnVtYmVyID0gMCxcclxuXHRcdGRlY2F5OiBudW1iZXIgPSA0LFxyXG5cdFx0b3BlblNoYWRvdzogQm9vbGVhbiA9IHRydWVcclxuXHQpIHtcclxuXHRcdHN1cGVyKGNvbG9yLCBpbnRlbnNpdHkpO1xyXG5cdFx0dGhpcy5fZGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuXHRcdHRoaXMuX2RlY2F5ID0gZGVjYXk7XHJcblx0XHR0aGlzLmRpc3RhbmNlRGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5kZWNheURpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMudHlwZSA9IFwicG9pbnRcIjtcclxuXHRcdGlmIChvcGVuU2hhZG93KSB0aGlzLnNoYWRvdyA9IG5ldyBQb2ludExpZ2h0U2hhZG93KCk7XHJcblx0fVxyXG5cdHNldCBkaXN0YW5jZSh2YWx1ZSkge1xyXG5cdFx0dGhpcy5kaXN0YW5jZURpcnR5ID0gdHJ1ZTtcclxuXHRcdHRoaXMuX2Rpc3RhbmNlID0gdmFsdWU7XHJcblx0fVxyXG5cdGdldCBkaXN0YW5jZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9kaXN0YW5jZTtcclxuXHR9XHJcblx0c2V0IGRlY2F5KHZhbHVlKSB7XHJcblx0XHR0aGlzLmRlY2F5RGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5fZGVjYXkgPSB2YWx1ZTtcclxuXHR9XHJcblx0Z2V0IGRlY2F5KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2RlY2F5O1xyXG5cdH1cclxufVxyXG4vL3VuaWZvcm1cclxuLy8gY29sb3I6IHt9LFxyXG4vLyBwb3NpdGlvbjoge30sXHJcbi8vIGRlY2F5OiB7fSxcclxuLy8gZGlzdGFuY2U6IHt9XHJcbiIsImltcG9ydCB7IEJhc2VTaGFkb3cgfSBmcm9tIFwiLi9CYXNlU2hhZG93XCI7XHJcbmltcG9ydCBPcnRob2dyYXBoaWNDYW1lcmEgZnJvbSBcIi4uLy4uL2NhbWVyYS9PcnRob2dyYXBoaWNDYW1lcmFcIjtcclxuaW1wb3J0IHsgRGlyZWN0aW9uYWxMaWdodCB9IGZyb20gXCIuLi9EaXJlY3Rpb25hbExpZ2h0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRGlyZWN0aW9uYWxMaWdodFNoYWRvdyBleHRlbmRzIEJhc2VTaGFkb3cge1xyXG5cdHB1YmxpYyB0eXBlOiBzdHJpbmc7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRjb25zdCBjYW1lcmEgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKC01MCwgNTAsIDUwLCAtNTAsIDAsIDEwMCk7XHJcblx0XHRzdXBlcigxMDI0LCBjYW1lcmEpO1xyXG5cdFx0dGhpcy50eXBlID0gXCJkaXJlY3Rpb25hbExpZ2h0U2hhZG93XCI7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgdXBkYXRlKGxpZ2h0OiBEaXJlY3Rpb25hbExpZ2h0KSB7XHJcblx0XHR0aGlzLnVwZGF0ZU1hdHJpY2VzKGxpZ2h0KTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZU1hdHJpY2VzKGxpZ2h0OiBEaXJlY3Rpb25hbExpZ2h0KSB7XHJcblx0XHR0aGlzLmNhbWVyYS5wb3NpdGlvbi5jb3B5KGxpZ2h0LnBvc2l0aW9uKTtcclxuXHRcdGNvbnN0IHsgeCwgeSwgeiB9ID0gbGlnaHQudGFyZ2V0O1xyXG5cdFx0dGhpcy5jYW1lcmEubG9va0F0KHgsIHksIHopO1xyXG5cdFx0dGhpcy5jYW1lcmEudXBkYXRlTWF0cml4KCk7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcbmltcG9ydCBSZW5kZXJPYmplY3QgZnJvbSBcIi4uL2NvcmUvUmVuZGVyT2JqZWN0XCI7XG5pbXBvcnQgQ29sb3IgZnJvbSBcIi4uL21hdGgvQ29sb3JcIjtcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4vTGlnaHRcIjtcbmltcG9ydCB7IERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgfSBmcm9tIFwiLi9zaGFkb3dzL0RpcmVjdGlvbmFsTGlnaHRTaGFkb3dcIjtcblxuZXhwb3J0IGNsYXNzIERpcmVjdGlvbmFsTGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cdGNvbnN0cnVjdG9yKGNvbG9yOiBWZWN0b3IzLCBpbnRlbnNpdHk6IG51bWJlciwgb3BlblNoYWRvdzogQm9vbGVhbiA9IHRydWUpIHtcblx0XHRzdXBlcihjb2xvciwgaW50ZW5zaXR5KTtcblx0XHR0aGlzLnR5cGUgPSBcImRpcmVjdGlvbmFsXCI7XG5cdFx0aWYgKG9wZW5TaGFkb3cpIHRoaXMuc2hhZG93ID0gbmV3IERpcmVjdGlvbmFsTGlnaHRTaGFkb3coKTtcblx0fVxuXG5cdGdldCBkaXJ0ZWN0RGlydHkoKSB7XG5cdFx0cmV0dXJuIHRoaXMucG9zaXRpb25EaXJ0eSB8fCB0aGlzLnRhcmdldERpcnR5O1xuXHR9XG5cblx0c2V0IGRpcnRlY3REaXJ0eSh2YWx1ZSkge1xuXHRcdHRoaXMucG9zaXRpb25EaXJ0eSA9IHZhbHVlO1xuXHRcdHRoaXMudGFyZ2V0RGlydHkgPSB2YWx1ZTtcblx0fVxuXG5cdGdldCBkaXJlY3Rpb25hbCgpIHtcblx0XHRjb25zdCByZXN1bHQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFZlY3RvcjMuc3VidHJhY3QodGhpcy50YXJnZXQsIHRoaXMucG9zaXRpb24sIHJlc3VsdCk7XG5cdFx0cmV0dXJuIHJlc3VsdC5ub3JtYWxpemUoKTtcblx0fVxufVxuLy91bmlmb3JtXG4vLyBkaXJlY3Rpb246IHt9LFxuLy8gY29sb3I6IHt9XG4iLCJpbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSBcIi4uL21hdGgvUXVhdGVybmlvblwiO1xuaW1wb3J0IFZlY3RvcjIgZnJvbSBcIi4uL21hdGgvVmVjdG9yMlwiO1xuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAobnVtOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikge1xuXHRyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobnVtLCBtaW4pLCBtYXgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9GbG9hdChudW06IG51bWJlciB8IHVuZGVmaW5lZCwgZGVmYXVsdFZhbHVlID0gMSkge1xuXHRjb25zdCBuID0gbnVtICE9PSB1bmRlZmluZWQgPyBudW0gOiBkZWZhdWx0VmFsdWU7XG5cdGlmIChOdW1iZXIuaXNJbnRlZ2VyKG4pKSB7XG5cdFx0cmV0dXJuIGAke259LjBgO1xuXHR9XG5cdHJldHVybiBuO1xufVxuXG5leHBvcnQgdHlwZSBUeXBlZEFycmF5ID0gSW50OEFycmF5IHwgVWludDhBcnJheSB8IEludDE2QXJyYXkgfCBVaW50MTZBcnJheSB8IFVpbnQzMkFycmF5IHwgRmxvYXQzMkFycmF5O1xuXG5leHBvcnQgZnVuY3Rpb24gbmV3VHlwZWRBcnJheSh0eXBlOiBudW1iZXIsIGJ1ZmZlcjogQXJyYXlCdWZmZXIsIGJ5dGVPZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpIHtcblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Y2FzZSA1MTIwOlxuXHRcdFx0cmV0dXJuIG5ldyBJbnQ4QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuXHRcdGNhc2UgNTEyMTpcblx0XHRcdHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG5cdFx0Y2FzZSA1MTIyOlxuXHRcdFx0cmV0dXJuIG5ldyBJbnQxNkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcblx0XHRjYXNlIDUxMjM6XG5cdFx0XHRyZXR1cm4gbmV3IFVpbnQxNkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcblx0XHRjYXNlIDUxMjQ6XG5cdFx0XHRyZXR1cm4gbmV3IEludDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuXHRcdGNhc2UgNTEyNTpcblx0XHRcdHJldHVybiBuZXcgVWludDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuXHRcdGNhc2UgNTEyNjpcblx0XHRcdHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjb21wb25lbnQgdHlwZVwiKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9JbmRpY2VzKGFycmF5OiBUeXBlZEFycmF5KTogVWludDE2QXJyYXkgfCBVaW50MzJBcnJheSB7XG5cdGlmIChhcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5IHx8IGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkpIHtcblx0XHRyZXR1cm4gYXJyYXk7XG5cdH1cblx0bGV0IHRvQXJyYXk7XG5cdGlmIChhcnJheSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkge1xuXHRcdHRvQXJyYXkgPSBuZXcgVWludDMyQXJyYXkoYXJyYXkubGVuZ3RoKTtcblx0fSBlbHNlIHtcblx0XHR0b0FycmF5ID0gbmV3IFVpbnQxNkFycmF5KGFycmF5Lmxlbmd0aCk7XG5cdH1cblx0YXJyYXkuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcblx0XHR0b0FycmF5W2luZGV4XSA9IGVsZW1lbnQ7XG5cdH0pO1xuXHRyZXR1cm4gdG9BcnJheTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW5BcnJheShhcnJheXM6IEFycmF5PEZsb2F0MzJBcnJheT4pIHtcblx0bGV0IGxlbmd0aCA9IDA7XG5cdGFycmF5cy5mb3JFYWNoKChhcnJheSkgPT4ge1xuXHRcdGxlbmd0aCArPSBhcnJheS5sZW5ndGg7XG5cdH0pO1xuXHRjb25zdCBqb2luZWQgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG5cdGxlbmd0aCA9IDA7XG5cdGFycmF5cy5mb3JFYWNoKChhcnJheSkgPT4ge1xuXHRcdGpvaW5lZC5zZXQoYXJyYXksIGxlbmd0aCk7XG5cdFx0bGVuZ3RoICs9IGFycmF5Lmxlbmd0aDtcblx0fSk7XG5cdHJldHVybiBqb2luZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHUFVCdWZmZXIoYXJyYXk6IFR5cGVkQXJyYXksIHVzYWdlOiBudW1iZXIsIGRldmljZTogR1BVRGV2aWNlKSB7XG5cdGNvbnN0IGJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuXHRcdHNpemU6IChhcnJheS5ieXRlTGVuZ3RoICsgMykgJiB+MywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1iaXR3aXNlXG5cdFx0dXNhZ2UsXG5cdFx0bWFwcGVkQXRDcmVhdGlvbjogdHJ1ZVxuXHR9KTtcblx0bGV0IHdyaXRlQXJhcnk7XG5cdGlmIChhcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSkge1xuXHRcdHdyaXRlQXJhcnkgPSBuZXcgSW50OEFycmF5KGJ1ZmZlci5nZXRNYXBwZWRSYW5nZSgpKTtcblx0fSBlbHNlIGlmIChhcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcblx0XHR3cml0ZUFyYXJ5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmdldE1hcHBlZFJhbmdlKCkpO1xuXHR9IGVsc2UgaWYgKGFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSkge1xuXHRcdHdyaXRlQXJhcnkgPSBuZXcgSW50MTZBcnJheShidWZmZXIuZ2V0TWFwcGVkUmFuZ2UoKSk7XG5cdH0gZWxzZSBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50MTZBcnJheSkge1xuXHRcdHdyaXRlQXJhcnkgPSBuZXcgVWludDE2QXJyYXkoYnVmZmVyLmdldE1hcHBlZFJhbmdlKCkpO1xuXHR9IGVsc2UgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkpIHtcblx0XHR3cml0ZUFyYXJ5ID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlci5nZXRNYXBwZWRSYW5nZSgpKTtcblx0fSBlbHNlIHtcblx0XHR3cml0ZUFyYXJ5ID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIuZ2V0TWFwcGVkUmFuZ2UoKSk7XG5cdH1cblx0d3JpdGVBcmFyeS5zZXQoYXJyYXkpO1xuXHRidWZmZXIudW5tYXAoKTtcblx0cmV0dXJuIGJ1ZmZlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTm9ybWFscyhpbmRpY2VzOiBUeXBlZEFycmF5IHwgbnVsbCwgcG9zaXRpb25zOiBUeXBlZEFycmF5KSB7XG5cdGNvbnN0IG5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KHBvc2l0aW9ucy5sZW5ndGgpO1xuXHRjb25zdCB2ZXJ0ZXhDb3VudCA9IGluZGljZXMgPyBpbmRpY2VzLmxlbmd0aCA6IHBvc2l0aW9ucy5sZW5ndGg7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7IGkgKz0gMykge1xuXHRcdGNvbnN0IHRyaUluZGljZXMgPSBbXTtcblx0XHRmb3IgKGxldCBuID0gMDsgbiA8IDM7IG4gKz0gMSkge1xuXHRcdFx0aWYgKGluZGljZXMpIHtcblx0XHRcdFx0dHJpSW5kaWNlcy5wdXNoKGluZGljZXNbaSArIG5dKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRyaUluZGljZXMucHVzaChpICsgbik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IHRyaWFuZ2xlID0gdHJpSW5kaWNlcy5tYXAoKHZlcnRleEluZGV4KSA9PiB7XG5cdFx0XHRjb25zdCBpbmRleCA9IHZlcnRleEluZGV4ICogMztcblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMyhwb3NpdGlvbnNbaW5kZXhdLCBwb3NpdGlvbnNbaW5kZXggKyAxXSwgcG9zaXRpb25zW2luZGV4ICsgMl0pO1xuXHRcdH0pO1xuXHRcdGNvbnN0IGR2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0VmVjdG9yMy5zdWJ0cmFjdCh0cmlhbmdsZVsxXSwgdHJpYW5nbGVbMF0sIGR2MSk7XG5cdFx0Y29uc3QgZHYyID0gbmV3IFZlY3RvcjMoKTtcblx0XHRWZWN0b3IzLnN1YnRyYWN0KHRyaWFuZ2xlWzJdLCB0cmlhbmdsZVswXSwgZHYyKTtcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFZlY3RvcjMuY3Jvc3MoZHYxLm5vcm1hbGl6ZSgpLCBkdjIubm9ybWFsaXplKCksIG5vcm1hbCk7XG5cdFx0Zm9yIChsZXQgbiA9IDA7IG4gPCAzOyBuICs9IDEpIHtcblx0XHRcdGNvbnN0IGluZGV4ID0gKGkgKyBuKSAqIDM7XG5cdFx0XHRub3JtYWxzW2luZGV4ICsgMF0gKz0gbm9ybWFsLng7XG5cdFx0XHRub3JtYWxzW2luZGV4ICsgMV0gKz0gbm9ybWFsLnk7XG5cdFx0XHRub3JtYWxzW2luZGV4ICsgMl0gKz0gbm9ybWFsLno7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBub3JtYWxzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVUYW5nZW50cyhcblx0aW5kaWNlczogVHlwZWRBcnJheSB8IG51bGwsXG5cdHBvc2l0aW9uczogVHlwZWRBcnJheSxcblx0bm9ybWFsczogVHlwZWRBcnJheSxcblx0dXZzOiBUeXBlZEFycmF5XG4pIHtcblx0Y29uc3QgdGFuZ2VudHMgPSBuZXcgRmxvYXQzMkFycmF5KChub3JtYWxzLmxlbmd0aCAvIDMpICogNCk7XG5cdGNvbnN0IHZlcnRleENvdW50ID0gaW5kaWNlcyA/IGluZGljZXMubGVuZ3RoIDogcG9zaXRpb25zLmxlbmd0aDtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgaSArPSAzKSB7XG5cdFx0Y29uc3QgdHJpSW5kaWNlcyA9IFtdO1xuXHRcdGZvciAobGV0IG4gPSAwOyBuIDwgMzsgbiArPSAxKSB7XG5cdFx0XHRpZiAoaW5kaWNlcykge1xuXHRcdFx0XHR0cmlJbmRpY2VzLnB1c2goaW5kaWNlc1tpICsgbl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHJpSW5kaWNlcy5wdXNoKGkgKyBuKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgcG9zID0gdHJpSW5kaWNlcy5tYXAoKHZlcnRleEluZGV4KSA9PiB7XG5cdFx0XHRjb25zdCBpbmRleCA9IHZlcnRleEluZGV4ICogMztcblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMyhwb3NpdGlvbnNbaW5kZXhdLCBwb3NpdGlvbnNbaW5kZXggKyAxXSwgcG9zaXRpb25zW2luZGV4ICsgMl0pO1xuXHRcdH0pO1xuXHRcdGNvbnN0IHV2ID0gdHJpSW5kaWNlcy5tYXAoKHZlcnRleEluZGV4KSA9PiB7XG5cdFx0XHRjb25zdCBpbmRleCA9IHZlcnRleEluZGV4ICogMjtcblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMih1dnMhW2luZGV4XSwgdXZzIVtpbmRleCArIDFdKTtcblx0XHR9KTtcblxuXHRcdGxldCBkdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFZlY3RvcjMuc3VidHJhY3QocG9zWzFdLCBwb3NbMF0sIGR2MSk7XG5cdFx0bGV0IGR2MiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0VmVjdG9yMy5zdWJ0cmFjdChwb3NbMl0sIHBvc1swXSwgZHYyKTtcblx0XHRjb25zdCBkdXYxID0gbmV3IFZlY3RvcjIoKTtcblx0XHRWZWN0b3IyLnN1YnRyYWN0KHV2WzFdLCB1dlswXSwgZHV2MSk7XG5cdFx0Y29uc3QgZHV2MiA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0VmVjdG9yMi5zdWJ0cmFjdCh1dlsyXSwgdXZbMF0sIGR1djIpO1xuXG5cdFx0Y29uc3QgdGFuZ2VudCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0VmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGR2MSwgZHV2MS55LCBkdjEpO1xuXHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihkdjIsIGR1djIueSwgZHYyKTtcblx0XHRWZWN0b3IzLnN1YnRyYWN0KGR2MSwgZHYyLCB0YW5nZW50KTtcblxuXHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcih0YW5nZW50LCBkdXYyLnkgKiBkdXYxLnggLSBkdXYxLnkgKiBkdXYyLngsIHRhbmdlbnQpO1xuXG5cdFx0dGFuZ2VudC5ub3JtYWxpemUoKTtcblx0XHRmb3IgKGxldCBuID0gMDsgbiA8IDM7IG4gKz0gMSkge1xuXHRcdFx0Y29uc3QgaW5kZXggPSAoaSArIG4pICogNDtcblxuXHRcdFx0dGFuZ2VudHNbaW5kZXggKyAwXSArPSB0YW5nZW50Lng7XG5cdFx0XHR0YW5nZW50c1tpbmRleCArIDFdICs9IHRhbmdlbnQueTtcblx0XHRcdHRhbmdlbnRzW2luZGV4ICsgMl0gKz0gdGFuZ2VudC56O1xuXHRcdFx0dGFuZ2VudHNbaW5kZXggKyAzXSA9IDE7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0YW5nZW50cztcbn1cblxuZnVuY3Rpb24gbGVycChhOiBudW1iZXIsIGI6IG51bWJlciwgeDogbnVtYmVyKSB7XG5cdGlmICh4IDwgYSkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cdGlmICh4ID4gYikge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cdHJldHVybiAoeCAtIGEpIC8gKGIgLSBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVycFF1YXQoaW5wdXQ6IFR5cGVkQXJyYXksIG86IFR5cGVkQXJyYXksIHRpbWU6IG51bWJlciwgbWV0aG9kOiBzdHJpbmcpIHtcblx0bGV0IGluZGV4ID0gMTtcblx0d2hpbGUgKGluZGV4IDwgaW5wdXQubGVuZ3RoIC0gMSAmJiB0aW1lID49IGlucHV0W2luZGV4XSkge1xuXHRcdGluZGV4ICs9IDE7XG5cdH1cblx0Y29uc3QgdCA9IGxlcnAoaW5wdXRbaW5kZXggLSAxXSwgaW5wdXRbaW5kZXhdLCB0aW1lKTtcblxuXHRpZiAobWV0aG9kID09PSBcIkNVQklDU1BMSU5FXCIpIHtcblx0XHRjb25zdCB0ZCA9IGlucHV0W2luZGV4XSAtIGlucHV0W2luZGV4IC0gMV07XG5cdFx0Y29uc3QgdDIgPSB0ICogdDtcblx0XHRjb25zdCB0MyA9IHQyICogdDtcblx0XHRjb25zdCBpID0gMTIgKiBpbmRleDtcblxuXHRcdGNvbnN0IHYwID0gbmV3IFF1YXRlcm5pb24ob1tpIC0gOF0sIG9baSAtIDddLCBvW2kgLSA2XSwgb1tpIC0gNV0pO1xuXHRcdGNvbnN0IGIwID0gbmV3IFF1YXRlcm5pb24ob1tpIC0gNF0sIG9baSAtIDNdLCBvW2kgLSAyXSwgb1tpIC0gMV0pO1xuXHRcdGNvbnN0IHYxID0gbmV3IFF1YXRlcm5pb24ob1tpICsgNF0sIG9baSArIDVdLCBvW2kgKyA2XSwgb1tpICsgN10pO1xuXHRcdGNvbnN0IGExID0gbmV3IFF1YXRlcm5pb24ob1tpXSwgb1tpICsgMV0sIG9baSArIDJdLCBvW2kgKyAzXSk7XG5cdFx0UXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKHYwLCAyICogdDMgLSAzICogdDIgKyAxLCB2MCk7XG5cdFx0UXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKGIwLCB0ZCAqICh0MyAtIDIgKiB0MiArIHQpLCBiMCk7XG5cdFx0UXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKHYxLCAtMiAqIHQzICsgMyAqIHQyLCB2MSk7XG5cdFx0UXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKGExLCB0ZCAqICh0MyAtIHQyKSwgYTEpO1xuXG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IFF1YXRlcm5pb24oKTtcblx0XHRRdWF0ZXJuaW9uLmFkZChyZXN1bHQsIHYwLCByZXN1bHQpO1xuXHRcdFF1YXRlcm5pb24uYWRkKHJlc3VsdCwgYjAsIHJlc3VsdCk7XG5cdFx0UXVhdGVybmlvbi5hZGQocmVzdWx0LCB2MSwgcmVzdWx0KTtcblx0XHRRdWF0ZXJuaW9uLmFkZChyZXN1bHQsIGExLCByZXN1bHQpO1xuXHRcdFF1YXRlcm5pb24ubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0Y29uc3QgcSA9IFtdO1xuXHRmb3IgKGxldCBuID0gLTE7IG4gPCAxOyBuICs9IDEpIHtcblx0XHRjb25zdCBpID0gNCAqIChpbmRleCArIG4pO1xuXHRcdHEucHVzaChuZXcgUXVhdGVybmlvbihvW2ldLCBvW2kgKyAxXSwgb1tpICsgMl0sIG9baSArIDNdKSk7XG5cdH1cblxuXHRpZiAobWV0aG9kID09PSBcIlNURVBcIikge1xuXHRcdHJldHVybiB0IDwgMSA/IHFbMF0gOiBxWzFdO1xuXHR9XG5cdGNvbnN0IHJlc3VsdCA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdFF1YXRlcm5pb24uc2xlcnAocVswXSwgcVsxXSwgdCwgcmVzdWx0KTtcblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVycFZlYzMoaW5wdXQ6IFR5cGVkQXJyYXksIG91dHB1dDogVHlwZWRBcnJheSwgdGltZTogbnVtYmVyLCBtZXRob2Q6IHN0cmluZykge1xuXHRsZXQgaW5kZXggPSAxO1xuXHR3aGlsZSAoaW5kZXggPCBpbnB1dC5sZW5ndGggLSAxICYmIHRpbWUgPj0gaW5wdXRbaW5kZXhdKSB7XG5cdFx0aW5kZXggKz0gMTtcblx0fVxuXHRjb25zdCB0ID0gbGVycChpbnB1dFtpbmRleCAtIDFdLCBpbnB1dFtpbmRleF0sIHRpbWUpO1xuXG5cdGlmIChtZXRob2QgPT09IFwiQ1VCSUNTUExJTkVcIikge1xuXHRcdGNvbnN0IHRkID0gaW5wdXRbaW5kZXhdIC0gaW5wdXRbaW5kZXggLSAxXTtcblx0XHRjb25zdCB0MiA9IHQgKiB0O1xuXHRcdGNvbnN0IHQzID0gdDIgKiB0O1xuXHRcdGNvbnN0IGkgPSA5ICogaW5kZXg7XG5cdFx0Y29uc3QgdjAgPSBuZXcgVmVjdG9yMyhvdXRwdXRbaSAtIDZdLCBvdXRwdXRbaSAtIDVdLCBvdXRwdXRbaSAtIDRdKTtcblx0XHRjb25zdCBiMCA9IG5ldyBWZWN0b3IzKG91dHB1dFtpIC0gM10sIG91dHB1dFtpIC0gMl0sIG91dHB1dFtpIC0gMV0pO1xuXHRcdGNvbnN0IHYxID0gbmV3IFZlY3RvcjMob3V0cHV0W2kgKyAzXSwgb3V0cHV0W2kgKyA0XSwgb3V0cHV0W2kgKyA1XSk7XG5cdFx0Y29uc3QgYTEgPSBuZXcgVmVjdG9yMyhvdXRwdXRbaV0sIG91dHB1dFtpICsgMV0sIG91dHB1dFtpICsgMl0pO1xuXHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcih2MCwgMiAqIHQzIC0gMyAqIHQyICsgMSwgdjApO1xuXHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihiMCwgdGQgKiAodDMgLSAyICogdDIgKyB0KSwgYjApO1xuXHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcih2MSwgLTIgKiB0MyArIDMgKiB0MiwgdjEpO1xuXHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihhMSwgdGQgKiAodDMgLSB0MiksIGExKTtcblx0XHRjb25zdCByZXN1bHQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFZlY3RvcjMuYWRkKHJlc3VsdCwgdjAsIHJlc3VsdCk7XG5cdFx0VmVjdG9yMy5hZGQocmVzdWx0LCBiMCwgcmVzdWx0KTtcblx0XHRWZWN0b3IzLmFkZChyZXN1bHQsIHYxLCByZXN1bHQpO1xuXHRcdFZlY3RvcjMuYWRkKHJlc3VsdCwgYTEsIHJlc3VsdCk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdGNvbnN0IHYgPSBbXTtcblx0Zm9yIChsZXQgbiA9IC0xOyBuIDwgMTsgbiArPSAxKSB7XG5cdFx0Y29uc3QgaSA9IDMgKiAoaW5kZXggKyBuKTtcblx0XHR2LnB1c2gobmV3IFZlY3RvcjMob3V0cHV0W2ldLCBvdXRwdXRbaSArIDFdLCBvdXRwdXRbaSArIDJdKSk7XG5cdH1cblxuXHRpZiAobWV0aG9kID09PSBcIlNURVBcIikge1xuXHRcdHJldHVybiB0IDwgMSA/IHZbMF0gOiB2WzFdO1xuXHR9XG5cdGNvbnN0IHJlc3VsdCA9IG5ldyBWZWN0b3IzKCk7XG5cdHJldHVybiBWZWN0b3IzLmxlcnAodlswXSwgdlsxXSwgdCwgcmVzdWx0KTtcbn1cblxuZXhwb3J0IGNvbnN0IGdsdGZFbnVtOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB9ID0ge1xuXHRTQ0FMQVI6IDEsXG5cdFZFQzI6IDIsXG5cdFZFQzM6IDMsXG5cdFZFQzQ6IDQsXG5cdE1BVDI6IDQsXG5cdE1BVDM6IDksXG5cdE1BVDQ6IDE2LFxuXHQ1MTIwOiAxLFxuXHQ1MTIxOiAxLFxuXHQ1MTIyOiAyLFxuXHQ1MTIzOiAyLFxuXHQ1MTI1OiA0LFxuXHQ1MTI2OiA0LFxuXHQ5NzI4OiBcIm5lYXJlc3RcIixcblx0OTcyOTogXCJsaW5lYXJcIixcblx0OTk4NDogXCJsaW5lYXJcIixcblx0OTk4NTogXCJsaW5lYXJcIixcblx0OTk4NjogXCJsaW5lYXJcIixcblx0OTk4NzogXCJsaW5lYXJcIixcblx0MzMwNzE6IFwiY2xhbXAtdG8tZWRnZVwiLFxuXHQzMzY0ODogXCJtaXJyb3ItcmVwZWF0XCIsXG5cdDEwNDk3OiBcInJlcGVhdFwiXG59O1xuIiwiaW1wb3J0IENhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0NhbWVyYVwiO1xuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGVcIjtcbmltcG9ydCBjcmVhdGVHdWlkIGZyb20gXCIuLi91dGlscy9jcmVhdGVHdWlkXCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4vTWVzaFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb2RlIGV4dGVuZHMgTWVzaCB7XG5cdHVpZDogc3RyaW5nO1xuXHRpZDogbnVtYmVyO1xuXHRpc05vZGU6IGJvb2xlYW47XG5cdGNoaWxkcmVuOiBNYXA8c3RyaW5nLCBOb2RlPjtcblx0cGFyZW50OiBOb2RlO1xuXHRtZXNoTGlzdDogQXJyYXk8TWVzaD47XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5pc05vZGUgPSB0cnVlO1xuXHRcdHRoaXMuY2hpbGRyZW4gPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5wYXJlbnQgPSBudWxsO1xuXHRcdHRoaXMudWlkID0gY3JlYXRlR3VpZCgpO1xuXHR9XG5cdGFkZChub2RlOiBOb2RlKSB7XG5cdFx0bm9kZS5wYXJlbnQgPSB0aGlzO1xuXHRcdHRoaXMuY2hpbGRyZW4uc2V0KG5vZGUudWlkLCBub2RlKTtcblx0fVxuXHRyZW1vdmUobm9kZTogTm9kZSkge1xuXHRcdHRoaXMuY2hpbGRyZW4uZGVsZXRlKG5vZGUudWlkKTtcblx0fVxuXHR1cGRhdGUoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSwgY2FtZXJhPzogQ2FtZXJhKSB7XG5cdFx0aWYgKHRoaXMucGFyZW50KSB0aGlzLnVwZGF0ZU1hdHJpeCh0aGlzLnBhcmVudC5tb2RlbE1hdHJpeCk7XG5cdFx0aWYgKHRoaXMubWVzaExpc3QpXG5cdFx0XHR0aGlzLm1lc2hMaXN0Lm1hcCgobWVzaDogTWVzaCkgPT4ge1xuXHRcdFx0XHRtZXNoLnVwZGF0ZShmcmFtZVN0YXRlLCBjYW1lcmEsIHRoaXMubW9kZWxNYXRyaXgpO1xuXHRcdFx0fSk7XG5cdFx0dGhpcz8uY2hpbGRyZW4/LmZvckVhY2g/Ligobm9kZTogTm9kZSkgPT4ge1xuXHRcdFx0bm9kZS51cGRhdGUoZnJhbWVTdGF0ZSwgY2FtZXJhKTtcblx0XHR9KTtcblx0fVxuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMubWVzaExpc3QubWFwKChtZXNoOiBNZXNoKSA9PiB7XG5cdFx0XHRtZXNoPy5kZXN0cm95KCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5jaGlsZHJlbi5mb3JFYWNoKChub2RlOiBOb2RlKSA9PiB7XG5cdFx0XHRub2RlLmRlc3Ryb3koKTtcblx0XHR9KTtcblx0XHR0aGlzPy5jaGlsZHJlbj8uY2xlYXIoKTtcblx0fVxuXHR0cmF2ZXJzZSh0cmF2ZXJzZUZ1bmN0aW9uOiBGdW5jdGlvbiwgcGFyYW06IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTogdm9pZCB7XG5cdFx0Zm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4uc2l6ZTsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHR0aGlzLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHRcdGNoaWxkLnRyYXZlcnNlKHRyYXZlcnNlRnVuY3Rpb24sIHBhcmFtKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxufVxuIiwiaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gXCIuLi8uLi8uLi9tYXRoL1F1YXRlcm5pb25cIjtcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuLi8uLi8uLi9tYXRoL1ZlY3RvcjRcIjtcbmltcG9ydCB7IEFuaW1hdGlvbkNoYW5uZWwgfSBmcm9tIFwiLi9BbmltYXRpb25DaGFubmVsXCI7XG5pbXBvcnQgeyBBbmltYXRpb25TYW1wbGVyIH0gZnJvbSBcIi4vQW5pbWF0aW9uU2FtcGxlclwiO1xuXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uIHtcblx0Y29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZyxwdWJsaWMgc2FtcGxlcnM6IEFuaW1hdGlvblNhbXBsZXJbXSxwdWJsaWMgY2hhbm5lbHM6IEFuaW1hdGlvbkNoYW5uZWxbXSkge31cblx0cGxheSh0aW1lOm51bWJlcil7XG5cdFx0bGV0IG5vZGUsYW5pbWF0aW9uU2FtcGxlcix0YXJnZXQ7XG4gICAgICAgIHRoaXM/LmNoYW5uZWxzPy5tYXAoKGNoYW5uZWwpPT57XG5cdFx0XHRhbmltYXRpb25TYW1wbGVyID0gY2hhbm5lbC5zYW1wbGVyO1xuXHRcdFx0YW5pbWF0aW9uU2FtcGxlci5nZXRWYWx1ZSh0aW1lKVxuXHRcdFx0dGFyZ2V0PWNoYW5uZWwudGFyZ2V0O1xuXHRcdFx0bm9kZSA9IHRhcmdldC5ub2RlO1xuXHRcdFx0c3dpdGNoICh0YXJnZXQucGF0aCkge1xuXHRcdFx0XHRjYXNlICdyb3RhdGlvbic6XG5cdFx0XHRcdFF1YXRlcm5pb24uY2xvbmUoIGFuaW1hdGlvblNhbXBsZXIuY3VyVmFsdWUsbm9kZS5yb3RhdGlvbik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICd0cmFuc2xhdGlvbic6XG5cdFx0XHRcdFZlY3RvcjQuY2xvbmUoIGFuaW1hdGlvblNhbXBsZXIuY3VyVmFsdWUsbm9kZS50cmFuc2xhdGlvbik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdzY2FsZSc6XG5cdFx0XHRcdFx0VmVjdG9yNC5jbG9uZShhbmltYXRpb25TYW1wbGVyLmN1clZhbHVlLG5vZGUuc2NhbGUpO1x0XHRcdFxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcbn1cbiIsImltcG9ydCB7IEFuaW1hdGlvbkNoYW5uZWxUYXJnZXQgfSBmcm9tIFwiLi9BbmltYXRpb25DaGFubmVsVGFyZ2V0XCI7XG5pbXBvcnQgeyBBbmltYXRpb25TYW1wbGVyIH0gZnJvbSBcIi4vQW5pbWF0aW9uU2FtcGxlclwiO1xuXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uQ2hhbm5lbCB7XG5cdHNhbXBsZXI6IEFuaW1hdGlvblNhbXBsZXI7XG5cdHRhcmdldDogQW5pbWF0aW9uQ2hhbm5lbFRhcmdldDtcblx0Y29uc3RydWN0b3IoKSB7fVxufVxuIiwiaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gXCIuLi8uLi8uLi9tYXRoL1F1YXRlcm5pb25cIjtcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuLi8uLi8uLi9tYXRoL1ZlY3RvcjRcIjtcbmltcG9ydCB7IEdMVEYsIFR5cGUyTnVtT2ZDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vR0xURkxvYWRlclwiO1xuXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uU2FtcGxlciB7XG5cdGlucHV0OiBhbnk7XG5cdGludGVycG9sYXRpb246IFwiTElORUFSXCIgfCBcIlNURVBcIiB8IFwiQ1VCSUNTUExJTkVcIjtcblx0b3V0cHV0OiBhbnk7XG5cdGtleUZyYW1lSW5kaWNlczogSW50OEFycmF5IHwgVWludDhBcnJheSB8IEludDE2QXJyYXkgfCBVaW50MTZBcnJheSB8IEludDMyQXJyYXkgfCBVaW50MzJBcnJheSB8IEZsb2F0MzJBcnJheTtcblx0a2V5RnJhbWVSYXc6IEludDhBcnJheSB8IFVpbnQ4QXJyYXkgfCBJbnQxNkFycmF5IHwgVWludDE2QXJyYXkgfCBJbnQzMkFycmF5IHwgVWludDMyQXJyYXkgfCBGbG9hdDMyQXJyYXk7XG5cdGtleUZyYW1lczoge1xuXHRcdHNyYzogSW50OEFycmF5IHwgVWludDhBcnJheSB8IEludDE2QXJyYXkgfCBVaW50MTZBcnJheSB8IEludDMyQXJyYXkgfCBVaW50MzJBcnJheSB8IEZsb2F0MzJBcnJheTtcblx0XHRkc3Q6IEludDhBcnJheSB8IFVpbnQ4QXJyYXkgfCBJbnQxNkFycmF5IHwgVWludDE2QXJyYXkgfCBJbnQzMkFycmF5IHwgVWludDMyQXJyYXkgfCBGbG9hdDMyQXJyYXk7XG5cdH07XG5cdGN1cnJlbnRJbmRleDogbnVtYmVyO1xuXHRzdGFydFRpbWU6IG51bWJlcjtcblx0ZW5kVGltZTogbnVtYmVyO1xuXHRjdXJyZW50VmFsdWU6IFZlY3RvcjQgfCBRdWF0ZXJuaW9uO1xuXHRkdXJhdGlvbjogbnVtYmVyO1xuXHRpbnB1dE1heDogbnVtYmVyO1xuXHRwcml2YXRlIGlucHV0VHlwZTogc3RyaW5nO1xuXHRwcml2YXRlIG91dHB1dFR5cGU6IHN0cmluZztcblx0Y29uc3RydWN0b3IoKSB7fVxuXHRmb3JtR2x0ZihnbHRmOiBHTFRGLCBzYW1wbGVyKSB7XG5cdFx0dGhpcy5pbnB1dCA9IGdsdGYuYWNjZXNzb3JzW3NhbXBsZXIuaW5wdXRdOyAvL3JlcXVpcmVkLCBhY2Nlc3NvciBvYmplY3Rcblx0XHR0aGlzLm91dHB1dCA9IGdsdGYuYWNjZXNzb3JzW3NhbXBsZXIub3V0cHV0XTsgLy9yZXF1aXJlZCwgYWNjZXNzb3Igb2JqZWN0XG5cdFx0dGhpcy5pbnRlcnBvbGF0aW9uID0gc2FtcGxlci5pbnRlcnBvbGF0aW9uICE9PSB1bmRlZmluZWQgPyBzYW1wbGVyLmludGVycG9sYXRpb24gOiBcIkxJTkVBUlwiO1xuXHRcdHRoaXMuY3VycmVudEluZGV4ID0gMDtcblx0XHQvLyB0aGlzLmN1cnJlbnRWYWx1ZT1uZXcgVmVjdG9yNCgpO1xuXHRcdHRoaXMuZW5kVGltZSA9IHRoaXMuaW5wdXRbdGhpcy5pbnB1dC5sZW5ndGggLSAxXTtcblx0XHR0aGlzLmlucHV0TWF4ID0gdGhpcy5lbmRUaW1lIC0gdGhpcy5pbnB1dFswXTtcblx0XHR0aGlzLmlucHV0VHlwZSA9IGdsdGY/Lmpzb24/LmFjY2Vzc29yc1tzYW1wbGVyLmlucHV0XT8udHlwZTtcblx0XHR0aGlzLm91dHB1dFR5cGUgPSBnbHRmPy5qc29uPy5hY2Nlc3NvcnNbc2FtcGxlci5vdXRwdXRdPy50eXBlO1xuXHR9XG5cdGdldFZhbHVlKHRpbWU6IG51bWJlcik6IHZvaWQge1xuXHRcdGlmICh0aW1lID4gdGhpcy5lbmRUaW1lKSB7XG5cdFx0XHR0aW1lIC09IHRoaXMuaW5wdXRNYXggKiBNYXRoLmNlaWwoKHRpbWUgLSB0aGlzLmVuZFRpbWUpIC8gdGhpcy5pbnB1dE1heCk7XG5cdFx0XHR0aGlzLmN1cnJlbnRJbmRleCA9IDA7XG5cdFx0fVxuXG5cdFx0Y29uc3QgbGVuID0gdGhpcy5pbnB1dC5sZW5ndGg7XG5cdFx0d2hpbGUgKHRoaXMuY3VycmVudEluZGV4IDw9IGxlbiAtIDIgJiYgdGltZSA+PSB0aGlzLmlucHV0W3RoaXMuY3VycmVudEluZGV4ICsgMV0pIHtcblx0XHRcdHRoaXMuY3VycmVudEluZGV4Kys7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuY3VycmVudEluZGV4ID49IGxlbiAtIDEpIHtcblx0XHRcdC8vIGxvb3Bcblx0XHRcdHRpbWUgLT0gdGhpcy5pbnB1dE1heDtcblx0XHRcdHRoaXMuY3VycmVudEluZGV4ID0gMDtcblx0XHR9XG5cblx0XHQvLyBAdG1wOiBhc3N1bWUgbm8gc3RyaWRlXG5cdFx0Y29uc3QgY291bnQgPSBUeXBlMk51bU9mQ29tcG9uZW50W3RoaXMub3V0cHV0VHlwZV07XG5cblx0XHRjb25zdCBhbmltYXRpb25PdXRwdXRWYWx1ZVZlYzRhID0gY291bnQgPT09IDQgPyBuZXcgUXVhdGVybmlvbigpIDogbmV3IFZlY3RvcjQoKTtcblx0XHRjb25zdCBhbmltYXRpb25PdXRwdXRWYWx1ZVZlYzRiID0gY291bnQgPT09IDQgPyBuZXcgUXVhdGVybmlvbigpIDogbmV3IFZlY3RvcjQoKTtcblx0XHRpZiAoIXRoaXMuY3VycmVudFZhbHVlKSB0aGlzLmN1cnJlbnRWYWx1ZSA9IGNvdW50ID09PSA0ID8gbmV3IFF1YXRlcm5pb24oKSA6IG5ldyBWZWN0b3I0KCk7XG5cdFx0Y29uc3QgaSA9IHRoaXMuY3VycmVudEluZGV4O1xuXHRcdGNvbnN0IG8gPSBpICogY291bnQ7XG5cdFx0Y29uc3Qgb24gPSBvICsgY291bnQ7XG5cblx0XHRjb25zdCB1ID0gTWF0aC5tYXgoMCwgdGltZSAtIHRoaXMuaW5wdXRbaV0pIC8gKHRoaXMuaW5wdXRbaSArIDFdIC0gdGhpcy5pbnB1dFtpXSk7XG5cdFx0YW5pbWF0aW9uT3V0cHV0VmFsdWVWZWM0YS5zZXQobyArIDAsIG8gKyAxLCBvICsgMiwgbyArIDMpO1xuXHRcdGFuaW1hdGlvbk91dHB1dFZhbHVlVmVjNGIuc2V0KG9uICsgMCwgb24gKyAxLCBvbiArIDIsIG9uICsgMyk7XG5cdFx0c3dpdGNoICh0aGlzLmludGVycG9sYXRpb24pIHtcblx0XHRcdGNhc2UgXCJMSU5FQVJcIjpcblx0XHRcdFx0Y291bnQgPT09IDRcblx0XHRcdFx0XHQ/IFF1YXRlcm5pb24uc2xlcnAoXG5cdFx0XHRcdFx0XHRcdDxRdWF0ZXJuaW9uPmFuaW1hdGlvbk91dHB1dFZhbHVlVmVjNGEsXG5cdFx0XHRcdFx0XHRcdDxRdWF0ZXJuaW9uPmFuaW1hdGlvbk91dHB1dFZhbHVlVmVjNGIsXG5cdFx0XHRcdFx0XHRcdHUsXG5cdFx0XHRcdFx0XHRcdDxRdWF0ZXJuaW9uPnRoaXMuY3VycmVudFZhbHVlXG5cdFx0XHRcdFx0ICApXG5cdFx0XHRcdFx0OiBWZWN0b3I0LmxlcnAoXG5cdFx0XHRcdFx0XHRcdDxWZWN0b3I0PmFuaW1hdGlvbk91dHB1dFZhbHVlVmVjNGEsXG5cdFx0XHRcdFx0XHRcdDxWZWN0b3I0PmFuaW1hdGlvbk91dHB1dFZhbHVlVmVjNGIsXG5cdFx0XHRcdFx0XHRcdHUsXG5cdFx0XHRcdFx0XHRcdDxWZWN0b3I0PnRoaXMuY3VycmVudFZhbHVlXG5cdFx0XHRcdFx0ICApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxufVxuIiwiZXhwb3J0IGNsYXNzIEFuaW1hdGlvbkNoYW5uZWxUYXJnZXQge1xuXHRub2RlOiBOb2RlO1xuXHRwYXRoOiBcInRyYW5zbGF0aW9uXCIgfCBcInJvdGF0aW9uXCIgfCBcInNjYWxlXCIgfCBcIndlaWdodHNcIjtcblx0Y29uc3RydWN0b3Iobm9kZSxwYXRoKSB7XG5cdFx0dGhpcy5ub2RlPW5vZGU7XG5cdFx0dGhpcy5wYXRoPXBhdGg7XG5cdH1cbn1cbiIsImltcG9ydCBHZW9tZXRyeSBmcm9tIFwiLi4vZ2VvbWV0cnkvR2VvbWV0cnlcIjtcbmltcG9ydCBQYnJNYXRlcmlhbCBmcm9tIFwiLi4vbWF0ZXJpYWwvUGJyTWF0ZXJpYWxcIjtcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9tYXRoL01hdHJpeDRcIjtcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi4vbWVzaC9NZXNoXCI7XG5pbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcbmltcG9ydCBTYW1wbGVyIGZyb20gXCIuLi9yZW5kZXIvU2FtcGxlclwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZU5vcm1hbHMsIGdsdGZFbnVtLCBuZXdUeXBlZEFycmF5LCB0b0luZGljZXMsIFR5cGVkQXJyYXksIGdlbmVyYXRlVGFuZ2VudHMgfSBmcm9tIFwiLi4vdXRpbHMvZ2x0ZlV0aWxzXCI7XG5pbXBvcnQgTm9kZSBmcm9tIFwiLi4vbWVzaC9Ob2RlXCI7XG5pbXBvcnQgeyBBbmltYXRpb24gfSBmcm9tIFwiLi9nbHRmL2xpYnMvQW5pbWF0aW9uXCI7XG5pbXBvcnQgeyBBbmltYXRpb25DaGFubmVsIH0gZnJvbSBcIi4vZ2x0Zi9saWJzL0FuaW1hdGlvbkNoYW5uZWxcIjtcbmltcG9ydCB7IEFuaW1hdGlvblNhbXBsZXIgfSBmcm9tIFwiLi9nbHRmL2xpYnMvQW5pbWF0aW9uU2FtcGxlclwiO1xuaW1wb3J0IHsgQW5pbWF0aW9uQ2hhbm5lbFRhcmdldCB9IGZyb20gXCIuL2dsdGYvbGlicy9BbmltYXRpb25DaGFubmVsVGFyZ2V0XCI7XG5pbXBvcnQgQ29sb3IgZnJvbSBcIi4uL21hdGgvQ29sb3JcIjtcblxuZXhwb3J0IHR5cGUgR0xURlByaW1pdGl2ZSA9IHtcblx0dmVydGV4Q291bnQ6IG51bWJlcjtcblx0aW5kaWNlczogVWludDE2QXJyYXkgfCBVaW50MzJBcnJheSB8IG51bGw7XG5cdHBvc2l0aW9uczogVHlwZWRBcnJheTtcblx0bm9ybWFsczogVHlwZWRBcnJheTtcblx0dXZzOiBUeXBlZEFycmF5IHwgbnVsbDtcblx0dXYxczogVHlwZWRBcnJheSB8IG51bGw7XG5cdHRhbmdlbnRzOiBUeXBlZEFycmF5IHwgbnVsbDtcblx0Y29sb3JzOiBUeXBlZEFycmF5IHwgbnVsbDtcblx0bWF0ZXJpYWw6IGFueTtcblx0Ym91bmRpbmdCb3g6IHtcblx0XHRtYXg6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblx0XHRtaW46IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblx0fTtcbn07XG5cbmV4cG9ydCB0eXBlIEdMVEZNZXNoID0gQXJyYXk8R0xURlByaW1pdGl2ZT47XG5cbmV4cG9ydCB0eXBlIEdMVEZBbmltYXRpb24gPSB7XG5cdGNoYW5uZWxzOiBBcnJheTx7XG5cdFx0aW5wdXQ6IFR5cGVkQXJyYXk7XG5cdFx0b3V0cHV0OiBUeXBlZEFycmF5O1xuXHRcdGludGVycG9sYXRpb246IHN0cmluZztcblx0XHRub2RlOiBudW1iZXI7XG5cdFx0cGF0aDogc3RyaW5nO1xuXHR9Pjtcblx0bGVuZ3RoOiBudW1iZXI7XG59O1xuXG5leHBvcnQgY2xhc3MgR0xURiB7XG5cdHNjZW5lczogQXJyYXk8YW55PjtcblxuXHRkZWZhdWx0U2NlbmU6IG51bWJlcjtcblxuXHRub2RlczogQXJyYXk8YW55PjtcblxuXHRjYW1lcmFzOiBBcnJheTxhbnk+O1xuXG5cdG1lc2hlczogQXJyYXk8YW55PjtcblxuXHRpbWFnZXM6IEFycmF5PEltYWdlQml0bWFwPjtcblxuXHRhbmltYXRpb25zOiBBcnJheTxHTFRGQW5pbWF0aW9uPjtcblxuXHRwcml2YXRlIGdsYk9mZnNldDogbnVtYmVyO1xuXG5cdHByaXZhdGUgYnVmZmVyczogQXJyYXlCdWZmZXJbXTtcblxuXHRwcml2YXRlIGJ1ZmZlclZpZXdzOiBhbnk7XG5cblx0YWNjZXNzb3JzOiBhbnk7XG5cblx0anNvbjogYW55O1xuXG5cdHByaXZhdGUgbWF0ZXJpYWxzOiBhbnk7XG5cblx0cHJpdmF0ZSBnbGJCaW4/OiBBcnJheUJ1ZmZlcjtcblxuXHRwcml2YXRlIHJvb3RVcmw6IHN0cmluZztcblxuXHR0ZXh0dXJlczogYW55W107XG5cblx0c2FtcGxlcnM6IFNhbXBsZXJbXTtcblxuXHRnbHRmTWVzaHM6IGFueVtdO1xuXG5cdGNvbnN0cnVjdG9yKGpzb246IGFueSwgcm9vdFVybDogc3RyaW5nLCBnbGJPZmZzZXQgPSAwLCBnbGJCaW4/OiBBcnJheUJ1ZmZlcikge1xuXHRcdHRoaXMuanNvbiA9IGpzb247XG5cdFx0dGhpcy5idWZmZXJWaWV3cyA9IGpzb24uYnVmZmVyVmlld3M7XG5cdFx0dGhpcy5nbGJPZmZzZXQgPSBnbGJPZmZzZXQ7XG5cdFx0dGhpcy5yb290VXJsID0gcm9vdFVybDtcblx0XHR0aGlzLnNjZW5lcyA9IGpzb24uc2NlbmVzO1xuXHRcdHRoaXMuZGVmYXVsdFNjZW5lID0ganNvbi5zY2VuZSB8fCAwO1xuXHRcdHRoaXMuY2FtZXJhcyA9IGpzb24uY2FtZXJhcyB8fCBbXTtcblx0XHR0aGlzLmdsYkJpbiA9IGdsYkJpbjtcblx0XHR0aGlzLm1lc2hlcyA9IFtdO1xuXHR9XG5cdGFzeW5jIHBhcnNlRGF0YSgpIHtcblx0XHR0aGlzLmJ1ZmZlcnMgPSBhd2FpdCB0aGlzLmxvYWRCdWZmZXMoKTtcblx0XHR0aGlzLmltYWdlcyA9IGF3YWl0IHRoaXMubG9hZEltYWdlcygpO1xuXHRcdHRoaXMucGFyc2VTYW1wbGVycygpO1xuXHRcdHRoaXMucGFyc2VUZXh0dXJlcygpO1xuXHRcdHRoaXMucGFyc2VNYXRlcmlhbHMoKTtcblx0XHR0aGlzLnBhcnNlQWNjZXNzb3JzKCk7XG5cdFx0dGhpcy5wYXJzZU1lc2hzKCk7XG5cdFx0dGhpcy5wYXJzZU5vZGVzKCk7XG5cdFx0dGhpcy5ub3JtYWxpemVEYXRhKCk7XG5cdFx0dGhpcy5wYXJzZVNjZW5lcygpO1xuXHRcdHRoaXMucGFyc2VBbmltYXRpb25zKCk7XG5cdH1cblx0cHJpdmF0ZSBnZXRBY2Nlc3NvcihpbmRleDogbnVtYmVyKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWNjZXNzb3JzW2luZGV4XTtcblx0fVxuXHRwcml2YXRlIHBhcnNlU2FtcGxlcnMoKSB7XG5cdFx0dGhpcy5zYW1wbGVycyA9IHRoaXMuanNvbi5zYW1wbGVyc1xuXHRcdFx0PyAodGhpcy5qc29uLnNhbXBsZXJzIGFzIEFycmF5PGFueT4pLm1hcCgoc2FtcGxlcikgPT4gdGhpcy5nZXRTYW1wbGVyKHNhbXBsZXIpKVxuXHRcdFx0OiBbXTtcblx0fVxuXHRwcml2YXRlIHBhcnNlU2NlbmVzKCkge1xuXHRcdHRoaXMuc2NlbmVzID0gdGhpcy5qc29uLnNjZW5lcy5tYXAoKHNjZW5lKSA9PiB7XG5cdFx0XHRjb25zdCBub2RlID0gbmV3IE5vZGUoKTtcblx0XHRcdHNjZW5lPy5ub2Rlcz8ubWFwKChub2RlSWQpID0+IHtcblx0XHRcdFx0bm9kZS5hZGQodGhpcy5ub2Rlc1tub2RlSWRdKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBwYXJzZVRleHR1cmVzKCkge1xuXHRcdHRoaXMudGV4dHVyZXMgPSB0aGlzLmpzb24udGV4dHVyZXNcblx0XHRcdD8gKHRoaXMuanNvbi50ZXh0dXJlcyBhcyBBcnJheTxhbnk+KS5tYXAoKHRleHR1cmUpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0c2FtcGxlcjogdGV4dHVyZS5zYW1wbGVyICE9PSB1bmRlZmluZWQgPyB0aGlzLnNhbXBsZXJzW3RleHR1cmUuc2FtcGxlcl0gOiB0aGlzLmdldFNhbXBsZXIoe30pLFxuXHRcdFx0XHRcdFx0dGV4dHVyZTogdGhpcy5jcmVhdGVUZXh0dXJlKHRleHR1cmUuc291cmNlKVxuXHRcdFx0XHRcdH07XG5cdFx0XHQgIH0pXG5cdFx0XHQ6IFtdO1xuXHR9XG5cdHByaXZhdGUgcGFyc2VNYXRlcmlhbHMoKSB7XG5cdFx0dGhpcy5tYXRlcmlhbHMgPSB0aGlzLmpzb24ubWF0ZXJpYWxzXG5cdFx0XHQ/ICh0aGlzLmpzb24ubWF0ZXJpYWxzIGFzIEFycmF5PGFueT4pLm1hcCgobWF0ZXJpYWwpID0+IHtcblx0XHRcdFx0XHRjb25zdCBtYXQgPSBuZXcgUGJyTWF0ZXJpYWwoKTtcblx0XHRcdFx0XHRjb25zdCB7XG5cdFx0XHRcdFx0XHRiYXNlQ29sb3JGYWN0b3IsXG5cdFx0XHRcdFx0XHRtZXRhbGxpY0ZhY3Rvcixcblx0XHRcdFx0XHRcdG1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSxcblx0XHRcdFx0XHRcdGJhc2VDb2xvclRleHR1cmUsXG5cdFx0XHRcdFx0XHRyb3VnaG5lc3NGYWN0b3Jcblx0XHRcdFx0XHR9ID0gbWF0ZXJpYWwucGJyTWV0YWxsaWNSb3VnaG5lc3M7XG5cdFx0XHRcdFx0aWYgKG1hdGVyaWFsLm5vcm1hbFRleHR1cmUpIG1hdC5ub3JtYWxUZXh0dXJlID0gdGhpcy50ZXh0dXJlc1ttYXRlcmlhbC5ub3JtYWxUZXh0dXJlLmluZGV4XS50ZXh0dXJlO1xuXHRcdFx0XHRcdGlmIChtYXRlcmlhbC5vY2NsdXNpb25UZXh0dXJlKVxuXHRcdFx0XHRcdFx0bWF0LmFvVGV4dHVyZSA9IHRoaXMudGV4dHVyZXNbbWF0ZXJpYWwub2NjbHVzaW9uVGV4dHVyZS5pbmRleF0udGV4dHVyZTtcblx0XHRcdFx0XHRpZiAobWF0ZXJpYWwuZW1pc3NpdmVUZXh0dXJlKVxuXHRcdFx0XHRcdFx0bWF0LmVtaXNzaXZlVGV4dHVyZSA9IHRoaXMudGV4dHVyZXNbbWF0ZXJpYWwuZW1pc3NpdmVUZXh0dXJlLmluZGV4XS50ZXh0dXJlO1xuXHRcdFx0XHRcdGlmIChiYXNlQ29sb3JUZXh0dXJlKSBtYXQuYmFzZVRleHR1cmUgPSB0aGlzLnRleHR1cmVzW2Jhc2VDb2xvclRleHR1cmUuaW5kZXhdLnRleHR1cmU7XG5cdFx0XHRcdFx0aWYgKG1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSlcblx0XHRcdFx0XHRcdG1hdC5tZXRhbG5lc3NSb3VnaG5lc3NUZXh0dXJlID0gdGhpcy50ZXh0dXJlc1ttZXRhbGxpY1JvdWdobmVzc1RleHR1cmUuaW5kZXhdLnRleHR1cmU7XG5cdFx0XHRcdFx0aWYgKGJhc2VDb2xvckZhY3Rvcilcblx0XHRcdFx0XHRcdG1hdC5jb2xvciA9IG5ldyBDb2xvcihiYXNlQ29sb3JGYWN0b3JbMF0sIGJhc2VDb2xvckZhY3RvclsxXSwgYmFzZUNvbG9yRmFjdG9yWzJdKTtcblx0XHRcdFx0XHRtYXQubWV0YWxuZXNzID0gbWV0YWxsaWNGYWN0b3IgPz8gMS4wO1xuXHRcdFx0XHRcdG1hdC5yb3VnaG5lc3MgPSByb3VnaG5lc3NGYWN0b3IgPz8gMC4wO1xuXHRcdFx0XHRcdG1hdC5iYXNlU2FtcGxlciA9IG5ldyBTYW1wbGVyKHtcblx0XHRcdFx0XHRcdG1hZ0ZpbHRlcjogXCJsaW5lYXJcIixcblx0XHRcdFx0XHRcdG1pbkZpbHRlcjogXCJsaW5lYXJcIixcblx0XHRcdFx0XHRcdGFkZHJlc3NNb2RlVTogXCJyZXBlYXRcIixcblx0XHRcdFx0XHRcdGFkZHJlc3NNb2RlVjogXCJyZXBlYXRcIlxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdC8vIG1hdC5yb3VnaG5lc3MgPSAwLjA7XG5cdFx0XHRcdFx0Ly8gbWF0Lm1ldGFsbmVzcyA9IDEuMDtcblx0XHRcdFx0XHRyZXR1cm4gbWF0O1xuXHRcdFx0ICB9KVxuXHRcdFx0OiBbXTtcblx0fVxuXHRwcml2YXRlIHBhcnNlQWNjZXNzb3JzKCkge1xuXHRcdHRoaXMuYWNjZXNzb3JzID0gKHRoaXMuanNvbi5hY2Nlc3NvcnMgYXMgQXJyYXk8YW55PikubWFwKChhY2Nlc3NvcikgPT4ge1xuXHRcdFx0Y29uc3QgbiA9IGdsdGZFbnVtW2FjY2Vzc29yLnR5cGVdIGFzIG51bWJlcjtcblx0XHRcdGxldCBhcnJheTtcblx0XHRcdGlmIChhY2Nlc3Nvci5idWZmZXJWaWV3ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0YXJyYXkgPSBuZXdUeXBlZEFycmF5KFxuXHRcdFx0XHRcdGFjY2Vzc29yLmNvbXBvbmVudFR5cGUsXG5cdFx0XHRcdFx0bmV3IEFycmF5QnVmZmVyKG4gKiBhY2Nlc3Nvci5jb3VudCAqIChnbHRmRW51bVthY2Nlc3Nvci5jb21wb25lbnRUeXBlXSBhcyBudW1iZXIpKSxcblx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdGFjY2Vzc29yLmNvdW50ICogblxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YXJyYXkgPSB0aGlzLmdldEJ1ZmZlclZpZXcoYWNjZXNzb3IsIG4pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYWNjZXNzb3Iuc3BhcnNlKSB7XG5cdFx0XHRcdGFjY2Vzc29yLnNwYXJzZS5pbmRpY2VzLmNvdW50ID0gYWNjZXNzb3Iuc3BhcnNlLmNvdW50O1xuXHRcdFx0XHRhY2Nlc3Nvci5zcGFyc2UudmFsdWVzLmNvdW50ID0gYWNjZXNzb3Iuc3BhcnNlLmNvdW50O1xuXHRcdFx0XHRhY2Nlc3Nvci5zcGFyc2UudmFsdWVzLmNvbXBvbmVudFR5cGUgPSBhY2Nlc3Nvci5jb21wb25lbnRUeXBlO1xuXHRcdFx0XHRjb25zdCBpbmRpY2VzID0gdGhpcy5nZXRCdWZmZXJWaWV3KGFjY2Vzc29yLnNwYXJzZS5pbmRpY2VzLCAxKTtcblx0XHRcdFx0Y29uc3QgdmFsdWVzID0gdGhpcy5nZXRCdWZmZXJWaWV3KGFjY2Vzc29yLnNwYXJzZS52YWx1ZXMsIG4pO1xuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFjY2Vzc29yLnNwYXJzZS5jb3VudDsgaSArPSAxKSB7XG5cdFx0XHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBuOyBqICs9IDEpIHtcblx0XHRcdFx0XHRcdGFycmF5W2luZGljZXNbaV0gKiBuICsgal0gPSB2YWx1ZXNbaSAqIG4gKyBqXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGFycmF5O1xuXHRcdH0pO1xuXHR9XG5cdHByaXZhdGUgcGFyc2VBbmltYXRpb25zKCkge1xuXHRcdHRoaXMuYW5pbWF0aW9ucyA9IHRoaXM/Lmpzb24/LmFuaW1hdGlvbnM/Lm1hcCgoZ2x0ZkFuaW1hdGlvbiwgaW5kZXgpID0+IHtcblx0XHRcdGNvbnN0IHNhbXBsZXJzID0gZ2x0ZkFuaW1hdGlvbj8uc2FtcGxlcnM/Lm1hcCgoZ2x0ZlNhbXBsZXIpID0+IHtcblx0XHRcdFx0Y29uc3Qgc2FtcGxlciA9IG5ldyBBbmltYXRpb25TYW1wbGVyKCk7XG5cdFx0XHRcdHNhbXBsZXIuZm9ybUdsdGYodGhpcywgZ2x0ZlNhbXBsZXIpO1xuXHRcdFx0XHRyZXR1cm4gc2FtcGxlcjtcblx0XHRcdH0pO1xuXHRcdFx0Y29uc3QgY2hhbm5lbHMgPSBnbHRmQW5pbWF0aW9uPy5jaGFubmVscz8ubWFwKChnbHRmQ2hhbm5lbCkgPT4ge1xuXHRcdFx0XHRjb25zdCBhbmltYXRpb25DaGFubmVsID0gbmV3IEFuaW1hdGlvbkNoYW5uZWwoKTtcblx0XHRcdFx0YW5pbWF0aW9uQ2hhbm5lbC5zYW1wbGVyID0gc2FtcGxlcnNbZ2x0ZkNoYW5uZWwuc2FtcGxlcl07XG5cdFx0XHRcdGFuaW1hdGlvbkNoYW5uZWwudGFyZ2V0ID0gbmV3IEFuaW1hdGlvbkNoYW5uZWxUYXJnZXQoXG5cdFx0XHRcdFx0dGhpcy5ub2Rlc1tnbHRmQ2hhbm5lbC50YXJnZXQubm9kZV0sXG5cdFx0XHRcdFx0Z2x0ZkNoYW5uZWwudGFyZ2V0LnBhdGhcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuIGFuaW1hdGlvbkNoYW5uZWw7XG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oaW5kZXgudG9TdHJpbmcoKSwgc2FtcGxlcnMsIGNoYW5uZWxzKTtcblx0XHRcdHJldHVybiBhbmltYXRpb247XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBwYXJzZU1lc2hzKCkge1xuXHRcdHRoaXMuZ2x0Zk1lc2hzID0gdGhpcz8uanNvbj8ubWVzaGVzPy5tYXA/LigoZ2x0Zm1lc2gpID0+IHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG5hbWU6IGdsdGZtZXNoLm5hbWUsXG5cdFx0XHRcdHByaW1pdGl2ZXM6IGdsdGZtZXNoPy5wcmltaXRpdmVzPy5tYXA/LigocHJpbWl0aXZlKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPVxuXHRcdFx0XHRcdFx0cHJpbWl0aXZlLm1hdGVyaWFsICE9PSB1bmRlZmluZWRcblx0XHRcdFx0XHRcdFx0PyB0aGlzLm1hdGVyaWFsc1twcmltaXRpdmUubWF0ZXJpYWxdXG5cdFx0XHRcdFx0XHRcdDogeyBwYnJNZXRhbGxpY1JvdWdobmVzczoge30gfTtcblx0XHRcdFx0XHRjb25zdCBnZW8gPSB0aGlzLmNyZWF0ZUdlb21ldHJ5KHByaW1pdGl2ZSwgbWF0ZXJpYWwpO1xuXHRcdFx0XHRcdGNvbnN0IG1lc2ggPSBuZXcgTWVzaChnZW8sIG1hdGVyaWFsKTtcblx0XHRcdFx0XHRyZXR1cm4gbWVzaDtcblx0XHRcdFx0fSlcblx0XHRcdH07XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBnZXRTYW1wbGVyKHNhbXBsZXJKc29uOiBhbnkpIHtcblx0XHRyZXR1cm4gbmV3IFNhbXBsZXIoe1xuXHRcdFx0bWFnRmlsdGVyOiBnbHRmRW51bVtzYW1wbGVySnNvbi5tYWdGaWx0ZXIgfHwgOTcyOV0gYXMgR1BVRmlsdGVyTW9kZSxcblx0XHRcdG1pbkZpbHRlcjogZ2x0ZkVudW1bc2FtcGxlckpzb24ubWluRmlsdGVyIHx8IDk3MjldIGFzIEdQVUZpbHRlck1vZGUsXG5cdFx0XHRhZGRyZXNzTW9kZVU6IGdsdGZFbnVtW3NhbXBsZXJKc29uLndyYXBTIHx8IDEwNDk3XSBhcyBHUFVBZGRyZXNzTW9kZSxcblx0XHRcdGFkZHJlc3NNb2RlVjogZ2x0ZkVudW1bc2FtcGxlckpzb24ud3JhcFQgfHwgMTA0OTddIGFzIEdQVUFkZHJlc3NNb2RlXG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBnZXRCdWZmZXJWaWV3KGFjY2Vzc29yOiBhbnksIG46IG51bWJlcikge1xuXHRcdGNvbnN0IGJ1ZmZlclZpZXcgPSB0aGlzLmJ1ZmZlclZpZXdzW2FjY2Vzc29yLmJ1ZmZlclZpZXddO1xuXHRcdGNvbnN0IG9mZnNldCA9IChidWZmZXJWaWV3LmJ5dGVPZmZzZXQgfHwgMCkgKyAoYWNjZXNzb3IuYnl0ZU9mZnNldCB8fCAwKTtcblx0XHRjb25zdCBzdHJpZGUgPSBNYXRoLm1heChidWZmZXJWaWV3LmJ5dGVTdHJpZGUgLyA0IHx8IDAsIG4pO1xuXHRcdGxldCBhcnJheSA9IG5ld1R5cGVkQXJyYXkoXG5cdFx0XHRhY2Nlc3Nvci5jb21wb25lbnRUeXBlLFxuXHRcdFx0dGhpcy5idWZmZXJzW2J1ZmZlclZpZXcuYnVmZmVyXSxcblx0XHRcdGJ1ZmZlclZpZXcuYnVmZmVyID09PSAwID8gb2Zmc2V0ICsgdGhpcy5nbGJPZmZzZXQgOiBvZmZzZXQsXG5cdFx0XHQoYWNjZXNzb3IuY291bnQgLSAxKSAqIHN0cmlkZSArIG5cblx0XHQpO1xuXG5cdFx0aWYgKHN0cmlkZSA+IG4pIHtcblx0XHRcdGNvbnN0IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yIGFzIHtcblx0XHRcdFx0bmV3ICguLi5hcmdzOiBhbnkpOiBUeXBlZEFycmF5O1xuXHRcdFx0fTtcblx0XHRcdGNvbnN0IHN0cmlkZWQgPSBuZXcgVHlwZWRBcnJheUNvbnN0cnVjdG9yKGFjY2Vzc29yLmNvdW50ICogbik7XG5cdFx0XHRmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCBzdHJpZGVkLmxlbmd0aDsgaSArPSBuLCBqICs9IHN0cmlkZSkge1xuXHRcdFx0XHRmb3IgKGxldCBrID0gMDsgayA8IG47IGsgKz0gMSkge1xuXHRcdFx0XHRcdHN0cmlkZWRbaSArIGtdID0gYXJyYXlbaiArIGtdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRhcnJheSA9IHN0cmlkZWQ7XG5cdFx0fVxuXHRcdHJldHVybiBhcnJheTtcblx0fVxuXHRwcml2YXRlIGNyZWF0ZUdlb21ldHJ5KHByaW1pdGl2ZSwgbWF0ZXJpYWwpIHtcblx0XHRsZXQgaW5kaWNlcyA9IG51bGw7XG5cdFx0Y29uc3QgZGVmaW5lczogeyBbcHJvcDogc3RyaW5nXTogYm9vbGVhbiB8IG51bWJlciB9ID0geyBIQVNfTk9STUFMOiB0cnVlIH07XG5cdFx0bGV0IHZlcnRleENvdW50O1xuXHRcdGlmIChwcmltaXRpdmUuaW5kaWNlcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRpbmRpY2VzID0gdG9JbmRpY2VzKHRoaXMuYWNjZXNzb3JzW3ByaW1pdGl2ZS5pbmRpY2VzXSk7XG5cdFx0XHR2ZXJ0ZXhDb3VudCA9IHRoaXMuanNvbi5hY2Nlc3NvcnNbcHJpbWl0aXZlLmluZGljZXNdLmNvdW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2ZXJ0ZXhDb3VudCA9IHRoaXMuanNvbi5hY2Nlc3NvcnNbcHJpbWl0aXZlLmF0dHJpYnV0ZXMuUE9TSVRJT05dLmNvdW50O1xuXHRcdH1cblx0XHRjb25zdCBwb3NpdGlvbnMgPSB0aGlzLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5QT1NJVElPTl07XG5cdFx0Y29uc3QgeyBtYXgsIG1pbiB9ID0gdGhpcy5qc29uLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5QT1NJVElPTl07XG5cdFx0Y29uc3QgYm91bmRpbmdCb3ggPSB7IG1heCwgbWluIH07XG5cblx0XHRsZXQgbm9ybWFscztcblx0XHRpZiAocHJpbWl0aXZlLmF0dHJpYnV0ZXMuTk9STUFMICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdG5vcm1hbHMgPSB0aGlzLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5OT1JNQUxdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRub3JtYWxzID0gZ2VuZXJhdGVOb3JtYWxzKGluZGljZXMsIHBvc2l0aW9ucyk7XG5cdFx0fVxuXG5cdFx0bGV0IHV2cyA9IG51bGw7XG5cdFx0aWYgKHByaW1pdGl2ZS5hdHRyaWJ1dGVzLlRFWENPT1JEXzAgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dXZzID0gdGhpcy5hY2Nlc3NvcnNbcHJpbWl0aXZlLmF0dHJpYnV0ZXMuVEVYQ09PUkRfMF07XG5cdFx0XHRkZWZpbmVzLkhBU19VViA9IHRydWU7XG5cdFx0fVxuXHRcdGxldCB1djFzID0gbnVsbDtcblx0XHRpZiAocHJpbWl0aXZlLmF0dHJpYnV0ZXMuVEVYQ09PUkRfMSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR1djFzID0gdGhpcy5hY2Nlc3NvcnNbcHJpbWl0aXZlLmF0dHJpYnV0ZXMuVEVYQ09PUkRfMV07XG5cdFx0XHRkZWZpbmVzLkhBU19VVjEgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCB0YW5nZW50cyA9IG51bGw7XG5cdFx0aWYgKHByaW1pdGl2ZS5hdHRyaWJ1dGVzLlRBTkdFTlQgIT09IHVuZGVmaW5lZCAmJiBwcmltaXRpdmUuYXR0cmlidXRlcy5OT1JNQUwgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGFuZ2VudHMgPSB0aGlzLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5UQU5HRU5UXTtcblx0XHRcdC8vZGVmaW5lcy5IQVNfVEFOR0VOVCA9IHRydWU7XG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbC5ub3JtYWxUZXh0dXJlKSB7XG5cdFx0XHQvL3RhbmdlbnRzID0gZ2VuZXJhdGVUYW5nZW50cyhpbmRpY2VzLCBwb3NpdGlvbnMsIG5vcm1hbHMsIHV2cyEpO1xuXHRcdH1cblx0XHRsZXQgY29sb3JzID0gbnVsbDtcblx0XHRpZiAocHJpbWl0aXZlLmF0dHJpYnV0ZXMuQ09MT1JfMCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb2xvcnMgPSB0aGlzLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5DT0xPUl8wXTtcblx0XHRcdGRlZmluZXMuSEFTX0NPTE9SID0gdHJ1ZTtcblx0XHR9XG5cdFx0bGV0IGpvaW50cyA9IG51bGw7XG5cdFx0aWYgKHByaW1pdGl2ZS5hdHRyaWJ1dGVzLkpPSU5UU18wICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGpvaW50cyA9IHRoaXMuYWNjZXNzb3JzW3ByaW1pdGl2ZS5hdHRyaWJ1dGVzLkpPSU5UU18wXTtcblx0XHRcdC8vIGRlZmluZXMuSEFTX1NLSU4gPSB0cnVlO1xuXHRcdH1cblx0XHRsZXQgd2VpZ2h0cyA9IG51bGw7XG5cdFx0aWYgKHByaW1pdGl2ZS5hdHRyaWJ1dGVzLldFSUdIVFNfMCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR3ZWlnaHRzID0gdGhpcy5hY2Nlc3NvcnNbcHJpbWl0aXZlLmF0dHJpYnV0ZXMuV0VJR0hUU18wXTtcblx0XHR9XG5cdFx0Y29uc3QgZ2VvID0gbmV3IEdlb21ldHJ5KHsgdHlwZTogXCJwYnJHZW9tdHJ5XCIgfSk7XG5cdFx0aWYgKGluZGljZXMpIGdlby5zZXRJbmRpY2UoQXJyYXkuZnJvbShpbmRpY2VzKSk7XG5cdFx0aWYgKHBvc2l0aW9ucykgZ2VvLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIEFycmF5LmZyb20ocG9zaXRpb25zKSwgMykpO1xuXHRcdGlmIChub3JtYWxzKSBnZW8uc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwibm9ybWFsXCIsIEFycmF5LmZyb20obm9ybWFscyksIDMpKTtcblx0XHRpZiAoY29sb3JzKSBnZW8uc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwiY29sb3JcIiwgQXJyYXkuZnJvbShjb2xvcnMpLCAzKSk7XG5cdFx0aWYgKHV2cykgZ2VvLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInV2XCIsIEFycmF5LmZyb20odXZzKSwgMikpO1xuXHRcdC8vIGlmIChqb2ludHMpIGdlby5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJqb2ludDBcIiwgQXJyYXkuZnJvbShqb2ludHMpLCA0KSk7XG5cdFx0Ly8gaWYgKHdlaWdodHMpIGdlby5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJ3ZWlnaHQwXCIsIEFycmF5LmZyb20od2VpZ2h0cyksIDQpKTtcblx0XHRnZW8uZGVmaW5lcyA9IGRlZmluZXM7XG5cdFx0Z2VvLmNvbXB1dGVCb3VuZGluZ1NwaGVyZShBcnJheS5mcm9tKHBvc2l0aW9ucykpO1xuXHRcdGdlby5jb3VudCA9IHZlcnRleENvdW50O1xuXHRcdHJldHVybiBnZW87XG5cdH1cblx0cHJpdmF0ZSBjcmVhdGVUZXh0dXJlKHNvdXJjZTogbnVtYmVyKSB7XG5cdFx0cmV0dXJuIG5ldyBUZXh0dXJlKHtcblx0XHRcdHNpemU6IHtcblx0XHRcdFx0d2lkdGg6IHRoaXMuaW1hZ2VzW3NvdXJjZV0ud2lkdGgsXG5cdFx0XHRcdGhlaWdodDogdGhpcy5pbWFnZXNbc291cmNlXS5oZWlnaHQsXG5cdFx0XHRcdGRlcHRoOiAxXG5cdFx0XHR9LFxuXHRcdFx0ZGF0YToge1xuXHRcdFx0XHRzb3VyY2U6IHRoaXMuaW1hZ2VzW3NvdXJjZV1cblx0XHRcdH0sXG5cdFx0XHRmb3JtYXQ6IFwicmdiYTh1bm9ybVwiLFxuXHRcdFx0dXNhZ2U6IEdQVVRleHR1cmVVc2FnZS5URVhUVVJFX0JJTkRJTkcgfCBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9EU1QgfCBHUFVUZXh0dXJlVXNhZ2UuUkVOREVSX0FUVEFDSE1FTlRcblx0XHR9KTtcblx0fVxuXHRwcml2YXRlIGFzeW5jIGxvYWRJbWFnZXMoKSB7XG5cdFx0Y29uc3QgaW1hZ2VzOiBBcnJheTxJbWFnZUJpdG1hcD4gPSBbXTtcblx0XHRsZXQgbG9hZEV4dGVybmFsSW1hZ2VzOiBQcm9taXNlPGFueT4gPSBQcm9taXNlLnJlc29sdmUoKTtcblx0XHRpZiAodGhpcy5qc29uLmltYWdlcykge1xuXHRcdFx0bG9hZEV4dGVybmFsSW1hZ2VzID0gUHJvbWlzZS5hbGwoXG5cdFx0XHRcdHRoaXMuanNvbi5pbWFnZXMubWFwKGFzeW5jIChpbWFnZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGltYWdlLnVyaSkge1xuXHRcdFx0XHRcdFx0Y29uc3QgaW1hZ2VVcmwgPSBpbWFnZS51cmkuc2xpY2UoMCwgNSkgPT09IFwiZGF0YTpcIiA/IGltYWdlLnVyaSA6IGAke3RoaXMucm9vdFVybH0vJHtpbWFnZS51cml9YDtcblx0XHRcdFx0XHRcdGltYWdlc1tpbmRleF0gPSBhd2FpdCBmZXRjaChpbWFnZVVybClcblx0XHRcdFx0XHRcdFx0LnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5ibG9iKCkpXG5cdFx0XHRcdFx0XHRcdC50aGVuKChibG9iKSA9PlxuXHRcdFx0XHRcdFx0XHRcdGNyZWF0ZUltYWdlQml0bWFwKGJsb2IsIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbG9yU3BhY2VDb252ZXJzaW9uOiBcIm5vbmVcIlxuXHRcdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0XHR9XG5cdFx0bGV0IGxvYWRJbnRlcm5hbEltYWdlczogUHJvbWlzZTxhbnk+ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0aWYgKHRoaXMuanNvbi5pbWFnZXMpIHtcblx0XHRcdGxvYWRJbnRlcm5hbEltYWdlcyA9IFByb21pc2UuYWxsKFxuXHRcdFx0XHR0aGlzLmpzb24uaW1hZ2VzLm1hcChhc3luYyAoaW1hZ2U6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRcdGlmIChpbWFnZS5idWZmZXJWaWV3ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHsgYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoIH0gPSB0aGlzLmpzb24uYnVmZmVyVmlld3NbaW1hZ2UuYnVmZmVyVmlld107XG5cdFx0XHRcdFx0XHRjb25zdCBhcnJheSA9IG5ldyBVaW50OEFycmF5KFxuXHRcdFx0XHRcdFx0XHR0aGlzLmJ1ZmZlcnNbYnVmZmVyXSxcblx0XHRcdFx0XHRcdFx0YnVmZmVyID09PSAwID8gYnl0ZU9mZnNldCArIHRoaXMuZ2xiT2Zmc2V0IDogYnl0ZU9mZnNldCxcblx0XHRcdFx0XHRcdFx0Ynl0ZUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdGxldCB0eXBlO1xuXHRcdFx0XHRcdFx0aWYgKGltYWdlLm1pbWVUeXBlKSB7XG5cdFx0XHRcdFx0XHRcdHR5cGUgPSBpbWFnZS5taW1lVHlwZTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHR5cGUgPSBhcnJheVswXSA9PT0gMHhmZiA/IFwiaW1hZ2UvanBlZ1wiIDogXCJpbWFnZS9wbmdcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbYXJyYXldLCB7IHR5cGUgfSk7XG5cdFx0XHRcdFx0XHRpbWFnZXNbaW5kZXhdID0gYXdhaXQgY3JlYXRlSW1hZ2VCaXRtYXAoYmxvYiwge1xuXHRcdFx0XHRcdFx0XHRjb2xvclNwYWNlQ29udmVyc2lvbjogXCJub25lXCJcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0YXdhaXQgUHJvbWlzZS5hbGwoW2xvYWRFeHRlcm5hbEltYWdlcywgbG9hZEludGVybmFsSW1hZ2VzXSk7XG5cdFx0cmV0dXJuIGltYWdlcztcblx0fVxuXHRwcml2YXRlIGFzeW5jIGxvYWRCdWZmZXMoKSB7XG5cdFx0Y29uc3QgYnVmZmVyczogQXJyYXk8QXJyYXlCdWZmZXI+ID0gW107XG5cdFx0YXdhaXQgUHJvbWlzZS5hbGwoXG5cdFx0XHR0aGlzLmpzb24uYnVmZmVycy5tYXAoKGJ1ZmZlcjogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdGlmICghYnVmZmVyLnVyaSkge1xuXHRcdFx0XHRcdGlmIChpbmRleCAhPT0gMCkge1xuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYnVmZmVyIHVyaSB1bmRlZmluZWRcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJ1ZmZlcnNbaW5kZXhdID0gdGhpcy5nbGJCaW4hO1xuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBidWZmZXJVcmwgPSBidWZmZXIudXJpLnNsaWNlKDAsIDUpID09PSBcImRhdGE6XCIgPyBidWZmZXIudXJpIDogYCR7dGhpcy5yb290VXJsfS8ke2J1ZmZlci51cml9YDtcblx0XHRcdFx0cmV0dXJuIGZldGNoKGJ1ZmZlclVybClcblx0XHRcdFx0XHQudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG5cdFx0XHRcdFx0LnRoZW4oKGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlcikgPT4ge1xuXHRcdFx0XHRcdFx0YnVmZmVyc1tpbmRleF0gPSBhcnJheUJ1ZmZlcjtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pXG5cdFx0KTtcblx0XHRyZXR1cm4gYnVmZmVycztcblx0fVxuXHRwcml2YXRlIHBhcnNlTm9kZXMoKSB7XG5cdFx0dGhpcy5ub2RlcyA9IHRoaXM/Lmpzb24/Lm5vZGVzPy5tYXAoKGdsdGZOb2RlKSA9PiB7XG5cdFx0XHRjb25zdCBub2RlID0gbmV3IE5vZGUoKTtcblx0XHRcdGlmIChnbHRmTm9kZS5tZXNoICE9IHVuZGVmaW5lZCkgbm9kZS5tZXNoTGlzdCA9IHRoaXMuZ2x0Zk1lc2hzW2dsdGZOb2RlLm1lc2hdLnByaW1pdGl2ZXM7XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZU5vZGVUUlMobm9kZSwgZ2x0Zk5vZGUpO1xuXHRcdH0pO1xuXHR9XG5cdHByaXZhdGUgcGFyc2VOb2RlVFJTKG5vZGU6IE5vZGUsIGdsdGZOb2RlOiBHTFRGTm9kZSk6IE5vZGUge1xuXHRcdGNvbnN0IHsgbWF0cml4LCByb3RhdGlvbiwgdHJhbnNsYXRpb24sIHNjYWxlIH0gPSBnbHRmTm9kZTtcblx0XHRpZiAobWF0cml4KSBNYXRyaXg0LmZyb21Db2x1bW5NYWpvckFycmF5KG1hdHJpeCwgbm9kZS5tb2RlbE1hdHJpeCk7XG5cdFx0aWYgKHJvdGF0aW9uKSBub2RlLnF1YXRlcm5pb24uc2V0KHJvdGF0aW9uWzBdLCByb3RhdGlvblsxXSwgcm90YXRpb25bMl0sIHJvdGF0aW9uWzNdKTtcblx0XHRpZiAodHJhbnNsYXRpb24pIG5vZGUucG9zaXRpb24uc2V0KHRyYW5zbGF0aW9uWzBdLCB0cmFuc2xhdGlvblsxXSwgdHJhbnNsYXRpb25bMl0pO1xuXHRcdGlmIChzY2FsZSkgbm9kZS5zY2FsZS5zZXQoc2NhbGVbMF0sIHNjYWxlWzFdLCBzY2FsZVsyXSk7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH1cblx0cHJpdmF0ZSBub3JtYWxpemVEYXRhKCkge1xuXHRcdHRoaXM/Lm5vZGVzPy5tYXA/Ligobm9kZTogTm9kZSwgaW5kZXgpID0+IHtcblx0XHRcdG5vZGUuY2hpbGRyZW4gPSB0aGlzLmpzb24/Lm5vZGVzW2luZGV4XT8uY2hpbGRyZW4/Lm1hcCgobm9kZUlkOiBudW1iZXIpID0+IHtcblx0XHRcdFx0Y29uc3QgY2hpbGROb2RlID0gdGhpcy5ub2Rlc1tub2RlSWRdO1xuXHRcdFx0XHRpZiAoY2hpbGROb2RlKSBjaGlsZE5vZGUucGFyZW50ID0gbm9kZTtcblx0XHRcdFx0cmV0dXJuIGNoaWxkTm9kZTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEdMVEYodXJsOiBzdHJpbmcpIHtcblx0bGV0IGdsdGY7XG5cdGNvbnN0IGV4dCA9IHVybC5zcGxpdChcIi5cIikucG9wKCk7XG5cdGNvbnN0IHJvb3RVcmwgPSB1cmwuc3Vic3RyaW5nKDAsIHVybC5sYXN0SW5kZXhPZihcIi9cIikpO1xuXHRpZiAoZXh0ID09PSBcImdsdGZcIikge1xuXHRcdGNvbnN0IGpzb24gPSBhd2FpdCBmZXRjaCh1cmwpLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpO1xuXHRcdGdsdGYgPSBuZXcgR0xURihqc29uLCByb290VXJsLCAwKTtcblx0fSBlbHNlIHtcblx0XHRjb25zdCBnbGIgPSBhd2FpdCBmZXRjaCh1cmwpLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKTtcblx0XHRjb25zdCBqc29uTGVuZ3RoID0gbmV3IFVpbnQzMkFycmF5KGdsYiwgMTIsIDEpWzBdO1xuXHRcdGNvbnN0IGpzb25DaHVuayA9IG5ldyBVaW50OEFycmF5KGdsYiwgMjAsIGpzb25MZW5ndGgpO1xuXHRcdGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpLmRlY29kZShqc29uQ2h1bmspKTtcblx0XHRnbHRmID0gbmV3IEdMVEYoanNvbiwgcm9vdFVybCwgMjggKyBqc29uTGVuZ3RoLCBnbGIpO1xuXHR9XG5cdGF3YWl0IGdsdGYucGFyc2VEYXRhKCk7XG5cdHJldHVybiBnbHRmO1xufVxudHlwZSBHTFRGTm9kZSA9IHtcblx0Y2hpbGRyZW4/OiBudW1iZXJbXTtcblx0bWF0cml4PzogbnVtYmVyW107XG5cdHNjYWxlPzogbnVtYmVyW107XG5cdHJvdGF0aW9uPzogbnVtYmVyW107XG5cdHRyYW5zbGF0aW9uPzogbnVtYmVyW107XG59O1xuZXhwb3J0IGVudW0gVHlwZTJOdW1PZkNvbXBvbmVudCB7XG5cdFwiU0NBTEFSXCIgPSAxLFxuXHRcIlZFQzJcIiA9IDIsXG5cdFwiVkVDM1wiID0gMyxcblx0XCJWRUM0XCIgPSA0LFxuXHRcIk1BVDJcIiA9IDQsXG5cdFwiTUFUM1wiID0gOSxcblx0XCJNQVQ0XCIgPSAxNlxufVxuIiwiaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZFBiclRleHR1cmUoYnJkZiwgZGlmZnVzZSwgc3BlY3VsYXIpIHtcblx0aWYgKCFicmRmKSByZXR1cm47XG5cdGNvbnN0IGJyZGZUZXh0dXJlID0gYXdhaXQgbG9hZFRleHR1cmUoYnJkZik7XG5cdGNvbnN0IGRpZmZ1c2VUZXh0dXJlID0gYXdhaXQgbG9hZEN1YmVUZXh0dXJlKGRpZmZ1c2UpO1xuXHRjb25zdCBzcGVjdWxhclRleHR1cmUgPSBhd2FpdCBsb2FkQ3ViZVRleHR1cmUoc3BlY3VsYXIpO1xuXHRyZXR1cm4ge1xuXHRcdGJyZGZUZXh0dXJlLFxuXHRcdGRpZmZ1c2VUZXh0dXJlLFxuXHRcdHNwZWN1bGFyVGV4dHVyZVxuXHR9O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRDdWJlVGV4dHVyZSh1cmxzKSB7XG5cdGNvbnN0IHByb21pc2VzID0gdXJscy5tYXAoKHNyYykgPT4ge1xuXHRcdGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG5cdFx0aW1nLnNyYyA9IHNyYztcblx0XHRyZXR1cm4gaW1nLmRlY29kZSgpLnRoZW4oKCkgPT4gY3JlYXRlSW1hZ2VCaXRtYXAoaW1nKSk7XG5cdH0pO1xuXHRjb25zdCBpbWFnZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG5cdGF3YWl0IFByb21pc2UuYWxsKGltYWdlcyk7XG5cdGNvbnN0IGRhdGEgPSBpbWFnZXMubWFwKChpbWFnZSwgaSkgPT4ge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzb3VyY2U6IGltYWdlLFxuXHRcdFx0d2lkdGg6IGltYWdlLndpZHRoLFxuXHRcdFx0aGVpZ2h0OiBpbWFnZS5oZWlnaHQsXG5cdFx0XHRkZXB0aDogMSxcblx0XHRcdHg6IDAsXG5cdFx0XHR5OiAwLFxuXHRcdFx0ejogaVxuXHRcdH07XG5cdH0pO1xuXHRyZXR1cm4gbmV3IFRleHR1cmUoe1xuXHRcdHNpemU6IHtcblx0XHRcdHdpZHRoOiBpbWFnZXNbMF0ud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGltYWdlc1swXS5oZWlnaHQsXG5cdFx0XHRkZXB0aDogNlxuXHRcdH0sXG5cdFx0Zm9ybWF0OiBcInJnYmE4dW5vcm1cIixcblx0XHR1c2FnZTogR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyB8IEdQVVRleHR1cmVVc2FnZS5DT1BZX0RTVCB8IEdQVVRleHR1cmVVc2FnZS5SRU5ERVJfQVRUQUNITUVOVCxcblx0XHRkYXRhLFxuXHRcdHZpZXdGb3JtYXRzOiBcImN1YmVcIixcblx0XHRtaXBMZXZlbENvdW50OiA2LFxuXHRcdG5lZWRNaXBNYXA6IHRydWVcblx0fSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZFRleHR1cmUodXJsKSB7XG5cdGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG5cdGltZy5zcmMgPSB1cmw7XG5cdGF3YWl0IGltZy5kZWNvZGUoKTtcblx0Y29uc3QgaW1hZ2VCaXRtYXAgPSBhd2FpdCBjcmVhdGVJbWFnZUJpdG1hcChpbWcpO1xuXHRjb25zdCBiYXNlVGV4dHVyZSA9IG5ldyBUZXh0dXJlKHtcblx0XHRzaXplOiB7IHdpZHRoOiBpbWFnZUJpdG1hcC53aWR0aCwgaGVpZ2h0OiBpbWFnZUJpdG1hcC5oZWlnaHQsIGRlcHRoOiAxIH0sXG5cdFx0ZGF0YToge1xuXHRcdFx0c291cmNlOiBpbWFnZUJpdG1hcFxuXHRcdH0sXG5cdFx0Zm9ybWF0OiBcInJnYmE4dW5vcm1cIlxuXHR9KTtcblx0cmV0dXJuIGJhc2VUZXh0dXJlO1xufVxuIiwiaW1wb3J0IEdNYXRoIGZyb20gXCIuL01hdGguanNcIjtcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4vVmVjdG9yMy5qc1wiO1xyXG4vL2Zyb20gdGhyZWUuanNcclxuY2xhc3MgU3BoZXJpY2FsIHtcclxuICByYWRpdXM6IG51bWJlcjtcclxuICBwaGk6IG51bWJlcjtcclxuICB0aGV0YTogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyYWRpdXMgPSAxLCBwaGkgPSAwLCB0aGV0YSA9IDApIHtcclxuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG4gICAgdGhpcy5waGkgPSBwaGk7IC8vIHBvbGFyIGFuZ2xlXHJcbiAgICB0aGlzLnRoZXRhID0gdGhldGE7IC8vIGF6aW11dGhhbCBhbmdsZVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBzZXQocmFkaXVzOiBudW1iZXIsIHBoaTogbnVtYmVyLCB0aGV0YTogbnVtYmVyKTogU3BoZXJpY2FsIHtcclxuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG4gICAgdGhpcy5waGkgPSBwaGk7XHJcbiAgICB0aGlzLnRoZXRhID0gdGhldGE7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGNvcHkob3RoZXI6IFNwaGVyaWNhbCk6IFNwaGVyaWNhbCB7XHJcbiAgICB0aGlzLnJhZGl1cyA9IG90aGVyLnJhZGl1cztcclxuICAgIHRoaXMucGhpID0gb3RoZXIucGhpO1xyXG4gICAgdGhpcy50aGV0YSA9IG90aGVyLnRoZXRhO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICAvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBFUFMgYW5kIFBJLUVQU1xyXG4gIG1ha2VTYWZlKCk6IFNwaGVyaWNhbCB7XHJcbiAgICBjb25zdCBFUFMgPSAwLjAwMDAwMTtcclxuICAgIHRoaXMucGhpID0gTWF0aC5tYXgoRVBTLCBNYXRoLm1pbihNYXRoLlBJIC0gRVBTLCB0aGlzLnBoaSkpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgc2V0RnJvbVZlY3RvcjModjogVmVjdG9yMyk6IFNwaGVyaWNhbCB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXRGcm9tQ2FydGVzaWFuQ29vcmRzKHYueCwgdi55LCB2LnopO1xyXG4gIH1cclxuICBzZXRGcm9tQ2FydGVzaWFuQ29vcmRzKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBTcGhlcmljYWwge1xyXG4gICAgdGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcclxuXHJcbiAgICBpZiAodGhpcy5yYWRpdXMgPT09IDApIHtcclxuICAgICAgdGhpcy50aGV0YSA9IDA7XHJcbiAgICAgIHRoaXMucGhpID0gMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudGhldGEgPSBNYXRoLmF0YW4yKHgsIHopO1xyXG4gICAgICB0aGlzLnBoaSA9IE1hdGguYWNvcyhHTWF0aC5jbGFtcCh5IC8gdGhpcy5yYWRpdXMsIC0xLCAxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBjbG9uZSgpOiBTcGhlcmljYWwge1xyXG4gICAgcmV0dXJuIG5ldyBTcGhlcmljYWwodGhpcy5yYWRpdXMsIHRoaXMucGhpLCB0aGlzLnRoZXRhKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFNwaGVyaWNhbCB9O1xyXG4iLCJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiLi4vY29yZS9FdmVudERpc3BhdGNoZXJcIjtcclxuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gXCIuLi9tYXRoL1F1YXRlcm5pb25cIjtcclxuaW1wb3J0IHsgU3BoZXJpY2FsIH0gZnJvbSBcIi4uL21hdGgvU3BoZXJpY2FsXCI7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xyXG4vL2Zyb20gdGhyZWUuanNcclxuXHJcbmNvbnN0IF9jaGFuZ2VFdmVudCA9IHsgdHlwZTogXCJjaGFuZ2VcIiB9O1xyXG5jb25zdCBfc3RhcnRFdmVudCA9IHsgdHlwZTogXCJzdGFydFwiIH07XHJcbmNvbnN0IF9lbmRFdmVudCA9IHsgdHlwZTogXCJlbmRcIiB9O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3JiaXRDb250cm9sIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcclxuICBkb21FbGVtZW50OiBhbnk7XHJcbiAgb2JqZWN0OiBhbnk7XHJcbiAgZW5hYmxlZDogYm9vbGVhbjtcclxuICB0YXJnZXQ6IGFueTtcclxuICBtaW5EaXN0YW5jZTogbnVtYmVyO1xyXG4gIG1heERpc3RhbmNlOiBudW1iZXI7XHJcbiAgbWluWm9vbTogbnVtYmVyO1xyXG4gIG1heFpvb206IG51bWJlcjtcclxuICBtaW5Qb2xhckFuZ2xlOiBudW1iZXI7XHJcbiAgbWF4UG9sYXJBbmdsZTogbnVtYmVyO1xyXG4gIG1pbkF6aW11dGhBbmdsZTogbnVtYmVyO1xyXG4gIG1heEF6aW11dGhBbmdsZTogbnVtYmVyO1xyXG4gIGVuYWJsZURhbXBpbmc6IGJvb2xlYW47XHJcbiAgZGFtcGluZ0ZhY3RvcjogbnVtYmVyO1xyXG4gIGVuYWJsZVpvb206IGJvb2xlYW47XHJcbiAgem9vbVNwZWVkOiBudW1iZXI7XHJcbiAgZW5hYmxlUm90YXRlOiBib29sZWFuO1xyXG4gIHJvdGF0ZVNwZWVkOiBudW1iZXI7XHJcbiAgZW5hYmxlUGFuOiBib29sZWFuO1xyXG4gIHBhblNwZWVkOiBudW1iZXI7XHJcbiAgc2NyZWVuU3BhY2VQYW5uaW5nOiBib29sZWFuO1xyXG4gIGtleVBhblNwZWVkOiBudW1iZXI7XHJcbiAgYXV0b1JvdGF0ZTogYm9vbGVhbjtcclxuICBhdXRvUm90YXRlU3BlZWQ6IG51bWJlcjtcclxuICBrZXlzOiB7IExFRlQ6IHN0cmluZzsgVVA6IHN0cmluZzsgUklHSFQ6IHN0cmluZzsgQk9UVE9NOiBzdHJpbmcgfTtcclxuICBtb3VzZUJ1dHRvbnM6IHsgTEVGVDogYW55OyBNSURETEU6IGFueTsgUklHSFQ6IGFueSB9O1xyXG4gIHRvdWNoZXM6IHsgT05FOiBhbnk7IFRXTzogYW55IH07XHJcbiAgdGFyZ2V0MDogYW55O1xyXG4gIHBvc2l0aW9uMDogYW55O1xyXG4gIHpvb20wOiBhbnk7XHJcbiAgcHJpdmF0ZSBfZG9tRWxlbWVudEtleUV2ZW50czogYW55O1xyXG4gIHNwaGVyaWNhbDogYW55O1xyXG4gIG9uUG9pbnRlck1vdmU6IChldmVudDogYW55KSA9PiB2b2lkO1xyXG4gIG9uUG9pbnRlclVwOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICBvbkNvbnRleHRNZW51OiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICBvblBvaW50ZXJEb3duOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICBvbk1vdXNlV2hlZWw6IChldmVudDogYW55KSA9PiB2b2lkO1xyXG4gIG9uS2V5RG93bjogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XHJcbiAgZ2V0QXV0b1JvdGF0aW9uQW5nbGU6ICgpID0+IG51bWJlcjtcclxuICB1cGRhdGU6ICgpID0+IGJvb2xlYW47XHJcbiAgY29uc3RydWN0b3Iob2JqZWN0LCBkb21FbGVtZW50KSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGlmIChkb21FbGVtZW50ID09PSB1bmRlZmluZWQpXHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAnT3JiaXRDb250cm9sczogVGhlIHNlY29uZCBwYXJhbWV0ZXIgXCJkb21FbGVtZW50XCIgaXMgbm93IG1hbmRhdG9yeS4nXHJcbiAgICAgICk7XHJcbiAgICBpZiAoZG9tRWxlbWVudCA9PT0gZG9jdW1lbnQpXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgJ09yYml0Q29udHJvbHM6IFwiZG9jdW1lbnRcIiBzaG91bGQgbm90IGJlIHVzZWQgYXMgdGhlIHRhcmdldCBcImRvbUVsZW1lbnRcIi4gUGxlYXNlIHVzZSBcInJlbmRlcmVyLmRvbUVsZW1lbnRcIiBpbnN0ZWFkLidcclxuICAgICAgKTtcclxuXHJcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcclxuICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQ7XHJcbiAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb24gPSBcIm5vbmVcIjsgLy8gZGlzYWJsZSB0b3VjaCBzY3JvbGxcclxuXHJcbiAgICAvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGlzIGNvbnRyb2xcclxuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgLy8gXCJ0YXJnZXRcIiBzZXRzIHRoZSBsb2NhdGlvbiBvZiBmb2N1cywgd2hlcmUgdGhlIG9iamVjdCBvcmJpdHMgYXJvdW5kXHJcbiAgICB0aGlzLnRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG4gICAgLy8gSG93IGZhciB5b3UgY2FuIGRvbGx5IGluIGFuZCBvdXQgKCBQZXJzcGVjdGl2ZUNhbWVyYSBvbmx5IClcclxuICAgIHRoaXMubWluRGlzdGFuY2UgPSAwO1xyXG4gICAgdGhpcy5tYXhEaXN0YW5jZSA9IEluZmluaXR5O1xyXG5cclxuICAgIC8vIEhvdyBmYXIgeW91IGNhbiB6b29tIGluIGFuZCBvdXQgKCBPcnRob2dyYXBoaWNDYW1lcmEgb25seSApXHJcbiAgICB0aGlzLm1pblpvb20gPSAwO1xyXG4gICAgdGhpcy5tYXhab29tID0gSW5maW5pdHk7XHJcblxyXG4gICAgLy8gSG93IGZhciB5b3UgY2FuIG9yYml0IHZlcnRpY2FsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXHJcbiAgICAvLyBSYW5nZSBpcyAwIHRvIE1hdGguUEkgcmFkaWFucy5cclxuICAgIHRoaXMubWluUG9sYXJBbmdsZSA9IDA7IC8vIHJhZGlhbnNcclxuICAgIHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7IC8vIHJhZGlhbnNcclxuXHJcbiAgICAvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgaG9yaXpvbnRhbGx5LCB1cHBlciBhbmQgbG93ZXIgbGltaXRzLlxyXG4gICAgLy8gSWYgc2V0LCB0aGUgaW50ZXJ2YWwgWyBtaW4sIG1heCBdIG11c3QgYmUgYSBzdWItaW50ZXJ2YWwgb2YgWyAtIDIgUEksIDIgUEkgXSwgd2l0aCAoIG1heCAtIG1pbiA8IDIgUEkgKVxyXG4gICAgdGhpcy5taW5BemltdXRoQW5nbGUgPSAtSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuICAgIHRoaXMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuXHJcbiAgICAvLyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSlcclxuICAgIC8vIElmIGRhbXBpbmcgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXHJcbiAgICB0aGlzLmVuYWJsZURhbXBpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuZGFtcGluZ0ZhY3RvciA9IDAuMDU7XHJcblxyXG4gICAgLy8gVGhpcyBvcHRpb24gYWN0dWFsbHkgZW5hYmxlcyBkb2xseWluZyBpbiBhbmQgb3V0OyBsZWZ0IGFzIFwiem9vbVwiIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cclxuICAgIC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmdcclxuICAgIHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XHJcbiAgICB0aGlzLnpvb21TcGVlZCA9IDEuMDtcclxuXHJcbiAgICAvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSByb3RhdGluZ1xyXG4gICAgdGhpcy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG4gICAgdGhpcy5yb3RhdGVTcGVlZCA9IDEuMDtcclxuXHJcbiAgICAvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBwYW5uaW5nXHJcbiAgICB0aGlzLmVuYWJsZVBhbiA9IHRydWU7XHJcbiAgICB0aGlzLnBhblNwZWVkID0gMS4wO1xyXG4gICAgdGhpcy5zY3JlZW5TcGFjZVBhbm5pbmcgPSBmYWxzZTsgLy8gaWYgZmFsc2UsIHBhbiBvcnRob2dvbmFsIHRvIHdvcmxkLXNwYWNlIGRpcmVjdGlvbiBjYW1lcmEudXBcclxuICAgIHRoaXMua2V5UGFuU3BlZWQgPSA3LjA7IC8vIHBpeGVscyBtb3ZlZCBwZXIgYXJyb3cga2V5IHB1c2hcclxuXHJcbiAgICAvLyBTZXQgdG8gdHJ1ZSB0byBhdXRvbWF0aWNhbGx5IHJvdGF0ZSBhcm91bmQgdGhlIHRhcmdldFxyXG4gICAgLy8gSWYgYXV0by1yb3RhdGUgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXHJcbiAgICB0aGlzLmF1dG9Sb3RhdGUgPSBmYWxzZTtcclxuICAgIHRoaXMuYXV0b1JvdGF0ZVNwZWVkID0gMi4wOyAvLyAzMCBzZWNvbmRzIHBlciBvcmJpdCB3aGVuIGZwcyBpcyA2MFxyXG5cclxuICAgIC8vIFRoZSBmb3VyIGFycm93IGtleXNcclxuICAgIHRoaXMua2V5cyA9IHtcclxuICAgICAgTEVGVDogXCJBcnJvd0xlZnRcIixcclxuICAgICAgVVA6IFwiQXJyb3dVcFwiLFxyXG4gICAgICBSSUdIVDogXCJBcnJvd1JpZ2h0XCIsXHJcbiAgICAgIEJPVFRPTTogXCJBcnJvd0Rvd25cIixcclxuICAgIH07XHJcblxyXG4gICAgLy8gTW91c2UgYnV0dG9uc1xyXG4gICAgdGhpcy5tb3VzZUJ1dHRvbnMgPSB7XHJcbiAgICAgIExFRlQ6IE1PVVNFLlJPVEFURSxcclxuICAgICAgTUlERExFOiBNT1VTRS5ET0xMWSxcclxuICAgICAgUklHSFQ6IE1PVVNFLlBBTixcclxuICAgIH07XHJcblxyXG4gICAgLy8gVG91Y2ggZmluZ2Vyc1xyXG4gICAgdGhpcy50b3VjaGVzID0geyBPTkU6IFRPVUNILlJPVEFURSwgVFdPOiBUT1VDSC5ET0xMWV9QQU4gfTtcclxuXHJcbiAgICAvLyBmb3IgcmVzZXRcclxuICAgIHRoaXMudGFyZ2V0MCA9IHRoaXMudGFyZ2V0LmNsb25lKCk7XHJcbiAgICB0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICB0aGlzLnpvb20wID0gdGhpcy5vYmplY3Quem9vbTtcclxuXHJcbiAgICAvLyB0aGUgdGFyZ2V0IERPTSBlbGVtZW50IGZvciBrZXkgZXZlbnRzXHJcbiAgICB0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzID0gbnVsbDtcclxuXHJcbiAgICAvL1xyXG4gICAgLy8gcHVibGljIG1ldGhvZHNcclxuICAgIC8vXHJcbiAgICAvLyB0aGlzIG1ldGhvZCBpcyBleHBvc2VkLCBidXQgcGVyaGFwcyBpdCB3b3VsZCBiZSBiZXR0ZXIgaWYgd2UgY2FuIG1ha2UgaXQgcHJpdmF0ZS4uLlxyXG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICB0aGlzLnVwZGF0ZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IG9mZnNldCA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgIC8vIHNvIGNhbWVyYS51cCBpcyB0aGUgb3JiaXQgYXhpc1xyXG4gICAgICBjb25zdCBxdWF0ID0gbmV3IFF1YXRlcm5pb24oKS5zZXRGcm9tVW5pdFZlY3RvcnMoXHJcbiAgICAgICAgdGhhdC5vYmplY3QudXAsXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoMCwgMSwgMClcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgcXVhdEludmVyc2UgPSBxdWF0LmNsb25lKCkuaW52ZXJ0KCk7XHJcblxyXG4gICAgICBjb25zdCBsYXN0UG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICBjb25zdCBsYXN0UXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcblxyXG4gICAgICBjb25zdCB0d29QSSA9IDIgKiBNYXRoLlBJO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhhdC5vYmplY3QucG9zaXRpb247XHJcblxyXG4gICAgICAgIG9mZnNldC5jb3B5KHBvc2l0aW9uKS5zdWJ0cmFjdCh0aGF0LnRhcmdldCk7XHJcblxyXG4gICAgICAgIC8vIHJvdGF0ZSBvZmZzZXQgdG8gXCJ5LWF4aXMtaXMtdXBcIiBzcGFjZVxyXG4gICAgICAgIG9mZnNldC5hcHBseVF1YXRlcm5pb24ocXVhdCk7XHJcblxyXG4gICAgICAgIC8vIGFuZ2xlIGZyb20gei1heGlzIGFyb3VuZCB5LWF4aXNcclxuICAgICAgICBzcGhlcmljYWwuc2V0RnJvbVZlY3RvcjMob2Zmc2V0KTtcclxuXHJcbiAgICAgICAgaWYgKHRoYXQuYXV0b1JvdGF0ZSAmJiBzdGF0ZSA9PT0gU1RBVEUuTk9ORSkge1xyXG4gICAgICAgICAgcm90YXRlTGVmdCh0aGF0LmdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoYXQuZW5hYmxlRGFtcGluZykge1xyXG4gICAgICAgICAgc3BoZXJpY2FsLnRoZXRhICs9IHNwaGVyaWNhbERlbHRhLnRoZXRhICogdGhhdC5kYW1waW5nRmFjdG9yO1xyXG4gICAgICAgICAgc3BoZXJpY2FsLnBoaSArPSBzcGhlcmljYWxEZWx0YS5waGkgKiB0aGF0LmRhbXBpbmdGYWN0b3I7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNwaGVyaWNhbC50aGV0YSArPSBzcGhlcmljYWxEZWx0YS50aGV0YTtcclxuICAgICAgICAgIHNwaGVyaWNhbC5waGkgKz0gc3BoZXJpY2FsRGVsdGEucGhpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmVzdHJpY3QgdGhldGEgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG5cclxuICAgICAgICBsZXQgbWluID0gdGhhdC5taW5BemltdXRoQW5nbGU7XHJcbiAgICAgICAgbGV0IG1heCA9IHRoYXQubWF4QXppbXV0aEFuZ2xlO1xyXG5cclxuICAgICAgICBpZiAoaXNGaW5pdGUobWluKSAmJiBpc0Zpbml0ZShtYXgpKSB7XHJcbiAgICAgICAgICBpZiAobWluIDwgLU1hdGguUEkpIG1pbiArPSB0d29QSTtcclxuICAgICAgICAgIGVsc2UgaWYgKG1pbiA+IE1hdGguUEkpIG1pbiAtPSB0d29QSTtcclxuXHJcbiAgICAgICAgICBpZiAobWF4IDwgLU1hdGguUEkpIG1heCArPSB0d29QSTtcclxuICAgICAgICAgIGVsc2UgaWYgKG1heCA+IE1hdGguUEkpIG1heCAtPSB0d29QSTtcclxuXHJcbiAgICAgICAgICBpZiAobWluIDw9IG1heCkge1xyXG4gICAgICAgICAgICBzcGhlcmljYWwudGhldGEgPSBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgc3BoZXJpY2FsLnRoZXRhKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzcGhlcmljYWwudGhldGEgPVxyXG4gICAgICAgICAgICAgIHNwaGVyaWNhbC50aGV0YSA+IChtaW4gKyBtYXgpIC8gMlxyXG4gICAgICAgICAgICAgICAgPyBNYXRoLm1heChtaW4sIHNwaGVyaWNhbC50aGV0YSlcclxuICAgICAgICAgICAgICAgIDogTWF0aC5taW4obWF4LCBzcGhlcmljYWwudGhldGEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcclxuICAgICAgICBzcGhlcmljYWwucGhpID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICB0aGF0Lm1pblBvbGFyQW5nbGUsXHJcbiAgICAgICAgICBNYXRoLm1pbih0aGF0Lm1heFBvbGFyQW5nbGUsIHNwaGVyaWNhbC5waGkpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgc3BoZXJpY2FsLm1ha2VTYWZlKCk7XHJcblxyXG4gICAgICAgIHNwaGVyaWNhbC5yYWRpdXMgKj0gc2NhbGU7XHJcblxyXG4gICAgICAgIC8vIHJlc3RyaWN0IHJhZGl1cyB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXHJcbiAgICAgICAgc3BoZXJpY2FsLnJhZGl1cyA9IE1hdGgubWF4KFxyXG4gICAgICAgICAgdGhhdC5taW5EaXN0YW5jZSxcclxuICAgICAgICAgIE1hdGgubWluKHRoYXQubWF4RGlzdGFuY2UsIHNwaGVyaWNhbC5yYWRpdXMpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gbW92ZSB0YXJnZXQgdG8gcGFubmVkIGxvY2F0aW9uXHJcblxyXG4gICAgICAgIGlmICh0aGF0LmVuYWJsZURhbXBpbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgIHRoYXQudGFyZ2V0LmFkZFNjYWxlZFZlY3RvcihwYW5PZmZzZXQsIHRoYXQuZGFtcGluZ0ZhY3Rvcik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoYXQudGFyZ2V0LmFkZChwYW5PZmZzZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBWZWN0b3IzLmZyb21TcGhlcmljYWwoc3BoZXJpY2FsLCBvZmZzZXQpO1xyXG4gICAgICAgIC8vIHJvdGF0ZSBvZmZzZXQgYmFjayB0byBcImNhbWVyYS11cC12ZWN0b3ItaXMtdXBcIiBzcGFjZVxyXG4gICAgICAgIG9mZnNldC5hcHBseVF1YXRlcm5pb24ocXVhdEludmVyc2UpO1xyXG5cclxuICAgICAgICBwb3NpdGlvbi5jb3B5KHRoYXQudGFyZ2V0KS5hZGQob2Zmc2V0KTtcclxuXHJcbiAgICAgICAgdGhhdC5vYmplY3QubG9va0F0KHRoYXQudGFyZ2V0LngsIHRoYXQudGFyZ2V0LnksIHRoYXQudGFyZ2V0LnopO1xyXG5cclxuICAgICAgICBpZiAodGhhdC5lbmFibGVEYW1waW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICBzcGhlcmljYWxEZWx0YS50aGV0YSAqPSAxIC0gdGhhdC5kYW1waW5nRmFjdG9yO1xyXG4gICAgICAgICAgc3BoZXJpY2FsRGVsdGEucGhpICo9IDEgLSB0aGF0LmRhbXBpbmdGYWN0b3I7XHJcblxyXG4gICAgICAgICAgVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKFxyXG4gICAgICAgICAgICBwYW5PZmZzZXQsXHJcbiAgICAgICAgICAgIDEgLSB0aGF0LmRhbXBpbmdGYWN0b3IsXHJcbiAgICAgICAgICAgIHBhbk9mZnNldFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIC8vIHBhbk9mZnNldC5tdWx0aXBseVNjYWxhciggMSAtIHRoaXMuZGFtcGluZ0ZhY3RvciApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzcGhlcmljYWxEZWx0YS5zZXQoMCwgMCwgMCk7XHJcblxyXG4gICAgICAgICAgcGFuT2Zmc2V0LnNldCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNjYWxlID0gMTtcclxuXHJcbiAgICAgICAgLy8gdXBkYXRlIGNvbmRpdGlvbiBpczpcclxuICAgICAgICAvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcclxuICAgICAgICAvLyB1c2luZyBzbWFsbC1hbmdsZSBhcHByb3hpbWF0aW9uIGNvcyh4LzIpID0gMSAtIHheMiAvIDhcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgem9vbUNoYW5nZWQgfHxcclxuICAgICAgICAgIFZlY3RvcjMuZGlzdGFuY2VTcXVhcmVkKGxhc3RQb3NpdGlvbiwgdGhhdC5vYmplY3QucG9zaXRpb24pID4gRVBTIHx8XHJcbiAgICAgICAgICA4ICogKDEgLSBsYXN0UXVhdGVybmlvbi5kb3QodGhhdC5vYmplY3QucXVhdGVybmlvbikpID4gRVBTXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICB0aGF0LmRpc3BhdGNoRXZlbnQoX2NoYW5nZUV2ZW50KTtcclxuXHJcbiAgICAgICAgICAvL2xhc3RQb3NpdGlvbi5jb3B5KCB0aGlzLm9iamVjdC5wb3NpdGlvbiApO1xyXG4gICAgICAgICAgVmVjdG9yMy5jbG9uZSh0aGF0Lm9iamVjdC5wb3NpdGlvbiwgbGFzdFBvc2l0aW9uKTtcclxuICAgICAgICAgIFF1YXRlcm5pb24uY2xvbmUodGhhdC5vYmplY3QucXVhdGVybmlvbiwgbGFzdFF1YXRlcm5pb24pO1xyXG4gICAgICAgICAgLy9sYXN0UXVhdGVybmlvbi5jb3B5KCB0aGlzLm9iamVjdC5xdWF0ZXJuaW9uICk7XHJcbiAgICAgICAgICB6b29tQ2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9O1xyXG4gICAgfSkoKTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuICBnZXRQb2xhckFuZ2xlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3BoZXJpY2FsLnBoaTtcclxuICB9XHJcbiAgZ2V0QXppbXV0aGFsQW5nbGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zcGhlcmljYWwudGhldGE7XHJcbiAgfVxyXG5cclxuICBnZXREaXN0YW5jZSgpIHtcclxuICAgIHJldHVybiBWZWN0b3IzLmRpc3RhbmNlKHRoaXMub2JqZWN0LnBvc2l0aW9uLCB0aGlzLnRhcmdldCk7XHJcbiAgfVxyXG5cclxuICBsaXN0ZW5Ub0tleUV2ZW50cyhkb21FbGVtZW50KSB7XHJcbiAgICBkb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMub25LZXlEb3duKTtcclxuICAgIHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMgPSBkb21FbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgc2F2ZVN0YXRlKCkge1xyXG4gICAgVmVjdG9yMy5jbG9uZSh0aGlzLnRhcmdldCwgdGhpcy50YXJnZXQwKTtcclxuICAgIC8vdGhpcy50YXJnZXQwLmNvcHkoIHRoaXMudGFyZ2V0ICk7XHJcbiAgICBWZWN0b3IzLmNsb25lKHRoaXMub2JqZWN0LnBvc2l0aW9uLCB0aGlzLnBvc2l0aW9uMCk7XHJcbiAgICAvL3RoaXMucG9zaXRpb24wLmNvcHkoIHRoaXMub2JqZWN0LnBvc2l0aW9uICk7XHJcbiAgICB0aGlzLnpvb20wID0gdGhpcy5vYmplY3Quem9vbTtcclxuICB9XHJcblxyXG4gIHJlc2V0KCkge1xyXG4gICAgVmVjdG9yMy5jbG9uZSh0aGlzLnRhcmdldDAsIHRoaXMudGFyZ2V0KTtcclxuICAgIC8vdGhpcy50YXJnZXQuY29weSggdGhpcy50YXJnZXQwICk7XHJcbiAgICBWZWN0b3IzLmNsb25lKHRoaXMucG9zaXRpb24wLCB0aGlzLm9iamVjdC5wb3NpdGlvbik7XHJcbiAgICAvL3RoaXMub2JqZWN0LnBvc2l0aW9uLmNvcHkoIHRoaXMucG9zaXRpb24wICk7XHJcbiAgICB0aGlzLm9iamVjdC56b29tID0gdGhpcy56b29tMDtcclxuXHJcbiAgICB0aGlzLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoX2NoYW5nZUV2ZW50KTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdCgpIHtcclxuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgY29uc3QgcGFuTGVmdCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IHYgPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gcGFuTGVmdChkaXN0YW5jZSwgb2JqZWN0TWF0cml4KSB7XHJcbiAgICAgICAgdi5zZXRGcm9tTWF0cml4Q29sdW1uKG9iamVjdE1hdHJpeCwgMCk7IC8vIGdldCBYIGNvbHVtbiBvZiBvYmplY3RNYXRyaXhcclxuICAgICAgICB2Lm11bHRpcGx5QnlTY2FsYXIoLWRpc3RhbmNlKTtcclxuICAgICAgICBwYW5PZmZzZXQuYWRkKHYpO1xyXG4gICAgICB9O1xyXG4gICAgfSkoKTtcclxuICAgIGNvbnN0IHBhblVwID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgcGFuVXBWID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBhblVwKGRpc3RhbmNlLCBvYmplY3RNYXRyaXgpIHtcclxuICAgICAgICBpZiAodGhhdC5zY3JlZW5TcGFjZVBhbm5pbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgIHBhblVwVi5zZXRGcm9tTWF0cml4Q29sdW1uKG9iamVjdE1hdHJpeCwgMSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHBhblVwVi5zZXRGcm9tTWF0cml4Q29sdW1uKG9iamVjdE1hdHJpeCwgMCk7XHJcbiAgICAgICAgICAvL3BhblVwVi5jcm9zc1ZlY3RvcnMoIHRoaXMub2JqZWN0LnVwLCBwYW5VcFYgKTtcclxuICAgICAgICAgIFZlY3RvcjMuY3Jvc3ModGhhdC5vYmplY3QudXAsIHBhblVwViwgcGFuVXBWKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHBhblVwVi5tdWx0aXBseUJ5U2NhbGFyKGRpc3RhbmNlKTtcclxuXHJcbiAgICAgICAgcGFuT2Zmc2V0LmFkZChwYW5VcFYpO1xyXG4gICAgICB9O1xyXG4gICAgfSkoKTtcclxuICAgIC8vIGRlbHRhWCBhbmQgZGVsdGFZIGFyZSBpbiBwaXhlbHM7IHJpZ2h0IGFuZCBkb3duIGFyZSBwb3NpdGl2ZVxyXG4gICAgY29uc3QgcGFuID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBhbihkZWx0YVgsIGRlbHRhWSkge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGF0LmRvbUVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHRoYXQub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICAgICAgICAgIC8vIHBlcnNwZWN0aXZlXHJcbiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoYXQub2JqZWN0LnBvc2l0aW9uO1xyXG4gICAgICAgICAgb2Zmc2V0LmNvcHkocG9zaXRpb24pLnN1YnRyYWN0KHRoYXQudGFyZ2V0KTtcclxuICAgICAgICAgIGxldCB0YXJnZXREaXN0YW5jZSA9IG9mZnNldC5sZW5ndGgoKTtcclxuXHJcbiAgICAgICAgICAvLyBoYWxmIG9mIHRoZSBmb3YgaXMgY2VudGVyIHRvIHRvcCBvZiBzY3JlZW5cclxuICAgICAgICAgIHRhcmdldERpc3RhbmNlICo9IE1hdGgudGFuKCgodGhhdC5vYmplY3QuZm92IC8gMikgKiBNYXRoLlBJKSAvIDE4MC4wKTtcclxuXHJcbiAgICAgICAgICAvLyB3ZSB1c2Ugb25seSBjbGllbnRIZWlnaHQgaGVyZSBzbyBhc3BlY3QgcmF0aW8gZG9lcyBub3QgZGlzdG9ydCBzcGVlZFxyXG4gICAgICAgICAgcGFuTGVmdChcclxuICAgICAgICAgICAgKDIgKiBkZWx0YVggKiB0YXJnZXREaXN0YW5jZSkgLyBlbGVtZW50LmNsaWVudEhlaWdodCxcclxuICAgICAgICAgICAgdGhhdC5vYmplY3QubW9kZWxNYXRyaXhcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBwYW5VcChcclxuICAgICAgICAgICAgKDIgKiBkZWx0YVkgKiB0YXJnZXREaXN0YW5jZSkgLyBlbGVtZW50LmNsaWVudEhlaWdodCxcclxuICAgICAgICAgICAgdGhhdC5vYmplY3QubW9kZWxNYXRyaXhcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGF0Lm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSkge1xyXG4gICAgICAgICAgLy8gb3J0aG9ncmFwaGljXHJcbiAgICAgICAgICBwYW5MZWZ0KFxyXG4gICAgICAgICAgICAoZGVsdGFYICogKHRoYXQub2JqZWN0LnJpZ2h0IC0gdGhhdC5vYmplY3QubGVmdCkpIC9cclxuICAgICAgICAgICAgICB0aGF0Lm9iamVjdC56b29tIC9cclxuICAgICAgICAgICAgICBlbGVtZW50LmNsaWVudFdpZHRoLFxyXG4gICAgICAgICAgICB0aGF0Lm9iamVjdC5tb2RlbE1hdHJpeFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHBhblVwKFxyXG4gICAgICAgICAgICAoZGVsdGFZICogKHRoYXQub2JqZWN0LnRvcCAtIHRoYXQub2JqZWN0LmJvdHRvbSkpIC9cclxuICAgICAgICAgICAgICB0aGF0Lm9iamVjdC56b29tIC9cclxuICAgICAgICAgICAgICBlbGVtZW50LmNsaWVudEhlaWdodCxcclxuICAgICAgICAgICAgdGhhdC5vYmplY3QubW9kZWxNYXRyaXhcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIGNhbWVyYSBuZWl0aGVyIG9ydGhvZ3JhcGhpYyBub3IgcGVyc3BlY3RpdmVcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgXCJXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBwYW4gZGlzYWJsZWQuXCJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICB0aGF0LmVuYWJsZVBhbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH0pKCk7XHJcbiAgICBjb25zdCBkb2xseU91dCA9IChkb2xseVNjYWxlKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLm9iamVjdC5pc1BlcnNwZWN0aXZlQ2FtZXJhKSB7XHJcbiAgICAgICAgc2NhbGUgLz0gZG9sbHlTY2FsZTtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSkge1xyXG4gICAgICAgIHRoaXMub2JqZWN0Lnpvb20gPSBNYXRoLm1heChcclxuICAgICAgICAgIHRoaXMubWluWm9vbSxcclxuICAgICAgICAgIE1hdGgubWluKHRoaXMubWF4Wm9vbSwgdGhpcy5vYmplY3Quem9vbSAqIGRvbGx5U2NhbGUpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICAgICAgem9vbUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgIFwiV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlIC0gZG9sbHkvem9vbSBkaXNhYmxlZC5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5lbmFibGVab29tID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZG9sbHlJbiA9IChkb2xseVNjYWxlKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLm9iamVjdC5pc1BlcnNwZWN0aXZlQ2FtZXJhKSB7XHJcbiAgICAgICAgc2NhbGUgKj0gZG9sbHlTY2FsZTtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSkge1xyXG4gICAgICAgIHRoaXMub2JqZWN0Lnpvb20gPSBNYXRoLm1heChcclxuICAgICAgICAgIHRoaXMubWluWm9vbSxcclxuICAgICAgICAgIE1hdGgubWluKHRoaXMubWF4Wm9vbSwgdGhpcy5vYmplY3Quem9vbSAvIGRvbGx5U2NhbGUpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICAgICAgem9vbUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgIFwiV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlIC0gZG9sbHkvem9vbSBkaXNhYmxlZC5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5lbmFibGVab29tID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBoYW5kbGVNb3VzZU1vdmVSb3RhdGUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgcm90YXRlRW5kLnNldChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxuXHJcbiAgICAgIFZlY3RvcjIuc3VidHJhY3Qocm90YXRlRW5kLCByb3RhdGVTdGFydCwgcm90YXRlRGVsdGEpO1xyXG4gICAgICBWZWN0b3IyLm11bHRpcGx5QnlTY2FsYXIocm90YXRlRGVsdGEsIHRoaXMucm90YXRlU3BlZWQsIHJvdGF0ZURlbHRhKTtcclxuICAgICAgLy9yb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCByb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHRoaXMucm90YXRlU3BlZWQgKTtcclxuXHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQ7XHJcblxyXG4gICAgICByb3RhdGVMZWZ0KCgyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLngpIC8gZWxlbWVudC5jbGllbnRIZWlnaHQpOyAvLyB5ZXMsIGhlaWdodFxyXG5cclxuICAgICAgcm90YXRlVXAoKDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueSkgLyBlbGVtZW50LmNsaWVudEhlaWdodCk7XHJcblxyXG4gICAgICBWZWN0b3IyLmNsb25lKHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQpO1xyXG4gICAgICAvL3JvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xyXG5cclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlTW91c2VNb3ZlRG9sbHkgPSAoZXZlbnQpID0+IHtcclxuICAgICAgZG9sbHlFbmQuc2V0KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG5cclxuICAgICAgVmVjdG9yMi5zdWJ0cmFjdChkb2xseUVuZCwgZG9sbHlTdGFydCwgZG9sbHlEZWx0YSk7XHJcbiAgICAgIC8vIGRvbGx5RGVsdGEuc3ViVmVjdG9ycyggZG9sbHlFbmQsIGRvbGx5U3RhcnQgKTtcclxuXHJcbiAgICAgIGlmIChkb2xseURlbHRhLnkgPiAwKSB7XHJcbiAgICAgICAgZG9sbHlPdXQoZ2V0Wm9vbVNjYWxlKCkpO1xyXG4gICAgICB9IGVsc2UgaWYgKGRvbGx5RGVsdGEueSA8IDApIHtcclxuICAgICAgICBkb2xseUluKGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgVmVjdG9yMi5jbG9uZShkb2xseUVuZCwgZG9sbHlTdGFydCk7XHJcbiAgICAgIC8vIGRvbGx5U3RhcnQuY29weSggZG9sbHlFbmQgKTtcclxuXHJcbiAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZU1vdXNlTW92ZVBhbiA9IChldmVudCkgPT4ge1xyXG4gICAgICBwYW5FbmQuc2V0KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG5cclxuICAgICAgVmVjdG9yMi5zdWJ0cmFjdChwYW5FbmQsIHBhblN0YXJ0LCBwYW5EZWx0YSk7XHJcbiAgICAgIFZlY3RvcjIubXVsdGlwbHlCeVNjYWxhcihwYW5EZWx0YSwgdGhpcy5wYW5TcGVlZCwgcGFuRGVsdGEpO1xyXG4gICAgICAvL3BhbkRlbHRhLnN1YlZlY3RvcnMoIHBhbkVuZCwgcGFuU3RhcnQgKS5tdWx0aXBseVNjYWxhciggdGhpcy5wYW5TcGVlZCApO1xyXG5cclxuICAgICAgcGFuKHBhbkRlbHRhLngsIHBhbkRlbHRhLnkpO1xyXG5cclxuICAgICAgVmVjdG9yMi5jbG9uZShwYW5FbmQsIHBhblN0YXJ0KTtcclxuICAgICAgLy9wYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcclxuXHJcbiAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZU1vdXNlV2hlZWwgPSAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKGV2ZW50LmRlbHRhWSA8IDApIHtcclxuICAgICAgICBkb2xseUluKGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudC5kZWx0YVkgPiAwKSB7XHJcbiAgICAgICAgZG9sbHlPdXQoZ2V0Wm9vbVNjYWxlKCkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGxldCBuZWVkc1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgc3dpdGNoIChldmVudC5jb2RlKSB7XHJcbiAgICAgICAgY2FzZSB0aGlzLmtleXMuVVA6XHJcbiAgICAgICAgICBwYW4oMCwgdGhpcy5rZXlQYW5TcGVlZCk7XHJcbiAgICAgICAgICBuZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSB0aGlzLmtleXMuQk9UVE9NOlxyXG4gICAgICAgICAgcGFuKDAsIC10aGlzLmtleVBhblNwZWVkKTtcclxuICAgICAgICAgIG5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIHRoaXMua2V5cy5MRUZUOlxyXG4gICAgICAgICAgcGFuKHRoaXMua2V5UGFuU3BlZWQsIDApO1xyXG4gICAgICAgICAgbmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgdGhpcy5rZXlzLlJJR0hUOlxyXG4gICAgICAgICAgcGFuKC10aGlzLmtleVBhblNwZWVkLCAwKTtcclxuICAgICAgICAgIG5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobmVlZHNVcGRhdGUpIHtcclxuICAgICAgICAvLyBwcmV2ZW50IHRoZSBicm93c2VyIGZyb20gc2Nyb2xsaW5nIG9uIGN1cnNvciBrZXlzXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVUb3VjaFN0YXJ0RG9sbHlQYW4gPSAoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmVuYWJsZVpvb20pIGhhbmRsZVRvdWNoU3RhcnREb2xseSgpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuZW5hYmxlUGFuKSBoYW5kbGVUb3VjaFN0YXJ0UGFuKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaGFuZGxlVG91Y2hTdGFydERvbGx5Um90YXRlID0gKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbmFibGVab29tKSBoYW5kbGVUb3VjaFN0YXJ0RG9sbHkoKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmVuYWJsZVJvdGF0ZSkgaGFuZGxlVG91Y2hTdGFydFJvdGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVUb3VjaE1vdmVSb3RhdGUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKHBvaW50ZXJzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgcm90YXRlRW5kLnNldChldmVudC5wYWdlWCwgZXZlbnQucGFnZVkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKGV2ZW50KTtcclxuXHJcbiAgICAgICAgY29uc3QgeCA9IDAuNSAqIChldmVudC5wYWdlWCArIHBvc2l0aW9uLngpO1xyXG4gICAgICAgIGNvbnN0IHkgPSAwLjUgKiAoZXZlbnQucGFnZVkgKyBwb3NpdGlvbi55KTtcclxuXHJcbiAgICAgICAgcm90YXRlRW5kLnNldCh4LCB5KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgVmVjdG9yMi5zdWJ0cmFjdChyb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0LCByb3RhdGVEZWx0YSk7XHJcbiAgICAgIFZlY3RvcjIubXVsdGlwbHlCeVNjYWxhcihyb3RhdGVEZWx0YSwgdGhpcy5yb3RhdGVTcGVlZCwgcm90YXRlRGVsdGEpO1xyXG4gICAgICAvL3JvdGF0ZURlbHRhLnN1YlZlY3RvcnMoIHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQgKS5tdWx0aXBseVNjYWxhciggdGhpcy5yb3RhdGVTcGVlZCApO1xyXG5cclxuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZG9tRWxlbWVudDtcclxuXHJcbiAgICAgIHJvdGF0ZUxlZnQoKDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCkgLyBlbGVtZW50LmNsaWVudEhlaWdodCk7IC8vIHllcywgaGVpZ2h0XHJcblxyXG4gICAgICByb3RhdGVVcCgoMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS55KSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcclxuICAgICAgVmVjdG9yMi5jbG9uZShyb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0KTtcclxuICAgICAgLy9yb3RhdGVTdGFydC5jb3B5KCByb3RhdGVFbmQgKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlUGFuID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChwb2ludGVycy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICBwYW5FbmQuc2V0KGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oZXZlbnQpO1xyXG5cclxuICAgICAgICBjb25zdCB4ID0gMC41ICogKGV2ZW50LnBhZ2VYICsgcG9zaXRpb24ueCk7XHJcbiAgICAgICAgY29uc3QgeSA9IDAuNSAqIChldmVudC5wYWdlWSArIHBvc2l0aW9uLnkpO1xyXG5cclxuICAgICAgICBwYW5FbmQuc2V0KHgsIHkpO1xyXG4gICAgICB9XHJcbiAgICAgIFZlY3RvcjIuc3VidHJhY3QocGFuRW5kLCBwYW5TdGFydCwgcGFuRGVsdGEpO1xyXG4gICAgICBWZWN0b3IyLm11bHRpcGx5QnlTY2FsYXIocGFuRGVsdGEsIHRoaXMucGFuU3BlZWQsIHBhbkRlbHRhKTtcclxuXHJcbiAgICAgIC8vcGFuRGVsdGEuc3ViVmVjdG9ycyggcGFuRW5kLCBwYW5TdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnBhblNwZWVkICk7XHJcblxyXG4gICAgICBwYW4ocGFuRGVsdGEueCwgcGFuRGVsdGEueSk7XHJcblxyXG4gICAgICBWZWN0b3IyLmNsb25lKHBhbkVuZCwgcGFuU3RhcnQpO1xyXG4gICAgICAvLyBwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlRG9sbHkgPSAoZXZlbnQpID0+IHtcclxuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oZXZlbnQpO1xyXG5cclxuICAgICAgY29uc3QgZHggPSBldmVudC5wYWdlWCAtIHBvc2l0aW9uLng7XHJcbiAgICAgIGNvbnN0IGR5ID0gZXZlbnQucGFnZVkgLSBwb3NpdGlvbi55O1xyXG5cclxuICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xyXG5cclxuICAgICAgZG9sbHlFbmQuc2V0KDAsIGRpc3RhbmNlKTtcclxuXHJcbiAgICAgIGRvbGx5RGVsdGEuc2V0KDAsIE1hdGgucG93KGRvbGx5RW5kLnkgLyBkb2xseVN0YXJ0LnksIHRoaXMuem9vbVNwZWVkKSk7XHJcblxyXG4gICAgICBkb2xseU91dChkb2xseURlbHRhLnkpO1xyXG5cclxuICAgICAgVmVjdG9yMi5jbG9uZShkb2xseUVuZCwgZG9sbHlTdGFydCk7XHJcbiAgICAgIC8vZG9sbHlTdGFydC5jb3B5KCBkb2xseUVuZCApO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVUb3VjaE1vdmVEb2xseVBhbiA9IChldmVudCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbmFibGVab29tKSBoYW5kbGVUb3VjaE1vdmVEb2xseShldmVudCk7XHJcblxyXG4gICAgICBpZiAodGhpcy5lbmFibGVQYW4pIGhhbmRsZVRvdWNoTW92ZVBhbihldmVudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZVRvdWNoTW92ZURvbGx5Um90YXRlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmVuYWJsZVpvb20pIGhhbmRsZVRvdWNoTW92ZURvbGx5KGV2ZW50KTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmVuYWJsZVJvdGF0ZSkgaGFuZGxlVG91Y2hNb3ZlUm90YXRlKGV2ZW50KTtcclxuICAgIH07XHJcblxyXG4gICAgLy9cclxuICAgIC8vIGV2ZW50IGhhbmRsZXJzIC0gRlNNOiBsaXN0ZW4gZm9yIGV2ZW50cyBhbmQgcmVzZXQgc3RhdGVcclxuICAgIC8vXHJcblxyXG4gICAgdGhpcy5vblBvaW50ZXJEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmVuYWJsZWQgPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICBpZiAocG9pbnRlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5kb21FbGVtZW50LnNldFBvaW50ZXJDYXB0dXJlKGV2ZW50LnBvaW50ZXJJZCk7XHJcblxyXG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5vblBvaW50ZXJNb3ZlKTtcclxuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLm9uUG9pbnRlclVwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy9cclxuXHJcbiAgICAgIGFkZFBvaW50ZXIoZXZlbnQpO1xyXG5cclxuICAgICAgaWYgKGV2ZW50LnBvaW50ZXJUeXBlID09PSBcInRvdWNoXCIpIHtcclxuICAgICAgICBvblRvdWNoU3RhcnQoZXZlbnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9uTW91c2VEb3duKGV2ZW50KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm9uUG9pbnRlck1vdmUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgIGlmIChldmVudC5wb2ludGVyVHlwZSA9PT0gXCJ0b3VjaFwiKSB7XHJcbiAgICAgICAgb25Ub3VjaE1vdmUoZXZlbnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9uTW91c2VNb3ZlKGV2ZW50KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm9uUG9pbnRlclVwID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIHJlbW92ZVBvaW50ZXIoZXZlbnQpO1xyXG5cclxuICAgICAgaWYgKHBvaW50ZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5yZWxlYXNlUG9pbnRlckNhcHR1cmUoZXZlbnQucG9pbnRlcklkKTtcclxuXHJcbiAgICAgICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCB0aGlzLm9uUG9pbnRlck1vdmUpO1xyXG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMub25Qb2ludGVyVXApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoX2VuZEV2ZW50KTtcclxuXHJcbiAgICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb25Nb3VzZURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgbGV0IG1vdXNlQWN0aW9uO1xyXG5cclxuICAgICAgc3dpdGNoIChldmVudC5idXR0b24pIHtcclxuICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICBtb3VzZUFjdGlvbiA9IHRoaXMubW91c2VCdXR0b25zLkxFRlQ7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgbW91c2VBY3Rpb24gPSB0aGlzLm1vdXNlQnV0dG9ucy5NSURETEU7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgbW91c2VBY3Rpb24gPSB0aGlzLm1vdXNlQnV0dG9ucy5SSUdIVDtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgbW91c2VBY3Rpb24gPSAtMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3dpdGNoIChtb3VzZUFjdGlvbikge1xyXG4gICAgICAgIGNhc2UgTU9VU0UuRE9MTFk6XHJcbiAgICAgICAgICBpZiAodGhpcy5lbmFibGVab29tID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGhhbmRsZU1vdXNlRG93bkRvbGx5KGV2ZW50KTtcclxuXHJcbiAgICAgICAgICBzdGF0ZSA9IFNUQVRFLkRPTExZO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIE1PVVNFLlJPVEFURTpcclxuICAgICAgICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaGFuZGxlTW91c2VEb3duUGFuKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIHN0YXRlID0gU1RBVEUuUEFOO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaGFuZGxlTW91c2VEb3duUm90YXRlKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIHN0YXRlID0gU1RBVEUuUk9UQVRFO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIE1PVVNFLlBBTjpcclxuICAgICAgICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaGFuZGxlTW91c2VEb3duUm90YXRlKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIHN0YXRlID0gU1RBVEUuUk9UQVRFO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaGFuZGxlTW91c2VEb3duUGFuKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIHN0YXRlID0gU1RBVEUuUEFOO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgc3RhdGUgPSBTVEFURS5OT05FO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc3RhdGUgIT09IFNUQVRFLk5PTkUpIHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoX3N0YXJ0RXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG9uTW91c2VNb3ZlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIHN3aXRjaCAoc3RhdGUpIHtcclxuICAgICAgICBjYXNlIFNUQVRFLlJPVEFURTpcclxuICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICBoYW5kbGVNb3VzZU1vdmVSb3RhdGUoZXZlbnQpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFNUQVRFLkRPTExZOlxyXG4gICAgICAgICAgaWYgKHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICBoYW5kbGVNb3VzZU1vdmVEb2xseShldmVudCk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgU1RBVEUuUEFOOlxyXG4gICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGhhbmRsZU1vdXNlTW92ZVBhbihldmVudCk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5vbk1vdXNlV2hlZWwgPSAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgfHxcclxuICAgICAgICB0aGlzLmVuYWJsZVpvb20gPT09IGZhbHNlIHx8XHJcbiAgICAgICAgc3RhdGUgIT09IFNUQVRFLk5PTkVcclxuICAgICAgKVxyXG4gICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoX3N0YXJ0RXZlbnQpO1xyXG5cclxuICAgICAgaGFuZGxlTW91c2VXaGVlbChldmVudCk7XHJcblxyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoX2VuZEV2ZW50KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5vbktleURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgfHwgdGhpcy5lbmFibGVQYW4gPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICBoYW5kbGVLZXlEb3duKGV2ZW50KTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb25Ub3VjaFN0YXJ0ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIHRyYWNrUG9pbnRlcihldmVudCk7XHJcblxyXG4gICAgICBzd2l0Y2ggKHBvaW50ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgIHN3aXRjaCAodGhpcy50b3VjaGVzLk9ORSkge1xyXG4gICAgICAgICAgICBjYXNlIFRPVUNILlJPVEFURTpcclxuICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgIGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgc3RhdGUgPSBTVEFURS5UT1VDSF9ST1RBVEU7XHJcblxyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBUT1VDSC5QQU46XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICBoYW5kbGVUb3VjaFN0YXJ0UGFuKCk7XHJcblxyXG4gICAgICAgICAgICAgIHN0YXRlID0gU1RBVEUuVE9VQ0hfUEFOO1xyXG5cclxuICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgc3RhdGUgPSBTVEFURS5OT05FO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMudG91Y2hlcy5UV08pIHtcclxuICAgICAgICAgICAgY2FzZSBUT1VDSC5ET0xMWV9QQU46XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgdGhpcy5lbmFibGVQYW4gPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgIGhhbmRsZVRvdWNoU3RhcnREb2xseVBhbigpO1xyXG5cclxuICAgICAgICAgICAgICBzdGF0ZSA9IFNUQVRFLlRPVUNIX0RPTExZX1BBTjtcclxuXHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFRPVUNILkRPTExZX1JPVEFURTpcclxuICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVab29tID09PSBmYWxzZSAmJiB0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgIGhhbmRsZVRvdWNoU3RhcnREb2xseVJvdGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICBzdGF0ZSA9IFNUQVRFLlRPVUNIX0RPTExZX1JPVEFURTtcclxuXHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHN0YXRlICE9PSBTVEFURS5OT05FKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KF9zdGFydEV2ZW50KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBvblRvdWNoTW92ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICB0cmFja1BvaW50ZXIoZXZlbnQpO1xyXG5cclxuICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgICAgIGNhc2UgU1RBVEUuVE9VQ0hfUk9UQVRFOlxyXG4gICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGhhbmRsZVRvdWNoTW92ZVJvdGF0ZShldmVudCk7XHJcblxyXG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBTVEFURS5UT1VDSF9QQU46XHJcbiAgICAgICAgICBpZiAodGhpcy5lbmFibGVQYW4gPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgaGFuZGxlVG91Y2hNb3ZlUGFuKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFNUQVRFLlRPVUNIX0RPTExZX1BBTjpcclxuICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVpvb20gPT09IGZhbHNlICYmIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGhhbmRsZVRvdWNoTW92ZURvbGx5UGFuKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFNUQVRFLlRPVUNIX0RPTExZX1JPVEFURTpcclxuICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVpvb20gPT09IGZhbHNlICYmIHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGhhbmRsZVRvdWNoTW92ZURvbGx5Um90YXRlKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgc3RhdGUgPSBTVEFURS5OT05FO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMub25Db250ZXh0TWVudSA9IChldmVudCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbmFibGVkID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH07XHJcbiAgICB0aGlzLmdldEF1dG9Sb3RhdGlvbkFuZ2xlID0gKCkgPT4ge1xyXG4gICAgICByZXR1cm4gKCgyICogTWF0aC5QSSkgLyA2MCAvIDYwKSAqIHRoaXMuYXV0b1JvdGF0ZVNwZWVkO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBnZXRab29tU2NhbGUgPSAoKSA9PiB7XHJcbiAgICAgIHJldHVybiBNYXRoLnBvdygwLjk1LCB0aGlzLnpvb21TcGVlZCk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCB0aGlzLm9uQ29udGV4dE1lbnUpO1xyXG5cclxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy5vblBvaW50ZXJEb3duKTtcclxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmNhbmNlbFwiLCBvblBvaW50ZXJDYW5jZWwpO1xyXG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLm9uTW91c2VXaGVlbCwge1xyXG4gICAgICBwYXNzaXZlOiBmYWxzZSxcclxuICAgIH0pO1xyXG4gIH1cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCB0aGlzLm9uQ29udGV4dE1lbnUpO1xyXG5cclxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy5vblBvaW50ZXJEb3duKTtcclxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmNhbmNlbFwiLCBvblBvaW50ZXJDYW5jZWwpO1xyXG4gICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLm9uTW91c2VXaGVlbCk7XHJcblxyXG4gICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCB0aGlzLm9uUG9pbnRlck1vdmUpO1xyXG4gICAgdGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgdGhpcy5vblBvaW50ZXJVcCk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5fZG9tRWxlbWVudEtleUV2ZW50cy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLm9uS2V5RG93bik7XHJcbiAgICB9XHJcblxyXG4gICAgLy90aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsgLy8gc2hvdWxkIHRoaXMgYmUgYWRkZWQgaGVyZT9cclxuICB9XHJcbn1cclxuY29uc3QgU1RBVEUgPSB7XHJcbiAgTk9ORTogLTEsXHJcbiAgUk9UQVRFOiAwLFxyXG4gIERPTExZOiAxLFxyXG4gIFBBTjogMixcclxuICBUT1VDSF9ST1RBVEU6IDMsXHJcbiAgVE9VQ0hfUEFOOiA0LFxyXG4gIFRPVUNIX0RPTExZX1BBTjogNSxcclxuICBUT1VDSF9ET0xMWV9ST1RBVEU6IDYsXHJcbn07XHJcblxyXG5sZXQgc3RhdGUgPSBTVEFURS5OT05FO1xyXG5cclxuY29uc3QgRVBTID0gMC4wMDAwMDE7XHJcblxyXG4vLyBjdXJyZW50IHBvc2l0aW9uIGluIHNwaGVyaWNhbCBjb29yZGluYXRlc1xyXG5jb25zdCBzcGhlcmljYWwgPSBuZXcgU3BoZXJpY2FsKCk7XHJcbmNvbnN0IHNwaGVyaWNhbERlbHRhID0gbmV3IFNwaGVyaWNhbCgpO1xyXG5cclxubGV0IHNjYWxlID0gMTtcclxuY29uc3QgcGFuT2Zmc2V0ID0gbmV3IFZlY3RvcjMoKTtcclxubGV0IHpvb21DaGFuZ2VkID0gZmFsc2U7XHJcblxyXG5jb25zdCByb3RhdGVTdGFydCA9IG5ldyBWZWN0b3IyKCk7XHJcbmNvbnN0IHJvdGF0ZUVuZCA9IG5ldyBWZWN0b3IyKCk7XHJcbmNvbnN0IHJvdGF0ZURlbHRhID0gbmV3IFZlY3RvcjIoKTtcclxuXHJcbmNvbnN0IHBhblN0YXJ0ID0gbmV3IFZlY3RvcjIoKTtcclxuY29uc3QgcGFuRW5kID0gbmV3IFZlY3RvcjIoKTtcclxuY29uc3QgcGFuRGVsdGEgPSBuZXcgVmVjdG9yMigpO1xyXG5cclxuY29uc3QgZG9sbHlTdGFydCA9IG5ldyBWZWN0b3IyKCk7XHJcbmNvbnN0IGRvbGx5RW5kID0gbmV3IFZlY3RvcjIoKTtcclxuY29uc3QgZG9sbHlEZWx0YSA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5jb25zdCBwb2ludGVycyA9IFtdO1xyXG5jb25zdCBwb2ludGVyUG9zaXRpb25zID0ge307XHJcbmV4cG9ydCBlbnVtIE1PVVNFIHtcclxuICBMRUZUID0gMCxcclxuICBNSURETEUgPSAxLFxyXG4gIFJJR0hUID0gMixcclxuICBST1RBVEUgPSAwLFxyXG4gIERPTExZID0gMSxcclxuICBQQU4gPSAyLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBUT1VDSCB7XHJcbiAgUk9UQVRFLFxyXG4gIFBBTixcclxuICBET0xMWV9QQU4sXHJcbiAgRE9MTFlfUk9UQVRFLFxyXG59XHJcbmZ1bmN0aW9uIHJvdGF0ZUxlZnQoYW5nbGUpIHtcclxuICBzcGhlcmljYWxEZWx0YS50aGV0YSAtPSBhbmdsZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcm90YXRlVXAoYW5nbGUpIHtcclxuICBzcGhlcmljYWxEZWx0YS5waGkgLT0gYW5nbGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFBvaW50ZXIoZXZlbnQpIHtcclxuICBwb2ludGVycy5wdXNoKGV2ZW50KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlUG9pbnRlcihldmVudCkge1xyXG4gIGRlbGV0ZSBwb2ludGVyUG9zaXRpb25zW2V2ZW50LnBvaW50ZXJJZF07XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChwb2ludGVyc1tpXS5wb2ludGVySWQgPT0gZXZlbnQucG9pbnRlcklkKSB7XHJcbiAgICAgIHBvaW50ZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdHJhY2tQb2ludGVyKGV2ZW50KSB7XHJcbiAgbGV0IHBvc2l0aW9uID0gcG9pbnRlclBvc2l0aW9uc1tldmVudC5wb2ludGVySWRdO1xyXG5cclxuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgcG9zaXRpb24gPSBuZXcgVmVjdG9yMigpO1xyXG4gICAgcG9pbnRlclBvc2l0aW9uc1tldmVudC5wb2ludGVySWRdID0gcG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBwb3NpdGlvbi5zZXQoZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKGV2ZW50KSB7XHJcbiAgY29uc3QgcG9pbnRlciA9XHJcbiAgICBldmVudC5wb2ludGVySWQgPT09IHBvaW50ZXJzWzBdLnBvaW50ZXJJZCA/IHBvaW50ZXJzWzFdIDogcG9pbnRlcnNbMF07XHJcblxyXG4gIHJldHVybiBwb2ludGVyUG9zaXRpb25zW3BvaW50ZXIucG9pbnRlcklkXTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duUm90YXRlKGV2ZW50KSB7XHJcbiAgcm90YXRlU3RhcnQuc2V0KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVNb3VzZURvd25Eb2xseShldmVudCkge1xyXG4gIGRvbGx5U3RhcnQuc2V0KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVNb3VzZURvd25QYW4oZXZlbnQpIHtcclxuICBwYW5TdGFydC5zZXQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XHJcbn1cclxuZnVuY3Rpb24gb25Qb2ludGVyQ2FuY2VsKGV2ZW50KSB7XHJcbiAgcmVtb3ZlUG9pbnRlcihldmVudCk7XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydFJvdGF0ZSgpIHtcclxuICBpZiAocG9pbnRlcnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICByb3RhdGVTdGFydC5zZXQocG9pbnRlcnNbMF0ucGFnZVgsIHBvaW50ZXJzWzBdLnBhZ2VZKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgeCA9IDAuNSAqIChwb2ludGVyc1swXS5wYWdlWCArIHBvaW50ZXJzWzFdLnBhZ2VYKTtcclxuICAgIGNvbnN0IHkgPSAwLjUgKiAocG9pbnRlcnNbMF0ucGFnZVkgKyBwb2ludGVyc1sxXS5wYWdlWSk7XHJcblxyXG4gICAgcm90YXRlU3RhcnQuc2V0KHgsIHkpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydFBhbigpIHtcclxuICBpZiAocG9pbnRlcnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICBwYW5TdGFydC5zZXQocG9pbnRlcnNbMF0ucGFnZVgsIHBvaW50ZXJzWzBdLnBhZ2VZKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgeCA9IDAuNSAqIChwb2ludGVyc1swXS5wYWdlWCArIHBvaW50ZXJzWzFdLnBhZ2VYKTtcclxuICAgIGNvbnN0IHkgPSAwLjUgKiAocG9pbnRlcnNbMF0ucGFnZVkgKyBwb2ludGVyc1sxXS5wYWdlWSk7XHJcblxyXG4gICAgcGFuU3RhcnQuc2V0KHgsIHkpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydERvbGx5KCkge1xyXG4gIGNvbnN0IGR4ID0gcG9pbnRlcnNbMF0ucGFnZVggLSBwb2ludGVyc1sxXS5wYWdlWDtcclxuICBjb25zdCBkeSA9IHBvaW50ZXJzWzBdLnBhZ2VZIC0gcG9pbnRlcnNbMV0ucGFnZVk7XHJcblxyXG4gIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcclxuXHJcbiAgZG9sbHlTdGFydC5zZXQoMCwgZGlzdGFuY2UpO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJNZXJzZW5uZVR3aXN0ZXIiLCJkaXN0YW5jZVNjcmF0Y2giLCJsZXJwU2NyYXRjaCIsImFuZ2xlQmV0d2VlblNjcmF0Y2giLCJhbmdsZUJldHdlZW5TY3JhdGNoMiIsIm1vc3RPcnRob2dvbmFsQXhpc1NjcmF0Y2giLCJzY2FsZVNjcmF0Y2gxIiwic2NyYXRjaENvbHVtbiIsInNjYWxlU2NyYXRjaDMiLCJzY2FsZVNjcmF0Y2g0Iiwic2NhbGVTY3JhdGNoNSIsInNjcmF0Y2hUcmFuc3Bvc2VNYXRyaXgiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxJQUFZLG9CQUVYLENBQUE7QUFGRCxDQUFB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RUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ3pELEVBQUUsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekIsRUFBRTtBQUNGLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzFCLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDL0MsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLE1BQU0sRUFBRSxJQUFJLFVBQVUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQztBQUMvRyxJQUFJLENBQUMsQ0FBQztBQUNOLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEIsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNOLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ3pELEVBQUU7QUFDRjtBQUNBLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7QUFDekIsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLGVBQWUsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFdBQVc7QUFDbEQsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNQLENBQUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMzQztBQUNBO0FBQ0EsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRTtBQUN6QixFQUFFLElBQUksRUFBRSxDQUFDO0FBQ1Q7QUFDQSxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hCO0FBQ0EsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtBQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNqRSxHQUFHO0FBQ0gsRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtBQUMxQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDMUUsR0FBRztBQUNILEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdkUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ3JFO0FBQ0EsRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNmLEVBQUU7QUFDRjtBQUNBLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDekI7QUFDQTtBQUNBLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUNqQixDQUFDLENB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RSxJQUFJLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDMUM7SUFDRCxNQUFNLEdBQUE7QUFDTCxRQUFBLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RFO0FBQ0QsSUFBQSxZQUFZLENBQUMsTUFBZSxFQUFBO0FBQzNCLFFBQUEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFDZixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFDVixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNaLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUNqQixRQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4RCxRQUFBLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RELFFBQUEsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENB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SUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUVqQyxRQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDckIsWUFBQSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDNUQsU0FBQTtBQUNELFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUNyQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUM7QUFDckIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDdEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDO0FBQ3JCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtJQUNELE9BQU8sR0FBQTtRQUNOLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNsQixRQUFBLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxPQUFPLENBQUMsTUFBZSxFQUFFLE1BQWdCLEVBQUE7QUFDL0MsUUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRCxTQUFBO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMs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Q2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRWxDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxXQUFXLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTtRQUNsRCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRUMsZUFBYSxDQUFDLENBQUM7QUFFdEQsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFaEMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLFFBQVEsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFFLE1BQWUsRUFBQTtRQUM3RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMs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QUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN0QixRQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDdEIsUUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN0QixRQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDdEIsUUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0tBQ3ZCO0FBQ0QsSUFBQSxjQUFjLENBQUMsTUFBZSxFQUFBO1FBQzVCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JCLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNELElBQUEsZUFBZSxDQUFD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QUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxjQUFjLENBQUMsVUFBc0IsRUFBRSxNQUFnQixFQUFBO1FBQzVELE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdkMsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdkMsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdkMsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUV2QyxNQUFNLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDOUIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM1QixNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRTVCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDNUIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDL0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUU1QixNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDNUIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFFL0IsUUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUs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QUFFSixlQUFhLENBQUMsQ0FBQztRQUM5RCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDOUMsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUU5QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUVwQyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7QUFFRCxJQUFBLE9BQU8sUUFBUSxDQUFDLE1BQWUsRUFBRSxNQUFlLEVBQUE7QUFDOUMsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQzFCLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVDLGVBQWEsQ0FBQyxDQUNyRSxDQUFDO0FBQ0YsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQzFCLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVBLGVBQWEsQ0FBQyxDQUNyRSxDQUFDO0FBQ0YsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQzFCLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVBLGVBQWEsQ0FBQyxDQUNyRSxDQUFDO0FBQ0YsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBRUQsT0FBTyxlQUFlLENBQUMsTUFBZSxFQUFBO0FBQ3BDLFFBQUEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUVDLGVBQWEsQ0FBQyxDQUFDO0FBQ3hDLFFBQUEsT0FBTyxPQUFPLENBQUMsZ0JBQWdCLENBQUNBLGVBQWEsQ0FBQyxDQUFDO0tBQ2hEO0FBRUQsSUFBQSxPQUFPLFdBQVcsQ0FDaEIsTUFBZSxFQUNmLFFBQWlCLEVBQ2pCLE1BQWUsRUFBQTtRQUVmLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFQyxlQUFhLENBQUMsQ0FBQztBQUV0RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUVsQyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7QUFFRCxJQUFBLE9BQU8sV0FBVyxDQUFDLE1BQWUsRUFBRSxNQUFlLEVBQUE7UUFDakQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUVDLGVBQWEsQ0FBQyxDQUFDO0FBRXRELFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRWhDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxRQUFRLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxNQUFlLEVBQUE7QUFDNUQsUUFBQSxNQUFNLFdBQVcsR0FDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRCxRQUFBLE1BQU0sV0FBVyxHQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9ELFFBQUEsTUFBTSxXQUFXLEdBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFL0QsUUFBQSxNQUFNLFdBQVcsR0FDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRCxRQUFBLE1BQU0sV0FBVyxHQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9ELFFBQUEsTUFBTSxXQUFXLEdBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFL0QsUUFBQSxNQUFNLFdBQVcsR0FDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElB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TUFBZSxFQUFBO0FBQzVELFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxnQkFBZ0IsQ0FDckIsTUFBZSxFQUNmLFNBQWtCLEVBQ2xCLE1BQWUsRUFBQTtBQUVmLFFBQUEsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRXZCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzNELE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzNELE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTNELFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxnQkFBZ0IsQ0FDckIsTUFBZSxFQUNmLE1BQWMsRUFDZCxNQUFlLEVBQUE7UUFFZixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUMvQixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7QUFFRCxJQUFBLE9BQU8sZUFBZSxDQUNwQixNQUFlLEVBQ2YsS0FBYyxFQUNkLE1BQWUsRUFBQTtBQUVmLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRWhDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxNQUFNLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTtRQUM1QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FB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QUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdEIsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7UUFHaEQsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7QUFDNUMsWUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDN0MsU0FBQTs7UUFHRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FB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QUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVqQixRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ1o7SUFDRCxRQUFRLEdBQUE7UUFDUCxRQUNDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUEsRUFBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUssRUFBQSxFQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUssR0FBQSxDQUFBO0FBQ3JELFlBQUEsQ0FBQSxDQUFBLEVBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFLLEVBQUEsRUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUEsRUFBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUssR0FBQSxDQUFBO0FBQ3JELFlBQUEsQ0FBQSxDQUFBLEVBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFLLEVBQUEsRUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLEVBQUEsRUFBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUssR0FBQSxDQUFBO1lBQ3RELENBQUksQ0FBQSxFQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUEsRUFBQSxFQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBSyxFQUFBLEVBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFHLENBQUEsQ0FBQSxFQUNuRDtLQUNGO0FBQ0QsSUFBQSxPQUFPLEtBQUssQ0FBQyxNQUEwQixFQUFFLE1BQWUsRUFBQTtBQUN2RCxRQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDckIsWUFBQSxPQUFPLFNBQVMsQ0FBQztBQUNqQixTQUFBO0FBQ0QsUUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ3JCLFlBQUEsT0FBTyxJQUFJLE9BQU8sQ0FDakIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUNWLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFDVixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFDVixNQUFNLENBQUMsRUFBRSxDQUFDLEVBQ1YsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQ1YsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUNWLENBQUM7QUFDRixTQUFBO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxH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LENBQUM7UUFDbkMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFbkMsTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDNUIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUU1QixNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9CLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFNUIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM1QixNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFD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QyxDQUFDO0FBRXRDLFFBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxLQUFLLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMxQyxRQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLE1BQU0sS0FBSyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzlCLFFBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEtBQUssR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBRXZDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUEsTUFB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QyxDQUFDO2dCQUNULE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNULE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDVCxNQUFNLENBQUMsRUFBRSxDQUFDO2dCQUNWLE1BQU0sQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxDQUFDLEVBQUUsQ0FBQztnQkFDVixNQUFNLENBQUMsRUFBRSxDQUFDO2dCQUNWLE1BQU0sQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxDQUFDLEVBQUUsQ0FBQzthQUNWLENBQUM7QUFDRixTQUFBO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sZUFBZSxDQUFDLE1BQWMsRUFBRSxHQUFXLEVBQUE7QUFDakQsUUFBQSxPQUFPLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ3hCO0FBRUQsSUFBQSxPQUFPLFNBQVMsQ0FBQyxNQUFlLEVBQUUsS0FBYSxFQUFFLE1BQWUsRUFBQTtBQUMvRCxRQUFBLE1BQU0sVUFBVSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDN0IsUUFBQSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFakMsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtJQUVELE9BQU8sU0FBUyxDQUFDLE1BQWUsRUFBRSxLQUFhLEVBQUUsU0FBa0IsRUFBRSxNQUFlLEVBQUE7UUFDbkYsTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLFFBQUEsTUFBTSxVQUFVLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUM3QixRQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxNQUFNLENBQUMsTUFBZSxFQUFFLEtBQWEsRUFBRSxNQUFlLEVBQUE7QUFDNUQsUUFBQSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFFN0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtJQUVELE9BQU8sTUFBTSxDQUFDLE1BQWUsRUFBRSxLQUFhLEVBQUUsU0FBa0IsRUFBRSxNQUFlLEVBQUE7UUFDaEYsTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLFFBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLGNBQWMsQ0FBQyxNQUFlLEVBQUUsV0FBb0IsRUFBRSxNQUFlLEVBQUE7UUFDM0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXRCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFeEIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUMzQixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDM0IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV4QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sUUFBUSxDQUFDLE1BQWUsRUFBRSxLQUFjLEVBQUUsTUFBZSxFQUFBO1FBQy9ELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzlELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDOUMsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBRTlDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUN0QyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXhCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFeEIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLFFBQVEsQ0FBQyxNQUFlLEVBQUUsTUFBZSxFQUFBO0FBQy9DLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUNuRyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDbkcsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQ3BHLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtJQUVELE9BQU8sZUFBZSxDQUFDLE1BQWUsRUFBQTtBQUNyQyxRQUFBLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3hDLFFBQUEsT0FBTyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDL0M7QUFFRCxJQUFBLE9BQU8sV0FBVyxDQUFDLE1BQWUsRUFBRSxRQUFpQixFQUFFLE1BQWUsRUFBQTtRQUNyRSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztBQUV0RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXRCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXhCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxXQUFXLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTtRQUNsRCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztBQUV0RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUVoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUVoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUVqQyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sUUFBUSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsTUFBZSxFQUFBO0FBQzdELFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXhCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRTFCLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUN2RixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdkYsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3hGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUV4RixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdkYsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3ZGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUN4RixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFFeEYsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBQ3pGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUN6RixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsT0FBTyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDMUYsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE9BQU8sR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBRTFGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUMzRixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDM0YsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBQzVGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLE1BQU0sR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUU1RixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN6QixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDekIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN6QixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDekIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLEdBQUcsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFFLE1BQWUsRUFBQTtBQUN4RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxRQUFRLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxNQUFlLEVBQUE7QUFDN0QsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sc0JBQXNCLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxNQUFlLEVBQUE7QUFDM0UsUUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFMUIsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNyRSxRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBQ3JFLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFFdEUsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNyRSxRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBQ3JF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QUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFMUIsUUFBQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsUUFBQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsUUFBQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsUUFBQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsUUFBQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsUUFBQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsUUFBQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsUUFBQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsUUFBQSxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFNUIsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNyRSxRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBQ3JFLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFFdEUsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxH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R0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXZFLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcs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QyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDOUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDOUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDaEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXhCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxnQkFBZ0IsQ0FBQyxNQUFlLEVBQUUsU0FBa0IsRUFBRSxNQUFlLEVBQUE7QUFDM0UsUUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBRXZCLFFBQUEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUM3RSxRQUFBLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDN0UsUUFBQSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzlFLFFBQUEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUU5RSxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLHVCQUF1QixDQUFDLE1BQWUsRUFBRSxTQUFrQixFQUFFLE1BQWUsRUFBQTtBQUNsRixRQUFBLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUV2QixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMzRCxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMzRCxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUU1RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sZUFBZSxDQUFDLE1BQWUsRUFBRSxTQUFrQixFQUFFLE1BQWUsRUFBQTtBQUMxRSxRQUFBLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUV2QixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEUsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV6RSxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sZ0JBQWdCLENBQUMsTUFBZSxFQUFFLE1BQWMsRUFBRSxNQUFlLEVBQUE7UUFDdkUsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDL0IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7QUFDakMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLE1BQU0sQ0FBQyxNQUFlLEVBQUUsTUFBZSxFQUFBO1FBQzdDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sU0FBUyxDQUFDLE1BQWUsRUFBRSxNQUFlLEVBQUE7QUFDaEQsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDcEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3BCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUNwQixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3JCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNyQixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDdEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sR0FBRyxDQUFDLE1BQWUsRUFBRSxNQUFlLEVBQUE7QUFDMUMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxN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QU87QUFDdkMsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTztBQUN2QyxnQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPO0FBQ3ZDLGdCQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU87QUFDdkMsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTztBQUN2QyxnQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPO0FBQ3ZDLGdCQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLE9BQU87QUFDekMsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksT0FBTztBQUN6QyxnQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxPQUFPO0FBQ3pDLGdCQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLE9BQU87QUFDekMsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksT0FBTztBQUN6QyxnQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsRUFDMUM7S0FDRjtBQUVELElBQUEsT0FBTyxjQUFjLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTtBQUNyRCxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sVUFBVSxDQUFDLE1BQWUsRUFBRSxNQUFlLEVBQUE7UUFDakQsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLE9BQU8sQ0FBQyxNQUFlLEVBQUUsTUFBZSxFQUFBOzs7OztBQUs5QyxRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QixRQUFBLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QixRQUFBLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QixRQUFBLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQzs7QUFHekIsUUFBQSxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLFFBQUEsSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFBLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFBQSxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLFFBQUEsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUN4QixRQUFBLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDekIsUUFBQSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLFFBQUEsSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFBLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFBQSxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLFFBQUEsSUFBSSxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFBLElBQUksS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7O1FBR3pCLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDakcsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNqRyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ25HLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDbkcsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNqRyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2pHLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDbkcsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQzs7QUFHbkcsUUFBQSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFBLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ25CLFFBQUEsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBQSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFBLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ25CLFFBQUEsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBQSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFBLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ25CLFFBQUEsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBQSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFBLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLFFBQUEsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7O1FBR3BCLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDdkcsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQztRQUN2RyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzFHLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDMUcsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQztRQUN0RyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3RHLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDdEcsTUFBTSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQzs7QUFHdEcsUUFBQSxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhFLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFOzs7QUFHcEMsWUFBQSxJQUNDLE9BQU8s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RyxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDekIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUN6QixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDekIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLHFCQUFxQixDQUFDLE1BQWUsRUFBRSxNQUFlLEVBQUE7Ozs7OztBQU81RCxRQUFBLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUU1QixRQUFBLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV0QixRQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRyxPQUFPLEdBQUcsRUFBRSxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDdEQsUUFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUcsT0FBTyxHQUFHLEVBQUUsR0FBRyxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ3RELFFBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHLE9BQU8sR0FBRyxFQUFFLEdBQUcsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUV2RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDcEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3BCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNwQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDaEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3BCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNwQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDcEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNwQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDcEIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNqQixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFD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Q0FBQztZQUMzQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFN0IsWUFBQSxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsWUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRXBFLFlBQUEsT0FBTyxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN2QixZQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFcEUsWUFBQSxPQUFPLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZCLFlBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNwRSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixTQUFBOztRQUdELEtBQUssSUFB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QUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQztBQUN2QyxJQUFBLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDO0FBQy9DLElBQUEsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUM7SUFDaEQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDO0FBQ3hELElBQUEsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQy9CLElBQUEsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUN2QyxJQUFBLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDeEMsSUFBQSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUVoRCxJQUFBLElBQUksU0FBUyxHQUFHOztBQUVkLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQzs7QUFHTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7O0FBR0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDOztBQUdMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQzs7QUFHTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7O0FBR0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0tBQ04sQ0FBQztBQUVGLElBQUEsSUFBSSxHQUFHLEdBQUc7O1FBRVIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDOztRQUdsQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7O1FBR2xDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7UUFHbEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDOztRQUdsQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7O1FBR2xDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUNuQyxDQUFDO0FBRUYsSUFBQSxJQUFJLE9BQU8sR0FBRzs7QUFFWixRQUFBLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7QUFHcEQsUUFBQSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7O0FBR3BELFFBQUEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztBQUcxRCxRQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7QUFHMUQsUUFBQSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7O0FBR3BELFFBQUEsQ0FBQyxFQUFFLENBQUMs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Q0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQzVELFlBQUEsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDM0QsWUFBQSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDdkUsWUFBQSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2hELFlBQUEsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDNUQsWUFBQSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMzRCxZQUFBLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztBQUN2RSxZQUFBLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN2QixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTLENBQUM7QUFDN0IsWUFBQSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7WUFDdEIsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDO0FBQzVCLFlBQUEsRUFBRSxHQUFH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QUFZLEtBT1gsQ0FBQTtBQVBELENBQUEsVUFBWSxLQUFLLEVBQUE7QUFDZixJQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsTUFBUSxDQUFBO0FBQ1IsSUFBQSxLQUFBLENBQUEsS0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFFBQVUsQ0FBQTtBQUNWLElBQUEsS0FBQSxDQUFBLEtBQUEsQ0FBQSxPQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxPQUFTLENBQUE7QUFDVCxJQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsUUFBVSxDQUFBO0FBQ1YsSUFBQSxLQUFBLENBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLE9BQVMsQ0FBQTtBQUNULElBQUEsS0FBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxLQUFPLENBQUE7QUFDVCxDQUFDLEVBUFcsS0FBSyxLQUFMLEtBQUssR0FPaEIsRUFBQSxDQUFBLENBQUEsQ0FBQTtBQUVELElBQVksS0FLWCxDQUFBO0FBTEQsQ0FBQSxVQUFZLEtBQUssRUFBQTtBQUNmLElBQUEsS0FBQSxDQUFBLEtBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxRQUFNLENBQUE7QUFDTixJQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsS0FBRyxDQUFBO0FBQ0gsSUFBQSxLQUFBLENBQUEsS0FBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFdBQVMsQ0FBQTtBQUNULElBQUEsS0FBQSxDQUFBLEtBQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxjQUFZLENBQUE7QUFDZCxDQUFDLEVBTFcsS0FBSyxLQUFMLEtBQUssR0FLaEIsRUFBQSxDQUFBLENBQUEsQ0FBQTtBQUNE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
