/** @internal */
// eslint-disable-next-line import/export
var PredefinedColorSpace;
(function (PredefinedColorSpace) {
	PredefinedColorSpace["SRGB"] = "srgb";
})(PredefinedColorSpace || (PredefinedColorSpace = {}));
/** @internal */
// eslint-disable-next-line import/export
var PowerPreference;
(function (PowerPreference) {
	PowerPreference["LowPower"] = "low-power";
	PowerPreference["HighPerformance"] = "high-performance";
})(PowerPreference || (PowerPreference = {}));
/** @internal */
var FeatureName;
(function (FeatureName) {
	FeatureName["DepthClipControl"] = "depth-clip-control";
	FeatureName["Depth24UnormStencil8"] = "depth24unorm-stencil8";
	FeatureName["Depth32FloatStencil8"] = "depth32float-stencil8";
	FeatureName["TextureCompressionBC"] = "texture-compression-bc";
	FeatureName["TextureCompressionETC2"] = "texture-compression-etc2";
	FeatureName["TextureCompressionASTC"] = "texture-compression-astc";
	FeatureName["TimestampQuery"] = "timestamp-query";
	FeatureName["IndirectFirstInstance"] = "indirect-first-instance";
	FeatureName["ShaderF16"] = "shader-f16";
	FeatureName["BGRA8UnormStorage"] = "bgra8unorm-storage";
})(FeatureName || (FeatureName = {}));
/** @internal */
var BufferUsage;
(function (BufferUsage) {
	BufferUsage[(BufferUsage["MapRead"] = 1)] = "MapRead";
	BufferUsage[(BufferUsage["MapWrite"] = 2)] = "MapWrite";
	BufferUsage[(BufferUsage["CopySrc"] = 4)] = "CopySrc";
	BufferUsage[(BufferUsage["CopyDst"] = 8)] = "CopyDst";
	BufferUsage[(BufferUsage["Index"] = 16)] = "Index";
	BufferUsage[(BufferUsage["Vertex"] = 32)] = "Vertex";
	BufferUsage[(BufferUsage["Uniform"] = 64)] = "Uniform";
	BufferUsage[(BufferUsage["Storage"] = 128)] = "Storage";
	BufferUsage[(BufferUsage["Indirect"] = 256)] = "Indirect";
	BufferUsage[(BufferUsage["QueryResolve"] = 512)] = "QueryResolve";
})(BufferUsage || (BufferUsage = {}));
/** @internal */
var MapMode;
(function (MapMode) {
	MapMode[(MapMode["Read"] = 1)] = "Read";
	MapMode[(MapMode["Write"] = 2)] = "Write";
})(MapMode || (MapMode = {}));
/** @internal */
var TextureDimension;
(function (TextureDimension) {
	TextureDimension["E1d"] = "1d";
	TextureDimension["E2d"] = "2d";
	TextureDimension["E3d"] = "3d";
})(TextureDimension || (TextureDimension = {}));
/** @internal */
var TextureUsage;
(function (TextureUsage) {
	TextureUsage[(TextureUsage["CopySrc"] = 1)] = "CopySrc";
	TextureUsage[(TextureUsage["CopyDst"] = 2)] = "CopyDst";
	TextureUsage[(TextureUsage["TextureBinding"] = 4)] = "TextureBinding";
	TextureUsage[(TextureUsage["StorageBinding"] = 8)] = "StorageBinding";
	TextureUsage[(TextureUsage["RenderAttachment"] = 16)] = "RenderAttachment";
})(TextureUsage || (TextureUsage = {}));
/** @internal */
var TextureViewDimension;
(function (TextureViewDimension) {
	TextureViewDimension["E1d"] = "1d";
	TextureViewDimension["E2d"] = "2d";
	TextureViewDimension["E2dArray"] = "2d-array";
	TextureViewDimension["Cube"] = "cube";
	TextureViewDimension["CubeArray"] = "cube-array";
	TextureViewDimension["E3d"] = "3d";
})(TextureViewDimension || (TextureViewDimension = {}));
/** @internal */
var TextureAspect;
(function (TextureAspect) {
	TextureAspect["All"] = "all";
	TextureAspect["StencilOnly"] = "stencil-only";
	TextureAspect["DepthOnly"] = "depth-only";
})(TextureAspect || (TextureAspect = {}));
/**
 * Comments taken from https://github.com/gfx-rs/wgpu/blob/master/wgpu-types/src/lib.rs
 * @internal
 */
var TextureFormat;
(function (TextureFormat) {
	// 8-bit formats
	TextureFormat["R8Unorm"] = "r8unorm";
	TextureFormat["R8Snorm"] = "r8snorm";
	TextureFormat["R8Uint"] = "r8uint";
	TextureFormat["R8Sint"] = "r8sint";
	// 16-bit formats
	TextureFormat["R16Uint"] = "r16uint";
	TextureFormat["R16Sint"] = "r16sint";
	TextureFormat["R16Float"] = "r16float";
	TextureFormat["RG8Unorm"] = "rg8unorm";
	TextureFormat["RG8Snorm"] = "rg8snorm";
	TextureFormat["RG8Uint"] = "rg8uint";
	TextureFormat["RG8Sint"] = "rg8sint";
	// 32-bit formats
	TextureFormat["R32Uint"] = "r32uint";
	TextureFormat["R32Sint"] = "r32sint";
	TextureFormat["R32Float"] = "r32float";
	TextureFormat["RG16Uint"] = "rg16uint";
	TextureFormat["RG16Sint"] = "rg16sint";
	TextureFormat["RG16Float"] = "rg16float";
	TextureFormat["RGBA8Unorm"] = "rgba8unorm";
	TextureFormat["RGBA8UnormSRGB"] = "rgba8unorm-srgb";
	TextureFormat["RGBA8Snorm"] = "rgba8snorm";
	TextureFormat["RGBA8Uint"] = "rgba8uint";
	TextureFormat["RGBA8Sint"] = "rgba8sint";
	TextureFormat["BGRA8Unorm"] = "bgra8unorm";
	TextureFormat["BGRA8UnormSRGB"] = "bgra8unorm-srgb";
	// Packed 32-bit formats
	TextureFormat["RGB9E5UFloat"] = "rgb9e5ufloat";
	TextureFormat["RGB10A2Unorm"] = "rgb10a2unorm";
	TextureFormat["RG11B10UFloat"] = "rg11b10ufloat";
	// 64-bit formats
	TextureFormat["RG32Uint"] = "rg32uint";
	TextureFormat["RG32Sint"] = "rg32sint";
	TextureFormat["RG32Float"] = "rg32float";
	TextureFormat["RGBA16Uint"] = "rgba16uint";
	TextureFormat["RGBA16Sint"] = "rgba16sint";
	TextureFormat["RGBA16Float"] = "rgba16float";
	// 128-bit formats
	TextureFormat["RGBA32Uint"] = "rgba32uint";
	TextureFormat["RGBA32Sint"] = "rgba32sint";
	TextureFormat["RGBA32Float"] = "rgba32float";
	// Depth and stencil formats
	TextureFormat["Stencil8"] = "stencil8";
	TextureFormat["Depth16Unorm"] = "depth16unorm";
	TextureFormat["Depth24Plus"] = "depth24plus";
	TextureFormat["Depth24PlusStencil8"] = "depth24plus-stencil8";
	TextureFormat["Depth32Float"] = "depth32float";
	// BC compressed formats usable if "texture-compression-bc" is both
	// supported by the device/user agent and enabled in requestDevice.
	TextureFormat["BC1RGBAUnorm"] = "bc1-rgba-unorm";
	TextureFormat["BC1RGBAUnormSRGB"] = "bc1-rgba-unorm-srgb";
	TextureFormat["BC2RGBAUnorm"] = "bc2-rgba-unorm";
	TextureFormat["BC2RGBAUnormSRGB"] = "bc2-rgba-unorm-srgb";
	TextureFormat["BC3RGBAUnorm"] = "bc3-rgba-unorm";
	TextureFormat["BC3RGBAUnormSRGB"] = "bc3-rgba-unorm-srgb";
	TextureFormat["BC4RUnorm"] = "bc4-r-unorm";
	TextureFormat["BC4RSnorm"] = "bc4-r-snorm";
	TextureFormat["BC5RGUnorm"] = "bc5-rg-unorm";
	TextureFormat["BC5RGSnorm"] = "bc5-rg-snorm";
	TextureFormat["BC6HRGBUFloat"] = "bc6h-rgb-ufloat";
	TextureFormat["BC6HRGBFloat"] = "bc6h-rgb-float";
	TextureFormat["BC7RGBAUnorm"] = "bc7-rgba-unorm";
	TextureFormat["BC7RGBAUnormSRGB"] = "bc7-rgba-unorm-srgb";
	// ETC2 compressed formats usable if "texture-compression-etc2" is both
	// supported by the device/user agent and enabled in requestDevice.
	TextureFormat["ETC2RGB8Unorm"] = "etc2-rgb8unorm";
	TextureFormat["ETC2RGB8UnormSRGB"] = "etc2-rgb8unorm-srgb";
	TextureFormat["ETC2RGB8A1Unorm"] = "etc2-rgb8a1unorm";
	TextureFormat["ETC2RGB8A1UnormSRGB"] = "etc2-rgb8a1unorm-srgb";
	TextureFormat["ETC2RGBA8Unorm"] = "etc2-rgba8unorm";
	TextureFormat["ETC2RGBA8UnormSRGB"] = "etc2-rgba8unorm-srgb";
	TextureFormat["EACR11Unorm"] = "eac-r11unorm";
	TextureFormat["EACR11Snorm"] = "eac-r11snorm";
	TextureFormat["EACRG11Unorm"] = "eac-rg11unorm";
	TextureFormat["EACRG11Snorm"] = "eac-rg11snorm";
	// ASTC compressed formats usable if "texture-compression-astc" is both
	// supported by the device/user agent and enabled in requestDevice.
	TextureFormat["ASTC4x4Unorm"] = "astc-4x4-unorm";
	TextureFormat["ASTC4x4UnormSRGB"] = "astc-4x4-unorm-srgb";
	TextureFormat["ASTC5x4Unorm"] = "astc-5x4-unorm";
	TextureFormat["ASTC5x4UnormSRGB"] = "astc-5x4-unorm-srgb";
	TextureFormat["ASTC5x5Unorm"] = "astc-5x5-unorm";
	TextureFormat["ASTC5x5UnormSRGB"] = "astc-5x5-unorm-srgb";
	TextureFormat["ASTC6x5Unorm"] = "astc-6x5-unorm";
	TextureFormat["ASTC6x5UnormSRGB"] = "astc-6x5-unorm-srgb";
	TextureFormat["ASTC6x6Unorm"] = "astc-6x6-unorm";
	TextureFormat["ASTC6x6UnormSRGB"] = "astc-6x6-unorm-srgb";
	TextureFormat["ASTC8x5Unorm"] = "astc-8x5-unorm";
	TextureFormat["ASTC8x5UnormSRGB"] = "astc-8x5-unorm-srgb";
	TextureFormat["ASTC8x6Unorm"] = "astc-8x6-unorm";
	TextureFormat["ASTC8x6UnormSRGB"] = "astc-8x6-unorm-srgb";
	TextureFormat["ASTC8x8Unorm"] = "astc-8x8-unorm";
	TextureFormat["ASTC8x8UnormSRGB"] = "astc-8x8-unorm-srgb";
	TextureFormat["ASTC10x5Unorm"] = "astc-10x5-unorm";
	TextureFormat["ASTC10x5UnormSRGB"] = "astc-10x5-unorm-srgb";
	TextureFormat["ASTC10x6Unorm"] = "astc-10x6-unorm";
	TextureFormat["ASTC10x6UnormSRGB"] = "astc-10x6-unorm-srgb";
	TextureFormat["ASTC10x8Unorm"] = "astc-10x8-unorm";
	TextureFormat["ASTC10x8UnormSRGB"] = "astc-10x8-unorm-srgb";
	TextureFormat["ASTC10x10Unorm"] = "astc-10x10-unorm";
	TextureFormat["ASTC10x10UnormSRGB"] = "astc-10x10-unorm-srgb";
	TextureFormat["ASTC12x10Unorm"] = "astc-12x10-unorm";
	TextureFormat["ASTC12x10UnormSRGB"] = "astc-12x10-unorm-srgb";
	TextureFormat["ASTC12x12Unorm"] = "astc-12x12-unorm";
	TextureFormat["ASTC12x12UnormSRGB"] = "astc-12x12-unorm-srgb";
	// "depth24unorm-stencil8" feature
	TextureFormat["Depth24UnormStencil8"] = "depth24unorm-stencil8";
	// "depth32float-stencil8" feature
	TextureFormat["Depth32FloatStencil8"] = "depth32float-stencil8";
})(TextureFormat || (TextureFormat = {}));
/** @internal */
var AddressMode;
(function (AddressMode) {
	AddressMode["ClampToEdge"] = "clamp-to-edge";
	AddressMode["Repeat"] = "repeat";
	AddressMode["MirrorRepeat"] = "mirror-repeat";
})(AddressMode || (AddressMode = {}));
/** @internal */
var FilterMode;
(function (FilterMode) {
	FilterMode["Nearest"] = "nearest";
	FilterMode["Linear"] = "linear";
})(FilterMode || (FilterMode = {}));
/** @internal */
var CompareFunction;
(function (CompareFunction) {
	CompareFunction["Never"] = "never";
	CompareFunction["Less"] = "less";
	CompareFunction["Equal"] = "equal";
	CompareFunction["LessEqual"] = "less-equal";
	CompareFunction["Greater"] = "greater";
	CompareFunction["NotEqual"] = "not-equal";
	CompareFunction["GreaterEqual"] = "greater-equal";
	CompareFunction["Always"] = "always";
})(CompareFunction || (CompareFunction = {}));
/** @internal */
var ShaderStage;
(function (ShaderStage) {
	ShaderStage[(ShaderStage["Vertex"] = 1)] = "Vertex";
	ShaderStage[(ShaderStage["Fragment"] = 2)] = "Fragment";
	ShaderStage[(ShaderStage["Compute"] = 4)] = "Compute";
})(ShaderStage || (ShaderStage = {}));
/** @internal */
var BufferBindingType;
(function (BufferBindingType) {
	BufferBindingType["Uniform"] = "uniform";
	BufferBindingType["Storage"] = "storage";
	BufferBindingType["ReadOnlyStorage"] = "read-only-storage";
})(BufferBindingType || (BufferBindingType = {}));
/** @internal */
var SamplerBindingType;
(function (SamplerBindingType) {
	SamplerBindingType["Filtering"] = "filtering";
	SamplerBindingType["NonFiltering"] = "non-filtering";
	SamplerBindingType["Comparison"] = "comparison";
})(SamplerBindingType || (SamplerBindingType = {}));
/** @internal */
var TextureSampleType;
(function (TextureSampleType) {
	TextureSampleType["Float"] = "float";
	TextureSampleType["UnfilterableFloat"] = "unfilterable-float";
	TextureSampleType["Depth"] = "depth";
	TextureSampleType["Sint"] = "sint";
	TextureSampleType["Uint"] = "uint";
})(TextureSampleType || (TextureSampleType = {}));
/** @internal */
var StorageTextureAccess;
(function (StorageTextureAccess) {
	StorageTextureAccess["WriteOnly"] = "write-only";
})(StorageTextureAccess || (StorageTextureAccess = {}));
/** @internal */
var CompilationMessageType;
(function (CompilationMessageType) {
	CompilationMessageType["Error"] = "error";
	CompilationMessageType["Warning"] = "warning";
	CompilationMessageType["Info"] = "info";
})(CompilationMessageType || (CompilationMessageType = {}));
/** @internal */
var AutoLayoutMode;
(function (AutoLayoutMode) {
	AutoLayoutMode["Auto"] = "auto";
})(AutoLayoutMode || (AutoLayoutMode = {}));
/** @internal */
var PrimitiveTopology;
(function (PrimitiveTopology) {
	PrimitiveTopology["PointList"] = "point-list";
	PrimitiveTopology["LineList"] = "line-list";
	PrimitiveTopology["LineStrip"] = "line-strip";
	PrimitiveTopology["TriangleList"] = "triangle-list";
	PrimitiveTopology["TriangleStrip"] = "triangle-strip";
})(PrimitiveTopology || (PrimitiveTopology = {}));
/** @internal */
var FrontFace;
(function (FrontFace) {
	FrontFace["CCW"] = "ccw";
	FrontFace["CW"] = "cw";
})(FrontFace || (FrontFace = {}));
/** @internal */
var CullMode;
(function (CullMode) {
	CullMode["None"] = "none";
	CullMode["Front"] = "front";
	CullMode["Back"] = "back";
})(CullMode || (CullMode = {}));
/** @internal */
var ColorWriteFlags;
(function (ColorWriteFlags) {
	ColorWriteFlags[(ColorWriteFlags["Red"] = 1)] = "Red";
	ColorWriteFlags[(ColorWriteFlags["Green"] = 2)] = "Green";
	ColorWriteFlags[(ColorWriteFlags["Blue"] = 4)] = "Blue";
	ColorWriteFlags[(ColorWriteFlags["Alpha"] = 8)] = "Alpha";
	ColorWriteFlags[(ColorWriteFlags["All"] = 15)] = "All";
})(ColorWriteFlags || (ColorWriteFlags = {}));
/** @internal */
var BlendFactor;
(function (BlendFactor) {
	BlendFactor["Zero"] = "zero";
	BlendFactor["One"] = "one";
	BlendFactor["Src"] = "src";
	BlendFactor["OneMinusSrc"] = "one-minus-src";
	BlendFactor["SrcAlpha"] = "src-alpha";
	BlendFactor["OneMinusSrcAlpha"] = "one-minus-src-alpha";
	BlendFactor["Dst"] = "dst";
	BlendFactor["OneMinusDst"] = "one-minus-dst";
	BlendFactor["DstAlpha"] = "dst-alpha";
	BlendFactor["OneMinusDstAlpha"] = "one-minus-dst-alpha";
	BlendFactor["SrcAlphaSaturated"] = "src-alpha-saturated";
	BlendFactor["Constant"] = "constant";
	BlendFactor["OneMinusConstant"] = "one-minus-constant";
})(BlendFactor || (BlendFactor = {}));
/** @internal */
var BlendOperation;
(function (BlendOperation) {
	BlendOperation["Add"] = "add";
	BlendOperation["Subtract"] = "subtract";
	BlendOperation["ReverseSubtract"] = "reverse-subtract";
	BlendOperation["Min"] = "min";
	BlendOperation["Max"] = "max";
})(BlendOperation || (BlendOperation = {}));
/** @internal */
var StencilOperation;
(function (StencilOperation) {
	StencilOperation["Keep"] = "keep";
	StencilOperation["Zero"] = "zero";
	StencilOperation["Replace"] = "replace";
	StencilOperation["Invert"] = "invert";
	StencilOperation["IncrementClamp"] = "increment-clamp";
	StencilOperation["DecrementClamp"] = "decrement-clamp";
	StencilOperation["IncrementWrap"] = "increment-wrap";
	StencilOperation["DecrementWrap"] = "decrement-wrap";
})(StencilOperation || (StencilOperation = {}));
/** @internal */
var IndexFormat;
(function (IndexFormat) {
	IndexFormat["Uint16"] = "uint16";
	IndexFormat["Uint32"] = "uint32";
})(IndexFormat || (IndexFormat = {}));
/** @internal */
var VertexFormat;
(function (VertexFormat) {
	VertexFormat["Uint8x2"] = "uint8x2";
	VertexFormat["Uint8x4"] = "uint8x4";
	VertexFormat["Sint8x2"] = "sint8x2";
	VertexFormat["Sint8x4"] = "sint8x4";
	VertexFormat["Unorm8x2"] = "unorm8x2";
	VertexFormat["Unorm8x4"] = "unorm8x4";
	VertexFormat["Snorm8x2"] = "snorm8x2";
	VertexFormat["Snorm8x4"] = "snorm8x4";
	VertexFormat["Uint16x2"] = "uint16x2";
	VertexFormat["Uint16x4"] = "uint16x4";
	VertexFormat["Sint16x2"] = "sint16x2";
	VertexFormat["Sint16x4"] = "sint16x4";
	VertexFormat["Unorm16x2"] = "unorm16x2";
	VertexFormat["Unorm16x4"] = "unorm16x4";
	VertexFormat["Snorm16x2"] = "snorm16x2";
	VertexFormat["Snorm16x4"] = "snorm16x4";
	VertexFormat["Float16x2"] = "float16x2";
	VertexFormat["Float16x4"] = "float16x4";
	VertexFormat["Float32"] = "float32";
	VertexFormat["Float32x2"] = "float32x2";
	VertexFormat["Float32x3"] = "float32x3";
	VertexFormat["Float32x4"] = "float32x4";
	VertexFormat["Uint32"] = "uint32";
	VertexFormat["Uint32x2"] = "uint32x2";
	VertexFormat["Uint32x3"] = "uint32x3";
	VertexFormat["Uint32x4"] = "uint32x4";
	VertexFormat["Sint32"] = "sint32";
	VertexFormat["Sint32x2"] = "sint32x2";
	VertexFormat["Sint32x3"] = "sint32x3";
	VertexFormat["Sint32x4"] = "sint32x4";
})(VertexFormat || (VertexFormat = {}));
/** @internal */
var InputStepMode;
(function (InputStepMode) {
	InputStepMode["Vertex"] = "vertex";
	InputStepMode["Instance"] = "instance";
})(InputStepMode || (InputStepMode = {}));
/** @internal */
var ComputePassTimestampLocation;
(function (ComputePassTimestampLocation) {
	ComputePassTimestampLocation["Beginning"] = "beginning";
	ComputePassTimestampLocation["End"] = "end";
})(ComputePassTimestampLocation || (ComputePassTimestampLocation = {}));
/** @internal */
var RenderPassTimestampLocation;
(function (RenderPassTimestampLocation) {
	RenderPassTimestampLocation["Beginning"] = "beginning";
	RenderPassTimestampLocation["End"] = "end";
})(RenderPassTimestampLocation || (RenderPassTimestampLocation = {}));
/** @internal */
var LoadOp;
(function (LoadOp) {
	LoadOp["Load"] = "load";
	LoadOp["Clear"] = "clear";
})(LoadOp || (LoadOp = {}));
/** @internal */
var StoreOp;
(function (StoreOp) {
	StoreOp["Store"] = "store";
	StoreOp["Discard"] = "discard";
})(StoreOp || (StoreOp = {}));
/** @internal */
var QueryType;
(function (QueryType) {
	QueryType["Occlusion"] = "occlusion";
	QueryType["Timestamp"] = "timestamp";
})(QueryType || (QueryType = {}));
/** @internal */
var CanvasAlphaMode;
(function (CanvasAlphaMode) {
	CanvasAlphaMode["Opaque"] = "opaque";
	CanvasAlphaMode["Premultiplied"] = "premultiplied";
})(CanvasAlphaMode || (CanvasAlphaMode = {}));
/** @internal */
var DeviceLostReason;
(function (DeviceLostReason) {
	DeviceLostReason["Destroyed"] = "destroyed";
})(DeviceLostReason || (DeviceLostReason = {}));
/** @internal */
var ErrorFilter;
(function (ErrorFilter) {
	ErrorFilter["OutOfMemory"] = "out-of-memory";
	ErrorFilter["Validation"] = "validation";
})(ErrorFilter || (ErrorFilter = {}));
var GPUColorWrite;
(function (GPUColorWrite) {
	GPUColorWrite[(GPUColorWrite["Red"] = 1)] = "Red";
	GPUColorWrite[(GPUColorWrite["Green"] = 2)] = "Green";
	GPUColorWrite[(GPUColorWrite["Blue"] = 4)] = "Blue";
	GPUColorWrite[(GPUColorWrite["Alpha"] = 8)] = "Alpha";
	GPUColorWrite[(GPUColorWrite["All"] = 15)] = "All";
})(GPUColorWrite || (GPUColorWrite = {}));

class Buffer {
	constructor(device, usage, data, size) {
		this.device = device;
		this.usage = usage;
		this.data = data;
		this.size = size;
		this.gpuBuffer = device.createBuffer({
			size: size != undefined ? size : data.byteLength,
			usage
		});
		if (data) this.setSubData(0, data);
	}
	static create(device, usage, data, size) {
		return new Buffer(device, usage, data, size);
	}
	static createVertexBuffer(device, data) {
		return new Buffer(device, BufferUsage.Vertex | BufferUsage.CopyDst, data, data.byteLength);
	}
	static createIndexBuffer(device, data) {
		return new Buffer(device, BufferUsage.Index | BufferUsage.CopyDst, data);
	}
	static createUniformBuffer(device, size, usage) {
		return new Buffer(device, usage, null, size);
	}
	static getBufferType(usage) {
		switch (usage) {
			case BufferUsage.Uniform:
				break;
			case BufferUsage.Storage:
				break;
		}
	}
	// https://github.com/gpuweb/gpuweb/blob/main/design/BufferOperations.md
	setSubData(offset, data) {
		const srcArrayBuffer = data.buffer;
		const byteCount = srcArrayBuffer.byteLength;
		const srcBuffer = this.device.createBuffer({
			mappedAtCreation: true,
			size: byteCount,
			usage: GPUBufferUsage.COPY_SRC
		});
		const arrayBuffer = srcBuffer.getMappedRange();
		new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer)); // memcpy
		srcBuffer.unmap();
		this.copyToBuffer(srcBuffer, offset, byteCount);
		srcBuffer.destroy();
	}
	copyToBuffer(srcBuffer, offset, byteCount) {
		const commandEncoder = this.device.createCommandEncoder();
		commandEncoder.copyBufferToBuffer(srcBuffer, 0, this.gpuBuffer, offset, byteCount);
		this.device.queue.submit([commandEncoder.finish()]);
	}
	copyToTexture(bytesPerRow, rowsPerImage, destination, extent) {
		const commandEncoder = this.device.createCommandEncoder();
		commandEncoder.copyBufferToTexture(
			{
				buffer: this.gpuBuffer,
				bytesPerRow,
				rowsPerImage
			},
			destination,
			extent
		);
		this.device.queue.submit([commandEncoder.finish()]);
	}
	destroy() {
		this.gpuBuffer.destroy();
	}
}

class DrawCommand {
	constructor(options) {
		this.type = options.type;
		this.shaderData = options.shaderData;
		this.renderTarget = options.renderTarget;
		this.vertexBuffer = options.vertexBuffer;
		this.indexBuffer = options.indexBuffer;
		this.renderState = options.renderState;
		this.queryIndex = options.queryIndex;
		this.count = options.count;
		this.instances = options.instances;
		this.dispatch = options.dispatch;
		this.shaderSource = options.shaderSource;
		this.dirty = options.dirty;
		this.light = options.light;
		this.modelMatrix = options.modelMatrix;
	}
	shallowClone(material) {
		if (material) {
			return new DrawCommand({
				vertexBuffer: this.vertexBuffer,
				indexBuffer: this.indexBuffer,
				shaderData: material.shaderData,
				instances: this.instances,
				count: this.count,
				renderState: material.renderState,
				shaderSource: material.shaderSource,
				type: "render",
				light: material.light,
				modelMatrix: this.modelMatrix
			});
		}
	}
}

const GPUCanvasCompositingAlphaMode = {
	Opaque: "opaque",
	Premultiplied: "premultiplied"
};

class MipmapGenerator {
	constructor(device) {
		this.device = device;
		this.sampler = device.createSampler({ minFilter: "linear" });
		// We'll need a new pipeline for every texture format used.
		this.pipelines = {};
	}
	getMipmapPipeline(format) {
		let pipeline = this.pipelines[format];
		if (!pipeline) {
			// Shader modules is shared between all pipelines, so only create once.
			if (!this.mipmapShaderModule) {
				this.mipmapShaderModule = this.device.createShaderModule({
					code: `
              var<private> pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(
                vec2<f32>(-1.0, -1.0), vec2<f32>(-1.0, 3.0), vec2<f32>(3.0, -1.0));
              struct VertexOutput {
                @builtin(position) position : vec4<f32>,
                @location(0) texCoord : vec2<f32>,
              };
              @vertex
              fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {
                var output : VertexOutput;
                output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);
                output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);
                return output;
              }
              @group(0) @binding(0) var imgSampler : sampler;
              @group(0) @binding(1) var img : texture_2d<f32>;
              @fragment
              fn fragmentMain(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {
                return textureSample(img, imgSampler, texCoord);
              }
            `
				});
			}
			pipeline = this.device.createRenderPipeline({
				layout: "auto",
				vertex: {
					module: this.mipmapShaderModule,
					entryPoint: "vertexMain"
				},
				fragment: {
					module: this.mipmapShaderModule,
					entryPoint: "fragmentMain",
					targets: [{ format }]
				}
			});
			this.pipelines[format] = pipeline;
		}
		return pipeline;
	}
	/**
	 * Generates mipmaps for the given GPUTexture from the data in level 0.
	 *
	 * @param {module:External.GPUTexture} texture - Texture to generate mipmaps for.
	 * @param {object} textureDescriptor - GPUTextureDescriptor the texture was created with.
	 * @returns {module:External.GPUTexture} - The originally passed texture
	 */
	generateMipmap(sourceTexture) {
		const texture = sourceTexture.gpuTexture;
		const textureDescriptor = sourceTexture.textureProp;
		// TODO: Does this need to handle sRGB formats differently?
		const pipeline = this.getMipmapPipeline(textureDescriptor.format);
		if (textureDescriptor.dimension == "3d" || textureDescriptor.dimension == "1d") {
			throw new Error("Generating mipmaps for non-2d textures is currently unsupported!");
		}
		let mipTexture = texture;
		const arrayLayerCount = textureDescriptor.size.depth || 1; // Only valid for 2D textures.
		// If the texture was created with RENDER_ATTACHMENT usage we can render directly between mip levels.
		const renderToSource = textureDescriptor.usage & GPUTextureUsage.RENDER_ATTACHMENT;
		if (!renderToSource) {
			// Otherwise we have to use a separate texture to render into. It can be one mip level smaller than the source
			// texture, since we already have the top level.
			const mipTextureDescriptor = {
				size: {
					width: Math.ceil(textureDescriptor.size.width / 2),
					height: Math.ceil(textureDescriptor.size.height / 2),
					depthOrArrayLayers: arrayLayerCount
				},
				format: textureDescriptor.format,
				usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,
				mipLevelCount: textureDescriptor.mipLevelCount - 1
			};
			mipTexture = this.device.createTexture(mipTextureDescriptor);
		}
		const commandEncoder = this.device.createCommandEncoder({});
		// TODO: Consider making this static.
		const bindGroupLayout = pipeline.getBindGroupLayout(0);
		for (let arrayLayer = 0; arrayLayer < arrayLayerCount; ++arrayLayer) {
			let srcView = texture.createView({
				baseMipLevel: 0,
				mipLevelCount: 1,
				dimension: "2d",
				baseArrayLayer: arrayLayer,
				arrayLayerCount: 1
			});
			let dstMipLevel = renderToSource ? 1 : 0;
			for (let i = 1; i < textureDescriptor.mipLevelCount; ++i) {
				const dstView = mipTexture.createView({
					baseMipLevel: dstMipLevel++,
					mipLevelCount: 1,
					dimension: "2d",
					baseArrayLayer: arrayLayer,
					arrayLayerCount: 1
				});
				const passEncoder = commandEncoder.beginRenderPass({
					colorAttachments: [
						{
							view: dstView,
							loadOp: "clear",
							storeOp: "store"
						}
					]
				});
				const bindGroup = this.device.createBindGroup({
					layout: bindGroupLayout,
					entries: [
						{
							binding: 0,
							resource: this.sampler
						},
						{
							binding: 1,
							resource: srcView
						}
					]
				});
				passEncoder.setPipeline(pipeline);
				passEncoder.setBindGroup(0, bindGroup);
				passEncoder.draw(3, 1, 0, 0);
				passEncoder.end();
				srcView = dstView;
			}
		}
		// If we didn't render to the source texture, finish by copying the mip results from the temporary mipmap texture
		// to the source.
		if (!renderToSource) {
			const mipLevelSize = {
				width: Math.ceil(textureDescriptor.size.width / 2),
				height: Math.ceil(textureDescriptor.size.height / 2),
				depthOrArrayLayers: arrayLayerCount
			};
			for (let i = 1; i < textureDescriptor.mipLevelCount; ++i) {
				commandEncoder.copyTextureToTexture(
					{
						texture: mipTexture,
						mipLevel: i - 1
					},
					{
						texture: texture,
						mipLevel: i
					},
					mipLevelSize
				);
				mipLevelSize.width = Math.ceil(mipLevelSize.width / 2);
				mipLevelSize.height = Math.ceil(mipLevelSize.height / 2);
			}
		}
		this.device.queue.submit([commandEncoder.finish()]);
		if (!renderToSource) {
			mipTexture.destroy();
		}
		return texture;
	}
}

const pipelineLayoutCache = new Map();
class PipelineLayout {
	constructor(device, label, groupLayouts = [], index) {
		this.groupLayouts = groupLayouts;
		this.index = index || 0;
		this.gpuPipelineLayout = device.createPipelineLayout({
			label: label,
			bindGroupLayouts: groupLayouts.map((layout) => {
				return layout.gpuBindGroupLayout;
			})
		});
	}
	static getPipelineLayoutFromCache(device, label, groupLayouts) {
		if (pipelineLayoutCache.has(label)) {
			return pipelineLayoutCache.get(label);
		} else {
			const bindGroupLayout = new PipelineLayout(device, label, groupLayouts);
			pipelineLayoutCache.set(label, bindGroupLayout);
			return bindGroupLayout;
		}
	}
}

const renderPipelines = new Map();
const computePipelines = new Map();
class Pipeline {
	constructor(type, device, descriptor) {
		this.type = type;
		this.descriptor = descriptor;
		this.device = device;
		this.createPipeline();
	}
	createPipeline() {
		if (this.type == "render") {
			this.gpuPipeline = this.device.createRenderPipeline(this.descriptor);
		} else {
			this.gpuPipeline = this.device.createComputePipeline(this.descriptor);
		}
	}
	bind(passEncoder) {
		if (this.type == "render") {
			passEncoder.setPipeline(this.gpuPipeline);
		} else {
			passEncoder.setPipeline(this.gpuPipeline);
		}
	}
	static getRenderPipelineFromCache(device, drawComand, groupLayouts) {
		const { renderState, shaderSource } = drawComand;
		const rsStr = JSON.stringify(renderState);
		const combineStr = shaderSource.uid.concat(rsStr);
		const hashId = stringToHash(combineStr);
		const combineLayouts = groupLayouts.sort((layout1, layout2) => layout1.index - layout2.index);
		let pipeline = renderPipelines.get(hashId);
		if (!pipeline) {
			const descriptor = Pipeline.getPipelineDescriptor(
				device,
				drawComand,
				renderState,
				combineLayouts,
				hashId.toString()
			);
			pipeline = new Pipeline("render", device, descriptor);
			renderPipelines.set(hashId, pipeline);
		}
		return pipeline;
	}
	static getComputePipelineFromCache(device, drawComand, groupLayouts) {
		const { shaderSource } = drawComand;
		const hashId = stringToHash(shaderSource.uid);
		let pipeline = computePipelines.get(hashId);
		if (!pipeline) {
			const { shaderSource } = drawComand;
			pipeline = device.createComputePipeline({
				layout: PipelineLayout.getPipelineLayoutFromCache(device, hashId.toString(), groupLayouts)
					.gpuPipelineLayout,
				compute: {
					module: shaderSource.createShaderModule(device),
					entryPoint: shaderSource.computeMain
				}
			});
			computePipelines.set(hashId, pipeline);
		}
		return pipeline;
	}
	static getPipelineDescriptor(device, drawComand, renderState, groupLayouts, hashId) {
		const { vertexBuffer, shaderSource } = drawComand;
		const { vert, frag } = shaderSource.createShaderModule(device);
		const pipelineDec = {
			layout: PipelineLayout.getPipelineLayoutFromCache(device, hashId, groupLayouts).gpuPipelineLayout
		};
		if (vert)
			pipelineDec.vertex = {
				module: vert,
				entryPoint: shaderSource.vertEntryPoint,
				buffers: vertexBuffer.getBufferDes()
			};
		if (renderState.primitive) pipelineDec.primitive = renderState.primitive.getGPUPrimitiveDec();
		if (renderState.depthStencil) pipelineDec.depthStencil = renderState.depthStencil.getGPUDepthStencilDec();
		if (renderState.multisample) pipelineDec.multisample = renderState.multisample.getMultiSampleDec();
		if (frag)
			pipelineDec.fragment = {
				module: frag,
				entryPoint: shaderSource.fragEntryPoint,
				targets: renderState.targets.map((target) => {
					return target.getGPUTargetDec();
				})
			};
		return pipelineDec;
		// return {
		//   //需要改动
		//   layout: PipelineLayout.getPipelineLayoutFromCache(
		//     device,
		//     hashId,
		//     groupLayouts
		//   ).gpuPipelineLayout,
		//   vertex: {
		//     module: vert,
		//     entryPoint: shaderSource.vertEntryPoint,
		//     buffers: vertexBuffer.getBufferDes() as Iterable<GPUVertexBufferLayout>,
		//   },
		//   primitive: renderState.primitive,
		//   depthStencil: renderState.depthStencil as GPUDepthStencilState,
		//   multisample: renderState.multisample,
		//   fragment: {
		//     module: frag,
		//     entryPoint: shaderSource.fragEntryPoint,
		//     targets: renderState.targets as Iterable<GPUColorTargetState>,
		//   },
		// };
	}
}
// Borrowed from https://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
function stringToHash(str) {
	let hash = 0;
	if (str.length == 0) return hash;
	for (let i = 0; i < str.length; i++) {
		const char = str.charCodeAt(i);
		hash = (hash << 5) - hash + char;
		hash = hash & hash; // Convert to 32bit integer
	}
	return hash;
}

/**
 * Returns the first parameter if not undefined, otherwise the second parameter.
 * Useful for setting a default value for a parameter.
 *
 * @function
 *
 * @param {*} a
 * @param {*} b
 * @returns {*} Returns the first parameter if not undefined, otherwise the second parameter.
 *
 * @example
 * param = Cesium.defaultValue(param, 'default');
 */
function defaultValue(a, b) {
	if (a !== undefined && a !== null) {
		return a;
	}
	return b;
}
/**
 * A frozen empty object that can be used as the default value for options passed as
 * an object literal.
 * @type {Object}
 * @memberof defaultValue
 */
defaultValue.EMPTY_OBJECT = Object.freeze({});

/**
 * @function
 *
 * @param {*} value The object.
 * @returns {Boolean} Returns true if the object is defined, returns false otherwise.
 *
 * @example
 * if (Cesium.defined(positions)) {
 *      doSomething();
 * } else {
 *      doSomethingElse();
 * }
 */
function defined(value) {
	return value !== undefined && value !== null;
}

/*
  https://github.com/banksean wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace
  so it's better encapsulated. Now you can have multiple random number generators
  and they won't stomp all over eachother's state.

  If you want to use this as a substitute for Math.random(), use the random()
  method like so:

  var m = new MersenneTwister();
  var randomNumber = m.random();

  You can also call the other genrand_{foo}() methods on the instance.

  If you want to use a specific seed in order to get a repeatable random
  sequence, pass an integer into the constructor:

  var m = new MersenneTwister(123);

  and that will always produce the same random sequence.

  Sean McCullough (banksean@gmail.com)
*/

/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_seed(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

var MersenneTwister = function (seed) {
	if (seed == undefined) {
		seed = new Date().getTime();
	}

	/* Period parameters */
	this.N = 624;
	this.M = 397;
	this.MATRIX_A = 0x9908b0df; /* constant vector a */
	this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
	this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

	this.mt = new Array(this.N); /* the array for the state vector */
	this.mti = this.N + 1; /* mti==N+1 means mt[N] is not initialized */

	if (seed.constructor == Array) {
		this.init_by_array(seed, seed.length);
	} else {
		this.init_seed(seed);
	}
};

/* initializes mt[N] with a seed */
/* origin name init_genrand */
MersenneTwister.prototype.init_seed = function (s) {
	this.mt[0] = s >>> 0;
	for (this.mti = 1; this.mti < this.N; this.mti++) {
		var s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);
		this.mt[this.mti] = ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + this.mti;
		/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
		/* In the previous versions, MSBs of the seed affect   */
		/* only MSBs of the array mt[].                        */
		/* 2002/01/09 modified by Makoto Matsumoto             */
		this.mt[this.mti] >>>= 0;
		/* for >32 bit machines */
	}
};

/* initialize by an array with array-length */
/* init_key is the array for initializing keys */
/* key_length is its length */
/* slight change for C++, 2004/2/26 */
MersenneTwister.prototype.init_by_array = function (init_key, key_length) {
	var i, j, k;
	this.init_seed(19650218);
	i = 1;
	j = 0;
	k = this.N > key_length ? this.N : key_length;
	for (; k; k--) {
		var s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
		this.mt[i] =
			(this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + (s & 0x0000ffff) * 1664525)) +
			init_key[j] +
			j; /* non linear */
		this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		i++;
		j++;
		if (i >= this.N) {
			this.mt[0] = this.mt[this.N - 1];
			i = 1;
		}
		if (j >= key_length) j = 0;
	}
	for (k = this.N - 1; k; k--) {
		var s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
		this.mt[i] =
			(this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) -
			i; /* non linear */
		this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		i++;
		if (i >= this.N) {
			this.mt[0] = this.mt[this.N - 1];
			i = 1;
		}
	}

	this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
};

/* generates a random number on [0,0xffffffff]-interval */
/* origin name genrand_int32 */
MersenneTwister.prototype.random_int = function () {
	var y;
	var mag01 = new Array(0x0, this.MATRIX_A);
	/* mag01[x] = x * MATRIX_A  for x=0,1 */

	if (this.mti >= this.N) {
		/* generate N words at one time */
		var kk;

		if (this.mti == this.N + 1)
			/* if init_seed() has not been called, */
			this.init_seed(5489); /* a default initial seed is used */

		for (kk = 0; kk < this.N - this.M; kk++) {
			y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);
			this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
		}
		for (; kk < this.N - 1; kk++) {
			y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);
			this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
		}
		y = (this.mt[this.N - 1] & this.UPPER_MASK) | (this.mt[0] & this.LOWER_MASK);
		this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];

		this.mti = 0;
	}

	y = this.mt[this.mti++];

	/* Tempering */
	y ^= y >>> 11;
	y ^= (y << 7) & 0x9d2c5680;
	y ^= (y << 15) & 0xefc60000;
	y ^= y >>> 18;

	return y >>> 0;
};

/* generates a random number on [0,0x7fffffff]-interval */
/* origin name genrand_int31 */
MersenneTwister.prototype.random_int31 = function () {
	return this.random_int() >>> 1;
};

/* generates a random number on [0,1]-real-interval */
/* origin name genrand_real1 */
MersenneTwister.prototype.random_incl = function () {
	return this.random_int() * (1.0 / 4294967295.0);
	/* divided by 2^32-1 */
};

/* generates a random number on [0,1)-real-interval */
MersenneTwister.prototype.random = function () {
	return this.random_int() * (1.0 / 4294967296.0);
	/* divided by 2^32 */
};

/* generates a random number on (0,1)-real-interval */
/* origin name genrand_real3 */
MersenneTwister.prototype.random_excl = function () {
	return (this.random_int() + 0.5) * (1.0 / 4294967296.0);
	/* divided by 2^32 */
};

/* generates a random number on [0,1) with 53-bit resolution*/
/* origin name genrand_res53 */
MersenneTwister.prototype.random_long = function () {
	var a = this.random_int() >>> 5,
		b = this.random_int() >>> 6;
	return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
};

/* These real versions are due to Isaku Wada, 2002/01/09 added */

var mersenneTwister = MersenneTwister;

class GMath {
	static signNotZero(value) {
		return value < 0.0 ? -1.0 : 1.0;
	}
	static toSNorm(value, rangeMaximum) {
		rangeMaximum = defaultValue(rangeMaximum, 255);
		return Math.round((GMath.clamp(value, -1.0, 1.0) * 0.5 + 0.5) * rangeMaximum);
	}
	static fromSNorm(value, rangeMaximum) {
		rangeMaximum = defaultValue(rangeMaximum, 255);
		return (GMath.clamp(value, 0.0, rangeMaximum) / rangeMaximum) * 2.0 - 1.0;
	}
	static normalize(value, rangeMinimum, rangeMaximum) {
		rangeMaximum = Math.max(rangeMaximum - rangeMinimum, 0.0);
		return rangeMaximum === 0.0 ? 0.0 : GMath.clamp((value - rangeMinimum) / rangeMaximum, 0.0, 1.0);
	}
	static lerp(p, q, time) {
		return (1.0 - time) * p + time * q;
	}
	static toRadians(degrees) {
		if (!defined(degrees)) {
			throw new Error("degrees is required.");
		}
		return degrees * GMath.RADIANS_PER_DEGREE;
	}
	static toDegrees(radians) {
		if (!defined(radians)) {
			throw new Error("radians is required.");
		}
		return radians * GMath.DEGREES_PER_RADIAN;
	}
	static negativePiToPi(angle) {
		if (!defined(angle)) {
			throw new Error("angle is required.");
		}
		if (angle >= -GMath.PI && angle <= GMath.PI) {
			// Early exit if the input is already inside the range. This avoids
			// unnecessary math which could introduce floating point error.
			return angle;
		}
		return GMath.zeroToTwoPi(angle + GMath.PI) - GMath.PI;
	}
	static zeroToTwoPi(angle) {
		if (!defined(angle)) {
			throw new Error("angle is required.");
		}
		if (angle >= 0 && angle <= GMath.TWO_PI) {
			// Early exit if the input is already inside the range. This avoids
			// unnecessary math which could introduce floating point error.
			return angle;
		}
		const mod = GMath.mod(angle, GMath.TWO_PI);
		if (Math.abs(mod) < GMath.EPSILON14 && Math.abs(angle) > GMath.EPSILON14) {
			return GMath.TWO_PI;
		}
		return mod;
	}
	static mod(m, n) {
		if (!defined(m)) {
			throw new Error("m is required.");
		}
		if (!defined(n)) {
			throw new Error("n is required.");
		}
		if (n === 0.0) {
			throw new Error("divisor cannot be 0.");
		}
		if (GMath.sign(m) === GMath.sign(n) && Math.abs(m) < Math.abs(n)) {
			// Early exit if the input does not need to be modded. This avoids
			// unnecessary math which could introduce floating point error.
			return m;
		}
		return ((m % n) + n) % n;
	}
	static equalsEpsilon(left, right, relativeEpsilon, absoluteEpsilon = relativeEpsilon) {
		if (!defined(left)) {
			throw new Error("left is required.");
		}
		if (!defined(right)) {
			throw new Error("right is required.");
		}
		relativeEpsilon = defaultValue(relativeEpsilon, 0.0);
		absoluteEpsilon = defaultValue(absoluteEpsilon, relativeEpsilon);
		const absDiff = Math.abs(left - right);
		return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));
	}
	static lessThan(left, right, absoluteEpsilon = 0) {
		if (!defined(left)) {
			throw new Error("first is required.");
		}
		if (!defined(right)) {
			throw new Error("second is required.");
		}
		if (!defined(absoluteEpsilon)) {
			throw new Error("absoluteEpsilon is required.");
		}
		return left - right < -absoluteEpsilon;
	}
	static lessThanOrEquals(left, right, absoluteEpsilon = 0) {
		if (!defined(left)) {
			throw new Error("first is required.");
		}
		if (!defined(right)) {
			throw new Error("second is required.");
		}
		if (!defined(absoluteEpsilon)) {
			throw new Error("absoluteEpsilon is required.");
		}
		return left - right < absoluteEpsilon;
	}
	static greaterThan(left, right, absoluteEpsilon = 0) {
		if (!defined(left)) {
			throw new Error("first is required.");
		}
		if (!defined(right)) {
			throw new Error("second is required.");
		}
		if (!defined(absoluteEpsilon)) {
			throw new Error("absoluteEpsilon is required.");
		}
		return left - right > absoluteEpsilon;
	}
	static greaterThanOrEquals(left, right, absoluteEpsilon = 0) {
		if (!defined(left)) {
			throw new Error("first is required.");
		}
		if (!defined(right)) {
			throw new Error("second is required.");
		}
		if (!defined(absoluteEpsilon)) {
			throw new Error("absoluteEpsilon is required.");
		}
		return left - right > -absoluteEpsilon;
	}
	static isPowerOfTwo(n) {
		//>>includeStart('debug', pragmas.debug);
		if (typeof n !== "number" || n < 0 || n > 4294967295) {
			throw new Error("A number between 0 and (2^32)-1 is required.");
		}
		//>>includeEnd('debug');
		return n !== 0 && (n & (n - 1)) === 0;
	}
	static nextPowerOfTwo(n) {
		if (typeof n !== "number" || n < 0 || n > 2147483648) {
			throw new Error("A number between 0 and 2^31 is required.");
		}
		// From http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2
		--n;
		n |= n >> 1;
		n |= n >> 2;
		n |= n >> 4;
		n |= n >> 8;
		n |= n >> 16;
		++n;
		return n;
	}
	static previousPowerOfTwo(n) {
		if (typeof n !== "number" || n < 0 || n > 4294967295) {
			throw new Error("A number between 0 and (2^32)-1 is required.");
		}
		n |= n >> 1;
		n |= n >> 2;
		n |= n >> 4;
		n |= n >> 8;
		n |= n >> 16;
		n |= n >> 32;
		// The previous bitwise operations implicitly convert to signed 32-bit. Use `>>>` to convert to unsigned
		n = (n >>> 0) - (n >>> 1);
		return n;
	}
	static clamp(value, min, max) {
		return value < min ? min : value > max ? max : value;
	}
	/**
	 * @private
	 */
	static fog(distanceToCamera, density) {
		const scalar = distanceToCamera * density;
		return 1.0 - Math.exp(-(scalar * scalar));
	}
}
GMath.EPSILON1 = 0.1;
GMath.EPSILON2 = 0.01;
GMath.EPSILON3 = 0.001;
GMath.EPSILON4 = 0.0001;
GMath.EPSILON5 = 0.00001;
GMath.EPSILON6 = 0.000001;
GMath.EPSILON7 = 0.0000001;
GMath.EPSILON8 = 0.00000001;
GMath.EPSILON9 = 0.000000001;
GMath.EPSILON10 = 0.0000000001;
GMath.EPSILON11 = 0.00000000001;
GMath.EPSILON12 = 0.000000000001;
GMath.EPSILON13 = 0.0000000000001;
GMath.EPSILON14 = 0.00000000000001;
GMath.EPSILON15 = 0.000000000000001;
GMath.EPSILON16 = 0.0000000000000001;
GMath.EPSILON17 = 0.00000000000000001;
GMath.EPSILON18 = 0.000000000000000001;
GMath.EPSILON19 = 0.0000000000000000001;
GMath.EPSILON20 = 0.00000000000000000001;
GMath.EPSILON21 = 0.000000000000000000001;
GMath.GRAVITATIONALPARAMETER = 3.986004418e14;
GMath.SIXTY_FOUR_KILOBYTES = 64 * 1024;
GMath.FOUR_GIGABYTES = 4 * 1024 * 1024 * 1024;
// eslint-disable-next-line es/no-math-sign
GMath.sign = defaultValue(Math.sign, function sign(value) {
	value = +value; // coerce to number
	if (value === 0 || value !== value) {
		// zero or NaN
		return value;
	}
	return value > 0 ? 1 : -1;
});
// eslint-disable-next-line es/no-math-sinh
GMath.sinh = defaultValue(Math.sinh, function sinh(value) {
	return (Math.exp(value) - Math.exp(-value)) / 2.0;
});
// eslint-disable-next-line es/no-math-cosh
GMath.cosh = defaultValue(Math.cosh, function cosh(value) {
	return (Math.exp(value) + Math.exp(-value)) / 2.0;
});
GMath.PI = Math.PI;
GMath.ONE_OVER_PI = 1.0 / Math.PI;
GMath.PI_OVER_TWO = Math.PI / 2.0;
GMath.PI_OVER_THREE = Math.PI / 3.0;
GMath.PI_OVER_FOUR = Math.PI / 4.0;
GMath.PI_OVER_SIX = Math.PI / 6.0;
GMath.THREE_PI_OVER_TWO = (3.0 * Math.PI) / 2.0;
GMath.TWO_PI = 2.0 * Math.PI;
GMath.ONE_OVER_TWO_PI = 1.0 / (2.0 * Math.PI);
GMath.RADIANS_PER_DEGREE = Math.PI / 180.0;
GMath.DEGREES_PER_RADIAN = 180.0 / Math.PI;
GMath.RADIANS_PER_ARCSECOND = GMath.RADIANS_PER_DEGREE / 3600.0;
GMath.nextRandomNumber = function () {
	return randomNumberGenerator.random();
};
GMath.randomBetween = function (min, max) {
	return GMath.nextRandomNumber() * (max - min) + min;
};
GMath.acosClamped = function (value) {
	if (!defined(value)) {
		throw new Error("value is required.");
	}
	return Math.acos(GMath.clamp(value, -1.0, 1.0));
};
GMath.asinClamped = function (value) {
	if (!defined(value)) {
		throw new Error("value is required.");
	}
	return Math.asin(GMath.clamp(value, -1.0, 1.0));
};
GMath.chordLength = function (angle, radius) {
	if (!defined(angle)) {
		throw new Error("angle is required.");
	}
	if (!defined(radius)) {
		throw new Error("radius is required.");
	}
	return 2.0 * radius * Math.sin(angle * 0.5);
};
GMath.logBase = function (number, base) {
	if (!defined(number)) {
		throw new Error("number is required.");
	}
	if (!defined(base)) {
		throw new Error("base is required.");
	}
	return Math.log(number) / Math.log(base);
};
// eslint-disable-next-line es/no-math-cbrt
GMath.cbrt = defaultValue(Math.cbrt, function cbrt(number) {
	const result = Math.pow(Math.abs(number), 1.0 / 3.0);
	return number < 0.0 ? -result : result;
});
// eslint-disable-next-line es/no-math-log2
GMath.log2 = defaultValue(Math.log2, function log2(number) {
	return Math.log(number) * Math.LOG2E;
});
let randomNumberGenerator = new mersenneTwister();

//#rgba
const rgbaMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;
//#rrggbbaa
const rrggbbaaMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;
//rgb(), rgba(), or rgb%()
const rgbParenthesesMatcher = /^rgba?\(\s*([0-9.]+%?)\s*,\s*([0-9.]+%?)\s*,\s*([0-9.]+%?)(?:\s*,\s*([0-9.]+))?\s*\)$/i;
//hsl() or hsla()
const hslParenthesesMatcher = /^hsla?\(\s*([0-9.]+)\s*,\s*([0-9.]+%)\s*,\s*([0-9.]+%)(?:\s*,\s*([0-9.]+))?\s*\)$/i;
function hue2rgb(m1, m2, h) {
	if (h < 0) {
		h += 1;
	}
	if (h > 1) {
		h -= 1;
	}
	if (h * 6 < 1) {
		return m1 + (m2 - m1) * 6 * h;
	}
	if (h * 2 < 1) {
		return m2;
	}
	if (h * 3 < 2) {
		return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	}
	return m1;
}
class Color {
	constructor(red = 1.0, green = 1.0, blue = 1.0) {
		/**
		 * The red component.
		 * @type {Number}
		 * @default 1.0
		 */
		this.red = red;
		/**
		 * The green component.
		 * @type {Number}
		 * @default 1.0
		 */
		this.green = green;
		/**
		 * The blue component.
		 * @type {Number}
		 * @default 1.0
		 */
		this.blue = blue;
	}
	set(value) {
		if (typeof value === "string") {
			Color.fromCssColorString(value, this);
		}
		return this;
	}
	toArray() {
		return [this.red, this.green, this.blue];
	}
	clone(result) {
		return Color.clone(this, result);
	}
	equals(other) {
		return Color.equals(this, other);
	}
	toCssHexString() {
		let r = Color.floatToByte(this.red).toString(16);
		if (r.length < 2) {
			r = `0${r}`;
		}
		let g = Color.floatToByte(this.green).toString(16);
		if (g.length < 2) {
			g = `0${g}`;
		}
		let b = Color.floatToByte(this.blue).toString(16);
		if (b.length < 2) {
			b = `0${b}`;
		}
		return `#${r}${g}${b}`;
	}
	toBytes(result) {
		const red = Color.floatToByte(this.red);
		const green = Color.floatToByte(this.green);
		const blue = Color.floatToByte(this.blue);
		if (!defined(result)) {
			return [red, green, blue];
		}
		result[0] = red;
		result[1] = green;
		result[2] = blue;
		return result;
	}
	static fromBytes(red, green, blue, result) {
		red = Color.byteToFloat(defaultValue(red, 255.0));
		green = Color.byteToFloat(defaultValue(green, 255.0));
		blue = Color.byteToFloat(defaultValue(blue, 255.0));
		if (!defined(result)) {
			return new Color(red, green, blue);
		}
		result.red = red;
		result.green = green;
		result.blue = blue;
		return result;
	}
	static fromHsl(hue, saturation, lightness, result) {
		hue = defaultValue(hue, 0.0) % 1.0;
		saturation = defaultValue(saturation, 0.0);
		lightness = defaultValue(lightness, 0.0);
		let red = lightness;
		let green = lightness;
		let blue = lightness;
		if (saturation !== 0) {
			let m2;
			if (lightness < 0.5) {
				m2 = lightness * (1 + saturation);
			} else {
				m2 = lightness + saturation - lightness * saturation;
			}
			const m1 = 2.0 * lightness - m2;
			red = hue2rgb(m1, m2, hue + 1 / 3);
			green = hue2rgb(m1, m2, hue);
			blue = hue2rgb(m1, m2, hue - 1 / 3);
		}
		if (!defined(result)) {
			return new Color(red, green, blue);
		}
		result.red = red;
		result.green = green;
		result.blue = blue;
		return result;
	}
	/**
	 * Creates a random color using the provided options. For reproducible random colors, you should
	 * call {@link GMath#setRandomNumberSeed} once at the beginning of your application.
	 *
	 * @param {Object} [options] Object with the following properties:
	 * @param {Number} [options.red] If specified, the red component to use instead of a randomized value.
	 * @param {Number} [options.minimumRed=0.0] The maximum red value to generate if none was specified.
	 * @param {Number} [options.maximumRed=1.0] The minimum red value to generate if none was specified.
	 * @param {Number} [options.green] If specified, the green component to use instead of a randomized value.
	 * @param {Number} [options.minimumGreen=0.0] The maximum green value to generate if none was specified.
	 * @param {Number} [options.maximumGreen=1.0] The minimum green value to generate if none was specified.
	 * @param {Number} [options.blue] If specified, the blue component to use instead of a randomized value.
	 * @param {Number} [options.minimumBlue=0.0] The maximum blue value to generate if none was specified.
	 * @param {Number} [options.maximumBlue=1.0] The minimum blue value to generate if none was specified.
	 * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.
	 * @returns {Color} The modified result parameter or a new instance if result was undefined.
	 *
	 * @exception {DeveloperError} minimumRed must be less than or equal to maximumRed.
	 * @exception {DeveloperError} minimumGreen must be less than or equal to maximumGreen.
	 * @exception {DeveloperError} minimumBlue must be less than or equal to maximumBlue.
	 * @exception {DeveloperError} minimumAlpha must be less than or equal to maximumAlpha.
	 *
	 * @example
	 * //Create a completely random color
	 * const color = Color.fromRandom();
	 *
	 * //Create a random shade of yellow.
	 * const color1 = Color.fromRandom({
	 *     red : 1.0,
	 *     green : 1.0,
	 * });
	 *
	 * //Create a random bright color.
	 * const color2 = Color.fromRandom({
	 *     minimumRed : 0.75,
	 *     minimumGreen : 0.75,
	 *     minimumBlue : 0.75,
	 * });
	 */
	static fromRandom(options, result) {
		options = defaultValue(options, defaultValue.EMPTY_OBJECT);
		let red = options.red;
		if (!defined(red)) {
			const minimumRed = defaultValue(options.minimumRed, 0);
			const maximumRed = defaultValue(options.maximumRed, 1.0);
			red = minimumRed + GMath.nextRandomNumber() * (maximumRed - minimumRed);
		}
		let green = options.green;
		if (!defined(green)) {
			const minimumGreen = defaultValue(options.minimumGreen, 0);
			const maximumGreen = defaultValue(options.maximumGreen, 1.0);
			green = minimumGreen + GMath.nextRandomNumber() * (maximumGreen - minimumGreen);
		}
		let blue = options.blue;
		if (!defined(blue)) {
			const minimumBlue = defaultValue(options.minimumBlue, 0);
			const maximumBlue = defaultValue(options.maximumBlue, 1.0);
			blue = minimumBlue + GMath.nextRandomNumber() * (maximumBlue - minimumBlue);
		}
		if (!defined(result)) {
			return new Color(red, green, blue);
		}
		result.red = red;
		result.green = green;
		result.blue = blue;
		return result;
	}
	static fromCssColorString(color, result = new Color()) {
		// Remove all whitespaces from the color string
		color = color.replace(/\s/g, "");
		const namedColor = Color[color.toUpperCase()];
		if (defined(namedColor)) {
			Color.clone(namedColor, result);
			return result;
		}
		let matches = rgbaMatcher.exec(color);
		if (matches !== null) {
			result.red = parseInt(matches[1], 16) / 15;
			result.green = parseInt(matches[2], 16) / 15.0;
			result.blue = parseInt(matches[3], 16) / 15.0;
			return result;
		}
		matches = rrggbbaaMatcher.exec(color);
		if (matches !== null) {
			result.red = parseInt(matches[1], 16) / 255.0;
			result.green = parseInt(matches[2], 16) / 255.0;
			result.blue = parseInt(matches[3], 16) / 255.0;
			return result;
		}
		matches = rgbParenthesesMatcher.exec(color);
		if (matches !== null) {
			result.red = parseFloat(matches[1]) / ("%" === matches[1].substr(-1) ? 100.0 : 255.0);
			result.green = parseFloat(matches[2]) / ("%" === matches[2].substr(-1) ? 100.0 : 255.0);
			result.blue = parseFloat(matches[3]) / ("%" === matches[3].substr(-1) ? 100.0 : 255.0);
			return result;
		}
		matches = hslParenthesesMatcher.exec(color);
		if (matches !== null) {
			return Color.fromHsl(
				parseFloat(matches[1]) / 360.0,
				parseFloat(matches[2]) / 100.0,
				parseFloat(matches[3]) / 100.0,
				result
			);
		}
		result = undefined;
		return result;
	}
	static byteToFloat(value) {
		return value / 255.0;
	}
	static floatToByte(value) {
		return value === 1.0 ? 255.0 : (value * 256.0) | 0;
	}
	static clone(color, result) {
		if (!defined(color)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Color(color.red, color.green, color.blue);
		}
		result.red = color.red;
		result.green = color.green;
		result.blue = color.blue;
		return result;
	}
	static equals(left, right) {
		return (
			left === right || //
			(defined(left) && //
				defined(right) && //
				left.red === right.red && //
				left.green === right.green && //
				left.blue === right.blue)
		);
	}
	/**
	 * @private
	 */
	static equalsArray(color, array, offset) {
		return color.red === array[offset] && color.green === array[offset + 1] && color.blue === array[offset + 2];
	}
}

/**
 * A 2D Cartesian point.
 * @alias Vector2
 * @constructor
 *
 * @param {Number} [x=0.0] The X component.
 * @param {Number} [y=0.0] The Y component.
 *
 */
class Vector2 {
	constructor(x = 0.0, y = 0.0) {
		this.x = x;
		this.y = y;
		this.x = x;
		this.y = y;
	}
	set(x, y) {
		this.x = x;
		this.y = y;
	}
	toArray() {
		return [this.x, this.y];
	}
	clone(result) {
		return Vector2.clone(this, result);
	}
	equals(right) {
		return Vector2.equals(this, right);
	}
	equalsEpsilon(right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return Vector2.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);
	}
	toString() {
		return `(${this.x}, ${this.y})`;
	}
	fromBufferAttribute(attribute, index) {
		this.x = attribute.getX(index);
		this.y = attribute.getY(index);
		return this;
	}
	applyMatrix3(matrix3) {
		const x = this.x,
			y = this.y;
		this.x = matrix3[0] * x + matrix3[3] * y + matrix3[6];
		this.y = matrix3[1] * x + matrix3[4] * y + matrix3[7];
		return this;
	}
	static fromElements(x, y, result) {
		if (!defined(result)) {
			return new Vector2(x, y);
		}
		result.x = x;
		result.y = y;
		return result;
	}
	static clone(cartesian, result) {
		if (!defined(cartesian)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Vector2(cartesian.x, cartesian.y);
		}
		result.x = cartesian.x;
		result.y = cartesian.y;
		return result;
	}
	static maximumComponent(cartesian) {
		return Math.max(cartesian.x, cartesian.y);
	}
	static minimumComponent(cartesian) {
		return Math.min(cartesian.x, cartesian.y);
	}
	static minimumByComponent(first, second, result) {
		result.x = Math.min(first.x, second.x);
		result.y = Math.min(first.y, second.y);
		return result;
	}
	static maximumByComponent(first, second, result) {
		result.x = Math.max(first.x, second.x);
		result.y = Math.max(first.y, second.y);
		return result;
	}
	static clamp(value, min, max, result) {
		const x = GMath.clamp(value.x, min.x, max.x);
		const y = GMath.clamp(value.y, min.y, max.y);
		result.x = x;
		result.y = y;
		return result;
	}
	static magnitudeSquared(cartesian) {
		return cartesian.x * cartesian.x + cartesian.y * cartesian.y;
	}
	static magnitude(cartesian) {
		return Math.sqrt(Vector2.magnitudeSquared(cartesian));
	}
	static distance(left, right) {
		Vector2.subtract(left, right, distanceScratch$2);
		return Vector2.magnitude(distanceScratch$2);
	}
	static distanceSquared(left, right) {
		Vector2.subtract(left, right, distanceScratch$2);
		return Vector2.magnitudeSquared(distanceScratch$2);
	}
	static normalize(cartesian, result) {
		const magnitude = Vector2.magnitude(cartesian);
		result.x = cartesian.x / magnitude;
		result.y = cartesian.y / magnitude;
		//>>includeStart('debug', pragmas.debug);
		if (isNaN(result.x) || isNaN(result.y)) {
			throw new Error("normalized result is not a number");
		}
		//>>includeEnd('debug');
		return result;
	}
	static dot(left, right) {
		return left.x * right.x + left.y * right.y;
	}
	static cross(left, right) {
		return left.x * right.y - left.y * right.x;
	}
	static multiplyComponents(left, right, result) {
		result.x = left.x * right.x;
		result.y = left.y * right.y;
		return result;
	}
	static divideComponents(left, right, result) {
		result.x = left.x / right.x;
		result.y = left.y / right.y;
		return result;
	}
	static add(left, right, result) {
		result.x = left.x + right.x;
		result.y = left.y + right.y;
		return result;
	}
	static subtract(left, right, result) {
		result.x = left.x - right.x;
		result.y = left.y - right.y;
		return result;
	}
	static multiplyByScalar(cartesian, scalar, result) {
		result.x = cartesian.x * scalar;
		result.y = cartesian.y * scalar;
		return result;
	}
	static divideByScalar(cartesian, scalar, result) {
		result.x = cartesian.x / scalar;
		result.y = cartesian.y / scalar;
		return result;
	}
	static negate(cartesian, result) {
		result.x = -cartesian.x;
		result.y = -cartesian.y;
		return result;
	}
	static abs(cartesian, result) {
		result.x = Math.abs(cartesian.x);
		result.y = Math.abs(cartesian.y);
		return result;
	}
	static lerp(start, end, t, result) {
		Vector2.multiplyByScalar(end, t, lerpScratch$3);
		result = Vector2.multiplyByScalar(start, 1.0 - t, result);
		return Vector2.add(lerpScratch$3, result, result);
	}
	static angleBetween(left, right) {
		Vector2.normalize(left, angleBetweenScratch$1);
		Vector2.normalize(right, angleBetweenScratch2$1);
		return GMath.acosClamped(Vector2.dot(angleBetweenScratch$1, angleBetweenScratch2$1));
	}
	static mostOrthogonalAxis(cartesian, result) {
		const f = Vector2.normalize(cartesian, mostOrthogonalAxisScratch$1);
		Vector2.abs(f, f);
		if (f.x <= f.y) {
			result = Vector2.clone(Vector2.UNIT_X, result);
		} else {
			result = Vector2.clone(Vector2.UNIT_Y, result);
		}
		return result;
	}
	static equals(left, right) {
		return left === right || (defined(left) && defined(right) && left.x === right.x && left.y === right.y);
	}
	/**
	 * @private
	 */
	static equalsArray(cartesian, array, offset) {
		return cartesian.x === array[offset] && cartesian.y === array[offset + 1];
	}
	static equalsEpsilon(left, right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				GMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon))
		);
	}
}
Vector2.ZERO = Object.freeze(new Vector2(0.0, 0.0));
Vector2.ONE = Object.freeze(new Vector2(1.0, 1.0));
Vector2.UNIT_X = Object.freeze(new Vector2(1.0, 0.0));
Vector2.UNIT_Y = Object.freeze(new Vector2(0.0, 1.0));
const distanceScratch$2 = new Vector2();
const lerpScratch$3 = new Vector2();
const angleBetweenScratch$1 = new Vector2();
const angleBetweenScratch2$1 = new Vector2();
const mostOrthogonalAxisScratch$1 = new Vector2();

/**
 * A 2x2 matrix, indexable as a column-major order array.
 * @param {Number} [column0Row0=0.0] The value for column 0, row 0.
 * @param {Number} [column1Row0=0.0] The value for column 1, row 0.
 * @param {Number} [column0Row1=0.0] The value for column 0, row 1.
 * @param {Number} [column1Row1=0.0] The value for column 1, row 1.
 */
class Matrix2 {
	constructor(column0Row0 = 0, column1Row0 = 0, column0Row1 = 0, column1Row1 = 0) {
		this[0] = column0Row0;
		this[1] = column0Row1;
		this[2] = column1Row0;
		this[3] = column1Row1;
	}
	static clone(matrix, result) {
		if (!defined(matrix)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Matrix2(matrix[0], matrix[2], matrix[1], matrix[3]);
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		return result;
	}
	static fromColumnMajorArray(values, result) {
		return Matrix2.clone(values, result);
	}
	static fromRowMajorArray(values, result) {
		if (!defined(result)) {
			return new Matrix2(values[0], values[1], values[2], values[3]);
		}
		result[0] = values[0];
		result[1] = values[2];
		result[2] = values[1];
		result[3] = values[3];
		return result;
	}
	static fromScale(scale, result) {
		if (!defined(result)) {
			return new Matrix2(scale.x, 0.0, 0.0, scale.y);
		}
		result[0] = scale.x;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = scale.y;
		return result;
	}
	static fromRotation(angle, result) {
		const cosAngle = Math.cos(angle);
		const sinAngle = Math.sin(angle);
		if (!defined(result)) {
			return new Matrix2(cosAngle, -sinAngle, sinAngle, cosAngle);
		}
		result[0] = cosAngle;
		result[1] = sinAngle;
		result[2] = -sinAngle;
		result[3] = cosAngle;
		return result;
	}
	toArray() {
		const result = [];
		Matrix2.toArray(this, result);
		return result;
	}
	static toArray(matrix, result) {
		if (!defined(result)) {
			return [matrix[0], matrix[1], matrix[2], matrix[3]];
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		return result;
	}
	static getElementIndex(column, row) {
		return column * 2 + row;
	}
	static getColumn(matrix, index, result) {
		const startIndex = index * 2;
		const x = matrix[startIndex];
		const y = matrix[startIndex + 1];
		result.x = x;
		result.y = y;
		return result;
	}
	static setColumn(matrix, index, cartesian, result) {
		result = Matrix2.clone(matrix, result);
		const startIndex = index * 2;
		result[startIndex] = cartesian.x;
		result[startIndex + 1] = cartesian.y;
		return result;
	}
	static getRow(matrix, index, result) {
		const x = matrix[index];
		const y = matrix[index + 2];
		result.x = x;
		result.y = y;
		return result;
	}
	static setRow(matrix, index, cartesian, result) {
		result = Matrix2.clone(matrix, result);
		result[index] = cartesian.x;
		result[index + 2] = cartesian.y;
		return result;
	}
	static setScale(matrix, scale, result) {
		const existingScale = Matrix2.getScale(matrix, scaleScratch1$2);
		const scaleRatioX = scale.x / existingScale.x;
		const scaleRatioY = scale.y / existingScale.y;
		result[0] = matrix[0] * scaleRatioX;
		result[1] = matrix[1] * scaleRatioX;
		result[2] = matrix[2] * scaleRatioY;
		result[3] = matrix[3] * scaleRatioY;
		return result;
	}
	static getScale(matrix, result) {
		result.x = Vector2.magnitude(Vector2.fromElements(matrix[0], matrix[1], scratchColumn$2));
		result.y = Vector2.magnitude(Vector2.fromElements(matrix[2], matrix[3], scratchColumn$2));
		return result;
	}
	static getMaximumScale(matrix) {
		Matrix2.getScale(matrix, scaleScratch3$2);
		return Vector2.maximumComponent(scaleScratch3$2);
	}
	static setRotation(matrix, rotation, result) {
		const scale = Matrix2.getScale(matrix, scaleScratch4$2);
		result[0] = rotation[0] * scale.x;
		result[1] = rotation[1] * scale.x;
		result[2] = rotation[2] * scale.y;
		result[3] = rotation[3] * scale.y;
		return result;
	}
	static getRotation(matrix, result) {
		const scale = Matrix2.getScale(matrix, scaleScratch5$2);
		result[0] = matrix[0] / scale.x;
		result[1] = matrix[1] / scale.x;
		result[2] = matrix[2] / scale.y;
		result[3] = matrix[3] / scale.y;
		return result;
	}
	static multiply(left, right, result) {
		const column0Row0 = left[0] * right[0] + left[2] * right[1];
		const column1Row0 = left[0] * right[2] + left[2] * right[3];
		const column0Row1 = left[1] * right[0] + left[3] * right[1];
		const column1Row1 = left[1] * right[2] + left[3] * right[3];
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column1Row0;
		result[3] = column1Row1;
		return result;
	}
	static add(left, right, result) {
		result[0] = left[0] + right[0];
		result[1] = left[1] + right[1];
		result[2] = left[2] + right[2];
		result[3] = left[3] + right[3];
		return result;
	}
	static subtract(left, right, result) {
		result[0] = left[0] - right[0];
		result[1] = left[1] - right[1];
		result[2] = left[2] - right[2];
		result[3] = left[3] - right[3];
		return result;
	}
	static multiplyByVector(matrix, cartesian, result) {
		const x = matrix[0] * cartesian.x + matrix[2] * cartesian.y;
		const y = matrix[1] * cartesian.x + matrix[3] * cartesian.y;
		result.x = x;
		result.y = y;
		return result;
	}
	static multiplyByScalar(matrix, scalar, result) {
		result[0] = matrix[0] * scalar;
		result[1] = matrix[1] * scalar;
		result[2] = matrix[2] * scalar;
		result[3] = matrix[3] * scalar;
		return result;
	}
	static multiplyByScale(matrix, scale, result) {
		result[0] = matrix[0] * scale.x;
		result[1] = matrix[1] * scale.x;
		result[2] = matrix[2] * scale.y;
		result[3] = matrix[3] * scale.y;
		return result;
	}
	static negate(matrix, result) {
		result[0] = -matrix[0];
		result[1] = -matrix[1];
		result[2] = -matrix[2];
		result[3] = -matrix[3];
		return result;
	}
	static transpose(matrix, result) {
		const column0Row0 = matrix[0];
		const column0Row1 = matrix[2];
		const column1Row0 = matrix[1];
		const column1Row1 = matrix[3];
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column1Row0;
		result[3] = column1Row1;
		return result;
	}
	static abs(matrix, result) {
		result[0] = Math.abs(matrix[0]);
		result[1] = Math.abs(matrix[1]);
		result[2] = Math.abs(matrix[2]);
		result[3] = Math.abs(matrix[3]);
		return result;
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				left[0] === right[0] &&
				left[1] === right[1] &&
				left[2] === right[2] &&
				left[3] === right[3])
		);
	}
	/**
	 * @private
	 */
	static equalsArray(matrix, array, offset) {
		return (
			matrix[0] === array[offset] &&
			matrix[1] === array[offset + 1] &&
			matrix[2] === array[offset + 2] &&
			matrix[3] === array[offset + 3]
		);
	}
	static equalsEpsilon(left, right, epsilon = 0) {
		epsilon = defaultValue(epsilon, 0);
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				Math.abs(left[0] - right[0]) <= epsilon &&
				Math.abs(left[1] - right[1]) <= epsilon &&
				Math.abs(left[2] - right[2]) <= epsilon &&
				Math.abs(left[3] - right[3]) <= epsilon)
		);
	}
	clone(result) {
		return Matrix2.clone(this, result);
	}
	equals(right) {
		return Matrix2.equals(this, right);
	}
	equalsEpsilon(right, epsilon = 0) {
		return Matrix2.equalsEpsilon(this, right, epsilon);
	}
	toString() {
		return `(${this[0]}, ${this[2]})\n` + `(${this[1]}, ${this[3]})`;
	}
}
Matrix2.IDENTITY = Object.freeze(new Matrix2(1.0, 0.0, 0.0, 1.0));
Matrix2.ZERO = Object.freeze(new Matrix2(0.0, 0.0, 0.0, 0.0));
const scaleScratch1$2 = new Vector2();
new Vector2();
const scaleScratch3$2 = new Vector2();
const scaleScratch4$2 = new Vector2();
const scratchColumn$2 = new Vector2();
const scaleScratch5$2 = new Vector2();

class Vector3 {
	constructor(x = 0, y = 0, z = 0) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	set(x, y, z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	toArray() {
		return [this.x, this.y, this.z];
	}
	copy(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		return this;
	}
	lerp(end, t) {
		Vector3.lerp(this, end, t, this);
		return this;
	}
	add(v) {
		Vector3.add(this, v, this);
		return this;
	}
	addScaledVector(v, s) {
		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		return this;
	}
	subtract(v) {
		Vector3.subtract(this, v, this);
		return this;
	}
	applyQuaternion(q) {
		const x = this.x,
			y = this.y,
			z = this.z;
		const qx = q.x,
			qy = q.y,
			qz = q.z,
			qw = q.w;
		// calculate quat * vector
		const ix = qw * x + qy * z - qz * y;
		const iy = qw * y + qz * x - qx * z;
		const iz = qw * z + qx * y - qy * x;
		const iw = -qx * x - qy * y - qz * z;
		// calculate result * inverse quat
		this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
		this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
		this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
		return this;
	}
	setFromMatrixColumn(m, index) {
		return this.fromArray(m, index * 4);
	}
	fromArray(array, offset = 0) {
		this.x = array[offset];
		this.y = array[offset + 1];
		this.z = array[offset + 2];
		return this;
	}
	multiplyByScalar(scale) {
		Vector3.multiplyByScalar(this, scale, this);
		return this;
	}
	clone() {
		return Vector3.clone(this, new Vector3());
	}
	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	applyMatrix4(matrix) {
		const x = this.x,
			y = this.y,
			z = this.z;
		const e = matrix;
		const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
		this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
		this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
		this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
		return this;
	}
	applyMatrix3(matrix) {
		let x = this.x,
			y = this.y,
			z = this.z;
		this.x = x * matrix[0] + y * matrix[3] + z * matrix[6];
		this.y = x * matrix[1] + y * matrix[4] + z * matrix[7];
		this.z = x * matrix[2] + y * matrix[5] + z * matrix[8];
		return this;
	}
	transformDirection(matrix) {
		const x = this.x,
			y = this.y,
			z = this.z;
		const e = matrix;
		this.x = e[0] * x + e[4] * y + e[8] * z;
		this.y = e[1] * x + e[5] * y + e[9] * z;
		this.z = e[2] * x + e[6] * y + e[10] * z;
		return this.normalize();
	}
	normalize() {
		Vector3.normalize(this, this);
		return this;
	}
	equals(right) {
		return Vector3.equals(this, right);
	}
	equalsEpsilon(right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return Vector3.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);
	}
	toString() {
		return `(${this.x}, ${this.y}, ${this.z})`;
	}
	fromBufferAttribute(attribute, index) {
		this.x = attribute.getX(index);
		this.y = attribute.getY(index);
		this.z = attribute.getZ(index);
		return this;
	}
	static fromVector4(vec4, result) {
		result.x = vec4.x;
		result.y = vec4.y;
		result.z = vec4.z;
		return result;
	}
	static fromSpherical(spherical, result) {
		if (!defined(result)) {
			result = new Vector3();
		}
		const { phi, radius, theta } = spherical;
		const sinPhiRadius = Math.sin(phi) * radius;
		result.x = sinPhiRadius * Math.sin(theta);
		result.y = Math.cos(phi) * radius;
		result.z = sinPhiRadius * Math.cos(theta);
		return result;
	}
	static fromElements(x, y, z, result) {
		if (!defined(result)) {
			return new Vector3(x, y, z);
		}
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static clone(cartesian, result = new Vector3()) {
		if (!defined(cartesian)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Vector3(cartesian.x, cartesian.y, cartesian.z);
		}
		result.x = cartesian.x;
		result.y = cartesian.y;
		result.z = cartesian.z;
		return result;
	}
	static maximumComponent(cartesian) {
		return Math.max(cartesian.x, cartesian.y, cartesian.z);
	}
	static minimumComponent(cartesian) {
		return Math.min(cartesian.x, cartesian.y, cartesian.z);
	}
	static minimumByComponent(first, second, result) {
		result.x = Math.min(first.x, second.x);
		result.y = Math.min(first.y, second.y);
		result.z = Math.min(first.z, second.z);
		return result;
	}
	static maximumByComponent(first, second, result) {
		result.x = Math.max(first.x, second.x);
		result.y = Math.max(first.y, second.y);
		result.z = Math.max(first.z, second.z);
		return result;
	}
	static clamp(value, min, max, result) {
		const x = GMath.clamp(value.x, min.x, max.x);
		const y = GMath.clamp(value.y, min.y, max.y);
		const z = GMath.clamp(value.z, min.z, max.z);
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static magnitudeSquared(cartesian) {
		return cartesian.x * cartesian.x + cartesian.y * cartesian.y + cartesian.z * cartesian.z;
	}
	static magnitude(cartesian) {
		return Math.sqrt(Vector3.magnitudeSquared(cartesian));
	}
	static distance(left, right) {
		Vector3.subtract(left, right, distanceScratch$1);
		return Vector3.magnitude(distanceScratch$1);
	}
	static distanceSquared(left, right) {
		Vector3.subtract(left, right, distanceScratch$1);
		return Vector3.magnitudeSquared(distanceScratch$1);
	}
	static normalize(cartesian, result) {
		const magnitude = Vector3.magnitude(cartesian);
		result.x = cartesian.x / magnitude;
		result.y = cartesian.y / magnitude;
		result.z = cartesian.z / magnitude;
		if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z)) {
			throw new Error("normalized result is not a number");
		}
		return result;
	}
	static dot(left, right) {
		return left.x * right.x + left.y * right.y + left.z * right.z;
	}
	static multiplyComponents(left, right, result) {
		result.x = left.x * right.x;
		result.y = left.y * right.y;
		result.z = left.z * right.z;
		return result;
	}
	static divideComponents(left, right, result) {
		result.x = left.x / right.x;
		result.y = left.y / right.y;
		result.z = left.z / right.z;
		return result;
	}
	static add(left, right, result) {
		result.x = left.x + right.x;
		result.y = left.y + right.y;
		result.z = left.z + right.z;
		return result;
	}
	static subtract(left, right, result) {
		result.x = left.x - right.x;
		result.y = left.y - right.y;
		result.z = left.z - right.z;
		return result;
	}
	static multiplyByScalar(cartesian, scalar, result) {
		result.x = cartesian.x * scalar;
		result.y = cartesian.y * scalar;
		result.z = cartesian.z * scalar;
		return result;
	}
	static divideByScalar(cartesian, scalar, result) {
		result.x = cartesian.x / scalar;
		result.y = cartesian.y / scalar;
		result.z = cartesian.z / scalar;
		return result;
	}
	static negate(cartesian, result) {
		result.x = -cartesian.x;
		result.y = -cartesian.y;
		result.z = -cartesian.z;
		return result;
	}
	static abs(cartesian, result) {
		result.x = Math.abs(cartesian.x);
		result.y = Math.abs(cartesian.y);
		result.z = Math.abs(cartesian.z);
		return result;
	}
	static lerp(start, end, t, result) {
		Vector3.multiplyByScalar(end, t, lerpScratch$2);
		result = Vector3.multiplyByScalar(start, 1.0 - t, result);
		return Vector3.add(lerpScratch$2, result, result);
	}
	static angleBetween(left, right) {
		Vector3.normalize(left, angleBetweenScratch);
		Vector3.normalize(right, angleBetweenScratch2);
		const cosine = Vector3.dot(angleBetweenScratch, angleBetweenScratch2);
		const sine = Vector3.magnitude(Vector3.cross(angleBetweenScratch, angleBetweenScratch2, angleBetweenScratch));
		return Math.atan2(sine, cosine);
	}
	static mostOrthogonalAxis(cartesian, result) {
		const f = Vector3.normalize(cartesian, mostOrthogonalAxisScratch);
		Vector3.abs(f, f);
		if (f.x <= f.y) {
			if (f.x <= f.z) {
				result = Vector3.clone(Vector3.UNIT_X, result);
			} else {
				result = Vector3.clone(Vector3.UNIT_Z, result);
			}
		} else if (f.y <= f.z) {
			result = Vector3.clone(Vector3.UNIT_Y, result);
		} else {
			result = Vector3.clone(Vector3.UNIT_Z, result);
		}
		return result;
	}
	static projectVector(a, b, result) {
		const scalar = Vector3.dot(a, b) / Vector3.dot(b, b);
		return Vector3.multiplyByScalar(b, scalar, result);
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) && defined(right) && left.x === right.x && left.y === right.y && left.z === right.z)
		);
	}
	/**
	 * @private
	 */
	static equalsArray(cartesian, array, offset) {
		return cartesian.x === array[offset] && cartesian.y === array[offset + 1] && cartesian.z === array[offset + 2];
	}
	static equalsEpsilon(left, right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				GMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon))
		);
	}
	static cross(left, right, result) {
		const leftX = left.x;
		const leftY = left.y;
		const leftZ = left.z;
		const rightX = right.x;
		const rightY = right.y;
		const rightZ = right.z;
		const x = leftY * rightZ - leftZ * rightY;
		const y = leftZ * rightX - leftX * rightZ;
		const z = leftX * rightY - leftY * rightX;
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
}
Vector3.ZERO = Object.freeze(new Vector3(0.0, 0.0, 0.0));
Vector3.ONE = Object.freeze(new Vector3(1.0, 1.0, 1.0));
Vector3.UNIT_X = Object.freeze(new Vector3(1.0, 0.0, 0.0));
Vector3.UNIT_Y = Object.freeze(new Vector3(0.0, 1.0, 0.0));
Vector3.UNIT_Z = Object.freeze(new Vector3(0.0, 0.0, 1.0));
Vector3.midpoint = function (left, right, result) {
	result.x = (left.x + right.x) * 0.5;
	result.y = (left.y + right.y) * 0.5;
	result.z = (left.z + right.z) * 0.5;
	return result;
};
const distanceScratch$1 = new Vector3();
const lerpScratch$2 = new Vector3();
const angleBetweenScratch = new Vector3();
const angleBetweenScratch2 = new Vector3();
const mostOrthogonalAxisScratch = new Vector3();

/**
 * A 3x3 matrix, indexable as a column-major order array.
 * @param {Number} [column0Row0=0.0] The value for column 0, row 0.
 * @param {Number} [column1Row0=0.0] The value for column 1, row 0.
 * @param {Number} [column2Row0=0.0] The value for column 2, row 0.
 * @param {Number} [column0Row1=0.0] The value for column 0, row 1.
 * @param {Number} [column1Row1=0.0] The value for column 1, row 1.
 * @param {Number} [column2Row1=0.0] The value for column 2, row 1.
 * @param {Number} [column0Row2=0.0] The value for column 0, row 2.
 * @param {Number} [column1Row2=0.0] The value for column 1, row 2.
 * @param {Number} [column2Row2=0.0] The value for column 2, row 2.
 */
class Matrix3 {
	constructor(
		column0Row0 = 0,
		column1Row0 = 0,
		column2Row0 = 0,
		column0Row1 = 0,
		column1Row1 = 0,
		column2Row1 = 0,
		column0Row2 = 0,
		column1Row2 = 0,
		column2Row2 = 0
	) {
		this[0] = column0Row0;
		this[1] = column0Row1;
		this[2] = column0Row2;
		this[3] = column1Row0;
		this[4] = column1Row1;
		this[5] = column1Row2;
		this[6] = column2Row0;
		this[7] = column2Row1;
		this[8] = column2Row2;
	}
	setFromMatrix4(matrix) {
		this[0] = matrix[0];
		this[1] = matrix[1];
		this[2] = matrix[2];
		this[3] = matrix[4];
		this[4] = matrix[5];
		this[5] = matrix[2];
		this[6] = matrix[8];
		this[7] = matrix[9];
		this[8] = matrix[10];
		return this;
	}
	getNormalMatrix(matrix4) {
		this.setFromMatrix4(matrix4);
		Matrix3.inverse(this, this);
		Matrix3.transpose(this, this);
		return this;
	}
	static clone(matrix, result) {
		if (!defined(matrix)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Matrix3(
				matrix[0],
				matrix[3],
				matrix[6],
				matrix[1],
				matrix[4],
				matrix[7],
				matrix[2],
				matrix[5],
				matrix[8]
			);
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		return result;
	}
	static fromColumnMajorArray(values, result) {
		if (!defined(result)) {
			result = new Matrix3();
		}
		return Matrix3.clone(values, result);
	}
	static fromRowMajorArray(values, result) {
		if (!defined(result)) {
			return new Matrix3(
				values[0],
				values[1],
				values[2],
				values[3],
				values[4],
				values[5],
				values[6],
				values[7],
				values[8]
			);
		}
		result[0] = values[0];
		result[1] = values[3];
		result[2] = values[6];
		result[3] = values[1];
		result[4] = values[4];
		result[5] = values[7];
		result[6] = values[2];
		result[7] = values[5];
		result[8] = values[8];
		return result;
	}
	static fromQuaternion(quaternion, result) {
		const x2 = quaternion.x * quaternion.x;
		const xy = quaternion.x * quaternion.y;
		const xz = quaternion.x * quaternion.z;
		const xw = quaternion.x * quaternion.w;
		const y2 = quaternion.y * quaternion.y;
		const yz = quaternion.y * quaternion.z;
		const yw = quaternion.y * quaternion.w;
		const z2 = quaternion.z * quaternion.z;
		const zw = quaternion.z * quaternion.w;
		const w2 = quaternion.w * quaternion.w;
		const m00 = x2 - y2 - z2 + w2;
		const m01 = 2.0 * (xy - zw);
		const m02 = 2.0 * (xz + yw);
		const m10 = 2.0 * (xy + zw);
		const m11 = -x2 + y2 - z2 + w2;
		const m12 = 2.0 * (yz - xw);
		const m20 = 2.0 * (xz - yw);
		const m21 = 2.0 * (yz + xw);
		const m22 = -x2 - y2 + z2 + w2;
		if (!defined(result)) {
			return new Matrix3(m00, m01, m02, m10, m11, m12, m20, m21, m22);
		}
		result[0] = m00;
		result[1] = m10;
		result[2] = m20;
		result[3] = m01;
		result[4] = m11;
		result[5] = m21;
		result[6] = m02;
		result[7] = m12;
		result[8] = m22;
		return result;
	}
	static fromScale(scale, result) {
		if (!defined(result)) {
			return new Matrix3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);
		}
		result[0] = scale.x;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = scale.y;
		result[5] = 0.0;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = scale.z;
		return result;
	}
	static fromRotationX(angle, result) {
		const cosAngle = Math.cos(angle);
		const sinAngle = Math.sin(angle);
		if (!defined(result)) {
			return new Matrix3(1.0, 0.0, 0.0, 0.0, cosAngle, -sinAngle, 0.0, sinAngle, cosAngle);
		}
		result[0] = 1.0;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = cosAngle;
		result[5] = sinAngle;
		result[6] = 0.0;
		result[7] = -sinAngle;
		result[8] = cosAngle;
		return result;
	}
	static fromRotationY(angle, result) {
		const cosAngle = Math.cos(angle);
		const sinAngle = Math.sin(angle);
		if (!defined(result)) {
			return new Matrix3(cosAngle, 0.0, sinAngle, 0.0, 1.0, 0.0, -sinAngle, 0.0, cosAngle);
		}
		result[0] = cosAngle;
		result[1] = 0.0;
		result[2] = -sinAngle;
		result[3] = 0.0;
		result[4] = 1.0;
		result[5] = 0.0;
		result[6] = sinAngle;
		result[7] = 0.0;
		result[8] = cosAngle;
		return result;
	}
	static fromRotationZstatic(angle, result) {
		const cosAngle = Math.cos(angle);
		const sinAngle = Math.sin(angle);
		if (!defined(result)) {
			return new Matrix3(cosAngle, -sinAngle, 0.0, sinAngle, cosAngle, 0.0, 0.0, 0.0, 1.0);
		}
		result[0] = cosAngle;
		result[1] = sinAngle;
		result[2] = 0.0;
		result[3] = -sinAngle;
		result[4] = cosAngle;
		result[5] = 0.0;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = 1.0;
		return result;
	}
	toArray() {
		const result = [];
		Matrix3.toArray(this, result);
		return result;
	}
	static toArray(matrix, result) {
		if (!defined(result)) {
			return [matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5], matrix[6], matrix[7], matrix[8]];
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		return result;
	}
	static getElementIndex(column, row) {
		return column * 3 + row;
	}
	static getColumn(matrix, index, result) {
		const startIndex = index * 3;
		const x = matrix[startIndex];
		const y = matrix[startIndex + 1];
		const z = matrix[startIndex + 2];
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static setColumn(matrix, index, cartesian, result) {
		result = Matrix3.clone(matrix, result);
		const startIndex = index * 3;
		result[startIndex] = cartesian.x;
		result[startIndex + 1] = cartesian.y;
		result[startIndex + 2] = cartesian.z;
		return result;
	}
	static getRow(matrix, index, result) {
		const x = matrix[index];
		const y = matrix[index + 3];
		const z = matrix[index + 6];
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static setRow(matrix, index, cartesian, result) {
		result = Matrix3.clone(matrix, result);
		result[index] = cartesian.x;
		result[index + 3] = cartesian.y;
		result[index + 6] = cartesian.z;
		return result;
	}
	static setScale(matrix, scale, result) {
		const existingScale = Matrix3.getScale(matrix, scaleScratch1$1);
		const scaleRatioX = scale.x / existingScale.x;
		const scaleRatioY = scale.y / existingScale.y;
		const scaleRatioZ = scale.z / existingScale.z;
		result[0] = matrix[0] * scaleRatioX;
		result[1] = matrix[1] * scaleRatioX;
		result[2] = matrix[2] * scaleRatioX;
		result[3] = matrix[3] * scaleRatioY;
		result[4] = matrix[4] * scaleRatioY;
		result[5] = matrix[5] * scaleRatioY;
		result[6] = matrix[6] * scaleRatioZ;
		result[7] = matrix[7] * scaleRatioZ;
		result[8] = matrix[8] * scaleRatioZ;
		return result;
	}
	static getScale(matrix, result) {
		result.x = Vector3.magnitude(Vector3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn$1));
		result.y = Vector3.magnitude(Vector3.fromElements(matrix[3], matrix[4], matrix[5], scratchColumn$1));
		result.z = Vector3.magnitude(Vector3.fromElements(matrix[6], matrix[7], matrix[8], scratchColumn$1));
		return result;
	}
	static getMaximumScale(matrix) {
		Matrix3.getScale(matrix, scaleScratch3$1);
		return Vector3.maximumComponent(scaleScratch3$1);
	}
	static setRotation(matrix, rotation, result) {
		const scale = Matrix3.getScale(matrix, scaleScratch4$1);
		result[0] = rotation[0] * scale.x;
		result[1] = rotation[1] * scale.x;
		result[2] = rotation[2] * scale.x;
		result[3] = rotation[3] * scale.y;
		result[4] = rotation[4] * scale.y;
		result[5] = rotation[5] * scale.y;
		result[6] = rotation[6] * scale.z;
		result[7] = rotation[7] * scale.z;
		result[8] = rotation[8] * scale.z;
		return result;
	}
	static getRotation(matrix, result) {
		const scale = Matrix3.getScale(matrix, scaleScratch5$1);
		result[0] = matrix[0] / scale.x;
		result[1] = matrix[1] / scale.x;
		result[2] = matrix[2] / scale.x;
		result[3] = matrix[3] / scale.y;
		result[4] = matrix[4] / scale.y;
		result[5] = matrix[5] / scale.y;
		result[6] = matrix[6] / scale.z;
		result[7] = matrix[7] / scale.z;
		result[8] = matrix[8] / scale.z;
		return result;
	}
	static multiply(left, right, result) {
		const column0Row0 = left[0] * right[0] + left[3] * right[1] + left[6] * right[2];
		const column0Row1 = left[1] * right[0] + left[4] * right[1] + left[7] * right[2];
		const column0Row2 = left[2] * right[0] + left[5] * right[1] + left[8] * right[2];
		const column1Row0 = left[0] * right[3] + left[3] * right[4] + left[6] * right[5];
		const column1Row1 = left[1] * right[3] + left[4] * right[4] + left[7] * right[5];
		const column1Row2 = left[2] * right[3] + left[5] * right[4] + left[8] * right[5];
		const column2Row0 = left[0] * right[6] + left[3] * right[7] + left[6] * right[8];
		const column2Row1 = left[1] * right[6] + left[4] * right[7] + left[7] * right[8];
		const column2Row2 = left[2] * right[6] + left[5] * right[7] + left[8] * right[8];
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = column1Row0;
		result[4] = column1Row1;
		result[5] = column1Row2;
		result[6] = column2Row0;
		result[7] = column2Row1;
		result[8] = column2Row2;
		return result;
	}
	static add(left, right, result) {
		result[0] = left[0] + right[0];
		result[1] = left[1] + right[1];
		result[2] = left[2] + right[2];
		result[3] = left[3] + right[3];
		result[4] = left[4] + right[4];
		result[5] = left[5] + right[5];
		result[6] = left[6] + right[6];
		result[7] = left[7] + right[7];
		result[8] = left[8] + right[8];
		return result;
	}
	static subtract(left, right, result) {
		result[0] = left[0] - right[0];
		result[1] = left[1] - right[1];
		result[2] = left[2] - right[2];
		result[3] = left[3] - right[3];
		result[4] = left[4] - right[4];
		result[5] = left[5] - right[5];
		result[6] = left[6] - right[6];
		result[7] = left[7] - right[7];
		result[8] = left[8] - right[8];
		return result;
	}
	static multiplyByVector(matrix, cartesian, result) {
		const vX = cartesian.x;
		const vY = cartesian.y;
		const vZ = cartesian.z;
		const x = matrix[0] * vX + matrix[3] * vY + matrix[6] * vZ;
		const y = matrix[1] * vX + matrix[4] * vY + matrix[7] * vZ;
		const z = matrix[2] * vX + matrix[5] * vY + matrix[8] * vZ;
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static multiplyByScalar(matrix, scalar, result) {
		result[0] = matrix[0] * scalar;
		result[1] = matrix[1] * scalar;
		result[2] = matrix[2] * scalar;
		result[3] = matrix[3] * scalar;
		result[4] = matrix[4] * scalar;
		result[5] = matrix[5] * scalar;
		result[6] = matrix[6] * scalar;
		result[7] = matrix[7] * scalar;
		result[8] = matrix[8] * scalar;
		return result;
	}
	static multiplyByScale(matrix, scale, result) {
		result[0] = matrix[0] * scale.x;
		result[1] = matrix[1] * scale.x;
		result[2] = matrix[2] * scale.x;
		result[3] = matrix[3] * scale.y;
		result[4] = matrix[4] * scale.y;
		result[5] = matrix[5] * scale.y;
		result[6] = matrix[6] * scale.z;
		result[7] = matrix[7] * scale.z;
		result[8] = matrix[8] * scale.z;
		return result;
	}
	static negate(matrix, result) {
		result[0] = -matrix[0];
		result[1] = -matrix[1];
		result[2] = -matrix[2];
		result[3] = -matrix[3];
		result[4] = -matrix[4];
		result[5] = -matrix[5];
		result[6] = -matrix[6];
		result[7] = -matrix[7];
		result[8] = -matrix[8];
		return result;
	}
	static transpose(matrix, result) {
		const column0Row0 = matrix[0];
		const column0Row1 = matrix[3];
		const column0Row2 = matrix[6];
		const column1Row0 = matrix[1];
		const column1Row1 = matrix[4];
		const column1Row2 = matrix[7];
		const column2Row0 = matrix[2];
		const column2Row1 = matrix[5];
		const column2Row2 = matrix[8];
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = column1Row0;
		result[4] = column1Row1;
		result[5] = column1Row2;
		result[6] = column2Row0;
		result[7] = column2Row1;
		result[8] = column2Row2;
		return result;
	}
	static abs(matrix, result) {
		result[0] = Math.abs(matrix[0]);
		result[1] = Math.abs(matrix[1]);
		result[2] = Math.abs(matrix[2]);
		result[3] = Math.abs(matrix[3]);
		result[4] = Math.abs(matrix[4]);
		result[5] = Math.abs(matrix[5]);
		result[6] = Math.abs(matrix[6]);
		result[7] = Math.abs(matrix[7]);
		result[8] = Math.abs(matrix[8]);
		return result;
	}
	static determinant(matrix) {
		const m11 = matrix[0];
		const m21 = matrix[3];
		const m31 = matrix[6];
		const m12 = matrix[1];
		const m22 = matrix[4];
		const m32 = matrix[7];
		const m13 = matrix[2];
		const m23 = matrix[5];
		const m33 = matrix[8];
		return m11 * (m22 * m33 - m23 * m32) + m12 * (m23 * m31 - m21 * m33) + m13 * (m21 * m32 - m22 * m31);
	}
	static inverse(matrix, result) {
		const m11 = matrix[0];
		const m21 = matrix[1];
		const m31 = matrix[2];
		const m12 = matrix[3];
		const m22 = matrix[4];
		const m32 = matrix[5];
		const m13 = matrix[6];
		const m23 = matrix[7];
		const m33 = matrix[8];
		const determinant = Matrix3.determinant(matrix);
		//>>includeStart('debug', pragmas.debug);
		if (Math.abs(determinant) <= GMath.EPSILON15) {
			throw new Error("matrix is not invertible");
		}
		//>>includeEnd('debug');
		result[0] = m22 * m33 - m23 * m32;
		result[1] = m23 * m31 - m21 * m33;
		result[2] = m21 * m32 - m22 * m31;
		result[3] = m13 * m32 - m12 * m33;
		result[4] = m11 * m33 - m13 * m31;
		result[5] = m12 * m31 - m11 * m32;
		result[6] = m12 * m23 - m13 * m22;
		result[7] = m13 * m21 - m11 * m23;
		result[8] = m11 * m22 - m12 * m21;
		const scale = 1.0 / determinant;
		return Matrix3.multiplyByScalar(result, scale, result);
	}
	static inverseTranspose(matrix, result) {
		return Matrix3.inverse(Matrix3.transpose(matrix, scratchTransposeMatrix$1), result);
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				left[0] === right[0] &&
				left[1] === right[1] &&
				left[2] === right[2] &&
				left[3] === right[3] &&
				left[4] === right[4] &&
				left[5] === right[5] &&
				left[6] === right[6] &&
				left[7] === right[7] &&
				left[8] === right[8])
		);
	}
	static equalsEpsilon(left, right, epsilon = 0) {
		epsilon = defaultValue(epsilon, 0);
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				Math.abs(left[0] - right[0]) <= epsilon &&
				Math.abs(left[1] - right[1]) <= epsilon &&
				Math.abs(left[2] - right[2]) <= epsilon &&
				Math.abs(left[3] - right[3]) <= epsilon &&
				Math.abs(left[4] - right[4]) <= epsilon &&
				Math.abs(left[5] - right[5]) <= epsilon &&
				Math.abs(left[6] - right[6]) <= epsilon &&
				Math.abs(left[7] - right[7]) <= epsilon &&
				Math.abs(left[8] - right[8]) <= epsilon)
		);
	}
	clone(result) {
		return Matrix3.clone(this, result);
	}
	equals(right) {
		return Matrix3.equals(this, right);
	}
	/**
	 * @private
	 */
	equalsArray(matrix, array, offset) {
		return (
			matrix[0] === array[offset] &&
			matrix[1] === array[offset + 1] &&
			matrix[2] === array[offset + 2] &&
			matrix[3] === array[offset + 3] &&
			matrix[4] === array[offset + 4] &&
			matrix[5] === array[offset + 5] &&
			matrix[6] === array[offset + 6] &&
			matrix[7] === array[offset + 7] &&
			matrix[8] === array[offset + 8]
		);
	}
	/**
	 * Compares this matrix to the provided matrix componentwise and returns
	 * <code>true</code> if they are within the provided epsilon,
	 * <code>false</code> otherwise.
	 *
	 * @param {Matrix3} [right] The right hand side matrix.
	 * @param {Number} [epsilon=0] The epsilon to use for equality testing.
	 * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.
	 */
	equalsEpsilon(right, epsilon) {
		return Matrix3.equalsEpsilon(this, right, epsilon);
	}
	toString() {
		return (
			`(${this[0]}, ${this[3]}, ${this[6]})\n` +
			`(${this[1]}, ${this[4]}, ${this[7]})\n` +
			`(${this[2]}, ${this[5]}, ${this[8]})`
		);
	}
}
Matrix3.IDENTITY = Object.freeze(new Matrix3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0));
Matrix3.ZERO = Object.freeze(new Matrix3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
const scaleScratch1$1 = new Vector3();
new Vector3();
const scratchColumn$1 = new Vector3();
const scaleScratch3$1 = new Vector3();
const scaleScratch4$1 = new Vector3();
const scaleScratch5$1 = new Vector3();
const scratchTransposeMatrix$1 = new Matrix3();

class Vector4 {
	constructor(x = 0, y = 0, z = 0, w = 0) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	set(x, y, z, w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	toArray() {
		return [this.x, this.y, this.z, this.w];
	}
	clone(result) {
		return Vector4.clone(this, result);
	}
	equals(right) {
		return Vector4.equals(this, right);
	}
	equalsEpsilon(right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return Vector4.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);
	}
	toString() {
		return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;
	}
	fromBufferAttribute(attribute, index) {
		this.x = attribute.getX(index);
		this.y = attribute.getY(index);
		this.z = attribute.getZ(index);
		this.w = attribute.getW(index);
		return this;
	}
	static fromElements(x, y, z, w, result) {
		if (!defined(result)) {
			return new Vector4(x, y, z, w);
		}
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static clone(cartesian, result) {
		if (!defined(cartesian)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Vector4(cartesian.x, cartesian.y, cartesian.z, cartesian.w);
		}
		result.x = cartesian.x;
		result.y = cartesian.y;
		result.z = cartesian.z;
		result.w = cartesian.w;
		return result;
	}
	static maximumComponent(cartesian) {
		return Math.max(cartesian.x, cartesian.y, cartesian.z, cartesian.w);
	}
	static minimumComponent(cartesian) {
		return Math.min(cartesian.x, cartesian.y, cartesian.z, cartesian.w);
	}
	static minimumByComponent(first, second, result) {
		result.x = Math.min(first.x, second.x);
		result.y = Math.min(first.y, second.y);
		result.z = Math.min(first.z, second.z);
		result.w = Math.min(first.w, second.w);
		return result;
	}
	static maximumByComponent(first, second, result) {
		result.x = Math.max(first.x, second.x);
		result.y = Math.max(first.y, second.y);
		result.z = Math.max(first.z, second.z);
		result.w = Math.max(first.w, second.w);
		return result;
	}
	static clamp(value, min, max, result) {
		const x = GMath.clamp(value.x, min.x, max.x);
		const y = GMath.clamp(value.y, min.y, max.y);
		const z = GMath.clamp(value.z, min.z, max.z);
		const w = GMath.clamp(value.w, min.w, max.w);
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static magnitudeSquared(cartesian) {
		return (
			cartesian.x * cartesian.x +
			cartesian.y * cartesian.y +
			cartesian.z * cartesian.z +
			cartesian.w * cartesian.w
		);
	}
	static magnitude(cartesian) {
		return Math.sqrt(Vector4.magnitudeSquared(cartesian));
	}
	static distance(left, right) {
		Vector4.subtract(left, right, distanceScratch);
		return Vector4.magnitude(distanceScratch);
	}
	static distanceSquared(left, right) {
		Vector4.subtract(left, right, distanceScratch);
		return Vector4.magnitudeSquared(distanceScratch);
	}
	static normalize(cartesian, result) {
		const magnitude = Vector4.magnitude(cartesian);
		result.x = cartesian.x / magnitude;
		result.y = cartesian.y / magnitude;
		result.z = cartesian.z / magnitude;
		result.w = cartesian.w / magnitude;
		//>>includeStart('debug', pragmas.debug);
		if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z) || isNaN(result.w)) {
			throw new Error("normalized result is not a number");
		}
		//>>includeEnd('debug');
		return result;
	}
	static dot(left, right) {
		return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
	}
	static multiplyComponents(left, right, result) {
		result.x = left.x * right.x;
		result.y = left.y * right.y;
		result.z = left.z * right.z;
		result.w = left.w * right.w;
		return result;
	}
	static divideComponents(left, right, result) {
		result.x = left.x / right.x;
		result.y = left.y / right.y;
		result.z = left.z / right.z;
		result.w = left.w / right.w;
		return result;
	}
	static add(left, right, result) {
		result.x = left.x + right.x;
		result.y = left.y + right.y;
		result.z = left.z + right.z;
		result.w = left.w + right.w;
		return result;
	}
	static subtract(left, right, result) {
		result.x = left.x - right.x;
		result.y = left.y - right.y;
		result.z = left.z - right.z;
		result.w = left.w - right.w;
		return result;
	}
	static multiplyByScalar(cartesian, scalar, result) {
		result.x = cartesian.x * scalar;
		result.y = cartesian.y * scalar;
		result.z = cartesian.z * scalar;
		result.w = cartesian.w * scalar;
		return result;
	}
	static divideByScalar(cartesian, scalar, result) {
		result.x = cartesian.x / scalar;
		result.y = cartesian.y / scalar;
		result.z = cartesian.z / scalar;
		result.w = cartesian.w / scalar;
		return result;
	}
	static negate(cartesian, result) {
		result.x = -cartesian.x;
		result.y = -cartesian.y;
		result.z = -cartesian.z;
		result.w = -cartesian.w;
		return result;
	}
	static abs(cartesian, result) {
		result.x = Math.abs(cartesian.x);
		result.y = Math.abs(cartesian.y);
		result.z = Math.abs(cartesian.z);
		result.w = Math.abs(cartesian.w);
		return result;
	}
	static lerp(start, end, t, result) {
		Vector4.multiplyByScalar(end, t, lerpScratch$1);
		result = Vector4.multiplyByScalar(start, 1.0 - t, result);
		return Vector4.add(lerpScratch$1, result, result);
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				left.x === right.x &&
				left.y === right.y &&
				left.z === right.z &&
				left.w === right.w)
		);
	}
	static equalsArray(cartesian, array, offset) {
		return (
			cartesian.x === array[offset] &&
			cartesian.y === array[offset + 1] &&
			cartesian.z === array[offset + 2] &&
			cartesian.w === array[offset + 3]
		);
	}
	static equalsEpsilon(left, right, relativeEpsilon = 0, absoluteEpsilon = 0) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				GMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon) &&
				GMath.equalsEpsilon(left.w, right.w, relativeEpsilon, absoluteEpsilon))
		);
	}
}
Vector4.ZERO = Object.freeze(new Vector4(0.0, 0.0, 0.0, 0.0));
Vector4.ONE = Object.freeze(new Vector4(1.0, 1.0, 1.0, 1.0));
Vector4.UNIT_X = Object.freeze(new Vector4(1.0, 0.0, 0.0, 0.0));
Vector4.UNIT_Y = Object.freeze(new Vector4(0.0, 1.0, 0.0, 0.0));
Vector4.UNIT_Z = Object.freeze(new Vector4(0.0, 0.0, 1.0, 0.0));
Vector4.UNIT_W = Object.freeze(new Vector4(0.0, 0.0, 0.0, 1.0));
// scratchU8Array and scratchF32Array are views into the same buffer
const scratchF32Array = new Float32Array(1);
new Uint8Array(scratchF32Array.buffer);
const testU32 = new Uint32Array([0x11223344]);
const testU8 = new Uint8Array(testU32.buffer);
testU8[0] === 0x44;
const distanceScratch = new Vector4();
const lerpScratch$1 = new Vector4();
new Vector4();

class Matrix4 {
	/**
	 * A 4x4 matrix, indexable as a column-major order array.
	 * @param {Number} [column0Row0=0.0] The value for column 0, row 0.
	 * @param {Number} [column1Row0=0.0] The value for column 1, row 0.
	 * @param {Number} [column2Row0=0.0] The value for column 2, row 0.
	 * @param {Number} [column3Row0=0.0] The value for column 3, row 0.
	 * @param {Number} [column0Row1=0.0] The value for column 0, row 1.
	 * @param {Number} [column1Row1=0.0] The value for column 1, row 1.
	 * @param {Number} [column2Row1=0.0] The value for column 2, row 1.
	 * @param {Number} [column3Row1=0.0] The value for column 3, row 1.
	 * @param {Number} [column0Row2=0.0] The value for column 0, row 2.
	 * @param {Number} [column1Row2=0.0] The value for column 1, row 2.
	 * @param {Number} [column2Row2=0.0] The value for column 2, row 2.
	 * @param {Number} [column3Row2=0.0] The value for column 3, row 2.
	 * @param {Number} [column0Row3=0.0] The value for column 0, row 3.
	 * @param {Number} [column1Row3=0.0] The value for column 1, row 3.
	 * @param {Number} [column2Row3=0.0] The value for column 2, row 3.
	 * @param {Number} [column3Row3=0.0] The value for column 3, row 3.
	 */
	constructor(
		column0Row0 = 0,
		column1Row0 = 0,
		column2Row0 = 0,
		column3Row0 = 0,
		column0Row1 = 0,
		column1Row1 = 0,
		column2Row1 = 0,
		column3Row1 = 0,
		column0Row2 = 0,
		column1Row2 = 0,
		column2Row2 = 0,
		column3Row2 = 0,
		column0Row3 = 0,
		column1Row3 = 0,
		column2Row3 = 0,
		column3Row3 = 0
	) {
		this[0] = column0Row0;
		this[1] = column0Row1;
		this[2] = column0Row2;
		this[3] = column0Row3;
		this[4] = column1Row0;
		this[5] = column1Row1;
		this[6] = column1Row2;
		this[7] = column1Row3;
		this[8] = column2Row0;
		this[9] = column2Row1;
		this[10] = column2Row2;
		this[11] = column2Row3;
		this[12] = column3Row0;
		this[13] = column3Row1;
		this[14] = column3Row2;
		this[15] = column3Row3;
	}
	//????
	clone(result) {
		return Matrix4.clone(this, result);
	}
	equals(right) {
		return Matrix4.equals(this, right);
	}
	equalsEpsilon(right, epsilon = 0) {
		return Matrix4.equalsEpsilon(this, right, epsilon);
	}
	lookAt(eye, target, up) {
		const matrix = this;
		Vector3.subtract(eye, target, z);
		if (z.length() === 0) {
			// eye and target are in the same position
			z.z = 1;
		}
		z.normalize();
		Vector3.cross(up, z, x);
		if (x.length() === 0) {
			// up and z are parallel
			if (Math.abs(up.z) === 1) {
				z.x += 0.0001;
			} else {
				z.z += 0.0001;
			}
			z.normalize();
			Vector3.cross(up, z, x);
		}
		x.normalize();
		Vector3.cross(z, x, y);
		matrix[0] = x.x;
		matrix[4] = y.x;
		matrix[8] = z.x;
		matrix[1] = x.y;
		matrix[5] = y.y;
		matrix[9] = z.y;
		matrix[2] = x.z;
		matrix[6] = y.z;
		matrix[10] = z.z;
		return this;
	}
	toString() {
		return (
			`(${this[0]}, ${this[4]}, ${this[8]}, ${this[12]})\n` +
			`(${this[1]}, ${this[5]}, ${this[9]}, ${this[13]})\n` +
			`(${this[2]}, ${this[6]}, ${this[10]}, ${this[14]})\n` +
			`(${this[3]}, ${this[7]}, ${this[11]}, ${this[15]})`
		);
	}
	static clone(matrix, result) {
		if (!defined(matrix)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Matrix4(
				matrix[0],
				matrix[4],
				matrix[8],
				matrix[12],
				matrix[1],
				matrix[5],
				matrix[9],
				matrix[13],
				matrix[2],
				matrix[6],
				matrix[10],
				matrix[14],
				matrix[3],
				matrix[7],
				matrix[11],
				matrix[15]
			);
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		result[9] = matrix[9];
		result[10] = matrix[10];
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static fromColumnMajorArray(values, result) {
		return Matrix4.clone(values, result);
	}
	static fromRowMajorArray(values, result) {
		if (!defined(result)) {
			return new Matrix4(
				values[0],
				values[1],
				values[2],
				values[3],
				values[4],
				values[5],
				values[6],
				values[7],
				values[8],
				values[9],
				values[10],
				values[11],
				values[12],
				values[13],
				values[14],
				values[15]
			);
		}
		result[0] = values[0];
		result[1] = values[4];
		result[2] = values[8];
		result[3] = values[12];
		result[4] = values[1];
		result[5] = values[5];
		result[6] = values[9];
		result[7] = values[13];
		result[8] = values[2];
		result[9] = values[6];
		result[10] = values[10];
		result[11] = values[14];
		result[12] = values[3];
		result[13] = values[7];
		result[14] = values[11];
		result[15] = values[15];
		return result;
	}
	static fromRotationTranslation(rotation, translation, result) {
		translation = defaultValue(translation, Vector3.ZERO);
		if (!defined(result)) {
			return new Matrix4(
				rotation[0],
				rotation[3],
				rotation[6],
				translation.x,
				rotation[1],
				rotation[4],
				rotation[7],
				translation.y,
				rotation[2],
				rotation[5],
				rotation[8],
				translation.z,
				0.0,
				0.0,
				0.0,
				1.0
			);
		}
		result[0] = rotation[0];
		result[1] = rotation[1];
		result[2] = rotation[2];
		result[3] = 0.0;
		result[4] = rotation[3];
		result[5] = rotation[4];
		result[6] = rotation[5];
		result[7] = 0.0;
		result[8] = rotation[6];
		result[9] = rotation[7];
		result[10] = rotation[8];
		result[11] = 0.0;
		result[12] = translation.x;
		result[13] = translation.y;
		result[14] = translation.z;
		result[15] = 1.0;
		return result;
	}
	static fromTranslationQuaternionRotationScale(translation, rotation, scale, result) {
		if (!defined(result)) {
			result = new Matrix4();
		}
		const scaleX = scale.x;
		const scaleY = scale.y;
		const scaleZ = scale.z;
		const x2 = rotation.x * rotation.x;
		const xy = rotation.x * rotation.y;
		const xz = rotation.x * rotation.z;
		const xw = rotation.x * rotation.w;
		const y2 = rotation.y * rotation.y;
		const yz = rotation.y * rotation.z;
		const yw = rotation.y * rotation.w;
		const z2 = rotation.z * rotation.z;
		const zw = rotation.z * rotation.w;
		const w2 = rotation.w * rotation.w;
		const m00 = x2 - y2 - z2 + w2;
		const m01 = 2.0 * (xy - zw);
		const m02 = 2.0 * (xz + yw);
		const m10 = 2.0 * (xy + zw);
		const m11 = -x2 + y2 - z2 + w2;
		const m12 = 2.0 * (yz - xw);
		const m20 = 2.0 * (xz - yw);
		const m21 = 2.0 * (yz + xw);
		const m22 = -x2 - y2 + z2 + w2;
		result[0] = m00 * scaleX;
		result[1] = m10 * scaleX;
		result[2] = m20 * scaleX;
		result[3] = 0.0;
		result[4] = m01 * scaleY;
		result[5] = m11 * scaleY;
		result[6] = m21 * scaleY;
		result[7] = 0.0;
		result[8] = m02 * scaleZ;
		result[9] = m12 * scaleZ;
		result[10] = m22 * scaleZ;
		result[11] = 0.0;
		result[12] = translation.x;
		result[13] = translation.y;
		result[14] = translation.z;
		result[15] = 1.0;
		return result;
	}
	static fromTranslationRotationScale(translationRotationScale, result) {
		return Matrix4.fromTranslationQuaternionRotationScale(
			translationRotationScale.translation,
			translationRotationScale.rotation,
			translationRotationScale.scale,
			result
		);
	}
	static fromTranslation(translation, result) {
		return Matrix4.fromRotationTranslation(Matrix3.IDENTITY, translation, result);
	}
	static fromScale(scale, result) {
		if (!defined(result)) {
			return new Matrix4(
				scale.x,
				0.0,
				0.0,
				0.0,
				0.0,
				scale.y,
				0.0,
				0.0,
				0.0,
				0.0,
				scale.z,
				0.0,
				0.0,
				0.0,
				0.0,
				1.0
			);
		}
		result[0] = scale.x;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = 0.0;
		result[5] = scale.y;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = 0.0;
		result[9] = 0.0;
		result[10] = scale.z;
		result[11] = 0.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = 0.0;
		result[15] = 1.0;
		return result;
	}
	static fromRotation(rotation, result) {
		if (!defined(result)) {
			result = new Matrix4();
		}
		result[0] = rotation[0];
		result[1] = rotation[1];
		result[2] = rotation[2];
		result[3] = 0.0;
		result[4] = rotation[3];
		result[5] = rotation[4];
		result[6] = rotation[5];
		result[7] = 0.0;
		result[8] = rotation[6];
		result[9] = rotation[7];
		result[10] = rotation[8];
		result[11] = 0.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = 0.0;
		result[15] = 1.0;
		return result;
	}
	static makePerspective(left, right, top, bottom, near, far) {
		// from three.js
		const matrix = new Matrix4();
		const x = (2 * near) / (right - left);
		const y = (2 * near) / (top - bottom);
		const a = (right + left) / (right - left);
		const b = (top + bottom) / (top - bottom);
		const c = -far / (far - near);
		const d = (-far * near) / (far - near);
		matrix[0] = x;
		matrix[4] = 0;
		matrix[8] = a;
		matrix[12] = 0;
		matrix[1] = 0;
		matrix[5] = y;
		matrix[9] = b;
		matrix[13] = 0;
		matrix[2] = 0;
		matrix[6] = 0;
		matrix[10] = c;
		matrix[14] = d;
		matrix[3] = 0;
		matrix[7] = 0;
		matrix[11] = -1;
		matrix[15] = 0;
		return matrix;
	}
	static makeOrthographic(left, right, top, bottom, near, far) {
		const matrix = new Matrix4();
		const w = 1.0 / (right - left);
		const h = 1.0 / (top - bottom);
		const p = 1.0 / (far - near);
		const x = (right + left) * w;
		const y = (top + bottom) * h;
		const z = near * p;
		matrix[0] = 2 * w;
		matrix[4] = 0;
		matrix[8] = 0;
		matrix[12] = -x;
		matrix[1] = 0;
		matrix[5] = 2 * h;
		matrix[9] = 0;
		matrix[13] = -y;
		matrix[2] = 0;
		matrix[6] = 0;
		matrix[10] = -1 * p;
		matrix[14] = -z;
		matrix[3] = 0;
		matrix[7] = 0;
		matrix[11] = 0;
		matrix[15] = 1;
		return matrix;
	}
	toArray() {
		const result = [];
		Matrix4.toArray(this, result);
		return result;
	}
	/**
	 * Computes an Array from the provided Matrix4 instance.
	 * The array will be in column-major order.
	 * @example
	 * //create an array from an instance of Matrix4
	 * // m = [10.0, 14.0, 18.0, 22.0]
	 * //     [11.0, 15.0, 19.0, 23.0]
	 * //     [12.0, 16.0, 20.0, 24.0]
	 * //     [13.0, 17.0, 21.0, 25.0]
	 * const a = Matrix4.toArray(m);
	 *
	 * // m remains the same
	 * //creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]
	 */
	static toArray(matrix, result) {
		if (!defined(result)) {
			return [
				matrix[0],
				matrix[1],
				matrix[2],
				matrix[3],
				matrix[4],
				matrix[5],
				matrix[6],
				matrix[7],
				matrix[8],
				matrix[9],
				matrix[10],
				matrix[11],
				matrix[12],
				matrix[13],
				matrix[14],
				matrix[15]
			];
		}
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		result[9] = matrix[9];
		result[10] = matrix[10];
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static getElementIndex(column, row) {
		return column * 4 + row;
	}
	static getColumn(matrix, index, result) {
		const startIndex = index * 4;
		const x = matrix[startIndex];
		const y = matrix[startIndex + 1];
		const z = matrix[startIndex + 2];
		const w = matrix[startIndex + 3];
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static setColumn(matrix, index, cartesian, result) {
		result = Matrix4.clone(matrix, result);
		const startIndex = index * 4;
		result[startIndex] = cartesian.x;
		result[startIndex + 1] = cartesian.y;
		result[startIndex + 2] = cartesian.z;
		result[startIndex + 3] = cartesian.w;
		return result;
	}
	static getRow(matrix, index, result) {
		const x = matrix[index];
		const y = matrix[index + 4];
		const z = matrix[index + 8];
		const w = matrix[index + 12];
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static setRow(matrix, index, cartesian, result) {
		result = Matrix4.clone(matrix, result);
		result[index] = cartesian.x;
		result[index + 4] = cartesian.y;
		result[index + 8] = cartesian.z;
		result[index + 12] = cartesian.w;
		return result;
	}
	static setTranslation(matrix, translation, result) {
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		result[9] = matrix[9];
		result[10] = matrix[10];
		result[11] = matrix[11];
		result[12] = translation.x;
		result[13] = translation.y;
		result[14] = translation.z;
		result[15] = matrix[15];
		return result;
	}
	static setScale(matrix, scale, result) {
		const existingScale = Matrix4.getScale(matrix, scaleScratch1);
		const scaleRatioX = scale.x / existingScale.x;
		const scaleRatioY = scale.y / existingScale.y;
		const scaleRatioZ = scale.z / existingScale.z;
		result[0] = matrix[0] * scaleRatioX;
		result[1] = matrix[1] * scaleRatioX;
		result[2] = matrix[2] * scaleRatioX;
		result[3] = matrix[3];
		result[4] = matrix[4] * scaleRatioY;
		result[5] = matrix[5] * scaleRatioY;
		result[6] = matrix[6] * scaleRatioY;
		result[7] = matrix[7];
		result[8] = matrix[8] * scaleRatioZ;
		result[9] = matrix[9] * scaleRatioZ;
		result[10] = matrix[10] * scaleRatioZ;
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static getScale(matrix, result) {
		result.x = Vector3.magnitude(Vector3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));
		result.y = Vector3.magnitude(Vector3.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn));
		result.z = Vector3.magnitude(Vector3.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn));
		return result;
	}
	static getMaximumScale(matrix) {
		Matrix4.getScale(matrix, scaleScratch3);
		return Vector3.maximumComponent(scaleScratch3);
	}
	static setRotation(matrix, rotation, result) {
		const scale = Matrix4.getScale(matrix, scaleScratch4);
		result[0] = rotation[0] * scale.x;
		result[1] = rotation[1] * scale.x;
		result[2] = rotation[2] * scale.x;
		result[3] = matrix[3];
		result[4] = rotation[3] * scale.y;
		result[5] = rotation[4] * scale.y;
		result[6] = rotation[5] * scale.y;
		result[7] = matrix[7];
		result[8] = rotation[6] * scale.z;
		result[9] = rotation[7] * scale.z;
		result[10] = rotation[8] * scale.z;
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static getRotation(matrix, result) {
		const scale = Matrix4.getScale(matrix, scaleScratch5);
		result[0] = matrix[0] / scale.x;
		result[1] = matrix[1] / scale.x;
		result[2] = matrix[2] / scale.x;
		result[3] = matrix[4] / scale.y;
		result[4] = matrix[5] / scale.y;
		result[5] = matrix[6] / scale.y;
		result[6] = matrix[8] / scale.z;
		result[7] = matrix[9] / scale.z;
		result[8] = matrix[10] / scale.z;
		return result;
	}
	static multiply(left, right, result) {
		const left0 = left[0];
		const left1 = left[1];
		const left2 = left[2];
		const left3 = left[3];
		const left4 = left[4];
		const left5 = left[5];
		const left6 = left[6];
		const left7 = left[7];
		const left8 = left[8];
		const left9 = left[9];
		const left10 = left[10];
		const left11 = left[11];
		const left12 = left[12];
		const left13 = left[13];
		const left14 = left[14];
		const left15 = left[15];
		const right0 = right[0];
		const right1 = right[1];
		const right2 = right[2];
		const right3 = right[3];
		const right4 = right[4];
		const right5 = right[5];
		const right6 = right[6];
		const right7 = right[7];
		const right8 = right[8];
		const right9 = right[9];
		const right10 = right[10];
		const right11 = right[11];
		const right12 = right[12];
		const right13 = right[13];
		const right14 = right[14];
		const right15 = right[15];
		const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;
		const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;
		const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;
		const column0Row3 = left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;
		const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;
		const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;
		const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;
		const column1Row3 = left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;
		const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;
		const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;
		const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;
		const column2Row3 = left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;
		const column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;
		const column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;
		const column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;
		const column3Row3 = left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = column0Row3;
		result[4] = column1Row0;
		result[5] = column1Row1;
		result[6] = column1Row2;
		result[7] = column1Row3;
		result[8] = column2Row0;
		result[9] = column2Row1;
		result[10] = column2Row2;
		result[11] = column2Row3;
		result[12] = column3Row0;
		result[13] = column3Row1;
		result[14] = column3Row2;
		result[15] = column3Row3;
		return result;
	}
	static add(left, right, result) {
		result[0] = left[0] + right[0];
		result[1] = left[1] + right[1];
		result[2] = left[2] + right[2];
		result[3] = left[3] + right[3];
		result[4] = left[4] + right[4];
		result[5] = left[5] + right[5];
		result[6] = left[6] + right[6];
		result[7] = left[7] + right[7];
		result[8] = left[8] + right[8];
		result[9] = left[9] + right[9];
		result[10] = left[10] + right[10];
		result[11] = left[11] + right[11];
		result[12] = left[12] + right[12];
		result[13] = left[13] + right[13];
		result[14] = left[14] + right[14];
		result[15] = left[15] + right[15];
		return result;
	}
	static subtract(left, right, result) {
		result[0] = left[0] - right[0];
		result[1] = left[1] - right[1];
		result[2] = left[2] - right[2];
		result[3] = left[3] - right[3];
		result[4] = left[4] - right[4];
		result[5] = left[5] - right[5];
		result[6] = left[6] - right[6];
		result[7] = left[7] - right[7];
		result[8] = left[8] - right[8];
		result[9] = left[9] - right[9];
		result[10] = left[10] - right[10];
		result[11] = left[11] - right[11];
		result[12] = left[12] - right[12];
		result[13] = left[13] - right[13];
		result[14] = left[14] - right[14];
		result[15] = left[15] - right[15];
		return result;
	}
	static multiplyTransformation(left, right, result) {
		const left0 = left[0];
		const left1 = left[1];
		const left2 = left[2];
		const left4 = left[4];
		const left5 = left[5];
		const left6 = left[6];
		const left8 = left[8];
		const left9 = left[9];
		const left10 = left[10];
		const left12 = left[12];
		const left13 = left[13];
		const left14 = left[14];
		const right0 = right[0];
		const right1 = right[1];
		const right2 = right[2];
		const right4 = right[4];
		const right5 = right[5];
		const right6 = right[6];
		const right8 = right[8];
		const right9 = right[9];
		const right10 = right[10];
		const right12 = right[12];
		const right13 = right[13];
		const right14 = right[14];
		const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;
		const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;
		const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;
		const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;
		const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;
		const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;
		const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;
		const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;
		const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;
		const column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12;
		const column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13;
		const column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14;
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = 0.0;
		result[4] = column1Row0;
		result[5] = column1Row1;
		result[6] = column1Row2;
		result[7] = 0.0;
		result[8] = column2Row0;
		result[9] = column2Row1;
		result[10] = column2Row2;
		result[11] = 0.0;
		result[12] = column3Row0;
		result[13] = column3Row1;
		result[14] = column3Row2;
		result[15] = 1.0;
		return result;
	}
	static multiplyByMatrix3(matrix, rotation, result) {
		const left0 = matrix[0];
		const left1 = matrix[1];
		const left2 = matrix[2];
		const left4 = matrix[4];
		const left5 = matrix[5];
		const left6 = matrix[6];
		const left8 = matrix[8];
		const left9 = matrix[9];
		const left10 = matrix[10];
		const right0 = rotation[0];
		const right1 = rotation[1];
		const right2 = rotation[2];
		const right4 = rotation[3];
		const right5 = rotation[4];
		const right6 = rotation[5];
		const right8 = rotation[6];
		const right9 = rotation[7];
		const right10 = rotation[8];
		const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;
		const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;
		const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;
		const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;
		const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;
		const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;
		const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;
		const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;
		const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;
		result[0] = column0Row0;
		result[1] = column0Row1;
		result[2] = column0Row2;
		result[3] = 0.0;
		result[4] = column1Row0;
		result[5] = column1Row1;
		result[6] = column1Row2;
		result[7] = 0.0;
		result[8] = column2Row0;
		result[9] = column2Row1;
		result[10] = column2Row2;
		result[11] = 0.0;
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static multiplyByTranslation(matrix, translation, result) {
		const x = translation.x;
		const y = translation.y;
		const z = translation.z;
		const tx = x * matrix[0] + y * matrix[4] + z * matrix[8] + matrix[12];
		const ty = x * matrix[1] + y * matrix[5] + z * matrix[9] + matrix[13];
		const tz = x * matrix[2] + y * matrix[6] + z * matrix[10] + matrix[14];
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		result[9] = matrix[9];
		result[10] = matrix[10];
		result[11] = matrix[11];
		result[12] = tx;
		result[13] = ty;
		result[14] = tz;
		result[15] = matrix[15];
		return result;
	}
	static multiplyByScale(matrix, scale, result) {
		const scaleX = scale.x;
		const scaleY = scale.y;
		const scaleZ = scale.z;
		// Faster than Vector3.equals
		if (scaleX === 1.0 && scaleY === 1.0 && scaleZ === 1.0) {
			return Matrix4.clone(matrix, result);
		}
		result[0] = scaleX * matrix[0];
		result[1] = scaleX * matrix[1];
		result[2] = scaleX * matrix[2];
		result[3] = matrix[3];
		result[4] = scaleY * matrix[4];
		result[5] = scaleY * matrix[5];
		result[6] = scaleY * matrix[6];
		result[7] = matrix[7];
		result[8] = scaleZ * matrix[8];
		result[9] = scaleZ * matrix[9];
		result[10] = scaleZ * matrix[10];
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static multiplyByUniformScale(matrix, scale, result) {
		result[0] = matrix[0] * scale;
		result[1] = matrix[1] * scale;
		result[2] = matrix[2] * scale;
		result[3] = matrix[3];
		result[4] = matrix[4] * scale;
		result[5] = matrix[5] * scale;
		result[6] = matrix[6] * scale;
		result[7] = matrix[7];
		result[8] = matrix[8] * scale;
		result[9] = matrix[9] * scale;
		result[10] = matrix[10] * scale;
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	}
	static multiplyByVector(matrix, cartesian, result) {
		const vX = cartesian.x;
		const vY = cartesian.y;
		const vZ = cartesian.z;
		const vW = cartesian.w;
		const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;
		const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;
		const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;
		const w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static multiplyByPointAsVector(matrix, cartesian, result) {
		const vX = cartesian.x;
		const vY = cartesian.y;
		const vZ = cartesian.z;
		const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;
		const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;
		const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static multiplyByPoint(matrix, cartesian, result) {
		const vX = cartesian.x;
		const vY = cartesian.y;
		const vZ = cartesian.z;
		const x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];
		const y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];
		const z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];
		result.x = x;
		result.y = y;
		result.z = z;
		return result;
	}
	static multiplyByScalar(matrix, scalar, result) {
		result[0] = matrix[0] * scalar;
		result[1] = matrix[1] * scalar;
		result[2] = matrix[2] * scalar;
		result[3] = matrix[3] * scalar;
		result[4] = matrix[4] * scalar;
		result[5] = matrix[5] * scalar;
		result[6] = matrix[6] * scalar;
		result[7] = matrix[7] * scalar;
		result[8] = matrix[8] * scalar;
		result[9] = matrix[9] * scalar;
		result[10] = matrix[10] * scalar;
		result[11] = matrix[11] * scalar;
		result[12] = matrix[12] * scalar;
		result[13] = matrix[13] * scalar;
		result[14] = matrix[14] * scalar;
		result[15] = matrix[15] * scalar;
		return result;
	}
	static negate(matrix, result) {
		result[0] = -matrix[0];
		result[1] = -matrix[1];
		result[2] = -matrix[2];
		result[3] = -matrix[3];
		result[4] = -matrix[4];
		result[5] = -matrix[5];
		result[6] = -matrix[6];
		result[7] = -matrix[7];
		result[8] = -matrix[8];
		result[9] = -matrix[9];
		result[10] = -matrix[10];
		result[11] = -matrix[11];
		result[12] = -matrix[12];
		result[13] = -matrix[13];
		result[14] = -matrix[14];
		result[15] = -matrix[15];
		return result;
	}
	static transpose(matrix, result) {
		const matrix1 = matrix[1];
		const matrix2 = matrix[2];
		const matrix3 = matrix[3];
		const matrix6 = matrix[6];
		const matrix7 = matrix[7];
		const matrix11 = matrix[11];
		result[0] = matrix[0];
		result[1] = matrix[4];
		result[2] = matrix[8];
		result[3] = matrix[12];
		result[4] = matrix1;
		result[5] = matrix[5];
		result[6] = matrix[9];
		result[7] = matrix[13];
		result[8] = matrix2;
		result[9] = matrix6;
		result[10] = matrix[10];
		result[11] = matrix[14];
		result[12] = matrix3;
		result[13] = matrix7;
		result[14] = matrix11;
		result[15] = matrix[15];
		return result;
	}
	static abs(matrix, result) {
		result[0] = Math.abs(matrix[0]);
		result[1] = Math.abs(matrix[1]);
		result[2] = Math.abs(matrix[2]);
		result[3] = Math.abs(matrix[3]);
		result[4] = Math.abs(matrix[4]);
		result[5] = Math.abs(matrix[5]);
		result[6] = Math.abs(matrix[6]);
		result[7] = Math.abs(matrix[7]);
		result[8] = Math.abs(matrix[8]);
		result[9] = Math.abs(matrix[9]);
		result[10] = Math.abs(matrix[10]);
		result[11] = Math.abs(matrix[11]);
		result[12] = Math.abs(matrix[12]);
		result[13] = Math.abs(matrix[13]);
		result[14] = Math.abs(matrix[14]);
		result[15] = Math.abs(matrix[15]);
		return result;
	}
	static equals(left, right) {
		// Given that most matrices will be transformation matrices, the elements
		// are tested in order such that the test is likely to fail as early
		// as possible.  I _think_ this is just as friendly to the L1 cache
		// as testing in index order.  It is certainty faster in practice.
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				// Translation
				left[12] === right[12] &&
				left[13] === right[13] &&
				left[14] === right[14] &&
				// Rotation/scale
				left[0] === right[0] &&
				left[1] === right[1] &&
				left[2] === right[2] &&
				left[4] === right[4] &&
				left[5] === right[5] &&
				left[6] === right[6] &&
				left[8] === right[8] &&
				left[9] === right[9] &&
				left[10] === right[10] &&
				// Bottom row
				left[3] === right[3] &&
				left[7] === right[7] &&
				left[11] === right[11] &&
				left[15] === right[15])
		);
	}
	static equalsEpsilon(left, right, epsilon) {
		epsilon = defaultValue(epsilon, 0);
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				Math.abs(left[0] - right[0]) <= epsilon &&
				Math.abs(left[1] - right[1]) <= epsilon &&
				Math.abs(left[2] - right[2]) <= epsilon &&
				Math.abs(left[3] - right[3]) <= epsilon &&
				Math.abs(left[4] - right[4]) <= epsilon &&
				Math.abs(left[5] - right[5]) <= epsilon &&
				Math.abs(left[6] - right[6]) <= epsilon &&
				Math.abs(left[7] - right[7]) <= epsilon &&
				Math.abs(left[8] - right[8]) <= epsilon &&
				Math.abs(left[9] - right[9]) <= epsilon &&
				Math.abs(left[10] - right[10]) <= epsilon &&
				Math.abs(left[11] - right[11]) <= epsilon &&
				Math.abs(left[12] - right[12]) <= epsilon &&
				Math.abs(left[13] - right[13]) <= epsilon &&
				Math.abs(left[14] - right[14]) <= epsilon &&
				Math.abs(left[15] - right[15]) <= epsilon)
		);
	}
	static getTranslation(matrix, result) {
		result.x = matrix[12];
		result.y = matrix[13];
		result.z = matrix[14];
		return result;
	}
	static getMatrix3(matrix, result) {
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[4];
		result[4] = matrix[5];
		result[5] = matrix[6];
		result[6] = matrix[8];
		result[7] = matrix[9];
		result[8] = matrix[10];
		return result;
	}
	static inverse(matrix, result) {
		//
		// Ported from:
		//   ftp://download.intel.com/design/PentiumIII/sml/24504301.pdf
		//
		const src0 = matrix[0];
		const src1 = matrix[4];
		const src2 = matrix[8];
		const src3 = matrix[12];
		const src4 = matrix[1];
		const src5 = matrix[5];
		const src6 = matrix[9];
		const src7 = matrix[13];
		const src8 = matrix[2];
		const src9 = matrix[6];
		const src10 = matrix[10];
		const src11 = matrix[14];
		const src12 = matrix[3];
		const src13 = matrix[7];
		const src14 = matrix[11];
		const src15 = matrix[15];
		// calculate pairs for first 8 elements (cofactors)
		let tmp0 = src10 * src15;
		let tmp1 = src11 * src14;
		let tmp2 = src9 * src15;
		let tmp3 = src11 * src13;
		let tmp4 = src9 * src14;
		let tmp5 = src10 * src13;
		let tmp6 = src8 * src15;
		let tmp7 = src11 * src12;
		let tmp8 = src8 * src14;
		let tmp9 = src10 * src12;
		let tmp10 = src8 * src13;
		let tmp11 = src9 * src12;
		// calculate first 8 elements (cofactors)
		const dst0 = tmp0 * src5 + tmp3 * src6 + tmp4 * src7 - (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);
		const dst1 = tmp1 * src4 + tmp6 * src6 + tmp9 * src7 - (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);
		const dst2 = tmp2 * src4 + tmp7 * src5 + tmp10 * src7 - (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);
		const dst3 = tmp5 * src4 + tmp8 * src5 + tmp11 * src6 - (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);
		const dst4 = tmp1 * src1 + tmp2 * src2 + tmp5 * src3 - (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);
		const dst5 = tmp0 * src0 + tmp7 * src2 + tmp8 * src3 - (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);
		const dst6 = tmp3 * src0 + tmp6 * src1 + tmp11 * src3 - (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);
		const dst7 = tmp4 * src0 + tmp9 * src1 + tmp10 * src2 - (tmp5 * src0 + tmp8 * src1 + tmp11 * src2);
		// calculate pairs for second 8 elements (cofactors)
		tmp0 = src2 * src7;
		tmp1 = src3 * src6;
		tmp2 = src1 * src7;
		tmp3 = src3 * src5;
		tmp4 = src1 * src6;
		tmp5 = src2 * src5;
		tmp6 = src0 * src7;
		tmp7 = src3 * src4;
		tmp8 = src0 * src6;
		tmp9 = src2 * src4;
		tmp10 = src0 * src5;
		tmp11 = src1 * src4;
		// calculate second 8 elements (cofactors)
		const dst8 = tmp0 * src13 + tmp3 * src14 + tmp4 * src15 - (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);
		const dst9 = tmp1 * src12 + tmp6 * src14 + tmp9 * src15 - (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);
		const dst10 = tmp2 * src12 + tmp7 * src13 + tmp10 * src15 - (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);
		const dst11 = tmp5 * src12 + tmp8 * src13 + tmp11 * src14 - (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);
		const dst12 = tmp2 * src10 + tmp5 * src11 + tmp1 * src9 - (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);
		const dst13 = tmp8 * src11 + tmp0 * src8 + tmp7 * src10 - (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);
		const dst14 = tmp6 * src9 + tmp11 * src11 + tmp3 * src8 - (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);
		const dst15 = tmp10 * src10 + tmp4 * src8 + tmp9 * src9 - (tmp8 * src9 + tmp11 * src10 + tmp5 * src8);
		// calculate determinant
		let det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;
		if (Math.abs(det) < GMath.EPSILON21) {
			// Special case for a zero scale matrix that can occur, for example,
			// when a model's node has a [0, 0, 0] scale.
			if (
				Matrix3.equalsEpsilon(
					Matrix4.getMatrix3(matrix, scratchInverseRotation),
					scratchMatrix3Zero,
					GMath.EPSILON7
				) &&
				Vector4.equals(Matrix4.getRow(matrix, 3, scratchBottomRow), scratchExpectedBottomRow)
			) {
				result[0] = 0.0;
				result[1] = 0.0;
				result[2] = 0.0;
				result[3] = 0.0;
				result[4] = 0.0;
				result[5] = 0.0;
				result[6] = 0.0;
				result[7] = 0.0;
				result[8] = 0.0;
				result[9] = 0.0;
				result[10] = 0.0;
				result[11] = 0.0;
				result[12] = -matrix[12];
				result[13] = -matrix[13];
				result[14] = -matrix[14];
				result[15] = 1.0;
				return result;
			}
			throw new Error("matrix is not invertible because its determinate is zero.");
		}
		// calculate matrix inverse
		det = 1.0 / det;
		result[0] = dst0 * det;
		result[1] = dst1 * det;
		result[2] = dst2 * det;
		result[3] = dst3 * det;
		result[4] = dst4 * det;
		result[5] = dst5 * det;
		result[6] = dst6 * det;
		result[7] = dst7 * det;
		result[8] = dst8 * det;
		result[9] = dst9 * det;
		result[10] = dst10 * det;
		result[11] = dst11 * det;
		result[12] = dst12 * det;
		result[13] = dst13 * det;
		result[14] = dst14 * det;
		result[15] = dst15 * det;
		return result;
	}
	static inverseTransformation(matrix, result) {
		//This function is an optimized version of the below 4 lines.
		//const rT = Matrix3.transpose(Matrix4.getMatrix3(matrix));
		//const rTN = Matrix3.negate(rT);
		//const rTT = Matrix3.multiplyByVector(rTN, Matrix4.getTranslation(matrix));
		//return Matrix4.fromRotationTranslation(rT, rTT, result);
		const matrix0 = matrix[0];
		const matrix1 = matrix[1];
		const matrix2 = matrix[2];
		const matrix4 = matrix[4];
		const matrix5 = matrix[5];
		const matrix6 = matrix[6];
		const matrix8 = matrix[8];
		const matrix9 = matrix[9];
		const matrix10 = matrix[10];
		const vX = matrix[12];
		const vY = matrix[13];
		const vZ = matrix[14];
		const x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;
		const y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;
		const z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;
		result[0] = matrix0;
		result[1] = matrix4;
		result[2] = matrix8;
		result[3] = 0.0;
		result[4] = matrix1;
		result[5] = matrix5;
		result[6] = matrix9;
		result[7] = 0.0;
		result[8] = matrix2;
		result[9] = matrix6;
		result[10] = matrix10;
		result[11] = 0.0;
		result[12] = x;
		result[13] = y;
		result[14] = z;
		result[15] = 1.0;
		return result;
	}
	static inverseTranspose(matrix, result) {
		return Matrix4.inverse(Matrix4.transpose(matrix, scratchTransposeMatrix), result);
	}
	/**
	 * @private
	 */
	static equalsArray(matrix, array, offset) {
		return (
			matrix[0] === array[offset] &&
			matrix[1] === array[offset + 1] &&
			matrix[2] === array[offset + 2] &&
			matrix[3] === array[offset + 3] &&
			matrix[4] === array[offset + 4] &&
			matrix[5] === array[offset + 5] &&
			matrix[6] === array[offset + 6] &&
			matrix[7] === array[offset + 7] &&
			matrix[8] === array[offset + 8] &&
			matrix[9] === array[offset + 9] &&
			matrix[10] === array[offset + 10] &&
			matrix[11] === array[offset + 11] &&
			matrix[12] === array[offset + 12] &&
			matrix[13] === array[offset + 13] &&
			matrix[14] === array[offset + 14] &&
			matrix[15] === array[offset + 15]
		);
	}
}
Matrix4.IDENTITY = Object.freeze(
	new Matrix4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)
);
Matrix4.ZERO = Object.freeze(
	new Matrix4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
);
const scratchTransposeMatrix = new Matrix4();
new Vector3();
new Vector3();
new Vector3();
const scaleScratch1 = new Vector3();
new Vector3();
const scratchColumn = new Vector3();
const scaleScratch3 = new Vector3();
const scaleScratch4 = new Vector3();
const scaleScratch5 = new Vector3();
const scratchInverseRotation = new Matrix3();
const scratchMatrix3Zero = new Matrix3();
const scratchBottomRow = new Vector4();
const scratchExpectedBottomRow = new Vector4(0.0, 0.0, 0.0, 1.0);
const x = new Vector3();
const y = new Vector3();
const z = new Vector3();

class Uniform {
	constructor(uniformName, cb, binding, offset) {
		this.name = uniformName;
		this.cb = cb;
		this.binding = defaultValue(binding, 0);
		this.offset = defaultValue(offset, 0);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.type = "number";
	}
	setBuffer(array) {
		for (let i = 0; i < array.length; i++) {
			this.buffer[i] = array[i];
		}
	}
	set() {}
	getValue() {
		let result;
		const cbType = typeof this.cb;
		switch (cbType) {
			case "object":
				result = this.cb[this.name] || this.cb;
				break;
			case "function":
				//@ts-ignore
				result = this.cb();
				break;
			case "number":
				result = this.cb;
				break;
			default:
				throw new Error("type is error");
		}
		return result;
	}
}
class UniformFloat extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = 0;
		this.byteSize = 4;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 1);
		this.type = "vec1";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		if (this.value !== this._value) {
			this._value = this.value;
			this.buffer[0] = this.value;
			return true;
		}
		return false;
	}
}
UniformFloat.align = 4;
class UniformFloatVec2 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Vector2();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 2);
		this.byteSize = 8;
		this.type = "vec2";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Vector2.equals(v, this._value)) {
			Vector2.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformFloatVec2.align = 8;
class UniformFloatVec3 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Vector3();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 3);
		this.byteSize = 12;
		this.type = "vec3";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Vector3.equals(v, this._value)) {
			Vector3.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformFloatVec3.align = 16;
class UniformFloatVec4 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Vector4();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 4);
		this.byteSize = 16;
		this.type = "vec4";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Vector4.equals(v, this._value)) {
			Vector4.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformFloatVec4.align = 16;
class UniformColor extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Color();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 3);
		this.byteSize = 12;
		this.type = "vec3";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Color.equals(v, this._value)) {
			Color.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformColor.align = 16;
class UniformMat2 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, offset);
		this.value = undefined;
		this._value = new Matrix2();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 4);
		this.byteSize = 16;
		this.type = "mat2";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Matrix2.equals(v, this._value)) {
			Matrix2.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformMat2.align = 8;
class UniformMat3 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Matrix3();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 9);
		this.byteSize = 48;
		this.type = "mat3";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Matrix3.equals(v, this._value)) {
			Matrix3.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformMat3.align = 16;
class UniformMat4 extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset) {
		super(uniformName, cb, binding, offset);
		this.value = undefined;
		this._value = new Matrix4();
		this.buffer = new Float32Array(buffer.buffer, byteOffset, 16);
		this.byteSize = 64;
		this.type = "mat4";
	}
	set() {
		if (this.cb != undefined) this.value = this.getValue();
		const v = this.value;
		if (!Matrix4.equals(v, this._value)) {
			Matrix4.clone(v, this._value);
			this.setBuffer(this._value.toArray());
			return true;
		}
		return false;
	}
}
UniformMat4.align = 16;
class UniformFloatArray extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, count);
		this.byteSize = 4 * count;
		this.type = "float-array";
	}
	set() {
		this.value = this.cb();
		for (let i = 0; i < this.value.length; i++) {
			this.buffer[i] = this.value[i];
		}
		return true;
	}
}
UniformFloatArray.align = 4;
class UniformVec2Array extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.byteSize = count * 8;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "vec2-array";
	}
	set() {
		this.value = this.cb();
		let j = 0;
		for (let i = 0; i < this.value.length; i++) {
			this.buffer[j] = this.value[i].x;
			this.buffer[j + 1] = this.value[i].y;
			j += 2;
		}
		return true;
	}
}
UniformVec2Array.align = 8;
class UniformVec3Array extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.byteSize = count * 16;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "vec3-array";
	}
	set() {
		this.value = this.cb();
		let j = 0;
		for (let i = 0; i < this.value.length; i++) {
			this.buffer[j] = this.value[i].x;
			this.buffer[j + 1] = this.value[i].y;
			this.buffer[j + 2] = this.value[i].z;
			this.buffer[j + 3] = 0;
			j += 4;
		}
		return true;
	}
}
UniformVec3Array.align = 16;
class UniformVec4Array extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.visibility = ShaderStage.Vertex | ShaderStage.Fragment;
		this.byteSize = count * 16;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "vec4-array";
	}
	set() {
		this.value = this.cb();
		let j = 0;
		for (let i = 0; i < this.value.length; i++) {
			this.buffer[j] = this.value[i].x;
			this.buffer[j + 1] = this.value[i].y;
			this.buffer[j + 2] = this.value[i].z;
			this.buffer[j + 3] = this.value[i].w;
			j += 4;
		}
		return true;
	}
}
UniformVec4Array.align = 16;
class UniformTexture extends Uniform {
	constructor(uniformName, binding, texture) {
		super(uniformName);
		this.binding = binding;
		this.type = "texture";
		this.visibility = ShaderStage.Fragment;
		this._texture = texture;
	}
	get layoutType() {
		return this.texture.layoutType;
	}
	bind(context) {
		this.texture = this._texture instanceof Function ? this._texture() : this._texture;
		this.texture.update(context);
	}
}
class UniformSampler extends Uniform {
	constructor(uniformName, binding, sampler) {
		super(uniformName);
		this.name = uniformName;
		this.binding = binding;
		this.type = "sampler";
		this.visibility = ShaderStage.Fragment;
		this._sampler = sampler;
	}
	get layoutType() {
		return this.sampler.layoutType;
	}
	bind(context) {
		this.sampler = this._sampler instanceof Function ? this._sampler() : this._sampler;
		this.sampler.update(context);
	}
}
class UniformSpotLights extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.cb = cb;
		this.byteSize = count * 64;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "spotsLight";
		this.visibility = ShaderStage.Fragment;
	}
	set() {
		this.lights = this.cb();
		this.lights.forEach((spotLight, index) => {
			this.setSubData(spotLight, index);
		});
	}
	setSubData(spotLight, index) {
		const offset = index * 16;
		if (spotLight.positionDirty) {
			spotLight.positionDirty = false;
			setDataToTypeArray(this.buffer, spotLight.positionVC.toArray(), offset + 0); //byteOffset=0;
		}
		if (spotLight.distanceDirty) {
			spotLight.distanceDirty = false;
			setDataToTypeArray(this.buffer, spotLight.distance, offset + 3); //byteOffset=12;
		}
		if (spotLight.dirtectDirty) {
			spotLight.dirtectDirty = false;
			setDataToTypeArray(this.buffer, spotLight.dirtectVC.toArray(), offset + 4); //byteOffset=16;
		}
		if (spotLight.coneCosDirty) {
			spotLight.coneCosDirty = false;
			setDataToTypeArray(this.buffer, spotLight.coneCos, offset + 7); //byteOffset=28;
		}
		if (spotLight.colorDirty) {
			spotLight.colorDirty = false;
			setDataToTypeArray(this.buffer, spotLight.color.toArray(), offset + 8); //byteOffset=32;
		}
		if (spotLight.penumbraCosDirty) {
			spotLight.penumbraCosDirty = false;
			setDataToTypeArray(this.buffer, spotLight.penumbraCos, offset + 11); //byteOffset=44;
		}
		if (spotLight.decayDirty) {
			spotLight.decayDirty = false;
			setDataToTypeArray(this.buffer, spotLight.decay, offset + 12); //byteOffset=48;
		}
	}
}
UniformSpotLights.align = 16;
class UniformPointLights extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.cb = cb;
		this.byteSize = count * 32;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "pointsLight";
		this.visibility = ShaderStage.Fragment;
	}
	set() {
		this.lights = this.cb();
		this.lights.forEach((pointLight, index) => {
			this.setSubData(pointLight, index);
		});
	}
	setSubData(pointLight, index) {
		const offset = index * 8;
		if (pointLight.positionDirty) {
			pointLight.positionDirty = false;
			setDataToTypeArray(this.buffer, pointLight.positionVC.toArray(), offset + 0); //byteOffset=0;
		}
		if (pointLight.distanceDirty) {
			pointLight.distanceDirty = false;
			setDataToTypeArray(this.buffer, pointLight.distance, offset + 3); //byteOffset=12;
		}
		if (pointLight.colorDirty) {
			pointLight.colorDirty = false;
			setDataToTypeArray(this.buffer, pointLight.color.toArray(), offset + 4); //byteOffset=32;
		}
		if (pointLight.decayDirty) {
			pointLight.decayDirty = false;
			setDataToTypeArray(this.buffer, pointLight.decay, offset + 7); //byteOffset=12;
		}
	}
}
UniformPointLights.align = 16;
class UniformDirtectLights extends Uniform {
	constructor(uniformName, buffer, byteOffset, cb, binding, offset, count) {
		super(uniformName, cb, binding, offset);
		this.cb = cb;
		this.byteSize = count * 32;
		this.buffer = new Float32Array(buffer.buffer, byteOffset, this.byteSize / 4);
		this.type = "dirtectLights";
		this.visibility = ShaderStage.Fragment;
	}
	set() {
		this.lights = this.cb();
		this.lights.forEach((directionalLight, index) => {
			this.setSubData(directionalLight, index);
		});
	}
	setSubData(directionalLight, index) {
		const offset = index * 8;
		if (directionalLight.dirtectDirty) {
			directionalLight.dirtectDirty = false;
			setDataToTypeArray(this.buffer, directionalLight.dirtectVC.toArray(), offset + 0); //byteOffset=16;
		}
		if (directionalLight.colorDirty) {
			directionalLight.colorDirty = false;
			setDataToTypeArray(this.buffer, directionalLight.color.toArray(), offset + 4); //byteOffset=32;
		}
	}
}
UniformDirtectLights.align = 16;
function setDataToTypeArray(buffer, data, offset) {
	if (Array.isArray(data)) {
		data.forEach((value, index) => {
			buffer[index + offset] = value;
		});
	} else {
		buffer[offset] = data;
	}
}

class BindGroupEntity {
	constructor(options) {
		this.binding = options.binding;
		this.resource = options.resource;
	}
	getGPUGroupEntity() {
		return {
			binding: this.binding,
			resource: this.resource
		};
	}
}

class BindGroupLayoutEntry {
	constructor(options) {
		this.binding = options.binding;
		this.visibility = options.visibility;
		this.buffer = options.buffer;
		this.sampler = options.sampler;
		this.texture = options.texture;
		this.storageTexture = options.storageTexture;
		this.externalTexture = options.storageTexture;
	}
	getGPULayoutEntity() {
		return {
			binding: this.binding,
			visibility: this.visibility,
			buffer: this.buffer,
			sampler: this.sampler,
			texture: this.texture,
			storageTexture: this.storageTexture
		};
	}
}

const layoutCache = new Map();
class BindGroupLayout {
	constructor(device, label, entries = [], index = 0) {
		this.entries = entries;
		this.index = index || 0;
		this.gpuBindGroupLayout = device.createBindGroupLayout({
			label: label,
			entries: entries.map(({ visibility, buffer, sampler, texture, storageTexture, binding }) => ({
				binding,
				visibility,
				buffer,
				sampler,
				texture,
				storageTexture
			}))
		});
	}
	static getBindGroupLayoutFromCache(device, label, entires, index) {
		if (layoutCache.has(label)) {
			return layoutCache.get(label);
		} else {
			const bindGroupLayout = new BindGroupLayout(device, label, entires, index);
			layoutCache.set(label, bindGroupLayout);
			return bindGroupLayout;
		}
	}
	static removeBindGroupLayoutFromCache(bindGroupLayout) {
		layoutCache.delete(bindGroupLayout);
	}
}

const bindGroupCache = new Map();
class BindGroup {
	constructor(options) {
		this.index = options.index || 0;
		this.gpuBindGroup = options.device.createBindGroup({
			label: options.label,
			layout: options.layout.gpuBindGroupLayout,
			entries: options.entires.map((entity) => ({
				binding: entity.binding,
				resource: entity.resource
			}))
		});
	}
	bind(passEncoder) {
		passEncoder.setBindGroup(this.index, this.gpuBindGroup);
	}
	static getBindGroupFromCache(options) {
		if (bindGroupCache.has(options.label)) {
			return bindGroupCache.get(options.label);
		} else {
			//@ts-ignore
			const bindGroup = new BindGroup(options);
			bindGroupCache.set(options.label, bindGroup);
			return bindGroup;
		}
	}
	static removeBindGroupFromCache(bindGroup) {
		bindGroupCache.delete(bindGroup);
	}
}

class ShaderData {
	constructor(label, size, layoutIndex, groupIndex) {
		this.label = label;
		this.textureBinding = 1;
		this.defineDirty = true;
		this.defines = {};
		this._uniforms = new Map();
		this.groupIndex = defaultValue(groupIndex, 0);
		this.layoutIndex = defaultValue(layoutIndex, 0);
	}
	setUniformBuffer(name, uniformBuffer) {
		if (this._uniforms.get(name)) return;
		this._uniforms.set(name, uniformBuffer);
	}
	setTexture(name, value, binding) {
		if (this._uniforms.get(name)) return;
		const uniform = new UniformTexture(name, this.textureBinding, value);
		this.setDefine(name.concat("Binding"), this.textureBinding);
		this.textureBinding += 1;
		this._uniforms.set(name, uniform);
	}
	setSampler(name, value, binding) {
		if (this._uniforms.get(name)) return;
		const uniform = new UniformSampler(name, this.textureBinding, value);
		this.setDefine(name.concat("Binding"), this.textureBinding);
		this.textureBinding += 1;
		this._uniforms.set(name, uniform);
	}
	setDefine(name, value) {
		if (this.defines[name] === undefined) {
			this.defineDirty = true;
			this.defines[name] = value;
		} else {
			if (this.defines[name] === value) {
				return;
			} else {
				this.defineDirty = true;
				this.defines[name] = value;
			}
		}
	}
	replaceUniformBufferValue(name, value) {
		this._uniforms.forEach((uniform) => {
			if (uniform?.isUniformBuffer) {
				uniform.replaceUniformValue(name, value);
			}
		});
	}
	bind(context, passEncoder) {
		this.uploadUniform(context);
		const { groupLayout, bindGroup } = this.createBindGroupAndLayout(
			context.device,
			this.label,
			this.layoutIndex,
			this.groupIndex
		);
		bindGroup.bind(passEncoder);
		this.bindGroup = bindGroup;
		this.groupLayout = groupLayout;
	}
	destroy() {
		this._uniforms.forEach((uniform) => {
			if (uniform.destroy) uniform?.destroy();
		});
		this.label = undefined;
		this.textureBinding = 1;
		this.defineDirty = true;
		this.defines = {};
		this._uniforms.clear();
		BindGroupLayout.removeBindGroupLayoutFromCache(this.groupLayout);
		BindGroup.removeBindGroupFromCache(this.bindGroup);
	}
	getBindGroupAndLayout(device, label, index) {
		const layoutEntities = this.createBindGroupLayoutEntry();
		const groupLayout = BindGroupLayout.getBindGroupLayoutFromCache(device, label, layoutEntities, index);
		const groupEntities = this.createBindGroupEntity();
		const bindGroup = BindGroup.getBindGroupFromCache({
			label: label,
			entires: groupEntities,
			device: device,
			layout: groupLayout,
			index: index
		});
		return { groupLayout, bindGroup };
	}
	createBindGroupAndLayout(device, label, layoutIndex, groupIndex) {
		const layoutEntities = this.createBindGroupLayoutEntry();
		const groupLayout = BindGroupLayout.getBindGroupLayoutFromCache(
			device,
			label,
			layoutEntities,
			layoutIndex || 0
		);
		const groupEntities = this.createBindGroupEntity();
		const bindGroup = BindGroup.getBindGroupFromCache({
			label: label,
			entires: groupEntities,
			device: device,
			layout: groupLayout,
			index: groupIndex || 0 //后续改成groupIndex
		});
		return { groupLayout, bindGroup };
	}
	uploadUniform(context) {
		this._uniforms.forEach((uniform) => {
			uniform.bind(context);
		});
	}
	createBindGroupLayoutEntry() {
		const result = new Map();
		this._uniforms.forEach((uniform) => {
			if (!result.has(uniform.binding)) {
				result.set(uniform.binding, this.createOneLayoutEntry(uniform));
			}
		});
		const lauoutEntityArray = [];
		result.forEach((value) => {
			lauoutEntityArray.push(value);
		});
		return lauoutEntityArray;
	}
	createBindGroupEntity() {
		const result = new Map();
		this._uniforms.forEach((uniform) => {
			if (!result.has(uniform.binding)) {
				result.set(uniform.binding, this.creayeOneGroupEntity(uniform));
			}
		});
		const groupEntityArray = [];
		result.forEach((value) => {
			groupEntityArray.push(value);
		});
		return groupEntityArray;
	}
	createOneLayoutEntry(uniform) {
		let layoutEntity;
		if (uniform.type === "uniform" || uniform.type === "read-only-storage") {
			layoutEntity = new BindGroupLayoutEntry({
				binding: uniform.binding,
				buffer: uniform.layoutType,
				visibility: uniform.visibility
			});
		} else if (uniform.type === "texture") {
			layoutEntity = new BindGroupLayoutEntry({
				binding: uniform.binding,
				visibility: uniform.visibility,
				texture: uniform.layoutType
			});
		} else if (uniform.type === "sampler") {
			layoutEntity = new BindGroupLayoutEntry({
				binding: uniform.binding,
				visibility: uniform.visibility,
				sampler: uniform.layoutType
			});
		}
		return layoutEntity;
	}
	creayeOneGroupEntity(uniform) {
		let groupEntity;
		if (uniform.type === "uniform" || uniform.type === "read-only-storage") {
			groupEntity = new BindGroupEntity({
				binding: uniform.binding,
				resource: {
					buffer: uniform.buffer.gpuBuffer,
					offset: uniform.offset,
					size: uniform.bufferSize
				}
			});
		} else if (uniform.type === "texture") {
			groupEntity = new BindGroupEntity({
				binding: uniform.binding,
				resource: uniform.texture.textureView
			});
		} else if (uniform.type === "sampler") {
			groupEntity = new BindGroupEntity({
				binding: uniform.binding,
				resource: uniform.sampler.gpuSampler
			});
		}
		return groupEntity;
	}
}

class UniformBuffer {
	constructor(type, usage, size, dataBuffer, binding) {
		this.type = defaultValue(type, "uniform");
		(this.hasDynamicOffset = false), (this.minBindingSize = 0);
		this.binding = defaultValue(binding, 0);
		this.visibility = ShaderStage.Fragment | ShaderStage.Vertex;
		this.usage = defaultValue(usage, BufferUsage.Uniform | BufferUsage.CopyDst);
		this._uniforms = new Map();
		this.uniformDirty = true;
		this._bufferSize = size;
		this.offset = 0;
		this.dataBuffer = defaultValue(dataBuffer, new Float32Array(defaultValue(this._bufferSize, 400)));
		this.byteOffset = 0;
		this.isUniformBuffer = true;
	}
	get layoutType() {
		return {
			type: this.type,
			hasDynamicOffset: this.hasDynamicOffset,
			minBindingSize: this.minBindingSize
		};
	}
	get bufferSize() {
		return defaultValue(this._bufferSize, this.uniformsSize * 4);
	}
	get uniformsSize() {
		//https://gpuweb.github.io/gpuweb/wgsl/#address-space-layout-constraints
		return Math.ceil(this.byteOffset / 16) * 16;
	}
	bind(context) {
		this._uniforms.forEach((uniform) => {
			const result = uniform.set();
			if (result != undefined && this.uniformDirty == false) this.uniformDirty = result;
		});
		if (this.uniformDirty) {
			this.uniformDirty = false;
			if (!this.buffer) this.buffer = Buffer.createUniformBuffer(context.device, this.bufferSize, this.usage);
			this.buffer.setSubData(0, this.dataBuffer.slice(0, defaultValue(this?.bufferSize / 4, this.uniformsSize)));
		}
	}
	getUniformBufferStruct() {
		let uniformStruct = `struct MaterialUniform {\n `;
		this._uniforms.forEach((uniform) => {
			uniformStruct += this.createUniformString(uniform);
		});
		uniformStruct += `}\n`;
		return uniformStruct;
	}
	createUniformString(uniform) {
		let result = ``;
		switch (uniform.type) {
			case "vec1":
				result = `${uniform.name} :f32,\n`;
				break;
			case "vec2":
				result = `${uniform.name} :vec2<f32>,\n`;
				break;
			case "vec3":
				result = `${uniform.name} :vec3<f32>,\n`;
				break;
			case "vec4":
				result = `${uniform.name} :vec4<f32>,\n`;
				break;
			case "mat2":
				result = `${uniform.name} :mat2x2<f32>,\n`;
				break;
			case "mat3":
				result = `${uniform.name} :mat3x3<f32>,\n`;
				break;
			case "mat4":
				result = `${uniform.name} :mat4x4<f32>,\n`;
				break;
		}
		return result;
	}
	setFloat(name, value, binding) {
		if (this._uniforms.get(name)) return;
		const uniform = new UniformFloat(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setFloatVec2(name, value, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformFloatVec2.align);
		const uniform = new UniformFloatVec2(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setFloatVec3(name, value, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformFloatVec3.align);
		const uniform = new UniformFloatVec3(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setColor(name, value, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformColor.align);
		const uniform = new UniformColor(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setFloatVec4(name, value, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformFloatVec4.align);
		const uniform = new UniformFloatVec4(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setMatrix2(name, value, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformMat2.align);
		const uniform = new UniformMat2(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setMatrix3(name, value, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformMat3.align);
		const uniform = new UniformMat3(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setMatrix4(name, value, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformMat4.align);
		const uniform = new UniformMat4(name, this.dataBuffer, this.byteOffset, value, binding);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	replaceUniformValue(name, value) {
		const uniform = this._uniforms.get(name);
		if (!uniform) console.error("not find uniform");
		uniform.cb = value;
	}
	// uniformBuffer.setVec3Array('test',()=>{return [new Vector3(1,0,0),new Vector3(1,0.8,0.5)]},2);
	// uniformBuffer.setFloatArray('test1',()=>{return [0.5,0.5,1.0]},3);
	// uniformBuffer.setVec4Array('test4',()=>{return [new Vector4(0.5,0.6,0.2,1.0),new Vector4(0.5,0.8,0.8,1.0)]},2);
	// uniformBuffer.setVec2Array('test2',()=>{return [new Vector2(0.5,0.6),new Vector2(0.5,0.8,)]},2);
	setFloatArray(name, value, count, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformFloatArray.align);
		const uniform = new UniformFloatArray(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setVec2Array(name, value, count, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformVec2Array.align);
		const uniform = new UniformVec2Array(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setVec3Array(name, value, count, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformVec3Array.align);
		const uniform = new UniformVec3Array(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setVec4Array(name, value, count, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformVec4Array.align);
		const uniform = new UniformVec4Array(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setSpotLights(name, value, count, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformSpotLights.align);
		const uniform = new UniformSpotLights(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setPointLights(name, value, count, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformPointLights.align);
		const uniform = new UniformPointLights(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	setDirtectLights(name, value, count, binding) {
		if (this._uniforms.get(name)) return;
		this.byteOffset += this.checkUniformOffset(this.byteOffset, UniformDirtectLights.align);
		const uniform = new UniformDirtectLights(name, this.dataBuffer, this.byteOffset, value, binding, 0, count);
		this._uniforms.set(name, uniform);
		this.byteOffset += uniform.byteSize;
	}
	checkUniformOffset(byteSize, Align) {
		//from https://gpuweb.github.io/gpuweb/wgsl/#address-space-layout-constraints
		return Math.ceil(byteSize / Align) * Align - byteSize;
	}
	destroy() {
		this.buffer.destroy();
	}
}

class LightManger {
	constructor() {
		this.spotLights = [];
		this.pointLights = [];
		this.dirtectLights = [];
		this.ambientLight = undefined;
		this.lightCountDirty = false;
	}
	update(frameState, camera) {
		this.updateLight(camera);
	}
	add(light) {
		this.lightCountDirty = true;
		if (light.type == "ambient") {
			this.ambientLight = light;
		} else if (light.type == "directional") {
			this.dirtectLights.push(light);
		} else if (light.type == "point") {
			this.pointLights.push(light);
		} else if (light.type == "spot") {
			this.spotLights.push(light);
		}
	}
	remove() {}
	updateLight(camera) {
		this.updateLightData(camera);
		if (this.lightCountDirty) {
			this.lightCountDirty = false;
			if (this.lightShaderData) this.lightShaderData.destroy();
			this.createLightShaderData();
		}
	}
	updateLightData(camera) {
		this.updateSpotLight(camera);
		this.updatePointLight(camera);
		this.updateDirtectLight(camera);
	}
	updateSpotLight(camera) {
		this.spotLights.forEach((light) => {
			light.update(camera);
		});
	}
	updatePointLight(camera) {
		this.pointLights.forEach((light) => {
			light.update(camera);
		});
	}
	updateDirtectLight(camera) {
		this.dirtectLights.forEach((light) => {
			light.update(camera);
		});
	}
	createLightShaderData() {
		this.lightShaderData = new ShaderData("light", 0, 2, 2);
		this.lightUniformBuffer = new UniformBuffer("read-only-storage", BufferUsage.Storage | BufferUsage.CopyDst);
		this.lightShaderData.setDefine("spotLightsCount", this.spotLights.length);
		this.lightShaderData.setDefine("pointLightsCount", this.pointLights.length);
		this.lightShaderData.setDefine("dirtectLightsCount", this.dirtectLights.length);
		this.lightShaderData.setDefine("ambientLightCount", this.ambientLight != undefined ? 1 : 0);
		if (this.ambientLight)
			this.lightUniformBuffer.setFloatVec3("ambientLight", () => {
				return this.ambientLight.color;
			});
		if (this.spotLights.length) {
			//初始化聚光灯
			this.lightUniformBuffer.setSpotLights(
				"spotLights",
				() => {
					return this.spotLights;
				},
				this.spotLights.length
			);
		}
		if (this.pointLights.length) {
			//点光源
			this.lightUniformBuffer.setPointLights(
				"pointLights",
				() => {
					return this.pointLights;
				},
				this.pointLights.length
			);
		}
		if (this.dirtectLights.length) {
			//方向光
			this.lightUniformBuffer.setDirtectLights(
				"dirtectLights",
				() => {
					return this.dirtectLights;
				},
				this.dirtectLights.length
			);
		}
		this.lightShaderData.setUniformBuffer("light", this.lightUniformBuffer);
	}
	getAllLights() {
		const result = [];
		return result.concat(this.spotLights, this.pointLights, this.dirtectLights);
	}
	destroy() {
		this.lightShaderData.destroy();
		this.lightUniformBuffer.destroy();
	}
}

class Context {
	constructor({ canvas, container, context, pixelRatio } = {}) {
		this.canvas = canvas || document.createElement("canvas");
		this.canvas.style.display = "block";
		this.canvas.width = window.innerWidth;
		this.canvas.height = window.innerHeight;
		container.appendChild(this.canvas);
		this.context = context || this.canvas.getContext("webgpu");
		this.pixelRatio = pixelRatio || window.devicePixelRatio || 1;
		this.device = undefined;
		this.lightManger = new LightManger();
	}
	async init(requestAdapter = {}, deviceDescriptor = {}, presentationContextDescriptor = {}) {
		try {
			if (!this.context) {
				throw new Error(`Failed to instantiate "webgpu" context.`);
			}
			if (!navigator.gpu) {
				throw new Error(`Missing "navigator.gpu".`);
			}
			this.adapter = await navigator.gpu.requestAdapter();
			this.device = await this.adapter.requestDevice();
			this.presentationSize = {
				width: this.canvas.clientWidth * this.pixelRatio,
				height: this.canvas.clientHeight * this.pixelRatio,
				depth: 1
			};
			this.presentationFormat = navigator.gpu.getPreferredCanvasFormat();
			this.device.addEventListener("uncapturederror", (error) => {
				console.error(error);
				//State.error = true;
			});
			this.mipmapTools = new MipmapGenerator(this.device);
			this.context.configure({
				device: this.device,
				format: this.presentationFormat,
				usage: TextureUsage.RenderAttachment,
				alphaMode: "opaque",
				...presentationContextDescriptor
			});
			this._viewPort = {
				x: 0,
				y: 0,
				width: this.canvas.clientWidth * this.pixelRatio,
				height: this.canvas.clientHeight * this.pixelRatio
			};
			this._scissorTestEnabled = false;
		} catch (error) {
			console.error(error);
			return false;
		}
		return true;
	}
	setViewPort(x, y, width, height) {
		this._viewPort = { x, y, width, height };
	}
	setScissorTest(x, y, width, height) {
		this._scissorTestEnabled = true;
		this._scissorTest = { x, y, width, height };
	}
	resize(width, height, presentationContextDescriptor = {}) {
		const w = width * this.pixelRatio;
		const h = height * this.pixelRatio;
		this.canvas.width = w;
		this.canvas.height = h;
		Object.assign(this.canvas.style, { width, height });
		this.context.configure({
			device: this.device,
			format: navigator.gpu.getPreferredCanvasFormat(),
			usage: TextureUsage.RenderAttachment,
			alphaMode: GPUCanvasCompositingAlphaMode.Premultiplied,
			...presentationContextDescriptor
		});
	}
	render(command, passEncoder, camera) {
		const grouplayouts = [];
		if (command.shaderData) {
			if (command.modelMatrix) command.shaderData.replaceUniformBufferValue("modelMatrix", command.modelMatrix);
			command.shaderData.bind(this, passEncoder);
		}
		//设置系统
		if (camera) {
			camera.shaderData.bind(this, passEncoder);
			grouplayouts.push(camera.shaderData.groupLayout);
		}
		if (command.light && this.lightManger.lightShaderData) {
			this.lightManger.lightShaderData.bind(this, passEncoder);
			grouplayouts.push(this.lightManger.lightShaderData.groupLayout);
			if (command.shaderSource) command.shaderSource.setDefines(this.lightManger.lightShaderData.defines);
		}
		if (command.renderState) command.renderState.bind(passEncoder, this);
		if (command.vertexBuffer) command.vertexBuffer.bind(this.device, passEncoder);
		if (command.indexBuffer) command.indexBuffer.bind(this.device, passEncoder);
		const pipeline = Pipeline.getRenderPipelineFromCache(
			this.device,
			command,
			grouplayouts.concat(command.shaderData.groupLayout)
		);
		pipeline.bind(passEncoder);
		if (command.indexBuffer) {
			passEncoder.drawIndexed(command.count || 0, command.instances || 1, 0, 0, 0);
		} else if (command.count) {
			passEncoder.draw(command.count, command.instances || 1, 0, 0);
		}
	}
	compute(command, passEncoder) {
		const pipeline = Pipeline.getComputePipelineFromCache(this.device, command, [command.shaderData.groupLayout]);
		pipeline.bind(passEncoder);
		const { x, y, z } = command.dispatch;
		passEncoder.dispatchWorkgroups(x, y, z);
	}
}

class Texture {
	constructor(textureProp) {
		this.textureProp = Object.assign(
			{
				format: TextureFormat.RGBA8Unorm,
				usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT
			},
			textureProp
		);
		this.sampler = textureProp.sampler;
		this.dirty = true;
	}
	get layoutType() {
		const { viewFormats, sampleType, sampleCount } = this.textureProp;
		// const
		return {
			sampleType: defaultValue(sampleType, "float"),
			viewDimension: defaultValue(viewFormats, "2d"),
			multisampled: sampleCount && sampleCount > 1 ? true : false
		};
	}
	get textureView() {
		if (!this._textureView)
			this._textureView = this.gpuTexture.createView({
				dimension: defaultValue(this.textureProp.viewFormats, "2d")
			});
		return this._textureView;
	}
	update(context) {
		// todo 仅考虑重建（size改变），后续要考虑data改变
		if (!this.context) this.context = context;
		if (this.dirty) {
			if (this.gpuTexture) this.gpuTexture.destroy();
			this.gpuTexture = this.createGPUTexture();
			this.dirty = false;
			if (this.textureProp.data) {
				if (Array.isArray(this.textureProp.data)) {
					this.textureProp.data.forEach((imageData) => {
						this.setData(imageData);
					});
				} else {
					this.setData(this.textureProp.data);
				}
			}
			if (this.textureProp.needMipMap) {
				this.gpuTexture = context.mipmapTools.generateMipmap(this);
			}
			if (this.sampler) this.sampler.update(context);
		}
	}
	setData(options) {
		const {
			source,
			width = options.source.width,
			height = options.source.height,
			depth = 1,
			sourceX = 0,
			sourceY = 0,
			mipLevel = 0,
			x = 0,
			y = 0,
			z = 0,
			aspect = "all",
			colorSpace = "srgb",
			premultipliedAlpha = false
		} = options;
		this.context.device.queue.copyExternalImageToTexture(
			{
				source,
				origin: [sourceX, sourceY]
			},
			{
				texture: this.gpuTexture,
				origin: [x, y, z],
				mipLevel,
				aspect,
				colorSpace,
				premultipliedAlpha
			},
			[width, height, depth]
		);
	}
	setSize(width, height, depth) {
		this.textureProp.size.width = width;
		this.textureProp.size.height = height;
		if (depth) this.textureProp.size.depth = depth;
		this.dirty = true;
	}
	destroy() {
		this.gpuTexture.destroy();
	}
	createGPUTexture() {
		if (typeof this.textureProp.format === "number") {
			throw new Error("number format");
		}
		const { width, height, depth } = this.textureProp.size;
		return this.context.device.createTexture({
			size: [width, height, depth],
			dimension: this.textureProp.dimension || "2d",
			format: this.textureProp.format,
			usage: this.textureProp.usage,
			mipLevelCount: this.textureProp.mipLevelCount || 1,
			sampleCount: this.textureProp.sampleCount || 1
		});
	}
}

class Sampler {
	constructor(
		descriptor = {
			magFilter: "linear",
			minFilter: "linear",
			// mipmapFilter: "linear",
			addressModeU: "clamp-to-edge",
			addressModeV: "clamp-to-edge"
			// addressModeW: "clamp-to-edge",
		}
	) {
		this.descriptor = descriptor;
		this.layoutType = {
			type: "filtering"
		};
	}
	update(context) {
		if (!this.gpuSampler) this.gpuSampler = context.device.createSampler(this.descriptor);
	}
}

class RenderState {
	constructor() {
		this.scissorTest = undefined;
		this.viewport = undefined;
		this.depthStencil = undefined;
		this.blendConstant = undefined;
		this.stencilReference = 0;
		this.multisample = undefined;
		this.primitive = undefined;
		this.stencilEnabled = false;
		this.scissorTestEnabled = false;
		this.targets = undefined;
	}
	bind(passEncoder, context) {
		// const {width,height}=context.presentationSize;
		// this.setViewPort(400,0,400,900);
		// this.setScissorRect(400,0,400,900)
		// if (this.stencilReference) passEncoder.setStencilReference(this.stencilReference);
		// if (this.viewport.equalsAndUpdateCache(cacheViewPort)) {
		// 	const { x, y, width, height, minDepth, maxDepth } = this.viewport;
		// passEncoder.setViewport(0, 0, 400, 400, 0, 1);
		//}
		if (this.blendConstant) passEncoder.setBlendConstant(this.blendConstant);
		// if (this.scissorTest.equalsAndUpdateCache(cacheScissorTest)) {
		// 	const { x, y, width, height } = this.scissorTest;
		// 	passEncoder.setScissorRect(x, y, width, height);
		// }
	}
	setViewPort(x, y, width, height, minDepth = 0, maxDepth = 1) {
		if (this.viewport) {
			this.viewport.set(x, y, width, height, minDepth, maxDepth);
		} else {
			this.viewport = new ViewPort(x, y, width, height, minDepth, maxDepth);
		}
	}
	setScissorRect(x, y, width, height) {
		if (this.scissorTest) {
			this.scissorTest.set(x, y, width, height);
		} else {
			this.scissorTest = new ScissorTest(x, y, width, height);
		}
	}
	destroy() {
		this.scissorTest = undefined;
		this.viewport = undefined;
		this.depthStencil = undefined;
		this.blendConstant = undefined;
		this.stencilReference = -1;
		this.multisample = undefined;
		this.primitive = undefined;
		this.stencilEnabled = false;
		this.scissorTestEnabled = false;
	}
}
class ScissorTest {
	constructor(x = 0, y = 0, width = 0, height = 0, variable = true) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.variable = variable;
	}
	set(x, y, width, height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	equalsAndUpdateCache(scissorTest) {
		const { x, y, width, height } = scissorTest;
		if (this.x != x || this.y != y || this.width != width || this.height != height) {
			scissorTest.set(this.x, this.y, this.width, this.height);
			return true;
		}
		return false;
	}
}
class ViewPort {
	constructor(x = 0, y = 0, width = 0, height = 0, minDepth = 0, maxDepth = 1, variable = true) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.minDepth = minDepth;
		this.maxDepth = maxDepth;
		this.variable = variable;
	}
	set(x, y, width, height, minDepth = 0, maxDepth = 1) {
		if (!this.variable) return;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.minDepth = minDepth;
		this.maxDepth = maxDepth;
	}
	equalsAndUpdateCache(viewPort) {
		const { x, y, width, height, minDepth, maxDepth } = viewPort;
		if (
			this.x != x ||
			this.y != y ||
			this.width != width ||
			this.height != height ||
			this.minDepth != minDepth ||
			this.maxDepth != maxDepth
		) {
			viewPort.set(this.x, this.y, this.width, this.height, this.minDepth, this.maxDepth);
			return true;
		}
		return false;
	}
}
class Primitive {
	constructor(topology, cullMode, frontFace, unclippedDepth) {
		this.frontFace = defaultValue(frontFace, FrontFace.CCW);
		this.cullMode = defaultValue(cullMode, CullMode.None);
		this.unclippedDepth = defaultValue(unclippedDepth, false);
		this.topology = defaultValue(topology, PrimitiveTopology.TriangleList);
	}
	getGPUPrimitiveDec() {
		return {
			frontFace: this.frontFace,
			cullMode: this.cullMode,
			unclippedDepth: this.unclippedDepth,
			topology: this.topology
		};
	}
}
class DepthStencil {
	constructor(options) {
		this.format = defaultValue(options?.format, TextureFormat.Depth24Plus);
		this.depthWriteEnabled = defaultValue(options?.depthWriteEnabled, true);
		this.depthCompare = defaultValue(options?.depthCompare, CompareFunction.Less);
		this.stencilReadMask = defaultValue(options?.stencilReadMask, 0xffffffff);
		this.stencilWriteMask = defaultValue(options?.stencilWriteMask, 0xffffffff);
		this.stencilFrontCompare = defaultValue(options?.stencilFrontCompare, CompareFunction.Always);
		this.stencilFrontFailOp = defaultValue(options?.stencilFrontFailOp, StencilOperation.Keep);
		this.stencilFrontDepthFailOp = defaultValue(options?.stencilFrontDepthFailOp, StencilOperation.Keep);
		this.stencilFrontPassOp = defaultValue(options?.stencilFrontPassOp, StencilOperation.Keep);
		this.stencilBackCompare = defaultValue(options?.stencilBackCompare, CompareFunction.Always);
		this.stencilBackFailOp = defaultValue(options?.stencilBackFailOp, StencilOperation.Keep);
		this.stencilBackDepthFailOp = defaultValue(options?.stencilBackDepthFailOp, StencilOperation.Keep);
		this.stencilBackPassOp = defaultValue(options?.stencilBackPassOp, StencilOperation.Keep);
		this.depthBias = defaultValue(options?.depthBias, 0);
		this.depthBiasSlopeScale = defaultValue(options?.depthBiasSlopeScale, 0);
		this.depthBiasClamp = defaultValue(options?.depthBiasClamp, 0);
	}
	getGPUDepthStencilDec() {
		return {
			format: this.format,
			depthWriteEnabled: this.depthWriteEnabled,
			depthCompare: this.depthCompare,
			stencilReadMask: this.stencilReadMask,
			stencilWriteMask: this.stencilWriteMask,
			stencilFront: {
				compare: this.stencilFrontCompare,
				failOp: this.stencilFrontFailOp,
				depthFailOp: this.stencilFrontDepthFailOp,
				passOp: this.stencilFrontPassOp
			},
			stencilBack: {
				compare: this.stencilBackCompare,
				failOp: this.stencilBackFailOp,
				depthFailOp: this.stencilBackDepthFailOp,
				passOp: this.stencilBackPassOp
			},
			depthBias: this.depthBias,
			depthBiasSlopeScale: this.depthBiasSlopeScale,
			depthBiasClamp: this.depthBiasClamp
		};
	}
}
class Target {
	constructor(options) {
		this.format = defaultValue(options?.format, TextureFormat.BGRA8Unorm);
		this.blendColorOperation = defaultValue(options?.blendColorOperation, BlendOperation.Add);
		this.blendColorSrcFactor = defaultValue(options?.blendColorSrcFactor, BlendFactor?.SrcAlpha);
		this.blendColorDstFactor = defaultValue(options?.blendColorDstFactor, BlendFactor.OneMinusSrcAlpha);
		this.blendAlphaOperation = defaultValue(options?.blendAlphaOperation, BlendOperation.Add);
		this.blendAlphaSrcFactor = defaultValue(options?.blendAlphaSrcFactor, BlendFactor.One);
		this.blendAlphaDstFactor = defaultValue(options?.blendAlphaDstFactor, BlendFactor.One);
		this.writeMask = defaultValue(options?.writeMask, GPUColorWrite.All);
	}
	getGPUTargetDec() {
		return {
			format: this.format,
			blend: {
				color: {
					operation: this.blendColorOperation,
					srcFactor: this.blendColorSrcFactor,
					dstFactor: this.blendColorDstFactor
				},
				alpha: {
					operation: this.blendAlphaOperation,
					srcFactor: this.blendAlphaSrcFactor,
					dstFactor: this.blendAlphaDstFactor
				}
			},
			writeMask: this.writeMask
		};
	}
}
new ViewPort();
new ScissorTest();

class Attachment {
	constructor(value, options) {
		this.value = value;
		this.op = "clear";
		this.storeOp = "store";
		Object.assign(this, options);
	}
}

class Attribute {
	constructor(name, value, itemSize) {
		this.name = name;
		this.value = value;
		this.itemSize = itemSize;
		this.name = name;
		this.offset = 0;
		this.shaderLocation = 0;
	}
	getGPUAttribute() {
		return {
			shaderLocation: this.shaderLocation,
			format: this.format,
			offset: this.offset
		};
	}
	destroy() {
		this.value = [];
	}
	applyMatrix3(matrix3) {
		if (this.itemSize === 2) {
			for (let i = 0, l = this.value.length / this.itemSize; i < l; i++) {
				Attribute.v2.fromBufferAttribute(this, i);
				Attribute.v2.applyMatrix3(matrix3);
				this.setXY(i, Attribute.v2.x, Attribute.v2.y);
			}
		} else if (this.itemSize === 3) {
			for (let i = 0, l = this.value.length / this.itemSize; i < l; i++) {
				Attribute.v3.fromBufferAttribute(this, i);
				Attribute.v3.applyMatrix3(matrix3);
				this.setXYZ(i, Attribute.v3.x, Attribute.v3.y, Attribute.v3.z);
			}
		}
		return this;
	}
	applyMatrix4(matrix4) {
		for (let i = 0, l = this.value.length / this.itemSize; i < l; i++) {
			Attribute.v3.fromBufferAttribute(this, i);
			Attribute.v3.applyMatrix4(matrix4);
			this.setXYZ(i, Attribute.v3.x, Attribute.v3.y, Attribute.v3.z);
		}
		return this;
	}
	setX(index, x) {
		this.value[index * this.itemSize] = x;
		return this;
	}
	getX(index) {
		let x = this.value[index * this.itemSize];
		return x;
	}
	setY(index, y) {
		this.value[index * this.itemSize + 1] = y;
		return this;
	}
	getY(index) {
		let y = this.value[index * this.itemSize + 1];
		return y;
	}
	setZ(index, z) {
		this.value[index * this.itemSize + 2] = z;
		return this;
	}
	getZ(index) {
		let z = this.value[index * this.itemSize + 2];
		return z;
	}
	getW(index) {
		let w = this.value[index * this.itemSize + 3];
		return w;
	}
	setXY(index, x, y) {
		index *= this.itemSize;
		this.value[index + 0] = x;
		this.value[index + 1] = y;
		return this;
	}
	setXYZ(index, x, y, z) {
		index *= this.itemSize;
		this.value[index + 0] = x;
		this.value[index + 1] = y;
		this.value[index + 2] = z;
		return this;
	}
	setXYZW(index, x, y, z, w) {
		index *= this.itemSize;
		this.value[index + 0] = x;
		this.value[index + 1] = y;
		this.value[index + 2] = z;
		this.value[index + 3] = w;
		return this;
	}
}
Attribute.v3 = new Vector3();
Attribute.v2 = new Vector2();
class Float32Attribute extends Attribute {
	constructor(name, value, itemSize) {
		super(name, value, itemSize);
		this.format = getAttributeFormat("float32", itemSize);
		this.attributeByteSize = Float32Array.BYTES_PER_ELEMENT * itemSize;
	}
}
function getAttributeFormat(type, itemSize) {
	const key = `${type}x${itemSize}`;
	let format;
	switch (key) {
		case "float32":
			format = VertexFormat.Float32;
			break;
		case "float32x2":
			format = VertexFormat.Float32x2;
			break;
		case "float32x3":
			format = VertexFormat.Float32x3;
			break;
		case "float32x4":
			format = VertexFormat.Float32x4;
			break;
	}
	return format;
}

/**
 * This enumerated type is used in determining where, relative to the frustum, an
 * object is located. The object can either be fully contained within the frustum (INSIDE),
 * partially inside the frustum and partially outside (INTERSECTING), or somewhere entirely
 * outside of the frustum's 6 planes (OUTSIDE).
 *
 * @enum {Number}
 */
const Intersect = {
	/**
	 * Represents that an object is not contained within the frustum.
	 *
	 * @type {Number}
	 * @constant
	 */
	OUTSIDE: -1,
	/**
	 * Represents that an object intersects one of the frustum's planes.
	 *
	 * @type {Number}
	 * @constant
	 */
	INTERSECTING: 0,
	/**
	 * Represents that an object is fully within the frustum.
	 *
	 * @type {Number}
	 * @constant
	 */
	INSIDE: 1
};
var Intersect$1 = Object.freeze(Intersect);

// @ts-nocheck
/**
 * A set of 4-dimensional coordinates used to represent rotation in 3-dimensional space.
 * @alias Quaternion
 * @constructor
 *
 * @param {Number} [x=0.0] The X component.
 * @param {Number} [y=0.0] The Y component.
 * @param {Number} [z=0.0] The Z component.
 * @param {Number} [w=0.0] The W component.
 *
 * @see PackableForInterpolation
 */
class Quaternion {
	constructor(x = 0, y = 0, z = 0, w = 1) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	normalize() {
		const inverseMagnitude = 1.0 / Quaternion.magnitude(this);
		const x = this.x * inverseMagnitude;
		const y = this.y * inverseMagnitude;
		const z = this.z * inverseMagnitude;
		const w = this.w * inverseMagnitude;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	invert() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
		return this;
	}
	dot(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	}
	setFromUnitVectors(vFrom, vTo) {
		// assumes direction vectors vFrom and vTo are normalized
		let r = Vector3.dot(vFrom, vTo) + 1;
		if (r < Number.EPSILON) {
			// vFrom and vTo point in opposite directions
			r = 0;
			if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
				this.x = -vFrom.y;
				this.y = vFrom.x;
				this.z = 0;
				this.w = r;
			} else {
				this.x = 0;
				this.y = -vFrom.z;
				this.z = vFrom.y;
				this.w = r;
			}
		} else {
			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
			this._w = r;
		}
		return this.normalize();
	}
	setFromRotationMatrix(matrix) {
		const te = matrix,
			m11 = te[0],
			m12 = te[4],
			m13 = te[8],
			m21 = te[1],
			m22 = te[5],
			m23 = te[9],
			m31 = te[2],
			m32 = te[6],
			m33 = te[10],
			trace = m11 + m22 + m33;
		if (trace > 0) {
			const s = 0.5 / Math.sqrt(trace + 1.0);
			this.w = 0.25 / s;
			this.x = (m32 - m23) * s;
			this.y = (m13 - m31) * s;
			this.z = (m21 - m12) * s;
		} else if (m11 > m22 && m11 > m33) {
			const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
			this.w = (m32 - m23) / s;
			this.x = 0.25 * s;
			this.y = (m12 + m21) / s;
			this.z = (m13 + m31) / s;
		} else if (m22 > m33) {
			const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
			this.w = (m13 - m31) / s;
			this.x = (m12 + m21) / s;
			this.y = 0.25 * s;
			this.z = (m23 + m32) / s;
		} else {
			const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
			this.w = (m21 - m12) / s;
			this.x = (m13 + m31) / s;
			this.y = (m23 + m32) / s;
			this.z = 0.25 * s;
		}
		return this;
	}
	clone() {
		return Quaternion.clone(this, this);
	}
	equals(right) {
		return Quaternion.equals(this, right);
	}
	equalsEpsilon(right, epsilon = 0) {
		return Quaternion.equalsEpsilon(this, right, epsilon);
	}
	static fromAxisAngle(axis, angle) {
		const halfAngle = angle / 2.0;
		const s = Math.sin(halfAngle);
		fromAxisAngleScratch = Vector3.normalize(axis, fromAxisAngleScratch);
		const x = fromAxisAngleScratch.x * s;
		const y = fromAxisAngleScratch.y * s;
		const z = fromAxisAngleScratch.z * s;
		const w = Math.cos(halfAngle);
		// if (!defined(result)) {
		//   return
		// }
		let result = new Quaternion(x, y, z, w);
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static fromRotationMatrix(matrix, result) {
		let root;
		let x;
		let y;
		let z;
		let w;
		const m00 = matrix[Matrix3.COLUMN0ROW0];
		const m11 = matrix[Matrix3.COLUMN1ROW1];
		const m22 = matrix[Matrix3.COLUMN2ROW2];
		const trace = m00 + m11 + m22;
		if (trace > 0.0) {
			// |w| > 1/2, may as well choose w > 1/2
			root = Math.sqrt(trace + 1.0); // 2w
			w = 0.5 * root;
			root = 0.5 / root; // 1/(4w)
			x = (matrix[Matrix3.COLUMN1ROW2] - matrix[Matrix3.COLUMN2ROW1]) * root;
			y = (matrix[Matrix3.COLUMN2ROW0] - matrix[Matrix3.COLUMN0ROW2]) * root;
			z = (matrix[Matrix3.COLUMN0ROW1] - matrix[Matrix3.COLUMN1ROW0]) * root;
		} else {
			// |w| <= 1/2
			const next = fromRotationMatrixNext;
			let i = 0;
			if (m11 > m00) {
				i = 1;
			}
			if (m22 > m00 && m22 > m11) {
				i = 2;
			}
			const j = next[i];
			const k = next[j];
			root = Math.sqrt(
				matrix[Matrix3.getElementIndex(i, i)] -
					matrix[Matrix3.getElementIndex(j, j)] -
					matrix[Matrix3.getElementIndex(k, k)] +
					1.0
			);
			const quat = fromRotationMatrixQuat;
			quat[i] = 0.5 * root;
			root = 0.5 / root;
			w = (matrix[Matrix3.getElementIndex(k, j)] - matrix[Matrix3.getElementIndex(j, k)]) * root;
			quat[j] = (matrix[Matrix3.getElementIndex(j, i)] + matrix[Matrix3.getElementIndex(i, j)]) * root;
			quat[k] = (matrix[Matrix3.getElementIndex(k, i)] + matrix[Matrix3.getElementIndex(i, k)]) * root;
			x = -quat[0];
			y = -quat[1];
			z = -quat[2];
		}
		if (!defined(result)) {
			return new Quaternion(x, y, z, w);
		}
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static clone(quaternion, result) {
		if (!defined(quaternion)) {
			return undefined;
		}
		if (!defined(result)) {
			return new Quaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w);
		}
		result.x = quaternion.x;
		result.y = quaternion.y;
		result.z = quaternion.z;
		result.w = quaternion.w;
		return result;
	}
	static conjugate(quaternion, result) {
		result.x = -quaternion.x;
		result.y = -quaternion.y;
		result.z = -quaternion.z;
		result.w = quaternion.w;
		return result;
	}
	static magnitudeSquared(quaternion) {
		return (
			quaternion.x * quaternion.x +
			quaternion.y * quaternion.y +
			quaternion.z * quaternion.z +
			quaternion.w * quaternion.w
		);
	}
	static magnitude(quaternion) {
		return Math.sqrt(Quaternion.magnitudeSquared(quaternion));
	}
	static normalize(quaternion, result) {
		const inverseMagnitude = 1.0 / Quaternion.magnitude(quaternion);
		const x = quaternion.x * inverseMagnitude;
		const y = quaternion.y * inverseMagnitude;
		const z = quaternion.z * inverseMagnitude;
		const w = quaternion.w * inverseMagnitude;
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static inverse(quaternion, result) {
		const magnitudeSquared = Quaternion.magnitudeSquared(quaternion);
		result = Quaternion.conjugate(quaternion, result);
		return Quaternion.multiplyByScalar(result, 1.0 / magnitudeSquared, result);
	}
	static add(left, right, result) {
		result.x = left.x + right.x;
		result.y = left.y + right.y;
		result.z = left.z + right.z;
		result.w = left.w + right.w;
		return result;
	}
	static subtract(left, right, result) {
		result.x = left.x - right.x;
		result.y = left.y - right.y;
		result.z = left.z - right.z;
		result.w = left.w - right.w;
		return result;
	}
	static negate(quaternion, result) {
		result.x = -quaternion.x;
		result.y = -quaternion.y;
		result.z = -quaternion.z;
		result.w = -quaternion.w;
		return result;
	}
	static dot(left, right) {
		return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
	}
	static multiply(left, right, result) {
		const leftX = left.x;
		const leftY = left.y;
		const leftZ = left.z;
		const leftW = left.w;
		const rightX = right.x;
		const rightY = right.y;
		const rightZ = right.z;
		const rightW = right.w;
		const x = leftW * rightX + leftX * rightW + leftY * rightZ - leftZ * rightY;
		const y = leftW * rightY - leftX * rightZ + leftY * rightW + leftZ * rightX;
		const z = leftW * rightZ + leftX * rightY - leftY * rightX + leftZ * rightW;
		const w = leftW * rightW - leftX * rightX - leftY * rightY - leftZ * rightZ;
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
		return result;
	}
	static multiplyByScalar(quaternion, scalar, result) {
		result.x = quaternion.x * scalar;
		result.y = quaternion.y * scalar;
		result.z = quaternion.z * scalar;
		result.w = quaternion.w * scalar;
		return result;
	}
	static divideByScalar(quaternion, scalar, result) {
		result.x = quaternion.x / scalar;
		result.y = quaternion.y / scalar;
		result.z = quaternion.z / scalar;
		result.w = quaternion.w / scalar;
		return result;
	}
	static computeAxis(quaternion, result) {
		const w = quaternion.w;
		if (Math.abs(w - 1.0) < GMath.EPSILON6) {
			result.x = result.y = result.z = 0;
			return result;
		}
		const scalar = 1.0 / Math.sqrt(1.0 - w * w);
		result.x = quaternion.x * scalar;
		result.y = quaternion.y * scalar;
		result.z = quaternion.z * scalar;
		return result;
	}
	static computeAngle(quaternion) {
		if (Math.abs(quaternion.w - 1.0) < GMath.EPSILON6) {
			return 0.0;
		}
		return 2.0 * Math.acos(quaternion.w);
	}
	static lerp(start, end, t, result) {
		lerpScratch = Quaternion.multiplyByScalar(end, t, lerpScratch);
		result = Quaternion.multiplyByScalar(start, 1.0 - t, result);
		return Quaternion.add(lerpScratch, result, result);
	}
	static slerp(start, end, t, result) {
		let dot = Quaternion.dot(start, end);
		// The angle between start must be acute. Since q and -q represent
		// the same rotation, negate q to get the acute angle.
		let r = end;
		if (dot < 0.0) {
			dot = -dot;
			r = slerpEndNegated = Quaternion.negate(end, slerpEndNegated);
		}
		// dot > 0, as the dot product approaches 1, the angle between the
		// quaternions vanishes. use linear interpolation.
		if (1.0 - dot < GMath.EPSILON6) {
			return Quaternion.lerp(start, r, t, result);
		}
		const theta = Math.acos(dot);
		slerpScaledP = Quaternion.multiplyByScalar(start, Math.sin((1 - t) * theta), slerpScaledP);
		slerpScaledR = Quaternion.multiplyByScalar(r, Math.sin(t * theta), slerpScaledR);
		result = Quaternion.add(slerpScaledP, slerpScaledR, result);
		return Quaternion.multiplyByScalar(result, 1.0 / Math.sin(theta), result);
	}
	static computeInnerQuadrangle(q0, q1, q2, result) {
		const qInv = Quaternion.conjugate(q1, squadScratchQuaternion0);
		Quaternion.multiply(qInv, q2, squadScratchQuaternion1);
		const cart0 = Quaternion.log(squadScratchQuaternion1, squadScratchCartesian0);
		Quaternion.multiply(qInv, q0, squadScratchQuaternion1);
		const cart1 = Quaternion.log(squadScratchQuaternion1, squadScratchCartesian1);
		Vector3.add(cart0, cart1, cart0);
		Vector3.multiplyByScalar(cart0, 0.25, cart0);
		Vector3.negate(cart0, cart0);
		Quaternion.exp(cart0, squadScratchQuaternion0);
		return Quaternion.multiply(q1, squadScratchQuaternion0, result);
	}
	static squad(q0, q1, s0, s1, t, result) {
		const slerp0 = Quaternion.slerp(q0, q1, t, squadScratchQuaternion0);
		const slerp1 = Quaternion.slerp(s0, s1, t, squadScratchQuaternion1);
		return Quaternion.slerp(slerp0, slerp1, 2.0 * t * (1.0 - t), result);
	}
	static fastSlerp(start, end, t, result) {
		let x = Quaternion.dot(start, end);
		let sign;
		if (x >= 0) {
			sign = 1.0;
		} else {
			sign = -1.0;
			x = -x;
		}
		const xm1 = x - 1.0;
		const d = 1.0 - t;
		const sqrT = t * t;
		const sqrD = d * d;
		for (let i = 7; i >= 0; --i) {
			bT[i] = (u[i] * sqrT - v[i]) * xm1;
			bD[i] = (u[i] * sqrD - v[i]) * xm1;
		}
		const cT =
			sign *
			t *
			(1.0 +
				bT[0] *
					(1.0 +
						bT[1] *
							(1.0 +
								bT[2] *
									(1.0 + bT[3] * (1.0 + bT[4] * (1.0 + bT[5] * (1.0 + bT[6] * (1.0 + bT[7]))))))));
		const cD =
			d *
			(1.0 +
				bD[0] *
					(1.0 +
						bD[1] *
							(1.0 +
								bD[2] *
									(1.0 + bD[3] * (1.0 + bD[4] * (1.0 + bD[5] * (1.0 + bD[6] * (1.0 + bD[7]))))))));
		const temp = Quaternion.multiplyByScalar(start, cD, fastSlerpScratchQuaternion);
		Quaternion.multiplyByScalar(end, cT, result);
		return Quaternion.add(temp, result, result);
	}
	static fastSquad(q0, q1, s0, s1, t, result) {
		const slerp0 = Quaternion.fastSlerp(q0, q1, t, squadScratchQuaternion0);
		const slerp1 = Quaternion.fastSlerp(s0, s1, t, squadScratchQuaternion1);
		return Quaternion.fastSlerp(slerp0, slerp1, 2.0 * t * (1.0 - t), result);
	}
	static equals(left, right) {
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				left.x === right.x &&
				left.y === right.y &&
				left.z === right.z &&
				left.w === right.w)
		);
	}
	static equalsEpsilon(left, right, epsilon = 0) {
		epsilon = defaultValue(epsilon, 0);
		return (
			left === right ||
			(defined(left) &&
				defined(right) &&
				Math.abs(left.x - right.x) <= epsilon &&
				Math.abs(left.y - right.y) <= epsilon &&
				Math.abs(left.z - right.z) <= epsilon &&
				Math.abs(left.w - right.w) <= epsilon)
		);
	}
	static log(quaternion, result) {
		const theta = GMath.acosClamped(quaternion.w);
		let thetaOverSinTheta = 0.0;
		if (theta !== 0.0) {
			thetaOverSinTheta = theta / Math.sin(theta);
		}
		return Vector3.multiplyByScalar(quaternion, thetaOverSinTheta, result);
	}
	static exp(cartesian, result) {
		const theta = Vector3.magnitude(cartesian);
		let sinThetaOverTheta = 0.0;
		if (theta !== 0.0) {
			sinThetaOverTheta = Math.sin(theta) / theta;
		}
		result.x = cartesian.x * sinThetaOverTheta;
		result.y = cartesian.y * sinThetaOverTheta;
		result.z = cartesian.z * sinThetaOverTheta;
		result.w = Math.cos(theta);
		return result;
	}
}
Quaternion.ZERO = Object.freeze(new Quaternion(0.0, 0.0, 0.0, 0.0));
Quaternion.IDENTITY = Object.freeze(new Quaternion(0.0, 0.0, 0.0, 1.0));
let fromAxisAngleScratch = new Vector3();
const fromRotationMatrixNext = [1, 2, 0];
const fromRotationMatrixQuat = new Array(3);
new Quaternion();
new Quaternion();
new Quaternion();
new Quaternion();
new Vector3();
new Vector3();
new Quaternion();
new Quaternion();
new Quaternion();
let lerpScratch = new Quaternion();
let slerpEndNegated = new Quaternion();
let slerpScaledP = new Quaternion();
let slerpScaledR = new Quaternion();
const fastSlerpScratchQuaternion = new Quaternion();
// eslint-disable-next-line no-loss-of-precision
const opmu = 1.90110745351730037;
const u = new Float32Array(8);
const v = new Float32Array(8);
const bT = new Float32Array(8);
const bD = new Float32Array(8);
for (let i = 0; i < 7; ++i) {
	const s = i + 1.0;
	const t = 2.0 * s + 1.0;
	u[i] = 1.0 / (s * t);
	v[i] = s / t;
}
u[7] = opmu / (8.0 * 17.0);
v[7] = (opmu * 8.0) / 17.0;
const squadScratchCartesian0 = new Vector3();
const squadScratchCartesian1 = new Vector3();
const squadScratchQuaternion0 = new Quaternion();
const squadScratchQuaternion1 = new Quaternion();

class RenderObject {
	constructor() {
		this._position = new Vector3();
		this._scale = new Vector3(1, 1, 1);
		this._quaternion = new Quaternion();
		this.modelMatrix = Matrix4.clone(Matrix4.IDENTITY, new Matrix4());
		this._normalMatrix = Matrix4.clone(Matrix4.IDENTITY, new Matrix4());
		this.up = new Vector3(0, 1, 0);
	}
	get normalMatrix() {
		return this._normalMatrix;
	}
	get position() {
		return this._position;
	}
	get scale() {
		return this._scale;
	}
	get quaternion() {
		return this._quaternion;
	}
	updateNormalMatrix(camera) {
		//Matrix4.multiply(camera.viewMatrix, this.this._normalMatrix,this._normalMatrix, this._normalMatrix);
		Matrix4.inverse(this.modelMatrix, this._normalMatrix);
		Matrix4.transpose(this._normalMatrix, this._normalMatrix);
		// this._normalMatrix.getNormalMatrix(this.modelMatrix);
	}
	updateMatrix() {
		Matrix4.fromTranslationQuaternionRotationScale(this.position, this.quaternion, this.scale, this.modelMatrix);
	}
	lookAt(x, y, z) {
		_target.set(x, y, z);
		if (this.isCamera || this.isLight) {
			_m1.lookAt(this.position, _target, this.up);
		} else {
			_m1.lookAt(_target, this.position, this.up);
		}
		this.quaternion.setFromRotationMatrix(_m1);
	}
	rotateOnAxis(axis, angle) {
		const quat = Quaternion.fromAxisAngle(axis, angle);
		Quaternion.multiply(this.quaternion, quat, this.quaternion);
	}
	rotateX(angle) {
		return this.rotateOnAxis(_xAxis, angle);
	}
	rotateY(angle) {
		return this.rotateOnAxis(_yAxis, angle);
	}
	rotateZ(angle) {
		return this.rotateOnAxis(_zAxis, angle);
	}
}
const _xAxis = new Vector3(1, 0, 0);
const _yAxis = new Vector3(0, 1, 0);
const _zAxis = new Vector3(0, 0, 1);
const _m1 = new Matrix4();
const _target = new Vector3();
new Matrix3();
new Matrix4();

class Mesh extends RenderObject {
	constructor(geometry, material) {
		super();
		this.geometry = geometry;
		this.material = material;
		this.type = "primitive";
	}
	update(frameState, camera) {
		//update matrix
		this.updateMatrix();
		this.updateNormalMatrix(camera);
		//create
		this.geometry.update(frameState);
		this.material.update(frameState, this);
		// update boundingSphere
		this.geometry.boundingSphere.update(this.modelMatrix);
		this.material.shaderSource.setDefines(frameState.defines);
		this.distanceToCamera = this.geometry.boundingSphere.distanceToCamera(camera);
		const visibility = frameState.cullingVolume.computeVisibility(this.geometry.boundingSphere);
		//视锥剔除
		if (visibility === Intersect$1.INTERSECTING || visibility === Intersect$1.INSIDE) {
			if (this.material.transparent) {
				frameState.renderQueue.transparent.push(this);
			} else {
				frameState.renderQueue.opaque.push(this);
			}
		}
	}
	beforeRender() {}
	afterRender() {}
	getDrawCommand(overrideMaterial) {
		if (!this.drawCommand || this.material.dirty) {
			if (this.material.dirty) this.material.dirty = false;
			this.drawCommand = new DrawCommand({
				vertexBuffer: this.geometry.vertBuffer,
				indexBuffer: this.geometry.indexBuffer,
				shaderData: this.material.shaderData,
				instances: this.instances,
				count: this.geometry.count,
				renderState: this.material.renderState,
				shaderSource: this.material.shaderSource,
				type: "render",
				light: this.material.light,
				modelMatrix: this.modelMatrix
			});
		}
		this.material.shaderSource.setDefines(Object.assign(this.material.shaderData.defines, this.geometry.defines));
		if (overrideMaterial) {
			overrideMaterial.update();
			return this.drawCommand.shallowClone(overrideMaterial);
		}
		return this.drawCommand;
	}
	destroy() {
		this.geometry.destroy();
		this.material.destroy();
	}
}

class BoundingSphere {
	constructor(center = new Vector3(0, 0, 0), radius = 0) {
		this.center = center;
		this.radius = radius;
		this.originCenter = this.center.clone();
		this.originRadius = radius;
	}
	/**
	 * @param {Vector3[]} [positions] An array of points that the bounding sphere will enclose.  Each point must have <code>x</code>, <code>y</code>, and <code>z</code> properties.
	 * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.
	 */
	static fromPoints(positions) {
		let result = new BoundingSphere();
		if (!defined(positions) || positions.length === 0) {
			result.center = Vector3.clone(Vector3.ZERO, result.center);
			result.radius = 0.0;
			return result;
		}
		const currentPos = Vector3.clone(positions[0], fromPointsCurrentPos);
		const xMin = Vector3.clone(currentPos, fromPointsXMin);
		const yMin = Vector3.clone(currentPos, fromPointsYMin);
		const zMin = Vector3.clone(currentPos, fromPointsZMin);
		const xMax = Vector3.clone(currentPos, fromPointsXMax);
		const yMax = Vector3.clone(currentPos, fromPointsYMax);
		const zMax = Vector3.clone(currentPos, fromPointsZMax);
		const numPositions = positions.length;
		let i;
		for (i = 1; i < numPositions; i++) {
			Vector3.clone(positions[i], currentPos);
			const x = currentPos.x;
			const y = currentPos.y;
			const z = currentPos.z;
			// Store points containing the the smallest and largest components
			if (x < xMin.x) {
				Vector3.clone(currentPos, xMin);
			}
			if (x > xMax.x) {
				Vector3.clone(currentPos, xMax);
			}
			if (y < yMin.y) {
				Vector3.clone(currentPos, yMin);
			}
			if (y > yMax.y) {
				Vector3.clone(currentPos, yMax);
			}
			if (z < zMin.z) {
				Vector3.clone(currentPos, zMin);
			}
			if (z > zMax.z) {
				Vector3.clone(currentPos, zMax);
			}
		}
		// Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).
		const xSpan = Vector3.magnitudeSquared(Vector3.subtract(xMax, xMin, fromPointsScratch));
		const ySpan = Vector3.magnitudeSquared(Vector3.subtract(yMax, yMin, fromPointsScratch));
		const zSpan = Vector3.magnitudeSquared(Vector3.subtract(zMax, zMin, fromPointsScratch));
		// Set the diameter endpoints to the largest span.
		let diameter1 = xMin;
		let diameter2 = xMax;
		let maxSpan = xSpan;
		if (ySpan > maxSpan) {
			maxSpan = ySpan;
			diameter1 = yMin;
			diameter2 = yMax;
		}
		if (zSpan > maxSpan) {
			maxSpan = zSpan;
			diameter1 = zMin;
			diameter2 = zMax;
		}
		// Calculate the center of the initial sphere found by Ritter's algorithm
		const ritterCenter = fromPointsRitterCenter;
		ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;
		ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;
		ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;
		// Calculate the radius of the initial sphere found by Ritter's algorithm
		let radiusSquared = Vector3.magnitudeSquared(Vector3.subtract(diameter2, ritterCenter, fromPointsScratch));
		let ritterRadius = Math.sqrt(radiusSquared);
		// Find the center of the sphere found using the Naive method.
		const minBoxPt = fromPointsMinBoxPt;
		minBoxPt.x = xMin.x;
		minBoxPt.y = yMin.y;
		minBoxPt.z = zMin.z;
		const maxBoxPt = fromPointsMaxBoxPt;
		maxBoxPt.x = xMax.x;
		maxBoxPt.y = yMax.y;
		maxBoxPt.z = zMax.z;
		const naiveCenter = Vector3.midpoint(minBoxPt, maxBoxPt, fromPointsNaiveCenterScratch);
		// Begin 2nd pass to find naive radius and modify the ritter sphere.
		let naiveRadius = 0;
		for (i = 0; i < numPositions; i++) {
			Vector3.clone(positions[i], currentPos);
			// Find the furthest point from the naive center to calculate the naive radius.
			const r = Vector3.magnitude(Vector3.subtract(currentPos, naiveCenter, fromPointsScratch));
			if (r > naiveRadius) {
				naiveRadius = r;
			}
			// Make adjustments to the Ritter Sphere to include all points.
			const oldCenterToPointSquared = Vector3.magnitudeSquared(
				Vector3.subtract(currentPos, ritterCenter, fromPointsScratch)
			);
			if (oldCenterToPointSquared > radiusSquared) {
				const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);
				// Calculate new radius to include the point that lies outside
				ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;
				radiusSquared = ritterRadius * ritterRadius;
				// Calculate center of new Ritter sphere
				const oldToNew = oldCenterToPoint - ritterRadius;
				ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;
				ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;
				ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;
			}
		}
		if (ritterRadius < naiveRadius) {
			Vector3.clone(ritterCenter, result.center);
			result.radius = ritterRadius;
		} else {
			Vector3.clone(naiveCenter, result.center);
			result.radius = naiveRadius;
		}
		return result;
	}
	/**
	 * Computes a tight-fitting bounding sphere enclosing a list of 3D points, where the points are
	 * stored in a flat array in X, Y, Z, order.  The bounding sphere is computed by running two
	 * algorithms, a naive algorithm and Ritter's algorithm. The smaller of the two spheres is used to
	 * ensure a tight fit.
	 *
	 * @param {Number[]} [positions] An array of points that the bounding sphere will enclose.  Each point
	 *        is formed from three elements in the array in the order X, Y, Z.
	 * @param {Vector3} [center=Vector3.ZERO] The position to which the positions are relative, which need not be the
	 *        origin of the coordinate system.  This is useful when the positions are to be used for
	 *        relative-to-center (RTC) rendering.
	 * @param {Number} [stride=3] The number of array elements per vertex.  It must be at least 3, but it may
	 *        be higher.  Regardless of the value of this parameter, the X coordinate of the first position
	 *        is at array index 0, the Y coordinate is at array index 1, and the Z coordinate is at array index
	 *        2.  When stride is 3, the X coordinate of the next position then begins at array index 3.  If
	 *        the stride is 5, however, two array elements are skipped and the next position begins at array
	 *        index 5.
	 * @param {BoundingSphere} [result] The object onto which to store the result.
	 * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.
	 *
	 * @example
	 * // Compute the bounding sphere from 3 positions, each specified relative to a center.
	 * // In addition to the X, Y, and Z coordinates, the points array contains two additional
	 * // elements per point which are ignored for the purpose of computing the bounding sphere.
	 * const center = new Vector3(1.0, 2.0, 3.0);
	 * const points = [1.0, 2.0, 3.0, 0.1, 0.2,
	 *               4.0, 5.0, 6.0, 0.1, 0.2,
	 *               7.0, 8.0, 9.0, 0.1, 0.2];
	 * const sphere = BoundingSphere.fromVertices(points, center, 5);
	 *
	 */
	static fromVertices(positions, center = Vector3.ZERO, stride = 3) {
		const result = new BoundingSphere();
		if (!defined(positions) || positions.length === 0) {
			result.center = Vector3.clone(Vector3.ZERO, result.center);
			result.radius = 0.0;
			return result;
		}
		center = defaultValue(center, Vector3.ZERO);
		stride = defaultValue(stride, 3);
		const currentPos = fromPointsCurrentPos;
		currentPos.x = positions[0] + center.x;
		currentPos.y = positions[1] + center.y;
		currentPos.z = positions[2] + center.z;
		const xMin = Vector3.clone(currentPos, fromPointsXMin);
		const yMin = Vector3.clone(currentPos, fromPointsYMin);
		const zMin = Vector3.clone(currentPos, fromPointsZMin);
		const xMax = Vector3.clone(currentPos, fromPointsXMax);
		const yMax = Vector3.clone(currentPos, fromPointsYMax);
		const zMax = Vector3.clone(currentPos, fromPointsZMax);
		const numElements = positions.length;
		let i;
		for (i = 0; i < numElements; i += stride) {
			const x = positions[i] + center.x;
			const y = positions[i + 1] + center.y;
			const z = positions[i + 2] + center.z;
			currentPos.x = x;
			currentPos.y = y;
			currentPos.z = z;
			// Store points containing the the smallest and largest components
			if (x < xMin.x) {
				Vector3.clone(currentPos, xMin);
			}
			if (x > xMax.x) {
				Vector3.clone(currentPos, xMax);
			}
			if (y < yMin.y) {
				Vector3.clone(currentPos, yMin);
			}
			if (y > yMax.y) {
				Vector3.clone(currentPos, yMax);
			}
			if (z < zMin.z) {
				Vector3.clone(currentPos, zMin);
			}
			if (z > zMax.z) {
				Vector3.clone(currentPos, zMax);
			}
		}
		// Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).
		const xSpan = Vector3.magnitudeSquared(Vector3.subtract(xMax, xMin, fromPointsScratch));
		const ySpan = Vector3.magnitudeSquared(Vector3.subtract(yMax, yMin, fromPointsScratch));
		const zSpan = Vector3.magnitudeSquared(Vector3.subtract(zMax, zMin, fromPointsScratch));
		// Set the diameter endpoints to the largest span.
		let diameter1 = xMin;
		let diameter2 = xMax;
		let maxSpan = xSpan;
		if (ySpan > maxSpan) {
			maxSpan = ySpan;
			diameter1 = yMin;
			diameter2 = yMax;
		}
		if (zSpan > maxSpan) {
			maxSpan = zSpan;
			diameter1 = zMin;
			diameter2 = zMax;
		}
		// Calculate the center of the initial sphere found by Ritter's algorithm
		const ritterCenter = fromPointsRitterCenter;
		ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;
		ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;
		ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;
		// Calculate the radius of the initial sphere found by Ritter's algorithm
		let radiusSquared = Vector3.magnitudeSquared(Vector3.subtract(diameter2, ritterCenter, fromPointsScratch));
		let ritterRadius = Math.sqrt(radiusSquared);
		// Find the center of the sphere found using the Naive method.
		const minBoxPt = fromPointsMinBoxPt;
		minBoxPt.x = xMin.x;
		minBoxPt.y = yMin.y;
		minBoxPt.z = zMin.z;
		const maxBoxPt = fromPointsMaxBoxPt;
		maxBoxPt.x = xMax.x;
		maxBoxPt.y = yMax.y;
		maxBoxPt.z = zMax.z;
		const naiveCenter = Vector3.midpoint(minBoxPt, maxBoxPt, fromPointsNaiveCenterScratch);
		// Begin 2nd pass to find naive radius and modify the ritter sphere.
		let naiveRadius = 0;
		for (i = 0; i < numElements; i += stride) {
			currentPos.x = positions[i] + center.x;
			currentPos.y = positions[i + 1] + center.y;
			currentPos.z = positions[i + 2] + center.z;
			// Find the furthest point from the naive center to calculate the naive radius.
			const r = Vector3.magnitude(Vector3.subtract(currentPos, naiveCenter, fromPointsScratch));
			if (r > naiveRadius) {
				naiveRadius = r;
			}
			// Make adjustments to the Ritter Sphere to include all points.
			const oldCenterToPointSquared = Vector3.magnitudeSquared(
				Vector3.subtract(currentPos, ritterCenter, fromPointsScratch)
			);
			if (oldCenterToPointSquared > radiusSquared) {
				const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);
				// Calculate new radius to include the point that lies outside
				ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;
				radiusSquared = ritterRadius * ritterRadius;
				// Calculate center of new Ritter sphere
				const oldToNew = oldCenterToPoint - ritterRadius;
				ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;
				ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;
				ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;
			}
		}
		if (ritterRadius < naiveRadius) {
			Vector3.clone(ritterCenter, result.center);
			result.radius = ritterRadius;
		} else {
			Vector3.clone(naiveCenter, result.center);
			result.radius = naiveRadius;
		}
		return result;
	}
	intersectPlane(plane) {
		const center = this.center;
		const radius = this.radius;
		const normal = plane.normal;
		const distanceToPlane = Vector3.dot(normal, center) + plane.distance;
		if (distanceToPlane < -radius) {
			// The center point is negative side of the plane normal
			return Intersect$1.OUTSIDE;
		} else if (distanceToPlane < radius) {
			// The center point is positive side of the plane, but radius extends beyond it; partial overlap
			return Intersect$1.INTERSECTING;
		}
		return Intersect$1.INSIDE;
	}
	update(transform) {
		Matrix4.multiplyByPoint(transform, this.originCenter, this.center);
		this.radius = Matrix4.getMaximumScale(transform) * this.originRadius;
	}
	distanceToCamera(camera) {
		return Math.max(0.0, Vector3.distance(this.center, camera.position) - this.radius);
	}
}
const fromPointsXMin = new Vector3();
const fromPointsYMin = new Vector3();
const fromPointsZMin = new Vector3();
const fromPointsXMax = new Vector3();
const fromPointsYMax = new Vector3();
const fromPointsZMax = new Vector3();
const fromPointsCurrentPos = new Vector3();
const fromPointsScratch = new Vector3();
const fromPointsRitterCenter = new Vector3();
const fromPointsMinBoxPt = new Vector3();
const fromPointsMaxBoxPt = new Vector3();
const fromPointsNaiveCenterScratch = new Vector3();

class VertextBuffer {
	constructor(attributes, index, stepMode) {
		this.index = index || 0;
		this.attributes = attributes || undefined;
		this.stepMode = InputStepMode.Vertex;
		this.dirty = true;
	}
	getBufferDes() {
		return [
			{
				arrayStride: this.arrayStride,
				stepMode: this.stepMode,
				attributes: this.attributes.getGPUAttributes()
			}
		];
	}
	setAttributes(attributes) {
		this.attributes = attributes;
		this.dirty = true;
	}
	bind(device, passEncoder) {
		if (this.dirty) {
			this.dirty = false;
			const { arrayStride, typeArray } = this.attributes.getMeregeAtrributeValues();
			this.arrayStride =
				arrayStride.reduce(function (sum, item, index, arr) {
					return (sum += item);
				}, 0) * 4;
			this.buffer = Buffer.createVertexBuffer(device, typeArray);
		}
		passEncoder.setVertexBuffer(this.index, this.buffer.gpuBuffer);
	}
	destroy() {
		this.buffer.destroy();
	}
}

class Attributes {
	constructor() {
		this._attributes = new Map();
		this.shaderLocation = 0;
		this.offset = 0;
	}
	getAttribute(name) {
		return this._attributes.get(name);
	}
	setAttribute(attribute) {
		if (this._attributes.has(attribute.name)) return;
		attribute.shaderLocation = this.shaderLocation;
		this.shaderLocation += 1;
		attribute.offset = this.offset;
		this.offset += attribute.attributeByteSize;
		this._attributes.set(attribute.name, attribute);
	}
	getGPUAttributes() {
		const result = [];
		this._attributes.forEach((attribute) => {
			result.push(attribute.getGPUAttribute());
		});
		return result;
	}
	getMeregeAtrributeValues() {
		const arrayStride = [];
		const arrays = [];
		this._attributes.forEach((attribute) => {
			arrayStride.push(attribute.itemSize);
			arrays.push(attribute.value);
		});
		return {
			arrayStride,
			typeArray: this.interleaveTypedArray(Float32Array, arrayStride, ...arrays)
		};
	}
	destroy() {
		this._attributes.forEach((attribute) => {
			attribute.destroy();
		});
	}
	/**
	 * Interleave n typed arrays
	 * @alias module:interleaveTypedArray
	 * @param {TypedArray} ResultConstructor Returned typed array constructor
	 * @param {Array} elements Number of elements to group for each typed array
	 * @param {...TypedArray} arrays Arrays to interleave
	 * @returns {TypedArray}
	 */
	interleaveTypedArray(ResultConstructor, elements, ...arrays) {
		const totalLength = arrays.reduce((total, arr) => total + arr.length, 0);
		const result = new ResultConstructor(totalLength);
		const stride = elements.reduce((a, b) => a + b);
		for (let i = 0; i < totalLength; i++) {
			let offset = 0;
			for (let j = 0; j < elements.length; j++) {
				for (let k = 0; k < elements[j]; k++) {
					result[i * stride + offset] = arrays[j][elements[j] * i + k];
					offset++;
				}
			}
		}
		return result;
	}
}

class IndexBuffer {
	constructor(indices) {
		this.indices = indices;
		this.indexFormat = IndexFormat.Uint16;
		this.dirty = true;
	}
	setIndices(indices) {
		this.indices = indices;
		this.dirty = true;
	}
	bind(device, passEncoder) {
		if (this.dirty) {
			this.dirty = false;
			this.buffer = Buffer.createIndexBuffer(
				device,
				this.indexFormat == IndexFormat.Uint16 ? new Uint16Array(this.indices) : new Uint32Array(this.indices)
			);
		}
		passEncoder.setIndexBuffer(this.buffer.gpuBuffer, this.indexFormat);
	}
	destroy() {
		this.buffer.destroy();
	}
}

/**
 * Merges two objects, copying their properties onto a new combined object. When two objects have the same
 * property, the value of the property on the first object is used.  If either object is undefined,
 * it will be treated as an empty object.
 *
 * @example
 * const object1 = {
 *     propOne : 1,
 *     propTwo : {
 *         value1 : 10
 *     }
 * }
 * const object2 = {
 *     propTwo : 2
 * }
 * const final = Cesium.combine(object1, object2);
 *
 * // final === {
 * //     propOne : 1,
 * //     propTwo : {
 * //         value1 : 10
 * //     }
 * // }
 *
 * @param {Object} [object1] The first object to merge.
 * @param {Object} [object2] The second object to merge.
 * @param {Boolean} [deep=false] Perform a recursive merge.
 * @returns {Object} The combined object containing all properties from both objects.
 *
 * @function
 */
function combine(object1, object2, deep) {
	deep = defaultValue(deep, false);
	const result = {};
	const object1Defined = defined(object1);
	const object2Defined = defined(object2);
	let property;
	let object1Value;
	let object2Value;
	if (object1Defined) {
		for (property in object1) {
			if (object1.hasOwnProperty(property)) {
				object1Value = object1[property];
				if (object2Defined && deep && typeof object1Value === "object" && object2.hasOwnProperty(property)) {
					object2Value = object2[property];
					if (typeof object2Value === "object") {
						result[property] = combine(object1Value, object2Value, deep);
					} else {
						result[property] = object1Value;
					}
				} else {
					result[property] = object1Value;
				}
			}
		}
	}
	if (object2Defined) {
		for (property in object2) {
			if (object2.hasOwnProperty(property) && !result.hasOwnProperty(property)) {
				object2Value = object2[property];
				result[property] = object2Value;
			}
		}
	}
	return result;
}

class Geometry {
	get defines() {
		return this._defines;
	}
	set defines(value) {
		this.definesDirty = true;
		this._defines = combine(value, this._defines, false);
	}
	constructor(options) {
		this.type = options.type || undefined;
		this.boundingSphere = undefined;
		this.dirty = false;
		this.definesDirty = true;
		this.attributes = new Attributes();
		this.vertBuffer = new VertextBuffer(this.attributes, 0);
		this._defines = {};
	}
	getAttribute(name) {
		return this.attributes.getAttribute(name);
	}
	setAttribute(attribute) {
		this.attributes.setAttribute(attribute);
	}
	setIndice(indice) {
		if (!this.indexBuffer) this.indexBuffer = new IndexBuffer();
		this.indexBuffer.setIndices(indice);
	}
	update(frameState) {}
	computeBoundingSphere(positions) {
		this.boundingSphere = BoundingSphere.fromVertices(positions, new Vector3(0, 0, 0), 3);
	}
	destroy() {
		this?.indexBuffer.destroy();
		this.vertBuffer.destroy();
		this.attributes.destroy();
	}
}

const preprocessorSymbols = /#([^\s]*)(\s*)/gm;
// Template literal tag that handles simple preprocessor symbols for WGSL
// shaders. Supports #if/elif/else/endif statements.
function wgslParseDefines(strings, ...values) {
	const stateStack = [];
	let state = { frag: "", elseIsValid: false, expression: true };
	let depth = 1;
	for (let i = 0; i < strings.length; ++i) {
		const frag = strings[i];
		const matchedSymbols = frag.matchAll(preprocessorSymbols);
		let lastIndex = 0;
		let valueConsumed = false;
		for (const match of matchedSymbols) {
			state.frag += frag.substring(lastIndex, match.index);
			switch (match[1]) {
				case "if":
					if (match.index + match[0].length != frag.length) {
						throw new Error("#if must be immediately followed by a template expression (ie: ${value})");
					}
					valueConsumed = true;
					stateStack.push(state);
					depth++;
					state = { frag: "", elseIsValid: true, expression: !!values[i] };
					break;
				case "elif":
					if (match.index + match[0].length != frag.length) {
						throw new Error("#elif must be immediately followed by a template expression (ie: ${value})");
					} else if (!state.elseIsValid) {
						throw new Error("#elif not preceeded by an #if or #elif");
					}
					valueConsumed = true;
					if (state.expression && stateStack.length != depth) {
						stateStack.push(state);
					}
					state = { frag: "", elseIsValid: true, expression: !!values[i] };
					break;
				case "else":
					if (!state.elseIsValid) {
						throw new Error("#else not preceeded by an #if or #elif");
					}
					if (state.expression && stateStack.length != depth) {
						stateStack.push(state);
					}
					state = { frag: match[2], elseIsValid: false, expression: true };
					break;
				case "endif":
					if (!stateStack.length) {
						throw new Error("#endif not preceeded by an #if");
					}
					const branchState = stateStack.length == depth ? stateStack.pop() : state;
					state = stateStack.pop();
					depth--;
					if (branchState.expression) {
						state.frag += branchState.frag;
					}
					state.frag += match[2];
					break;
				default:
					// Unknown preprocessor symbol. Emit it back into the output frag unchanged.
					state.frag += match[0];
					break;
			}
			lastIndex = match.index + match[0].length;
		}
		// If the frag didn't end on one of the preprocessor symbols append the rest of it here.
		if (lastIndex != frag.length) {
			state.frag += frag.substring(lastIndex, frag.length);
		}
		// If the next value wasn't consumed by the preprocessor symbol, append it here.
		if (!valueConsumed && values.length > i) {
			state.frag += values[i];
		}
	}
	if (stateStack.length) {
		throw new Error("Mismatched #if/#endif count");
	}
	return state.frag;
}

function light(defines) {
	return wgslParseDefines` 
    struct ReflectedLight {
        directDiffuse:vec3<f32>,
        directSpecular:vec3<f32>,
        indirectDiffuse:vec3<f32>,
        indirectSpecular:vec3<f32>,
    }; 
    struct IncidentLight {
        color: vec3<f32>,
        direction: vec3<f32>,
        visible: bool,
    };
    struct Geometry {
        position: vec3<f32>,
        normal: vec3<f32>,
        viewDir: vec3<f32>,
        #if ${defines.USE_CLEARCOAT}
            vec3 clearcoatNormal;
        #endif
    };
    #if ${defines.spotLightsCount > 0}
        struct SpotLight {
            position: vec3<f32>,
            distance: f32,
            direction: vec3<f32>,
            coneCos: f32,
            color: vec3<f32>,
            penumbraCos: f32,
            decay: f32,
        };
        fn getSpotLightInfo(spotLight:SpotLight,worldPos:vec3<f32>,shininess:f32,N:vec3<f32>,V:vec3<f32>)->ReflectedLight{
                var direction:vec3<f32> = spotLight.position - worldPos;
                var lightColor:ReflectedLight;
                let lightDistance:f32 = length(direction);
                direction = normalize(direction);
                let angleCos:f32 = dot( direction, spotLight.direction );
                let decay:f32 = clamp(1.0 - pow(lightDistance/spotLight.distance, 4.0), 0.0, 1.0);
                let spotEffect:f32 = smoothstep( spotLight.penumbraCos, spotLight.coneCos, angleCos );
                let decayTotal:f32 = decay * spotEffect;
                let d:f32 = max( dot( N, direction ), 0.0 )  * decayTotal;
                lightColor.directDiffuse= spotLight.color * d;
                let halfDir:vec3<f32> = normalize( V + direction );
                let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess ) * decayTotal;
                lightColor.directSpecular= spotLight.color * s;
                return lightColor;
        }
        fn getSpotLightIncidentLight(spotLight:SpotLight, geometry:Geometry)->IncidentLight {
            var incidentLight:IncidentLight;
            let lVector:vec3<f32> = spotLight.position - geometry.position;
            incidentLight.direction = normalize( lVector );
    
            let lightDistance:f32 = length( lVector );
            let angleCos:f32 = dot( incidentLight.direction, spotLight.direction );
    
            let spotEffect:f32 = smoothstep( spotLight.penumbraCos, spotLight.coneCos, angleCos );
            let decayEffect:f32 = clamp(1.0 - pow(lightDistance/spotLight.distance, 4.0), 0.0, 1.0);
    
            incidentLight.color=spotLight.color*spotEffect * decayEffect; 
            return  incidentLight;
        }

    #endif 

    #if ${defines.pointLightsCount > 0}
        struct PointLight {
            position: vec3<f32>,
            distance: f32,
            color: vec3<f32>,
            decay: f32,
        };
        fn getPointLightInfo(pointLight:PointLight,worldPos:vec3<f32>,shininess:f32,N:vec3<f32>,V:vec3<f32>)->ReflectedLight{
            var lightColor:ReflectedLight;
            var direction:vec3<f32> = worldPos - pointLight.position;
            let dist:f32 = length( direction );
            direction = normalize(direction);
            let decay = clamp(1.0 - pow(dist / pointLight.distance, 4.0), 0.0, 1.0);
    
            let d =  max( dot( N, -direction ), 0.0 ) * decay;
            lightColor.directDiffuse += pointLight.color * d;
    
            let halfDir:vec3<f32> = normalize( V - direction );
            let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess )  * decay;
            lightColor.directSpecular += pointLight.color * s;
            return lightColor;
        }
        fn getPointLightIncidentLight(pointLight:PointLight, geometry:Geometry)->IncidentLight {
            var incidentLight:IncidentLight;
            let lVector:vec3<f32> = pointLight.position-geometry.position;
            incidentLight.direction= normalize( lVector );
            let lightDistance:f32 = length( lVector );
            // let weight:f32=1.0 - pow(lightDistance/pointLight.distance, 4.0);
            incidentLight.color=pointLight.color*clamp(1.0 - pow(lightDistance/pointLight.distance, 4.0), 0.0, 1.0);
            return incidentLight;
        }
    #endif
    #if ${defines.dirtectLightsCount > 0}
        struct DirectionalLight {
            direction: vec3<f32>,
            color: vec3<f32>,
        };
        fn getDirtectLightInfo(directionalLight:DirectionalLight,shininess:f32,N:vec3<f32>,V:vec3<f32>)->ReflectedLight{
            var lightColor:ReflectedLight;
            let d:f32 = max(dot(N, directionalLight.direction), 0.0);
            lightColor.directDiffuse += directionalLight.color * d;
    
            let halfDir:vec3<f32> = normalize( V - directionalLight.direction );
            let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess );
            lightColor.directSpecular += directionalLight.color * s;
            return lightColor;
        }
        fn getDirectionalDirectLightIncidentLight(directionalLight:DirectionalLight,geometry:Geometry)->IncidentLight {
            var incidentLight:IncidentLight;
            incidentLight.color = directionalLight.color;
            incidentLight.direction = normalize(directionalLight.direction);
            return incidentLight;         
        }
    #endif
    #if ${
		defines.ambientLightCount || defines.spotLightsCount || defines.pointLightsCount || defines.dirtectLightsCount
	}
    struct LightUniforms{
        #if ${defines.ambientLightCount}
            ambient:vec3<f32>,
        #endif
        #if ${defines.spotLightsCount}
            spotLights:array<SpotLight,${defines.spotLightsCount}>,
        #endif
        #if ${defines.pointLightsCount}
            pointLights:array<PointLight,${defines.pointLightsCount}>,
        #endif
        #if ${defines.dirtectLightsCount}
            dirtectLights:array<DirectionalLight,${defines.dirtectLightsCount}>,
        #endif
        
    }
    @group(2) @binding(0) var<storage, read> lightUniforms: LightUniforms;
    #endif
    #if ${defines.materialPhong}
        fn parseLights(geometry:Geometry,shininess:f32)->ReflectedLight {
    #elif ${defines.materialPbr}
        fn parseLights(geometry:Geometry,material:PhysicalMaterial)->ReflectedLight{
    #endif
        var reflectedLight:ReflectedLight;
        #if ${defines.spotLightsCount > 0}
            //处理聚光灯
            var spotLight:SpotLight;
            for (var k = 0u; k < ${defines.spotLightsCount}; k = k + 1u) {
                spotLight= lightUniforms.spotLights[k];
                #if ${defines.materialPhong}
                    let spReflectedLight=getSpotLightInfo(spotLight,geometry.position,shininess,geometry.normal,geometry.viewDir);
                #elif ${defines.materialPbr}
                    let incidentLight=getSpotLightIncidentLight(spotLight,geometry);
                    let spReflectedLight=direct_Physical(incidentLight, geometry, material);
                #endif
                reflectedLight.directDiffuse+=spReflectedLight.directDiffuse;
                reflectedLight.directSpecular+=spReflectedLight.directSpecular;
            }
        #endif
        #if ${defines.pointLightsCount > 0}
            //处理点光源
            var pointLight:PointLight;
            for (var j= 0u; j < ${defines.pointLightsCount};j = j + 1u) {
                pointLight = lightUniforms.pointLights[j];
                #if ${defines.materialPhong}
                    let poiReflectedLight=getPointLightInfo(pointLight,geometry.position,shininess,geometry.normal,geometry.viewDir);
                #elif ${defines.materialPbr}
                   let incidentLight=getPointLightIncidentLight(pointLight,geometry);
                   let poiReflectedLight=direct_Physical(incidentLight, geometry, material);
                #endif
                reflectedLight.directDiffuse+=poiReflectedLight.directDiffuse;
                reflectedLight.directSpecular+=poiReflectedLight.directSpecular;
            }
        #endif
        #if ${defines.dirtectLightsCount > 0}
        //处理方向光
        var directionalLight:DirectionalLight;
        for (var i= 0u; i <${defines.dirtectLightsCount}; i = i + 1u) {
            directionalLight = lightUniforms.dirtectLights[i];
            #if ${defines.materialPhong}
                let dirReflectedLight=getDirtectLightInfo(directionalLight,shininess,geometry.normal,geometry.viewDir);
            #elif ${defines.materialPbr}
                let incidentLight=getDirectionalDirectLightIncidentLight(directionalLight,geometry);
                let dirReflectedLight=direct_Physical(incidentLight, geometry, material);
            #endif
            reflectedLight.directDiffuse+=dirReflectedLight.directDiffuse;
            reflectedLight.directSpecular+=dirReflectedLight.directSpecular;
        }
    #endif
        return reflectedLight;
    }`;
}

function lightCommon(defines) {
	return wgslParseDefines`
    struct ReflectedLight {
        directDiffuse:vec3<f32>,
        directSpecular:vec3<f32>,
        indirectDiffuse:vec3<f32>,
        indirectSpecular:vec3<f32>,
    };
    struct Geometry {
        position: vec3<f32>,
        normal: vec3<f32>,
        viewDir: vec3<f32>,
        #if ${defines.USE_CLEARCOAT}
            vec3 clearcoatNormal;
        #endif
    };
    fn getAmbientLightIrradiance(ambientLightColor: vec3<f32>) -> vec3<f32> {
        let irradiance = ambientLightColor;
        return irradiance;
    }
    fn getDistanceAttenuation(lightDistance: f32, cutoffDistance: f32, decayExponent: f32) -> f32 {
        if (cutoffDistance > 0.0 && decayExponent > 0.0) {
            let x:f32 = saturate(- lightDistance / cutoffDistance + 1.0);
            return pow(x, decayExponent);
        }
        return 1.0;
    }
    fn getSpotAttenuation(coneCosine: f32, penumbraCosine: f32, angleCosine: f32) -> f32 {
        return smoothstep(coneCosine, penumbraCosine, angleCosine);
    }
    fn shGetIrradianceAt( normal:vec3<f32>, shCoefficients:array<vec3<f32>,9>)->vec3<f32> {
        let x:f32 = normal.x; 
        let y:f32 = normal.y; 
        let z:f32 = normal.z;
        var result:vec3<f32> = shCoefficients[ 0 ] * 0.886227;
        result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
        result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
        result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
        result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
        result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
        result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
        result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
        result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
        return result;
    }
    fn inverseTransformDirection( dir:vec3<f32>, matrix:mat4x4<f32> )->vec3<f32> {
        return normalize( ( vec4<f32>( dir, 0.0 ) * matrix ).xyz );
    }
    fn getLightProbeIrradiance( lightProbe:array<vec3<f32>,9>, normal:vec3<f32>,viewMatrix:mat4x4<f32> )->vec3<f32> {
        let worldNormal:vec3<f32> = inverseTransformDirection( normal,viewMatrix );
        let irradiance:vec3<f32> = shGetIrradianceAt( worldNormal, lightProbe );
        return irradiance;
    }
 `;
}

function brdf(defines) {
	return wgslParseDefines`
        #if ${defines.USE_SHEEN}
                fn D_Charlie( roughness:f32,dotNH:f32 )->f32 {
                    let alpha:f32 = pow2( roughness );
                    let invAlpha:f32 = 1.0 / alpha;
                    let cos2h:f32 = dotNH * dotNH;
                    let sin2h:f32 = max( 1.0 - cos2h, 0.0078125 );
                    return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
                }
                fn V_Neubelt( dotNV:f32, dotNL:f32 )->f32 {
                    return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
                }
                fn BRDF_Sheen(lightDir:vec3<f32>, viewDir:vec3<f32>, normal:vec3<f32>,sheenColor:vec3<f32>,sheenRoughness:f32 )->vec3<f32> {
                    let halfDir:vec3<f32> = normalize( lightDir + viewDir );
                    let dotNL:f32 = saturate( dot( normal, lightDir ) );
                    let dotNV:f32 = saturate( dot( normal, viewDir ) );
                    let dotNH:f32 = saturate( dot( normal, halfDir ) );
                    let D:f32 = D_Charlie( sheenRoughness, dotNH );
                    let V:f32 = V_Neubelt( dotNV, dotNL );
                    return sheenColor * ( D * V );
                }
        #endif
        fn BRDF_Lambert(diffuseColor:vec3<f32>)->vec3<f32> {

            return RECIPROCAL_PI * diffuseColor;

        } // validated

        fn F_Schlick( f0:vec3<f32>, f90:f32, dotVH:f32 )->vec3<f32> {

            // Original approximation by Christophe Schlick '94
            // float fresnel = pow( 1.0 - dotVH, 5.0 );

            // Optimized variant (presented by Epic at SIGGRAPH '13)
            // https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
            let fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );

           // return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
           return ( 1.0 - f0 ) * fresnel + f0;

        } // validated

        fn Schlick_to_F0(f:vec3<f32>, f90:f32, dotVH:f32 )->vec3<f32> {
            let x:f32 = clamp( 1.0 - dotVH, 0.0, 1.0 );
            let x2:f32 = x * x;
            let x5:f32 = clamp( x * x2 * x2, 0.0, 0.9999 );

            return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
        }
        fn V_GGX_SmithCorrelated( alpha:f32, dotNL:f32,dotNV:f32 )->f32 {

            let a2 :f32= pow2( alpha );

            let gv:f32 = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
            let gl:f32 = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );

            return 0.5 / max((gv + gl), 0.000000001 );

        }
        fn D_GGX( alpha:f32, dotNH:f32 )->f32 {

            let a2:f32 = pow2( alpha );

            let denom:f32 = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1

            return RECIPROCAL_PI * a2 / pow2( denom );

        }
        fn BRDF_GGX( lightDir:vec3<f32>, viewDir:vec3<f32>, normal:vec3<f32>, f0:vec3<f32>, f90:f32, roughness:f32 )->vec3<f32> {

            let alpha:f32 = pow2( roughness ); // UE4's roughness

            let halfDir = normalize( lightDir + viewDir );

            let dotNL:f32 = saturate( dot( normal, lightDir ) );
            let dotNV:f32 = saturate( dot( normal, viewDir ) );
            let dotNH:f32 = saturate( dot( normal, halfDir ) );
            let dotVH:f32 = saturate( dot( lightDir, halfDir ) );

            let F = F_Schlick( f0, f90, dotVH );

            let V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );

            let D = D_GGX( alpha, dotNH );

            return F * ( V * D );

        }
        fn direct_Physical( directLight:IncidentLight, geometry:Geometry,material:PhysicalMaterial)->ReflectedLight {
            var reflectedLight:ReflectedLight;
            let dotNL:f32 = saturate(dot( geometry.normal,geometry.viewDir));
            let irradiance:vec3<f32> = dotNL * directLight.color*3.1415926;
            reflectedLight.directSpecular = irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
            reflectedLight.directDiffuse = irradiance * BRDF_Lambert( material.diffuseColor );
            return reflectedLight;
        }
  `;
}

function pbrFunction(defines) {
	return wgslParseDefines`

    #if ${defines.DITHERING}
        fn dithering(color:vec3<f32> )->vec3<f32> {
            let grid_position:f32 = rand( gl_FragCoord.xy );
            let dither_shift_RGB:vec3<f32> = vec3<f32>( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
            dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
            return color + dither_shift_RGB;
        }
    #endif

    #if ${defines.USE_IRIDESCENCE}
        fn BRDF_GGX_Iridescence( lightDir:vec3<f32>, viewDir:vec3<f32>,normal:vec3<f32>, f0:vec3<f32>, f90:f32,iridescence:f32, iridescenceFresnel:vec3<f32>,roughness:f32 )->vec3<f32> {
            let alpha:f32 = pow2( roughness );
            let halfDir:vec3<f32> = normalize( lightDir + viewDir );
            let dotNL:f32 = saturate( dot( normal, lightDir ) );
            let dotNV:f32 = saturate( dot( normal, viewDir ) );
            let dotNH:f32 = saturate( dot( normal, halfDir ) );
            let dotVH:f32 = saturate( dot( viewDir, halfDir ) );
            let F:vec3<f32> = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );
            let V:f32 = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
            let D:f32 = D_GGX( alpha, dotNH );
            return F * ( V * D );
        }
    #endif

    #if ${defines.USE_SHEEN}
        fn D_Charlie( roughness:f32,dotNH:f32 )->f32 {
            let alpha:f32 = pow2( roughness );
            let invAlpha:f32 = 1.0 / alpha;
            let cos2h:f32 = dotNH * dotNH;
            let sin2h:f32 = max( 1.0 - cos2h, 0.0078125 );
            return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
        }
        fn V_Neubelt( dotNV:f32, dotNL:f32 )->f32 {
            return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
        }
        fn BRDF_Sheen(lightDir:vec3<f32>, viewDir:vec3<f32>, normal:vec3<f32>,sheenColor:vec3<f32>,sheenRoughness:f32 )->vec3<f32> {
            let halfDir:vec3<f32> = normalize( lightDir + viewDir );
            let dotNL:f32 = saturate( dot( normal, lightDir ) );
            let dotNV:f32 = saturate( dot( normal, viewDir ) );
            let dotNH:f32 = saturate( dot( normal, halfDir ) );
            let D:f32 = D_Charlie( sheenRoughness, dotNH );
            let V:f32 = V_Neubelt( dotNV, dotNL );
            return sheenColor * ( D * V );
        }
    #endif

    #if ${defines.USE_IRIDESCENCE}
        let XYZ_TO_REC709: mat3x3<f32> = mat3x3<f32>(
        3.2404542, -0.9692660, 0.0556434, -1.5371385, 1.8760108, -0.2040259, -0.4985314, 0.0415560, 1.0572252
        );
        fn Fresnel0ToIor( fresnel0:vec3<f32> )->vec3<f32> {
            let sqrtF0:vec3<f32> = sqrt( fresnel0 );
            return ( vec3<f32>( 1.0 ) + sqrtF0 ) / ( vec3<f32>( 1.0 ) - sqrtF0 );
        }
        fn IorToFresnel0(transmittedIor:vec3<f32>,incidentIor:f32 )->vec3<f32> {
            return pow2Vector( ( transmittedIor - vec3<f32>( incidentIor ) ) / ( transmittedIor + vec3<f32>( incidentIor ) ) );
        }
        fn IorToFresnel0(transmittedIor:f32, incidentIor:f32 )->f32 {
            return pow2Vector( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
        }
        fn evalSensitivity(OPD:f32,shift:vec3<f32> )->vec3<f32> {
            let phase:f32 = 2.0 * PI * OPD * 1.0e-9;
            let val:vec3<f32> = vec3<f32>( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
            let pos:vec3<f32> = vec3<f32>( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
            let vart:vec3<f32> = vec3<f32>( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
            let xyz:vec3<f32> = val * sqrt( 2.0 * PI * vart ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * vart );
            xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
            xyz /= 1.0685e-7;
            let rgb:vec3<f32> = XYZ_TO_REC709 * xyz;
            return rgb;
        }
        fn evalIridescence(outsideIOR:f32, eta2:f32,cosTheta1:f32,thinFilmThickness:f32,baseF0:vec3<f32> )->vec3<f32> {
            var I:vec3<f32>;
            let iridescenceIOR:f32 = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
            let sinTheta2Sq:f32 = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
            let cosTheta2Sq:f32 = 1.0 - sinTheta2Sq;
            if ( cosTheta2Sq < 0.0 ) {
                return vec3<f32>( 1.0 );
            }
            let cosTheta2:f32 = sqrt( cosTheta2Sq );
            let R0:f32 = IorToFresnel0( iridescenceIOR, outsideIOR );
            let R12:f32 = F_Schlick( R0, 1.0, cosTheta1 );
            let R21:f32 = R12;
            let T121:f32 = 1.0 - R12;
            let phi12:f32 = 0.0;
            if ( iridescenceIOR < outsideIOR ) phi12 = PI;
            let phi21:f32 = PI - phi12;
            let baseIOR:vec3<f32> = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );
            let R1:vec3<f32> = IorToFresnel0( baseIOR, iridescenceIOR );
            let R23:vec3<f32> = F_Schlick( R1, 1.0, cosTheta2 );
            let phi23:vec3<f32> = vec3<f32>( 0.0 );
            if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
            if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
            if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
            let OPD:f32 = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
            let phi:vec3<f32> = vec3<f32>( phi21 ) + phi23;
            let R123:vec3<f32> = clamp( R12 * R23, 1e-5, 0.9999 );
            let r123:vec3<f32> = sqrt( R123 );
            let Rs:vec3<f32> = pow2( T121 ) * R23 / ( vec3<f32>( 1.0 ) - R123 );
            let C0:vec3<f32> = R12 + Rs;
            I = C0;
            let Cm:vec3<f32> = Rs - T121;
            for ( let m : u32 = 1;m <= 2; ++ m ) {
                Cm *= r123;
                Sm:vec3<f32> = 2.0 * evalSensitivity( f32( m ) * OPD, f32( m ) * phi );
                I += Cm * Sm;
            }
            return max( I, vec3<f32>( 0.0 ) );
        }
    #endif
    const clearcoatSpecular:vec3<f32> = vec3<f32>( 0.0 );
    const sheenSpecular:vec3<f32> = vec3<f32>( 0.0 );

    fn IBLSheenBRDF( normal:vec3<f32>, viewDir:vec3<f32>, roughness:f32 )->f32 {
        let dotNV:f32 = saturate( dot( normal, viewDir ) );
        let r2:f32 = roughness * roughness;
        let a:f32 =select(-8.48 * r2 + 14.3 * roughness - 9.95,-339.2 * r2 + 161.4 * roughness - 25.9,roughness < 0.25);
        //let a:f32 = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
        let b:f32=select(1.97 * r2 - 3.27 * roughness + 0.72,44.0 * r2 - 23.7 * roughness + 3.26, roughness < 0.25);
        //let b:f32 = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
        //let DG:f32 = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
        let DG:f32 = exp( a * dotNV + b ) + select(0.1 * ( roughness - 0.25 ),0.0,roughness < 0.25);
        return saturate( DG * RECIPROCAL_PI );
    }
    fn DFGApprox( normal:vec3<f32>, viewDir:vec3<f32>,roughness:f32 )->vec2<f32> {
        let dotNV:f32 = saturate( dot( normal, viewDir ) );
        const c0:vec4<f32> = vec4<f32>( - 1, - 0.0275, - 0.572, 0.022 );
        let c1:vec4<f32> = vec4<f32>( 1, 0.0425, 1.04, - 0.04 );
        let r:vec4<f32> = roughness * c0 + c1;
        let a004:f32 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
        let fab:vec2<f32> = vec2<f32>( - 1.04, 1.04 ) * a004 + r.zw;
        return fab;
    }
    fn EnvironmentBRDF( normal:vec3<f32>,viewDir:vec3<f32>,specularColor:vec3<f32>, specularF90:f32,roughness:f32 )->vec3<f32> {
        let fab:vec2<f32> = DFGApprox( normal, viewDir, roughness );
        return specularColor * fab.x + specularF90 * fab.y;
    }


    fn computeSpecularOcclusion( dotNV:f32, ambientOcclusion:f32, roughness:f32 )->f32 {
        return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
    }
    #if ${defines.USE_TRANSMISSION}

    fn getVolumeTransmissionRay( n:vec3<f32>, v:vec3<f32>, thickness:f32, ior:f32, modelMatrix:mat4x4:f32)->vec3<f32> {
        var refractionVector:vec3<f32> = refract( - v, normalize( n ), 1.0 / ior );
        var modelScale:vec3<f32>;
        modelScale.x = length( vec3<f32>( modelMatrix[0].xyz ) );
        modelScale.y = length( vec3<f32>( modelMatrix[1].xyz ) );
        modelScale.z = length( vec3<f32>( modelMatrix[2].xyz ) );
        return normalize( refractionVector ) * thickness * modelScale;
    }
    fn applyIorToRoughness(roughness:f32, ior:f32 )->f32 {
        return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
    }
    fn getTransmissionSample( fragCoord:vec2<f32>, roughness:f32,ior:f32 )->vec4<f32> {
        let framebufferLod:f32 = log2( materialUniform.transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
        return textureSampleLevel(transmissionSamplerTexture,baseSampler,fragCoord.xy, framebufferLod);

    }
    fn applyVolumeAttenuation( radiance:vec3<vec3>, transmissionDistance:f32,attenuationColor:vec3<f32>,attenuationDistance:f32 )->vec3<f32> {
        if ( isinf( attenuationDistance ) ) {
            return radiance;
        }
        else {
            let attenuationCoefficient:vec3<f32> = -log( attenuationColor ) / attenuationDistance;
            let transmittance:vec3<f32> = exp( - attenuationCoefficient * transmissionDistance );
            return transmittance * radiance;
        }
    
    }
    fn getIBLVolumeRefraction( n:vec3<f32>,v:vec3<f32>, roughness:f32, diffuseColor:vec3<f32>,specularColor:vec3<f32>, specularF90:f32,position:vec3<f32>, modelMatrix:mat4x4<f32>, viewMatrix:mat4x4<f32>,projMatrix:mat4x4<f32>,ior:f32, thickness:f32,attenuationColor:vec3<f32>,attenuationDistance:f32 )->vec4<f32> {
        let transmissionRay:vec3<f32> = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
        let refractedRayExit:vec3<f32> = position + transmissionRay;
        let ndcPos:vec4<f32> = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
        let refractionCoords:vec2<f32> = ndcPos.xy / ndcPos.w;
        refractionCoords += 1.0;
        refractionCoords /= 2.0;
        let transmittedLight:vec4<f32> = getTransmissionSample( refractionCoords, roughness, ior );
        let attenuatedColor:vec3<f32> = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
        let F:vec3<f32> = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
        return vec4<f32>( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
    }
    #endif

    #if ${defines.USE_BUMPTEXTURE}
        fn dHdxy_fwd()->vec2<f32> {
            let dSTdx:vec2<f32> = dpdx( vUv );
            let dSTdy:vec2<f32> = dpdy( vUv );

            let Hll:f32 = materialUniform.bumpScale * textureSample(bumpTexture, baseSampler, vUv).x;
            let dBx:f32 = materialUniform.bumpScale * textureSample(bumpTexture, baseSampler, vUv + dSTdx).x - Hll;
            let dBy:f32 = materialUniform.bumpScale * textureSample(bumpTexture, baseSampler, vUv + dSTdy).x - Hll;
            return vec2<f32>( dBx, dBy );
        }
        fn perturbNormalArb( surf_pos:vec3<f32>, surf_norm:vec3<f32>, dHdxy:vec2<f32>, faceDirection:f32 )->vec3<f32> {
            let vSigmaX:vec3<f32> = dpdx( surf_pos.xyz );
            let vSigmaY:vec3<f32> = dpdy( surf_pos.xyz );
            let vN:vec3<f32> = surf_norm;
            let R1:vec3<f32> = cross( vSigmaY, vN );
            let R2:vec3<f32> = cross( vN, vSigmaX );
            let fDet:f32 = dot( vSigmaX, R1 ) * faceDirection;
            let vGrad:vec3<f32> = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
            return normalize( abs( fDet ) * surf_norm - vGrad );
        }
    #endif

    //! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALTEXTURE ) || defined ( USE_CLEARCOAT_NORMALTEXTURE ) )
    #if ${(!defines.USE_TANGENT && defines.TANGENTSPACE_NORMALTEXTURE) || defines.USE_CLEARCOAT_NORMALTEXTURE}
    fn perturbNormal2Arb( eye_pos:vec3<f32>, surf_norm:vec3<f32>, textureN:vec3<f32>, faceDirection:f32 )->vec3<f32> {
        let q0:vec3<f32> = dpdx( eye_pos.xyz );
        let q1:vec3<f32> = dpdy( eye_pos.xyz );
        let st0:vec2<f32> = dpdx( vUv.st );
        let st1:vec2<f32> = dpdy( vUv.st );
        let N:vec3<f32> = surf_norm;
        let q1perp:vec3<f32> = cross( q1, N );
        let q0perp:vec3<f32> = cross( N, q0 );
        let T:vec3<f32> = q1perp * st0.x + q0perp * st1.x;
        let B:vec3<f32> = q1perp * st0.y + q0perp * st1.y;
        let det:f32 = max( dot( T, T ), dot( B, B ) );
        let scale:f32 = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
        return normalize( T * ( textureN.x * scale ) + B * ( textureN.y * scale ) + N * textureN.z );
    }
    #endif
    struct MultiAndSingleScatter{
        multiScatter:vec3<f32>,
        singleScatter:vec3<f32>
    }
   #if ${defines.USE_IRIDESCENCE}
   ////////inout vec3 singleScatter, inout vec3 multiScatter
       fn computeMultiscatteringIridescence( normal:vec3<f32>, viewDir:vec3<f32>, specularColor:vec3<f32>, specularF90:f32, iridescence:f32,iridescenceF0:vec3<f32>, roughness:f32 )->MultiAndSingleScatter {
   #else
   ////////inout vec3 singleScatter, inout vec3 multiScatter
       fn computeMultiscattering( normal:vec3<f32>,viewDir:vec3<f32>, specularColor:vec3<f32>, specularF90:f32, roughness:f32)->MultiAndSingleScatter {
   #endif
   let fab:vec2<f32> = DFGApprox( normal, viewDir, roughness );

   var multiAndSingleScatter:MultiAndSingleScatter;

   #if ${defines.USE_IRIDESCENCE}
       let Fr:vec3<f32> = mix( specularColor, iridescenceF0, iridescence );
   #else
       let Fr:vec3<f32> = specularColor;
   #endif
       let FssEss:vec3<f32> = Fr * fab.x + specularF90 * fab.y;
       let Ess:f32 = fab.x + fab.y;
       let Ems:f32 = 1.0 - Ess;
       let Favg:vec3<f32> = Fr + ( 1.0 - Fr ) * 0.047619;
       let Fms:vec3<f32> = FssEss * Favg / ( 1.0 - Ems * Favg );
    //    singleScatter += FssEss;
    //    multiScatter += Fms * Ems;
       multiAndSingleScatter.multiScatter=Fms * Ems;
       multiAndSingleScatter.singleScatter=FssEss;
       return multiAndSingleScatter;
   }
   //直接光照
   fn RE_Direct_Physical( directLight:IncidentLight, geometry:GeometricContext,  material:PhysicalMaterial)->ReflectedLight {
       var reflectedLight:ReflectedLight;
       let dotNL:f32 = saturate(dot( geometry.normal, directLight.direction));
       let irradiance:vec3<f32> = dotNL * directLight.color;
       #if ${defines.USE_CLEARCOAT}
           let dotNLcc:f32 = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
           let ccIrradiance:vec3<f32> = dotNLcc * directLight.color;
           clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
       #endif

       #if ${defines.USE_SHEEN}
           sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
       #endif

       #if ${defines.USE_IRIDESCENCE}
           reflectedLight.directSpecular = irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );
       #else
           reflectedLight.directSpecular = irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
       #endif
       reflectedLight.directDiffuse = irradiance * BRDF_Lambert( material.diffuseColor );
       return reflectedLight;
   }
   //间接光照
   fn RE_IndirectDiffuse_Physical( irradiance:vec3<f32>, geometry:GeometricContext, material:PhysicalMaterial )->ReflectedLight {
       var reflectedLight:ReflectedLight;
       reflectedLight.indirectDiffuse = irradiance * BRDF_Lambert( material.diffuseColor );
       return reflectedLight;
   }
   //间接高光
   fn RE_IndirectSpecular_Physical( radiance:vec3<f32>, irradiance:vec3<f32>, clearcoatRadiance:vec3<f32>, geometry:GeometricContext, material:PhysicalMaterial)->ReflectedLight {
       var reflectedLight:ReflectedLight;
       #if ${defines.USE_CLEARCOAT}
           clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
       #endif
       #if ${defines.USE_SHEEN}
           sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
       #endif
       var singleScattering:vec3<f32>;
       var multiScattering:vec3<f32>;
       let cosineWeightedIrradiance:vec3<f32> = irradiance * RECIPROCAL_PI;
       var tempMultiAndSingleScatter:MultiAndSingleScatter;
       #if ${defines.USE_IRIDESCENCE}
             tempMultiAndSingleScatter=computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );
       #else
            tempMultiAndSingleScatter= computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness );
       #endif
       singleScattering=tempMultiAndSingleScatter.singleScatter; 
       multiScattering=tempMultiAndSingleScatter.multiScatter;
       let totalScattering:vec3<f32> = singleScattering + multiScattering;
       let diffuse:vec3<f32> = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
       reflectedLight.indirectSpecular = radiance * singleScattering;
       reflectedLight.indirectSpecular = multiScattering * cosineWeightedIrradiance;
       reflectedLight.indirectDiffuse = diffuse * cosineWeightedIrradiance;
       return reflectedLight;
   }
   `;
}

function pbrStruct(defines) {
	return wgslParseDefines`
        struct MaterialUniform{

            modelMatrix: mat4x4<f32>,
    
            diffuse:vec3<f32>,
    
            opacity:f32,
    
            normalMatrix: mat3x3<f32>,
    
            emissive:vec3<f32>,
    
            roughness:f32,
    
            metalness:f32,
    
            #if ${defines.TONE_MAPPING}
                toneMappingExposure:f32,
            #endif
           
            #if ${defines.SPECULAR}
    
                 specularColor:vec3<f32>,
    
                 specularIntensity:f32,
            #endif
            
            #if ${defines.USE_SHEEN}
    
                sheenColor:vec3<f32>,
    
                sheenRoughness:f32,
            #endif

            #if ${defines.USE_TRANSMISSION}
    
                attenuationColor:vec3<f32>,
    
                transmission:f32,
    
                transmissionSamplerSize:vec2<f32>,
    
                thickness:f32,
    
                attenuationDistance:f32,
                
            #endif

            #if ${defines.USE_SKINNING}
    
                bindMatrix:mat4x4<f32>,
    
                bindMatrixInverse:mat4x4<f32>,
    
                boneTextureSize:u32,
            #endif

            #if ${defines.USE_NORMALTEXTURE}
                 normalScale:vec2<f32>,
            #endif
    
            #if ${defines.IOR}
                ior:f32,
            #endif
    
            #if ${defines.USE_CLEARCOAT}
    
                #if ${defines.USE_CLEARCOAT_NORMALTEXTURE}
                    clearcoatNormalScale:vec2<f32>,
                #endif
    
                 clearcoat:f32,
    
                 clearcoatRoughness:f32,
            #endif
    
            #if ${defines.USE_IRIDESCENCE}
                iridescence:f32,
    
                iridescenceIOR:f32,
    
                iridescenceThicknessMinimum:f32,
    
                iridescenceThicknessMaximum:f32,
    
            #endif

            #if ${defines.USE_AOTEXTURE}
                 aoTextureIntensity:f32,
            #endif

            #if ${defines.USE_LIGHTTEXTURE}
                 lightTextureIntensity:f32,
            #endif
    
            #if ${defines.USE_ENVTEXTURE}
                envTextureIntensity:f32,
    
                flipEnvTexture:f32,
            #endif

            #if ${defines.USE_BUMPTEXTURE}
                bumpScale:f32;
            #endif

            #if ${defines.USE_DISPLACEMENTTEXTURE}
    
                displacementScale:f32,
    
                displacementBias:f32,
            #endif
            
            #if ${defines.USE_MORPHTARGETS}
    
                morphTargetBaseInfluence:f32,
    
                #if ${defines.MORPHTARGETS_TEXTURE} 
    
                    morphTargetsTextureSize:vec2<u32>,
    
                    MORPHTARGETS_COUNT:u32,
    
                #endif
    
                morphTargetInfluences:array<f32>,
                    
            #endif
        }

   `;
}

function pbrTexture(defines) {
	return wgslParseDefines`        
            #if ${defines.USE_BUMPTEXTURE}
                @group(0) @binding(${defines.bumpTextureBinding}) var bumpTexture: texture_2d<f32>;
            #endif
            #if ${defines.USE_TRANSMISSION}
                #if ${defines.USE_TRANSMISSIONTEXTURE}
                    @group(0) @binding(${defines.transmissionTextureBinding}) var transmissionTexture: texture_2d<f32>;
                #endif
                #if ${defines.USE_THICKNESSTEXTURE}
                    @group(0) @binding(${defines.thicknessTextureBinding}) var thicknessTexture: texture_2d<f32>;
                #endif
                @group(0) @binding(${defines.transmissionSamplerTextureBinding}) var transmissionSamplerTexture: texture_2d<f32>;
            #endif
            #if ${defines.USE_ENVTEXTURE}
                @group(0) @binding(${defines.envTextureBinding}) var envTexture: texture_cube<f32>;
            #endif
            #if ${defines.USE_NORMALTEXTURE}
                @group(0) @binding(${defines.normalTextureBinding}) var normalTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_CLEARCOATTEXTURE}
                @group(0) @binding(${defines.clearcoatTextureBinding}) var clearcoatTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_CLEARCOAT_ROUGHNESSTEXTURE}
                @group(0) @binding(${defines.clearcoatRclearcoatRoughnessTextureBinding}) var clearcoatRoughnessTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_CLEARCOAT_NORMALTEXTURE}
                @group(0) @binding(${defines.clearcoatNormalTextureBinding}) var clearcoatNormalTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_IRIDESCENCETEXTURE}
                @group(0) @binding(${defines.iridescenceTextureBinding}) var iridescenceTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_IRIDESCENCE_THICKNESSTEXTURE}
                @group(0) @binding(${defines.iridescenceThicknessTextureBinding}) var iridescenceThicknessTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_ROUGHNESSTEXTURE}
                @group(0) @binding(${defines.roughnessTextureBinding}) var roughnessTexture: texture_2d<f32>;
            #endif
            
            #if ${defines.USE_METALNESSTEXTURE}
                @group(0) @binding(${defines.metalnessTextureBinding}) var metalnessTexture: texture_2d<f32>;
            #endif

            #if ${defines.SPECULAR}
                #if ${defines.USE_SPECULARINTENSITYTEXTURE}
                    @group(0) @binding(${defines.specularIntensityTextureBinding}) var specularIntensityTexture: texture_2d<f32>;
                #endif

                #if ${defines.USE_SPECULARCOLORTEXTURE}
                    @group(0) @binding(${defines.specularColorTextureBinding}) var specularColorTexture: texture_2d<f32>;
                #endif
            #endif

            #if ${defines.USE_SHEEN}
                #if ${defines.USE_SHEENCOLORTEXTURE}
                    @group(0) @binding(${defines.sheenColorTextureBinding}) var sheenColorTexture: texture_2d<f32>;
                #endif
                #if ${defines.USE_SHEENROUGHNESSTEXTURE}
                    @group(0) @binding(${defines.sheenRoughnessTextureBinding}) var sheenRoughnessTexture: texture_2d<f32>;
                #endif
            #endif

            #if ${defines.USE_TEXTURE}
                @group(0) @binding(${defines.baseSamplerBinding}) var baseSampler: sampler;
                @group(0) @binding(${defines.baseTextureBinding}) var baseTexture: texture_2d<f32>;
            #endif

            #if ${defines.USE_ALPHATEXTURE}
                @group(0) @binding(${defines.alphaTextureBinding}) var alphaTexture: texture_2d<f32>;
            #endif

            #if ${defines.USE_AOTEXTURE}
                @group(0) @binding(${defines.aoTextureBinding}) var aoTexture: texture_2d<f32>;
                
            #endif
            #if ${defines.USE_LIGHTTEXTURE}
                @group(0) @binding(${defines.lightTextureBinding}) var lightTexture: texture_2d<f32>;
            #endif

            #if ${defines.USE_EMISSIVETEXTURE}
                @group(0) @binding(${defines.emissiveTextureBinding}) var emissiveTexture: texture_2d<f32>;
            #endif
     `;
}

function pbrUtils(defines) {
	return wgslParseDefines`
    const PI:f32= 3.141592653589793;
    const PI2:f32= 6.283185307179586;
    const PI_HALF:f32= 1.5707963267948966;
    const RECIPROCAL_PI:f32= 0.3183098861837907;
    const RECIPROCAL_PI2:f32= 0.15915494309189535;
    const EPSILON:f32= 1e-6;

    fn pow2(x:f32 )->f32 {
        return x*x;
    }
    fn pow2Vector(x:vec3<f32> )->vec3<f32> {
        return x*x;
    }
    fn pow3( x:f32 )->f32 {
        return x*x*x;
    }
    fn pow4( x:f32 )->f32 {
        let x2:f32 = x*x;
        return x2*x2;
    }
    fn max3( v:vec3<f32> )->f32 {
        return max( max( v.x, v.y ), v.z );
    }
    fn average(v:vec3<f32> )->f32 {
        return dot( v, vec3<f32>( 0.3333333 ) );
    }
    fn rand( uv:vec2<f32> )->f32 {
        let a:f32 = 12.9898;
        let b:f32 = 78.233;
        let c:f32 = 43758.5453;
        let dt:f32 = dot( uv.xy, vec2<f32>( a, b ) );
        let sn:f32 = dt % PI;
        return fract( sin( sn ) * c );
    }
    fn transformDirection( dir:vec3<f32>, matrix:mat4x4<f32> )->vec3<f32> {
        return normalize( ( matrix * vec4<f32>( dir, 0.0 ) ).xyz );
    }

    fn transposeMat3( m:mat3x3<f32> )->mat3x3<f32> {
        var tmp:mat3x3<f32>;
        tmp[ 0 ] = vec3<f32>( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
        tmp[ 1 ] = vec3<f32>( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
        tmp[ 2 ] = vec3<f32>( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
        return tmp;
    }
    fn luminance( rgb:vec3<f32> )->f32 {
        let weights:vec3<f32> = vec3<f32>(0.2126729, 0.7151522, 0.0721750 );
        return dot( weights, rgb );
    }
    fn LinearToneMapping( color:vec3<f32>,toneMappingExposure:f32  )->vec3<f32> {
        return toneMappingExposure * color;
    }

    fn ReinhardToneMapping( color:vec3<f32>,toneMappingExposure:f32 )->vec3<f32> {
        var tempColor:vec3<f32>;
        tempColor=color;
        tempColor *= toneMappingExposure;
        return saturate( tempColor / ( vec3<f32>( 1.0 ) + tempColor ) );
    }
    fn CustomToneMapping( color:vec3<f32> )->vec3<f32> {
        return color;
    }
    fn toneMapping( color:vec3<f32>,toneMappingExposure:f32  )->vec3<f32> {
        return ReinhardToneMapping( color,toneMappingExposure );
    }

    fn LinearToLinear( value:vec4<f32> )->vec4<f32> {
        return value;
    }
    fn lessThanEqual(a:vec3<f32>,b:vec3<f32>)->vec3<f32>{
       let xValue:f32=select(b.x,a.x,a.x<=b.x);
       let yValue:f32=select(b.y,a.y,a.y<=b.y);
       let zValue:f32=select(b.z,a.z,a.z<=b.z);
       return vec3<f32>(xValue,yValue,zValue);    
    }
    fn LinearTosRGB( value:vec4<f32> )->vec4<f32> {
        return vec4<f32>( mix( pow( value.rgb, vec3<f32>( 0.41666 ) ) * 1.055 - vec3<f32>( 0.055 ), value.rgb * 12.92, vec3<f32>( lessThanEqual( value.rgb, vec3<f32>( 0.0031308 ) ) ) ), value.a );
    }
    fn linearToOutputTexel(value:vec4<f32> )->vec4<f32> {
        return LinearTosRGB( value );
    }
    `;
}

function phongFunction(defines) {
	return `
    fn G_BlinnPhong_Implicit( )->f32 {

        // geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)
        return 0.25;

    }
    fn D_BlinnPhong( shininess:f32, dotNH:f32 )->f32 {

        return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow(dotNH, shininess);

    }
    fn BRDF_BlinnPhong( lightDir:vec3<f32>, viewDir:vec3<f32>, normal:vec3<f32>, specularColor:vec3<f32>, shininess:f32 )->vec3<f32> {

        let  halfDir = normalize( lightDir + viewDir );

        let  dotNH:f32 = saturate( dot( normal, halfDir ) );
        let dotVH:f32 = saturate( dot( viewDir, halfDir ) );

        let F = F_Schlick( specularColor, 1.0, dotVH );

        let G:f32 = G_BlinnPhong_Implicit( );

        let D = D_BlinnPhong( shininess, dotNH );

        return F * ( G * D );

    } 
    fn RE_Direct_BlinnPhong(  directLight:IncidentLight,geometry:GeometricContext, material:BlinnPhongMaterial )->ReflectedLight{
        var reflectedLight:ReflectedLight; 
        let dotNL:f32 = saturate(dot(geometry.normal, directLight.direction));
        let irradiance:vec3<f32> = dotNL*directLight.color;

        reflectedLight.directDiffuse= irradiance * BRDF_Lambert( material.diffuseColor );

        reflectedLight.directSpecular= irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
        return reflectedLight;
    }
    fn RE_IndirectDiffuse_BlinnPhong( irradiance:vec3<f32>, geometry:GeometricContext, material:BlinnPhongMaterial)->ReflectedLight {
        var reflectedLight:ReflectedLight; 
        reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
        return reflectedLight;
    }
    `;
}

function phongUtils(defines) {
	return `
   struct BlinnPhongMaterial {
        diffuseColor:vec3<f32>,
        specularColor:vec3<f32>,
        specularShininess:f32,
        specularStrength:f32,
    };
    const RECIPROCAL_PI:f32= 0.3183098861837907;
   fn pow2( x:f32 )->f32 { return x*x; }
   fn pow3( x:f32 )->f32 { return x*x*x; }
   fn pow4(x:f32 )->f32 { let x2 = x*x; return x2*x2; }
   fn max3( v:vec3<f32> )->f32 { return max( max( v.x, v.y ), v.z ); }
   fn average(v:vec3<f32> )->f32 { 
       let result=vec3<f32>( 0.3333333,  0.3333333, 0.3333333);
       return dot( v,result ); 
   }
   `;
}

function environment(defines) {
	return wgslParseDefines`
   #if ${defines.ENVTEXTURE_TYPE_CUBE_UV}
        const cubeUV_minMipLevel:f32= 4.0;
        const cubeUV_minTileSize:f32= 16.0;
        const CUBEUV_MAX_MIP:f32=6.0;
        const CUBEUV_TEXEL_WIDTH:f32=1.0/256.0;
        const CUBEUV_TEXEL_HEIGHT:f32=1.0/256.0;
        fn getFace(direction:vec3<f32> )->f32 {
            let absDirection:vec3<f32> = abs( direction );
            var face:f32 = - 1.0;
            if ( absDirection.x > absDirection.z ) {
                if ( absDirection.x > absDirection.y ){
                    face =select(3.0,0.0,direction.x > 0.0);
                }else{
                    face =select(4.0,1.0,direction.y > 0.0);
                }
                
            }
            else {
                if ( absDirection.z > absDirection.y ){
                    face =select(5.0,2.0,direction.z > 0.0);
                }else{
                    face =select(4.0,1.0,direction.y > 0.0);
                }       
            }
            return face;
        }
        fn getUV( direction:vec3<f32>, face:f32 )->vec2<f32> {
            var uv:vec2<f32>;
            if ( face == 0.0 ) {
                uv = vec2<f32>( direction.z, direction.y ) / abs( direction.x );
            }
            else if ( face == 1.0 ) {
                uv = vec2<f32>( - direction.x, - direction.z ) / abs( direction.y );
            }
            else if ( face == 2.0 ) {
                uv = vec2<f32>( - direction.x, direction.y ) / abs( direction.z );
            }
            else if ( face == 3.0 ) {
                uv = vec2<f32>( - direction.z, direction.y ) / abs( direction.x );
            }
            else if ( face == 4.0 ) {
                uv = vec2<f32>( - direction.x, direction.z ) / abs( direction.y );
            }
            else {
                uv = vec2<f32>( direction.x, direction.y ) / abs( direction.z );
            }
            return 0.5 * ( uv + 1.0 );
        }
        fn bilinearCubeUV(envTexture:texture_cube<f32>,baseSampler:sampler,direction:vec3<f32>, mipInt:f32 )->vec3<f32> {
            var face:f32 = getFace( direction );
            let filterInt:f32 = max( cubeUV_minMipLevel - mipInt, 0.0 );
            let tempMipInt = max( mipInt, cubeUV_minMipLevel );
            let faceSize:f32 = exp2( tempMipInt );
            var uv:vec2<f32> = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
            if ( face > 2.0 ) {
                uv.y += faceSize;
                face -= 3.0;
            }
            uv.x += face * faceSize;
            uv.x += filterInt * 3.0 * cubeUV_minTileSize;
            uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
            uv.x *= CUBEUV_TEXEL_WIDTH;
            uv.y *= CUBEUV_TEXEL_HEIGHT;
            return textureSample(envTexture,baseSampler,direction).rgb;
        }
        const cubeUV_r0:f32= 1.0;
        const cubeUV_v0:f32= 0.339;
        const cubeUV_m0:f32= - 2.0;
        const cubeUV_r1:f32= 0.8;
        const cubeUV_v1:f32= 0.276;
        const cubeUV_m1:f32= - 1.0;
        const cubeUV_r4:f32= 0.4;
        const cubeUV_v4:f32= 0.046;
        const cubeUV_m4:f32= 2.0;
        const cubeUV_r5:f32= 0.305;
        const cubeUV_v5:f32= 0.016;
        const cubeUV_m5:f32= 3.0;
        const cubeUV_r6:f32= 0.21;
        const cubeUV_v6:f32= 0.0038;
        const cubeUV_m6:f32= 4.0;
        fn roughnessToMip( roughness:f32)->f32 {
            var mip:f32 = 0.0;
            if ( roughness >= cubeUV_r1 ) {
                mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
            }
            else if ( roughness >= cubeUV_r4 ) {
                mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
            }
            else if ( roughness >= cubeUV_r5 ) {
                mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
            }
            else if ( roughness >= cubeUV_r6 ) {
                mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
            }
            else {
                mip = - 2.0 * log2( 1.16 * roughness );
            }
            return mip;
        }
        fn textureCubeUV(envTexture:texture_cube<f32>, baseSampler:sampler,sampleDir:vec3<f32>,roughness:f32 )->vec4<f32> {
            let mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
            let mipF = fract( mip );
            let mipInt = floor( mip );
            let color0:vec3<f32> = bilinearCubeUV( envTexture,baseSampler,sampleDir, mipInt );
            if ( mipF == 0.0 ) {
                return vec4<f32>(color0, 1.0 );
            }
            else {
                let color1:vec3<f32> = bilinearCubeUV( envTexture,baseSampler, sampleDir, mipInt + 1.0 );
                return vec4<f32>(mix( color0, color1, mipF ), 1.0 );
            }
        
        }
   #endif
   #if ${defines.USE_ENVTEXTURE}
        fn getIBLIrradiance( normal:vec3<f32>,baseSampler:sampler,viewMatrix:mat4x4<f32>)->vec3<f32> {
            #if ${defines.ENVTEXTURE_TYPE_CUBE_UV}
                let worldNormal:vec3<f32> = inverseTransformDirection( normal, viewMatrix );
                let envTextureColor:vec4<f32> = textureCubeUV( envTexture,baseSampler, worldNormal, 1.0 );
                return PI * envTextureColor.rgb * materialUniform.envTextureIntensity;
            #else
                return vec3<f32>( 0.0 );
            #endif
        }
        fn getIBLRadiance( viewDir:vec3<f32>,baseSampler:sampler,viewMatrix:mat4x4<f32>,normal:vec3<f32>, roughness:f32 )->vec3<f32> {
            #if ${defines.ENVTEXTURE_TYPE_CUBE_UV}
                var reflectVec:vec3<f32> = reflect( - viewDir, normal );
                reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
                reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
                let envTextureColor:vec4<f32> = textureCubeUV( envTexture,baseSampler, reflectVec, roughness );
                return envTextureColor.rgb * materialUniform.envTextureIntensity;
            #else
                return vec3<f32>( 0.0 );
            #endif
            }
    #endif
   `;
}

function blinn_phong(defines) {
	return `
       fn getPointLightInfo(pointLight:PointLight,worldPos:vec3<f32>,shininess:f32,N:vec3<f32>,V:vec3<f32>)->vec3<f32>{
        var color=vec3<f32>(0.0,0.0,0.0);
        var direction:vec3<f32> = worldPos - pointLight.position;
        let dist:f32 = length( direction );
        direction = normalize(direction);
        let decay = clamp(1.0 - pow(dist / pointLight.distance, 4.0), 0.0, 1.0);

        let d =  max( dot( N, -direction ), 0.0 ) * decay;
        color += pointLight.color * d;

        let halfDir:vec3<f32> = normalize( V - direction );
        let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess )  * decay;
        color += pointLight.color * s;
        return color;
       }
       fn getSpotLightInfo(spotLight:SpotLight,worldPos:vec3<f32>,shininess:f32,N:vec3<f32>,V:vec3<f32>)->vec3<f32>{
        var color=vec3<f32>(0.0,0.0,0.0);
            var direction:vec3<f32> = spotLight.position - worldPos;
            let lightDistance:f32 = length(direction);
            direction = normalize(direction);
            let angleCos:f32 = dot( direction, -spotLight.direction );
            let decay:f32 = clamp(1.0 - pow(lightDistance/spotLight.distance, 4.0), 0.0, 1.0);
            let spotEffect:f32 = smoothstep( spotLight.penumbraCos, spotLight.coneCos, angleCos );
            let decayTotal:f32 = decay * spotEffect;
            let d:f32 = max( dot( N, direction ), 0.0 )  * decayTotal;
            color += spotLight.color * d;
            let halfDir:vec3<f32> = normalize( V + direction );
            let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess ) * decayTotal;
            color += spotLight.color * s;
            return color;
       }
    struct DirectionalLight {
        direction: vec3<f32>,
        color: vec3<f32>,
    };
      fn getDirtectLightInfo(directionalLight:DirectionalLight,shininess:f32,N:vec3<f32>,V:vec3<f32>)->vec3<f32>{
        var color=vec3<f32>(0.0,0.0,0.0);
        let d:f32 = max(dot(N, -directionalLight.direction), 0.0);
        color += directionalLight.color * d;

        let halfDir:vec3<f32> = normalize( V - directionalLight.direction );
        let s:f32 = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), shininess );
        color += directionalLight.color * s;
        return color;
       }
    `;
}

function getNormal(defines) {
	return wgslParseDefines`
  fn getNormal(input:VertInput
    #if ${defines.USE_NORMALTEXTURE}
    ,normalTexture:texture_2d<f32>,defaultSampler:sampler
    #endif
    )->vec3<f32>
    {
        // Retrieve the tangent space matrix
        let pos_dx:vec3<f32> = dpdx(input.worldPos);
        let pos_dy:vec3<f32> = dpdy(input.worldPos);
        let tex_dx:vec3<f32> = dpdx(vec3<f32>(input.uv, 0.0));
        let tex_dy:vec3<f32> = dpdy(vec3<f32>(input.uv, 0.0));
        var t:vec3<f32> = (tex_dy.y * pos_dx - tex_dx.y * pos_dy) / (tex_dx.x * tex_dy.y - tex_dy.x * tex_dx.y);
        let ng = input.normal;
        t = normalize(t - ng * dot(ng, t));
        let b:vec3<f32> = normalize(cross(ng, t));
        let tbn:mat3x3<f32> = mat3x3<f32>(t, b, ng);
    // TODO: TANGENTS
        #if ${defines.USE_NORMALTEXTURE}
            var n:vec3<f32> = textureSample(normalTexture,defaultSampler, input.uv).rgb;
            n = normalize(tbn * ((2.0 * n - 1.0) * vec3<f32>(materialUniform.normalTextureScale, 1.0)));
        #else
            var n:vec3<f32> = tbn[2].xyz;
        #endif
        return n;
    }
  `;
}

const ShaderChunk = {
	light: light,
	brdf: brdf,
	phongFunction: phongFunction,
	phongUtils: phongUtils,
	lightCommon: lightCommon,
	pbrStruct: pbrStruct,
	pbrFunction: pbrFunction,
	pbrTexture: pbrTexture,
	pbrUtils: pbrUtils,
	environment: environment,
	blinn_phong: blinn_phong,
	getNormal: getNormal
};

function phongVert(defines) {
	return `
      struct VertexOutput {
            @builtin(position) position: vec4<f32>,
            @location(0) uv: vec2<f32>,
            @location(1) view: vec3<f32>, // Vector from vertex to camera.
            @location(2) worldPos: vec3<f32>,
            @location(3) color: vec4<f32>,
            @location(4) normal: vec3<f32>,
            @location(5) viewPosition: vec3<f32>,
      };
      struct MaterialUniform {
            modelMatrix: mat4x4<f32>,
            color: vec3<f32>,
            opacity:f32,
            normalMatrix: mat4x4<f32>,
            emissive:vec3<f32>,
            specular:vec3<f32>,
            shininess:f32,
      }
      struct SystemUniform {
            projectionMatrix: mat4x4<f32>,
            viewMatrix: mat4x4<f32>,
            inverseViewMatrix: mat4x4<f32>,
            cameraPosition: vec3<f32>,
      }; 

      @binding(0) @group(0) var<uniform> selfUniform : MaterialUniform;
      @binding(0) @group(1) var<uniform> systemUniform : SystemUniform;

      struct VertexInput {
            @location(0) position: vec3<f32>,       
            @location(1) normal: vec3<f32>,
            @location(2) uv: vec2<f32>,
      }
      @vertex
      fn main(input: VertexInput) -> VertexOutput {
            var output: VertexOutput;
            output.uv = input.uv;
            let modelPos=selfUniform.modelMatrix *vec4<f32>(input.position,1.0);
            output.worldPos = modelPos.xyz/modelPos.w;
            let vNormalView = selfUniform.normalMatrix * vec4<f32>(input.normal,0.0);
            output.normal =  vNormalView.xyz;
            output.view = systemUniform.cameraPosition.xyz - modelPos.xyz;
            let viewPosition=systemUniform.viewMatrix * modelPos;
            output.viewPosition = -viewPosition.xyz;
            output.position = systemUniform.projectionMatrix * systemUniform.viewMatrix * modelPos;
            return output;
      }`;
}

function phongFrag(defines) {
	return wgslParseDefines`  
  struct VertInput {
      @builtin(position) position: vec4<f32>,
      @builtin(front_facing) is_front: bool,
      @location(0) uv: vec2<f32>,
      @location(1) view: vec3<f32>, // Vector from vertex to camera.
      @location(2) worldPos: vec3<f32>,
      @location(3) color: vec4<f32>,
      @location(4) normal: vec3<f32>,
      @location(5) viewPosition: vec3<f32>,
    };
    // #include <lightCommon>
    #include <light>
    #include <getNormal>
    struct MaterialUniform {
      modelMatrix: mat4x4<f32>,
      color: vec3<f32>,
      opacity:f32,
      normalMatrix: mat4x4<f32>,
      emissive:vec3<f32>,
      shininess:f32,
      specular:vec3<f32>,      
   }
   struct SystemUniform {
      projectionMatrix: mat4x4<f32>,
      viewMatrix: mat4x4<f32>,
      inverseViewMatrix: mat4x4<f32>,
      cameraPosition: vec3<f32>,
  }; 

    #if${defines.baseTexture}
      @group(0) @binding(2) var mySampler: sampler;
      @group(0) @binding(1) var myTexture: texture_2d<f32>;
    #endif
    @binding(0) @group(0) var<uniform> materialUniform : MaterialUniform;
    @binding(0) @group(1) var<uniform> systemUniform : SystemUniform;

    @fragment
    fn main(input:VertInput) -> @location(0) vec4<f32> {
        var totalEmissiveRadiance:vec3<f32> = materialUniform.emissive;
        var color:vec4<f32>;
        #if${defines.baseTexture}
            color= vec4<f32>(textureSample(myTexture, mySampler, input.uv).rgb+materialUniform.color,materialUniform.opacity);
        #else
            color=vec4<f32>(materialUniform.color,materialUniform.opacity);
        #endif     
        let faceDirection:f32 =select(-1.0,1.0,input.is_front);
        let  V:vec3<f32> =  normalize( systemUniform.cameraPosition - input.worldPos);
        let  N:vec3<f32> = getNormal(input)*faceDirection;
        var geometry:Geometry;
        geometry.normal=N;
        geometry.viewDir=V;
        geometry.position=input.worldPos;
        let lightColor:ReflectedLight=parseLights(geometry,materialUniform.shininess);
        var finnalColor:vec3<f32>=color.xyz+lightColor.directDiffuse+lightColor.directSpecular;
        return vec4<f32>(finnalColor,color.a);
    }`;
}

// import Color from "../../math/Color";
function colorFrag(defines) {
	return `
    struct VertexOutput {
        @builtin(position) position: vec4<f32>,
        @location(0) color: vec4<f32>,
    };
    @fragment
    fn main(input:VertexOutput) -> @location(0) vec4<f32> {
      return input.color;
    }
    `;
}

function colorVert(defines) {
	return `
   struct VertexInput {
        @location(0) position: vec3<f32>,       
        @location(1) color: vec4<f32>,
   }
   struct VertexOutput {
        @builtin(position) position: vec4<f32>,
        @location(0) color: vec4<f32>,
    };
   struct SelfUniform {
      modelMatrix: mat4x4<f32>,
   }
   struct SystemUniform {
      projectionMatrix: mat4x4<f32>,
      viewMatrix: mat4x4<f32>,
      inverseViewMatrix: mat4x4<f32>,
      cameraPosition: vec3<f32>,
   }; 
   @binding(0) @group(0) var<uniform> selfUniform : SelfUniform;
   @binding(0) @group(1) var<uniform> systemUniform : SystemUniform;
   @vertex
   fn main(input: VertexInput) -> VertexOutput {
    var output:VertexOutput;
    output.color=input.color;
    output.position = systemUniform.projectionMatrix * systemUniform.viewMatrix *selfUniform.modelMatrix*vec4<f32>(input.position,1.0);
    return output;
   }
   `;
}

function pbrFrag(defines) {
	return wgslParseDefines`
    #include <lightCommon>
    #include <light>
    #include <brdf>
    #include <pbrStruct>
    #include <pbrUtils>
    #include <pbrFunction>
    #include <pbrTexture>
    #include <environment>
    struct SystemUniform {
        projectionMatrix: mat4x4<f32>,
        viewMatrix: mat4x4<f32>,
        inverseViewMatrix: mat4x4<f32>,
        cameraPosition: vec3<f32>,
    }; 
    // uniform vec3 lightProbe[9],
////////////////////////////////////
struct VertexOutput {
    @builtin(position) position: vec4<f32>,
    @builtin(front_facing) is_front: bool,
    @location(0) vUv: vec2<f32>,
    @location(1) vViewPosition: vec3<f32>, // Vector from vertex to camera.
    @location(2) vWorldPosition: vec3<f32>,
    @location(3) vNormal: vec3<f32>,
    // 可选
    #if ${defines.USE_LIGHTTEXTURE || defines.USE_AOTEXTURE}
        @location(${defines.vUv2OutLocation}) vUv2: vec2<f32>,
    #endif

    #if ${defines.USE_COLOR_ALPHA}
        @location(${defines.vColorOutLocation}) vColor: vec4<f32>,
    #elif ${defines.USE_COLOR || defines.USE_INSTANCING_COLOR}
        @location(${defines.vColorOutLocation}) vColor: vec3<f32>,
    #endif

    #if ${defines.USE_TANGENT}
        @location(${defines.vTangentOutLocation}) vTangent: vec3<f32>,
        @location(${defines.vBitangentOutLocation}) vBitangent: vec3<f32>,
    #endif
};
        struct PhysicalMaterial {
             diffuseColor:vec3<f32>,
             roughness:f32,
             specularColor:vec3<f32>,
             specularF90:f32,
            #if ${defines.USE_CLEARCOAT}
                clearcoat:f32,
                clearcoatRoughness:f32,
                clearcoatF0:vec3<f32>,
                clearcoatF90:f32,
            #endif

            #if ${defines.USE_IRIDESCENCE}
                iridescence:f32,
                iridescenceIOR:f32,
                iridescenceThickness:f32,
                iridescenceFresnel:vec3<f32>,
                iridescenceF0:vec3<f32>,
            #endif

            #if ${defines.USE_SHEEN}
                sheenColor:vec3<f32>,
                sheenRoughness:f32,
            #endif

            #if ${defines.IOR}
                 ior:f32,
            #endif

            #if ${defines.USE_TRANSMISSION}
                transmission:f32,
                transmissionAlpha:f32,
                thickness:f32,
                attenuationDistance:f32,
                attenuationColor:vec3<f32>,
            #endif
        };
@binding(0) @group(0) var<uniform> materialUniform : MaterialUniform;
@binding(0) @group(1) var<uniform> systemUniform : SystemUniform;
@fragment
fn main(input:VertexOutput)-> @location(0) vec4<f32> {
        var diffuseColor:vec4<f32> = vec4(materialUniform.diffuse, materialUniform.opacity );
       // ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
        var reflectedLight:ReflectedLight;
        var totalEmissiveRadiance:vec3<f32> = materialUniform.emissive;
        #if ${defines.USE_TEXTURE}
            var sampledDiffuseColor:vec4<f32> =textureSample(baseTexture, baseSampler, input.vUv);
            #if ${defines.DECODE_VIDEO_TEXTURE}
                sampledDiffuseColor = vec4<f32>( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3<f32>( 0.0521327014 ), vec3<f32>( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3<f32>( lessThanEqual( sampledDiffuseColor.rgb, vec3<f32>( 0.04045 ) ) ) ), sampledDiffuseColor.w );
            #endif

            diffuseColor *= sampledDiffuseColor;
        #endif

        var roughnessFactor:f32 = materialUniform.roughness;
    
        #if ${defines.USE_ROUGHNESSTEXTURE}
            let texelRoughness:vec4<f32>=textureSample(roughnessTexture, baseSampler, input.vUv);
            roughnessFactor *= texelRoughness.g;
        #endif

        var metalnessFactor:f32 = materialUniform.metalness;
    
        #if ${defines.USE_METALNESSTEXTURE}
            let texelMetalness:vec4<f32> =textureSample(metalnessTexture, baseSampler, input.vUv);
            metalnessFactor *= texelMetalness.b;
        #endif

        let faceDirection:f32 =select(-1.0,1.0,input.is_front);
        #if ${defines.FLAT_SHADED}
            let fdx:vec3<f32> = dpdx( input.vViewPosition );
            let fdy:vec3<f32> = dpdy( input.vViewPosition );
            let normal:vec3<f32> = normalize( cross( fdx, fdy ) );
        #else
            let normal:vec3<f32> = normalize( input.vNormal );
            #if ${defines.DOUBLE_SIDED}
                normal = normal * faceDirection;
            #endif
            #if ${defines.USE_TANGENT}
                let tangent:vec3<f32> = normalize( input.vTangent );
                let bitangent:vec3<f32> = normalize( input.vBitangent );
                #if ${defines.DOUBLE_SIDED}
                    tangent = tangent * faceDirection;
                    bitangent = bitangent * faceDirection;
                #endif
                #if ${defines.TANGENTSPACE_NORMALTEXTURE || defines.USE_CLEARCOAT_NORMALTEXTURE}
                    let vTBN:mat3x3<f32> = mat3x3<f32>( tangent, bitangent, normal );
                #endif
            #endif
        #endif
    
        let geometryNormal:vec3<f32> = normal;

        #if ${defines.OBJECTSPACE_NORMALTEXTURE}
            normal =textureSample(normalTexture, baseSampler, input.vUv).xyz * 2.0 - 1.0;
            #if ${defines.FLIP_SIDED}
                normal = - normal;
            #endif
            #if ${defines.DOUBLE_SIDED}
                normal = normal * faceDirection;
            #endif

            normal = normalize(materialUniform.normalMatrix * normal );

            #elif ${defines.TANGENTSPACE_NORMALTEXTURE}
            let tempMapN:vec3<f32> =textureSample(normalTexture, baseSampler, input.vUv).xyz * 2.0 - 1.0;
            let mapN:vec3<f32> =tempMapN.xy *= materialUniform.normalScale;
            #if ${defines.USE_TANGENT}
                normal = normalize( vTBN * mapN );
            #else
                normal = perturbNormal2Arb( - input.vViewPosition, normal, mapN, faceDirection );
            #endif

            #elif ${defines.USE_BUMPTEXTURE}

                normal = perturbNormalArb( - input.vViewPosition, normal, dHdxy_fwd(), faceDirection );
        #endif

        #if ${defines.USE_CLEARCOAT}
            var clearcoatNormal:vec3<f32> = geometryNormal;
        #endif
        #if ${defines.USE_CLEARCOAT_NORMALTEXTURE}
            var clearcoatMapN:vec3<f32> =textureSample(clearcoatNormalTexture, baseSampler, input.vUv).xyz * 2.0 - 1.0;
            clearcoatMapN.xy *= materialUniform.clearcoatNormalScale;
            #if ${defines.USE_TANGENT}
                clearcoatNormal = normalize( vTBN * clearcoatMapN );
            #else
                clearcoatNormal = perturbNormal2Arb( - input.vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
            #endif
        #endif
        #if ${defines.USE_EMISSIVETEXTURE}
            let emissiveColor:vec4<f32> =textureSample(emissiveTexture, baseSampler, input.vUv);
            totalEmissiveRadiance *= emissiveColor.rgb;
        #endif

        var material:PhysicalMaterial;
        material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
        let dxy:vec3<f32> = max( abs( dpdx( geometryNormal ) ), abs( dpdy( geometryNormal ) ) );
        let geometryRoughness:f32 = max( max( dxy.x, dxy.y ), dxy.z );
        material.roughness = max( roughnessFactor, 0.0525 );
        material.roughness += geometryRoughness;
        material.roughness = min( material.roughness, 1.0 );

        #if ${defines.IOR}
            material.ior = materialUniform.ior;
            #if ${defines.SPECULAR}
                let specularIntensityFactor:f32 = materialUniform.specularIntensity;
                let specularColorFactor:vec3<f32> = materialUniform.specularColor;
                #if ${defines.USE_SPECULARINTENSITYTEXTURE}
                    specularIntensityFactor *=textureSample(specularIntensityTexture, baseSampler, input.vUv).a;
                #endif

                #if ${defines.USE_SPECULARCOLORTEXTURE}
                    specularColorFactor *=textureSample(specularColorTexture, baseSampler, input.vUv).rgb;
                #endif

                material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
            #else
                let specularIntensityFactor:f32 = 1.0;
                let specularColorFactor:vec3<f32> = vec3<f32>( 1.0 );
                material.specularF90 = 1.0;
            #endif
            material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
        #else
            material.specularColor = mix( vec3<f32>( 0.04 ), diffuseColor.rgb, metalnessFactor );
            material.specularF90 = 1.0;
        #endif
        #if ${defines.USE_CLEARCOAT}
            material.clearcoat = materialUniform.clearcoat;
            material.clearcoatRoughness = materialUniform.clearcoatRoughness;
            material.clearcoatF0 = vec3<f32>( 0.04 );
            material.clearcoatF90 = 1.0;
            #if ${defines.USE_CLEARCOATTEXTURE}
                material.clearcoat *=textureSample(clearcoatTexture, baseSampler, input.vUv).x;
            #endif
            #if ${defines.USE_CLEARCOAT_ROUGHNESSTEXTURE}
                material.clearcoatRoughness *=textureSample(clearcoatRoughnessTexture, baseSampler, input.vUv).y;
            #endif
            material.clearcoat = saturate( material.clearcoat );
            material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
            material.clearcoatRoughness += geometryRoughness;
            material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
        #endif
        #if ${defines.USE_IRIDESCENCE}
            material.iridescence = materialUniform.iridescence;
            material.iridescenceIOR = materialUniform.iridescenceIOR;
            #if ${defines.USE_IRIDESCENCETEXTURE}
                material.iridescence *=textureSample(iridescenceTexture, baseSampler, input.vUv).r;
            #endif
            #if ${defines.USE_IRIDESCENCE_THICKNESSTEXTURE}
                material.iridescenceThickness = (materialUniform.iridescenceThicknessMaximum - materialUniform.iridescenceThicknessMinimum) * textureSample(iridescenceThicknessTexture, baseSampler, input.vUv).g + materialUniform.iridescenceThicknessMinimum;
            #else
                material.iridescenceThickness = materialUniform.iridescenceThicknessMaximum;
            #endif
        #endif
        #if ${defines.USE_SHEEN}
            material.sheenColor = materialUniform.sheenColor;
            #if ${defines.USE_SHEENCOLORTEXTURE}
                material.sheenColor *=textureSample(sheenColorTexture, baseSampler, input.vUv).rgb;
            #endif
            material.sheenRoughness = clamp( materialUniform.sheenRoughness, 0.07, 1.0 );
            #if ${defines.USE_SHEENROUGHNESSTEXTURE}
                material.sheenRoughness *=textureSample(sheenRoughnessTexture, baseSampler, input.vUv).a;
            #endif
        #endif
        
        var geometry:GeometricContext;
        geometry.position = - input.vViewPosition;
        geometry.normal = normal;
       // geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( input.vViewPosition );
        geometry.viewDir = normalize( input.vViewPosition); 

        #if ${defines.USE_CLEARCOAT}
            geometry.clearcoatNormal = clearcoatNormal;
        #endif

        #if ${defines.USE_IRIDESCENCE}
            let dotNVi:f32 = saturate( dot( normal, geometry.viewDir ) );
            if ( material.iridescenceThickness == 0.0 ) {
                material.iridescence = 0.0;
            }
            else {
                material.iridescence = saturate( material.iridescence );
            }
            if ( material.iridescence > 0.0 ) {
                material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
                material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
            }
        #endif

        var iblIrradiance:vec3<f32> = vec3<f32>( 0.0 );
        var irradiance:vec3<f32> = getAmbientLightIrradiance(commonLightsParms.ambient);
        //irradiance += getLightProbeIrradiance( lightProbe, geometry.normal,systemUniform.viewMatrix );

        var radiance:vec3<f32> = vec3<f32>( 0.0 );
        var clearcoatRadiance:vec3<f32> = vec3<f32>( 0.0 );

        #if ${defines.USE_LIGHTTEXTURE}
            let lightMapTexel:vec4<f32> =textureSample(lightTexture, baseSampler, input.vUv2);
            let lightMapIrradiance:vec3<f32> = lightMapTexel.rgb * materialUniform.lightTextureIntensity;
            irradiance += lightMapIrradiance;
        #endif
        //&& defines.STANDARD&&defines.ENVTEXTURE_TYPE_CUBE_UV
        #if ${defines.USE_ENVTEXTURE} 
            iblIrradiance += getIBLIrradiance( geometry.normal,baseSampler,systemUniform.viewMatrix );
        #endif
        #if ${defines.USE_ENVTEXTURE}
            radiance += getIBLRadiance( geometry.viewDir,baseSampler,systemUniform.viewMatrix, geometry.normal, materialUniform.roughness );
            #if ${defines.USE_CLEARCOAT}
                clearcoatRadiance += getIBLRadiance( geometry.viewDir,baseSampler,systemUniform.viewMatrix, geometry.clearcoatNormal, material.clearcoatRoughness );
            #endif
        #endif
        //直接光照
            let dirReflectedLight:ReflectedLight= parseLights(geometry,material);
            reflectedLight.directDiffuse +=dirReflectedLight.directDiffuse;
            reflectedLight.directSpecular +=dirReflectedLight.directSpecular;
        //间接漫反射
            let indirectDiffuseLight:ReflectedLight= RE_IndirectDiffuse_Physical( irradiance, geometry, material);
            reflectedLight.directDiffuse +=indirectDiffuseLight.indirectDiffuse;
            reflectedLight.directSpecular +=indirectDiffuseLight.indirectSpecular;
        //间接高光
            let indirectSpecularLight:ReflectedLight=RE_IndirectSpecular_Physical( radiance, iblIrradiance, clearcoatRadiance, geometry, material);
            reflectedLight.directDiffuse +=indirectSpecularLight.indirectDiffuse;
            reflectedLight.directSpecular +=indirectSpecularLight.indirectSpecular;
        //环境光遮蔽
        #if ${defines.USE_AOTEXTURE}
            let ambientOcclusion:f32 = (textureSample(aoTexture, baseSampler, input.vUv2).r - 1.0 ) * materialUniform.aoTextureIntensity + 1.0;

            reflectedLight.indirectDiffuse *= ambientOcclusion;
            //&&defines.STANDARD
            #if ${defines.USE_ENVTEXTURE} 
                let dotNV:f32 = saturate( dot( geometry.normal, geometry.viewDir ) );
                reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
            #endif
        #endif

        var totalDiffuse:vec3<f32> = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
        var totalSpecular:vec3<f32> = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
        //透射
        #if ${defines.USE_TRANSMISSION}
            material.transmission = materialUniform.transmission;
            material.transmissionAlpha = 1.0;
            material.thickness = materialUniform.thickness;
            material.attenuationDistance = materialUniform.attenuationDistance;
            material.attenuationColor = materialUniform.attenuationColor;
            #if ${defines.USE_TRANSMISSIONTEXTURE}
                material.transmission *=textureSample(transmissionTexture, baseSampler, input.vUv).r;
            #endif
            #if ${defines.USE_THICKNESSTEXTURE}
                material.thickness *=textureSample(thicknessTexture, baseSampler, input.vUv).g;
            #endif
            let pos:vec3<f32> = vWorldPosition;
            let v:vec3<f32> = normalize( cameraPosition - pos );
            let n:vec3<f32> = inverseTransformDirection( normal, systemUniform.viewMatrix );
            let transmission:vec4<f32> = getIBLVolumeRefraction(
            n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90, pos, modelMatrix, systemUniform.viewMatrix, systemUniform.projectionMatrix, material.ior, material.thickness, material.attenuationColor, material.attenuationDistance );
            material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
            totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
        #endif

        let outgoingLight:vec3<f32> = totalDiffuse + totalSpecular + totalEmissiveRadiance;

        #if ${defines.USE_SHEEN}
            let sheenEnergyComp:f32 = 1.0 - 0.157 * max3( material.sheenColor );
            outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
        #endif

        #if ${defines.USE_CLEARCOAT}
            let dotNVcc:f32 = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
            let Fcc:vec3<f32> = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
            outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
        #endif

        #if ${defines.USE_TRANSMISSION}
            diffuseColor.a *= material.transmissionAlpha + 0.1;
        #endif

        var finnalColor:vec4<f32>;
        finnalColor = vec4<f32>( outgoingLight, diffuseColor.a );
        #if ${defines.TONE_MAPPING}
           finnalColor.rgb = toneMapping( finnalColor.rgb,materialUniform.toneMappingExposure );
        #endif

          finnalColor = linearToOutputTexel( finnalColor);

        #if ${defines.PREMULTIPLIED_ALPHA}
            finnalColor.rgb *= finnalColor.a;
        #endif
        #if ${defines.DITHERING}
            finnalColor.rgb = dithering( finnalColor.rgb );
        #endif
        return finnalColor;
    }`;
}

function pbrVert(defines) {
	return wgslParseDefines`
    #include <pbrStruct>
    struct VertexOutput {
        @builtin(position) position: vec4<f32>,
        @location(0) vUv: vec2<f32>,
        @location(1) vViewPosition: vec3<f32>, // Vector from vertex to camera.
        @location(2) vWorldPosition: vec3<f32>,
        @location(3) vNormal: vec3<f32>,
        // 可选
        #if ${defines.USE_LIGHTTEXTURE || defines.USE_AOTEXTURE}
            @location(${defines.vUv2OutLocation}) vUv2: vec2<f32>,
        #endif

        #if ${defines.USE_COLOR_ALPHA}
            @location(${defines.vColorOutLocation}) vColor: vec4<f32>,
        #elif ${defines.USE_COLOR || defines.USE_INSTANCING_COLOR}
            @location(${defines.vColorOutLocation}) vColor: vec3<f32>,
        #endif

        #if ${defines.USE_TANGENT}
            @location(${defines.vTangentOutLocation}) vTangent: vec3<f32>,
            @location(${defines.vBitangentOutLocation}) vBitangent: vec3<f32>,
        #endif
    };
    struct GlobalUniform {
        projectionMatrix: mat4x4<f32>,
        viewMatrix: mat4x4<f32>,
        inverseViewMatrix: mat4x4<f32>,
        cameraPosition: vec3<f32>,
    };

    //texture and sampler
    // @group(0) @binding(${defines.samplerBinding}) var baseSampler: sampler;
    #if ${defines.USE_SKINNING}
        //uniform highp sampler2D boneTexture;
        @group(0) @binding(${defines.boneTextureBinding}) var boneTexture: texture_2d<f32>;
    #endif

    #if ${defines.USE_DISPLACEMENTTEXTURE}
        //uniform sampler2D displacementMap;
        @group(0) @binding(${defines.displacementTextureBinding}) var displacementMap: texture_2d<f32>;
    #endif

    #if ${defines.MORPHTARGETS_TEXTURE}
        //uniform sampler2DArray morphTargetsTexture;
        @group(0) @binding(${defines.morphTargetsTextureBinding}) var morphTargetsTexture: texture_2d_array<f32>;
    #endif

    struct VertexInput {
        @location(0) position: vec3<f32>,  

        @location(1) normal: vec3<f32>,

        @location(2) uv: vec2<f32>,
        #if ${defines.USE_LIGHTTEXTURE || defines.USE_AOTEXTURE}
            @location(${defines.uv2Location}) uv2:vec2<f32>,
        #endif
        #if ${defines.USE_INSTANCING}
            @location(${defines.instanceMatrixLocation}) instanceMatrix:mat4x4<f32>,
        #endif
        #if ${defines.USE_INSTANCING_COLOR}
            @location(${defines.instanceColorLocation}) instanceColor:vec3<f32>,
        #endif
        
        #if ${defines.USE_TANGENT}
            @location(${defines.tangentLocation}) tangent:vec4<f32>,
        #endif
        #if ${defines.USE_COLOR_ALPHA}
            @location(${defines.colorLocation}) color:vec4<f32>,
        #elif ${defines.USE_COLOR}
            @location(${defines.colorLocation}) color:vec3<f32>,
        #endif

        #if ${defines.USE_MORPHTARGETS && !defines.MORPHTARGETS_TEXTURE}
            @location(${defines.morphTarget0Location}) morphTarget0:vec3<f32>,

            @location(${defines.morphTarget1Location}) morphTarget1:vec3<f32>,

            @location(${defines.morphTarget2Location}) morphTarget2:vec3<f32>,

            @location(${defines.morphTarget3Location}) morphTarget3:vec3<f32>,
            #if ${defines.USE_MORPHNORMALS}
                @location(${defines.morphNormal0Location}) morphNormal0:vec3<f32>,

                @location(${defines.morphNormal1Location}) morphNormal1:vec3<f32>,

                @location(${defines.morphNormal2Location}) morphNormal2:vec3<f32>,

                @location(${defines.morphNormal3Location}) morphNormal3:vec3<f32>,
            #else
                @location(${defines.morphTarget4Location}) morphTarget4:vec3<f32>,

                @location(${defines.morphTarget5Location}) morphTarget5:vec3<f32>,

                @location(${defines.morphTarget6Location}) morphTarget6:vec3<f32>,

                @location(${defines.morphTarget7Location}) morphTarget7:vec3<f32>,
            #endif
        #endif
        #if ${defines.USE_SKINNING}
            @location(${defines.skinIndexLocation}) skinIndex:vec4<f32>,
            @location(${defines.skinWeightLocation}) skinWeight:vec4<f32>,
        #endif
  }

    #if ${defines.MORPHTARGETS_TEXTURE}
        fn getMorph( vertexIndex:u32, morphTargetIndex:u32,offset:u32 )->vec4<f32> {
            let texelIndex:u32 = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
            let y:u32 = texelIndex / materialUniform.morphTargetsTextureSize.x;
            let x:u32 = texelIndex - y * materialUniform.morphTargetsTextureSize.x;
            let morphUV:vec3<u32> = vec3<u32>( x, y, morphTargetIndex );
            //textureLoad
            //return texelFetch( morphTargetsTexture, morphUV, 0 );
            return textureLoad( morphTargetsTexture, morphUV, 0 );
        }
    #endif
    #if ${defines.USE_SKINNING}
        fn getBoneMatrix( i:f32 )->mat4x4<f32> {
            let j:f32 = i * 4.0;
            let x:f32 = j%f32( materialUniform.boneTextureSize );
            let y:f32 = floor( j / f32( materialUniform.boneTextureSize ) );
            let dx:f32 = 1.0 / f32( materialUniform.boneTextureSize );
            let dy:f32 = 1.0 / f32( materialUniform.boneTextureSize );
            y = dy * ( y + 0.5 );
            
            let v1:vec4<f32> = textureSample(boneTexture, baseSampler, vec2<f32>( dx * ( x + 0.5 ), y ) );
            let v2:vec4<f32> = textureSample(boneTexture, baseSampler, vec2<f32>( dx * ( x + 1.5 ), y ) );
            let v3:vec4<f32> = textureSample(boneTexture, baseSampler, vec2<f32>( dx * ( x + 2.5 ), y ) );
            let v4:vec4<f32> = textureSample(boneTexture, baseSampler, vec2<f32>( dx * ( x + 3.5 ), y ) );
            let bone:mat4x4<f32> = mat4x4<f32>( v1, v2, v3, v4 );
            return bone;
        }
    #endif

    @binding(0) @group(0) var<uniform> materialUniform : MaterialUniform;
    @binding(0) @group(1) var<uniform> globalUniform : GlobalUniform;
    @vertex
    fn main(input:VertexInput)->VertexOutput {
        var vertexOutput:VertexOutput;
        #if ${defines.USE_TEXTURE}
            vertexOutput.vUv = input.uv;
        #endif
        #if ${defines.USE_LIGHTTEXTURE || defines.USE_AOTEXTURE}
            vertexOutput.vUv2 input.uv2;
        #endif
        #if ${defines.USE_COLOR_ALPHA}
            vertexOutput.vColor = vec4( 1.0 );
            #elif ${defines.USE_COLOR || defines.USE_INSTANCING_COLOR}
            vertexOutput.vColor = vec3( 1.0 );
        #endif
        #if ${defines.USE_COLOR}
            vertexOutput.vColor *= input.color;
        #endif
        #if ${defines.USE_INSTANCING_COLOR}
            vertexOutput.vColor.xyz *= input.instanceColor.xyz;
        #endif
        #if ${defines.USE_MORPHCOLORS && defines.MORPHTARGETS_TEXTURE}
            vertexOutput.vColor *= materialUniform.morphTargetBaseInfluence;
            for (let i : u32 = 0u; i < materialUniform.MORPHTARGETS_COUNT; i = i + 1u ) {
                #if ${defines.USE_COLOR_ALPHA}
                    if ( materialUniform.morphTargetInfluences[ i ] ! = 0.0 ) vertexOutput.vColor += getMorph( gl_VertexID, i, 2 ) * materialUniform.morphTargetInfluences[ i ];
                    #elif ${defines.USE_COLOR}
                    if ( materialUniform.morphTargetInfluences[ i ] ! = 0.0 ) vertexOutput.vColor += getMorph( gl_VertexID, i, 2 ).rgb * materialUniform.morphTargetInfluences[ i ];
                #endif
            }
        #endif
        var objectNormal:vec3<f32> = vec3<f32>(input.normal);
        #if ${defines.USE_TANGENT}
            let objectTangent:vec3<f32> = vec3<f32>( input.tangent.xyz );
        #endif
        #if ${defines.USE_MORPHNORMALS}
            objectNormal *= materialUniform.morphTargetBaseInfluence;
            #if ${defines.MORPHTARGETS_TEXTURE}
                for ( let i : u32 = 0u; i < materialUniform.MORPHTARGETS_COUNT; i = i + 1u) {
                    if ( materialUniform.morphTargetInfluences[ i ] ! = 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * materialUniform.morphTargetInfluences[ i ];
                }
            #else
                objectNormal += morphNormal0 * materialUniform.morphTargetInfluences[ 0 ];
                objectNormal += morphNormal1 * materialUniform.morphTargetInfluences[ 1 ];
                objectNormal += morphNormal2 * materialUniform.morphTargetInfluences[ 2 ];
                objectNormal += morphNormal3 * materialUniform.morphTargetInfluences[ 3 ];
            #endif
        #endif
        #if ${defines.USE_SKINNING}
            let boneMatX:mat4x4<f32> = getBoneMatrix( input.skinIndex.x );
            let boneMatY:mat4x4<f32> = getBoneMatrix( input.skinIndex.y );
            let boneMatZ:mat4x4<f32> = getBoneMatrix( input.skinIndex.z );
            let boneMatW:mat4x4<f32> = getBoneMatrix( input.skinIndex.w );
        #endif
        #if ${defines.USE_SKINNING}
            let skinMatrix:mat4x4<f32> = mat4x4<f32>( 0.0 );
            skinMatrix += input.skinWeight.x * boneMatX;
            skinMatrix += input.skinWeight.y * boneMatY;
            skinMatrix += input.skinWeight.z * boneMatZ;
            skinMatrix += input.skinWeight.w * boneMatW;
            skinMatrix = materialUniform.bindMatrixInverse * skinMatrix * materialUniform.bindMatrix;
            objectNormal = vec4<f32>( skinMatrix * vec4<f32>( objectNormal, 0.0 ) ).xyz;
            #if ${defines.USE_TANGENT}
                objectTangent = vec4<f32>( skinMatrix * vec4<f32>( objectTangent, 0.0 ) ).xyz;
            #endif
        #endif
        var transformedNormal:vec3<f32> = objectNormal;
        // transformedNormal+=vec3<f32>(0.0);
        #if ${defines.USE_INSTANCING}
            let m:mat3x3<f32> = mat3x3<f32>( input.instanceMatrix );
            transformedNormal /= vec3<f32>( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
            transformedNormal = m * transformedNormal;
        #endif
        transformedNormal = materialUniform.normalMatrix * transformedNormal;
        #if ${defines.FLIP_SIDED}
            transformedNormal = - transformedNormal;
        #endif
        #if ${defines.USE_TANGENT}
            let transformedTangent:vec3<f32> = (globalUniform.viewMatrix*materialUniform.modelMatrix * vec4<f32>( objectTangent, 0.0 ) ).xyz;
            #if ${defines.FLIP_SIDED}
                transformedTangent = - transformedTangent;
            #endif
        #endif
        vertexOutput.vNormal = normalize( transformedNormal );
        #if ${defines.FLAT_SHADED}
            #if ${defines.USE_TANGENT}
                vTangent = normalize( transformedTangent );
                vBitangent = normalize( cross( vNormal, vTangent ) * input.tangent.w );
            #endif
        #endif
        let transformed:vec3<f32> = vec3<f32>( input.position );
        #if ${defines.USE_MORPHTARGETS}
            transformed *= materialUniform.morphTargetBaseInfluence;
            #if ${defines.MORPHTARGETS_TEXTURE}
                for ( let i : u32 = 0u; i < materialUniform.MORPHTARGETS_COUNT; i = i + 1u ) {
                    if ( materialUniform.morphTargetInfluences[ i ] ! = 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
                }
            #else
                transformed += input.morphTarget0 * materialUniform.morphTargetInfluences[ 0 ];
                transformed += input.morphTarget1 * materialUniform.morphTargetInfluences[ 1 ];
                transformed += input.morphTarget2 * materialUniform.morphTargetInfluences[ 2 ];
                transformed += input.morphTarget3 * materialUniform.morphTargetInfluences[ 3 ];
                #if ${defines.USE_MORPHNORMALS}
                    transformed += input.morphTarget4 * materialUniform.morphTargetInfluences[ 4 ];
                    transformed += input.morphTarget5 * materialUniform.morphTargetInfluences[ 5 ];
                    transformed += input.morphTarget6 * materialUniform.morphTargetInfluences[ 6 ];
                    transformed += input.morphTarget7 * materialUniform.morphTargetInfluences[ 7 ];
                #endif
            #endif
        #endif
        #if ${defines.USE_SKINNING}
            let skinVertex:vec4<f32> = materialUniform.bindMatrix * vec4<f32>( transformed, 1.0 );
            let skinned:vec4<f32> = vec4<f32>( 0.0 );
            skinned += boneMatX * skinVertex * input.skinWeight.x;
            skinned += boneMatY * skinVertex * input.skinWeight.y;
            skinned += boneMatZ * skinVertex * input.skinWeight.z;
            skinned += boneMatW * skinVertex * input.skinWeight.w;
            transformed = ( materialUniform.bindMatrixInverse * skinned ).xyz;
        #endif
        #if ${defines.USE_DISPLACEMENTTEXTURE} 
            transformed += normalize( objectNormal ) * (textureSample(displacementMap, baseSampler, vUv).x * materialUniform.displacementScale + materialUniform.displacementBias );
        #endif
        var mvPosition:vec4<f32> = vec4<f32>( transformed, 1.0 );
        #if ${defines.USE_INSTANCING}
            mvPosition = input.instanceMatrix * mvPosition;
        #endif
        mvPosition = globalUniform.viewMatrix*materialUniform.modelMatrix * mvPosition;
        vertexOutput.position = globalUniform.projectionMatrix * mvPosition;
        vertexOutput.vViewPosition = - mvPosition.xyz/mvPosition.w;
        #if ${defines.USE_ENVTEXTURE || defines.DISTANCE || defines.USE_TRANSMISSION} 
            var worldPosition:vec4<f32> = vec4<f32>( transformed, 1.0 );
            #if ${defines.USE_INSTANCING}
                worldPosition = input.instanceMatrix * worldPosition;
            #endif
            worldPosition = materialUniform.modelMatrix * worldPosition;
        #endif
        #if ${defines.USE_TRANSMISSION}
            vertexOutput.vWorldPosition = worldPosition.xyz;
        #endif
        return vertexOutput;
    }
    `;
}

function skyBoxFrag(defines) {
	return `
    fn lessThanEqual(a:vec3<f32>,b:vec3<f32>)->vec3<f32>{
        let xValue:f32=select(b.x,a.x,a.x<=b.x);
        let yValue:f32=select(b.y,a.y,a.y<=b.y);
        let zValue:f32=select(b.z,a.z,a.z<=b.z);
        return vec3<f32>(xValue,yValue,zValue);    
     }
    fn LinearTosRGB( value:vec4<f32> )->vec4<f32> {
        return vec4<f32>( mix( pow( value.rgb, vec3<f32>( 0.41666 ) ) * 1.055 - vec3<f32>( 0.055 ), value.rgb * 12.92, vec3<f32>( lessThanEqual( value.rgb, vec3<f32>( 0.0031308 ) ) ) ), value.a );
    }
  struct FragmentInput {
    @location(0) texCoord : vec3<f32>
  };
  @group(0) @binding(2) var defaultSampler: sampler;
  @group(0) @binding(1) var skyboxTexture: texture_cube<f32>;
  @fragment
  fn main(input : FragmentInput) -> @location(0) vec4<f32> {
    let color = textureSample(skyboxTexture, defaultSampler, input.texCoord);
    return LinearTosRGB(color);
  }
`;
}

function skyBoxVert(defines) {
	return `
   struct SystemUniform {
       projectionMatrix: mat4x4<f32>,
       viewMatrix: mat4x4<f32>,
       inverseViewMatrix: mat4x4<f32>,
       cameraPosition: vec3<f32>,
   }; 
   struct MaterialUniform {
    modelMatrix: mat4x4<f32>,
 }
   @binding(0) @group(0) var<uniform> selfUniform : MaterialUniform;
   @binding(0) @group(1) var<uniform> systemUniform : SystemUniform;
     struct VertexInput {
       @location(0) position : vec3<f32>,
     };
     struct VertexOutput {
       @builtin(position) position : vec4<f32>,
       @location(0) texCoord : vec3<f32>,
     };
     @vertex
     fn main(input : VertexInput) -> VertexOutput {
       var output : VertexOutput;
       output.texCoord = input.position.xyz;
       var modelView = systemUniform.viewMatrix;
       // Drop the translation portion of the modelView matrix
       modelView[3] = vec4(0.0, 0.0, 0.0, modelView[3].w);
       output.position = systemUniform.projectionMatrix * modelView * vec4<f32>(input.position,1.0);
       // Returning the W component for both Z and W forces the geometry depth to
       // the far plane. When combined with a depth func of "less-equal" this makes
       // the sky write to any depth fragment that has not been written to yet.
       output.position = output.position.xyww;
       return output;
     }
   `;
}

function quadFrag(defines) {
	return `
    @group(0) @binding(2) var baseSampler: sampler;
    @group(0) @binding(1) var colorTexture: texture_2d<f32>;
    struct VertexOutput {
        @builtin(position) position: vec4<f32>,
        @location(0) uv: vec2<f32>,
    };
    @fragment
    fn main(input:VertexOutput) -> @location(0) vec4<f32> {
      return textureSample(colorTexture, baseSampler, vec2<f32>(input.uv.x,1.0-input.uv.y));
    }
    `;
}

function quadVert(defines) {
	return `
    struct VertexInput {
         @location(0) position: vec2<f32>,       
    }
    struct VertexOutput {
         @builtin(position) position: vec4<f32>,
         @location(0) uv: vec2<f32>,
     };
    @vertex
    fn main(input: VertexInput) -> VertexOutput {
     var output:VertexOutput;
     output.uv = input.position * 0.5 + 0.5;
     output.position = vec4<f32>(input.position, 0.0, 1.0);;
     return output;
    }
    `;
}

/*
 * @Author: junwei.gu junwei.gu@jiduauto.com
 * @Date: 2023-01-18 10:53:08
 * @LastEditors: junwei.gu junwei.gu@jiduauto.com
 * @LastEditTime: 2023-02-16 17:59:01
 * @FilePath: \GEngine\src\shader\material\pbr_vs.ts
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 */
function pbr_vs(defines) {
	return wgslParseDefines`
   struct MaterialUniform {
        modelMatrix: mat4x4<f32>,
        color: vec3<f32>,
        opacity:f32,
        normalMatrix: mat4x4<f32>,
        emissive:vec3<f32>,
        metallic:f32,
        roughness:f32,
        #if ${defines.USE_NORMALTEXTURE}
            normalTextureScale:vec2<f32>,
        #endif
        #if ${defines.USE_AOTEXTURE}
            occlusionStrength:f32,
        #endif
        // #if ${defines.HAS_SKIN} 
        //     jointMatrixCount:f32,
        //     jointMatrixs:array<mat4x4>,
        // #endif
   }

   struct SystemUniform {
        projectionMatrix: mat4x4<f32>,
        viewMatrix: mat4x4<f32>,
        inverseViewMatrix: mat4x4<f32>,
        cameraPosition: vec3<f32>,
   }; 
   
   struct VertexInput {
        @location(0) position: vec3<f32>,       
        @location(1) normal: vec3<f32>,
        @location(2) uv: vec2<f32>,
   }
//    ifdef HAS_SKIN
//    layout(location = JOINTS_0_LOCATION) in vec4 joint0;
//    layout(location = WEIGHTS_0_LOCATION) in vec4 weight0;
//    ifdef SKIN_VEC8
//    layout(location = JOINTS_1_LOCATION) in vec4 joint1;
//    layout(location = WEIGHTS_1_LOCATION) in vec4 weight1;
//    endif
//    endif
   
   
    struct VertexOutput {
        @builtin(position) position:vec4<f32>,
        @location(0) worldPos:vec3<f32>,
        @location(1) normal:vec3<f32>,
        @location(2) uv:vec2<f32>
    }  

    @binding(0) @group(0) var<uniform> materialUniform : MaterialUniform;
    @binding(0) @group(1) var<uniform> systemUniform : SystemUniform;
    @vertex
   fn main(input: VertexInput)-> VertexOutput
   {
       #if ${defines.HAS_SKIN} 
            mat4 skinMatrix = 
                   weight0.x * u_jointMatrix.matrix[int(joint0.x)] +
                   weight0.y * u_jointMatrix.matrix[int(joint0.y)] +
                   weight0.z * u_jointMatrix.matrix[int(joint0.z)] +
                   weight0.w * u_jointMatrix.matrix[int(joint0.w)];
           #if ${defines.SKIN_VEC8} 
               skinMatrix +=
                   weight1.x * u_jointMatrix.matrix[int(joint1.x)] +
                   weight1.y * u_jointMatrix.matrix[int(joint1.y)] +
                   weight1.z * u_jointMatrix.matrix[int(joint1.z)] +
                   weight1.w * u_jointMatrix.matrix[int(joint1.w)];
           #endif
        #endif
        var output: VertexOutput;
        output.uv = input.uv;
   
        #if ${defines.HAS_SKIN} 
            output.normal = normalize((materialUniform.normalMatrix * transpose(inverse(skinMatrix)) * vec4<f32>(input.normal, 0.0)).xyz);
            let pos:vec4<f32> = systemUniform.viewMatrix *materialUniform.modelMatrix*skinMatrix * vec4<f32>(input.position, 1.0);
            output.position = systemUniform.projectionMatrix * systemUniform.viewMatrix*materialUniform.modelMatrix * skinMatrix * vec4<f32>(input.position,1.0);
        #else
            let vNormalView = materialUniform.normalMatrix * vec4<f32>(input.normal,0.0);
            output.normal =  vNormalView.xyz;
            let pos:vec4<f32>=systemUniform.viewMatrix *materialUniform.modelMatrix*vec4<f32>(input.position, 1.0);
            output.position = systemUniform.projectionMatrix * systemUniform.viewMatrix *materialUniform.modelMatrix* vec4<f32>(input.position, 1.0);
        #endif      
        // output.worldPos = pos.xyz/pos.w; 
        let modelPos=materialUniform.modelMatrix *vec4<f32>(input.position,1.0);
        output.worldPos = modelPos.xyz/modelPos.w;
        return output;   
   }
   `;
}

function pbr_fs(defines) {
	return wgslParseDefines`
        // reference: https://github.com/KhronosGroup/glTF-WebGL-PBR/blob/master/shaders/pbr-frag.glsl
        #include <pbrUtils>
        #include <light>
        #include <brdf>
        struct MaterialUniform {
            modelMatrix: mat4x4<f32>,
            color: vec3<f32>,
            opacity:f32,
            normalMatrix: mat3x3<f32>,
            emissive:vec3<f32>,
            metallic:f32,
            roughness:f32,
            #if ${defines.USE_NORMALTEXTURE}
                normalTextureScale:vec2<f32>,
            #endif
            #if ${defines.USE_AOTEXTURE}
                occlusionStrength:f32,
            #endif
         }
         struct SystemUniform {
            projectionMatrix: mat4x4<f32>,
            viewMatrix: mat4x4<f32>,
            inverseViewMatrix: mat4x4<f32>,
            cameraPosition: vec3<f32>,
        }; 
        struct VertInput {
            @location(0) worldPos:vec3<f32>,
            @location(1) normal:vec3<f32>,
            @location(2) uv:vec2<f32>
        }    
        struct PBRInfo
        {
            NdotL:f32,                 // cos angle between normal and light direction
            NdotV:f32,                  // cos angle between normal and view direction
            NdotH:f32,                  // cos angle between normal and half vector
            LdotH:f32,                  // cos angle between light direction and half vector
            VdotH:f32,                  // cos angle between view direction and half vector
            perceptualRoughness:f32,    // roughness value, as authored by the model creator (input to shader)
            metalness:f32,              // metallic value at the surface
            reflectance0:vec3<f32>,           // full reflectance color (normal incidence angle)
            reflectance90:vec3<f32>,           // reflectance color at grazing angle
            alphaRoughness:f32,         // roughness mapped to a more linear change in the roughness (proposed by [2])
            diffuseColor:vec3<f32>,            // color contribution from diffuse lighting
            specularColor:vec3<f32>,           // color contribution from specular lighting
        };
        struct PhysicalMaterial {
            diffuseColor:vec3<f32>,
            roughness:f32,
            specularColor:vec3<f32>,
            specularF90:f32,
           #if ${defines.USE_CLEARCOAT}
               clearcoat:f32,
               clearcoatRoughness:f32,
               clearcoatF0:vec3<f32>,
               clearcoatF90:f32,
           #endif

           #if ${defines.USE_IRIDESCENCE}
               iridescence:f32,
               iridescenceIOR:f32,
               iridescenceThickness:f32,
               iridescenceFresnel:vec3<f32>,
               iridescenceF0:vec3<f32>,
           #endif

           #if ${defines.USE_SHEEN}
               sheenColor:vec3<f32>,
               sheenRoughness:f32,
           #endif

           #if ${defines.IOR}
                ior:f32,
           #endif

           #if ${defines.USE_TRANSMISSION}
               transmission:f32,
               transmissionAlpha:f32,
               thickness:f32,
               attenuationDistance:f32,
               attenuationColor:vec3<f32>,
           #endif
       };
        const M_PI:f32 = 3.141592653589793;
        const c_MinRoughness:f32 = 0.04;
        @binding(0) @group(0) var<uniform> materialUniform : MaterialUniform;
        @binding(0) @group(1) var<uniform> systemUniform : SystemUniform;
        // IBL
        @group(0) @binding(${defines.diffuseEnvTextureBinding}) var diffuseEnvSampler: texture_cube<f32>;
        @group(0) @binding(${defines.specularEnvTextureBinding}) var specularEnvSampler: texture_cube<f32>;
        @group(0) @binding(${defines.baseSamplerBinding}) var defaultSampler: sampler;
        @group(0) @binding(${defines.brdfTextureBinding}) var brdfLUT: texture_2d<f32>;
        #if ${defines.USE_TEXTURE}
           @group(0) @binding(${defines.baseTextureBinding}) var baseColorTexture: texture_2d<f32>;
        #endif
        // normal map
        #if ${defines.USE_NORMALTEXTURE}
          @group(0) @binding(${defines.normalTextureBinding}) var normalTexture: texture_2d<f32>;
        #endif

        // emmisve map
        #if ${defines.USE_EMISSIVETEXTURE}
            @group(0) @binding(${defines.emissiveTextureBinding}) var u_emissiveTexture: texture_2d<f32>;
        #endif

        // metal roughness
        #if ${defines.USE_METALNESSTEXTURE}
             @group(0) @binding(${defines.metalnessRoughnessTextureBinding}) var metalnessRoughnessTexture: texture_2d<f32>;
        #endif
        // occlusion texture
        #if ${defines.USE_AOTEXTURE}
             @group(0) @binding(${defines.aoTextureBinding}) var aoTexture: texture_2d<f32>;
        #endif

        // Find the normal for this fragment, pulling either from a predefined normal map
        // or from the interpolated mesh normal and tangent attributes.
        fn getNormal(input:VertInput
            #if ${defines.USE_NORMALTEXTURE}
            ,normalTexture:texture_2d<f32>,defaultSampler:sampler
            #endif
            )->vec3<f32>
        {
            // Retrieve the tangent space matrix
            let pos_dx:vec3<f32> = dpdx(input.worldPos);
            let pos_dy:vec3<f32> = dpdy(input.worldPos);
            let tex_dx:vec3<f32> = dpdx(vec3<f32>(input.uv, 0.0));
            let tex_dy:vec3<f32> = dpdy(vec3<f32>(input.uv, 0.0));
            var t:vec3<f32> = (tex_dy.y * pos_dx - tex_dx.y * pos_dy) / (tex_dx.x * tex_dy.y - tex_dy.x * tex_dx.y);
            let ng = input.normal;
            t = normalize(t - ng * dot(ng, t));
            let b:vec3<f32> = normalize(cross(ng, t));
            let tbn:mat3x3<f32> = mat3x3<f32>(t, b, ng);
        // TODO: TANGENTS
            #if ${defines.USE_NORMALTEXTURE}
                var n:vec3<f32> = textureSample(normalTexture,defaultSampler, input.uv).rgb;
                n = normalize(tbn * ((2.0 * n - 1.0) * vec3<f32>(materialUniform.normalTextureScale, 1.0)));
            #else
                var n:vec3<f32> = tbn[2].xyz;
            #endif
            return n;
        }

        fn getIBLContribution( pbrInputs:PBRInfo, n:vec3<f32>, reflection:vec3<f32>,brdfLUT:texture_2d<f32>,specularEnvSampler:texture_cube<f32>,diffuseEnvSampler:texture_cube<f32>,defaultSampler:sampler)->vec3<f32>
        {
            let mipCount:f32 = 10.0; // resolution of 256x256
            let lod:f32 = (pbrInputs.perceptualRoughness * mipCount);
            // retrieve a scale and bias to F0. See [1], Figure 3
            let brdf:vec3<f32> = textureSample(brdfLUT, defaultSampler,vec2<f32>(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness)).rgb;
            let diffuseLight:vec3<f32> = textureSample(diffuseEnvSampler,defaultSampler, n).rgb;
            let specularLight:vec3<f32> = textureSampleLevel(specularEnvSampler,defaultSampler, reflection, lod).rgb;
            let diffuse:vec3<f32> = diffuseLight * pbrInputs.diffuseColor;
            let specular:vec3<f32> = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);

            return diffuse + specular;
        }

        // Basic Lambertian diffuse
        // Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
        // See also [1], Equation 1
        fn diffuse(pbrInputs:PBRInfo)->vec3<f32>
        {
            return pbrInputs.diffuseColor / M_PI;
        }


        // The following equation models the Fresnel reflectance term of the spec equation (aka F())
        // Implementation of fresnel from [4], Equation 15
        fn specularReflection(pbrInputs:PBRInfo)->vec3<f32>
        {
            return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
        }


        // This calculates the specular geometric attenuation (aka G()),
        // where rougher material will reflect less light back to the viewer.
        // This implementation is based on [1] Equation 4, and we adopt their modifications to
        // alphaRoughness as input as originally proposed in [2].
        fn geometricOcclusion( pbrInputs:PBRInfo)->f32
        {
            let NdotL:f32 = pbrInputs.NdotL;
            let NdotV:f32 = pbrInputs.NdotV;
            let r:f32 = pbrInputs.alphaRoughness;

            let attenuationL:f32 = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
            let attenuationV :f32= 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
            return attenuationL * attenuationV;
        }


        // The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
        // Implementation from "Average Irregularity Representation of a Roughened Surface for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
        // Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
        fn microfacetDistribution( pbrInputs:PBRInfo)->f32
        {
            let roughnessSq:f32 = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
            let f:f32 = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
            return roughnessSq / (M_PI * f * f);
        }
        @fragment
        fn main(input:VertInput) -> @location(0) vec4<f32> 
        {
            var perceptualRoughness:f32 = materialUniform.roughness;
            var metallic:f32 = materialUniform.metallic;

        #if ${defines.USE_METALNESSTEXTURE}
            // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
            // This layout intentionally reserves the 'r' channel for (optional) occlusion map data
            let mrSample:vec4<f32> = textureSample(metalnessRoughnessTexture,defaultSampler, input.uv);
            perceptualRoughness = mrSample.g * perceptualRoughness;
            metallic = mrSample.b * metallic;
        #endif
            perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
            metallic = clamp(metallic, 0.0, 1.0);
            // Roughness is authored as perceptual roughness; as is convention,
            // convert to material roughness by squaring the perceptual roughness [2].
            let alphaRoughness:f32 = perceptualRoughness * perceptualRoughness;


            // The albedo may be defined from a base texture or a flat color
        #if ${defines.USE_TEXTURE}
            let baseColor:vec4<f32> = textureSample(baseColorTexture,defaultSampler, input.uv) ;
        #else
            let baseColor:vec4<f32> = vec4<f32>(materialUniform.color,1.0);
        #endif
            let f0:vec3<f32> = vec3<f32>(0.04);
            var diffuseColor:vec3<f32> = baseColor.rgb * (vec3<f32>(1.0) - f0);
            diffuseColor *= 1.0 - metallic;
            let specularColor:vec3<f32> = mix(f0, baseColor.rgb, metallic);

            // Compute reflectance.
            let reflectance:f32 = max(max(specularColor.r, specularColor.g), specularColor.b);


            // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
            // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
            let reflectance90:f32 = clamp(reflectance * 25.0, 0.0, 1.0);
            let specularEnvironmentR0:vec3<f32> = specularColor.rgb;
            let specularEnvironmentR90:vec3<f32> = vec3<f32>(1.0, 1.0, 1.0) * reflectance90;
     
                #if ${defines.USE_NORMALTEXTURE}
                let n:vec3<f32> = getNormal(input,normalTexture,defaultSampler);  
                #else
                let n:vec3<f32> = getNormal(input);
                #endif

            //let n:vec3<f32> = getNormal(input,normalTexture,defaultSampler);                             // normal at surface point
            // vec3 v = vec3( 0.0, 0.0, 1.0 );        // Vector from surface point to camera
            let v:vec3<f32> =normalize(systemUniform.cameraPosition - input.worldPos);                       // Vector from surface point to camera
            // vec3 l = normalize(u_LightDirection);             // Vector from surface point to light
            let l:vec3<f32> =normalize(vec3<f32>(0.0,0.0, 1.0 )); 
                      // Vector from surface point to light
            let h:vec3<f32> = normalize(l+v);                          // Half vector between both l and v
            var reflection:vec3<f32> = normalize(reflect(v, n));
            // reflection.x = -reflection.x;
            let NdotL:f32 = clamp(dot(n, l), 0.001, 1.0);
            let NdotV:f32 = abs(dot(n, v)) + 0.001;
            let NdotH:f32 = clamp(dot(n, h), 0.0, 1.0);
            let LdotH:f32 = clamp(dot(l, h), 0.0, 1.0);
            let VdotH:f32 = clamp(dot(v, h), 0.0, 1.0);

            var pbrInputs:PBRInfo;
            pbrInputs.NdotL=NdotL;
            pbrInputs.NdotV=NdotV;
            pbrInputs.NdotH=NdotH;
            pbrInputs.LdotH=LdotH;
            pbrInputs.VdotH=VdotH;
            pbrInputs.perceptualRoughness=perceptualRoughness;
            pbrInputs.metalness=metallic;
            pbrInputs.reflectance0=specularEnvironmentR0;
            pbrInputs.reflectance90=specularEnvironmentR90;
            pbrInputs.alphaRoughness=alphaRoughness;
            pbrInputs.diffuseColor=diffuseColor;
            pbrInputs.specularColor=specularColor;

            var material:PhysicalMaterial;
            material.diffuseColor=diffuseColor*( 1.0 - metallic );
            material.roughness=perceptualRoughness;
            material.specularColor=specularColor;
            material.specularF90=reflectance90;

            var geometry:Geometry;
            geometry.normal=n;
            geometry.viewDir=normalize(systemUniform.cameraPosition - input.worldPos);
            geometry.position=input.worldPos;
            // Calculate the shading terms for the microfacet specular shading model
            let F:vec3<f32> = specularReflection(pbrInputs);
            let G:f32 = geometricOcclusion(pbrInputs);
            let D:f32 = microfacetDistribution(pbrInputs);

            // Calculation of analytical lighting contribution
            let diffuseContrib:vec3<f32> = (1.0 - F) * diffuse(pbrInputs);
            let specContrib:vec3<f32> = max(vec3<f32>(0.0), F * G * D / (4.0 * NdotL * NdotV));
            // vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);
            //var color = NdotL * (diffuseContrib + specContrib);    // assume light color vec3(1, 1, 1)
            var reflectedLight=parseLights(geometry,material);
            var color=reflectedLight.directDiffuse+reflectedLight.directSpecular;
            // Calculate lighting contribution from image based lighting source (IBL)
            // USE_IBL
        color += getIBLContribution(pbrInputs, n, reflection,brdfLUT,specularEnvSampler,diffuseEnvSampler,defaultSampler);


        // Apply optional PBR terms for additional (optional) shading
        #if ${defines.USE_AOTEXTURE}
            let ao:f32 = textureSample(aoTexture,defaultSampler, input.uv).r;
            color = mix(color, color * ao, materialUniform.occlusionStrength);
        #endif

        #if ${defines.USE_EMISSIVETEXTURE}
            let emissive:vec3<f32> = textureSample(u_emissiveTexture, defaultSampler,input.uv).rgb ;
            color += emissive;
        #endif
       return vec4<f32>(color.xyz, baseColor.a);
    }
   `;
}

function Blur(defines) {
	return `
    struct FragInput {
        @location(0) uv: vec2<f32>,
    }
    struct BlurUniforms {
        direction:vec2<f32>,
    }
    fn gaussianPdf(x:f32, sigma:f32)->f32 {
        return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;
    }
    @group(0) @binding(0)  var<uniform> blurUniforms : BlurUniforms;
    @group(0) @binding({{tDiffuseBinding}}) var tDiffuse: texture_2d<f32>;
    @group(0) @binding({{tSamplerBinding}}) var tSampler: sampler;
    @fragment
    fn main(input:FragInput) -> @location(0) vec4<f32> {
        let invSize:vec2<f32> = vec2<f32>(1.0,1.0) / vec2<f32>(textureDimensions(tDiffuse));
        let fSigma:f32 =f32(${defines.SIGMA});
        var weightSum:f32 = gaussianPdf(0.0, fSigma);
        let baseColor=textureSample(tDiffuse, tSampler, input.uv);
        var diffuseSum:vec3<f32> = baseColor.rgb * weightSum;
        let uvOffset:vec2<f32> = blurUniforms.direction * invSize;
        for( var i : u32 = 1; i < ${defines.KERNEL_RADIUS};i = i + 1 ) {
            let x:f32 = f32(i);
            let w:f32 = gaussianPdf(x, fSigma);
            let sample1:vec3<f32>=textureSample(tDiffuse, tSampler, input.uv+ uvOffset*x).rgb;
            let sample2:vec3<f32>=textureSample(tDiffuse, tSampler, input.uv- uvOffset*x).rgb;
            diffuseSum =diffuseSum+ (sample2+sample2)* w;
            weightSum += 2.0 * w;
        }
        diffuseSum/=weightSum;
      return vec4<f32>(diffuseSum,baseColor.a);
    }
  `;
}

function LuminosityHigh(defines) {
	return `
    struct LuminosityUniforms{
        luminosityThreshold:f32,
        smoothWidth:f32,
        defaultColor:vec3<f32>,
        defaultOpacity:f32,
    }
    struct FragInput {
        @location(0) uv: vec2<f32>,
    };
    @group(0) @binding(0)  var<uniform> luminosityUniforms : LuminosityUniforms;
    @group(0) @binding({{tDiffuseBinding}}) var tDiffuse: texture_2d<f32>;
    @group(0) @binding({{tSamplerBinding}}) var tSampler: sampler;
    @fragment
    fn main(input:FragInput)-> @location(0) vec4<f32> {

        let texel:vec4<f32> = textureSample(tDiffuse, tSampler, input.uv);

        let luma:vec3<f32> = vec3<f32>( 0.299,0.587,0.114 );

        let v:f32 = dot( texel.xyz, luma );

        let outputColor:vec4<f32> = vec4<f32>( luminosityUniforms.defaultColor.rgb, luminosityUniforms.defaultOpacity );

        let alpha:f32 = smoothstep( luminosityUniforms.luminosityThreshold, luminosityUniforms.luminosityThreshold + luminosityUniforms.smoothWidth, v );

       return mix( outputColor, texel, alpha );
    }
    `;
}

function blendFrag(defines) {
	return `
    struct FragInput {
        @location(0) uv: vec2<f32>,
    };
    @group(0) @binding({{tDiffuseBinding}}) var tDiffuse: texture_2d<f32>;
    @group(0) @binding({{baseColorTextureBinding}}) var baseColorTexture: texture_2d<f32>;
    @group(0) @binding({{tSamplerBinding}}) var tSampler: sampler;
    @fragment
    fn main(input:FragInput) -> @location(0) vec4<f32> {
        let postColor:vec4<f32> = textureSample(tDiffuse, tSampler, input.uv);
        let baseColor:vec4<f32> = textureSample(baseColorTexture, tSampler, input.uv);
      return baseColor+postColor;
    }   
    `;
}

function reduceComma(shader) {
	//对所有的include处理
	const str = resolveIncludes(shader);
	return str;
}
const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
let currentDefines = {};
const shaders = {
	phong: {
		frag: phongFrag,
		vert: phongVert
	},
	color: {
		frag: colorFrag,
		vert: colorVert
	},
	pbr: {
		frag: pbrFrag,
		vert: pbrVert
	},
	skybox: {
		frag: skyBoxFrag,
		vert: skyBoxVert
	},
	resolve: {
		frag: quadFrag,
		vert: quadVert
	},
	pbr_mat: {
		frag: pbr_fs,
		vert: pbr_vs
	},
	blur: {
		frag: Blur,
		vert: quadVert
	},
	luminosityHigh: {
		frag: LuminosityHigh,
		vert: quadVert
	},
	blend: {
		frag: blendFrag,
		vert: quadVert
	}
};
function resolveIncludes(string) {
	return string.replace(includePattern, includeReplacer);
}
function includeReplacer(match, include) {
	const excute = ShaderChunk[include];
	if (excute === undefined) {
		throw new Error(`Can not resolve #include <${include}>`);
	}
	const result = excute(currentDefines);
	return resolveIncludes(result);
}
function getVertFrag(type, defines = {}) {
	const excuteFunc = shaders[type];
	currentDefines = defines;
	return {
		vert: reduceComma(excuteFunc.vert(currentDefines)),
		frag: reduceComma(excuteFunc.frag(currentDefines))
	};
}

class ShaderSource {
	constructor(options) {
		this.type = options.type;
		this.defines = options.defines;
		this.custom = defaultValue(options.custom, false);
		this.dirty = true;
		if (options.render) {
			this.render = true;
			this.vertEntryPoint = options.vertMain || "main";
			this.fragEntryPoint = options.fragMain || "main";
			this.vert = options.vert || undefined;
			this.frag = options.frag || undefined;
		} else {
			this.compute = options.compute || undefined;
			this.computeMain = options.computeMain || "main";
		}
	}
	get uid() {
		this._uid = this.type.concat(JSON.stringify(this.defines));
		return this._uid;
	}
	updateShaderStr() {
		if (this.custom) {
			if (this.compute) {
				this.compute = ShaderSource.compileCustomShader(this.compute, this.defines);
			} else {
				this.vert = ShaderSource.compileCustomShader(this.vert, this.defines);
				this.frag = ShaderSource.compileCustomShader(this.frag, this.defines);
			}
		} else {
			const source = getVertFrag(this.type, this.defines);
			this.vert = source.vert;
			this.frag = source.frag;
		}
	}
	setDefines(defines) {
		this.dirty = true;
		this.defines = Object.assign(this.defines, defines);
	}
	createShaderModule(device) {
		if (this.dirty) {
			this.updateShaderStr();
			this.dirty = false;
		}
		if (this.render) {
			const vert = this.vert
				? device.createShaderModule({
						code: this.vert
				  })
				: undefined;
			const frag = this.frag
				? device.createShaderModule({
						code: this.frag
				  })
				: undefined;
			return { vert, frag };
		} else {
			const compute = device.createShaderModule({
				code: this.compute
			});
			return compute;
		}
	}
	static replaceMain(source, renamedMain) {
		renamedMain = `void ${renamedMain}()`;
		return source.replace(/void\s+main\s*\(\s*(?:void)?\s*\)/g, renamedMain);
	}
	static compileCustomShader(template, defines) {
		const reg = /\{\{(\w+)\}\}/;
		if (reg.test(template)) {
			const name = reg.exec(template)[1];
			template = template.replace(reg, defines[name]);
			return ShaderSource.compileCustomShader(template, defines);
		}
		return template;
	}
}

class Material {
	constructor() {
		this.label = undefined;
		this.type = undefined;
		this.baseTexture = undefined;
		this.baseSampler = undefined;
		this._diffuse = new Color(0.0, 0.0, 0.0);
		this._opacity = 1.0;
		//Buffer
		this.shaderData = undefined;
		this.shaderSource = undefined;
		this.dirty = true;
		this._emissive = new Color(0.0, 0.0, 0);
		this._emissiveIntensity = 1.0;
		this._doubleSided = true;
		this.light = false;
		this.init();
	}
	set wireframe(value) {
		this.renderState.primitive.topology = value ? PrimitiveTopology.LineList : PrimitiveTopology.TriangleList;
	}
	get doubleSided() {
		return this._doubleSided;
	}
	set doubleSided(value) {
		this._renderState.primitive.cullMode = value ? CullMode.None : CullMode.Back;
		this._doubleSided = value;
	}
	get renderState() {
		return this._renderState;
	}
	set renderState(value) {
		this._renderState = value;
	}
	get diffuse() {
		return this._diffuse;
	}
	set diffuse(v) {
		this._diffuse = v;
	}
	get emissive() {
		return this._emissive;
	}
	set emissive(v) {
		this._emissive = v;
	}
	get emissiveIntensity() {
		return this._emissiveIntensity;
	}
	set emissiveIntensity(v) {
		this._emissiveIntensity = v;
	}
	get opacity() {
		return this._opacity;
	}
	set opacity(v) {
		this._opacity = v;
	}
	onBeforeRender() {}
	onBeforeCompile() {}
	update(frameState, mesh) {}
	createShaderData(mesh, frameState) {
		this.shaderData = new ShaderData(this.type, 0);
	}
	init() {
		//默认渲染状态
		const primitive = new Primitive();
		const target = new Target();
		const depthStencil = new DepthStencil();
		this._renderState = new RenderState();
		this._renderState.primitive = primitive;
		this._renderState.targets = [target];
		this._renderState.depthStencil = depthStencil;
	}
	destroy() {
		this.label = undefined;
		this.type = undefined;
		this.baseTexture = undefined;
		this.baseSampler = undefined;
		this.color = undefined;
	}
}

class ColorMaterial extends Material {
	constructor() {
		super();
		this.type = "color";
		this.shaderSource = new ShaderSource({
			type: this.type,
			render: true,
			defines: {}
		});
	}
	update(frameState, mesh) {
		if (!this.shaderData) this.createShaderData(mesh);
		const uniformBuffer = new UniformBuffer();
		uniformBuffer.setMatrix4("modelMatrix", () => {
			return null;
		});
		this.shaderData.setUniformBuffer("color", uniformBuffer);
	}
}

class Axes extends Mesh {
	constructor() {
		super();
		this.distanceToCamera = 10;
		this.material = new ColorMaterial();
		this.material.wireframe = true;
		this.init();
	}
	update(frameState) {
		this.updateMatrix();
		this.material.update(frameState, this);
		frameState.renderQueue.opaque.push(this);
	}
	init() {
		const position = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1];
		const colors = [1, 0, 0, 1, 1, 0.5, 0.5, 1, 0, 1, 0, 1, 0.5, 1, 0.5, 1, 0, 0, 1, 1, 0.5, 0.5, 1, 1];
		const indices = [0, 1, 2, 3, 4, 5];
		this.geometry = new Geometry({});
		this.geometry.setAttribute(new Float32Attribute("position", position, 3));
		this.geometry.setAttribute(new Float32Attribute("color", colors, 4));
		this.geometry.setIndice(indices);
		this.geometry.count = indices.length;
	}
}

class SkyBoxGeometry extends Geometry {
	constructor() {
		super({});
		this.init();
	}
	update(frameState) {
		frameState.context;
	}
	init() {
		this.position = [
			1.0,
			1.0,
			1.0,
			-1.0,
			1.0,
			1.0,
			1.0,
			-1.0,
			1.0,
			-1.0,
			-1.0,
			1.0,
			1.0,
			1.0,
			-1.0,
			-1.0,
			1.0,
			-1.0,
			1.0,
			-1.0,
			-1.0,
			-1.0,
			-1.0,
			-1.0 // 7
		];
		this.indices = [
			// PosX (Right)
			0, 2, 4, 6, 4, 2,
			// NegX (Left)
			5, 3, 1, 3, 5, 7,
			// PosY (Top)
			4, 1, 0, 1, 4, 5,
			// NegY (Bottom)
			2, 3, 6, 7, 6, 3,
			// PosZ (Front)
			0, 1, 2, 3, 2, 1,
			// NegZ (Back)
			6, 5, 4, 5, 6, 7
		];
		this.setAttribute(new Float32Attribute("position", this.position, 3));
		this.setIndice(this.indices);
		this.count = this.indices.length;
	}
}

async function CubeTextureLoader(urls) {
	const promises = urls.map((src) => {
		const img = document.createElement("img");
		img.src = src;
		return img.decode().then(() => createImageBitmap(img));
	});
	const images = await Promise.all(promises);
	await Promise.all(images);
	const baseSampler = new Sampler({
		magFilter: "linear",
		minFilter: "linear"
	});
	const data = images.map((image, i) => {
		return {
			source: image,
			width: image.width,
			height: image.height,
			depth: 1,
			x: 0,
			y: 0,
			z: i
		};
	});
	const baseTexture = new Texture({
		size: {
			width: images[0].width,
			height: images[0].height,
			depth: 6
		},
		format: "rgba8unorm",
		usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
		sampler: baseSampler,
		data,
		viewFormats: "cube",
		mipLevelCount: 6,
		needMipMap: true
	});
	return {
		texture: baseTexture,
		sampler: baseSampler
	};
}

class SkyBoxMaterial extends Material {
	constructor() {
		super();
		this.type = "skybox";
		this.shaderSource = new ShaderSource({
			type: this.type,
			render: true,
			defines: {}
		});
		this.images = [];
		this.renderState.depthStencil.depthWriteEnabled = false;
		this.renderState.depthStencil.depthCompare = CompareFunction.LessEqual;
		// this.renderState.depthStencil
		// this.depthStencil = {
		//   depthWriteEnabled: false,
		//   depthCompare: CompareFunction.LessEqual,
		//   format: TextureFormat.Depth24Plus,
		// };
	}
	async loadTexture(urls) {
		const result = await CubeTextureLoader(urls);
		this.baseTexture = result.texture;
		this.baseSampler = result.sampler;
	}
	update(frameState, mesh) {
		if (!this.shaderData) {
			this.createShaderData(mesh);
		}
	}
	createShaderData(mesh) {
		super.createShaderData(mesh);
		const uniformBuffer = new UniformBuffer();
		uniformBuffer.setMatrix4("modelMatrix", () => {
			return null;
		});
		this.shaderData.setUniformBuffer("sky", uniformBuffer);
		this.shaderData.setTexture("baseTexture", this.baseTexture);
		this.shaderData.setSampler("baseSampler", this.baseSampler);
	}
}

class SkyBox extends Mesh {
	constructor(urls) {
		super();
		this.distanceToCamera = 10;
		this.material = new SkyBoxMaterial();
		if (urls) this.material.loadTexture(urls);
		this.geometry = new SkyBoxGeometry();
		this.isSkyBox = true;
	}
	update(frameState) {
		this.updateMatrix();
		this.geometry.update(frameState);
		this.material.update(frameState, this);
		frameState.renderQueue.pre.push(this);
	}
}

/**
 * Two times PI.
 * @constant {number}
 */
function createBox(options) {
	options = options || {};
	let dimensions = options.dimensions || [1, 1, 1];
	let position = options.position || [-dimensions[0] / 2, -dimensions[1] / 2, -dimensions[2] / 2];
	let x = position[0];
	let y = position[1];
	let z = position[2];
	let width = dimensions[0];
	let height = dimensions[1];
	let depth = dimensions[2];
	let fbl = { x: x, y: y, z: z + depth };
	let fbr = { x: x + width, y: y, z: z + depth };
	let ftl = { x: x, y: y + height, z: z + depth };
	let ftr = { x: x + width, y: y + height, z: z + depth };
	let bbl = { x: x, y: y, z: z };
	let bbr = { x: x + width, y: y, z: z };
	let btl = { x: x, y: y + height, z: z };
	let btr = { x: x + width, y: y + height, z: z };
	let positions = [
		//front
		fbl.x,
		fbl.y,
		fbl.z,
		fbr.x,
		fbr.y,
		fbr.z,
		ftl.x,
		ftl.y,
		ftl.z,
		ftl.x,
		ftl.y,
		ftl.z,
		fbr.x,
		fbr.y,
		fbr.z,
		ftr.x,
		ftr.y,
		ftr.z,
		//right
		fbr.x,
		fbr.y,
		fbr.z,
		bbr.x,
		bbr.y,
		bbr.z,
		ftr.x,
		ftr.y,
		ftr.z,
		ftr.x,
		ftr.y,
		ftr.z,
		bbr.x,
		bbr.y,
		bbr.z,
		btr.x,
		btr.y,
		btr.z,
		//back
		fbr.x,
		bbr.y,
		bbr.z,
		bbl.x,
		bbl.y,
		bbl.z,
		btr.x,
		btr.y,
		btr.z,
		btr.x,
		btr.y,
		btr.z,
		bbl.x,
		bbl.y,
		bbl.z,
		btl.x,
		btl.y,
		btl.z,
		//left
		bbl.x,
		bbl.y,
		bbl.z,
		fbl.x,
		fbl.y,
		fbl.z,
		btl.x,
		btl.y,
		btl.z,
		btl.x,
		btl.y,
		btl.z,
		fbl.x,
		fbl.y,
		fbl.z,
		ftl.x,
		ftl.y,
		ftl.z,
		//top
		ftl.x,
		ftl.y,
		ftl.z,
		ftr.x,
		ftr.y,
		ftr.z,
		btl.x,
		btl.y,
		btl.z,
		btl.x,
		btl.y,
		btl.z,
		ftr.x,
		ftr.y,
		ftr.z,
		btr.x,
		btr.y,
		btr.z,
		//bottom
		bbl.x,
		bbl.y,
		bbl.z,
		bbr.x,
		bbr.y,
		bbr.z,
		fbl.x,
		fbl.y,
		fbl.z,
		fbl.x,
		fbl.y,
		fbl.z,
		bbr.x,
		bbr.y,
		bbr.z,
		fbr.x,
		fbr.y,
		fbr.z
	];
	let uvs = [
		//front
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//right
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//back
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//left
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//top
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
		//bottom
		0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1
	];
	let normals = [
		// front
		0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
		// right
		1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
		// back
		0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
		// left
		-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
		// top
		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
		// bottom
		0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0
	];
	return {
		positions: positions,
		normals: normals,
		uvs: uvs
	};
}
function createSphere(options) {
	options = options || {};
	let longBands = options.longBands || 32;
	let latBands = options.latBands || 32;
	let radius = options.radius || 1;
	let lat_step = Math.PI / latBands;
	let long_step = (2 * Math.PI) / longBands;
	let num_positions = longBands * latBands * 4;
	let num_indices = longBands * latBands * 6;
	let lat_angle, long_angle;
	let positions = new Array(num_positions * 3);
	let normals = new Array(num_positions * 3);
	let uvs = new Array(num_positions * 2);
	let indices = new Array(num_indices);
	let x1, x2, x3, x4, y1, y2, z1, z2, z3, z4, u1, u2, v1, v2;
	let i, j;
	let k = 0,
		l = 0;
	let vi, ti;
	for (i = 0; i < latBands; i++) {
		lat_angle = i * lat_step;
		y1 = Math.cos(lat_angle);
		y2 = Math.cos(lat_angle + lat_step);
		for (j = 0; j < longBands; j++) {
			long_angle = j * long_step;
			x1 = Math.sin(lat_angle) * Math.cos(long_angle);
			x2 = Math.sin(lat_angle) * Math.cos(long_angle + long_step);
			x3 = Math.sin(lat_angle + lat_step) * Math.cos(long_angle);
			x4 = Math.sin(lat_angle + lat_step) * Math.cos(long_angle + long_step);
			z1 = Math.sin(lat_angle) * Math.sin(long_angle);
			z2 = Math.sin(lat_angle) * Math.sin(long_angle + long_step);
			z3 = Math.sin(lat_angle + lat_step) * Math.sin(long_angle);
			z4 = Math.sin(lat_angle + lat_step) * Math.sin(long_angle + long_step);
			u1 = 1 - j / longBands;
			u2 = 1 - (j + 1) / longBands;
			v1 = 1 - i / latBands;
			v2 = 1 - (i + 1) / latBands;
			vi = k * 3;
			ti = k * 2;
			positions[vi] = x1 * radius;
			positions[vi + 1] = y1 * radius;
			positions[vi + 2] = z1 * radius; //v0
			positions[vi + 3] = x2 * radius;
			positions[vi + 4] = y1 * radius;
			positions[vi + 5] = z2 * radius; //v1
			positions[vi + 6] = x3 * radius;
			positions[vi + 7] = y2 * radius;
			positions[vi + 8] = z3 * radius; // v2
			positions[vi + 9] = x4 * radius;
			positions[vi + 10] = y2 * radius;
			positions[vi + 11] = z4 * radius; // v3
			normals[vi] = x1;
			normals[vi + 1] = y1;
			normals[vi + 2] = z1;
			normals[vi + 3] = x2;
			normals[vi + 4] = y1;
			normals[vi + 5] = z2;
			normals[vi + 6] = x3;
			normals[vi + 7] = y2;
			normals[vi + 8] = z3;
			normals[vi + 9] = x4;
			normals[vi + 10] = y2;
			normals[vi + 11] = z4;
			uvs[ti] = u1;
			uvs[ti + 1] = v1;
			uvs[ti + 2] = u2;
			uvs[ti + 3] = v1;
			uvs[ti + 4] = u1;
			uvs[ti + 5] = v2;
			uvs[ti + 6] = u2;
			uvs[ti + 7] = v2;
			indices[l] = k;
			indices[l + 1] = k + 1;
			indices[l + 2] = k + 2;
			indices[l + 3] = k + 2;
			indices[l + 4] = k + 1;
			indices[l + 5] = k + 3;
			k += 4;
			l += 6;
		}
	}
	return {
		positions: positions,
		normals: normals,
		uvs: uvs,
		indices: indices
	};
}

class SphereGeometry extends Geometry {
	constructor() {
		super({});
		this.type = "sphere";
		this.init();
	}
	init() {
		const { positions, normals, uvs, indices } = createSphere({});
		this.positions = positions;
		this.normals = normals;
		this.uvs = uvs;
		this.indices = indices;
		this.computeBoundingSphere(this.positions);
		this.setAttribute(new Float32Attribute("position", this.positions, 3));
		this.setAttribute(new Float32Attribute("normal", this.normals, 3));
		this.setAttribute(new Float32Attribute("uv", this.uvs, 2));
		this.setIndice(this.indices);
		this.count = this.indices.length;
	}
}

class BoxGeometry extends Geometry {
	constructor(width = 10, height = 10, depth = 10) {
		super({});
		this.width = width;
		this.height = height;
		this.depth = depth;
		this.type = "box";
		this.init();
	}
	init() {
		//generate pos uv normal so on
		const { positions, normals, uvs } = createBox({
			dimensions: [this.depth, this.width, this.height]
		});
		this.position = positions;
		this.normal = normals;
		this.uv = uvs;
		this.computeBoundingSphere(this.position);
		this.setAttribute(new Float32Attribute("position", this.position, 3));
		this.setAttribute(new Float32Attribute("normal", this.normal, 3));
		this.setAttribute(new Float32Attribute("uv", this.uv, 2));
		this.count = 36;
	}
	update(frameState) {}
	destroy() {}
}

class TorusKnotGeometry extends Geometry {
	constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {
		super({});
		this.radius = radius;
		this.tube = tube;
		this.tubularSegments = tubularSegments;
		this.radialSegments = radialSegments;
		this.p = p;
		this.q = q;
		this.indices = [];
		this.vertices = [];
		this.normals = [];
		this.uvs = [];
		this.createGeometry();
		this.computeBoundingSphere(this.vertices);
		this.init();
	}
	update(frameState) {
		frameState.context;
	}
	init() {
		this.setAttribute(new Float32Attribute("position", this.vertices, 3));
		this.setAttribute(new Float32Attribute("normal", this.normals, 3));
		this.setAttribute(new Float32Attribute("uv", this.uvs, 2));
		this.setIndice(this.indices);
		this.count = this.indices.length;
	}
	createGeometry() {
		const tubularSegments = Math.floor(this.tubularSegments);
		const radialSegments = Math.floor(this.radialSegments);
		// helper variables
		const vertex = new Vector3();
		const normal = new Vector3();
		const P1 = new Vector3();
		const P2 = new Vector3();
		const B = new Vector3();
		const T = new Vector3();
		const N = new Vector3();
		// generate vertices, normals and uvs
		for (let i = 0; i <= tubularSegments; ++i) {
			// the radian "u" is used to calculate the position on the torus curve of the current tubular segment
			const u = (i / tubularSegments) * this.p * Math.PI * 2;
			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
			calculatePositionOnCurve(u, this.p, this.q, this.radius, P1);
			calculatePositionOnCurve(u + 0.01, this.p, this.q, this.radius, P2);
			// calculate orthonormal basis
			Vector3.subtract(P2, P1, T);
			// T.subVectors( P2, P1 );
			Vector3.add(P2, P1, N);
			// N.addVectors( P2, P1 );
			Vector3.cross(T, N, B);
			//B.crossVectors( T, N );
			Vector3.cross(B, T, N);
			// N.crossVectors( B, T );
			// normalize B, N. T can be ignored, we don't use it
			B.normalize();
			N.normalize();
			for (let j = 0; j <= radialSegments; ++j) {
				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
				const v = (j / radialSegments) * Math.PI * 2;
				const cx = -this.tube * Math.cos(v);
				const cy = this.tube * Math.sin(v);
				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve
				vertex.x = P1.x + (cx * N.x + cy * B.x);
				vertex.y = P1.y + (cx * N.y + cy * B.y);
				vertex.z = P1.z + (cx * N.z + cy * B.z);
				this.vertices.push(vertex.x, vertex.y, vertex.z);
				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
				Vector3.subtract(vertex, P1, normal);
				normal.normalize();
				this.normals.push(normal.x, normal.y, normal.z);
				// uv
				this.uvs.push(i / tubularSegments);
				this.uvs.push(j / radialSegments);
			}
		}
		// generate indices
		for (let j = 1; j <= tubularSegments; j++) {
			for (let i = 1; i <= radialSegments; i++) {
				// indices
				const a = (radialSegments + 1) * (j - 1) + (i - 1);
				const b = (radialSegments + 1) * j + (i - 1);
				const c = (radialSegments + 1) * j + i;
				const d = (radialSegments + 1) * (j - 1) + i;
				// faces
				this.indices.push(a, b, d);
				this.indices.push(b, c, d);
			}
		}
	}
}
function calculatePositionOnCurve(u, p, q, radius, position) {
	const cu = Math.cos(u);
	const su = Math.sin(u);
	const quOverP = (q / p) * u;
	const cs = Math.cos(quOverP);
	position.x = radius * (2 + cs) * 0.5 * cu;
	position.y = radius * (2 + cs) * su * 0.5;
	position.z = radius * Math.sin(quOverP) * 0.5;
}

class PlaneGeometry extends Geometry {
	constructor(width = 10, height = 10) {
		super({});
		this.width = width;
		this.height = height;
		this.type = "planeGeometry";
		this.init();
	}
	init() {
		//generate pos uv normal so on
		const { indices, normals, uvs, vertices } = this.createGrid(this.width, this.height);
		this.position = vertices;
		this.normal = normals;
		this.uv = uvs;
		this.indices = indices;
		this.computeBoundingSphere(this.position);
		this.setAttribute(new Float32Attribute("position", this.position, 3));
		this.setAttribute(new Float32Attribute("normal", this.normal, 3));
		this.setAttribute(new Float32Attribute("uv", this.uv, 2));
		this.setIndice(indices);
		this.count = this.indices.length;
		// this.count = 36;
	}
	update(frameState) {}
	createGrid(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
		const width_half = width / 2;
		const height_half = height / 2;
		const gridX = Math.floor(widthSegments);
		const gridY = Math.floor(heightSegments);
		const gridX1 = gridX + 1;
		const gridY1 = gridY + 1;
		const segment_width = width / gridX;
		const segment_height = height / gridY;
		//
		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];
		for (let iy = 0; iy < gridY1; iy++) {
			const y = iy * segment_height - height_half;
			for (let ix = 0; ix < gridX1; ix++) {
				const x = ix * segment_width - width_half;
				vertices.push(x, -y, 0);
				normals.push(0, 0, 1);
				uvs.push(ix / gridX);
				uvs.push(1 - iy / gridY);
			}
		}
		for (let iy = 0; iy < gridY; iy++) {
			for (let ix = 0; ix < gridX; ix++) {
				const a = ix + gridX1 * iy;
				const b = ix + gridX1 * (iy + 1);
				const c = ix + 1 + gridX1 * (iy + 1);
				const d = ix + 1 + gridX1 * iy;
				indices.push(a, b, d);
				indices.push(b, c, d);
			}
		}
		return { indices, normals, uvs, vertices };
	}
	destroy() {}
}

class PhongMaterial extends Material {
	constructor() {
		super();
		this.type = "phong";
		this.color = new Color(1.0, 0.0, 0.0);
		this.shaderSource = new ShaderSource({
			type: this.type,
			render: true,
			defines: {
				materialPhong: true
			}
		});
		this.light = true;
		this.specular = new Color(1.0, 1.0, 1.0);
		this.shininess = 30.0;
		this.baseTexture = undefined;
		this.baseSampler = undefined;
	}
	update(frameState, mesh) {
		if (!this.shaderData) this.createShaderData(mesh);
	}
	createShaderData(mesh) {
		super.createShaderData(mesh);
		const uniformBuffer = new UniformBuffer();
		uniformBuffer.setMatrix4("modelMatrix", () => {
			return null;
		});
		uniformBuffer.setColor("color", this);
		uniformBuffer.setFloat("opacity", this);
		uniformBuffer.setMatrix4("normalMtrix", () => {
			return mesh.normalMatrix;
		});
		uniformBuffer.setColor("emissive", this);
		uniformBuffer.setFloat("shininess", this);
		uniformBuffer.setColor("specular", this);
		this.shaderData.setUniformBuffer("phong", uniformBuffer);
		if (this.baseTexture) {
			this.shaderData.setDefine("baseTexture", true);
			this.shaderData.setTexture("baseTexture", this.baseTexture);
		}
		if (this.baseSampler) this.shaderData.setSampler("sampler", this.baseSampler);
	}
	destroy() {}
}

function returnTrue() {
	return true;
}
/**
 * Destroys an object.  Each of the object's functions, including functions in its prototype,
 * is replaced with a function that throws a {@link DeveloperError}, except for the object's
 * <code>isDestroyed</code> function, which is set to a function that returns <code>true</code>.
 * The object's properties are removed with <code>delete</code>.
 * <br /><br />
 * This function is used by objects that hold native resources, e.g., WebGL resources, which
 * need to be explicitly released.  Client code calls an object's <code>destroy</code> function,
 * which then releases the native resource and calls <code>destroyObject</code> to put itself
 * in a destroyed state.
 *
 * @function
 *
 * @param {Object} object The object to destroy.
 * @param {String} [message] The message to include in the exception that is thrown if
 *                           a destroyed object's function is called.
 *
 *
 * @example
 * // How a texture would destroy itself.
 * this.destroy = function () {
 *     _gl.deleteTexture(_texture);
 *     return Cesium.destroyObject(this);
 * };
 *
 * @see DeveloperError
 */
function destroyObject(object) {
	// message =message||"This object was destroyed, i.e., destroy() was called.";
	function throwOnDestroyed() {
		//>>includeStart('debug', pragmas.debug);
		throw new Error("This object was destroyed, i.e., destroy() was called.");
		//throw new DeveloperError(message);
		//>>includeEnd('debug');
	}
	for (const key in object) {
		if (typeof object[key] === "function") {
			object[key] = throwOnDestroyed;
		}
	}
	object.isDestroyed = returnTrue;
	return undefined;
}

class TextureCache {
	constructor() {
		this._numberOfTextures = 0;
		this._textures = new Map();
		this._numberOfTextures = 0;
		this._texturesToRelease = new Map();
		this.defaultSampler = new Sampler({
			magFilter: "linear",
			minFilter: "linear",
			addressModeU: "repeat",
			addressModeV: "repeat"
		});
	}
	get numberOfTextures() {
		return this._numberOfTextures;
	}
	getTexture(keyword) {
		const cachedTexture = this._textures.get(keyword);
		if (!defined(cachedTexture)) {
			return undefined;
		}
		// No longer want to release this if it was previously released.
		delete this._texturesToRelease[keyword];
		++cachedTexture.count;
		return cachedTexture.texture;
	}
	addTexture(keyword, texture) {
		const cachedTexture = {
			texture: texture,
			count: 1
		};
		texture.finalDestroy = texture.destroy;
		const that = this;
		texture.destroy = function () {
			if (--cachedTexture.count === 0) {
				that._texturesToRelease.set(keyword, cachedTexture);
			}
		};
		this._textures.set(keyword, cachedTexture);
		++this._numberOfTextures;
	}
	releasedTextures() {
		this._texturesToRelease.forEach((cacheTexture) => {
			cacheTexture.texture?.finalDestroy();
			--this._numberOfTextures;
		});
		this._texturesToRelease.clear();
	}
	destroy() {
		this._textures.forEach((cachedTexture) => {
			cachedTexture.texture?.finalDestroy();
		});
		return destroyObject(this);
	}
}
const textureCache = new TextureCache();

class PbrMat extends Material {
	get roughness() {
		return this._roughness;
	}
	set roughness(value) {
		this._roughness = value;
	}
	get metalness() {
		return this._metalness;
	}
	set metalness(v) {
		this._metalness = v;
	}
	get aoTextureIntensity() {
		return this._aoTextureIntensity;
	}
	set aoTextureIntensity(v) {
		this._aoTextureIntensity = v;
	}
	get normalScale() {
		if (this.renderState && this.renderState.primitive) {
			if (this.renderState.primitive.cullMode == CullMode.Back) {
				return Vector2.negate(this._normalScale, new Vector2());
			}
		}
		return this._normalScale;
	}
	set normalScale(v) {
		this._normalScale = v;
	}
	constructor() {
		super();
		this.type = "pbr_mat";
		this._roughness = 0.1;
		this._metalness = 0.1;
		this._aoTextureIntensity = 1.0;
		this.light = true;
		this._normalScale = new Vector2(1, 1);
		this.shaderSource = new ShaderSource({
			type: this.type,
			render: true,
			defines: {
				materialPbr: true
			}
		});
	}
	update(frameState, mesh) {
		if (!this.shaderData) {
			this.createShaderData(mesh, frameState);
		}
	}
	createShaderData(mesh, frameState) {
		super.createShaderData(mesh);
		const uniformBuffer = new UniformBuffer();
		uniformBuffer.setMatrix4("modelMatrix", () => {
			return mesh.modelMatrix;
		});
		uniformBuffer.setColor("diffuse", this);
		uniformBuffer.setFloat("opacity", this);
		uniformBuffer.setMatrix3("normalMtrix", () => {
			return mesh.normalMatrix;
		});
		uniformBuffer.setColor("emissive", this);
		uniformBuffer.setFloat("metalness", this);
		uniformBuffer.setFloat("roughness", this);
		this.shaderData.setUniformBuffer("pbr", uniformBuffer);
		this.brdfTexture = textureCache.getTexture("brdf");
		this.diffuseEnvTexture = textureCache.getTexture("diffuse");
		this.specularEnvTexture = textureCache.getTexture("specular");
		if (this.baseTexture) {
			this.shaderData.setDefine("USE_TEXTURE", true);
			this.shaderData.setTexture("baseTexture", this.baseTexture);
		}
		if (this.metalnessRoughnessTexture) {
			this.shaderData.setDefine("USE_METALNESSTEXTURE", true);
			this.shaderData.setTexture("metalnessRoughnessTexture", this.metalnessRoughnessTexture);
		}
		if (this.normalTexture) {
			uniformBuffer.setFloatVec2("normalScale", this);
			this.shaderData.setDefine("USE_NORMALTEXTURE", true);
			this.shaderData.setTexture("normalTexture", this.normalTexture);
		}
		if (this.aoTexture) {
			this.shaderData.setDefine("USE_AOTEXTURE", true);
			this.shaderData.setTexture("aoTexture", this.aoTexture);
			uniformBuffer.setFloat("aoTextureIntensity", this);
		}
		if (this.emissiveTexture) {
			this.shaderData.setDefine("USE_EMISSIVETEXTURE", true);
			this.shaderData.setTexture("emissiveTexture", this.emissiveTexture);
		}
		if (this.specularEnvTexture) {
			this.shaderData.setTexture("specularEnvTexture", this.specularEnvTexture);
		}
		if (this.diffuseEnvTexture) {
			this.shaderData.setTexture("diffuseEnvTexture", this.diffuseEnvTexture);
		}
		if (this.brdfTexture) {
			this.shaderData.setTexture("brdfTexture", this.brdfTexture);
		}
		this.shaderData.setSampler("baseSampler", this.baseSampler);
	}
	destroy() {}
}

class EventDispatcher {
	constructor() {}
	addEventListener(type, listener) {
		if (this._listeners === undefined) this._listeners = {};
		const listeners = this._listeners;
		if (listeners[type] === undefined) {
			listeners[type] = [];
		}
		if (listeners[type].indexOf(listener) === -1) {
			listeners[type].push(listener);
		}
	}
	hasEventListener(type, listener) {
		if (this._listeners === undefined) return false;
		const listeners = this._listeners;
		return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
	}
	removeEventListener(type, listener) {
		if (this._listeners === undefined) return;
		const listeners = this._listeners;
		const listenerArray = listeners[type];
		if (listenerArray !== undefined) {
			const index = listenerArray.indexOf(listener);
			if (index !== -1) {
				listenerArray.splice(index, 1);
			}
		}
	}
	dispatchEvent(event) {
		if (this._listeners === undefined) return;
		const listeners = this._listeners;
		const listenerArray = listeners[event.type];
		if (listenerArray !== undefined) {
			event.target = this;
			const array = listenerArray.slice(0);
			for (let i = 0, l = array.length; i < l; i++) {
				array[i].call(this, event);
			}
			event.target = null;
		}
	}
}

class RenderQueue {
	constructor() {
		this.pre = [];
		this.opaque = [];
		this.transparent = [];
		this.computes = [];
	}
	sort() {
		RenderQueue.sort(this.opaque, 0, this.opaque.length, RenderQueue._compareFromNearToFar);
		RenderQueue.sort(this.transparent, 0, this.transparent.length, RenderQueue._compareFromFarToNear);
	}
	opaqueRender(camera, context, passEncoder, replaceMaterial) {
		this.opaque.map((mesh) => {
			mesh.beforeRender();
			RenderQueue.excuteCommand(mesh.getDrawCommand(replaceMaterial), context, passEncoder, camera);
			mesh.afterRender();
		});
	}
	transparentRender(camera, context, passEncoder, replaceMaterial) {
		this.transparent.map((mesh) => {
			mesh.beforeRender();
			RenderQueue.excuteCommand(mesh.getDrawCommand(replaceMaterial), context, passEncoder, camera);
			mesh.afterRender();
		});
	}
	computeRender(context, passEncoder) {
		this.computes.map((compute) => {
			RenderQueue.excuteCompute(compute.getCommand(), context, passEncoder);
		});
	}
	preRender(camera, context, passEncoder, replaceMaterial) {
		this.pre.map((mesh) => {
			mesh.beforeRender();
			RenderQueue.excuteCommand(mesh.getDrawCommand(), context, passEncoder, camera);
			mesh.afterRender();
		});
	}
	static excuteCommand(command, context, passEncoder, camera) {
		if (command.renderTarget) {
			const currentRenderPassEncoder = command.renderTarget.beginRenderPassEncoder(context);
			context.render(command, currentRenderPassEncoder, camera);
			command.renderTarget.endRenderPassEncoder();
		} else {
			context.render(command, passEncoder, camera);
		}
	}
	static excuteCompute(command, context, passEncoder) {
		context.compute(command, passEncoder);
	}
	reset() {
		this.pre = [];
		this.opaque = [];
		this.transparent = [];
		this.computes = [];
	}
	static _compareFromNearToFar(a, b) {
		return a.priority - b.priority || a.distanceToCamera - b.distanceToCamera;
	}
	static _compareFromFarToNear(a, b) {
		return a.priority - b.priority || b.distanceToCamera - a.distanceToCamera;
	}
	//according to camera distance
	static sort(insatnce, from, to, compareFunc) {
		RenderQueue._quickSort(insatnce, from, to, compareFunc);
	}
	//from https://github.com/oasis-engine/engine/blob/main/packages/core/src/RenderPipeline/RenderQueue.ts
	static _quickSort(a, from, to, compareFunc) {
		while (true) {
			// Insertion sort is faster for short arrays.
			if (to - from <= 10) {
				RenderQueue._insertionSort(a, from, to, compareFunc);
				return;
			}
			const third_index = (from + to) >> 1;
			// Find a pivot as the median of first, last and middle element.
			let v0 = a[from];
			let v1 = a[to - 1];
			let v2 = a[third_index];
			const c01 = compareFunc(v0, v1);
			if (c01 > 0) {
				// v1 < v0, so swap them.
				const tmp = v0;
				v0 = v1;
				v1 = tmp;
			} // v0 <= v1.
			const c02 = compareFunc(v0, v2);
			if (c02 >= 0) {
				// v2 <= v0 <= v1.
				const tmp = v0;
				v0 = v2;
				v2 = v1;
				v1 = tmp;
			} else {
				// v0 <= v1 && v0 < v2
				const c12 = compareFunc(v1, v2);
				if (c12 > 0) {
					// v0 <= v2 < v1
					const tmp = v1;
					v1 = v2;
					v2 = tmp;
				}
			}
			// v0 <= v1 <= v2
			a[from] = v0;
			a[to - 1] = v2;
			const pivot = v1;
			let low_end = from + 1; // Upper bound of elements lower than pivot.
			let high_start = to - 1; // Lower bound of elements greater than pivot.
			a[third_index] = a[low_end];
			a[low_end] = pivot;
			// From low_end to i are elements equal to pivot.
			// From i to high_start are elements that haven't been compared yet.
			partition: for (let i = low_end + 1; i < high_start; i++) {
				let element = a[i];
				let order = compareFunc(element, pivot);
				if (order < 0) {
					a[i] = a[low_end];
					a[low_end] = element;
					low_end++;
				} else if (order > 0) {
					do {
						high_start--;
						if (high_start == i) break partition;
						const top_elem = a[high_start];
						order = compareFunc(top_elem, pivot);
					} while (order > 0);
					a[i] = a[high_start];
					a[high_start] = element;
					if (order < 0) {
						element = a[i];
						a[i] = a[low_end];
						a[low_end] = element;
						low_end++;
					}
				}
			}
			if (to - high_start < low_end - from) {
				this._quickSort(a, high_start, to, compareFunc);
				to = low_end;
			} else {
				this._quickSort(a, from, low_end, compareFunc);
				from = high_start;
			}
		}
	}
	static _insertionSort(a, from, to, compareFunc) {
		for (let i = from + 1; i < to; i++) {
			let j;
			const element = a[i];
			for (j = i - 1; j >= from; j--) {
				const tmp = a[j];
				const order = compareFunc(tmp, element);
				if (order > 0) {
					a[j + 1] = tmp;
				} else {
					break;
				}
			}
			a[j + 1] = element;
		}
	}
}

class FrameState {
	constructor(context) {
		this.context = context;
		this.renderQueue = new RenderQueue();
		this.geometryMemory = 0;
		this.textureMemory = 0;
		this.frameNumber = 0;
		this._defines = {};
		this.definesDirty = true;
	}
	get defines() {
		return this._defines;
	}
	set defines(value) {
		this.definesDirty = true;
		this._defines = combine(value, this._defines, false);
	}
	update(camera) {
		this.renderQueue.reset();
		this.cullingVolume = camera.getCullingVolume();
		this.frameNumber += 1;
	}
}

function createGuid() {
	// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
	return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
		const r = (Math.random() * 16) | 0;
		const v = c === "x" ? r : (r & 0x3) | 0x8;
		return v.toString(16);
	});
}

class PrimitiveManger {
	constructor() {
		this._list = [];
		this._guid = createGuid();
	}
	get length() {
		return this._list.length;
	}
	update(frameState, camera) {
		this._list.forEach((primitive) => {
			primitive.update(frameState, camera);
		});
	}
	add(instance, index) {
		const hasIndex = defined(index);
		if (!defined(instance)) {
			throw new Error("instance is required.");
		}
		if (hasIndex) {
			if (index < 0) {
				throw new Error("index must be greater than or equal to zero.");
			} else if (index > this._list.length) {
				throw new Error("index must be less than or equal to the number of primitives.");
			}
		}
		const external = (instance._external = instance._external || {});
		const composites = (external._composites = external._composites || {});
		composites[this._guid] = {
			collection: this
		};
		if (!hasIndex) {
			this._list.push(instance);
		} else {
			this._list.splice(index, 0, instance);
		}
		return instance;
	}
	remove(instance) {
		if (this.contains(instance)) {
			const index = this._list.indexOf(instance);
			if (index !== -1) {
				this._list.splice(index, 1);
				delete instance._external._composites[this._guid];
				instance.destroy();
				return true;
			}
		}
		return false;
	}
	contains(instance) {
		return !!(
			defined(instance) &&
			instance._external &&
			instance._external._composites &&
			instance._external._composites[this._guid]
		);
	}
}

class Pass {
	constructor(context) {
		this.context = context;
	}
	render(frameState) {}
	beforeRender() {
		this.passRenderEncoder = this.renderTarget.beginRenderPassEncoder(this.context);
		if (this.computeTarget) this.passComputeEncoder = this.computeTarget.beginComputePassEncoder(this.context);
	}
	getColorTexture(index = 0) {
		return this.renderTarget.getColorTexture(index);
	}
	getDepthTexture() {
		return this.renderTarget.getDepthTexture();
	}
	afterRender() {
		this.renderTarget.endRenderPassEncoder();
		if (this.computeTarget) this.computeTarget.endComputePassEncoder();
	}
}

class RenderTarget {
	constructor(type, colorAttachments, depthAttachment, stencilAttachment, querySet) {
		this.type = type;
		this.colorAttachments = colorAttachments;
		this.depthAttachment = depthAttachment;
		this.stencilAttachment = stencilAttachment;
		this.querySet = querySet;
		this.renderEncoder = undefined;
		this.computeEncoder = undefined;
		this._renderPassDescriptor = undefined;
		this.commandEncoder = undefined;
		this.context = undefined;
	}
	get renderPassDescriptor() {
		this._renderPassDescriptor = this.getRenderPassDescriptor();
		return this._renderPassDescriptor;
	}
	getColorTexture(index = 0) {
		const colAtt = this.colorAttachments[index];
		if (colAtt) {
			return colAtt.texture;
		} else {
			return null;
		}
	}
	getDepthTexture() {
		if (this.depthAttachment) {
			return this.depthAttachment.texture;
		}
	}
	getRenderPassDescriptor() {
		this.depthAttachment?.texture?.update(this.context);
		return {
			...(this.colorAttachments && {
				colorAttachments: this.colorAttachments.map((colorAttachment) => {
					colorAttachment?.texture?.update && colorAttachment?.texture?.update(this.context);
					return {
						view:
							//暂时这么写
							colorAttachment.texture.textureView || undefined,
						resolveTarget:
							colorAttachment.resolveTarget != undefined
								? colorAttachment.resolveTarget.textureView
								: undefined,
						clearValue: colorAttachment.value,
						loadOp: colorAttachment.op,
						storeOp: colorAttachment.storeOp
					};
				})
			}),
			...((this.depthAttachment || this.stencilAttachment) && {
				depthStencilAttachment: {
					view: this.depthAttachment?.texture?.textureView || undefined,
					depthLoadOp: this.depthAttachment?.op || "clear",
					depthClearValue: this.depthAttachment?.value || 1.0,
					depthStoreOp: this.depthAttachment?.storeOp || "store"
					// stencilLoadOp: this.stencilAttachment?.op || "clear",
					// stencilClearValue: this.stencilAttachment?.value || 0,
					// stencilStoreOp: this.stencilAttachment?.storeOp || "store",
				}
			})
		};
	}
	beginRenderPassEncoder(context) {
		if (!this.context) this.context = context;
		const { device } = this.context;
		this.commandEncoder = device.createCommandEncoder();
		this.renderEncoder = this.commandEncoder.beginRenderPass(this.renderPassDescriptor);
		return this.renderEncoder;
	}
	endRenderPassEncoder() {
		this.renderEncoder?.end();
		this.context.device.queue.submit([this.commandEncoder.finish()]);
		this.commandEncoder = null;
		this.renderEncoder = null;
	}
	beginComputePassEncoder(context) {
		if (!this.context) this.context = context;
		const { device } = this.context;
		this.commandEncoder = device.createCommandEncoder();
		this.computeEncoder = this.commandEncoder.beginComputePass();
		return this.computeEncoder;
	}
	endComputePassEncoder() {
		this.computeEncoder?.end();
		this.context.device.queue.submit([this.commandEncoder.finish()]);
		this.commandEncoder = null;
		this.renderEncoder = null;
	}
	setSize(width, height, depth) {
		if (this.colorAttachments) {
			this.colorAttachments.map((colorAttachment) => {
				if (colorAttachment.texture) {
					colorAttachment.texture.setSize(width, height, depth);
				}
			});
		}
		if (this.depthAttachment.texture) this.depthAttachment.texture.setSize(width, height, depth);
	}
	destroy() {
		if (this.colorAttachments) {
			this.colorAttachments.map((colorAttachment) => {
				if (colorAttachment.texture) {
					colorAttachment.texture.destroy();
				}
			});
		}
		if (this.depthAttachment.texture) this.depthAttachment.texture.destroy();
	}
}

class BasicPass extends Pass {
	constructor(context) {
		super(context);
		this.init(context);
	}
	render(frameState, camera) {
		const { renderQueue } = frameState;
		renderQueue.sort();
		renderQueue.preRender(camera, this.context, this.passRenderEncoder);
		renderQueue.transparentRender(camera, this.context, this.passRenderEncoder);
		renderQueue.opaqueRender(camera, this.context, this.passRenderEncoder);
	}
	init(context) {
		this.createRenderTarget(context);
	}
	createRenderTarget(context) {
		const colorTexture = new Texture({
			size: this.context.presentationSize,
			format: this.context.presentationFormat,
			usage: TextureUsage.RenderAttachment | TextureUsage.TextureBinding
		});
		const depthTexture = new Texture({
			size: this.context.presentationSize,
			format: TextureFormat.Depth24Plus,
			usage: TextureUsage.RenderAttachment
		});
		const colorAttachment = new Attachment({ r: 0.0, g: 0.0, b: 0.0, a: 0.0 }, { texture: colorTexture });
		const depthAttachment = new Attachment(1.0, { texture: depthTexture });
		this.renderTarget = new RenderTarget("render", [colorAttachment], depthAttachment);
	}
}

class ShadowPass extends Pass {
	constructor(context) {
		super(context);
		this.init(context);
	}
	beforeRender() {
		return;
	}
	render(frameState, camera) {
		const { renderQueue, context } = frameState;
		const lights = context.lightManger.getAllLights();
		if (lights.length === 0) return;
		for (let i = 0; i < lights.length; i++) {
			const light = lights[i];
			const shadow = light.shadow;
			this.setRenderTarget(shadow);
			super.beforeRender();
			renderQueue.sort();
			renderQueue.preRender(camera, this.context, this.passRenderEncoder);
			renderQueue.transparentRender(camera, this.context, this.passRenderEncoder);
			renderQueue.opaqueRender(camera, this.context, this.passRenderEncoder);
		}
	}
	afterRender() {
		return;
	}
	setRenderTarget(shadow) {
		const shadowMapTexture = shadow.getShadowMapTexture();
		const depthAttachment = new Attachment(1.0, { texture: shadowMapTexture });
		this.renderTarget.depthAttachment = depthAttachment;
	}
	init(context) {
		this.createRenderTarget(context);
	}
	createRenderTarget(context) {
		this.renderTarget = new RenderTarget("render", []);
	}
}

const uniformArrayNames = ["float-array", "vec2-array", "vec3-array", "vec4-array"];
function checkContainFloatType(uniforms) {
	let result = 0;
	let hasArraytype = false;
	const uniformsNames = Object.getOwnPropertyNames(uniforms);
	uniformsNames.map((uniformsName) => {
		if (uniforms[uniformsName].type == "texture" || uniforms[uniformsName].type == "sampler") {
			result += 0;
		} else {
			if (
				uniformArrayNames.find((name) => {
					return name === uniforms[uniformsName].type;
				})
			) {
				hasArraytype = true;
			} else {
				result += 1;
			}
		}
	});
	return {
		hasFloat: result,
		hasArraytype
	};
}
function addUniformToShaderData(name, uniform, uniforms, shaderData, uniformBuffer) {
	switch (uniform.type) {
		case "float":
			uniformBuffer.setFloat(name, () => {
				return uniforms[name].value;
			});
			break;
		case "vec2":
			uniformBuffer.setFloatVec2(name, () => {
				return uniforms[name].value;
			});
			break;
		case "vec3":
			uniformBuffer.setFloatVec3(name, () => {
				return uniforms[name].value;
			});
			break;
		case "color":
			uniformBuffer.setColor(name, () => {
				return uniforms[name].value;
			});
			break;
		case "vec4":
			uniformBuffer.setFloatVec4(name, () => {
				return uniforms[name].value;
			});
		case "mat2":
			uniformBuffer.setMatrix2(name, () => {
				return uniforms[name].value;
			});
			break;
		case "mat3":
			uniformBuffer.setMatrix3(name, () => {
				return uniforms[name].value;
			});
		case "mat4":
			uniformBuffer.setMatrix4(name, () => {
				return uniforms[name].value;
			});
			break;
		case "float-array":
			uniformBuffer.setFloatArray(
				name,
				() => {
					return uniforms[name].value;
				},
				uniforms[name].value.length
			);
			break;
		case "vec2-array":
			uniformBuffer.setVec2Array(
				name,
				() => {
					return uniforms[name].value;
				},
				uniforms[name].value.length
			);
			break;
		case "vec3-array":
			uniformBuffer.setVec3Array(
				name,
				() => {
					return uniforms[name].value;
				},
				uniforms[name].value.length
			);
			break;
		case "vec4-array":
			uniformBuffer.setVec4Array(
				name,
				() => {
					return uniforms[name].value;
				},
				uniforms[name].value.length
			);
			break;
		case "texture":
			shaderData.setTexture(name, () => {
				return uniforms[name].value;
			});
			break;
		case "sampler":
			shaderData.setSampler(name, () => {
				return uniforms[name].value;
			});
			break;
		default:
			throw new Error("not match unifrom type");
	}
}

class ShaderMaterial extends Material {
	constructor(options) {
		super();
		const { type, frag, vert, defines } = options;
		this.type = type;
		this.shaderSource = new ShaderSource({
			type,
			frag,
			vert,
			custom: true,
			defines: defaultValue(defines, {}),
			render: true
		});
		this.uniforms = options.uniforms;
		this.uniformBuffer = undefined;
	}
	update(frameState, mesh) {
		if (!this.shaderData) this.createShaderData(mesh);
	}
	createShaderData(mesh) {
		super.createShaderData(mesh);
		let result = checkContainFloatType(this.uniforms);
		if (result.hasFloat) {
			this.uniformBuffer = result.hasArraytype
				? new UniformBuffer("read-only-storage", BufferUsage.Storage | BufferUsage.CopyDst)
				: new UniformBuffer();
			this.shaderData.setUniformBuffer(this.type, this.uniformBuffer);
		}
		const uniformsNames = Object.getOwnPropertyNames(this.uniforms);
		uniformsNames.map((uniformsName) => {
			addUniformToShaderData(
				uniformsName,
				this.uniforms[uniformsName],
				this.uniforms,
				this.shaderData,
				this.uniformBuffer
			);
		});
	}
}

class ResolveFrame {
	constructor() {
		this.geometry = new Geometry({});
		this.geometry.setAttribute(
			new Float32Attribute("position", [-1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0], 2)
		);
		this.geometry.count = 6;
		const shader = getVertFrag("resolve", {});
		this.material = new ShaderMaterial({
			type: "resolve",
			frag: shader.frag,
			vert: shader.vert,
			uniforms: {
				texture: {
					type: "texture",
					value: undefined
				},
				sampler: {
					type: "sampler",
					value: new Sampler({
						magFilter: "linear",
						minFilter: "linear"
					})
				}
			}
		});
		this.quadMesh = new Mesh(this.geometry, this.material);
	}
	render(context, colorTexture) {
		if (!this.canvasRenderTarget) this.initRenderTarget(context);
		// this.material
		this.material.uniforms.texture.value = colorTexture;
		this.canvasRenderTarget.colorAttachments[0].texture = {
			textureView: context.context.getCurrentTexture().createView()
		};
		this.material.update(undefined, this.quadMesh);
		const drawComand = this.quadMesh.getDrawCommand();
		const currentRenderPassEncoder = this.canvasRenderTarget.beginRenderPassEncoder(context);
		context.render(drawComand, currentRenderPassEncoder);
		this.canvasRenderTarget.endRenderPassEncoder();
	}
	initRenderTarget(context) {
		const colorAttachment = new Attachment(
			{ r: 0.0, g: 0.0, b: 0.0, a: 0 },
			{
				texture: {
					textureView: undefined
				}
			}
		);
		const depthTexture = new Texture({
			size: context.presentationSize,
			format: TextureFormat.Depth24Plus,
			usage: TextureUsage.RenderAttachment
		});
		const depthAttachment = new Attachment(1.0, { texture: depthTexture });
		this.canvasRenderTarget = new RenderTarget("render", [colorAttachment], depthAttachment);
	}
}

class PostEffectCollection {
	constructor() {
		this._postEffects = new Map();
		this.currentColorTexture = undefined;
		this.resolveFrame = new ResolveFrame();
	}
	add(postEffect) {
		this._postEffects.set(postEffect.id, postEffect);
	}
	remove(postEffect) {
		this._postEffects.delete(postEffect.id);
		postEffect.destroy();
	}
	render(context, colorTexture) {
		this.currentColorTexture = colorTexture;
		this._postEffects.forEach((postEffect) => {
			this.currentColorTexture = postEffect.render(context, this.currentColorTexture);
		});
		this.resolveFrame.render(context, this.currentColorTexture);
	}
	postEffectsSort() {
		//this._postEffects.sort()
	}
}

class ForwardRenderLine {
	constructor(context) {
		this.context = context;
		this.basicPass = new BasicPass(context);
		this.shadowPass = new ShadowPass(context);
		this.postEffectCollection = new PostEffectCollection();
		context.presentationSize;
		// const bloom=new BloomPostEffect({
		// 	width,
		// 	height,
		// 	strength:0.3,
		// 	radius:0.3,
		// 	threshold:0.5
		// });
		// this.postEffectCollection.add(bloom)
	}
	render(frameState, camera) {
		// this.shadowPass.beforeRender();
		// this.shadowPass.render(frameState, camera);
		// this.shadowPass.afterRender();
		this.basicPass.beforeRender();
		this.basicPass.render(frameState, camera);
		this.basicPass.afterRender();
		this.postEffectCollection.render(frameState.context, this.basicPass.getColorTexture(0));
	}
	destroy() {
		this.basicPass = undefined;
	}
}

/*
 * @Author: junwei.gu junwei.gu@jiduauto.com
 * @Date: 2023-01-18 17:36:06
 * @LastEditors: junwei.gu junwei.gu@jiduauto.com
 * @LastEditTime: 2023-01-19 14:36:05
 * @FilePath: \GEngine\src\utils\utils.ts
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 */
async function loadPbrTexture(brdf, diffuse, specular) {
	if (!brdf) return;
	const brdfTexture = await loadTexture(brdf);
	const diffuseTexture = await loadCubeTexture(diffuse);
	const specularTexture = await loadCubeTexture(specular);
	return {
		brdfTexture,
		diffuseTexture,
		specularTexture
	};
}
async function loadCubeTexture(urls) {
	const promises = urls.map((src) => {
		const img = document.createElement("img");
		img.src = src;
		return img.decode().then(() => createImageBitmap(img));
	});
	const images = await Promise.all(promises);
	await Promise.all(images);
	const data = images.map((image, i) => {
		return {
			source: image,
			width: image.width,
			height: image.height,
			depth: 1,
			x: 0,
			y: 0,
			z: i
		};
	});
	return new Texture({
		size: {
			width: images[0].width,
			height: images[0].height,
			depth: 6
		},
		format: "rgba8unorm",
		usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
		data,
		viewFormats: "cube",
		mipLevelCount: 6,
		needMipMap: true
	});
}
async function loadTexture(url) {
	const img = document.createElement("img");
	img.src = url;
	await img.decode();
	const imageBitmap = await createImageBitmap(img);
	const baseTexture = new Texture({
		size: { width: imageBitmap.width, height: imageBitmap.height, depth: 1 },
		data: {
			source: imageBitmap
		},
		format: "rgba8unorm"
	});
	return baseTexture;
}

class Scene extends EventDispatcher {
	constructor(options) {
		super();
		this.container =
			options.container instanceof HTMLDivElement
				? options.container
				: document.getElementById(options.container);
		this.primitiveManger = new PrimitiveManger();
		this.context = new Context({
			canvas: null,
			container: this.container,
			pixelRatio: 1
		});
		this.brdfUrl = defaultValue(options.brdfUrl, undefined);
		this.specularEnvUrls = defaultValue(options.specularEnvUrls, []);
		this.diffuseEnvUrls = defaultValue(options.diffuseEnvUrls, []);
		this.requestAdapter = options.requestAdapter || {};
		this.deviceDescriptor = options.deviceDescriptor || {};
		this.presentationContextDescriptor = options.presentationContextDescriptor;
		this.ready = false;
		this.inited = false;
		//this.init();
	}
	async init() {
		await this.context.init(this.requestAdapter, this.deviceDescriptor, this.presentationContextDescriptor);
		this.currentRenderPipeline = new ForwardRenderLine(this.context);
		this.frameState = new FrameState(this.context);
		this.viewport = {
			x: 0,
			y: 0,
			width: this.context.presentationSize.width,
			height: this.context.presentationSize.height
		};
		if (this.brdfUrl) {
			const { brdfTexture, diffuseTexture, specularTexture } = await loadPbrTexture(
				this.brdfUrl,
				this.diffuseEnvUrls,
				this.specularEnvUrls
			);
			textureCache.addTexture("brdf", brdfTexture);
			textureCache.addTexture("diffuse", diffuseTexture);
			textureCache.addTexture("specular", specularTexture);
		}
		this.ready = true;
	}
	add(instance) {
		if (instance.type === "primitive" && !this.primitiveManger.contains(instance)) {
			this.primitiveManger.add(instance);
		}
	}
	addPostEffect() {}
	addLight(light) {
		this.context.lightManger.add(light);
	}
	setCamera(camera) {
		this.camera = camera;
	}
	remove(instance) {
		if (instance.type === "primitive" && !this.primitiveManger.contains(instance)) {
			this.primitiveManger.remove(instance);
		}
	}
	getPrimitiveById() {}
	async render() {
		if (!this.inited) {
			this.inited = true;
			await this.init();
		}
		this.update();
	}
	update() {
		if (!this.ready) return;
		//释放纹理
		textureCache.releasedTextures();
		//更新相机
		this.frameState.viewport = this.viewport;
		this.frameState.update(this.camera);
		//更新灯光
		this.context.lightManger.update(this.frameState, this.camera);
		//update primitive and select
		this.primitiveManger.update(this.frameState, this.camera);
		//selct renderPipeline
		this.currentRenderPipeline.render(this.frameState, this.camera);
	}
}

class PostEffect {
	constructor(width, height, id) {
		this.width = width;
		this.height = height;
		this.initDefaultParms();
		this.id = id;
		this.priority = 0;
	}
	setSize(width, height, depth) {}
	render(context, colorTexture) {
		return null;
	}
	destroy() {}
	renderMesh(context) {
		this.fullScreenQuad.material.dirty = true;
		this.fullScreenQuad.material.update();
		const drawComand = this.fullScreenQuad.getDrawCommand();
		const currentRenderPassEncoder = this.currentRenderTarget.beginRenderPassEncoder(context);
		context.render(drawComand, currentRenderPassEncoder);
		this.currentRenderTarget.endRenderPassEncoder();
	}
	initDefaultParms() {
		const geometry = new Geometry({});
		geometry.setAttribute(
			new Float32Attribute("position", [-1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0], 2)
		);
		geometry.count = 6;
		//rs
		const primitive = new Primitive();
		const target = new Target();
		// target.format=TextureFormat.RGBA8Unorm
		const renderState = new RenderState();
		renderState.primitive = primitive;
		renderState.targets = [target];
		this.renderState = renderState;
		this.fullScreenQuad = new Mesh(geometry);
		this.defaultSampler = new Sampler();
	}
}

class BloomPostEffect extends PostEffect {
	constructor(options) {
		super(options.width, options.height, "bloom");
		this.strength = options.strength;
		this.radius = options.radius;
		this.threshold = options.threshold;
		this.init();
	}
	setSize(width, height, depth) {}
	destroy() {
		this.renderTargetBright.destroy();
	}
	render(context, colorTexture) {
		// 1. Extract Bright Areas
		this.currentRenderTarget = this.renderTargetBright;
		this.highPassUniforms.tDiffuse.value = colorTexture;
		this.fullScreenQuad.material = this.materialHighPassFilter;
		this.renderMesh(context);
		// 2. Blur All the mips progressively
		let inputRenderTarget = this.renderTargetBright;
		for (let i = 0; i < this.nMips; i++) {
			this.fullScreenQuad.material = this.separableBlurMaterials[i];
			this.separableBlurMaterials[i].uniforms.tDiffuse.value = inputRenderTarget.getColorTexture();
			this.separableBlurMaterials[i].uniforms.direction.value = BloomPostEffect.BlurDirectionX;
			this.currentRenderTarget = this.renderTargetsHorizontal[i];
			this.renderMesh(context);
			this.fullScreenQuad.material = this.separableBlurYMaterials[i];
			this.separableBlurYMaterials[i].uniforms.tDiffuse.value = this.renderTargetsHorizontal[i].getColorTexture();
			this.separableBlurYMaterials[i].uniforms.direction.value = BloomPostEffect.BlurDirectionY;
			this.currentRenderTarget = this.renderTargetsVertical[i];
			this.renderMesh(context);
			inputRenderTarget = this.renderTargetsVertical[i];
		}
		// Composite All the mips
		this.fullScreenQuad.material = this.compositeMaterial;
		this.currentRenderTarget = this.renderTargetsHorizontal[0];
		this.renderMesh(context);
		//blend
		this.blendUniforms.baseColorTexture.value = colorTexture;
		this.fullScreenQuad.material = this.blendMaterial;
		this.currentRenderTarget = this.blendTarget;
		this.renderMesh(context);
		return this.currentRenderTarget.getColorTexture();
	}
	init() {
		this.renderTargetsHorizontal = [];
		this.renderTargetsVertical = [];
		this.nMips = 5;
		let resx = Math.round(this.width / 2);
		let resy = Math.round(this.height / 2);
		this.renderTargetBright = new RenderTarget("render", [this.createColorAttachment(resx, resy)]);
		for (let i = 0; i < this.nMips; i++) {
			const renderTargetHorizonal = new RenderTarget("render", [this.createColorAttachment(resx, resy)]);
			this.renderTargetsHorizontal.push(renderTargetHorizonal);
			const renderTargetVertical = new RenderTarget("render", [this.createColorAttachment(resx, resy)]);
			this.renderTargetsVertical.push(renderTargetVertical);
			resx = Math.round(resx / 2);
			resy = Math.round(resy / 2);
		}
		// luminosity high pass material
		this.highPassUniforms = {
			tDiffuse: { type: "texture", value: null },
			tSampler: {
				type: "sampler",
				value: this.defaultSampler
			},
			luminosityThreshol: { type: "float", value: this.threshold },
			smoothWidth: { type: "float", value: 0.01 },
			defaultColor: { type: "color", value: new Color(0.0, 0, 0) },
			defaultOpacity: { type: "float", value: 1.0 }
		};
		const shader = getVertFrag("luminosityHigh", {});
		this.materialHighPassFilter = new ShaderMaterial({
			type: "bloom",
			uniforms: this.highPassUniforms,
			vert: shader.vert,
			frag: shader.frag
		});
		// Gaussian Blur Materials
		this.materialHighPassFilter.renderState = this.renderState;
		this.separableBlurMaterials = [];
		this.separableBlurYMaterials = [];
		const kernelSizeArray = [3, 5, 7, 9, 11];
		resx = Math.round(this.width / 2);
		resy = Math.round(this.height / 2);
		for (let i = 0; i < this.nMips; i++) {
			this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i], "BlurMaterial" + i));
			this.separableBlurYMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i], "BlurMaterialY" + i));
			resx = Math.round(resx / 2);
			resy = Math.round(resy / 2);
		}
		// Composite material
		this.compositeMaterial = this.getCompositeMaterial(this.nMips, "compositeMaterial");
		this.compositeMaterial.renderState = this.renderState;
		this.blendUniforms = {
			tDiffuse: { type: "texture", value: this.renderTargetsHorizontal[0].getColorTexture() },
			baseColorTexture: { type: "texture", value: null },
			tSampler: {
				type: "sampler",
				value: this.defaultSampler
			}
		};
		const blendShader = getVertFrag("blend", {});
		this.blendMaterial = new ShaderMaterial({
			type: "postBlend",
			uniforms: this.blendUniforms,
			vert: blendShader.vert,
			frag: blendShader.frag
		});
		this.blendMaterial.renderState = this.renderState;
		this.blendTarget = new RenderTarget("render", [this.createColorAttachment(this.width, this.height)]);
	}
	createColorAttachment(width, height) {
		const colorTexture = new Texture({
			size: { width, height, depth: 1 },
			format: TextureFormat.BGRA8Unorm,
			usage: TextureUsage.RenderAttachment | TextureUsage.TextureBinding
		});
		const colorAttachment = new Attachment({ r: 0.0, g: 0.0, b: 0.0, a: 0.0 }, { texture: colorTexture });
		return colorAttachment;
	}
	getCompositeMaterial(nMips, type) {
		//@ts-nocheck
		return new ShaderMaterial({
			type,
			uniforms: {
				blurTexture1: { type: "texture", value: this.renderTargetsVertical[0].getColorTexture() },
				blurTexture2: { type: "texture", value: this.renderTargetsVertical[1].getColorTexture() },
				blurTexture3: { type: "texture", value: this.renderTargetsVertical[2].getColorTexture() },
				blurTexture4: { type: "texture", value: this.renderTargetsVertical[3].getColorTexture() },
				blurTexture5: { type: "texture", value: this.renderTargetsVertical[4].getColorTexture() },
				tSampler: {
					type: "sampler",
					value: this.defaultSampler
				},
				bloomStrength: { type: "float", value: this.strength },
				bloomRadius: { type: "float", value: this.radius },
				bloomFactors: { type: "float-array", value: [1.0, 0.8, 0.6, 0.4, 0.2] },
				bloomTintColors: {
					type: "vec3-array",
					value: [
						new Vector3(1, 1, 1),
						new Vector3(1, 1, 1),
						new Vector3(1, 1, 1),
						new Vector3(1, 1, 1),
						new Vector3(1, 1, 1)
					]
				}
			},
			vert: `
              struct VertexInput {
                    @location(0) position: vec2<f32>,       
               }
               struct VertexOutput {
                    @builtin(position) position: vec4<f32>,
                    @location(0) uv: vec2<f32>,
                };
               @vertex
               fn main(input: VertexInput) -> VertexOutput {
                var output:VertexOutput;
                output.uv = input.position * 0.5 + 0.5;
                output.position = vec4<f32>(input.position, 0.0, 1.0);;
                return output;
               }
                `,
			frag: `
                struct FragInput {
                    @location(0) uv: vec2<f32>,
                };
                struct BloomUniforms{
                    bloomStrength:f32,
                    bloomRadius:f32,
                    bloomFactors : array<f32,5>,
                    bloomTintColors : array<vec3<f32>,5>
                }  
                @group(0) @binding(0)  var<storage, read> bloomUniforms : BloomUniforms;

                @group(0) @binding({{blurTexture1Binding}}) var blurTexture1: texture_2d<f32>;
                @group(0) @binding({{blurTexture2Binding}}) var blurTexture2: texture_2d<f32>;
                @group(0) @binding({{blurTexture3Binding}}) var blurTexture3: texture_2d<f32>;
                @group(0) @binding({{blurTexture4Binding}}) var blurTexture4: texture_2d<f32>;
                @group(0) @binding({{blurTexture5Binding}}) var blurTexture5: texture_2d<f32>;
                @group(0) @binding({{tSamplerBinding}}) var tSampler: sampler;

				fn lerpBloomFactor(factor:f32)->f32 {
					let mirrorFactor:f32 = 1.2 - factor;
					return mix(factor, mirrorFactor, bloomUniforms.bloomRadius);
				}
                @fragment
				fn main(input:FragInput)-> @location(0) vec4<f32>  {
					return bloomUniforms.bloomStrength * ( lerpBloomFactor(bloomUniforms.bloomFactors[0]) * vec4(bloomUniforms.bloomTintColors[0], 1.0) * textureSample(blurTexture1, tSampler, input.uv) +
						lerpBloomFactor(bloomUniforms.bloomFactors[1]) * vec4<f32>(bloomUniforms.bloomTintColors[1], 1.0) * textureSample(blurTexture2, tSampler, input.uv) +
						lerpBloomFactor(bloomUniforms.bloomFactors[2]) * vec4<f32>(bloomUniforms.bloomTintColors[2], 1.0) * textureSample(blurTexture3, tSampler, input.uv) +
						lerpBloomFactor(bloomUniforms.bloomFactors[3]) * vec4<f32>(bloomUniforms.bloomTintColors[3], 1.0) * textureSample(blurTexture4, tSampler, input.uv) +
						lerpBloomFactor(bloomUniforms.bloomFactors[4]) * vec4<f32>(bloomUniforms.bloomTintColors[4], 1.0) * textureSample(blurTexture5, tSampler, input.uv) );
				}`
		});
	}
	getSeperableBlurMaterial(kernelRadius, type) {
		const shader = getVertFrag("blur", {
			KERNEL_RADIUS: kernelRadius,
			SIGMA: kernelRadius
		});
		const mat = new ShaderMaterial({
			type,
			uniforms: {
				tDiffuse: { type: "texture", value: null },
				direction: { type: "vec2", value: new Vector2(0.0, 0.0) },
				tSampler: {
					type: "sampler",
					value: this.defaultSampler
				}
			},
			vert: shader.vert,
			frag: shader.frag
		});
		mat.renderState = this.renderState;
		return mat;
	}
}
BloomPostEffect.BlurDirectionX = new Vector2(1.0, 0.0);
BloomPostEffect.BlurDirectionY = new Vector2(0.0, 1.0);

/**
 * A plane in Hessian Normal Form defined by
 * <pre>
 * ax + by + cz + d = 0
 * </pre>
 * where (a, b, c) is the plane's <code>normal</code>, d is the signed
 * <code>distance</code> to the plane, and (x, y, z) is any point on
 * the plane.
 *
 * @alias Plane
 * @constructor
 *
 * @param {Vector3} normal The plane's normal (normalized).
 * @param {Number} distance The shortest distance from the origin to the plane.  The sign of
 * @example
 * // The plane x=0
 * const plane = new Plane(Vector3.UNIT_X, 0.0);
 *
 * @exception {DeveloperError} Normal must be normalized
 */
class Plane {
	constructor(normal, distance) {
		this.normal = Vector3.clone(normal);
		this.distance = distance;
	}
	normalize() {
		const inverseNormalLength = 1.0 / this.normal.length();
		this.normal = Vector3.multiplyByScalar(this.normal, inverseNormalLength, this.normal);
		this.distance *= inverseNormalLength;
		return this;
	}
	static fromPointNormal(point, normal, result) {
		if (!GMath.equalsEpsilon(Vector3.magnitude(normal), 1.0, GMath.EPSILON6)) {
			throw new Error("normal must be normalized.");
		}
		//>>includeEnd('debug');
		const distance = -Vector3.dot(normal, point);
		if (!defined(result)) {
			return new Plane(normal, distance);
		}
		Vector3.clone(normal, result.normal);
		result.distance = distance;
		return result;
	}
	static fromVector4(coefficients, result) {
		const normal = Vector3.fromVector4(coefficients, scratchNormal);
		const distance = coefficients.w;
		//>>includeStart('debug', pragmas.debug);
		if (!GMath.equalsEpsilon(Vector3.magnitude(normal), 1.0, GMath.EPSILON6)) {
			throw new Error("normal must be normalized.");
		}
		//>>includeEnd('debug');
		if (!defined(result)) {
			return new Plane(normal, distance);
		}
		Vector3.clone(normal, result.normal);
		result.distance = distance;
		return result;
	}
	static getPointDistance(plane, point) {
		return Vector3.dot(plane.normal, point) + plane.distance;
	}
	static projectPointOntoPlane(plane, point, result) {
		if (!defined(result)) {
			result = new Vector3();
		}
		// projectedPoint = point - (normal.point + scale) * normal
		const pointDistance = Plane.getPointDistance(plane, point);
		const scaledNormal = Vector3.multiplyByScalar(plane.normal, pointDistance, scratchCartesian);
		return Vector3.subtract(point, scaledNormal, result);
	}
	static transform(plane, transform, result) {
		const normal = plane.normal;
		const distance = plane.distance;
		const inverseTranspose = Matrix4.inverseTranspose(transform, scratchInverseTranspose);
		let planeAsCartesian4 = Vector4.fromElements(normal.x, normal.y, normal.z, distance, scratchPlaneCartesian4);
		planeAsCartesian4 = Matrix4.multiplyByVector(inverseTranspose, planeAsCartesian4, planeAsCartesian4);
		// Convert the transformed plane to Hessian Normal Form
		const transformedNormal = Vector3.fromVector4(planeAsCartesian4, scratchTransformNormal);
		planeAsCartesian4 = Vector4.divideByScalar(
			planeAsCartesian4,
			Vector3.magnitude(transformedNormal),
			planeAsCartesian4
		);
		return Plane.fromVector4(planeAsCartesian4, result);
	}
	static clone(plane, result) {
		if (!defined(result)) {
			return new Plane(plane.normal, plane.distance);
		}
		Vector3.clone(plane.normal, result.normal);
		result.distance = plane.distance;
		return result;
	}
	static equals(left, right) {
		return left.distance === right.distance && Vector3.equals(left.normal, right.normal);
	}
}
Plane.ORIGIN_XY_PLANE = Object.freeze(new Plane(Vector3.UNIT_Z, 0.0));
Plane.ORIGIN_YZ_PLANE = Object.freeze(new Plane(Vector3.UNIT_X, 0.0));
Plane.ORIGIN_ZX_PLANE = Object.freeze(new Plane(Vector3.UNIT_Y, 0.0));
const scratchNormal = new Vector3();
const scratchCartesian = new Vector3();
const scratchInverseTranspose = new Matrix4();
const scratchPlaneCartesian4 = new Vector4();
const scratchTransformNormal = new Vector3();

/**
 * The culling volume defined by planes.
 *
 * @alias CullingVolume
 * @constructor
 *
 * @param {Vector4[]} [planes] An array of clipping planes.
 */
class CullingVolume {
	constructor(planes) {
		this.planes = defaultValue(planes, [
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0),
			new Plane(Vector3.UNIT_Z, 0.0)
		]);
	}
	/**
	 * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.
	 * The planes are aligned to the x, y, and z axes in world coordinates.
	 *
	 * @param {BoundingSphere} boundingSphere The bounding sphere used to create the culling volume.
	 * @param {CullingVolume} [result] The object onto which to store the result.
	 * @returns {CullingVolume} The culling volume created from the bounding sphere.
	 */
	static fromBoundingSphere(boundingSphere, result) {
		if (!defined(boundingSphere)) {
			throw new Error("boundingSphere is required.");
		}
		if (!defined(result)) {
			result = new CullingVolume();
		}
		const length = faces.length;
		const planes = result.planes;
		planes.length = 2 * length;
		const center = boundingSphere.center;
		const radius = boundingSphere.radius;
		let planeIndex = 0;
		for (let i = 0; i < length; ++i) {
			const faceNormal = faces[i];
			let plane0 = planes[planeIndex];
			let plane1 = planes[planeIndex + 1];
			if (!defined(plane0)) {
				plane0 = planes[planeIndex] = new Vector4();
			}
			if (!defined(plane1)) {
				plane1 = planes[planeIndex + 1] = new Vector4();
			}
			Vector3.multiplyByScalar(faceNormal, -radius, scratchPlaneCenter);
			Vector3.add(center, scratchPlaneCenter, scratchPlaneCenter);
			plane0.x = faceNormal.x;
			plane0.y = faceNormal.y;
			plane0.z = faceNormal.z;
			plane0.w = -Vector3.dot(faceNormal, scratchPlaneCenter);
			Vector3.multiplyByScalar(faceNormal, radius, scratchPlaneCenter);
			Vector3.add(center, scratchPlaneCenter, scratchPlaneCenter);
			plane1.x = -faceNormal.x;
			plane1.y = -faceNormal.y;
			plane1.z = -faceNormal.z;
			plane1.w = -Vector3.dot(Vector3.negate(faceNormal, scratchPlaneNormal), scratchPlaneCenter);
			planeIndex += 2;
		}
		return result;
	}
	/**
	 * Determines whether a bounding volume intersects the culling volume.
	 *
	 * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.
	 * @returns {Intersect}  Intersect.OUTSIDE, Intersect.INTERSECTING, or Intersect.INSIDE.
	 */
	computeVisibility(boundingVolume) {
		if (!defined(boundingVolume)) {
			throw new Error("boundingVolume is required.");
		}
		const planes = this.planes;
		let intersecting = false;
		for (let k = 0, len = planes.length; k < len; ++k) {
			const result = boundingVolume.intersectPlane(planes[k]);
			if (result === Intersect$1.OUTSIDE) {
				return Intersect$1.OUTSIDE;
			} else if (result === Intersect$1.INTERSECTING) {
				intersecting = true;
			}
		}
		return intersecting ? Intersect$1.INTERSECTING : Intersect$1.INSIDE;
	}
	/**
	 * Determines whether a bounding volume intersects the culling volume.
	 *
	 * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.
	 * @param {Number} parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling
	 *                                 volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then
	 *                                 the parent (and therefore this) volume is completely inside plane[planeIndex]
	 *                                 and that plane check can be skipped.
	 * @returns {Number} A plane mask as described above (which can be applied to this boundingVolume's children).
	 *
	 * @private
	 */
	computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {
		//>>includeStart('debug', pragmas.debug);
		if (!defined(boundingVolume)) {
			throw new Error("boundingVolume is required.");
		}
		if (!defined(parentPlaneMask)) {
			throw new Error("parentPlaneMask is required.");
		}
		//>>includeEnd('debug');
		if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {
			// parent is completely outside or completely inside, so this child is as well.
			return parentPlaneMask;
		}
		// Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.
		// (Because if there are fewer than 31 planes, the upper bits wont be changed.)
		let mask = CullingVolume.MASK_INSIDE;
		const planes = this.planes;
		for (let k = 0, len = planes.length; k < len; ++k) {
			// For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.
			const flag = k < 31 ? 1 << k : 0;
			if (k < 31 && (parentPlaneMask & flag) === 0) {
				// boundingVolume is known to be INSIDE this plane.
				continue;
			}
			scratchPlanes.set(planes[k].normal.x, planes[k].normal.y, planes[k].normal.z, planes[k].distance);
			const result = boundingVolume.intersectPlane(Plane.fromVector4(scratchPlanes, scratchPlane));
			if (result === Intersect$1.OUTSIDE) {
				return CullingVolume.MASK_OUTSIDE;
			} else if (result === Intersect$1.INTERSECTING) {
				mask |= flag;
			}
		}
		return mask;
	}
}
CullingVolume.MASK_OUTSIDE = 0xffffffff;
CullingVolume.MASK_INSIDE = 0x00000000;
CullingVolume.MASK_INDETERMINATE = 0x7fffffff;
const faces = [new Vector3(), new Vector3(), new Vector3()];
Vector3.clone(Vector3.UNIT_X, faces[0]);
Vector3.clone(Vector3.UNIT_Y, faces[1]);
Vector3.clone(Vector3.UNIT_Z, faces[2]);
const scratchPlaneCenter = new Vector3();
const scratchPlaneNormal = new Vector3();
const scratchPlanes = new Vector4();
const scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);

class Camera extends RenderObject {
	constructor() {
		super();
		this._viewMatrix = undefined;
		this.isCamera = true;
		this.cullingVolume = new CullingVolume();
		this._viewMatrix = new Matrix4();
		this.projectMatrixDirty = true;
		this.createShaderData();
	}
	get viewMatrix() {
		this.updateMatrix();
		Matrix4.inverse(this.modelMatrix, this._viewMatrix);
		return this._viewMatrix;
	}
	get projectionMatrix() {
		this.updateProjectionMatrix();
		return this._projectionMatrix;
	}
	get inverseViewMatrix() {
		this.updateMatrix();
		return this.modelMatrix;
	}
	updateProjectionMatrix() {}
	/**
	 * get a culling volume for this frustum.
	 */
	getCullingVolume() {
		const cloneViewMatrix = this.viewMatrix.clone(new Matrix4());
		const vpMatrix = Matrix4.multiply(this.projectionMatrix, cloneViewMatrix, new Matrix4());
		const planes = this.cullingVolume.planes;
		const me = vpMatrix;
		const me0 = me[0],
			me1 = me[1],
			me2 = me[2],
			me3 = me[3];
		const me4 = me[4],
			me5 = me[5],
			me6 = me[6],
			me7 = me[7];
		const me8 = me[8],
			me9 = me[9],
			me10 = me[10],
			me11 = me[11];
		const me12 = me[12],
			me13 = me[13],
			me14 = me[14],
			me15 = me[15];
		planes[0] = new Plane(new Vector3(me3 - me0, me7 - me4, me11 - me8), me15 - me12);
		planes[0].normalize();
		planes[1] = new Plane(new Vector3(me3 + me0, me7 + me4, me11 + me8), me15 + me12);
		planes[1].normalize();
		planes[2] = new Plane(new Vector3(me3 + me1, me7 + me5, me11 + me9), me15 + me13);
		planes[2].normalize();
		planes[3] = new Plane(new Vector3(me3 - me1, me7 - me5, me11 - me9), me15 - me13);
		planes[3].normalize();
		planes[4] = new Plane(new Vector3(me3 - me2, me7 - me6, me11 - me10), me15 - me14);
		planes[4].normalize();
		planes[5] = new Plane(new Vector3(me3 + me2, me7 + me6, me11 + me10), me15 + me14);
		planes[5].normalize();
		return this.cullingVolume;
	}
	createShaderData() {
		this.shaderData = new ShaderData("camera", 0, 1, 1);
		const uniformBuffer = new UniformBuffer();
		uniformBuffer.setMatrix4("projectionMatrix", () => {
			return this.projectionMatrix;
		});
		uniformBuffer.setMatrix4("viewMatrix", () => {
			return this.viewMatrix;
		});
		uniformBuffer.setMatrix4("inverseViewMatrix", () => {
			return this.inverseViewMatrix;
		});
		uniformBuffer.setFloatVec3("position", () => {
			return this.position;
		});
		this.shaderData.setUniformBuffer("camera", uniformBuffer);
	}
}

class PerspectiveCamera extends Camera {
	constructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {
		super();
		this._aspect = aspect;
		this.fov = fov;
		this.near = near;
		this.far = far;
		this.xOffset = 0;
		this.yOffset = 0;
		this.projectMatrixDirty = true;
		this.updateCameraParms();
		this.cullingVolume = new CullingVolume();
		this.isPerspectiveCamera = true;
	}
	get aspect() {
		return this._aspect;
	}
	set aspect(v) {
		this.projectMatrixDirty = true;
		this._aspect = v;
	}
	get fov() {
		return this._fov;
	}
	set fov(v) {
		this.projectMatrixDirty = true;
		this._fov = v;
	}
	updateCameraParms() {
		this.top = this.near * Math.tan(0.5 * GMath.RADIANS_PER_DEGREE * this.fov);
		this.height = 2 * this.top;
		this.width = this.aspect * this.height;
		this.left = -0.5 * this.width;
	}
	updateProjectionMatrix() {
		if (this.projectMatrixDirty) {
			this.updateCameraParms();
			this._projectionMatrix = Matrix4.makePerspective(
				this.left,
				this.left + this.width,
				this.top,
				this.top - this.height,
				this.near,
				this.far
			);
			this.projectMatrixDirty = false;
		}
	}
}

class Light {
	constructor(color, intensity) {
		this._color = Vector3.multiplyByScalar(color, intensity, new Vector3());
		this._intensity = intensity;
		this._position = new Vector3(0, 0, 0);
		this.positionDirty = true;
		this.colorDirty = true;
		this.intensityDirty = true;
		this._shadow = null;
	}
	get position() {
		return this._position;
	}
	set position(value) {
		this.positionDirty = true;
		this._position = value;
	}
	get color() {
		return this._color;
	}
	set color(value) {
		this.colorDirty = true;
		this._color = value;
	}
	set intensity(value) {
		this.color = Vector3.multiplyByScalar(this.color, value, new Vector3());
		this.intensityDirty = true;
		this._intensity = value;
	}
	get intensity() {
		return this._intensity;
	}
	get shadow() {
		return this._shadow;
	}
	set shadow(value) {
		this._shadow = value;
	}
	update(camera) {
		camera.viewMatrix;
		let position = this.position.clone();
		// position = position.applyMatrix4(viewMatrix);
		this.positionVC = position;
	}
}

class SpotLight extends Light {
	constructor(color, intensity, distance = 0, angle = 60, penumbra = 60, decay = 1) {
		super(color, intensity);
		this._distance = distance;
		this._angle = (angle / 180) * Math.PI;
		this._penumbra = (penumbra / 180) * Math.PI;
		this._decay = decay;
		this.type = "spot";
		this._target = new Vector3(0, 0, 0);
		this.dirtectDirty = true;
		this.angleDirty = true;
		this.penumbraDirty = true;
		this.distanceDirty = true;
		this.decayDirty = true;
		this.coneCosDirty = true;
		this.penumbraCosDirty = true;
		this.updateConeCosOrPenumbraCos();
	}
	set target(value) {
		this.dirtectDirty = true;
		this._target = value;
	}
	get directional() {
		const result = new Vector3();
		Vector3.subtract(this.position, this._target, result);
		return Vector3.normalize(result, new Vector3());
	}
	get angle() {
		return this._angle;
	}
	set angle(value) {
		this.angleDirty = true;
		this._angle = (value / 180) * Math.PI;
		this.updateConeCosOrPenumbraCos();
	}
	get penumbra() {
		return this._penumbra;
	}
	set penumbra(value) {
		this.penumbraDirty = true;
		this._penumbra = (value / 180) * Math.PI;
		this.updateConeCosOrPenumbraCos();
	}
	set distance(value) {
		this.distanceDirty = true;
		this._distance = value;
	}
	get distance() {
		return this._distance;
	}
	set decay(value) {
		this.decayDirty = true;
		this._decay = value;
	}
	get decay() {
		return this._decay;
	}
	set coneCos(value) {
		this.coneCosDirty = true;
		this._coneCos = value;
	}
	get coneCos() {
		return this._coneCos;
	}
	set penumbraCos(value) {
		this.penumbraCosDirty = true;
		this._penumbraCos = value;
	}
	get penumbraCos() {
		return this._penumbraCos;
	}
	updateConeCosOrPenumbraCos() {
		this._coneCos = Math.cos(this.angle);
		this._penumbraCos = Math.cos(this.angle + this.penumbra);
	}
	update(camera) {
		super.update(camera);
		let directional = this.directional.clone();
		camera.viewMatrix;
		//this.dirtectVC = directional.transformDirection(viewMatrix);
		this.dirtectVC = directional;
	}
}
//uniform
// color: {},
// position: {},
// direction: {},
// distance: {},
// coneCos: {},
// penumbraCos: {},
// decay: {}

class BaseShadow {
	constructor(shadowMapSize, camera) {
		this._shadowMapSize = shadowMapSize;
		this._camera = camera;
		this._init();
	}
	getShadowMapTexture() {
		return this._shadowMap;
	}
	_init() {
		this._initShadowMapTexture();
	}
	_initShadowMapTexture() {
		this._createShadowMapTexture();
	}
	_createShadowMapTexture() {
		this._shadowMap = new Texture({
			size: {
				width: this._shadowMapSize,
				height: this._shadowMapSize,
				depth: 1
			},
			format: TextureFormat.Depth32Float,
			usage: TextureUsage.RenderAttachment | TextureUsage.TextureBinding
		});
	}
}

class PointLightShadow extends BaseShadow {
	constructor() {
		const camera = new PerspectiveCamera(90, 1, 0.5, 500);
		super(1024, camera);
		this.type = "pointLightShadow";
	}
}

class PointLight extends Light {
	constructor(color, intensity, distance = 0, decay = 1, openShadow = true) {
		super(color, intensity);
		this._distance = distance;
		this._decay = decay;
		this.distanceDirty = true;
		this.decayDirty = true;
		this.type = "point";
		if (openShadow) this.shadow = new PointLightShadow();
	}
	set distance(value) {
		this.distanceDirty = true;
		this._distance = value;
	}
	get distance() {
		return this._distance;
	}
	set decay(value) {
		this.decayDirty = true;
		this._decay = value;
	}
	get decay() {
		return this._decay;
	}
}
//uniform
// color: {},
// position: {},
// decay: {},
// distance: {}

class OrthographicCamera extends Camera {
	constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {
		super();
		this.near = near;
		this.far = far;
		this.left = left;
		this.top = top;
		this.bottom = bottom;
		this.right = right;
		this.isOrthographicCamera = true;
	}
	updateCameraParms() {
		const dx = (this.right - this.left) / 2;
		const dy = (this.top - this.bottom) / 2;
		const cx = (this.right + this.left) / 2;
		const cy = (this.top + this.bottom) / 2;
		return {
			left: cx - dx,
			right: cx + dx,
			top: cy + dy,
			bottom: cy - dy
		};
	}
	updateProjectionMatrix() {
		if (this.projectMatrixDirty) {
			const { left, right, top, bottom } = this.updateCameraParms();
			this._projectionMatrix = Matrix4.makeOrthographic(left, right, top, bottom, this.near, this.far);
			this.projectMatrixDirty = false;
		}
	}
}

class DirectionalLightShadow extends BaseShadow {
	constructor() {
		const camera = new OrthographicCamera(-5, 5, 5, -5, 0.5, 500);
		super(1024, camera);
		this.type = "directionalLightShadow";
	}
}

class DirectionalLight extends Light {
	constructor(color, intensity, directional = new Vector3(1, 1, 0), openShadow = true) {
		super(color, intensity);
		this.type = "directional";
		this._directional = directional;
		this.dirtectDirty = true;
		if (openShadow) this.shadow = new DirectionalLightShadow();
	}
	set directional(value) {
		this.dirtectDirty = true;
		this._directional = value;
	}
	get directional() {
		return Vector3.normalize(this._directional, new Vector3());
	}
	update(camera) {
		super.update(camera);
		let directional = this.directional.clone();
		camera.viewMatrix;
		// this.dirtectVC = directional.transformDirection(viewMatrix);
		this.dirtectVC = directional.normalize();
	}
}
//uniform
// direction: {},
// color: {}

function newTypedArray(type, buffer, byteOffset, length) {
	switch (type) {
		case 5120:
			return new Int8Array(buffer, byteOffset, length);
		case 5121:
			return new Uint8Array(buffer, byteOffset, length);
		case 5122:
			return new Int16Array(buffer, byteOffset, length);
		case 5123:
			return new Uint16Array(buffer, byteOffset, length);
		case 5125:
			return new Uint32Array(buffer, byteOffset, length);
		case 5126:
			return new Float32Array(buffer, byteOffset, length);
		default:
			throw new Error("invalid component type");
	}
}
function toIndices(array) {
	if (array instanceof Uint16Array || array instanceof Uint32Array) {
		return array;
	}
	let toArray;
	if (array instanceof Float32Array) {
		toArray = new Uint32Array(array.length);
	} else {
		toArray = new Uint16Array(array.length);
	}
	array.forEach((element, index) => {
		toArray[index] = element;
	});
	return toArray;
}
function generateNormals(indices, positions) {
	const normals = new Float32Array(positions.length);
	const vertexCount = indices ? indices.length : positions.length;
	for (let i = 0; i < vertexCount; i += 3) {
		const triIndices = [];
		for (let n = 0; n < 3; n += 1) {
			if (indices) {
				triIndices.push(indices[i + n]);
			} else {
				triIndices.push(i + n);
			}
		}
		const triangle = triIndices.map((vertexIndex) => {
			const index = vertexIndex * 3;
			return new Vector3(positions[index], positions[index + 1], positions[index + 2]);
		});
		const dv1 = new Vector3();
		Vector3.subtract(triangle[1], triangle[0], dv1);
		const dv2 = new Vector3();
		Vector3.subtract(triangle[2], triangle[0], dv2);
		const normal = new Vector3();
		Vector3.cross(dv1.normalize(), dv2.normalize(), normal);
		for (let n = 0; n < 3; n += 1) {
			const index = (i + n) * 3;
			normals[index + 0] += normal.x;
			normals[index + 1] += normal.y;
			normals[index + 2] += normal.z;
		}
	}
	return normals;
}
// export function generateTangents(
//   indices: TypedArray | null,
//   positions: TypedArray,
//   normals: TypedArray,
//   uvs: TypedArray
// ) {
//   const tangents = new Float32Array((normals.length / 3) * 4);
//   const vertexCount = indices ? indices.length : positions.length;
//   for (let i = 0; i < vertexCount; i += 3) {
//     const triIndices = [];
//     for (let n = 0; n < 3; n += 1) {
//       if (indices) {
//         triIndices.push(indices[i + n]);
//       } else {
//         triIndices.push(i + n);
//       }
//     }
//     const pos = triIndices.map((vertexIndex) => {
//       const index = vertexIndex * 3;
//       return new Vector3(
//         positions[index],
//         positions[index + 1],
//         positions[index + 2]
//       );
//     });
//     const uv = triIndices.map((vertexIndex) => {
//       const index = vertexIndex * 2;
//       return new Vector2(uvs![index], uvs![index + 1]);
//     });
//     let dv1 = new Vector3();
//     Vector3.subtract(pos[1], pos[0], dv1);
//     let dv2 = new Vector3();
//     Vector3.subtract(pos[2], pos[0], dv2);
//     const duv1 = new Vector3();
//     Vector3.subtract(uv[1], uv[0], duv1);
//     const duv2 = new Vector3();
//     Vector3.subtract(uv[2], uv[0], duv2);
//     const tangent = new Vector3();
//     Vector3.multiplyByScalar(dv1, duv1.y, dv1);
//     Vector3.multiplyByScalar(dv2, duv2.y, dv2);
//     Vector3.subtract(dv1, dv2, tangent);
//     Vector3.multiplyByScalar(
//       tangent,
//       duv2.y * duv1.x - duv1.y * duv2.x,
//       tangent
//     );
//     tangent.normalize();
//     for (let n = 0; n < 3; n += 1) {
//       const index = (i + n) * 4;
//       tangents[index + 0] += tangent.x;
//       tangents[index + 1] += tangent.y;
//       tangents[index + 2] += tangent.z;
//       tangents[index + 3] = 1;
//     }
//   }
//   return tangents;
// }
function getTextures(material) {
	const { baseColorTexture, metallicRoughnessTexture } = material.pbrMetallicRoughness;
	const { normalTexture, occlusionTexture, emissiveTexture } = material;
	return [baseColorTexture, metallicRoughnessTexture, normalTexture, occlusionTexture, emissiveTexture];
}
const gltfEnum = {
	SCALAR: 1,
	VEC2: 2,
	VEC3: 3,
	VEC4: 4,
	MAT2: 4,
	MAT3: 9,
	MAT4: 16,
	5120: 1,
	5121: 1,
	5122: 2,
	5123: 2,
	5125: 4,
	5126: 4,
	9728: "nearest",
	9729: "linear",
	9984: "linear",
	9985: "linear",
	9986: "linear",
	9987: "linear",
	33071: "clamp-to-edge",
	33648: "mirror-repeat",
	10497: "repeat"
};

class GLTF {
	constructor(json, buffers, images, glbOffset = 0) {
		this.scenes = json.scenes;
		this.defaultScene = json.scene || 0;
		this.nodes = json.nodes;
		this.cameras = json.cameras || [];
		this.images = images;
		function getSampler(samplerJson) {
			return {
				magFilter: gltfEnum[samplerJson.magFilter || 9729],
				minFilter: gltfEnum[samplerJson.minFilter || 9729],
				addressModeU: gltfEnum[samplerJson.wrapS || 10497],
				addressModeV: gltfEnum[samplerJson.wrapT || 10497]
			};
		}
		const samplers = json.samplers ? json.samplers.map((sampler) => getSampler(sampler)) : [];
		const defaultSampler = getSampler({});
		const textures = json.textures
			? json.textures.map((texture) => {
					texture.sampler = texture.sampler !== undefined ? samplers[texture.sampler] : defaultSampler;
					return texture;
			  })
			: [];
		const materials = json.materials
			? json.materials.map((material) => {
					if (!material.pbrMetallicRoughness) {
						material.pbrMetallicRoughness = {};
					}
					getTextures(material).forEach((texture) => {
						if (texture) {
							texture.source = textures[texture.index].source;
							texture.sampler = textures[texture.index].sampler;
						}
					});
					return material;
			  })
			: [];
		const defaultMaterial = { pbrMetallicRoughness: {} };
		function getBufferView(accessor, n) {
			const bufferView = json.bufferViews[accessor.bufferView];
			const offset = (bufferView.byteOffset || 0) + (accessor.byteOffset || 0);
			const stride = Math.max(bufferView.byteStride / 4 || 0, n);
			let array = newTypedArray(
				accessor.componentType,
				buffers[bufferView.buffer],
				bufferView.buffer === 0 ? offset + glbOffset : offset,
				(accessor.count - 1) * stride + n
			);
			if (stride > n) {
				const TypedArrayConstructor = array.constructor;
				const strided = new TypedArrayConstructor(accessor.count * n);
				for (let i = 0, j = 0; i < strided.length; i += n, j += stride) {
					for (let k = 0; k < n; k += 1) {
						strided[i + k] = array[j + k];
					}
				}
				array = strided;
			}
			return array;
		}
		const accessors = json.accessors.map((accessor) => {
			const n = gltfEnum[accessor.type];
			let array;
			if (accessor.bufferView === undefined) {
				array = newTypedArray(
					accessor.componentType,
					new ArrayBuffer(n * accessor.count * gltfEnum[accessor.componentType]),
					0,
					accessor.count * n
				);
			} else {
				array = getBufferView(accessor, n);
			}
			if (accessor.sparse) {
				accessor.sparse.indices.count = accessor.sparse.count;
				accessor.sparse.values.count = accessor.sparse.count;
				accessor.sparse.values.componentType = accessor.componentType;
				const indices = getBufferView(accessor.sparse.indices, 1);
				const values = getBufferView(accessor.sparse.values, n);
				for (let i = 0; i < accessor.sparse.count; i += 1) {
					for (let j = 0; j < n; j += 1) {
						array[indices[i] * n + j] = values[i * n + j];
					}
				}
			}
			return array;
		});
		this.meshes = json.meshes.map((mesh) =>
			mesh.primitives.map((primitive) => {
				const material = primitive.material !== undefined ? materials[primitive.material] : defaultMaterial;
				let indices = null;
				let vertexCount;
				if (primitive.indices !== undefined) {
					indices = toIndices(accessors[primitive.indices]);
					vertexCount = json.accessors[primitive.indices].count;
				} else {
					vertexCount = json.accessors[primitive.attributes.POSITION].count;
				}
				const positions = accessors[primitive.attributes.POSITION];
				const { max, min } = json.accessors[primitive.attributes.POSITION];
				const boundingBox = { max, min };
				let normals;
				if (primitive.attributes.NORMAL !== undefined) {
					normals = accessors[primitive.attributes.NORMAL];
				} else {
					normals = generateNormals(indices, positions);
				}
				let uvs = null;
				if (primitive.attributes.TEXCOORD_0 !== undefined) {
					uvs = accessors[primitive.attributes.TEXCOORD_0];
				}
				let uv1s = null;
				if (primitive.attributes.TEXCOORD_1 !== undefined) {
					uv1s = accessors[primitive.attributes.TEXCOORD_1];
				}
				let tangents = null;
				if (primitive.attributes.TANGENT !== undefined && primitive.attributes.NORMAL !== undefined) {
					tangents = accessors[primitive.attributes.TANGENT];
				} else if (material.normalTexture);
				let colors = null;
				if (primitive.attributes.COLOR_0 !== undefined) {
					colors = accessors[primitive.attributes.COLOR_0];
				}
				return generateMesh(
					{
						vertexCount,
						indices,
						positions,
						normals,
						uvs,
						uv1s,
						tangents,
						colors,
						material,
						boundingBox
					},
					this.images
				);
				// return {
				//   vertexCount,
				//   indices,
				//   positions,
				//   normals,
				//   uvs,
				//   uv1s,
				//   tangents,
				//   colors,
				//   material,
				//   boundingBox,
				// };
			})
		);
		this.animations =
			json.animations?.map((animation) => {
				const channels = animation.channels.map(({ sampler, target }) => ({
					input: accessors[animation.samplers[sampler].input],
					output: accessors[animation.samplers[sampler].output],
					interpolation: animation.samplers[sampler].interpolation || "LINEAR",
					node: target.node,
					path: target.path
				}));
				const length = channels.reduce((acc, { input }) => Math.max(acc, input[input.length - 1]), 0);
				return { channels, length };
			}) || [];
	}
}
async function loadGLTFObject(json, url, glbOffset = 0, bin) {
	const dir = url.substring(0, url.lastIndexOf("/"));
	const images = [];
	let loadExternalImages = Promise.resolve();
	if (json.images) {
		loadExternalImages = Promise.all(
			json.images.map(async (image, index) => {
				if (image.uri) {
					const imageUrl = image.uri.slice(0, 5) === "data:" ? image.uri : `${dir}/${image.uri}`;
					images[index] = await fetch(imageUrl)
						.then((response) => response.blob())
						.then((blob) =>
							createImageBitmap(blob, {
								colorSpaceConversion: "none"
							})
						);
				}
			})
		);
	}
	const buffers = [];
	await Promise.all(
		json.buffers.map((buffer, index) => {
			if (!buffer.uri) {
				if (index !== 0) {
					throw new Error("buffer uri undefined");
				}
				buffers[index] = bin;
				return Promise.resolve();
			}
			const bufferUrl = buffer.uri.slice(0, 5) === "data:" ? buffer.uri : `${dir}/${buffer.uri}`;
			return fetch(bufferUrl)
				.then((response) => response.arrayBuffer())
				.then((arrayBuffer) => {
					buffers[index] = arrayBuffer;
				});
		})
	);
	let loadInternalImages = Promise.resolve();
	if (json.images) {
		loadInternalImages = Promise.all(
			json.images.map(async (image, index) => {
				if (image.bufferView !== undefined) {
					const { buffer, byteOffset, byteLength } = json.bufferViews[image.bufferView];
					const array = new Uint8Array(
						buffers[buffer],
						buffer === 0 ? byteOffset + glbOffset : byteOffset,
						byteLength
					);
					let type;
					if (image.mimeType) {
						type = image.mimeType;
					} else {
						type = array[0] === 0xff ? "image/jpeg" : "image/png";
					}
					const blob = new Blob([array], { type });
					images[index] = await createImageBitmap(blob, {
						colorSpaceConversion: "none"
					});
				}
			})
		);
	}
	await Promise.all([loadExternalImages, loadInternalImages]);
	return new GLTF(json, buffers, images, glbOffset);
}
async function loadGLTF(url) {
	const ext = url.split(".").pop();
	if (ext === "gltf") {
		const json = await fetch(url).then((response) => response.json());
		return loadGLTFObject(json, url);
	}
	const glb = await fetch(url).then((response) => response.arrayBuffer());
	const jsonLength = new Uint32Array(glb, 12, 1)[0];
	const jsonChunk = new Uint8Array(glb, 20, jsonLength);
	const json = JSON.parse(new TextDecoder("utf-8").decode(jsonChunk));
	return loadGLTFObject(json, url, 28 + jsonLength, glb);
}
function generateMesh(options, images) {
	const { vertexCount, indices, positions, normals, uvs, uv1s, tangents, colors, material, boundingBox } = options;
	const { emissiveFactor, emissiveTexture, name, normalTexture, occlusionTexture, pbrMetallicRoughness } = material;
	const geo = new Geometry({});
	if (indices) geo.setIndice(Array.from(indices));
	if (positions) geo.setAttribute(new Float32Attribute("position", Array.from(positions), 3));
	if (normals) geo.setAttribute(new Float32Attribute("normal", Array.from(normals), 3));
	if (uvs) geo.setAttribute(new Float32Attribute("uv", Array.from(uvs), 2));
	geo.computeBoundingSphere(Array.from(positions));
	geo.count = vertexCount;
	const mat = new PbrMat();
	if (normalTexture) mat.normalTexture = generateTexture(normalTexture, images);
	if (occlusionTexture) mat.aoTexture = generateTexture(occlusionTexture, images);
	if (emissiveTexture) mat.emissiveTexture = generateTexture(emissiveTexture, images);
	if (pbrMetallicRoughness?.baseColorTexture)
		mat.baseTexture = generateTexture(pbrMetallicRoughness.baseColorTexture, images);
	if (pbrMetallicRoughness?.metallicRoughnessTexture)
		mat.metalnessRoughnessTexture = generateTexture(pbrMetallicRoughness.metallicRoughnessTexture, images);
	mat.baseSampler = new Sampler({
		magFilter: "linear",
		minFilter: "linear",
		addressModeU: "repeat",
		addressModeV: "repeat"
	});
	mat.roughness = 0.3;
	mat.metalness = 1.0;
	const mesh = new Mesh(geo, mat);
	return mesh;
}
function generateTexture(texture, images) {
	const { sampler, index } = texture;
	return new Texture({
		size: {
			width: images[index].width,
			height: images[index].height,
			depth: 1
		},
		data: {
			source: images[index]
		},
		format: "rgba8unorm",
		usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT
	});
}

//from three.js
class Spherical {
	constructor(radius = 1, phi = 0, theta = 0) {
		this.radius = radius;
		this.phi = phi; // polar angle
		this.theta = theta; // azimuthal angle
		return this;
	}
	set(radius, phi, theta) {
		this.radius = radius;
		this.phi = phi;
		this.theta = theta;
		return this;
	}
	copy(other) {
		this.radius = other.radius;
		this.phi = other.phi;
		this.theta = other.theta;
		return this;
	}
	// restrict phi to be between EPS and PI-EPS
	makeSafe() {
		const EPS = 0.000001;
		this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
		return this;
	}
	setFromVector3(v) {
		return this.setFromCartesianCoords(v.x, v.y, v.z);
	}
	setFromCartesianCoords(x, y, z) {
		this.radius = Math.sqrt(x * x + y * y + z * z);
		if (this.radius === 0) {
			this.theta = 0;
			this.phi = 0;
		} else {
			this.theta = Math.atan2(x, z);
			this.phi = Math.acos(GMath.clamp(y / this.radius, -1, 1));
		}
		return this;
	}
	clone() {
		return new Spherical(this.radius, this.phi, this.theta);
	}
}

//from three.js
const _changeEvent = { type: "change" };
const _startEvent = { type: "start" };
const _endEvent = { type: "end" };
class OrbitControl extends EventDispatcher {
	constructor(object, domElement) {
		super();
		if (domElement === undefined)
			console.warn('OrbitControls: The second parameter "domElement" is now mandatory.');
		if (domElement === document)
			console.error(
				'OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'
			);
		this.object = object;
		this.domElement = domElement;
		this.domElement.style.touchAction = "none"; // disable touch scroll
		// Set to false to disable this control
		this.enabled = true;
		// "target" sets the location of focus, where the object orbits around
		this.target = new Vector3();
		// How far you can dolly in and out ( PerspectiveCamera only )
		this.minDistance = 0;
		this.maxDistance = Infinity;
		// How far you can zoom in and out ( OrthographicCamera only )
		this.minZoom = 0;
		this.maxZoom = Infinity;
		// How far you can orbit vertically, upper and lower limits.
		// Range is 0 to Math.PI radians.
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians
		// How far you can orbit horizontally, upper and lower limits.
		// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
		this.minAzimuthAngle = -Infinity; // radians
		this.maxAzimuthAngle = Infinity; // radians
		// Set to true to enable damping (inertia)
		// If damping is enabled, you must call controls.update() in your animation loop
		this.enableDamping = false;
		this.dampingFactor = 0.05;
		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
		// Set to false to disable zooming
		this.enableZoom = true;
		this.zoomSpeed = 1.0;
		// Set to false to disable rotating
		this.enableRotate = true;
		this.rotateSpeed = 1.0;
		// Set to false to disable panning
		this.enablePan = true;
		this.panSpeed = 1.0;
		this.screenSpacePanning = false; // if false, pan orthogonal to world-space direction camera.up
		this.keyPanSpeed = 7.0; // pixels moved per arrow key push
		// Set to true to automatically rotate around the target
		// If auto-rotate is enabled, you must call controls.update() in your animation loop
		this.autoRotate = false;
		this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60
		// The four arrow keys
		this.keys = {
			LEFT: "ArrowLeft",
			UP: "ArrowUp",
			RIGHT: "ArrowRight",
			BOTTOM: "ArrowDown"
		};
		// Mouse buttons
		this.mouseButtons = {
			LEFT: MOUSE.ROTATE,
			MIDDLE: MOUSE.DOLLY,
			RIGHT: MOUSE.PAN
		};
		// Touch fingers
		this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };
		// for reset
		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.zoom0 = this.object.zoom;
		// the target DOM element for key events
		this._domElementKeyEvents = null;
		//
		// public methods
		//
		// this method is exposed, but perhaps it would be better if we can make it private...
		const that = this;
		this.update = (function () {
			const offset = new Vector3();
			// so camera.up is the orbit axis
			const quat = new Quaternion().setFromUnitVectors(that.object.up, new Vector3(0, 1, 0));
			const quatInverse = quat.clone().invert();
			const lastPosition = new Vector3();
			const lastQuaternion = new Quaternion();
			const twoPI = 2 * Math.PI;
			return function update() {
				const position = that.object.position;
				offset.copy(position).subtract(that.target);
				// rotate offset to "y-axis-is-up" space
				offset.applyQuaternion(quat);
				// angle from z-axis around y-axis
				spherical.setFromVector3(offset);
				if (that.autoRotate && state === STATE.NONE) {
					rotateLeft(that.getAutoRotationAngle());
				}
				if (that.enableDamping) {
					spherical.theta += sphericalDelta.theta * that.dampingFactor;
					spherical.phi += sphericalDelta.phi * that.dampingFactor;
				} else {
					spherical.theta += sphericalDelta.theta;
					spherical.phi += sphericalDelta.phi;
				}
				// restrict theta to be between desired limits
				let min = that.minAzimuthAngle;
				let max = that.maxAzimuthAngle;
				if (isFinite(min) && isFinite(max)) {
					if (min < -Math.PI) min += twoPI;
					else if (min > Math.PI) min -= twoPI;
					if (max < -Math.PI) max += twoPI;
					else if (max > Math.PI) max -= twoPI;
					if (min <= max) {
						spherical.theta = Math.max(min, Math.min(max, spherical.theta));
					} else {
						spherical.theta =
							spherical.theta > (min + max) / 2
								? Math.max(min, spherical.theta)
								: Math.min(max, spherical.theta);
					}
				}
				// restrict phi to be between desired limits
				spherical.phi = Math.max(that.minPolarAngle, Math.min(that.maxPolarAngle, spherical.phi));
				spherical.makeSafe();
				spherical.radius *= scale;
				// restrict radius to be between desired limits
				spherical.radius = Math.max(that.minDistance, Math.min(that.maxDistance, spherical.radius));
				// move target to panned location
				if (that.enableDamping === true) {
					that.target.addScaledVector(panOffset, that.dampingFactor);
				} else {
					that.target.add(panOffset);
				}
				Vector3.fromSpherical(spherical, offset);
				// rotate offset back to "camera-up-vector-is-up" space
				offset.applyQuaternion(quatInverse);
				position.copy(that.target).add(offset);
				that.object.lookAt(that.target.x, that.target.y, that.target.z);
				if (that.enableDamping === true) {
					sphericalDelta.theta *= 1 - that.dampingFactor;
					sphericalDelta.phi *= 1 - that.dampingFactor;
					Vector3.multiplyByScalar(panOffset, 1 - that.dampingFactor, panOffset);
					// panOffset.multiplyScalar( 1 - this.dampingFactor );
				} else {
					sphericalDelta.set(0, 0, 0);
					panOffset.set(0, 0, 0);
				}
				scale = 1;
				// update condition is:
				// min(camera displacement, camera rotation in radians)^2 > EPS
				// using small-angle approximation cos(x/2) = 1 - x^2 / 8
				if (
					zoomChanged ||
					Vector3.distanceSquared(lastPosition, that.object.position) > EPS ||
					8 * (1 - lastQuaternion.dot(that.object.quaternion)) > EPS
				) {
					that.dispatchEvent(_changeEvent);
					//lastPosition.copy( this.object.position );
					Vector3.clone(that.object.position, lastPosition);
					Quaternion.clone(that.object.quaternion, lastQuaternion);
					//lastQuaternion.copy( this.object.quaternion );
					zoomChanged = false;
					return true;
				}
				return false;
			};
		})();
		this.init();
	}
	getPolarAngle() {
		return this.spherical.phi;
	}
	getAzimuthalAngle() {
		return this.spherical.theta;
	}
	getDistance() {
		return Vector3.distance(this.object.position, this.target);
	}
	listenToKeyEvents(domElement) {
		domElement.addEventListener("keydown", this.onKeyDown);
		this._domElementKeyEvents = domElement;
	}
	saveState() {
		Vector3.clone(this.target, this.target0);
		//this.target0.copy( this.target );
		Vector3.clone(this.object.position, this.position0);
		//this.position0.copy( this.object.position );
		this.zoom0 = this.object.zoom;
	}
	reset() {
		Vector3.clone(this.target0, this.target);
		//this.target.copy( this.target0 );
		Vector3.clone(this.position0, this.object.position);
		//this.object.position.copy( this.position0 );
		this.object.zoom = this.zoom0;
		this.object.updateProjectionMatrix();
		this.dispatchEvent(_changeEvent);
		this.update();
		state = STATE.NONE;
	}
	init() {
		const that = this;
		const panLeft = (function () {
			const v = new Vector3();
			return function panLeft(distance, objectMatrix) {
				v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix
				v.multiplyByScalar(-distance);
				panOffset.add(v);
			};
		})();
		const panUp = (function () {
			const panUpV = new Vector3();
			return function panUp(distance, objectMatrix) {
				if (that.screenSpacePanning === true) {
					panUpV.setFromMatrixColumn(objectMatrix, 1);
				} else {
					panUpV.setFromMatrixColumn(objectMatrix, 0);
					//panUpV.crossVectors( this.object.up, panUpV );
					Vector3.cross(that.object.up, panUpV, panUpV);
				}
				panUpV.multiplyByScalar(distance);
				panOffset.add(panUpV);
			};
		})();
		// deltaX and deltaY are in pixels; right and down are positive
		const pan = (function () {
			const offset = new Vector3();
			return function pan(deltaX, deltaY) {
				const element = that.domElement;
				if (that.object.isPerspectiveCamera) {
					// perspective
					const position = that.object.position;
					offset.copy(position).subtract(that.target);
					let targetDistance = offset.length();
					// half of the fov is center to top of screen
					targetDistance *= Math.tan(((that.object.fov / 2) * Math.PI) / 180.0);
					// we use only clientHeight here so aspect ratio does not distort speed
					panLeft((2 * deltaX * targetDistance) / element.clientHeight, that.object.modelMatrix);
					panUp((2 * deltaY * targetDistance) / element.clientHeight, that.object.modelMatrix);
				} else if (that.object.isOrthographicCamera) {
					// orthographic
					panLeft(
						(deltaX * (that.object.right - that.object.left)) / that.object.zoom / element.clientWidth,
						that.object.modelMatrix
					);
					panUp(
						(deltaY * (that.object.top - that.object.bottom)) / that.object.zoom / element.clientHeight,
						that.object.modelMatrix
					);
				} else {
					// camera neither orthographic nor perspective
					console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
					that.enablePan = false;
				}
			};
		})();
		const dollyOut = (dollyScale) => {
			if (this.object.isPerspectiveCamera) {
				scale /= dollyScale;
			} else if (this.object.isOrthographicCamera) {
				this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom * dollyScale));
				this.object.updateProjectionMatrix();
				zoomChanged = true;
			} else {
				console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
				this.enableZoom = false;
			}
		};
		const dollyIn = (dollyScale) => {
			if (this.object.isPerspectiveCamera) {
				scale *= dollyScale;
			} else if (this.object.isOrthographicCamera) {
				this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / dollyScale));
				this.object.updateProjectionMatrix();
				zoomChanged = true;
			} else {
				console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
				this.enableZoom = false;
			}
		};
		const handleMouseMoveRotate = (event) => {
			rotateEnd.set(event.clientX, event.clientY);
			Vector2.subtract(rotateEnd, rotateStart, rotateDelta);
			Vector2.multiplyByScalar(rotateDelta, this.rotateSpeed, rotateDelta);
			//rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( this.rotateSpeed );
			const element = this.domElement;
			rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height
			rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);
			Vector2.clone(rotateEnd, rotateStart);
			//rotateStart.copy( rotateEnd );
			this.update();
		};
		const handleMouseMoveDolly = (event) => {
			dollyEnd.set(event.clientX, event.clientY);
			Vector2.subtract(dollyEnd, dollyStart, dollyDelta);
			// dollyDelta.subVectors( dollyEnd, dollyStart );
			if (dollyDelta.y > 0) {
				dollyOut(getZoomScale());
			} else if (dollyDelta.y < 0) {
				dollyIn(getZoomScale());
			}
			Vector2.clone(dollyEnd, dollyStart);
			// dollyStart.copy( dollyEnd );
			this.update();
		};
		const handleMouseMovePan = (event) => {
			panEnd.set(event.clientX, event.clientY);
			Vector2.subtract(panEnd, panStart, panDelta);
			Vector2.multiplyByScalar(panDelta, this.panSpeed, panDelta);
			//panDelta.subVectors( panEnd, panStart ).multiplyScalar( this.panSpeed );
			pan(panDelta.x, panDelta.y);
			Vector2.clone(panEnd, panStart);
			//panStart.copy( panEnd );
			this.update();
		};
		const handleMouseWheel = (event) => {
			if (event.deltaY < 0) {
				dollyIn(getZoomScale());
			} else if (event.deltaY > 0) {
				dollyOut(getZoomScale());
			}
			this.update();
		};
		const handleKeyDown = (event) => {
			let needsUpdate = false;
			switch (event.code) {
				case this.keys.UP:
					pan(0, this.keyPanSpeed);
					needsUpdate = true;
					break;
				case this.keys.BOTTOM:
					pan(0, -this.keyPanSpeed);
					needsUpdate = true;
					break;
				case this.keys.LEFT:
					pan(this.keyPanSpeed, 0);
					needsUpdate = true;
					break;
				case this.keys.RIGHT:
					pan(-this.keyPanSpeed, 0);
					needsUpdate = true;
					break;
			}
			if (needsUpdate) {
				// prevent the browser from scrolling on cursor keys
				event.preventDefault();
				this.update();
			}
		};
		const handleTouchStartDollyPan = () => {
			if (this.enableZoom) handleTouchStartDolly();
			if (this.enablePan) handleTouchStartPan();
		};
		const handleTouchStartDollyRotate = () => {
			if (this.enableZoom) handleTouchStartDolly();
			if (this.enableRotate) handleTouchStartRotate();
		};
		const handleTouchMoveRotate = (event) => {
			if (pointers.length == 1) {
				rotateEnd.set(event.pageX, event.pageY);
			} else {
				const position = getSecondPointerPosition(event);
				const x = 0.5 * (event.pageX + position.x);
				const y = 0.5 * (event.pageY + position.y);
				rotateEnd.set(x, y);
			}
			Vector2.subtract(rotateEnd, rotateStart, rotateDelta);
			Vector2.multiplyByScalar(rotateDelta, this.rotateSpeed, rotateDelta);
			//rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( this.rotateSpeed );
			const element = this.domElement;
			rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height
			rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);
			Vector2.clone(rotateEnd, rotateStart);
			//rotateStart.copy( rotateEnd );
		};
		const handleTouchMovePan = (event) => {
			if (pointers.length === 1) {
				panEnd.set(event.pageX, event.pageY);
			} else {
				const position = getSecondPointerPosition(event);
				const x = 0.5 * (event.pageX + position.x);
				const y = 0.5 * (event.pageY + position.y);
				panEnd.set(x, y);
			}
			Vector2.subtract(panEnd, panStart, panDelta);
			Vector2.multiplyByScalar(panDelta, this.panSpeed, panDelta);
			//panDelta.subVectors( panEnd, panStart ).multiplyScalar( this.panSpeed );
			pan(panDelta.x, panDelta.y);
			Vector2.clone(panEnd, panStart);
			// panStart.copy( panEnd );
		};
		const handleTouchMoveDolly = (event) => {
			const position = getSecondPointerPosition(event);
			const dx = event.pageX - position.x;
			const dy = event.pageY - position.y;
			const distance = Math.sqrt(dx * dx + dy * dy);
			dollyEnd.set(0, distance);
			dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, this.zoomSpeed));
			dollyOut(dollyDelta.y);
			Vector2.clone(dollyEnd, dollyStart);
			//dollyStart.copy( dollyEnd );
		};
		const handleTouchMoveDollyPan = (event) => {
			if (this.enableZoom) handleTouchMoveDolly(event);
			if (this.enablePan) handleTouchMovePan(event);
		};
		const handleTouchMoveDollyRotate = (event) => {
			if (this.enableZoom) handleTouchMoveDolly(event);
			if (this.enableRotate) handleTouchMoveRotate(event);
		};
		//
		// event handlers - FSM: listen for events and reset state
		//
		this.onPointerDown = (event) => {
			if (this.enabled === false) return;
			if (pointers.length === 0) {
				this.domElement.setPointerCapture(event.pointerId);
				this.domElement.addEventListener("pointermove", this.onPointerMove);
				this.domElement.addEventListener("pointerup", this.onPointerUp);
			}
			//
			addPointer(event);
			if (event.pointerType === "touch") {
				onTouchStart(event);
			} else {
				onMouseDown(event);
			}
		};
		this.onPointerMove = (event) => {
			if (this.enabled === false) return;
			if (event.pointerType === "touch") {
				onTouchMove(event);
			} else {
				onMouseMove(event);
			}
		};
		this.onPointerUp = (event) => {
			removePointer(event);
			if (pointers.length === 0) {
				this.domElement.releasePointerCapture(event.pointerId);
				this.domElement.removeEventListener("pointermove", this.onPointerMove);
				this.domElement.removeEventListener("pointerup", this.onPointerUp);
			}
			this.dispatchEvent(_endEvent);
			state = STATE.NONE;
		};
		const onMouseDown = (event) => {
			let mouseAction;
			switch (event.button) {
				case 0:
					mouseAction = this.mouseButtons.LEFT;
					break;
				case 1:
					mouseAction = this.mouseButtons.MIDDLE;
					break;
				case 2:
					mouseAction = this.mouseButtons.RIGHT;
					break;
				default:
					mouseAction = -1;
			}
			switch (mouseAction) {
				case MOUSE.DOLLY:
					if (this.enableZoom === false) return;
					handleMouseDownDolly(event);
					state = STATE.DOLLY;
					break;
				case MOUSE.ROTATE:
					if (event.ctrlKey || event.metaKey || event.shiftKey) {
						if (this.enablePan === false) return;
						handleMouseDownPan(event);
						state = STATE.PAN;
					} else {
						if (this.enableRotate === false) return;
						handleMouseDownRotate(event);
						state = STATE.ROTATE;
					}
					break;
				case MOUSE.PAN:
					if (event.ctrlKey || event.metaKey || event.shiftKey) {
						if (this.enableRotate === false) return;
						handleMouseDownRotate(event);
						state = STATE.ROTATE;
					} else {
						if (this.enablePan === false) return;
						handleMouseDownPan(event);
						state = STATE.PAN;
					}
					break;
				default:
					state = STATE.NONE;
			}
			if (state !== STATE.NONE) {
				this.dispatchEvent(_startEvent);
			}
		};
		const onMouseMove = (event) => {
			switch (state) {
				case STATE.ROTATE:
					if (this.enableRotate === false) return;
					handleMouseMoveRotate(event);
					break;
				case STATE.DOLLY:
					if (this.enableZoom === false) return;
					handleMouseMoveDolly(event);
					break;
				case STATE.PAN:
					if (this.enablePan === false) return;
					handleMouseMovePan(event);
					break;
			}
		};
		this.onMouseWheel = (event) => {
			if (this.enabled === false || this.enableZoom === false || state !== STATE.NONE) return;
			event.preventDefault();
			this.dispatchEvent(_startEvent);
			handleMouseWheel(event);
			this.dispatchEvent(_endEvent);
		};
		this.onKeyDown = (event) => {
			if (this.enabled === false || this.enablePan === false) return;
			handleKeyDown(event);
		};
		const onTouchStart = (event) => {
			trackPointer(event);
			switch (pointers.length) {
				case 1:
					switch (this.touches.ONE) {
						case TOUCH.ROTATE:
							if (this.enableRotate === false) return;
							handleTouchStartRotate();
							state = STATE.TOUCH_ROTATE;
							break;
						case TOUCH.PAN:
							if (this.enablePan === false) return;
							handleTouchStartPan();
							state = STATE.TOUCH_PAN;
							break;
						default:
							state = STATE.NONE;
					}
					break;
				case 2:
					switch (this.touches.TWO) {
						case TOUCH.DOLLY_PAN:
							if (this.enableZoom === false && this.enablePan === false) return;
							handleTouchStartDollyPan();
							state = STATE.TOUCH_DOLLY_PAN;
							break;
						case TOUCH.DOLLY_ROTATE:
							if (this.enableZoom === false && this.enableRotate === false) return;
							handleTouchStartDollyRotate();
							state = STATE.TOUCH_DOLLY_ROTATE;
							break;
						default:
							state = STATE.NONE;
					}
					break;
				default:
					state = STATE.NONE;
			}
			if (state !== STATE.NONE) {
				this.dispatchEvent(_startEvent);
			}
		};
		const onTouchMove = (event) => {
			trackPointer(event);
			switch (state) {
				case STATE.TOUCH_ROTATE:
					if (this.enableRotate === false) return;
					handleTouchMoveRotate(event);
					this.update();
					break;
				case STATE.TOUCH_PAN:
					if (this.enablePan === false) return;
					handleTouchMovePan(event);
					this.update();
					break;
				case STATE.TOUCH_DOLLY_PAN:
					if (this.enableZoom === false && this.enablePan === false) return;
					handleTouchMoveDollyPan(event);
					this.update();
					break;
				case STATE.TOUCH_DOLLY_ROTATE:
					if (this.enableZoom === false && this.enableRotate === false) return;
					handleTouchMoveDollyRotate(event);
					this.update();
					break;
				default:
					state = STATE.NONE;
			}
		};
		this.onContextMenu = (event) => {
			if (this.enabled === false) return;
			event.preventDefault();
		};
		this.getAutoRotationAngle = () => {
			return ((2 * Math.PI) / 60 / 60) * this.autoRotateSpeed;
		};
		const getZoomScale = () => {
			return Math.pow(0.95, this.zoomSpeed);
		};
		this.domElement.addEventListener("contextmenu", this.onContextMenu);
		this.domElement.addEventListener("pointerdown", this.onPointerDown);
		this.domElement.addEventListener("pointercancel", onPointerCancel);
		this.domElement.addEventListener("wheel", this.onMouseWheel, {
			passive: false
		});
	}
	dispose() {
		this.domElement.removeEventListener("contextmenu", this.onContextMenu);
		this.domElement.removeEventListener("pointerdown", this.onPointerDown);
		this.domElement.removeEventListener("pointercancel", onPointerCancel);
		this.domElement.removeEventListener("wheel", this.onMouseWheel);
		this.domElement.removeEventListener("pointermove", this.onPointerMove);
		this.domElement.removeEventListener("pointerup", this.onPointerUp);
		if (this._domElementKeyEvents !== null) {
			this._domElementKeyEvents.removeEventListener("keydown", this.onKeyDown);
		}
		//this.dispatchEvent( { type: 'dispose' } ); // should this be added here?
	}
}
const STATE = {
	NONE: -1,
	ROTATE: 0,
	DOLLY: 1,
	PAN: 2,
	TOUCH_ROTATE: 3,
	TOUCH_PAN: 4,
	TOUCH_DOLLY_PAN: 5,
	TOUCH_DOLLY_ROTATE: 6
};
let state = STATE.NONE;
const EPS = 0.000001;
// current position in spherical coordinates
const spherical = new Spherical();
const sphericalDelta = new Spherical();
let scale = 1;
const panOffset = new Vector3();
let zoomChanged = false;
const rotateStart = new Vector2();
const rotateEnd = new Vector2();
const rotateDelta = new Vector2();
const panStart = new Vector2();
const panEnd = new Vector2();
const panDelta = new Vector2();
const dollyStart = new Vector2();
const dollyEnd = new Vector2();
const dollyDelta = new Vector2();
const pointers = [];
const pointerPositions = {};
var MOUSE;
(function (MOUSE) {
	MOUSE[(MOUSE["LEFT"] = 0)] = "LEFT";
	MOUSE[(MOUSE["MIDDLE"] = 1)] = "MIDDLE";
	MOUSE[(MOUSE["RIGHT"] = 2)] = "RIGHT";
	MOUSE[(MOUSE["ROTATE"] = 0)] = "ROTATE";
	MOUSE[(MOUSE["DOLLY"] = 1)] = "DOLLY";
	MOUSE[(MOUSE["PAN"] = 2)] = "PAN";
})(MOUSE || (MOUSE = {}));
var TOUCH;
(function (TOUCH) {
	TOUCH[(TOUCH["ROTATE"] = 0)] = "ROTATE";
	TOUCH[(TOUCH["PAN"] = 1)] = "PAN";
	TOUCH[(TOUCH["DOLLY_PAN"] = 2)] = "DOLLY_PAN";
	TOUCH[(TOUCH["DOLLY_ROTATE"] = 3)] = "DOLLY_ROTATE";
})(TOUCH || (TOUCH = {}));
function rotateLeft(angle) {
	sphericalDelta.theta -= angle;
}
function rotateUp(angle) {
	sphericalDelta.phi -= angle;
}
function addPointer(event) {
	pointers.push(event);
}
function removePointer(event) {
	delete pointerPositions[event.pointerId];
	for (let i = 0; i < pointers.length; i++) {
		if (pointers[i].pointerId == event.pointerId) {
			pointers.splice(i, 1);
			return;
		}
	}
}
function trackPointer(event) {
	let position = pointerPositions[event.pointerId];
	if (position === undefined) {
		position = new Vector2();
		pointerPositions[event.pointerId] = position;
	}
	position.set(event.pageX, event.pageY);
}
function getSecondPointerPosition(event) {
	const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];
	return pointerPositions[pointer.pointerId];
}
function handleMouseDownRotate(event) {
	rotateStart.set(event.clientX, event.clientY);
}
function handleMouseDownDolly(event) {
	dollyStart.set(event.clientX, event.clientY);
}
function handleMouseDownPan(event) {
	panStart.set(event.clientX, event.clientY);
}
function onPointerCancel(event) {
	removePointer(event);
}
function handleTouchStartRotate() {
	if (pointers.length === 1) {
		rotateStart.set(pointers[0].pageX, pointers[0].pageY);
	} else {
		const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
		const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
		rotateStart.set(x, y);
	}
}
function handleTouchStartPan() {
	if (pointers.length === 1) {
		panStart.set(pointers[0].pageX, pointers[0].pageY);
	} else {
		const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
		const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
		panStart.set(x, y);
	}
}
function handleTouchStartDolly() {
	const dx = pointers[0].pageX - pointers[1].pageX;
	const dy = pointers[0].pageY - pointers[1].pageY;
	const distance = Math.sqrt(dx * dx + dy * dy);
	dollyStart.set(0, distance);
}

export {
	AddressMode,
	Attachment,
	Attribute,
	Axes,
	BindGroup,
	BindGroupEntity,
	BlendFactor,
	BlendOperation,
	BloomPostEffect,
	BoxGeometry,
	Buffer,
	BufferUsage,
	Color,
	ColorWriteFlags,
	CompareFunction,
	Context,
	CubeTextureLoader,
	CullMode,
	DirectionalLight,
	DrawCommand,
	FilterMode,
	FrontFace,
	IndexFormat,
	InputStepMode,
	Mesh,
	OrbitControl,
	PbrMat,
	PerspectiveCamera,
	PhongMaterial,
	PlaneGeometry,
	PointLight,
	PrimitiveTopology,
	RenderState,
	Sampler,
	Scene,
	ShaderStage,
	SkyBox,
	SphereGeometry,
	SpotLight,
	StencilOperation,
	StorageTextureAccess,
	Texture,
	TextureAspect,
	TextureDimension,
	TextureFormat,
	TextureSampleType,
	TextureUsage,
	TextureViewDimension,
	TorusKnotGeometry,
	Vector3,
	VertexFormat,
	loadGLTF,
	loadTexture
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL1dlYkdQVUNvbnN0YW50LnRzIiwiLi4vc3JjL3JlbmRlci9CdWZmZXIudHMiLCIuLi9zcmMvcmVuZGVyL0RyYXdDb21tYW5kLnRzIiwiLi4vc3JjL2NvcmUvV2ViR1BVVHlwZXMudHMiLCIuLi9zcmMvdXRpbHMvTWlwbWFwR2VuZXJhdG9yLnRzIiwiLi4vc3JjL3JlbmRlci9QaXBlbGluZUxheW91dC50cyIsIi4uL3NyYy9yZW5kZXIvUGlwZWxpbmUudHMiLCIuLi9zcmMvdXRpbHMvZGVmYXVsdFZhbHVlLnRzIiwiLi4vc3JjL3V0aWxzL2RlZmluZWQudHMiLCIuLi9ub2RlX21vZHVsZXMvbWVyc2VubmUtdHdpc3Rlci9zcmMvbWVyc2VubmUtdHdpc3Rlci5qcyIsIi4uL3NyYy9tYXRoL01hdGgudHMiLCIuLi9zcmMvbWF0aC9Db2xvci50cyIsIi4uL3NyYy9tYXRoL1ZlY3RvcjIudHMiLCIuLi9zcmMvbWF0aC9NYXRyaXgyLnRzIiwiLi4vc3JjL21hdGgvVmVjdG9yMy50cyIsIi4uL3NyYy9tYXRoL01hdHJpeDMudHMiLCIuLi9zcmMvbWF0aC9WZWN0b3I0LnRzIiwiLi4vc3JjL21hdGgvTWF0cml4NC50cyIsIi4uL3NyYy9yZW5kZXIvVW5pZm9ybXMudHMiLCIuLi9zcmMvcmVuZGVyL0JpbmRHcm91cEVudGl0eS50cyIsIi4uL3NyYy9yZW5kZXIvQmluZEdyb3VwTGF5b3V0RW50cnkudHMiLCIuLi9zcmMvcmVuZGVyL0JpbmRHcm91cExheW91dC50cyIsIi4uL3NyYy9yZW5kZXIvQmluZEdyb3VwLnRzIiwiLi4vc3JjL3JlbmRlci9TaGFkZXJEYXRhLnRzIiwiLi4vc3JjL3JlbmRlci9Vbmlmb3JtQnVmZmVyLnRzIiwiLi4vc3JjL2NvcmUvTGlnaHRNYW5nZXIudHMiLCIuLi9zcmMvcmVuZGVyL0NvbnRleHQudHMiLCIuLi9zcmMvcmVuZGVyL1RleHR1cmUudHMiLCIuLi9zcmMvcmVuZGVyL1NhbXBsZXIudHMiLCIuLi9zcmMvcmVuZGVyL1JlbmRlclN0YXRlLnRzIiwiLi4vc3JjL3JlbmRlci9BdHRhY2htZW50LnRzIiwiLi4vc3JjL3JlbmRlci9BdHRyaWJ1dGUudHMiLCIuLi9zcmMvY29yZS9JbnRlcnNlY3QudHMiLCIuLi9zcmMvbWF0aC9RdWF0ZXJuaW9uLnRzIiwiLi4vc3JjL2NvcmUvUmVuZGVyT2JqZWN0LnRzIiwiLi4vc3JjL21lc2gvTWVzaC50cyIsIi4uL3NyYy9jb3JlL0JvdW5kaW5nU3BoZXJlLnRzIiwiLi4vc3JjL3JlbmRlci9WZXJ0ZXh0QnVmZmVyLnRzIiwiLi4vc3JjL3JlbmRlci9BdHRyaWJ1dGVzLnRzIiwiLi4vc3JjL3JlbmRlci9JbmRleEJ1ZmZlci50cyIsIi4uL3NyYy91dGlscy9jb21iaW5lLnRzIiwiLi4vc3JjL2dlb21ldHJ5L0dlb21ldHJ5LnRzIiwiLi4vc3JjL3NoYWRlci9XZ3NsUHJlcHJvY2Vzc29yLnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9saWdodC9saWdodC50cyIsIi4uL3NyYy9zaGFkZXIvc2hhZGVyQ2h1bmsvbGlnaHQvbGlnaHRDb21tb24udHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL3Bici9icmRmLnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9wYnIvcGJyRnVuY3Rpb24udHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL3Bici9wYnJTdHJ1Y3QudHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL3Bici9wYnJUZXh0dXJlLnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9wYnIvcGJyVXRpbHMudHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL3Bob25nL3Bob25nRnVuY3Rpb24udHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL3Bob25nL3Bob25nVXRpbHMudHMiLCIuLi9zcmMvc2hhZGVyL3NoYWRlckNodW5rL2Vudmlyb25tZW50L2Vudmlyb25tZW50LnRzIiwiLi4vc3JjL3NoYWRlci9zaGFkZXJDaHVuay9waG9uZy9ibGlubl9waG9uZy50cyIsIi4uL3NyYy9zaGFkZXIvc2hhZGVyQ2h1bmsvbm9ybWFsL2dldE5vcm1hbC50cyIsIi4uL3NyYy9zaGFkZXIvc2hhZGVyQ2h1bmsvU2hhZGVyQ2h1bmsudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL3Bob25nVmVydC50cyIsIi4uL3NyYy9zaGFkZXIvbWF0ZXJpYWwvcGhvbmdGcmFnLnRzIiwiLi4vc3JjL3NoYWRlci9tYXRlcmlhbC9jb2xvckZyYWcudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL2NvbG9yVmVydC50cyIsIi4uL3NyYy9zaGFkZXIvbWF0ZXJpYWwvcGJyRnJhZy50cyIsIi4uL3NyYy9zaGFkZXIvbWF0ZXJpYWwvcGJyVmVydC50cyIsIi4uL3NyYy9zaGFkZXIvbWF0ZXJpYWwvc2t5Qm94RnJhZy50cyIsIi4uL3NyYy9zaGFkZXIvbWF0ZXJpYWwvc2t5Qm94VmVydC50cyIsIi4uL3NyYy9zaGFkZXIvbWF0ZXJpYWwvcXVhZEZyYWcudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL3F1YWRWZXJ0LnRzIiwiLi4vc3JjL3NoYWRlci9tYXRlcmlhbC9wYnJfdnMudHMiLCIuLi9zcmMvc2hhZGVyL21hdGVyaWFsL3Bicl9mcy50cyIsIi4uL3NyYy9zaGFkZXIvcG9zdFByb2Nlc3MvYmxvb20vQmx1ci50cyIsIi4uL3NyYy9zaGFkZXIvcG9zdFByb2Nlc3MvYmxvb20vTHVtaW5vc2l0eUhpZ2gudHMiLCIuLi9zcmMvc2hhZGVyL3Bvc3RQcm9jZXNzL2JsZW5kL2JsZW5kRnJhZy50cyIsIi4uL3NyYy9zaGFkZXIvU2hhZGVycy50cyIsIi4uL3NyYy9zaGFkZXIvU2hhZGVyU291cmNlLnRzIiwiLi4vc3JjL21hdGVyaWFsL01hdGVyaWFsLnRzIiwiLi4vc3JjL21hdGVyaWFsL0NvbG9yTWF0ZXJpYWwudHMiLCIuLi9zcmMvbWVzaC9BeGVzLnRzIiwiLi4vc3JjL2dlb21ldHJ5L1NreUJveEdlb21ldHJ5LnRzIiwiLi4vc3JjL2xvYWRlci9DdWJlVGV4dHVyZUxvYWRlci50cyIsIi4uL3NyYy9tYXRlcmlhbC9Ta3lCb3hNYXRlcmlhbC50cyIsIi4uL3NyYy9tZXNoL1NreUJveC50cyIsIi4uL3NyYy91dGlscy9HZW9tZXRyeVV0aWxzLnRzIiwiLi4vc3JjL2dlb21ldHJ5L1NwaGVyZUdlb21ldHJ5LnRzIiwiLi4vc3JjL2dlb21ldHJ5L0JveEdlb21ldHJ5LnRzIiwiLi4vc3JjL2dlb21ldHJ5L1RvcnVzS25vdEdlb21ldHJ5LnRzIiwiLi4vc3JjL2dlb21ldHJ5L1BsYW5lR2VvbWV0cnkudHMiLCIuLi9zcmMvbWF0ZXJpYWwvUGhvbmdNYXRlcmlhbC50cyIsIi4uL3NyYy91dGlscy9kZXN0cm95T2JqZWN0LnRzIiwiLi4vc3JjL2NvcmUvVGV4dHVyZUNhY2hlLnRzIiwiLi4vc3JjL21hdGVyaWFsL1Bick1hdC50cyIsIi4uL3NyYy9jb3JlL0V2ZW50RGlzcGF0Y2hlci50cyIsIi4uL3NyYy9jb3JlL1JlbmRlclF1ZXVlLnRzIiwiLi4vc3JjL2NvcmUvRnJhbWVTdGF0ZS50cyIsIi4uL3NyYy91dGlscy9jcmVhdGVHdWlkLnRzIiwiLi4vc3JjL2NvcmUvUHJpbWl0aXZlTWFuZ2VyLnRzIiwiLi4vc3JjL3Bhc3MvUGFzcy50cyIsIi4uL3NyYy9yZW5kZXIvUmVuZGVyVGFyZ2V0LnRzIiwiLi4vc3JjL3Bhc3MvQmFzaWNQYXNzLnRzIiwiLi4vc3JjL3Bhc3MvU2hhZG93UGFzcy50cyIsIi4uL3NyYy91dGlscy91bmlmb3JtVXRpbHMudHMiLCIuLi9zcmMvbWF0ZXJpYWwvU2hhZGVyTWF0ZXJpYWwudHMiLCIuLi9zcmMvcG9zdC1wcm9jZXNzL1Jlc29sdmVGcmFtZS50cyIsIi4uL3NyYy9wb3N0LXByb2Nlc3MvUG9zdEVmZmVjdENvbGxlY3Rpb24udHMiLCIuLi9zcmMvcmVuZGVycGlwZWxpbmUvRm9yd2FyZFJlbmRlckxpbmUudHMiLCIuLi9zcmMvdXRpbHMvdXRpbHMudHMiLCIuLi9zcmMvU2NlbmUudHMiLCIuLi9zcmMvcG9zdC1wcm9jZXNzL1Bvc3RFZmZlY3QudHMiLCIuLi9zcmMvcG9zdC1wcm9jZXNzL0Jsb29tUG9zdEVmZmVjdC50cyIsIi4uL3NyYy9tYXRoL1BsYW5lLnRzIiwiLi4vc3JjL2NvcmUvQ3VsbGluZ1ZvbHVtZS50cyIsIi4uL3NyYy9jYW1lcmEvQ2FtZXJhLnRzIiwiLi4vc3JjL2NhbWVyYS9QZXJzcGVjdGl2ZUNhbWVyYS50cyIsIi4uL3NyYy9saWdodC9MaWdodC50cyIsIi4uL3NyYy9saWdodC9TcG90TGlnaHQudHMiLCIuLi9zcmMvbGlnaHQvc2hhZG93cy9CYXNlU2hhZG93LnRzIiwiLi4vc3JjL2xpZ2h0L3NoYWRvd3MvUG9pbnRMaWdodFNoYWRvdy50cyIsIi4uL3NyYy9saWdodC9Qb2ludExpZ2h0LnRzIiwiLi4vc3JjL2NhbWVyYS9PcnRob2dyYXBoaWNDYW1lcmEudHMiLCIuLi9zcmMvbGlnaHQvc2hhZG93cy9EaXJlY3Rpb25hbExpZ2h0U2hhZG93LnRzIiwiLi4vc3JjL2xpZ2h0L0RpcmVjdGlvbmFsTGlnaHQudHMiLCIuLi9zcmMvdXRpbHMvZ2x0ZlV0aWxzLnRzIiwiLi4vc3JjL2xvYWRlci9HTFRGTG9hZGVyLnRzIiwiLi4vc3JjL21hdGgvU3BoZXJpY2FsLnRzIiwiLi4vc3JjL2NvbnRyb2wvT3JiaXRDb250cm9sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9leHBvcnRcclxuZXhwb3J0IGVudW0gUHJlZGVmaW5lZENvbG9yU3BhY2Uge1xyXG4gIFNSR0IgPSBcInNyZ2JcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L2V4cG9ydFxyXG5leHBvcnQgZW51bSBQb3dlclByZWZlcmVuY2Uge1xyXG4gIExvd1Bvd2VyID0gXCJsb3ctcG93ZXJcIixcclxuICBIaWdoUGVyZm9ybWFuY2UgPSBcImhpZ2gtcGVyZm9ybWFuY2VcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBGZWF0dXJlTmFtZSB7XHJcbiAgRGVwdGhDbGlwQ29udHJvbCA9IFwiZGVwdGgtY2xpcC1jb250cm9sXCIsXHJcbiAgRGVwdGgyNFVub3JtU3RlbmNpbDggPSBcImRlcHRoMjR1bm9ybS1zdGVuY2lsOFwiLFxyXG4gIERlcHRoMzJGbG9hdFN0ZW5jaWw4ID0gXCJkZXB0aDMyZmxvYXQtc3RlbmNpbDhcIixcclxuICBUZXh0dXJlQ29tcHJlc3Npb25CQyA9IFwidGV4dHVyZS1jb21wcmVzc2lvbi1iY1wiLFxyXG4gIFRleHR1cmVDb21wcmVzc2lvbkVUQzIgPSBcInRleHR1cmUtY29tcHJlc3Npb24tZXRjMlwiLFxyXG4gIFRleHR1cmVDb21wcmVzc2lvbkFTVEMgPSBcInRleHR1cmUtY29tcHJlc3Npb24tYXN0Y1wiLFxyXG4gIFRpbWVzdGFtcFF1ZXJ5ID0gXCJ0aW1lc3RhbXAtcXVlcnlcIixcclxuICBJbmRpcmVjdEZpcnN0SW5zdGFuY2UgPSBcImluZGlyZWN0LWZpcnN0LWluc3RhbmNlXCIsXHJcbiAgU2hhZGVyRjE2ID0gXCJzaGFkZXItZjE2XCIsXHJcbiAgQkdSQThVbm9ybVN0b3JhZ2UgPSBcImJncmE4dW5vcm0tc3RvcmFnZVwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEJ1ZmZlclVzYWdlIHtcclxuICBNYXBSZWFkID0gMSxcclxuICBNYXBXcml0ZSA9IDIsXHJcbiAgQ29weVNyYyA9IDQsXHJcbiAgQ29weURzdCA9IDgsXHJcbiAgSW5kZXggPSAxNixcclxuICBWZXJ0ZXggPSAzMixcclxuICBVbmlmb3JtID0gNjQsXHJcbiAgU3RvcmFnZSA9IDEyOCxcclxuICBJbmRpcmVjdCA9IDI1NixcclxuICBRdWVyeVJlc29sdmUgPSA1MTIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gTWFwTW9kZSB7XHJcbiAgUmVhZCA9IDEsXHJcbiAgV3JpdGUgPSAyLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFRleHR1cmVEaW1lbnNpb24ge1xyXG4gIEUxZCA9IFwiMWRcIixcclxuICBFMmQgPSBcIjJkXCIsXHJcbiAgRTNkID0gXCIzZFwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFRleHR1cmVVc2FnZSB7XHJcbiAgQ29weVNyYyA9IDEsXHJcbiAgQ29weURzdCA9IDIsXHJcbiAgVGV4dHVyZUJpbmRpbmcgPSA0LFxyXG4gIFN0b3JhZ2VCaW5kaW5nID0gOCxcclxuICBSZW5kZXJBdHRhY2htZW50ID0gMTYsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gVGV4dHVyZVZpZXdEaW1lbnNpb24ge1xyXG4gIEUxZCA9IFwiMWRcIixcclxuICBFMmQgPSBcIjJkXCIsXHJcbiAgRTJkQXJyYXkgPSBcIjJkLWFycmF5XCIsXHJcbiAgQ3ViZSA9IFwiY3ViZVwiLFxyXG4gIEN1YmVBcnJheSA9IFwiY3ViZS1hcnJheVwiLFxyXG4gIEUzZCA9IFwiM2RcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBUZXh0dXJlQXNwZWN0IHtcclxuICBBbGwgPSBcImFsbFwiLFxyXG4gIFN0ZW5jaWxPbmx5ID0gXCJzdGVuY2lsLW9ubHlcIixcclxuICBEZXB0aE9ubHkgPSBcImRlcHRoLW9ubHlcIixcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbW1lbnRzIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dmeC1ycy93Z3B1L2Jsb2IvbWFzdGVyL3dncHUtdHlwZXMvc3JjL2xpYi5yc1xyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBlbnVtIFRleHR1cmVGb3JtYXQge1xyXG4gIC8vIDgtYml0IGZvcm1hdHNcclxuICBSOFVub3JtID0gXCJyOHVub3JtXCIsIC8vIFJlZCBjaGFubmVsIG9ubHkuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFswLCAyNTVdIGNvbnZlcnRlZCB0by9mcm9tIGZsb2F0IFswLCAxXSBpbiBzaGFkZXIuXHJcbiAgUjhTbm9ybSA9IFwicjhzbm9ybVwiLCAvLyBSZWQgY2hhbm5lbCBvbmx5LiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBbLTEyNywgMTI3XSBjb252ZXJ0ZWQgdG8vZnJvbSBmbG9hdCBbLTEsIDFdIGluIHNoYWRlci5cclxuICBSOFVpbnQgPSBcInI4dWludFwiLCAvLyBSZWQgY2hhbm5lbCBvbmx5LiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcbiAgUjhTaW50ID0gXCJyOHNpbnRcIiwgLy8gUmVkIGNoYW5uZWwgb25seS4gOCBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gU2lnbmVkIGluIHNoYWRlci5cclxuXHJcbiAgLy8gMTYtYml0IGZvcm1hdHNcclxuICBSMTZVaW50ID0gXCJyMTZ1aW50XCIsIC8vIFJlZCBjaGFubmVsIG9ubHkuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcbiAgUjE2U2ludCA9IFwicjE2c2ludFwiLCAvLyBSZWQgY2hhbm5lbCBvbmx5LiAxNiBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gU2lnbmVkIGluIHNoYWRlci5cclxuICBSMTZGbG9hdCA9IFwicjE2ZmxvYXRcIiwgLy8gUmVkIGNoYW5uZWwgb25seS4gMTYgYml0IGZsb2F0IHBlciBjaGFubmVsLiBGbG9hdCBpbiBzaGFkZXIuXHJcbiAgUkc4VW5vcm0gPSBcInJnOHVub3JtXCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFswLCAyNTVdIGNvbnZlcnRlZCB0by9mcm9tIGZsb2F0IFswLCAxXSBpbiBzaGFkZXIuXHJcbiAgUkc4U25vcm0gPSBcInJnOHNub3JtXCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFstMTI3LCAxMjddIGNvbnZlcnRlZCB0by9mcm9tIGZsb2F0IFstMSwgMV0gaW4gc2hhZGVyLlxyXG4gIFJHOFVpbnQgPSBcInJnOHVpbnRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gOCBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gVW5zaWduZWQgaW4gc2hhZGVyLlxyXG4gIFJHOFNpbnQgPSBcInJnOHNpbnRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gOCBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gU2lnbmVkIGluIHNoYWRlci5cclxuXHJcbiAgLy8gMzItYml0IGZvcm1hdHNcclxuICBSMzJVaW50ID0gXCJyMzJ1aW50XCIsIC8vIFJlZCBjaGFubmVsIG9ubHkuIDMyIGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcbiAgUjMyU2ludCA9IFwicjMyc2ludFwiLCAvLyBSZWQgY2hhbm5lbCBvbmx5LiAzMiBiaXQgaW50ZWdlciBwZXIgY2hhbm5lbC4gU2lnbmVkIGluIHNoYWRlci5cclxuICBSMzJGbG9hdCA9IFwicjMyZmxvYXRcIiwgLy8gUmVkIGNoYW5uZWwgb25seS4gMzIgYml0IGZsb2F0IHBlciBjaGFubmVsLiBGbG9hdCBpbiBzaGFkZXIuXHJcbiAgUkcxNlVpbnQgPSBcInJnMTZ1aW50XCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcbiAgUkcxNlNpbnQgPSBcInJnMTZzaW50XCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBTaWduZWQgaW4gc2hhZGVyLlxyXG4gIFJHMTZGbG9hdCA9IFwicmcxNmZsb2F0XCIsIC8vIFJlZCBhbmQgZ3JlZW4gY2hhbm5lbHMuIDE2IGJpdCBmbG9hdCBwZXIgY2hhbm5lbC4gRmxvYXQgaW4gc2hhZGVyLlxyXG4gIFJHQkE4VW5vcm0gPSBcInJnYmE4dW5vcm1cIiwgLy8gUmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzLiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBbMCwgMjU1XSBjb252ZXJ0ZWQgdG8vZnJvbSBmbG9hdCBbMCwgMV0gaW4gc2hhZGVyLlxyXG4gIFJHQkE4VW5vcm1TUkdCID0gXCJyZ2JhOHVub3JtLXNyZ2JcIiwgLy8gUmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzLiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBTcmdiLWNvbG9yIFswLCAyNTVdIGNvbnZlcnRlZCB0by9mcm9tIGxpbmVhci1jb2xvciBmbG9hdCBbMCwgMV0gaW4gc2hhZGVyLlxyXG4gIFJHQkE4U25vcm0gPSBcInJnYmE4c25vcm1cIiwgLy8gUmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzLiA4IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBbLTEyNywgMTI3XSBjb252ZXJ0ZWQgdG8vZnJvbSBmbG9hdCBbLTEsIDFdIGluIHNoYWRlci5cclxuICBSR0JBOFVpbnQgPSBcInJnYmE4dWludFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFVuc2lnbmVkIGluIHNoYWRlci5cclxuICBSR0JBOFNpbnQgPSBcInJnYmE4c2ludFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFNpZ25lZCBpbiBzaGFkZXIuXHJcbiAgQkdSQThVbm9ybSA9IFwiYmdyYTh1bm9ybVwiLCAvLyBCbHVlLCBncmVlbiwgcmVkLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFswLCAyNTVdIGNvbnZlcnRlZCB0by9mcm9tIGZsb2F0IFswLCAxXSBpbiBzaGFkZXIuXHJcbiAgQkdSQThVbm9ybVNSR0IgPSBcImJncmE4dW5vcm0tc3JnYlwiLCAvLyBCbHVlLCBncmVlbiwgcmVkLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDggYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFNyZ2ItY29sb3IgWzAsIDI1NV0gY29udmVydGVkIHRvL2Zyb20gbGluZWFyLWNvbG9yIGZsb2F0IFswLCAxXSBpbiBzaGFkZXIuXHJcbiAgLy8gUGFja2VkIDMyLWJpdCBmb3JtYXRzXHJcbiAgUkdCOUU1VUZsb2F0ID0gXCJyZ2I5ZTV1ZmxvYXRcIiwgLy8gUGFja2VkIHVuc2lnbmVkIGZsb2F0IHdpdGggOSBiaXRzIG1hbnRpc2EgZm9yIGVhY2ggUkdCIGNvbXBvbmVudCwgdGhlbiBhIGNvbW1vbiA1IGJpdHMgZXhwb25lbnRcclxuICBSR0IxMEEyVW5vcm0gPSBcInJnYjEwYTJ1bm9ybVwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDEwIGJpdCBpbnRlZ2VyIGZvciBSR0IgY2hhbm5lbHMsIDIgYml0IGludGVnZXIgZm9yIGFscGhhIGNoYW5uZWwuIFswLCAxMDIzXSAoWzAsIDNdIGZvciBhbHBoYSkgY29udmVydGVkIHRvL2Zyb20gZmxvYXQgWzAsIDFdIGluIHNoYWRlci5cclxuICBSRzExQjEwVUZsb2F0ID0gXCJyZzExYjEwdWZsb2F0XCIsIC8vIFJlZCwgZ3JlZW4sIGFuZCBibHVlIGNoYW5uZWxzLiAxMSBiaXQgZmxvYXQgd2l0aCBubyBzaWduIGJpdCBmb3IgUkcgY2hhbm5lbHMuIDEwIGJpdCBmbG9hdCB3aXRoIG5vIHNpZ24gYml0IGZvciBibHVlIGNoYW5uZWwuIEZsb2F0IGluIHNoYWRlci5cclxuXHJcbiAgLy8gNjQtYml0IGZvcm1hdHNcclxuICBSRzMyVWludCA9IFwicmczMnVpbnRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gMzIgYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFVuc2lnbmVkIGluIHNoYWRlci5cclxuICBSRzMyU2ludCA9IFwicmczMnNpbnRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gMzIgYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFNpZ25lZCBpbiBzaGFkZXIuXHJcbiAgUkczMkZsb2F0ID0gXCJyZzMyZmxvYXRcIiwgLy8gUmVkIGFuZCBncmVlbiBjaGFubmVscy4gMzIgYml0IGZsb2F0IHBlciBjaGFubmVsLiBGbG9hdCBpbiBzaGFkZXIuXHJcbiAgUkdCQTE2VWludCA9IFwicmdiYTE2dWludFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBVbnNpZ25lZCBpbiBzaGFkZXIuXHJcbiAgUkdCQTE2U2ludCA9IFwicmdiYTE2c2ludFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDE2IGJpdCBpbnRlZ2VyIHBlciBjaGFubmVsLiBTaWduZWQgaW4gc2hhZGVyLlxyXG4gIFJHQkExNkZsb2F0ID0gXCJyZ2JhMTZmbG9hdFwiLCAvLyBSZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMuIDE2IGJpdCBmbG9hdCBwZXIgY2hhbm5lbC4gRmxvYXQgaW4gc2hhZGVyLlxyXG5cclxuICAvLyAxMjgtYml0IGZvcm1hdHNcclxuICBSR0JBMzJVaW50ID0gXCJyZ2JhMzJ1aW50XCIsIC8vIFJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscy4gMzIgYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFVuc2lnbmVkIGluIHNoYWRlci5cclxuICBSR0JBMzJTaW50ID0gXCJyZ2JhMzJzaW50XCIsIC8vIFJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscy4gMzIgYml0IGludGVnZXIgcGVyIGNoYW5uZWwuIFNpZ25lZCBpbiBzaGFkZXIuXHJcbiAgUkdCQTMyRmxvYXQgPSBcInJnYmEzMmZsb2F0XCIsIC8vIFJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscy4gMzIgYml0IGZsb2F0IHBlciBjaGFubmVsLiBGbG9hdCBpbiBzaGFkZXIuXHJcblxyXG4gIC8vIERlcHRoIGFuZCBzdGVuY2lsIGZvcm1hdHNcclxuICBTdGVuY2lsOCA9IFwic3RlbmNpbDhcIixcclxuICBEZXB0aDE2VW5vcm0gPSBcImRlcHRoMTZ1bm9ybVwiLFxyXG4gIERlcHRoMjRQbHVzID0gXCJkZXB0aDI0cGx1c1wiLCAvLyBTcGVjaWFsIGRlcHRoIGZvcm1hdCB3aXRoIGF0IGxlYXN0IDI0IGJpdCBpbnRlZ2VyIGRlcHRoLlxyXG4gIERlcHRoMjRQbHVzU3RlbmNpbDggPSBcImRlcHRoMjRwbHVzLXN0ZW5jaWw4XCIsIC8vIFNwZWNpYWwgZGVwdGgvc3RlbmNpbCBmb3JtYXQgd2l0aCBhdCBsZWFzdCAyNCBiaXQgaW50ZWdlciBkZXB0aCBhbmQgOCBiaXRzIGludGVnZXIgc3RlbmNpbC5cclxuICBEZXB0aDMyRmxvYXQgPSBcImRlcHRoMzJmbG9hdFwiLCAvLyBTcGVjaWFsIGRlcHRoIGZvcm1hdCB3aXRoIDMyIGJpdCBmbG9hdGluZyBwb2ludCBkZXB0aC5cclxuXHJcbiAgLy8gQkMgY29tcHJlc3NlZCBmb3JtYXRzIHVzYWJsZSBpZiBcInRleHR1cmUtY29tcHJlc3Npb24tYmNcIiBpcyBib3RoXHJcbiAgLy8gc3VwcG9ydGVkIGJ5IHRoZSBkZXZpY2UvdXNlciBhZ2VudCBhbmQgZW5hYmxlZCBpbiByZXF1ZXN0RGV2aWNlLlxyXG4gIEJDMVJHQkFVbm9ybSA9IFwiYmMxLXJnYmEtdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gNCBjb2xvciArIGFscGhhIHBhbGxldC4gNSBiaXQgUiArIDYgYml0IEcgKyA1IGJpdCBCICsgMSBiaXQgYWxwaGEuIEFsc28ga25vd24gYXMgRFhUMS5cclxuICBCQzFSR0JBVW5vcm1TUkdCID0gXCJiYzEtcmdiYS11bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDggYnl0ZXMgcGVyIGJsb2NrICg0IGJpdC9weCkuIDQgY29sb3IgKyBhbHBoYSBwYWxsZXQuIDUgYml0IFIgKyA2IGJpdCBHICsgNSBiaXQgQiArIDEgYml0IGFscGhhLiBBbHNvIGtub3duIGFzIERYVDEuXHJcbiAgQkMyUkdCQVVub3JtID0gXCJiYzItcmdiYS11bm9ybVwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDggYml0L3B4KS4gNCBjb2xvciBwYWxsZXQuIDUgYml0IFIgKyA2IGJpdCBHICsgNSBiaXQgQiArIDQgYml0IGFscGhhLiBBbHNvIGtub3duIGFzIERYVDMuXHJcbiAgQkMyUkdCQVVub3JtU1JHQiA9IFwiYmMyLXJnYmEtdW5vcm0tc3JnYlwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDggYml0L3B4KS4gNCBjb2xvciBwYWxsZXQuIDUgYml0IFIgKyA2IGJpdCBHICsgNSBiaXQgQiArIDQgYml0IGFscGhhLiBBbHNvIGtub3duIGFzIERYVDMuXHJcbiAgQkMzUkdCQVVub3JtID0gXCJiYzMtcmdiYS11bm9ybVwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDggYml0L3B4KS4gNCBjb2xvciBwYWxsZXQgKyA4IGFscGhhIHBhbGxldC4gNSBiaXQgUiArIDYgYml0IEcgKyA1IGJpdCBCICsgOCBiaXQgYWxwaGEuIEFsc28ga25vd24gYXMgRFhUNS5cclxuICBCQzNSR0JBVW5vcm1TUkdCID0gXCJiYzMtcmdiYS11bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoOCBiaXQvcHgpLiA0IGNvbG9yIHBhbGxldCArIDggYWxwaGEgcGFsbGV0LiA1IGJpdCBSICsgNiBiaXQgRyArIDUgYml0IEIgKyA4IGJpdCBhbHBoYS4gQWxzbyBrbm93biBhcyBEWFQ1LlxyXG4gIEJDNFJVbm9ybSA9IFwiYmM0LXItdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gOCBjb2xvciBwYWxsZXQuIDggYml0IFIuIEFsc28ga25vd24gYXMgUkdUQzEuXHJcbiAgQkM0UlNub3JtID0gXCJiYzQtci1zbm9ybVwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiA4IGJ5dGVzIHBlciBibG9jayAoNCBiaXQvcHgpLiA4IGNvbG9yIHBhbGxldC4gOCBiaXQgUi4gQWxzbyBrbm93biBhcyBSR1RDMS5cclxuICBCQzVSR1Vub3JtID0gXCJiYzUtcmctdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIDggY29sb3IgcmVkIHBhbGxldCArIDggY29sb3IgZ3JlZW4gcGFsbGV0LiA4IGJpdCBSRy4gQWxzbyBrbm93biBhcyBSR1RDMi5cclxuICBCQzVSR1Nub3JtID0gXCJiYzUtcmctc25vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIDggY29sb3IgcmVkIHBhbGxldCArIDggY29sb3IgZ3JlZW4gcGFsbGV0LiA4IGJpdCBSRy4gQWxzbyBrbm93biBhcyBSR1RDMi5cclxuICBCQzZIUkdCVUZsb2F0ID0gXCJiYzZoLXJnYi11ZmxvYXRcIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIFZhcmlhYmxlIHNpemVkIHBhbGxldC4gMTYgYml0IHVuc2lnbmVkIGZsb2F0IFJHQi4gRmxvYXQgaW4gc2hhZGVyLiBBbHNvIGtub3duIGFzIEJQVEMgKGZsb2F0KS5cclxuICBCQzZIUkdCRmxvYXQgPSBcImJjNmgtcmdiLWZsb2F0XCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoOCBiaXQvcHgpLiBWYXJpYWJsZSBzaXplZCBwYWxsZXQuIDE2IGJpdCBzaWduZWQgZmxvYXQgUkdCLiBGbG9hdCBpbiBzaGFkZXIuIEFsc28ga25vd24gYXMgQlBUQyAoZmxvYXQpLlxyXG4gIEJDN1JHQkFVbm9ybSA9IFwiYmM3LXJnYmEtdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIFZhcmlhYmxlIHNpemVkIHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLiBBbHNvIGtub3duIGFzIEJQVEMgKHVub3JtKS5cclxuICBCQzdSR0JBVW5vcm1TUkdCID0gXCJiYzctcmdiYS11bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoOCBiaXQvcHgpLiBWYXJpYWJsZSBzaXplZCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS4gQWxzbyBrbm93biBhcyBCUFRDICh1bm9ybSkuXHJcblxyXG4gIC8vIEVUQzIgY29tcHJlc3NlZCBmb3JtYXRzIHVzYWJsZSBpZiBcInRleHR1cmUtY29tcHJlc3Npb24tZXRjMlwiIGlzIGJvdGhcclxuICAvLyBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZS91c2VyIGFnZW50IGFuZCBlbmFibGVkIGluIHJlcXVlc3REZXZpY2UuXHJcbiAgRVRDMlJHQjhVbm9ybSA9IFwiZXRjMi1yZ2I4dW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCLlxyXG4gIEVUQzJSR0I4VW5vcm1TUkdCID0gXCJldGMyLXJnYjh1bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDggYnl0ZXMgcGVyIGJsb2NrICg0IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQi5cclxuICBFVEMyUkdCOEExVW5vcm0gPSBcImV0YzItcmdiOGExdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCICsgMSBiaXQgYWxwaGEuXHJcbiAgRVRDMlJHQjhBMVVub3JtU1JHQiA9IFwiZXRjMi1yZ2I4YTF1bm9ybS1zcmdiXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDggYnl0ZXMgcGVyIGJsb2NrICg0IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQiArIDEgYml0IGFscGhhLlxyXG4gIEVUQzJSR0JBOFVub3JtID0gXCJldGMyLXJnYmE4dW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQiArIDggYml0IGFscGhhLlxyXG4gIEVUQzJSR0JBOFVub3JtU1JHQiA9IFwiZXRjMi1yZ2JhOHVub3JtLXNyZ2JcIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQiArIDggYml0IGFscGhhLlxyXG4gIEVBQ1IxMVVub3JtID0gXCJlYWMtcjExdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gOCBieXRlcyBwZXIgYmxvY2sgKDQgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDExIGJpdCBpbnRlZ2VyIFIuXHJcbiAgRUFDUjExU25vcm0gPSBcImVhYy1yMTFzbm9ybVwiLCAvLyA0eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiA4IGJ5dGVzIHBlciBibG9jayAoNCBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gMTEgYml0IGludGVnZXIgUi5cclxuICBFQUNSRzExVW5vcm0gPSBcImVhYy1yZzExdW5vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiAxMSBiaXQgaW50ZWdlciBSICsgMTEgYml0IGludGVnZXIgRy5cclxuICBFQUNSRzExU25vcm0gPSBcImVhYy1yZzExc25vcm1cIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiAxMSBiaXQgaW50ZWdlciBSICsgMTEgYml0IGludGVnZXIgRy5cclxuXHJcbiAgLy8gQVNUQyBjb21wcmVzc2VkIGZvcm1hdHMgdXNhYmxlIGlmIFwidGV4dHVyZS1jb21wcmVzc2lvbi1hc3RjXCIgaXMgYm90aFxyXG4gIC8vIHN1cHBvcnRlZCBieSB0aGUgZGV2aWNlL3VzZXIgYWdlbnQgYW5kIGVuYWJsZWQgaW4gcmVxdWVzdERldmljZS5cclxuICBBU1RDNHg0VW5vcm0gPSBcImFzdGMtNHg0LXVub3JtXCIsIC8vIDR4NCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoOCBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG4gIEFTVEM0eDRVbm9ybVNSR0IgPSBcImFzdGMtNHg0LXVub3JtLXNyZ2JcIiwgLy8gNHg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzV4NFVub3JtID0gXCJhc3RjLTV4NC11bm9ybVwiLCAvLyA1eDQgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDYuNCBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG4gIEFTVEM1eDRVbm9ybVNSR0IgPSBcImFzdGMtNXg0LXVub3JtLXNyZ2JcIiwgLy8gNXg0IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg2LjQgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuICBBU1RDNXg1VW5vcm0gPSBcImFzdGMtNXg1LXVub3JtXCIsIC8vIDV4NSBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoNS4xMiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG4gIEFTVEM1eDVVbm9ybVNSR0IgPSBcImFzdGMtNXg1LXVub3JtLXNyZ2JcIiwgLy8gNXg1IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICg1LjEyIGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzZ4NVVub3JtID0gXCJhc3RjLTZ4NS11bm9ybVwiLCAvLyA2eDUgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDQuMjcgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuICBBU1RDNng1VW5vcm1TUkdCID0gXCJhc3RjLTZ4NS11bm9ybS1zcmdiXCIsIC8vIDZ4NSBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoNC4yNyBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG4gIEFTVEM2eDZVbm9ybSA9IFwiYXN0Yy02eDYtdW5vcm1cIiwgLy8gNng2IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgzLjU2IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzZ4NlVub3JtU1JHQiA9IFwiYXN0Yy02eDYtdW5vcm0tc3JnYlwiLCAvLyA2eDYgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDMuNTYgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuICBBU1RDOHg1VW5vcm0gPSBcImFzdGMtOHg1LXVub3JtXCIsIC8vIDh4NSBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMy4yIGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzh4NVVub3JtU1JHQiA9IFwiYXN0Yy04eDUtdW5vcm0tc3JnYlwiLCAvLyA4eDUgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDMuMiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG4gIEFTVEM4eDZVbm9ybSA9IFwiYXN0Yy04eDYtdW5vcm1cIiwgLy8gOHg2IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgyLjY3IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzh4NlVub3JtU1JHQiA9IFwiYXN0Yy04eDYtdW5vcm0tc3JnYlwiLCAvLyA4eDYgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDIuNjcgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuICBBU1RDOHg4VW5vcm0gPSBcImFzdGMtOHg4LXVub3JtXCIsIC8vIDh4OCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG4gIEFTVEM4eDhVbm9ybVNSR0IgPSBcImFzdGMtOHg4LXVub3JtLXNyZ2JcIiwgLy8gOHg4IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgyIGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzEweDVVbm9ybSA9IFwiYXN0Yy0xMHg1LXVub3JtXCIsIC8vIDEweDUgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDIuNTYgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuICBBU1RDMTB4NVVub3JtU1JHQiA9IFwiYXN0Yy0xMHg1LXVub3JtLXNyZ2JcIiwgLy8gMTB4NSBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMi41NiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG4gIEFTVEMxMHg2VW5vcm0gPSBcImFzdGMtMTB4Ni11bm9ybVwiLCAvLyAxMHg2IGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgyLjEzIGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzEweDZVbm9ybVNSR0IgPSBcImFzdGMtMTB4Ni11bm9ybS1zcmdiXCIsIC8vIDEweDYgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDIuMTMgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuICBBU1RDMTB4OFVub3JtID0gXCJhc3RjLTEweDgtdW5vcm1cIiwgLy8gMTB4OCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMS42IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzEweDhVbm9ybVNSR0IgPSBcImFzdGMtMTB4OC11bm9ybS1zcmdiXCIsIC8vIDEweDggYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDEuNiBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG4gIEFTVEMxMHgxMFVub3JtID0gXCJhc3RjLTEweDEwLXVub3JtXCIsIC8vIDEweDEwIGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgxLjI4IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzEweDEwVW5vcm1TUkdCID0gXCJhc3RjLTEweDEwLXVub3JtLXNyZ2JcIiwgLy8gMTB4MTAgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDEuMjggYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuICBBU1RDMTJ4MTBVbm9ybSA9IFwiYXN0Yy0xMngxMC11bm9ybVwiLCAvLyAxMngxMCBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMS4wNyBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG4gIEFTVEMxMngxMFVub3JtU1JHQiA9IFwiYXN0Yy0xMngxMC11bm9ybS1zcmdiXCIsIC8vIDEyeDEwIGJsb2NrIGNvbXByZXNzZWQgdGV4dHVyZS4gMTYgYnl0ZXMgcGVyIGJsb2NrICgxLjA3IGJpdC9weCkuIENvbXBsZXggcGFsbGV0LiA4IGJpdCBpbnRlZ2VyIFJHQkEuXHJcbiAgQVNUQzEyeDEyVW5vcm0gPSBcImFzdGMtMTJ4MTItdW5vcm1cIiwgLy8gMTJ4MTIgYmxvY2sgY29tcHJlc3NlZCB0ZXh0dXJlLiAxNiBieXRlcyBwZXIgYmxvY2sgKDAuODkgYml0L3B4KS4gQ29tcGxleCBwYWxsZXQuIDggYml0IGludGVnZXIgUkdCQS5cclxuICBBU1RDMTJ4MTJVbm9ybVNSR0IgPSBcImFzdGMtMTJ4MTItdW5vcm0tc3JnYlwiLCAvLyAxMngxMiBibG9jayBjb21wcmVzc2VkIHRleHR1cmUuIDE2IGJ5dGVzIHBlciBibG9jayAoMC44OSBiaXQvcHgpLiBDb21wbGV4IHBhbGxldC4gOCBiaXQgaW50ZWdlciBSR0JBLlxyXG5cclxuICAvLyBcImRlcHRoMjR1bm9ybS1zdGVuY2lsOFwiIGZlYXR1cmVcclxuICBEZXB0aDI0VW5vcm1TdGVuY2lsOCA9IFwiZGVwdGgyNHVub3JtLXN0ZW5jaWw4XCIsXHJcblxyXG4gIC8vIFwiZGVwdGgzMmZsb2F0LXN0ZW5jaWw4XCIgZmVhdHVyZVxyXG4gIERlcHRoMzJGbG9hdFN0ZW5jaWw4ID0gXCJkZXB0aDMyZmxvYXQtc3RlbmNpbDhcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBBZGRyZXNzTW9kZSB7XHJcbiAgQ2xhbXBUb0VkZ2UgPSBcImNsYW1wLXRvLWVkZ2VcIixcclxuICBSZXBlYXQgPSBcInJlcGVhdFwiLFxyXG4gIE1pcnJvclJlcGVhdCA9IFwibWlycm9yLXJlcGVhdFwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEZpbHRlck1vZGUge1xyXG4gIE5lYXJlc3QgPSBcIm5lYXJlc3RcIixcclxuICBMaW5lYXIgPSBcImxpbmVhclwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIENvbXBhcmVGdW5jdGlvbiB7XHJcbiAgTmV2ZXIgPSBcIm5ldmVyXCIsXHJcbiAgTGVzcyA9IFwibGVzc1wiLFxyXG4gIEVxdWFsID0gXCJlcXVhbFwiLFxyXG4gIExlc3NFcXVhbCA9IFwibGVzcy1lcXVhbFwiLFxyXG4gIEdyZWF0ZXIgPSBcImdyZWF0ZXJcIixcclxuICBOb3RFcXVhbCA9IFwibm90LWVxdWFsXCIsXHJcbiAgR3JlYXRlckVxdWFsID0gXCJncmVhdGVyLWVxdWFsXCIsXHJcbiAgQWx3YXlzID0gXCJhbHdheXNcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBTaGFkZXJTdGFnZSB7XHJcbiAgVmVydGV4ID0gMSxcclxuICBGcmFnbWVudCA9IDIsXHJcbiAgQ29tcHV0ZSA9IDQsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gQnVmZmVyQmluZGluZ1R5cGUge1xyXG4gIFVuaWZvcm0gPSBcInVuaWZvcm1cIixcclxuICBTdG9yYWdlID0gXCJzdG9yYWdlXCIsXHJcbiAgUmVhZE9ubHlTdG9yYWdlID0gXCJyZWFkLW9ubHktc3RvcmFnZVwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFNhbXBsZXJCaW5kaW5nVHlwZSB7XHJcbiAgRmlsdGVyaW5nID0gXCJmaWx0ZXJpbmdcIixcclxuICBOb25GaWx0ZXJpbmcgPSBcIm5vbi1maWx0ZXJpbmdcIixcclxuICBDb21wYXJpc29uID0gXCJjb21wYXJpc29uXCIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gVGV4dHVyZVNhbXBsZVR5cGUge1xyXG4gIEZsb2F0ID0gXCJmbG9hdFwiLFxyXG4gIFVuZmlsdGVyYWJsZUZsb2F0ID0gXCJ1bmZpbHRlcmFibGUtZmxvYXRcIixcclxuICBEZXB0aCA9IFwiZGVwdGhcIixcclxuICBTaW50ID0gXCJzaW50XCIsXHJcbiAgVWludCA9IFwidWludFwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFN0b3JhZ2VUZXh0dXJlQWNjZXNzIHtcclxuICBXcml0ZU9ubHkgPSBcIndyaXRlLW9ubHlcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBDb21waWxhdGlvbk1lc3NhZ2VUeXBlIHtcclxuICBFcnJvciA9IFwiZXJyb3JcIixcclxuICBXYXJuaW5nID0gXCJ3YXJuaW5nXCIsXHJcbiAgSW5mbyA9IFwiaW5mb1wiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEF1dG9MYXlvdXRNb2RlIHtcclxuICBBdXRvID0gXCJhdXRvXCIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gUHJpbWl0aXZlVG9wb2xvZ3kge1xyXG4gIFBvaW50TGlzdCA9IFwicG9pbnQtbGlzdFwiLFxyXG4gIExpbmVMaXN0ID0gXCJsaW5lLWxpc3RcIixcclxuICBMaW5lU3RyaXAgPSBcImxpbmUtc3RyaXBcIixcclxuICBUcmlhbmdsZUxpc3QgPSBcInRyaWFuZ2xlLWxpc3RcIixcclxuICBUcmlhbmdsZVN0cmlwID0gXCJ0cmlhbmdsZS1zdHJpcFwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIEZyb250RmFjZSB7XHJcbiAgQ0NXID0gXCJjY3dcIixcclxuICBDVyA9IFwiY3dcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBDdWxsTW9kZSB7XHJcbiAgTm9uZSA9IFwibm9uZVwiLFxyXG4gIEZyb250ID0gXCJmcm9udFwiLFxyXG4gIEJhY2sgPSBcImJhY2tcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBDb2xvcldyaXRlRmxhZ3Mge1xyXG4gIFJlZCA9IDEsXHJcbiAgR3JlZW4gPSAyLFxyXG4gIEJsdWUgPSA0LFxyXG4gIEFscGhhID0gOCxcclxuICBBbGwgPSAxNSxcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBCbGVuZEZhY3RvciB7XHJcbiAgWmVybyA9IFwiemVyb1wiLFxyXG4gIE9uZSA9IFwib25lXCIsXHJcbiAgU3JjID0gXCJzcmNcIixcclxuICBPbmVNaW51c1NyYyA9IFwib25lLW1pbnVzLXNyY1wiLFxyXG4gIFNyY0FscGhhID0gXCJzcmMtYWxwaGFcIixcclxuICBPbmVNaW51c1NyY0FscGhhID0gXCJvbmUtbWludXMtc3JjLWFscGhhXCIsXHJcbiAgRHN0ID0gXCJkc3RcIixcclxuICBPbmVNaW51c0RzdCA9IFwib25lLW1pbnVzLWRzdFwiLFxyXG4gIERzdEFscGhhID0gXCJkc3QtYWxwaGFcIixcclxuICBPbmVNaW51c0RzdEFscGhhID0gXCJvbmUtbWludXMtZHN0LWFscGhhXCIsXHJcbiAgU3JjQWxwaGFTYXR1cmF0ZWQgPSBcInNyYy1hbHBoYS1zYXR1cmF0ZWRcIixcclxuICBDb25zdGFudCA9IFwiY29uc3RhbnRcIixcclxuICBPbmVNaW51c0NvbnN0YW50ID0gXCJvbmUtbWludXMtY29uc3RhbnRcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBCbGVuZE9wZXJhdGlvbiB7XHJcbiAgQWRkID0gXCJhZGRcIixcclxuICBTdWJ0cmFjdCA9IFwic3VidHJhY3RcIixcclxuICBSZXZlcnNlU3VidHJhY3QgPSBcInJldmVyc2Utc3VidHJhY3RcIixcclxuICBNaW4gPSBcIm1pblwiLFxyXG4gIE1heCA9IFwibWF4XCIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gU3RlbmNpbE9wZXJhdGlvbiB7XHJcbiAgS2VlcCA9IFwia2VlcFwiLFxyXG4gIFplcm8gPSBcInplcm9cIixcclxuICBSZXBsYWNlID0gXCJyZXBsYWNlXCIsXHJcbiAgSW52ZXJ0ID0gXCJpbnZlcnRcIixcclxuICBJbmNyZW1lbnRDbGFtcCA9IFwiaW5jcmVtZW50LWNsYW1wXCIsXHJcbiAgRGVjcmVtZW50Q2xhbXAgPSBcImRlY3JlbWVudC1jbGFtcFwiLFxyXG4gIEluY3JlbWVudFdyYXAgPSBcImluY3JlbWVudC13cmFwXCIsXHJcbiAgRGVjcmVtZW50V3JhcCA9IFwiZGVjcmVtZW50LXdyYXBcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBJbmRleEZvcm1hdCB7XHJcbiAgVWludDE2ID0gXCJ1aW50MTZcIixcclxuICBVaW50MzIgPSBcInVpbnQzMlwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFZlcnRleEZvcm1hdCB7XHJcbiAgVWludDh4MiA9IFwidWludDh4MlwiLFxyXG4gIFVpbnQ4eDQgPSBcInVpbnQ4eDRcIixcclxuICBTaW50OHgyID0gXCJzaW50OHgyXCIsXHJcbiAgU2ludDh4NCA9IFwic2ludDh4NFwiLFxyXG4gIFVub3JtOHgyID0gXCJ1bm9ybTh4MlwiLFxyXG4gIFVub3JtOHg0ID0gXCJ1bm9ybTh4NFwiLFxyXG4gIFNub3JtOHgyID0gXCJzbm9ybTh4MlwiLFxyXG4gIFNub3JtOHg0ID0gXCJzbm9ybTh4NFwiLFxyXG4gIFVpbnQxNngyID0gXCJ1aW50MTZ4MlwiLFxyXG4gIFVpbnQxNng0ID0gXCJ1aW50MTZ4NFwiLFxyXG4gIFNpbnQxNngyID0gXCJzaW50MTZ4MlwiLFxyXG4gIFNpbnQxNng0ID0gXCJzaW50MTZ4NFwiLFxyXG4gIFVub3JtMTZ4MiA9IFwidW5vcm0xNngyXCIsXHJcbiAgVW5vcm0xNng0ID0gXCJ1bm9ybTE2eDRcIixcclxuICBTbm9ybTE2eDIgPSBcInNub3JtMTZ4MlwiLFxyXG4gIFNub3JtMTZ4NCA9IFwic25vcm0xNng0XCIsXHJcbiAgRmxvYXQxNngyID0gXCJmbG9hdDE2eDJcIixcclxuICBGbG9hdDE2eDQgPSBcImZsb2F0MTZ4NFwiLFxyXG4gIEZsb2F0MzIgPSBcImZsb2F0MzJcIixcclxuICBGbG9hdDMyeDIgPSBcImZsb2F0MzJ4MlwiLFxyXG4gIEZsb2F0MzJ4MyA9IFwiZmxvYXQzMngzXCIsXHJcbiAgRmxvYXQzMng0ID0gXCJmbG9hdDMyeDRcIixcclxuICBVaW50MzIgPSBcInVpbnQzMlwiLFxyXG4gIFVpbnQzMngyID0gXCJ1aW50MzJ4MlwiLFxyXG4gIFVpbnQzMngzID0gXCJ1aW50MzJ4M1wiLFxyXG4gIFVpbnQzMng0ID0gXCJ1aW50MzJ4NFwiLFxyXG4gIFNpbnQzMiA9IFwic2ludDMyXCIsXHJcbiAgU2ludDMyeDIgPSBcInNpbnQzMngyXCIsXHJcbiAgU2ludDMyeDMgPSBcInNpbnQzMngzXCIsXHJcbiAgU2ludDMyeDQgPSBcInNpbnQzMng0XCIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gSW5wdXRTdGVwTW9kZSB7XHJcbiAgVmVydGV4ID0gXCJ2ZXJ0ZXhcIixcclxuICBJbnN0YW5jZSA9IFwiaW5zdGFuY2VcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBDb21wdXRlUGFzc1RpbWVzdGFtcExvY2F0aW9uIHtcclxuICBCZWdpbm5pbmcgPSBcImJlZ2lubmluZ1wiLFxyXG4gIEVuZCA9IFwiZW5kXCIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gUmVuZGVyUGFzc1RpbWVzdGFtcExvY2F0aW9uIHtcclxuICBCZWdpbm5pbmcgPSBcImJlZ2lubmluZ1wiLFxyXG4gIEVuZCA9IFwiZW5kXCIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gTG9hZE9wIHtcclxuICBMb2FkID0gXCJsb2FkXCIsXHJcbiAgQ2xlYXIgPSBcImNsZWFyXCIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gU3RvcmVPcCB7XHJcbiAgU3RvcmUgPSBcInN0b3JlXCIsXHJcbiAgRGlzY2FyZCA9IFwiZGlzY2FyZFwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIFF1ZXJ5VHlwZSB7XHJcbiAgT2NjbHVzaW9uID0gXCJvY2NsdXNpb25cIixcclxuICBUaW1lc3RhbXAgPSBcInRpbWVzdGFtcFwiLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBlbnVtIENhbnZhc0FscGhhTW9kZSB7XHJcbiAgT3BhcXVlID0gXCJvcGFxdWVcIixcclxuICBQcmVtdWx0aXBsaWVkID0gXCJwcmVtdWx0aXBsaWVkXCIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGVudW0gRGV2aWNlTG9zdFJlYXNvbiB7XHJcbiAgRGVzdHJveWVkID0gXCJkZXN0cm95ZWRcIixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZW51bSBFcnJvckZpbHRlciB7XHJcbiAgT3V0T2ZNZW1vcnkgPSBcIm91dC1vZi1tZW1vcnlcIixcclxuICBWYWxpZGF0aW9uID0gXCJ2YWxpZGF0aW9uXCIsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEdQVUNvbG9yV3JpdGUge1xyXG4gIFJlZCA9IDB4MSxcclxuICBHcmVlbiA9IDB4MixcclxuICBCbHVlID0gMHg0LFxyXG4gIEFscGhhID0gMHg4LFxyXG4gIEFsbCA9IDB4ZixcclxufVxyXG4iLCJpbXBvcnQgeyBCdWZmZXJVc2FnZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5jbGFzcyBCdWZmZXIge1xuXHRwdWJsaWMgZ3B1QnVmZmVyOiBHUFVCdWZmZXI7XG5cdGRldmljZTogR1BVRGV2aWNlO1xuXHR1c2FnZTogbnVtYmVyO1xuXHRkYXRhOiBBcnJheUJ1ZmZlclZpZXc7XG5cdHNpemU6IG51bWJlcjtcblx0Y29uc3RydWN0b3IoZGV2aWNlOiBHUFVEZXZpY2UsIHVzYWdlOiBHUFVCdWZmZXJVc2FnZUZsYWdzLCBkYXRhOiBBcnJheUJ1ZmZlclZpZXcgfCBudWxsLCBzaXplPzogbnVtYmVyKSB7XG5cdFx0dGhpcy5kZXZpY2UgPSBkZXZpY2U7XG5cdFx0dGhpcy51c2FnZSA9IHVzYWdlO1xuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0dGhpcy5zaXplID0gc2l6ZTtcblx0XHR0aGlzLmdwdUJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuXHRcdFx0c2l6ZTogc2l6ZSAhPSB1bmRlZmluZWQgPyBzaXplIDogZGF0YS5ieXRlTGVuZ3RoLFxuXHRcdFx0dXNhZ2Vcblx0XHR9KTtcblx0XHRpZiAoZGF0YSkgdGhpcy5zZXRTdWJEYXRhKDAsIGRhdGEpO1xuXHR9XG5cdHN0YXRpYyBjcmVhdGUoZGV2aWNlOiBHUFVEZXZpY2UsIHVzYWdlOiBHUFVCdWZmZXJVc2FnZUZsYWdzLCBkYXRhOiBBcnJheUJ1ZmZlclZpZXcgfCBudWxsLCBzaXplPzogbnVtYmVyKSB7XG5cdFx0cmV0dXJuIG5ldyBCdWZmZXIoZGV2aWNlLCB1c2FnZSwgZGF0YSwgc2l6ZSk7XG5cdH1cblx0c3RhdGljIGNyZWF0ZVZlcnRleEJ1ZmZlcihkZXZpY2U6IEdQVURldmljZSwgZGF0YTogQXJyYXlCdWZmZXJWaWV3KTogQnVmZmVyIHtcblx0XHRyZXR1cm4gbmV3IEJ1ZmZlcihkZXZpY2UsIEJ1ZmZlclVzYWdlLlZlcnRleCB8IEJ1ZmZlclVzYWdlLkNvcHlEc3QsIGRhdGEsIGRhdGEuYnl0ZUxlbmd0aCk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlSW5kZXhCdWZmZXIoZGV2aWNlOiBHUFVEZXZpY2UsIGRhdGE6IEFycmF5QnVmZmVyVmlldyk6IEJ1ZmZlciB7XG5cdFx0cmV0dXJuIG5ldyBCdWZmZXIoZGV2aWNlLCBCdWZmZXJVc2FnZS5JbmRleCB8IEJ1ZmZlclVzYWdlLkNvcHlEc3QsIGRhdGEpO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZVVuaWZvcm1CdWZmZXIoZGV2aWNlOiBHUFVEZXZpY2UsIHNpemU6IG51bWJlciwgdXNhZ2U/OiBCdWZmZXJVc2FnZSk6IEJ1ZmZlciB7XG5cdFx0cmV0dXJuIG5ldyBCdWZmZXIoZGV2aWNlLCB1c2FnZSwgbnVsbCwgc2l6ZSk7XG5cdH1cblx0c3RhdGljIGdldEJ1ZmZlclR5cGUodXNhZ2UpIHtcblx0XHRsZXQgcmVzdWx0O1xuXHRcdHN3aXRjaCAodXNhZ2UpIHtcblx0XHRcdGNhc2UgQnVmZmVyVXNhZ2UuVW5pZm9ybTpcblx0XHRcdFx0cmVzdWx0ID0gXCJ1bmlmb3JtXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBCdWZmZXJVc2FnZS5TdG9yYWdlOlxuXHRcdFx0XHRyZXN1bHQgPSBcInN0b3JhZ2VcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2dwdXdlYi9ncHV3ZWIvYmxvYi9tYWluL2Rlc2lnbi9CdWZmZXJPcGVyYXRpb25zLm1kXG5cdHB1YmxpYyBzZXRTdWJEYXRhKG9mZnNldDogbnVtYmVyLCBkYXRhOiBBcnJheUJ1ZmZlclZpZXcpOiB2b2lkIHtcblx0XHRjb25zdCBzcmNBcnJheUJ1ZmZlciA9IGRhdGEuYnVmZmVyO1xuXHRcdGNvbnN0IGJ5dGVDb3VudCA9IHNyY0FycmF5QnVmZmVyLmJ5dGVMZW5ndGg7XG5cdFx0Y29uc3Qgc3JjQnVmZmVyID0gdGhpcy5kZXZpY2UuY3JlYXRlQnVmZmVyKHtcblx0XHRcdG1hcHBlZEF0Q3JlYXRpb246IHRydWUsXG5cdFx0XHRzaXplOiBieXRlQ291bnQsXG5cdFx0XHR1c2FnZTogR1BVQnVmZmVyVXNhZ2UuQ09QWV9TUkNcblx0XHR9KTtcblx0XHRjb25zdCBhcnJheUJ1ZmZlciA9IHNyY0J1ZmZlci5nZXRNYXBwZWRSYW5nZSgpO1xuXG5cdFx0bmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpLnNldChuZXcgVWludDhBcnJheShzcmNBcnJheUJ1ZmZlcikpOyAvLyBtZW1jcHlcblx0XHRzcmNCdWZmZXIudW5tYXAoKTtcblxuXHRcdHRoaXMuY29weVRvQnVmZmVyKHNyY0J1ZmZlciwgb2Zmc2V0LCBieXRlQ291bnQpO1xuXG5cdFx0c3JjQnVmZmVyLmRlc3Ryb3koKTtcblx0fVxuXG5cdHB1YmxpYyBjb3B5VG9CdWZmZXIoc3JjQnVmZmVyOiBHUFVCdWZmZXIsIG9mZnNldDogbnVtYmVyLCBieXRlQ291bnQ6IG51bWJlcik6IHZvaWQge1xuXHRcdGNvbnN0IGNvbW1hbmRFbmNvZGVyID0gdGhpcy5kZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcblx0XHRjb21tYW5kRW5jb2Rlci5jb3B5QnVmZmVyVG9CdWZmZXIoc3JjQnVmZmVyLCAwLCB0aGlzLmdwdUJ1ZmZlciwgb2Zmc2V0LCBieXRlQ291bnQpO1xuXHRcdHRoaXMuZGV2aWNlLnF1ZXVlLnN1Ym1pdChbY29tbWFuZEVuY29kZXIuZmluaXNoKCldKTtcblx0fVxuXG5cdHB1YmxpYyBjb3B5VG9UZXh0dXJlKFxuXHRcdGJ5dGVzUGVyUm93OiBudW1iZXIsXG5cdFx0cm93c1BlckltYWdlOiBudW1iZXIsXG5cdFx0ZGVzdGluYXRpb246IEdQVUltYWdlQ29weVRleHR1cmUsXG5cdFx0ZXh0ZW50OiBHUFVFeHRlbnQzRFxuXHQpOiB2b2lkIHtcblx0XHRjb25zdCBjb21tYW5kRW5jb2RlciA9IHRoaXMuZGV2aWNlLmNyZWF0ZUNvbW1hbmRFbmNvZGVyKCk7XG5cdFx0Y29tbWFuZEVuY29kZXIuY29weUJ1ZmZlclRvVGV4dHVyZShcblx0XHRcdHtcblx0XHRcdFx0YnVmZmVyOiB0aGlzLmdwdUJ1ZmZlcixcblx0XHRcdFx0Ynl0ZXNQZXJSb3csXG5cdFx0XHRcdHJvd3NQZXJJbWFnZVxuXHRcdFx0fSxcblx0XHRcdGRlc3RpbmF0aW9uLFxuXHRcdFx0ZXh0ZW50XG5cdFx0KTtcblx0XHR0aGlzLmRldmljZS5xdWV1ZS5zdWJtaXQoW2NvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XG5cdH1cblxuXHRwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmdwdUJ1ZmZlci5kZXN0cm95KCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnVmZmVyO1xuIiwiaW1wb3J0IHsgU2hhZGVyU291cmNlIH0gZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJTb3VyY2VcIjtcclxuaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tIFwiLi9SZW5kZXJUYXJnZXRcIjtcclxuaW1wb3J0IFNoYWRlckRhdGEgZnJvbSBcIi4vU2hhZGVyRGF0YVwiO1xyXG5pbXBvcnQgVmVydGV4dEJ1ZmZlciBmcm9tIFwiLi9WZXJ0ZXh0QnVmZmVyXCI7XHJcbmltcG9ydCBJbmRleEJ1ZmZlciBmcm9tIFwiLi9JbmRleEJ1ZmZlclwiO1xyXG5pbXBvcnQgeyBSZW5kZXJTdGF0ZSB9IGZyb20gXCIuL1JlbmRlclN0YXRlXCI7XHJcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4uL21hdGVyaWFsL01hdGVyaWFsXCI7XHJcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9tYXRoL01hdHJpeDRcIjtcclxuXHJcbmNsYXNzIERyYXdDb21tYW5kIHtcclxuXHRwdWJsaWMgdHlwZT86IHN0cmluZztcclxuXHJcblx0cHVibGljIHNoYWRlckRhdGE/OiBTaGFkZXJEYXRhO1xyXG5cclxuXHRwdWJsaWMgcmVuZGVyVGFyZ2V0PzogUmVuZGVyVGFyZ2V0O1xyXG5cclxuXHRwdWJsaWMgdmVydGV4QnVmZmVyPzogVmVydGV4dEJ1ZmZlcjtcclxuXHJcblx0cHVibGljIGluZGV4QnVmZmVyPzogSW5kZXhCdWZmZXI7XHJcblxyXG5cdHB1YmxpYyByZW5kZXJTdGF0ZT86IFJlbmRlclN0YXRlO1xyXG5cclxuXHRwdWJsaWMgcXVlcnlJbmRleD86IG51bWJlcjtcclxuXHJcblx0cHVibGljIGNvdW50PzogbnVtYmVyO1xyXG5cclxuXHRwdWJsaWMgaW5zdGFuY2VzPzogbnVtYmVyO1xyXG5cclxuXHRwdWJsaWMgZGlzcGF0Y2g/OiB7IHg/OiBudW1iZXI7IHk/OiBudW1iZXI7IHo/OiBudW1iZXIgfTtcclxuXHJcblx0cHVibGljIHNoYWRlclNvdXJjZT86IFNoYWRlclNvdXJjZTtcclxuXHJcblx0cHVibGljIGRpcnR5PzogYm9vbGVhbjtcclxuXHJcblx0cHVibGljIGxpZ2h0PzogYm9vbGVhbjtcclxuXHJcblx0cHVibGljIGluZGlyZWN0QnVmZmVyPzogQnVmZmVyO1xyXG5cclxuXHRwdWJsaWMgbW9kZWxNYXRyaXg/Ok1hdHJpeDQ7XHJcblxyXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM6IERyYXdDb21tYW5kUHJvcHMpIHtcclxuXHRcdHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcclxuXHJcblx0XHR0aGlzLnNoYWRlckRhdGEgPSBvcHRpb25zLnNoYWRlckRhdGE7XHJcblxyXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQgPSBvcHRpb25zLnJlbmRlclRhcmdldDtcclxuXHJcblx0XHR0aGlzLnZlcnRleEJ1ZmZlciA9IG9wdGlvbnMudmVydGV4QnVmZmVyO1xyXG5cclxuXHRcdHRoaXMuaW5kZXhCdWZmZXIgPSBvcHRpb25zLmluZGV4QnVmZmVyO1xyXG5cclxuXHRcdHRoaXMucmVuZGVyU3RhdGUgPSBvcHRpb25zLnJlbmRlclN0YXRlO1xyXG5cclxuXHRcdHRoaXMucXVlcnlJbmRleCA9IG9wdGlvbnMucXVlcnlJbmRleDtcclxuXHJcblx0XHR0aGlzLmNvdW50ID0gb3B0aW9ucy5jb3VudDtcclxuXHJcblx0XHR0aGlzLmluc3RhbmNlcyA9IG9wdGlvbnMuaW5zdGFuY2VzO1xyXG5cclxuXHRcdHRoaXMuZGlzcGF0Y2ggPSBvcHRpb25zLmRpc3BhdGNoO1xyXG5cclxuXHRcdHRoaXMuc2hhZGVyU291cmNlID0gb3B0aW9ucy5zaGFkZXJTb3VyY2U7XHJcblxyXG5cdFx0dGhpcy5kaXJ0eSA9IG9wdGlvbnMuZGlydHk7XHJcblxyXG5cdFx0dGhpcy5saWdodCA9IG9wdGlvbnMubGlnaHQ7XHJcblxyXG5cdFx0dGhpcy5tb2RlbE1hdHJpeD1vcHRpb25zLm1vZGVsTWF0cml4XHJcblx0fVxyXG5cdHB1YmxpYyBzaGFsbG93Q2xvbmUobWF0ZXJpYWw/OiBNYXRlcmlhbCkge1xyXG5cdFx0aWYgKG1hdGVyaWFsKSB7XHJcblx0XHRcdHJldHVybiBuZXcgRHJhd0NvbW1hbmQoe1xyXG5cdFx0XHRcdHZlcnRleEJ1ZmZlcjogdGhpcy52ZXJ0ZXhCdWZmZXIsXHJcblx0XHRcdFx0aW5kZXhCdWZmZXI6IHRoaXMuaW5kZXhCdWZmZXIsXHJcblx0XHRcdFx0c2hhZGVyRGF0YTogbWF0ZXJpYWwuc2hhZGVyRGF0YSxcclxuXHRcdFx0XHRpbnN0YW5jZXM6IHRoaXMuaW5zdGFuY2VzLFxyXG5cdFx0XHRcdGNvdW50OiB0aGlzLmNvdW50LFxyXG5cdFx0XHRcdHJlbmRlclN0YXRlOiBtYXRlcmlhbC5yZW5kZXJTdGF0ZSxcclxuXHRcdFx0XHRzaGFkZXJTb3VyY2U6IG1hdGVyaWFsLnNoYWRlclNvdXJjZSxcclxuXHRcdFx0XHR0eXBlOiBcInJlbmRlclwiLFxyXG5cdFx0XHRcdGxpZ2h0OiBtYXRlcmlhbC5saWdodCxcclxuXHRcdFx0XHRtb2RlbE1hdHJpeDp0aGlzLm1vZGVsTWF0cml4XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG50eXBlIERyYXdDb21tYW5kUHJvcHMgPSB7XHJcblx0dHlwZT86IHN0cmluZztcclxuXHJcblx0c2hhZGVyRGF0YT86IFNoYWRlckRhdGE7XHJcblxyXG5cdHJlbmRlclRhcmdldD86IFJlbmRlclRhcmdldDtcclxuXHJcblx0dmVydGV4QnVmZmVyPzogVmVydGV4dEJ1ZmZlcjtcclxuXHJcblx0aW5kZXhCdWZmZXI/OiBJbmRleEJ1ZmZlcjtcclxuXHJcblx0cmVuZGVyU3RhdGU/OiBSZW5kZXJTdGF0ZTtcclxuXHJcblx0cXVlcnlJbmRleD86IG51bWJlcjtcclxuXHJcblx0Y291bnQ/OiBudW1iZXI7XHJcblxyXG5cdGluc3RhbmNlcz86IG51bWJlcjtcclxuXHJcblx0ZGlzcGF0Y2g/OiB7IHg/OiBudW1iZXI7IHk/OiBudW1iZXI7IHo/OiBudW1iZXIgfTtcclxuXHJcblx0c2hhZGVyU291cmNlPzogU2hhZGVyU291cmNlO1xyXG5cclxuXHRkaXJ0eT86IGJvb2xlYW47XHJcblxyXG5cdGxpZ2h0PzogYm9vbGVhbjtcclxuXHJcblx0bW9kZWxNYXRyaXg/Ok1hdHJpeDQ7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IERyYXdDb21tYW5kO1xyXG4iLCJpbXBvcnQgQmluZEdyb3VwTGF5b3V0IGZyb20gXCIuLi9yZW5kZXIvQmluZEdyb3VwTGF5b3V0XCI7XG5pbXBvcnQgQmluZEdyb3VwRW50aXR5IGZyb20gXCIuLi9yZW5kZXIvQmluZEdyb3VwRW50aXR5XCI7XG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcbmltcG9ydCB7XG5cdEJsZW5kRmFjdG9yLFxuXHRCbGVuZE9wZXJhdGlvbixcblx0Q29sb3JXcml0ZUZsYWdzLFxuXHRDb21wYXJlRnVuY3Rpb24sXG5cdEN1bGxNb2RlLFxuXHRGcm9udEZhY2UsXG5cdEluZGV4Rm9ybWF0LFxuXHRQcmltaXRpdmVUb3BvbG9neSxcblx0U3RlbmNpbE9wZXJhdGlvbixcblx0VGV4dHVyZUZvcm1hdFxufSBmcm9tIFwiLi9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4uL3JlbmRlci9TYW1wbGVyXCI7XG5leHBvcnQgY29uc3QgR1BVQ2FudmFzQ29tcG9zaXRpbmdBbHBoYU1vZGU6IHtcblx0W2tleTogc3RyaW5nXTogR1BVQ2FudmFzQ29tcG9zaXRpbmdBbHBoYU1vZGU7XG59ID0ge1xuXHRPcGFxdWU6IFwib3BhcXVlXCIsXG5cdFByZW11bHRpcGxpZWQ6IFwicHJlbXVsdGlwbGllZFwiXG59O1xuZXhwb3J0IGludGVyZmFjZSBDb250ZXh0U3RhdGUge1xuXHRkZXZpY2U6IEdQVURldmljZTtcblx0Z2xzbGFuZzoge1xuXHRcdGNvbXBpbGVHTFNMOiAoc291cmNlOiBzdHJpbmcsIHR5cGU6IHN0cmluZykgPT4gc3RyaW5nO1xuXHR9O1xuXHRkZWJ1ZzogYm9vbGVhbjtcblx0ZXJyb3I6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGV4dE9wdGlvbnMge1xuXHRjYW52YXM/OiBIVE1MQ2FudmFzRWxlbWVudDtcblx0Y29udGFpbmVyPzogSFRNTERpdkVsZW1lbnQ7XG5cdGNvbnRleHQ/OiBHUFVDYW52YXNDb250ZXh0O1xuXHRwaXhlbFJhdGlvPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpbmRHcm91cExheW91dEVudHJ5IGV4dGVuZHMgR1BVQmluZEdyb3VwTGF5b3V0RW50cnkge1xuXHRuYW1lOiBzdHJpbmc7XG5cdHVuaWZvcm1zPzogYW55W107XG5cdGRpbWVuc2lvbj86IEdQVVRleHR1cmVEaW1lbnNpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmluZEdyb3VwT3B0aW9ucyBleHRlbmRzIEdQVUJpbmRHcm91cERlc2NyaXB0b3Ige1xuXHRyZXNvdXJjZXM6IEdQVUJpbmRpbmdSZXNvdXJjZVtdO1xufVxuXG5leHBvcnQgdHlwZSBTaGFkZXJTdGFnZU5hbWUgPSBcInZlcnRleFwiIHwgXCJmcmFnbWVudFwiIHwgXCJjb21wdXRlXCI7XG5cbmV4cG9ydCB0eXBlIFNoYWRlclN0YWdlTmFtZU9iamVjdEtleXMgPSB7XG5cdFtrZXkgaW4gU2hhZGVyU3RhZ2VOYW1lXT86IHN0cmluZztcbn07XG5leHBvcnQgdHlwZSBTaGFkZXJTdGFnZUJvZHlOYW1lID0gXCJ2ZXJ0ZXhCb2R5XCIgfCBcImZyYWdtZW50Qm9keVwiIHwgXCJjb21wdXRlQm9keVwiO1xuZXhwb3J0IHR5cGUgU2hhZGVyU3RhZ2VCb2R5TmFtZU9iamVjdEtleXMgPSB7XG5cdFtrZXkgaW4gU2hhZGVyU3RhZ2VCb2R5TmFtZV0/OiBzdHJpbmc7XG59O1xuZXhwb3J0IGludGVyZmFjZSBBdHRhY2htZW50T3B0aW9ucyB7XG5cdG9wPzogR1BVU3RvcmVPcDtcblx0dGV4dHVyZT86IFRleHR1cmU7XG5cdHJlc29sdmVUYXJnZXQ/OiBUZXh0dXJlO1xuXHRzdG9yZU9wPzogR1BVU3RvcmVPcDtcbn1cblxuZXhwb3J0IHR5cGUgUGFzc1R5cGUgPSBcInJlbmRlclwiIHwgXCJjb21wdXRlXCI7XG5cbmV4cG9ydCB0eXBlIEdQVUJpbmRpbmdUeXBlID1cblx0fCBHUFVCdWZmZXJCaW5kaW5nVHlwZVxuXHR8IEdQVVNhbXBsZXJCaW5kaW5nVHlwZVxuXHR8IEdQVVRleHR1cmVTYW1wbGVUeXBlXG5cdHwgR1BVU3RvcmFnZVRleHR1cmVBY2Nlc3M7XG5cbmV4cG9ydCB0eXBlIEJpbmRHcm91cExheW91dEVudHJ5VHlwZSA9IHtcblx0YmluZGluZzogbnVtYmVyO1xuXHR2aXNpYmlsaXR5OiBHUFVTaGFkZXJTdGFnZUZsYWdzO1xuXHR1bmlmb3Jtcz86IGFueVtdO1xuXHRidWZmZXI/OiBHUFVCdWZmZXJCaW5kaW5nTGF5b3V0O1xuXHRzYW1wbGVyPzogR1BVU2FtcGxlckJpbmRpbmdMYXlvdXQ7XG5cdHRleHR1cmU/OiBHUFVUZXh0dXJlQmluZGluZ0xheW91dDtcblx0c3RvcmFnZVRleHR1cmU/OiBHUFVTdG9yYWdlVGV4dHVyZUJpbmRpbmdMYXlvdXQ7XG5cdGV4dGVybmFsVGV4dHVyZT86IEdQVUV4dGVybmFsVGV4dHVyZUJpbmRpbmdMYXlvdXQ7XG59O1xuZXhwb3J0IHR5cGUgQnVmZmVyUmVzb3VyY2VUeXBlID0ge1xuXHRidWZmZXI6IEdQVUJ1ZmZlckJpbmRpbmdUeXBlO1xuXHRvZmZzZXQ6IG51bWJlcjtcblx0c2l6ZTogbnVtYmVyO1xufTtcbmV4cG9ydCB0eXBlIHNhbXBsZXJCaW5kRW50aXR5UmVzb3VyY2VUeXBlID0ge1xuXHRyZXNvdXJjZTogR1BVU2FtcGxlcjtcbn07XG5leHBvcnQgdHlwZSB0ZXh0dXJlQmluZEVudGl0eVJlc291cmNlVHlwZSA9IHtcblx0cmVzb3VyY2U6IEdQVVRleHR1cmVWaWV3O1xufTtcbmV4cG9ydCB0eXBlIEJpbmRHcm91cEVudGl0eVJlc291cmNlVHlwZSA9XG5cdHwgQnVmZmVyUmVzb3VyY2VUeXBlXG5cdHwgc2FtcGxlckJpbmRFbnRpdHlSZXNvdXJjZVR5cGVcblx0fCB0ZXh0dXJlQmluZEVudGl0eVJlc291cmNlVHlwZTtcbmV4cG9ydCB0eXBlIEJpbmRHcm91cEVudGl0eU9wdGlvbnMgPSB7XG5cdGJpbmRpbmc6IG51bWJlcjtcblx0cmVzb3VyY2U6IEdQVUJpbmRpbmdSZXNvdXJjZTtcbn07XG5leHBvcnQgdHlwZSBCaW5kR3JvdXBDYWNoZU9wdGlvbnMgPSB7XG5cdGRldmljZTogR1BVRGV2aWNlO1xuXHRsYWJlbDogc3RyaW5nO1xuXHRsYXlvdXQ6IEJpbmRHcm91cExheW91dDtcblx0ZW50aXJlczogQmluZEdyb3VwRW50aXR5W107XG5cdGluZGV4PzogbnVtYmVyO1xufTtcbmV4cG9ydCB0eXBlIEltYWdlRGF0YSA9IHtcblx0c291cmNlOiBJbWFnZUJpdG1hcCB8IEhUTUxDYW52YXNFbGVtZW50O1xuXHR3aWR0aD86IG51bWJlcjtcblx0aGVpZ2h0PzogbnVtYmVyO1xuXHRkZXB0aD86IG51bWJlcjtcblx0c291cmNlWD86IG51bWJlcjtcblx0c291cmNlWT86IG51bWJlcjtcblx0bWlwTGV2ZWw/OiBudW1iZXI7XG5cdHg/OiBudW1iZXI7XG5cdHk/OiBudW1iZXI7XG5cdHo/OiBudW1iZXI7XG5cdGFzcGVjdD86IFwiYWxsXCIgfCBcInN0ZW5jaWwtb25seVwiIHwgXCJkZXB0aC1vbmx5XCI7XG5cdGNvbG9yU3BhY2U/OiBcInNyZ2JcIjtcblx0cHJlbXVsdGlwbGllZEFscGhhPzogYm9vbGVhbjtcbn07XG5leHBvcnQgdHlwZSBXZWJHUFVUZXh0dXJlUHJvcHMgPSB7XG5cdHNpemU6IGV4dGVudDNERGljdDtcblxuXHRmb3JtYXQ6IHN0cmluZztcblxuXHR1c2FnZT86IG51bWJlcjtcblxuXHRzYW1wbGVyPzogU2FtcGxlcjtcblxuXHRkYXRhPzogSW1hZ2VEYXRhIHwgQXJyYXk8SW1hZ2VEYXRhPjtcblxuXHRtaXBMZXZlbENvdW50PzogbnVtYmVyO1xuXG5cdHNhbXBsZUNvdW50PzogbnVtYmVyO1xuXG5cdGRpbWVuc2lvbj86IGRpbWVuc2lvbjtcblxuXHR2aWV3Rm9ybWF0cz86IHN0cmluZztcblxuXHRzYW1wbGVUeXBlPzogc3RyaW5nO1xuXG5cdG5lZWRNaXBNYXA/OiBib29sZWFuO1xufTtcbmV4cG9ydCB0eXBlIGV4dGVudDNERGljdCA9IHtcblx0d2lkdGg6IG51bWJlcjtcblx0aGVpZ2h0OiBudW1iZXI7XG5cdGRlcHRoOiBudW1iZXI7XG59O1xuZXhwb3J0IHR5cGUgZGltZW5zaW9uID0gXCIxZFwiIHwgXCIyZFwiIHwgXCIzZFwiO1xuZXhwb3J0IHR5cGUgYnVmZmVyTGF5b3V0VHlwZSA9IHtcblx0dHlwZTogc3RyaW5nOyAvL1widW5pZm9ybVwiXG5cdGhhc0R5bmFtaWNPZmZzZXQ/OiBCb29sZWFuO1xuXHRtaW5CaW5kaW5nU2l6ZT86IG51bWJlcjtcbn07XG4vL3JlbmRlcnN0YXRlXG5leHBvcnQgdHlwZSBEZXB0aFN0ZW5jaWwgPSB7XG5cdGZvcm1hdDogVGV4dHVyZUZvcm1hdDtcblx0ZGVwdGhXcml0ZUVuYWJsZWQ6IGJvb2xlYW47XG5cdGRlcHRoQ29tcGFyZTogQ29tcGFyZUZ1bmN0aW9uO1xuXHRzdGVuY2lsUmVhZE1hc2s/OiBudW1iZXI7XG5cdHN0ZW5jaWxXcml0ZU1hc2s/OiBudW1iZXI7XG5cdHN0ZW5jaWxGcm9udD86IHtcblx0XHRjb21wYXJlOiBDb21wYXJlRnVuY3Rpb247XG5cdFx0ZmFpbE9wOiBTdGVuY2lsT3BlcmF0aW9uO1xuXHRcdGRlcHRoRmFpbE9wOiBTdGVuY2lsT3BlcmF0aW9uO1xuXHRcdHBhc3NPcDogU3RlbmNpbE9wZXJhdGlvbjtcblx0fTtcblx0c3RlbmNpbEJhY2s/OiB7XG5cdFx0Y29tcGFyZTogQ29tcGFyZUZ1bmN0aW9uO1xuXHRcdGZhaWxPcDogU3RlbmNpbE9wZXJhdGlvbjtcblx0XHRkZXB0aEZhaWxPcDogU3RlbmNpbE9wZXJhdGlvbjtcblx0XHRwYXNzT3A6IFN0ZW5jaWxPcGVyYXRpb247XG5cdH07XG5cdGRlcHRoQmlhcz86IG51bWJlcjtcblx0ZGVwdGhCaWFzU2xvcGVTY2FsZT86IG51bWJlcjtcblx0ZGVwdGhCaWFzQ2xhbXA/OiBudW1iZXI7XG59O1xuZXhwb3J0IHR5cGUgUHJpbWl0aXZlU3RhdGUgPSB7XG5cdGZyb250RmFjZT86IEZyb250RmFjZTtcblx0Y3VsbE1vZGU/OiBDdWxsTW9kZTtcblx0dW5jbGlwcGVkRGVwdGg/OiBib29sZWFuO1xuXHR0b3BvbG9neT86IFByaW1pdGl2ZVRvcG9sb2d5O1xuXHRzdHJpcEluZGV4Rm9ybWF0PzogSW5kZXhGb3JtYXQ7XG59O1xuZXhwb3J0IHR5cGUgTXVsdGlTYW1wbGUgPSB7XG5cdGNvdW50PzogbnVtYmVyO1xuXHRtYXNrPzogbnVtYmVyO1xuXHRhbHBoYVRvQ292ZXJhZ2VFbmFibGVkPzogYm9vbGVhbjtcbn07XG5leHBvcnQgdHlwZSBUYXJnZXQgPSB7XG5cdGZvcm1hdDogVGV4dHVyZUZvcm1hdDtcblx0YmxlbmQ/OiB7XG5cdFx0Y29sb3I6IHtcblx0XHRcdG9wZXJhdGlvbjogQmxlbmRPcGVyYXRpb247XG5cdFx0XHRzcmNGYWN0b3I6IEJsZW5kRmFjdG9yO1xuXHRcdFx0ZHN0RmFjdG9yOiBCbGVuZEZhY3Rvcjtcblx0XHR9O1xuXHRcdGFscGhhOiB7XG5cdFx0XHRvcGVyYXRpb246IEJsZW5kT3BlcmF0aW9uO1xuXHRcdFx0c3JjRmFjdG9yOiBCbGVuZEZhY3Rvcjtcblx0XHRcdGRzdEZhY3RvcjogQmxlbmRGYWN0b3I7XG5cdFx0fTtcblx0fTtcblx0d3JpdGVNYXNrOiBDb2xvcldyaXRlRmxhZ3M7XG59O1xuZXhwb3J0IHR5cGUgQmxlbmRDb25zdGFudCA9IHtcblx0cjogbnVtYmVyO1xuXHRnOiBudW1iZXI7XG5cdGI6IG51bWJlcjtcblx0YTogbnVtYmVyO1xufTtcbmV4cG9ydCB0eXBlIFJlbmRlclN0YXRlUHJvcHMgPSB7XG5cdGRlcHRoU3RlbmNpbD86IERlcHRoU3RlbmNpbDtcblx0cHJpbWl0aXZlPzogUHJpbWl0aXZlU3RhdGU7XG5cdG11bHRpc2FtcGxlPzogTXVsdGlTYW1wbGU7XG5cdHN0ZW5jaWxSZWZlcmVuY2U/OiBudW1iZXI7XG5cdHRhcmdldHM/OiBBcnJheTxUYXJnZXQ+O1xuXHR2aWV3cG9ydD86IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH07XG5cdGJsZW5kQ29uc3RhbnQ/OiBCbGVuZENvbnN0YW50O1xuXHRzY2lzc29yVGVzdEVuYWJsZWQ/OiBib29sZWFuO1xuXHRzdGVuY2lsRW5hYmxlZD86IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgVmlld1BvcnQgPSB7XG5cdHg6IG51bWJlcjtcblx0eTogbnVtYmVyO1xuXHR3aWR0aDogbnVtYmVyO1xuXHRoZWlnaHQ6IG51bWJlcjtcbn07XG5leHBvcnQgdHlwZSBTY2lzc29yVGVzdCA9IHtcblx0eDogbnVtYmVyO1xuXHR5OiBudW1iZXI7XG5cdHdpZHRoOiBudW1iZXI7XG5cdGhlaWdodDogbnVtYmVyO1xufTtcbmV4cG9ydCB0eXBlIFNoYWRlck1hdGVyaWFsUGFybXMgPSB7XG5cdHR5cGU6IHN0cmluZztcblx0ZnJhZzogc3RyaW5nO1xuXHR2ZXJ0OiBzdHJpbmc7XG5cdHVuaWZvcm1zOiB7IFt1bmlmb3JtOiBzdHJpbmddOiBJVW5pZm9ybSB9O1xuXHRkZWZpbmVzPzogYW55O1xufTtcbmV4cG9ydCBpbnRlcmZhY2UgSVVuaWZvcm08VFZhbHVlID0gYW55PiB7XG5cdHR5cGU6IHN0cmluZztcblx0dmFsdWU6IFRWYWx1ZTtcbn1cbmV4cG9ydCB0eXBlIFVuaWZvcm1zID0geyBbdW5pZm9ybTogc3RyaW5nXTogSVVuaWZvcm0gfTtcbiIsImltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9yZW5kZXIvVGV4dHVyZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1pcG1hcEdlbmVyYXRvciB7XHJcbiAgZGV2aWNlOiBHUFVEZXZpY2U7XHJcbiAgc2FtcGxlcjogR1BVU2FtcGxlcjtcclxuICBwaXBlbGluZXM6IHt9O1xyXG4gIG1pcG1hcFNoYWRlck1vZHVsZTogR1BVU2hhZGVyTW9kdWxlO1xyXG4gIGNvbnN0cnVjdG9yKGRldmljZSkge1xyXG4gICAgdGhpcy5kZXZpY2UgPSBkZXZpY2U7XHJcbiAgICB0aGlzLnNhbXBsZXIgPSBkZXZpY2UuY3JlYXRlU2FtcGxlcih7IG1pbkZpbHRlcjogXCJsaW5lYXJcIiB9KTtcclxuICAgIC8vIFdlJ2xsIG5lZWQgYSBuZXcgcGlwZWxpbmUgZm9yIGV2ZXJ5IHRleHR1cmUgZm9ybWF0IHVzZWQuXHJcbiAgICB0aGlzLnBpcGVsaW5lcyA9IHt9O1xyXG4gIH1cclxuICBwcml2YXRlIGdldE1pcG1hcFBpcGVsaW5lKGZvcm1hdCkge1xyXG4gICAgbGV0IHBpcGVsaW5lID0gdGhpcy5waXBlbGluZXNbZm9ybWF0XTtcclxuICAgIGlmICghcGlwZWxpbmUpIHtcclxuICAgICAgLy8gU2hhZGVyIG1vZHVsZXMgaXMgc2hhcmVkIGJldHdlZW4gYWxsIHBpcGVsaW5lcywgc28gb25seSBjcmVhdGUgb25jZS5cclxuICAgICAgaWYgKCF0aGlzLm1pcG1hcFNoYWRlck1vZHVsZSkge1xyXG4gICAgICAgIHRoaXMubWlwbWFwU2hhZGVyTW9kdWxlID0gdGhpcy5kZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHtcclxuICAgICAgICAgIGNvZGU6IGBcclxuICAgICAgICAgICAgICB2YXI8cHJpdmF0ZT4gcG9zIDogYXJyYXk8dmVjMjxmMzI+LCAzPiA9IGFycmF5PHZlYzI8ZjMyPiwgMz4oXHJcbiAgICAgICAgICAgICAgICB2ZWMyPGYzMj4oLTEuMCwgLTEuMCksIHZlYzI8ZjMyPigtMS4wLCAzLjApLCB2ZWMyPGYzMj4oMy4wLCAtMS4wKSk7XHJcbiAgICAgICAgICAgICAgc3RydWN0IFZlcnRleE91dHB1dCB7XHJcbiAgICAgICAgICAgICAgICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb24gOiB2ZWM0PGYzMj4sXHJcbiAgICAgICAgICAgICAgICBAbG9jYXRpb24oMCkgdGV4Q29vcmQgOiB2ZWMyPGYzMj4sXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICBAdmVydGV4XHJcbiAgICAgICAgICAgICAgZm4gdmVydGV4TWFpbihAYnVpbHRpbih2ZXJ0ZXhfaW5kZXgpIHZlcnRleEluZGV4IDogdTMyKSAtPiBWZXJ0ZXhPdXRwdXQge1xyXG4gICAgICAgICAgICAgICAgdmFyIG91dHB1dCA6IFZlcnRleE91dHB1dDtcclxuICAgICAgICAgICAgICAgIG91dHB1dC50ZXhDb29yZCA9IHBvc1t2ZXJ0ZXhJbmRleF0gKiB2ZWMyPGYzMj4oMC41LCAtMC41KSArIHZlYzI8ZjMyPigwLjUpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnBvc2l0aW9uID0gdmVjNDxmMzI+KHBvc1t2ZXJ0ZXhJbmRleF0sIDAuMCwgMS4wKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygwKSB2YXIgaW1nU2FtcGxlciA6IHNhbXBsZXI7XHJcbiAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKDEpIHZhciBpbWcgOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICAgQGZyYWdtZW50XHJcbiAgICAgICAgICAgICAgZm4gZnJhZ21lbnRNYWluKEBsb2NhdGlvbigwKSB0ZXhDb29yZCA6IHZlYzI8ZjMyPikgLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dHVyZVNhbXBsZShpbWcsIGltZ1NhbXBsZXIsIHRleENvb3JkKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGAsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBpcGVsaW5lID0gdGhpcy5kZXZpY2UuY3JlYXRlUmVuZGVyUGlwZWxpbmUoe1xyXG4gICAgICAgIGxheW91dDogXCJhdXRvXCIsXHJcbiAgICAgICAgdmVydGV4OiB7XHJcbiAgICAgICAgICBtb2R1bGU6IHRoaXMubWlwbWFwU2hhZGVyTW9kdWxlLFxyXG4gICAgICAgICAgZW50cnlQb2ludDogXCJ2ZXJ0ZXhNYWluXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcmFnbWVudDoge1xyXG4gICAgICAgICAgbW9kdWxlOiB0aGlzLm1pcG1hcFNoYWRlck1vZHVsZSxcclxuICAgICAgICAgIGVudHJ5UG9pbnQ6IFwiZnJhZ21lbnRNYWluXCIsXHJcbiAgICAgICAgICB0YXJnZXRzOiBbeyBmb3JtYXQgfV0sXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucGlwZWxpbmVzW2Zvcm1hdF0gPSBwaXBlbGluZTtcclxuICAgIH1cclxuICAgIHJldHVybiBwaXBlbGluZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdlbmVyYXRlcyBtaXBtYXBzIGZvciB0aGUgZ2l2ZW4gR1BVVGV4dHVyZSBmcm9tIHRoZSBkYXRhIGluIGxldmVsIDAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge21vZHVsZTpFeHRlcm5hbC5HUFVUZXh0dXJlfSB0ZXh0dXJlIC0gVGV4dHVyZSB0byBnZW5lcmF0ZSBtaXBtYXBzIGZvci5cclxuICAgKiBAcGFyYW0ge29iamVjdH0gdGV4dHVyZURlc2NyaXB0b3IgLSBHUFVUZXh0dXJlRGVzY3JpcHRvciB0aGUgdGV4dHVyZSB3YXMgY3JlYXRlZCB3aXRoLlxyXG4gICAqIEByZXR1cm5zIHttb2R1bGU6RXh0ZXJuYWwuR1BVVGV4dHVyZX0gLSBUaGUgb3JpZ2luYWxseSBwYXNzZWQgdGV4dHVyZVxyXG4gICAqL1xyXG4gIGdlbmVyYXRlTWlwbWFwKHNvdXJjZVRleHR1cmU6IFRleHR1cmUpIHtcclxuICAgIGNvbnN0IHRleHR1cmUgPSBzb3VyY2VUZXh0dXJlLmdwdVRleHR1cmU7XHJcbiAgICBjb25zdCB0ZXh0dXJlRGVzY3JpcHRvciA9IHNvdXJjZVRleHR1cmUudGV4dHVyZVByb3A7XHJcbiAgICAvLyBUT0RPOiBEb2VzIHRoaXMgbmVlZCB0byBoYW5kbGUgc1JHQiBmb3JtYXRzIGRpZmZlcmVudGx5P1xyXG4gICAgY29uc3QgcGlwZWxpbmUgPSB0aGlzLmdldE1pcG1hcFBpcGVsaW5lKHRleHR1cmVEZXNjcmlwdG9yLmZvcm1hdCk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB0ZXh0dXJlRGVzY3JpcHRvci5kaW1lbnNpb24gPT0gXCIzZFwiIHx8XHJcbiAgICAgIHRleHR1cmVEZXNjcmlwdG9yLmRpbWVuc2lvbiA9PSBcIjFkXCJcclxuICAgICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgXCJHZW5lcmF0aW5nIG1pcG1hcHMgZm9yIG5vbi0yZCB0ZXh0dXJlcyBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQhXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbWlwVGV4dHVyZSA9IHRleHR1cmU7XHJcbiAgICBjb25zdCBhcnJheUxheWVyQ291bnQgPSB0ZXh0dXJlRGVzY3JpcHRvci5zaXplLmRlcHRoIHx8IDE7IC8vIE9ubHkgdmFsaWQgZm9yIDJEIHRleHR1cmVzLlxyXG5cclxuICAgIC8vIElmIHRoZSB0ZXh0dXJlIHdhcyBjcmVhdGVkIHdpdGggUkVOREVSX0FUVEFDSE1FTlQgdXNhZ2Ugd2UgY2FuIHJlbmRlciBkaXJlY3RseSBiZXR3ZWVuIG1pcCBsZXZlbHMuXHJcbiAgICBjb25zdCByZW5kZXJUb1NvdXJjZSA9XHJcbiAgICAgIHRleHR1cmVEZXNjcmlwdG9yLnVzYWdlICYgR1BVVGV4dHVyZVVzYWdlLlJFTkRFUl9BVFRBQ0hNRU5UO1xyXG4gICAgaWYgKCFyZW5kZXJUb1NvdXJjZSkge1xyXG4gICAgICAvLyBPdGhlcndpc2Ugd2UgaGF2ZSB0byB1c2UgYSBzZXBhcmF0ZSB0ZXh0dXJlIHRvIHJlbmRlciBpbnRvLiBJdCBjYW4gYmUgb25lIG1pcCBsZXZlbCBzbWFsbGVyIHRoYW4gdGhlIHNvdXJjZVxyXG4gICAgICAvLyB0ZXh0dXJlLCBzaW5jZSB3ZSBhbHJlYWR5IGhhdmUgdGhlIHRvcCBsZXZlbC5cclxuICAgICAgY29uc3QgbWlwVGV4dHVyZURlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgc2l6ZToge1xyXG4gICAgICAgICAgd2lkdGg6IE1hdGguY2VpbCh0ZXh0dXJlRGVzY3JpcHRvci5zaXplLndpZHRoIC8gMiksXHJcbiAgICAgICAgICBoZWlnaHQ6IE1hdGguY2VpbCh0ZXh0dXJlRGVzY3JpcHRvci5zaXplLmhlaWdodCAvIDIpLFxyXG4gICAgICAgICAgZGVwdGhPckFycmF5TGF5ZXJzOiBhcnJheUxheWVyQ291bnQsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmb3JtYXQ6IDxHUFVUZXh0dXJlRm9ybWF0PnRleHR1cmVEZXNjcmlwdG9yLmZvcm1hdCxcclxuICAgICAgICB1c2FnZTpcclxuICAgICAgICAgIEdQVVRleHR1cmVVc2FnZS5URVhUVVJFX0JJTkRJTkcgfFxyXG4gICAgICAgICAgR1BVVGV4dHVyZVVzYWdlLkNPUFlfU1JDIHxcclxuICAgICAgICAgIEdQVVRleHR1cmVVc2FnZS5SRU5ERVJfQVRUQUNITUVOVCxcclxuICAgICAgICBtaXBMZXZlbENvdW50OiB0ZXh0dXJlRGVzY3JpcHRvci5taXBMZXZlbENvdW50IC0gMSxcclxuICAgICAgfTtcclxuICAgICAgbWlwVGV4dHVyZSA9IHRoaXMuZGV2aWNlLmNyZWF0ZVRleHR1cmUobWlwVGV4dHVyZURlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvbW1hbmRFbmNvZGVyID0gdGhpcy5kZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoe30pO1xyXG4gICAgLy8gVE9ETzogQ29uc2lkZXIgbWFraW5nIHRoaXMgc3RhdGljLlxyXG4gICAgY29uc3QgYmluZEdyb3VwTGF5b3V0ID0gcGlwZWxpbmUuZ2V0QmluZEdyb3VwTGF5b3V0KDApO1xyXG5cclxuICAgIGZvciAobGV0IGFycmF5TGF5ZXIgPSAwOyBhcnJheUxheWVyIDwgYXJyYXlMYXllckNvdW50OyArK2FycmF5TGF5ZXIpIHtcclxuICAgICAgbGV0IHNyY1ZpZXcgPSB0ZXh0dXJlLmNyZWF0ZVZpZXcoe1xyXG4gICAgICAgIGJhc2VNaXBMZXZlbDogMCxcclxuICAgICAgICBtaXBMZXZlbENvdW50OiAxLFxyXG4gICAgICAgIGRpbWVuc2lvbjogXCIyZFwiLFxyXG4gICAgICAgIGJhc2VBcnJheUxheWVyOiBhcnJheUxheWVyLFxyXG4gICAgICAgIGFycmF5TGF5ZXJDb3VudDogMSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBsZXQgZHN0TWlwTGV2ZWwgPSByZW5kZXJUb1NvdXJjZSA/IDEgOiAwO1xyXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRleHR1cmVEZXNjcmlwdG9yLm1pcExldmVsQ291bnQ7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGRzdFZpZXcgPSBtaXBUZXh0dXJlLmNyZWF0ZVZpZXcoe1xyXG4gICAgICAgICAgYmFzZU1pcExldmVsOiBkc3RNaXBMZXZlbCsrLFxyXG4gICAgICAgICAgbWlwTGV2ZWxDb3VudDogMSxcclxuICAgICAgICAgIGRpbWVuc2lvbjogXCIyZFwiLFxyXG4gICAgICAgICAgYmFzZUFycmF5TGF5ZXI6IGFycmF5TGF5ZXIsXHJcbiAgICAgICAgICBhcnJheUxheWVyQ291bnQ6IDEsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhc3NFbmNvZGVyID0gY29tbWFuZEVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKHtcclxuICAgICAgICAgIGNvbG9yQXR0YWNobWVudHM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHZpZXc6IGRzdFZpZXcsXHJcbiAgICAgICAgICAgICAgbG9hZE9wOiBcImNsZWFyXCIsXHJcbiAgICAgICAgICAgICAgc3RvcmVPcDogXCJzdG9yZVwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgYmluZEdyb3VwID0gdGhpcy5kZXZpY2UuY3JlYXRlQmluZEdyb3VwKHtcclxuICAgICAgICAgIGxheW91dDogYmluZEdyb3VwTGF5b3V0LFxyXG4gICAgICAgICAgZW50cmllczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgYmluZGluZzogMCxcclxuICAgICAgICAgICAgICByZXNvdXJjZTogdGhpcy5zYW1wbGVyLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgYmluZGluZzogMSxcclxuICAgICAgICAgICAgICByZXNvdXJjZTogc3JjVmlldyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHBhc3NFbmNvZGVyLnNldFBpcGVsaW5lKHBpcGVsaW5lKTtcclxuICAgICAgICBwYXNzRW5jb2Rlci5zZXRCaW5kR3JvdXAoMCwgYmluZEdyb3VwKTtcclxuICAgICAgICBwYXNzRW5jb2Rlci5kcmF3KDMsIDEsIDAsIDApO1xyXG4gICAgICAgIHBhc3NFbmNvZGVyLmVuZCgpO1xyXG5cclxuICAgICAgICBzcmNWaWV3ID0gZHN0VmlldztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHdlIGRpZG4ndCByZW5kZXIgdG8gdGhlIHNvdXJjZSB0ZXh0dXJlLCBmaW5pc2ggYnkgY29weWluZyB0aGUgbWlwIHJlc3VsdHMgZnJvbSB0aGUgdGVtcG9yYXJ5IG1pcG1hcCB0ZXh0dXJlXHJcbiAgICAvLyB0byB0aGUgc291cmNlLlxyXG4gICAgaWYgKCFyZW5kZXJUb1NvdXJjZSkge1xyXG4gICAgICBjb25zdCBtaXBMZXZlbFNpemUgPSB7XHJcbiAgICAgICAgd2lkdGg6IE1hdGguY2VpbCh0ZXh0dXJlRGVzY3JpcHRvci5zaXplLndpZHRoIC8gMiksXHJcbiAgICAgICAgaGVpZ2h0OiBNYXRoLmNlaWwodGV4dHVyZURlc2NyaXB0b3Iuc2l6ZS5oZWlnaHQgLyAyKSxcclxuICAgICAgICBkZXB0aE9yQXJyYXlMYXllcnM6IGFycmF5TGF5ZXJDb3VudCxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGV4dHVyZURlc2NyaXB0b3IubWlwTGV2ZWxDb3VudDsgKytpKSB7XHJcbiAgICAgICAgY29tbWFuZEVuY29kZXIuY29weVRleHR1cmVUb1RleHR1cmUoXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHRleHR1cmU6IG1pcFRleHR1cmUsXHJcbiAgICAgICAgICAgIG1pcExldmVsOiBpIC0gMSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHRleHR1cmU6IHRleHR1cmUsXHJcbiAgICAgICAgICAgIG1pcExldmVsOiBpLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG1pcExldmVsU2l6ZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIG1pcExldmVsU2l6ZS53aWR0aCA9IE1hdGguY2VpbChtaXBMZXZlbFNpemUud2lkdGggLyAyKTtcclxuICAgICAgICBtaXBMZXZlbFNpemUuaGVpZ2h0ID0gTWF0aC5jZWlsKG1pcExldmVsU2l6ZS5oZWlnaHQgLyAyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGV2aWNlLnF1ZXVlLnN1Ym1pdChbY29tbWFuZEVuY29kZXIuZmluaXNoKCldKTtcclxuXHJcbiAgICBpZiAoIXJlbmRlclRvU291cmNlKSB7XHJcbiAgICAgIG1pcFRleHR1cmUuZGVzdHJveSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0ZXh0dXJlO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgQmluZEdyb3VwTGF5b3V0IGZyb20gXCIuL0JpbmRHcm91cExheW91dFwiO1xyXG5cclxuY29uc3QgcGlwZWxpbmVMYXlvdXRDYWNoZSA9IG5ldyBNYXAoKTtcclxuZXhwb3J0IGNsYXNzIFBpcGVsaW5lTGF5b3V0IHtcclxuICBwdWJsaWMgZ3B1UGlwZWxpbmVMYXlvdXQ6IEdQVVBpcGVsaW5lTGF5b3V0O1xyXG4gIGluZGV4OiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcclxuICAgIGRldmljZTogR1BVRGV2aWNlLFxyXG4gICAgbGFiZWw6IHN0cmluZyxcclxuICAgIHB1YmxpYyBncm91cExheW91dHM6IEJpbmRHcm91cExheW91dFtdID0gW10sXHJcbiAgICBpbmRleD86IG51bWJlclxyXG4gICkge1xyXG4gICAgdGhpcy5pbmRleCA9IGluZGV4IHx8IDA7XHJcbiAgICB0aGlzLmdwdVBpcGVsaW5lTGF5b3V0ID0gZGV2aWNlLmNyZWF0ZVBpcGVsaW5lTGF5b3V0KHtcclxuICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICBiaW5kR3JvdXBMYXlvdXRzOiBncm91cExheW91dHMubWFwKChsYXlvdXQpID0+IHtcclxuICAgICAgICByZXR1cm4gbGF5b3V0LmdwdUJpbmRHcm91cExheW91dDtcclxuICAgICAgfSksXHJcbiAgICB9KTtcclxuICB9XHJcbiAgc3RhdGljIGdldFBpcGVsaW5lTGF5b3V0RnJvbUNhY2hlKFxyXG4gICAgZGV2aWNlOiBHUFVEZXZpY2UsXHJcbiAgICBsYWJlbDogc3RyaW5nLFxyXG4gICAgZ3JvdXBMYXlvdXRzOiBCaW5kR3JvdXBMYXlvdXRbXVxyXG4gICk6IFBpcGVsaW5lTGF5b3V0IHtcclxuICAgIGlmIChwaXBlbGluZUxheW91dENhY2hlLmhhcyhsYWJlbCkpIHtcclxuICAgICAgcmV0dXJuIHBpcGVsaW5lTGF5b3V0Q2FjaGUuZ2V0KGxhYmVsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGJpbmRHcm91cExheW91dCA9IG5ldyBQaXBlbGluZUxheW91dChkZXZpY2UsIGxhYmVsLCBncm91cExheW91dHMpO1xyXG4gICAgICBwaXBlbGluZUxheW91dENhY2hlLnNldChsYWJlbCwgYmluZEdyb3VwTGF5b3V0KTtcclxuICAgICAgcmV0dXJuIGJpbmRHcm91cExheW91dDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEJpbmRHcm91cExheW91dCBmcm9tIFwiLi9CaW5kR3JvdXBMYXlvdXRcIjtcclxuaW1wb3J0IERyYXdDb21tYW5kIGZyb20gXCIuL0RyYXdDb21tYW5kXCI7XHJcbmltcG9ydCB7IFBpcGVsaW5lTGF5b3V0IH0gZnJvbSBcIi4vUGlwZWxpbmVMYXlvdXRcIjtcclxuaW1wb3J0IHsgUmVuZGVyU3RhdGUgfSBmcm9tIFwiLi9SZW5kZXJTdGF0ZVwiO1xyXG5cclxuY29uc3QgcmVuZGVyUGlwZWxpbmVzID0gbmV3IE1hcCgpO1xyXG5jb25zdCBjb21wdXRlUGlwZWxpbmVzID0gbmV3IE1hcCgpO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaXBlbGluZSB7XHJcblx0Z3B1UGlwZWxpbmU6IEdQVVJlbmRlclBpcGVsaW5lIHwgR1BVQ29tcHV0ZVBpcGVsaW5lO1xyXG5cdHR5cGU6IHN0cmluZztcclxuXHRkZXZpY2U6IEdQVURldmljZTtcclxuXHRkZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgfCBHUFVDb21wdXRlUGlwZWxpbmVEZXNjcmlwdG9yO1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0dHlwZTogc3RyaW5nLFxyXG5cdFx0ZGV2aWNlOiBHUFVEZXZpY2UsXHJcblx0XHRkZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgfCBHUFVDb21wdXRlUGlwZWxpbmVEZXNjcmlwdG9yXHJcblx0KSB7XHJcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xyXG5cdFx0dGhpcy5kZXNjcmlwdG9yID0gZGVzY3JpcHRvcjtcclxuXHRcdHRoaXMuZGV2aWNlID0gZGV2aWNlO1xyXG5cdFx0dGhpcy5jcmVhdGVQaXBlbGluZSgpO1xyXG5cdH1cclxuXHRwcml2YXRlIGNyZWF0ZVBpcGVsaW5lKCkge1xyXG5cdFx0aWYgKHRoaXMudHlwZSA9PSBcInJlbmRlclwiKSB7XHJcblx0XHRcdHRoaXMuZ3B1UGlwZWxpbmUgPSB0aGlzLmRldmljZS5jcmVhdGVSZW5kZXJQaXBlbGluZSh0aGlzLmRlc2NyaXB0b3IgYXMgR1BVUmVuZGVyUGlwZWxpbmVEZXNjcmlwdG9yKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuZ3B1UGlwZWxpbmUgPSB0aGlzLmRldmljZS5jcmVhdGVDb21wdXRlUGlwZWxpbmUodGhpcy5kZXNjcmlwdG9yIGFzIEdQVUNvbXB1dGVQaXBlbGluZURlc2NyaXB0b3IpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRwdWJsaWMgYmluZChwYXNzRW5jb2RlcjogR1BVUmVuZGVyUGFzc0VuY29kZXIgfCBHUFVDb21wdXRlUGFzc0VuY29kZXIpIHtcclxuXHRcdGlmICh0aGlzLnR5cGUgPT0gXCJyZW5kZXJcIikge1xyXG5cdFx0XHQocGFzc0VuY29kZXIgYXMgR1BVUmVuZGVyUGFzc0VuY29kZXIpLnNldFBpcGVsaW5lKHRoaXMuZ3B1UGlwZWxpbmUgYXMgR1BVUmVuZGVyUGlwZWxpbmUpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0KHBhc3NFbmNvZGVyIGFzIEdQVUNvbXB1dGVQYXNzRW5jb2Rlcikuc2V0UGlwZWxpbmUodGhpcy5ncHVQaXBlbGluZSBhcyBHUFVDb21wdXRlUGlwZWxpbmUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRzdGF0aWMgZ2V0UmVuZGVyUGlwZWxpbmVGcm9tQ2FjaGUoXHJcblx0XHRkZXZpY2U6IEdQVURldmljZSxcclxuXHRcdGRyYXdDb21hbmQ6IERyYXdDb21tYW5kLFxyXG5cdFx0Z3JvdXBMYXlvdXRzOiBCaW5kR3JvdXBMYXlvdXRbXVxyXG5cdCk6IFBpcGVsaW5lIHtcclxuXHRcdGNvbnN0IHsgcmVuZGVyU3RhdGUsIHNoYWRlclNvdXJjZSB9ID0gZHJhd0NvbWFuZDtcclxuXHRcdGNvbnN0IHJzU3RyID0gSlNPTi5zdHJpbmdpZnkocmVuZGVyU3RhdGUpO1xyXG5cdFx0Y29uc3QgY29tYmluZVN0ciA9IHNoYWRlclNvdXJjZS51aWQuY29uY2F0KHJzU3RyKTtcclxuXHRcdGNvbnN0IGhhc2hJZCA9IHN0cmluZ1RvSGFzaChjb21iaW5lU3RyKTtcclxuXHRcdGNvbnN0IGNvbWJpbmVMYXlvdXRzID0gZ3JvdXBMYXlvdXRzLnNvcnQoKGxheW91dDEsIGxheW91dDIpID0+IGxheW91dDEuaW5kZXggLSBsYXlvdXQyLmluZGV4KTtcclxuXHRcdGxldCBwaXBlbGluZSA9IHJlbmRlclBpcGVsaW5lcy5nZXQoaGFzaElkKTtcclxuXHRcdGlmICghcGlwZWxpbmUpIHtcclxuXHRcdFx0Y29uc3QgZGVzY3JpcHRvciA9IFBpcGVsaW5lLmdldFBpcGVsaW5lRGVzY3JpcHRvcihcclxuXHRcdFx0XHRkZXZpY2UsXHJcblx0XHRcdFx0ZHJhd0NvbWFuZCxcclxuXHRcdFx0XHRyZW5kZXJTdGF0ZSxcclxuXHRcdFx0XHRjb21iaW5lTGF5b3V0cyxcclxuXHRcdFx0XHRoYXNoSWQudG9TdHJpbmcoKVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRwaXBlbGluZSA9IG5ldyBQaXBlbGluZShcInJlbmRlclwiLCBkZXZpY2UsIGRlc2NyaXB0b3IpO1xyXG5cdFx0XHRyZW5kZXJQaXBlbGluZXMuc2V0KGhhc2hJZCwgcGlwZWxpbmUpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHBpcGVsaW5lO1xyXG5cdH1cclxuXHRzdGF0aWMgZ2V0Q29tcHV0ZVBpcGVsaW5lRnJvbUNhY2hlKFxyXG5cdFx0ZGV2aWNlOiBHUFVEZXZpY2UsXHJcblx0XHRkcmF3Q29tYW5kOiBEcmF3Q29tbWFuZCxcclxuXHRcdGdyb3VwTGF5b3V0czogQmluZEdyb3VwTGF5b3V0W11cclxuXHQpOiBQaXBlbGluZSB7XHJcblx0XHRjb25zdCB7IHNoYWRlclNvdXJjZSB9ID0gZHJhd0NvbWFuZDtcclxuXHRcdGNvbnN0IGhhc2hJZCA9IHN0cmluZ1RvSGFzaChzaGFkZXJTb3VyY2UudWlkKTtcclxuXHRcdGxldCBwaXBlbGluZSA9IGNvbXB1dGVQaXBlbGluZXMuZ2V0KGhhc2hJZCk7XHJcblx0XHRpZiAoIXBpcGVsaW5lKSB7XHJcblx0XHRcdGNvbnN0IHsgc2hhZGVyU291cmNlIH0gPSBkcmF3Q29tYW5kO1xyXG5cdFx0XHRwaXBlbGluZSA9IGRldmljZS5jcmVhdGVDb21wdXRlUGlwZWxpbmUoe1xyXG5cdFx0XHRcdGxheW91dDogUGlwZWxpbmVMYXlvdXQuZ2V0UGlwZWxpbmVMYXlvdXRGcm9tQ2FjaGUoZGV2aWNlLCBoYXNoSWQudG9TdHJpbmcoKSwgZ3JvdXBMYXlvdXRzKVxyXG5cdFx0XHRcdFx0LmdwdVBpcGVsaW5lTGF5b3V0LFxyXG5cdFx0XHRcdGNvbXB1dGU6IHtcclxuXHRcdFx0XHRcdG1vZHVsZTogc2hhZGVyU291cmNlLmNyZWF0ZVNoYWRlck1vZHVsZShkZXZpY2UpIGFzIEdQVVNoYWRlck1vZHVsZSxcclxuXHRcdFx0XHRcdGVudHJ5UG9pbnQ6IHNoYWRlclNvdXJjZS5jb21wdXRlTWFpblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdGNvbXB1dGVQaXBlbGluZXMuc2V0KGhhc2hJZCwgcGlwZWxpbmUpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHBpcGVsaW5lO1xyXG5cdH1cclxuXHRwcml2YXRlIHN0YXRpYyBnZXRQaXBlbGluZURlc2NyaXB0b3IoXHJcblx0XHRkZXZpY2U6IEdQVURldmljZSxcclxuXHRcdGRyYXdDb21hbmQ6IERyYXdDb21tYW5kLFxyXG5cdFx0cmVuZGVyU3RhdGU6IFJlbmRlclN0YXRlLFxyXG5cdFx0Z3JvdXBMYXlvdXRzOiBCaW5kR3JvdXBMYXlvdXRbXSxcclxuXHRcdGhhc2hJZDogc3RyaW5nXHJcblx0KTogR1BVUmVuZGVyUGlwZWxpbmVEZXNjcmlwdG9yIHtcclxuXHRcdGNvbnN0IHsgdmVydGV4QnVmZmVyLCBzaGFkZXJTb3VyY2UgfSA9IGRyYXdDb21hbmQ7XHJcblx0XHRjb25zdCB7IHZlcnQsIGZyYWcgfSA9IHNoYWRlclNvdXJjZS5jcmVhdGVTaGFkZXJNb2R1bGUoZGV2aWNlKSBhcyB7XHJcblx0XHRcdHZlcnQ6IEdQVVNoYWRlck1vZHVsZTtcclxuXHRcdFx0ZnJhZzogR1BVU2hhZGVyTW9kdWxlO1xyXG5cdFx0fTtcclxuXHRcdGNvbnN0IHBpcGVsaW5lRGVjID0ge1xyXG5cdFx0XHRsYXlvdXQ6IFBpcGVsaW5lTGF5b3V0LmdldFBpcGVsaW5lTGF5b3V0RnJvbUNhY2hlKGRldmljZSwgaGFzaElkLCBncm91cExheW91dHMpLmdwdVBpcGVsaW5lTGF5b3V0XHJcblx0XHR9IGFzIGFueTtcclxuXHRcdGlmICh2ZXJ0KVxyXG5cdFx0XHRwaXBlbGluZURlYy52ZXJ0ZXggPSB7XHJcblx0XHRcdFx0bW9kdWxlOiB2ZXJ0LFxyXG5cdFx0XHRcdGVudHJ5UG9pbnQ6IHNoYWRlclNvdXJjZS52ZXJ0RW50cnlQb2ludCxcclxuXHRcdFx0XHRidWZmZXJzOiB2ZXJ0ZXhCdWZmZXIuZ2V0QnVmZmVyRGVzKCkgYXMgSXRlcmFibGU8R1BVVmVydGV4QnVmZmVyTGF5b3V0PlxyXG5cdFx0XHR9O1xyXG5cdFx0aWYgKHJlbmRlclN0YXRlLnByaW1pdGl2ZSkgcGlwZWxpbmVEZWMucHJpbWl0aXZlID0gcmVuZGVyU3RhdGUucHJpbWl0aXZlLmdldEdQVVByaW1pdGl2ZURlYygpO1xyXG5cdFx0aWYgKHJlbmRlclN0YXRlLmRlcHRoU3RlbmNpbCkgcGlwZWxpbmVEZWMuZGVwdGhTdGVuY2lsID0gcmVuZGVyU3RhdGUuZGVwdGhTdGVuY2lsLmdldEdQVURlcHRoU3RlbmNpbERlYygpO1xyXG5cdFx0aWYgKHJlbmRlclN0YXRlLm11bHRpc2FtcGxlKSBwaXBlbGluZURlYy5tdWx0aXNhbXBsZSA9IHJlbmRlclN0YXRlLm11bHRpc2FtcGxlLmdldE11bHRpU2FtcGxlRGVjKCk7XHJcblx0XHRpZiAoZnJhZylcclxuXHRcdFx0cGlwZWxpbmVEZWMuZnJhZ21lbnQgPSB7XHJcblx0XHRcdFx0bW9kdWxlOiBmcmFnLFxyXG5cdFx0XHRcdGVudHJ5UG9pbnQ6IHNoYWRlclNvdXJjZS5mcmFnRW50cnlQb2ludCxcclxuXHRcdFx0XHR0YXJnZXRzOiByZW5kZXJTdGF0ZS50YXJnZXRzLm1hcCgodGFyZ2V0KSA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmdldEdQVVRhcmdldERlYygpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH07XHJcblx0XHRyZXR1cm4gcGlwZWxpbmVEZWM7XHJcblx0XHQvLyByZXR1cm4ge1xyXG5cdFx0Ly8gICAvL+mcgOimgeaUueWKqFxyXG5cdFx0Ly8gICBsYXlvdXQ6IFBpcGVsaW5lTGF5b3V0LmdldFBpcGVsaW5lTGF5b3V0RnJvbUNhY2hlKFxyXG5cdFx0Ly8gICAgIGRldmljZSxcclxuXHRcdC8vICAgICBoYXNoSWQsXHJcblx0XHQvLyAgICAgZ3JvdXBMYXlvdXRzXHJcblx0XHQvLyAgICkuZ3B1UGlwZWxpbmVMYXlvdXQsXHJcblx0XHQvLyAgIHZlcnRleDoge1xyXG5cdFx0Ly8gICAgIG1vZHVsZTogdmVydCxcclxuXHRcdC8vICAgICBlbnRyeVBvaW50OiBzaGFkZXJTb3VyY2UudmVydEVudHJ5UG9pbnQsXHJcblx0XHQvLyAgICAgYnVmZmVyczogdmVydGV4QnVmZmVyLmdldEJ1ZmZlckRlcygpIGFzIEl0ZXJhYmxlPEdQVVZlcnRleEJ1ZmZlckxheW91dD4sXHJcblx0XHQvLyAgIH0sXHJcblx0XHQvLyAgIHByaW1pdGl2ZTogcmVuZGVyU3RhdGUucHJpbWl0aXZlLFxyXG5cdFx0Ly8gICBkZXB0aFN0ZW5jaWw6IHJlbmRlclN0YXRlLmRlcHRoU3RlbmNpbCBhcyBHUFVEZXB0aFN0ZW5jaWxTdGF0ZSxcclxuXHRcdC8vICAgbXVsdGlzYW1wbGU6IHJlbmRlclN0YXRlLm11bHRpc2FtcGxlLFxyXG5cdFx0Ly8gICBmcmFnbWVudDoge1xyXG5cdFx0Ly8gICAgIG1vZHVsZTogZnJhZyxcclxuXHRcdC8vICAgICBlbnRyeVBvaW50OiBzaGFkZXJTb3VyY2UuZnJhZ0VudHJ5UG9pbnQsXHJcblx0XHQvLyAgICAgdGFyZ2V0czogcmVuZGVyU3RhdGUudGFyZ2V0cyBhcyBJdGVyYWJsZTxHUFVDb2xvclRhcmdldFN0YXRlPixcclxuXHRcdC8vICAgfSxcclxuXHRcdC8vIH07XHJcblx0fVxyXG59XHJcbi8vIEJvcnJvd2VkIGZyb20gaHR0cHM6Ly93ZXJ4bHRkLmNvbS93cC8yMDEwLzA1LzEzL2phdmFzY3JpcHQtaW1wbGVtZW50YXRpb24tb2YtamF2YXMtc3RyaW5nLWhhc2hjb2RlLW1ldGhvZC9cclxuZnVuY3Rpb24gc3RyaW5nVG9IYXNoKHN0cikge1xyXG5cdGxldCBoYXNoID0gMDtcclxuXHRpZiAoc3RyLmxlbmd0aCA9PSAwKSByZXR1cm4gaGFzaDtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG5cdFx0Y29uc3QgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG5cdFx0aGFzaCA9IChoYXNoIDw8IDUpIC0gaGFzaCArIGNoYXI7XHJcblx0XHRoYXNoID0gaGFzaCAmIGhhc2g7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxyXG5cdH1cclxuXHRyZXR1cm4gaGFzaDtcclxufVxyXG4iLCIvKipcclxuICogUmV0dXJucyB0aGUgZmlyc3QgcGFyYW1ldGVyIGlmIG5vdCB1bmRlZmluZWQsIG90aGVyd2lzZSB0aGUgc2Vjb25kIHBhcmFtZXRlci5cclxuICogVXNlZnVsIGZvciBzZXR0aW5nIGEgZGVmYXVsdCB2YWx1ZSBmb3IgYSBwYXJhbWV0ZXIuXHJcbiAqXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IGFcclxuICogQHBhcmFtIHsqfSBiXHJcbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBwYXJhbWV0ZXIgaWYgbm90IHVuZGVmaW5lZCwgb3RoZXJ3aXNlIHRoZSBzZWNvbmQgcGFyYW1ldGVyLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBwYXJhbSA9IENlc2l1bS5kZWZhdWx0VmFsdWUocGFyYW0sICdkZWZhdWx0Jyk7XHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZhdWx0VmFsdWUoYSwgYikge1xyXG4gIGlmIChhICE9PSB1bmRlZmluZWQgJiYgYSAhPT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIGE7XHJcbiAgfVxyXG4gIHJldHVybiBiO1xyXG59XHJcblxyXG4vKipcclxuICogQSBmcm96ZW4gZW1wdHkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIG9wdGlvbnMgcGFzc2VkIGFzXHJcbiAqIGFuIG9iamVjdCBsaXRlcmFsLlxyXG4gKiBAdHlwZSB7T2JqZWN0fVxyXG4gKiBAbWVtYmVyb2YgZGVmYXVsdFZhbHVlXHJcbiAqL1xyXG5kZWZhdWx0VmFsdWUuRU1QVFlfT0JKRUNUID0gT2JqZWN0LmZyZWV6ZSh7fSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VmFsdWU7XHJcbiIsIi8qKlxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgb2JqZWN0LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgZGVmaW5lZCwgcmV0dXJucyBmYWxzZSBvdGhlcndpc2UuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGlmIChDZXNpdW0uZGVmaW5lZChwb3NpdGlvbnMpKSB7XHJcbiAqICAgICAgZG9Tb21ldGhpbmcoKTtcclxuICogfSBlbHNlIHtcclxuICogICAgICBkb1NvbWV0aGluZ0Vsc2UoKTtcclxuICogfVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmaW5lZCh2YWx1ZSkge1xyXG4gIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcbiIsIi8qXG4gIGh0dHBzOi8vZ2l0aHViLmNvbS9iYW5rc2VhbiB3cmFwcGVkIE1ha290byBNYXRzdW1vdG8gYW5kIFRha3VqaSBOaXNoaW11cmEncyBjb2RlIGluIGEgbmFtZXNwYWNlXG4gIHNvIGl0J3MgYmV0dGVyIGVuY2Fwc3VsYXRlZC4gTm93IHlvdSBjYW4gaGF2ZSBtdWx0aXBsZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvcnNcbiAgYW5kIHRoZXkgd29uJ3Qgc3RvbXAgYWxsIG92ZXIgZWFjaG90aGVyJ3Mgc3RhdGUuXG5cbiAgSWYgeW91IHdhbnQgdG8gdXNlIHRoaXMgYXMgYSBzdWJzdGl0dXRlIGZvciBNYXRoLnJhbmRvbSgpLCB1c2UgdGhlIHJhbmRvbSgpXG4gIG1ldGhvZCBsaWtlIHNvOlxuXG4gIHZhciBtID0gbmV3IE1lcnNlbm5lVHdpc3RlcigpO1xuICB2YXIgcmFuZG9tTnVtYmVyID0gbS5yYW5kb20oKTtcblxuICBZb3UgY2FuIGFsc28gY2FsbCB0aGUgb3RoZXIgZ2VucmFuZF97Zm9vfSgpIG1ldGhvZHMgb24gdGhlIGluc3RhbmNlLlxuXG4gIElmIHlvdSB3YW50IHRvIHVzZSBhIHNwZWNpZmljIHNlZWQgaW4gb3JkZXIgdG8gZ2V0IGEgcmVwZWF0YWJsZSByYW5kb21cbiAgc2VxdWVuY2UsIHBhc3MgYW4gaW50ZWdlciBpbnRvIHRoZSBjb25zdHJ1Y3RvcjpcblxuICB2YXIgbSA9IG5ldyBNZXJzZW5uZVR3aXN0ZXIoMTIzKTtcblxuICBhbmQgdGhhdCB3aWxsIGFsd2F5cyBwcm9kdWNlIHRoZSBzYW1lIHJhbmRvbSBzZXF1ZW5jZS5cblxuICBTZWFuIE1jQ3VsbG91Z2ggKGJhbmtzZWFuQGdtYWlsLmNvbSlcbiovXG5cbi8qXG4gICBBIEMtcHJvZ3JhbSBmb3IgTVQxOTkzNywgd2l0aCBpbml0aWFsaXphdGlvbiBpbXByb3ZlZCAyMDAyLzEvMjYuXG4gICBDb2RlZCBieSBUYWt1amkgTmlzaGltdXJhIGFuZCBNYWtvdG8gTWF0c3Vtb3RvLlxuXG4gICBCZWZvcmUgdXNpbmcsIGluaXRpYWxpemUgdGhlIHN0YXRlIGJ5IHVzaW5nIGluaXRfc2VlZChzZWVkKVxuICAgb3IgaW5pdF9ieV9hcnJheShpbml0X2tleSwga2V5X2xlbmd0aCkuXG5cbiAgIENvcHlyaWdodCAoQykgMTk5NyAtIDIwMDIsIE1ha290byBNYXRzdW1vdG8gYW5kIFRha3VqaSBOaXNoaW11cmEsXG4gICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAgIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uc1xuICAgYXJlIG1ldDpcblxuICAgICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAgICAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICAgICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gICAgIDMuIFRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGVcbiAgICAgICAgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuXG4gICAgICAgIHBlcm1pc3Npb24uXG5cbiAgIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAgIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAgIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICAgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIE9XTkVSIE9SXG4gICBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCxcbiAgIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyxcbiAgIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICAgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAgIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICAgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cblxuICAgQW55IGZlZWRiYWNrIGlzIHZlcnkgd2VsY29tZS5cbiAgIGh0dHA6Ly93d3cubWF0aC5zY2kuaGlyb3NoaW1hLXUuYWMuanAvfm0tbWF0L01UL2VtdC5odG1sXG4gICBlbWFpbDogbS1tYXQgQCBtYXRoLnNjaS5oaXJvc2hpbWEtdS5hYy5qcCAocmVtb3ZlIHNwYWNlKVxuKi9cblxudmFyIE1lcnNlbm5lVHdpc3RlciA9IGZ1bmN0aW9uKHNlZWQpIHtcblx0aWYgKHNlZWQgPT0gdW5kZWZpbmVkKSB7XG5cdFx0c2VlZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHR9XG5cblx0LyogUGVyaW9kIHBhcmFtZXRlcnMgKi9cblx0dGhpcy5OID0gNjI0O1xuXHR0aGlzLk0gPSAzOTc7XG5cdHRoaXMuTUFUUklYX0EgPSAweDk5MDhiMGRmOyAgIC8qIGNvbnN0YW50IHZlY3RvciBhICovXG5cdHRoaXMuVVBQRVJfTUFTSyA9IDB4ODAwMDAwMDA7IC8qIG1vc3Qgc2lnbmlmaWNhbnQgdy1yIGJpdHMgKi9cblx0dGhpcy5MT1dFUl9NQVNLID0gMHg3ZmZmZmZmZjsgLyogbGVhc3Qgc2lnbmlmaWNhbnQgciBiaXRzICovXG5cblx0dGhpcy5tdCA9IG5ldyBBcnJheSh0aGlzLk4pOyAvKiB0aGUgYXJyYXkgZm9yIHRoZSBzdGF0ZSB2ZWN0b3IgKi9cblx0dGhpcy5tdGk9dGhpcy5OKzE7IC8qIG10aT09TisxIG1lYW5zIG10W05dIGlzIG5vdCBpbml0aWFsaXplZCAqL1xuXG5cdGlmIChzZWVkLmNvbnN0cnVjdG9yID09IEFycmF5KSB7XG5cdFx0dGhpcy5pbml0X2J5X2FycmF5KHNlZWQsIHNlZWQubGVuZ3RoKTtcblx0fVxuXHRlbHNlIHtcblx0XHR0aGlzLmluaXRfc2VlZChzZWVkKTtcblx0fVxufVxuXG4vKiBpbml0aWFsaXplcyBtdFtOXSB3aXRoIGEgc2VlZCAqL1xuLyogb3JpZ2luIG5hbWUgaW5pdF9nZW5yYW5kICovXG5NZXJzZW5uZVR3aXN0ZXIucHJvdG90eXBlLmluaXRfc2VlZCA9IGZ1bmN0aW9uKHMpIHtcblx0dGhpcy5tdFswXSA9IHMgPj4+IDA7XG5cdGZvciAodGhpcy5tdGk9MTsgdGhpcy5tdGk8dGhpcy5OOyB0aGlzLm10aSsrKSB7XG5cdFx0dmFyIHMgPSB0aGlzLm10W3RoaXMubXRpLTFdIF4gKHRoaXMubXRbdGhpcy5tdGktMV0gPj4+IDMwKTtcblx0XHR0aGlzLm10W3RoaXMubXRpXSA9ICgoKCgocyAmIDB4ZmZmZjAwMDApID4+PiAxNikgKiAxODEyNDMzMjUzKSA8PCAxNikgKyAocyAmIDB4MDAwMGZmZmYpICogMTgxMjQzMzI1Mylcblx0XHQrIHRoaXMubXRpO1xuXHRcdC8qIFNlZSBLbnV0aCBUQU9DUCBWb2wyLiAzcmQgRWQuIFAuMTA2IGZvciBtdWx0aXBsaWVyLiAqL1xuXHRcdC8qIEluIHRoZSBwcmV2aW91cyB2ZXJzaW9ucywgTVNCcyBvZiB0aGUgc2VlZCBhZmZlY3QgICAqL1xuXHRcdC8qIG9ubHkgTVNCcyBvZiB0aGUgYXJyYXkgbXRbXS4gICAgICAgICAgICAgICAgICAgICAgICAqL1xuXHRcdC8qIDIwMDIvMDEvMDkgbW9kaWZpZWQgYnkgTWFrb3RvIE1hdHN1bW90byAgICAgICAgICAgICAqL1xuXHRcdHRoaXMubXRbdGhpcy5tdGldID4+Pj0gMDtcblx0XHQvKiBmb3IgPjMyIGJpdCBtYWNoaW5lcyAqL1xuXHR9XG59XG5cbi8qIGluaXRpYWxpemUgYnkgYW4gYXJyYXkgd2l0aCBhcnJheS1sZW5ndGggKi9cbi8qIGluaXRfa2V5IGlzIHRoZSBhcnJheSBmb3IgaW5pdGlhbGl6aW5nIGtleXMgKi9cbi8qIGtleV9sZW5ndGggaXMgaXRzIGxlbmd0aCAqL1xuLyogc2xpZ2h0IGNoYW5nZSBmb3IgQysrLCAyMDA0LzIvMjYgKi9cbk1lcnNlbm5lVHdpc3Rlci5wcm90b3R5cGUuaW5pdF9ieV9hcnJheSA9IGZ1bmN0aW9uKGluaXRfa2V5LCBrZXlfbGVuZ3RoKSB7XG5cdHZhciBpLCBqLCBrO1xuXHR0aGlzLmluaXRfc2VlZCgxOTY1MDIxOCk7XG5cdGk9MTsgaj0wO1xuXHRrID0gKHRoaXMuTj5rZXlfbGVuZ3RoID8gdGhpcy5OIDoga2V5X2xlbmd0aCk7XG5cdGZvciAoOyBrOyBrLS0pIHtcblx0XHR2YXIgcyA9IHRoaXMubXRbaS0xXSBeICh0aGlzLm10W2ktMV0gPj4+IDMwKVxuXHRcdHRoaXMubXRbaV0gPSAodGhpcy5tdFtpXSBeICgoKCgocyAmIDB4ZmZmZjAwMDApID4+PiAxNikgKiAxNjY0NTI1KSA8PCAxNikgKyAoKHMgJiAweDAwMDBmZmZmKSAqIDE2NjQ1MjUpKSlcblx0XHQrIGluaXRfa2V5W2pdICsgajsgLyogbm9uIGxpbmVhciAqL1xuXHRcdHRoaXMubXRbaV0gPj4+PSAwOyAvKiBmb3IgV09SRFNJWkUgPiAzMiBtYWNoaW5lcyAqL1xuXHRcdGkrKzsgaisrO1xuXHRcdGlmIChpPj10aGlzLk4pIHsgdGhpcy5tdFswXSA9IHRoaXMubXRbdGhpcy5OLTFdOyBpPTE7IH1cblx0XHRpZiAoaj49a2V5X2xlbmd0aCkgaj0wO1xuXHR9XG5cdGZvciAoaz10aGlzLk4tMTsgazsgay0tKSB7XG5cdFx0dmFyIHMgPSB0aGlzLm10W2ktMV0gXiAodGhpcy5tdFtpLTFdID4+PiAzMCk7XG5cdFx0dGhpcy5tdFtpXSA9ICh0aGlzLm10W2ldIF4gKCgoKChzICYgMHhmZmZmMDAwMCkgPj4+IDE2KSAqIDE1NjYwODM5NDEpIDw8IDE2KSArIChzICYgMHgwMDAwZmZmZikgKiAxNTY2MDgzOTQxKSlcblx0XHQtIGk7IC8qIG5vbiBsaW5lYXIgKi9cblx0XHR0aGlzLm10W2ldID4+Pj0gMDsgLyogZm9yIFdPUkRTSVpFID4gMzIgbWFjaGluZXMgKi9cblx0XHRpKys7XG5cdFx0aWYgKGk+PXRoaXMuTikgeyB0aGlzLm10WzBdID0gdGhpcy5tdFt0aGlzLk4tMV07IGk9MTsgfVxuXHR9XG5cblx0dGhpcy5tdFswXSA9IDB4ODAwMDAwMDA7IC8qIE1TQiBpcyAxOyBhc3N1cmluZyBub24temVybyBpbml0aWFsIGFycmF5ICovXG59XG5cbi8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gWzAsMHhmZmZmZmZmZl0taW50ZXJ2YWwgKi9cbi8qIG9yaWdpbiBuYW1lIGdlbnJhbmRfaW50MzIgKi9cbk1lcnNlbm5lVHdpc3Rlci5wcm90b3R5cGUucmFuZG9tX2ludCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgeTtcblx0dmFyIG1hZzAxID0gbmV3IEFycmF5KDB4MCwgdGhpcy5NQVRSSVhfQSk7XG5cdC8qIG1hZzAxW3hdID0geCAqIE1BVFJJWF9BICBmb3IgeD0wLDEgKi9cblxuXHRpZiAodGhpcy5tdGkgPj0gdGhpcy5OKSB7IC8qIGdlbmVyYXRlIE4gd29yZHMgYXQgb25lIHRpbWUgKi9cblx0XHR2YXIga2s7XG5cblx0XHRpZiAodGhpcy5tdGkgPT0gdGhpcy5OKzEpICAvKiBpZiBpbml0X3NlZWQoKSBoYXMgbm90IGJlZW4gY2FsbGVkLCAqL1xuXHRcdFx0dGhpcy5pbml0X3NlZWQoNTQ4OSk7ICAvKiBhIGRlZmF1bHQgaW5pdGlhbCBzZWVkIGlzIHVzZWQgKi9cblxuXHRcdGZvciAoa2s9MDtrazx0aGlzLk4tdGhpcy5NO2trKyspIHtcblx0XHRcdHkgPSAodGhpcy5tdFtra10mdGhpcy5VUFBFUl9NQVNLKXwodGhpcy5tdFtraysxXSZ0aGlzLkxPV0VSX01BU0spO1xuXHRcdFx0dGhpcy5tdFtra10gPSB0aGlzLm10W2trK3RoaXMuTV0gXiAoeSA+Pj4gMSkgXiBtYWcwMVt5ICYgMHgxXTtcblx0XHR9XG5cdFx0Zm9yICg7a2s8dGhpcy5OLTE7a2srKykge1xuXHRcdFx0eSA9ICh0aGlzLm10W2trXSZ0aGlzLlVQUEVSX01BU0spfCh0aGlzLm10W2trKzFdJnRoaXMuTE9XRVJfTUFTSyk7XG5cdFx0XHR0aGlzLm10W2trXSA9IHRoaXMubXRba2srKHRoaXMuTS10aGlzLk4pXSBeICh5ID4+PiAxKSBeIG1hZzAxW3kgJiAweDFdO1xuXHRcdH1cblx0XHR5ID0gKHRoaXMubXRbdGhpcy5OLTFdJnRoaXMuVVBQRVJfTUFTSyl8KHRoaXMubXRbMF0mdGhpcy5MT1dFUl9NQVNLKTtcblx0XHR0aGlzLm10W3RoaXMuTi0xXSA9IHRoaXMubXRbdGhpcy5NLTFdIF4gKHkgPj4+IDEpIF4gbWFnMDFbeSAmIDB4MV07XG5cblx0XHR0aGlzLm10aSA9IDA7XG5cdH1cblxuXHR5ID0gdGhpcy5tdFt0aGlzLm10aSsrXTtcblxuXHQvKiBUZW1wZXJpbmcgKi9cblx0eSBePSAoeSA+Pj4gMTEpO1xuXHR5IF49ICh5IDw8IDcpICYgMHg5ZDJjNTY4MDtcblx0eSBePSAoeSA8PCAxNSkgJiAweGVmYzYwMDAwO1xuXHR5IF49ICh5ID4+PiAxOCk7XG5cblx0cmV0dXJuIHkgPj4+IDA7XG59XG5cbi8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gWzAsMHg3ZmZmZmZmZl0taW50ZXJ2YWwgKi9cbi8qIG9yaWdpbiBuYW1lIGdlbnJhbmRfaW50MzEgKi9cbk1lcnNlbm5lVHdpc3Rlci5wcm90b3R5cGUucmFuZG9tX2ludDMxID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiAodGhpcy5yYW5kb21faW50KCk+Pj4xKTtcbn1cblxuLyogZ2VuZXJhdGVzIGEgcmFuZG9tIG51bWJlciBvbiBbMCwxXS1yZWFsLWludGVydmFsICovXG4vKiBvcmlnaW4gbmFtZSBnZW5yYW5kX3JlYWwxICovXG5NZXJzZW5uZVR3aXN0ZXIucHJvdG90eXBlLnJhbmRvbV9pbmNsID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLnJhbmRvbV9pbnQoKSooMS4wLzQyOTQ5NjcyOTUuMCk7XG5cdC8qIGRpdmlkZWQgYnkgMl4zMi0xICovXG59XG5cbi8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gWzAsMSktcmVhbC1pbnRlcnZhbCAqL1xuTWVyc2VubmVUd2lzdGVyLnByb3RvdHlwZS5yYW5kb20gPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMucmFuZG9tX2ludCgpKigxLjAvNDI5NDk2NzI5Ni4wKTtcblx0LyogZGl2aWRlZCBieSAyXjMyICovXG59XG5cbi8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gKDAsMSktcmVhbC1pbnRlcnZhbCAqL1xuLyogb3JpZ2luIG5hbWUgZ2VucmFuZF9yZWFsMyAqL1xuTWVyc2VubmVUd2lzdGVyLnByb3RvdHlwZS5yYW5kb21fZXhjbCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gKHRoaXMucmFuZG9tX2ludCgpICsgMC41KSooMS4wLzQyOTQ5NjcyOTYuMCk7XG5cdC8qIGRpdmlkZWQgYnkgMl4zMiAqL1xufVxuXG4vKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uIFswLDEpIHdpdGggNTMtYml0IHJlc29sdXRpb24qL1xuLyogb3JpZ2luIG5hbWUgZ2VucmFuZF9yZXM1MyAqL1xuTWVyc2VubmVUd2lzdGVyLnByb3RvdHlwZS5yYW5kb21fbG9uZyA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgYT10aGlzLnJhbmRvbV9pbnQoKT4+PjUsIGI9dGhpcy5yYW5kb21faW50KCk+Pj42O1xuXHRyZXR1cm4oYSo2NzEwODg2NC4wK2IpKigxLjAvOTAwNzE5OTI1NDc0MDk5Mi4wKTtcbn1cblxuLyogVGhlc2UgcmVhbCB2ZXJzaW9ucyBhcmUgZHVlIHRvIElzYWt1IFdhZGEsIDIwMDIvMDEvMDkgYWRkZWQgKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNZXJzZW5uZVR3aXN0ZXI7XG4iLCJpbXBvcnQgTWVyc2VubmVUd2lzdGVyIGZyb20gXCJtZXJzZW5uZS10d2lzdGVyXCI7XHJcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xyXG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xyXG5cclxuY2xhc3MgR01hdGgge1xyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjEgPSAwLjE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjIgPSAwLjAxO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIEVQU0lMT04zID0gMC4wMDE7XHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9ONCA9IDAuMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9ONSA9IDAuMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjYgPSAwLjAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9ONyA9IDAuMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OOCA9IDAuMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjkgPSAwLjAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTAgPSAwLjAwMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjExID0gMC4wMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTIgPSAwLjAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTMgPSAwLjAwMDAwMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjE0ID0gMC4wMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTUgPSAwLjAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTYgPSAwLjAwMDAwMDAwMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjE3ID0gMC4wMDAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTggPSAwLjAwMDAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMTkgPSAwLjAwMDAwMDAwMDAwMDAwMDAwMDE7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRVBTSUxPTjIwID0gMC4wMDAwMDAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBFUFNJTE9OMjEgPSAwLjAwMDAwMDAwMDAwMDAwMDAwMDAwMTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBHUkFWSVRBVElPTkFMUEFSQU1FVEVSID0gMy45ODYwMDQ0MThlMTQ7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgU0lYVFlfRk9VUl9LSUxPQllURVMgPSA2NCAqIDEwMjQ7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRk9VUl9HSUdBQllURVMgPSA0ICogMTAyNCAqIDEwMjQgKiAxMDI0O1xyXG5cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1zaWduXHJcbiAgc3RhdGljIHNpZ24gPSBkZWZhdWx0VmFsdWUoTWF0aC5zaWduLCBmdW5jdGlvbiBzaWduKHZhbHVlKSB7XHJcbiAgICB2YWx1ZSA9ICt2YWx1ZTsgLy8gY29lcmNlIHRvIG51bWJlclxyXG4gICAgaWYgKHZhbHVlID09PSAwIHx8IHZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICAvLyB6ZXJvIG9yIE5hTlxyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUgPiAwID8gMSA6IC0xO1xyXG4gIH0pO1xyXG5cclxuICBzdGF0aWMgc2lnbk5vdFplcm8odmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA8IDAuMCA/IC0xLjAgOiAxLjA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9TTm9ybSh2YWx1ZTogbnVtYmVyLCByYW5nZU1heGltdW06IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByYW5nZU1heGltdW0gPSBkZWZhdWx0VmFsdWUocmFuZ2VNYXhpbXVtLCAyNTUpO1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoXHJcbiAgICAgIChHTWF0aC5jbGFtcCh2YWx1ZSwgLTEuMCwgMS4wKSAqIDAuNSArIDAuNSkgKiByYW5nZU1heGltdW1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbVNOb3JtKHZhbHVlOiBudW1iZXIsIHJhbmdlTWF4aW11bTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJhbmdlTWF4aW11bSA9IGRlZmF1bHRWYWx1ZShyYW5nZU1heGltdW0sIDI1NSk7XHJcbiAgICByZXR1cm4gKEdNYXRoLmNsYW1wKHZhbHVlLCAwLjAsIHJhbmdlTWF4aW11bSkgLyByYW5nZU1heGltdW0pICogMi4wIC0gMS4wO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG5vcm1hbGl6ZShcclxuICAgIHZhbHVlOiBudW1iZXIsXHJcbiAgICByYW5nZU1pbmltdW06IG51bWJlcixcclxuICAgIHJhbmdlTWF4aW11bTogbnVtYmVyXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIHJhbmdlTWF4aW11bSA9IE1hdGgubWF4KHJhbmdlTWF4aW11bSAtIHJhbmdlTWluaW11bSwgMC4wKTtcclxuICAgIHJldHVybiByYW5nZU1heGltdW0gPT09IDAuMFxyXG4gICAgICA/IDAuMFxyXG4gICAgICA6IEdNYXRoLmNsYW1wKCh2YWx1ZSAtIHJhbmdlTWluaW11bSkgLyByYW5nZU1heGltdW0sIDAuMCwgMS4wKTtcclxuICB9XHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLXNpbmhcclxuICBzdGF0aWMgc2luaCA9IGRlZmF1bHRWYWx1ZShNYXRoLnNpbmgsIGZ1bmN0aW9uIHNpbmgodmFsdWUpIHtcclxuICAgIHJldHVybiAoTWF0aC5leHAodmFsdWUpIC0gTWF0aC5leHAoLXZhbHVlKSkgLyAyLjA7XHJcbiAgfSk7XHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWNvc2hcclxuICBzdGF0aWMgY29zaCA9IGRlZmF1bHRWYWx1ZShNYXRoLmNvc2gsIGZ1bmN0aW9uIGNvc2godmFsdWUpIHtcclxuICAgIHJldHVybiAoTWF0aC5leHAodmFsdWUpICsgTWF0aC5leHAoLXZhbHVlKSkgLyAyLjA7XHJcbiAgfSk7XHJcblxyXG4gIHN0YXRpYyBsZXJwKHA6IG51bWJlciwgcTogbnVtYmVyLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICgxLjAgLSB0aW1lKSAqIHAgKyB0aW1lICogcTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBQSSA9IE1hdGguUEk7XHJcblxyXG4gIHN0YXRpYyBPTkVfT1ZFUl9QSSA9IDEuMCAvIE1hdGguUEk7XHJcblxyXG4gIHN0YXRpYyBQSV9PVkVSX1RXTyA9IE1hdGguUEkgLyAyLjA7XHJcblxyXG4gIHN0YXRpYyBQSV9PVkVSX1RIUkVFID0gTWF0aC5QSSAvIDMuMDtcclxuXHJcbiAgc3RhdGljIFBJX09WRVJfRk9VUiA9IE1hdGguUEkgLyA0LjA7XHJcblxyXG4gIHN0YXRpYyBQSV9PVkVSX1NJWCA9IE1hdGguUEkgLyA2LjA7XHJcblxyXG4gIHN0YXRpYyBUSFJFRV9QSV9PVkVSX1RXTyA9ICgzLjAgKiBNYXRoLlBJKSAvIDIuMDtcclxuXHJcbiAgc3RhdGljIFRXT19QSSA9IDIuMCAqIE1hdGguUEk7XHJcblxyXG4gIHN0YXRpYyBPTkVfT1ZFUl9UV09fUEkgPSAxLjAgLyAoMi4wICogTWF0aC5QSSk7XHJcblxyXG4gIHN0YXRpYyBSQURJQU5TX1BFUl9ERUdSRUUgPSBNYXRoLlBJIC8gMTgwLjA7XHJcblxyXG4gIHN0YXRpYyBERUdSRUVTX1BFUl9SQURJQU4gPSAxODAuMCAvIE1hdGguUEk7XHJcblxyXG4gIHN0YXRpYyBSQURJQU5TX1BFUl9BUkNTRUNPTkQgPSBHTWF0aC5SQURJQU5TX1BFUl9ERUdSRUUgLyAzNjAwLjA7XHJcblxyXG4gIHN0YXRpYyB0b1JhZGlhbnMoZGVncmVlczogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICghZGVmaW5lZChkZWdyZWVzKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkZWdyZWVzIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkZWdyZWVzICogR01hdGguUkFESUFOU19QRVJfREVHUkVFO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRvRGVncmVlcyhyYWRpYW5zOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJhZGlhbnMpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJhZGlhbnMgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhZGlhbnMgKiBHTWF0aC5ERUdSRUVTX1BFUl9SQURJQU47XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbmVnYXRpdmVQaVRvUGkoYW5nbGU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAoIWRlZmluZWQoYW5nbGUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImFuZ2xlIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmIChhbmdsZSA+PSAtR01hdGguUEkgJiYgYW5nbGUgPD0gR01hdGguUEkpIHtcclxuICAgICAgLy8gRWFybHkgZXhpdCBpZiB0aGUgaW5wdXQgaXMgYWxyZWFkeSBpbnNpZGUgdGhlIHJhbmdlLiBUaGlzIGF2b2lkc1xyXG4gICAgICAvLyB1bm5lY2Vzc2FyeSBtYXRoIHdoaWNoIGNvdWxkIGludHJvZHVjZSBmbG9hdGluZyBwb2ludCBlcnJvci5cclxuICAgICAgcmV0dXJuIGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEdNYXRoLnplcm9Ub1R3b1BpKGFuZ2xlICsgR01hdGguUEkpIC0gR01hdGguUEk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgemVyb1RvVHdvUGkoYW5nbGU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAoIWRlZmluZWQoYW5nbGUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImFuZ2xlIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmIChhbmdsZSA+PSAwICYmIGFuZ2xlIDw9IEdNYXRoLlRXT19QSSkge1xyXG4gICAgICAvLyBFYXJseSBleGl0IGlmIHRoZSBpbnB1dCBpcyBhbHJlYWR5IGluc2lkZSB0aGUgcmFuZ2UuIFRoaXMgYXZvaWRzXHJcbiAgICAgIC8vIHVubmVjZXNzYXJ5IG1hdGggd2hpY2ggY291bGQgaW50cm9kdWNlIGZsb2F0aW5nIHBvaW50IGVycm9yLlxyXG4gICAgICByZXR1cm4gYW5nbGU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtb2QgPSBHTWF0aC5tb2QoYW5nbGUsIEdNYXRoLlRXT19QSSk7XHJcbiAgICBpZiAoTWF0aC5hYnMobW9kKSA8IEdNYXRoLkVQU0lMT04xNCAmJiBNYXRoLmFicyhhbmdsZSkgPiBHTWF0aC5FUFNJTE9OMTQpIHtcclxuICAgICAgcmV0dXJuIEdNYXRoLlRXT19QSTtcclxuICAgIH1cclxuICAgIHJldHVybiBtb2Q7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbW9kKG06IG51bWJlciwgbjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICghZGVmaW5lZChtKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmICghZGVmaW5lZChuKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJuIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmIChuID09PSAwLjApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGl2aXNvciBjYW5ub3QgYmUgMC5cIik7XHJcbiAgICB9XHJcbiAgICBpZiAoR01hdGguc2lnbihtKSA9PT0gR01hdGguc2lnbihuKSAmJiBNYXRoLmFicyhtKSA8IE1hdGguYWJzKG4pKSB7XHJcbiAgICAgIC8vIEVhcmx5IGV4aXQgaWYgdGhlIGlucHV0IGRvZXMgbm90IG5lZWQgdG8gYmUgbW9kZGVkLiBUaGlzIGF2b2lkc1xyXG4gICAgICAvLyB1bm5lY2Vzc2FyeSBtYXRoIHdoaWNoIGNvdWxkIGludHJvZHVjZSBmbG9hdGluZyBwb2ludCBlcnJvci5cclxuICAgICAgcmV0dXJuIG07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICgobSAlIG4pICsgbikgJSBuO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFsc0Vwc2lsb24oXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgcmVsYXRpdmVFcHNpbG9uOiBudW1iZXIsXHJcbiAgICBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IHJlbGF0aXZlRXBzaWxvblxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCFkZWZpbmVkKGxlZnQpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImxlZnQgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJpZ2h0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyaWdodCBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVsYXRpdmVFcHNpbG9uID0gZGVmYXVsdFZhbHVlKHJlbGF0aXZlRXBzaWxvbiwgMC4wKTtcclxuICAgIGFic29sdXRlRXBzaWxvbiA9IGRlZmF1bHRWYWx1ZShhYnNvbHV0ZUVwc2lsb24sIHJlbGF0aXZlRXBzaWxvbik7XHJcbiAgICBjb25zdCBhYnNEaWZmID0gTWF0aC5hYnMobGVmdCAtIHJpZ2h0KTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGFic0RpZmYgPD0gYWJzb2x1dGVFcHNpbG9uIHx8XHJcbiAgICAgIGFic0RpZmYgPD0gcmVsYXRpdmVFcHNpbG9uICogTWF0aC5tYXgoTWF0aC5hYnMobGVmdCksIE1hdGguYWJzKHJpZ2h0KSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbGVzc1RoYW4oXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgYWJzb2x1dGVFcHNpbG9uOiBudW1iZXIgPSAwXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIWRlZmluZWQobGVmdCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmlyc3QgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJpZ2h0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZWNvbmQgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKGFic29sdXRlRXBzaWxvbikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0IC0gcmlnaHQgPCAtYWJzb2x1dGVFcHNpbG9uO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxlc3NUaGFuT3JFcXVhbHMoXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgYWJzb2x1dGVFcHNpbG9uOiBudW1iZXIgPSAwXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIWRlZmluZWQobGVmdCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmlyc3QgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJpZ2h0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZWNvbmQgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKGFic29sdXRlRXBzaWxvbikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0IC0gcmlnaHQgPCBhYnNvbHV0ZUVwc2lsb247XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ3JlYXRlclRoYW4oXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgYWJzb2x1dGVFcHNpbG9uOiBudW1iZXIgPSAwXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIWRlZmluZWQobGVmdCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmlyc3QgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJpZ2h0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZWNvbmQgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKGFic29sdXRlRXBzaWxvbikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0IC0gcmlnaHQgPiBhYnNvbHV0ZUVwc2lsb247XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ3JlYXRlclRoYW5PckVxdWFscyhcclxuICAgIGxlZnQ6IG51bWJlcixcclxuICAgIHJpZ2h0OiBudW1iZXIsXHJcbiAgICBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IDBcclxuICApOiBib29sZWFuIHtcclxuICAgIGlmICghZGVmaW5lZChsZWZ0KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXJzdCBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlZmluZWQocmlnaHQpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNlY29uZCBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlZmluZWQoYWJzb2x1dGVFcHNpbG9uKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhYnNvbHV0ZUVwc2lsb24gaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlZnQgLSByaWdodCA+IC1hYnNvbHV0ZUVwc2lsb247XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNQb3dlck9mVHdvKG46IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcclxuICAgIGlmICh0eXBlb2YgbiAhPT0gXCJudW1iZXJcIiB8fCBuIDwgMCB8fCBuID4gNDI5NDk2NzI5NSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIG51bWJlciBiZXR3ZWVuIDAgYW5kICgyXjMyKS0xIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xyXG5cclxuICAgIHJldHVybiBuICE9PSAwICYmIChuICYgKG4gLSAxKSkgPT09IDA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbmV4dFBvd2VyT2ZUd28objogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICh0eXBlb2YgbiAhPT0gXCJudW1iZXJcIiB8fCBuIDwgMCB8fCBuID4gMjE0NzQ4MzY0OCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIG51bWJlciBiZXR3ZWVuIDAgYW5kIDJeMzEgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgLy8gRnJvbSBodHRwOi8vZ3JhcGhpY3Muc3RhbmZvcmQuZWR1L35zZWFuZGVyL2JpdGhhY2tzLmh0bWwjUm91bmRVcFBvd2VyT2YyXHJcbiAgICAtLW47XHJcbiAgICBuIHw9IG4gPj4gMTtcclxuICAgIG4gfD0gbiA+PiAyO1xyXG4gICAgbiB8PSBuID4+IDQ7XHJcbiAgICBuIHw9IG4gPj4gODtcclxuICAgIG4gfD0gbiA+PiAxNjtcclxuICAgICsrbjtcclxuXHJcbiAgICByZXR1cm4gbjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmV2aW91c1Bvd2VyT2ZUd28objogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICh0eXBlb2YgbiAhPT0gXCJudW1iZXJcIiB8fCBuIDwgMCB8fCBuID4gNDI5NDk2NzI5NSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIG51bWJlciBiZXR3ZWVuIDAgYW5kICgyXjMyKS0xIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBuIHw9IG4gPj4gMTtcclxuICAgIG4gfD0gbiA+PiAyO1xyXG4gICAgbiB8PSBuID4+IDQ7XHJcbiAgICBuIHw9IG4gPj4gODtcclxuICAgIG4gfD0gbiA+PiAxNjtcclxuICAgIG4gfD0gbiA+PiAzMjtcclxuXHJcbiAgICAvLyBUaGUgcHJldmlvdXMgYml0d2lzZSBvcGVyYXRpb25zIGltcGxpY2l0bHkgY29udmVydCB0byBzaWduZWQgMzItYml0LiBVc2UgYD4+PmAgdG8gY29udmVydCB0byB1bnNpZ25lZFxyXG4gICAgbiA9IChuID4+PiAwKSAtIChuID4+PiAxKTtcclxuXHJcbiAgICByZXR1cm4gbjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjbGFtcCh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHZhbHVlIDwgbWluID8gbWluIDogdmFsdWUgPiBtYXggPyBtYXggOiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBuZXh0UmFuZG9tTnVtYmVyID0gZnVuY3Rpb24gKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gcmFuZG9tTnVtYmVyR2VuZXJhdG9yLnJhbmRvbSgpO1xyXG4gIH07XHJcblxyXG4gIHN0YXRpYyByYW5kb21CZXR3ZWVuID0gZnVuY3Rpb24gKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gR01hdGgubmV4dFJhbmRvbU51bWJlcigpICogKG1heCAtIG1pbikgKyBtaW47XHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGFjb3NDbGFtcGVkID0gZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCFkZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZSBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE1hdGguYWNvcyhHTWF0aC5jbGFtcCh2YWx1ZSwgLTEuMCwgMS4wKSk7XHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGFzaW5DbGFtcGVkID0gZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCFkZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZSBpcyByZXF1aXJlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE1hdGguYXNpbihHTWF0aC5jbGFtcCh2YWx1ZSwgLTEuMCwgMS4wKSk7XHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGNob3JkTGVuZ3RoID0gZnVuY3Rpb24gKGFuZ2xlOiBudW1iZXIsIHJhZGl1czogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICghZGVmaW5lZChhbmdsZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYW5nbGUgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJhZGl1cykpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmFkaXVzIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gMi4wICogcmFkaXVzICogTWF0aC5zaW4oYW5nbGUgKiAwLjUpO1xyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBsb2dCYXNlID0gZnVuY3Rpb24gKG51bWJlcjogbnVtYmVyLCBiYXNlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKCFkZWZpbmVkKG51bWJlcikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibnVtYmVyIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuICAgIGlmICghZGVmaW5lZChiYXNlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYXNlIGlzIHJlcXVpcmVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gTWF0aC5sb2cobnVtYmVyKSAvIE1hdGgubG9nKGJhc2UpO1xyXG4gIH07XHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWNicnRcclxuICBzdGF0aWMgY2JydCA9IGRlZmF1bHRWYWx1ZShNYXRoLmNicnQsIGZ1bmN0aW9uIGNicnQobnVtYmVyKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBNYXRoLnBvdyhNYXRoLmFicyhudW1iZXIpLCAxLjAgLyAzLjApO1xyXG4gICAgcmV0dXJuIG51bWJlciA8IDAuMCA/IC1yZXN1bHQgOiByZXN1bHQ7XHJcbiAgfSk7XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtbG9nMlxyXG4gIHN0YXRpYyBsb2cyID0gZGVmYXVsdFZhbHVlKE1hdGgubG9nMiwgZnVuY3Rpb24gbG9nMihudW1iZXIpIHtcclxuICAgIHJldHVybiBNYXRoLmxvZyhudW1iZXIpICogTWF0aC5MT0cyRTtcclxuICB9KTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBzdGF0aWMgZm9nKGRpc3RhbmNlVG9DYW1lcmE6IG51bWJlciwgZGVuc2l0eTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHNjYWxhciA9IGRpc3RhbmNlVG9DYW1lcmEgKiBkZW5zaXR5O1xyXG4gICAgcmV0dXJuIDEuMCAtIE1hdGguZXhwKC0oc2NhbGFyICogc2NhbGFyKSk7XHJcbiAgfVxyXG59XHJcbmxldCByYW5kb21OdW1iZXJHZW5lcmF0b3IgPSBuZXcgTWVyc2VubmVUd2lzdGVyKCk7XHJcbmNvbnN0IGZhY3RvcmlhbHMgPSBbMV07XHJcbmV4cG9ydCBkZWZhdWx0IEdNYXRoO1xyXG4iLCJpbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcclxuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcclxuaW1wb3J0IEdNYXRoIGZyb20gXCIuL01hdGhcIjtcclxuLy8jcmdiYVxyXG5jb25zdCByZ2JhTWF0Y2hlciA9IC9eIyhbMC05YS1mXSkoWzAtOWEtZl0pKFswLTlhLWZdKShbMC05YS1mXSk/JC9pO1xyXG4vLyNycmdnYmJhYVxyXG5jb25zdCBycmdnYmJhYU1hdGNoZXIgPVxyXG4gIC9eIyhbMC05YS1mXXsyfSkoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSk/JC9pO1xyXG4vL3JnYigpLCByZ2JhKCksIG9yIHJnYiUoKVxyXG5jb25zdCByZ2JQYXJlbnRoZXNlc01hdGNoZXIgPVxyXG4gIC9ecmdiYT9cXChcXHMqKFswLTkuXSslPylcXHMqLFxccyooWzAtOS5dKyU/KVxccyosXFxzKihbMC05Ll0rJT8pKD86XFxzKixcXHMqKFswLTkuXSspKT9cXHMqXFwpJC9pO1xyXG4vL2hzbCgpIG9yIGhzbGEoKVxyXG5jb25zdCBoc2xQYXJlbnRoZXNlc01hdGNoZXIgPVxyXG4gIC9eaHNsYT9cXChcXHMqKFswLTkuXSspXFxzKixcXHMqKFswLTkuXSslKVxccyosXFxzKihbMC05Ll0rJSkoPzpcXHMqLFxccyooWzAtOS5dKykpP1xccypcXCkkL2k7XHJcbmZ1bmN0aW9uIGh1ZTJyZ2IobTEsIG0yLCBoKSB7XHJcbiAgaWYgKGggPCAwKSB7XHJcbiAgICBoICs9IDE7XHJcbiAgfVxyXG4gIGlmIChoID4gMSkge1xyXG4gICAgaCAtPSAxO1xyXG4gIH1cclxuICBpZiAoaCAqIDYgPCAxKSB7XHJcbiAgICByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiA2ICogaDtcclxuICB9XHJcbiAgaWYgKGggKiAyIDwgMSkge1xyXG4gICAgcmV0dXJuIG0yO1xyXG4gIH1cclxuICBpZiAoaCAqIDMgPCAyKSB7XHJcbiAgICByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDY7XHJcbiAgfVxyXG4gIHJldHVybiBtMTtcclxufVxyXG5cclxuY2xhc3MgQ29sb3Ige1xyXG4gIGdyZWVuOiBudW1iZXI7XHJcbiAgcmVkOiBudW1iZXI7XHJcbiAgYmx1ZTogbnVtYmVyO1xyXG4gIGNvbnN0cnVjdG9yKHJlZDogbnVtYmVyID0gMS4wLCBncmVlbjogbnVtYmVyID0gMS4wLCBibHVlOiBudW1iZXIgPSAxLjApIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHJlZCBjb21wb25lbnQuXHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAgICogQGRlZmF1bHQgMS4wXHJcbiAgICAgKi9cclxuICAgIHRoaXMucmVkID0gcmVkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZ3JlZW4gY29tcG9uZW50LlxyXG4gICAgICogQHR5cGUge051bWJlcn1cclxuICAgICAqIEBkZWZhdWx0IDEuMFxyXG4gICAgICovXHJcbiAgICB0aGlzLmdyZWVuID0gZ3JlZW47XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBibHVlIGNvbXBvbmVudC5cclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICAgKiBAZGVmYXVsdCAxLjBcclxuICAgICAqL1xyXG4gICAgdGhpcy5ibHVlID0gYmx1ZTtcclxuICB9XHJcbiAgc2V0KHZhbHVlOiBzdHJpbmcpOiBDb2xvciB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIENvbG9yLmZyb21Dc3NDb2xvclN0cmluZyh2YWx1ZSwgdGhpcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgdG9BcnJheSgpOiBudW1iZXJbXSB7XHJcbiAgICByZXR1cm4gW3RoaXMucmVkLCB0aGlzLmdyZWVuLCB0aGlzLmJsdWVdO1xyXG4gIH1cclxuXHJcbiAgY2xvbmUocmVzdWx0OiBDb2xvcik6IENvbG9yIHtcclxuICAgIHJldHVybiBDb2xvci5jbG9uZSh0aGlzLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgZXF1YWxzKG90aGVyOiBDb2xvcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIENvbG9yLmVxdWFscyh0aGlzLCBvdGhlcik7XHJcbiAgfVxyXG5cclxuICB0b0Nzc0hleFN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgbGV0IHIgPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLnJlZCkudG9TdHJpbmcoMTYpO1xyXG4gICAgaWYgKHIubGVuZ3RoIDwgMikge1xyXG4gICAgICByID0gYDAke3J9YDtcclxuICAgIH1cclxuICAgIGxldCBnID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ncmVlbikudG9TdHJpbmcoMTYpO1xyXG4gICAgaWYgKGcubGVuZ3RoIDwgMikge1xyXG4gICAgICBnID0gYDAke2d9YDtcclxuICAgIH1cclxuICAgIGxldCBiID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ibHVlKS50b1N0cmluZygxNik7XHJcbiAgICBpZiAoYi5sZW5ndGggPCAyKSB7XHJcbiAgICAgIGIgPSBgMCR7Yn1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAjJHtyfSR7Z30ke2J9YDtcclxuICB9XHJcblxyXG4gIHRvQnl0ZXMocmVzdWx0OiBudW1iZXJbXSk6IG51bWJlcltdIHtcclxuICAgIGNvbnN0IHJlZCA9IENvbG9yLmZsb2F0VG9CeXRlKHRoaXMucmVkKTtcclxuICAgIGNvbnN0IGdyZWVuID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ncmVlbik7XHJcbiAgICBjb25zdCBibHVlID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ibHVlKTtcclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gW3JlZCwgZ3JlZW4sIGJsdWVdO1xyXG4gICAgfVxyXG4gICAgcmVzdWx0WzBdID0gcmVkO1xyXG4gICAgcmVzdWx0WzFdID0gZ3JlZW47XHJcbiAgICByZXN1bHRbMl0gPSBibHVlO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tQnl0ZXMoXHJcbiAgICByZWQ6IG51bWJlcixcclxuICAgIGdyZWVuOiBudW1iZXIsXHJcbiAgICBibHVlOiBudW1iZXIsXHJcbiAgICByZXN1bHQ6IENvbG9yXHJcbiAgKTogQ29sb3Ige1xyXG4gICAgcmVkID0gQ29sb3IuYnl0ZVRvRmxvYXQoZGVmYXVsdFZhbHVlKHJlZCwgMjU1LjApKTtcclxuICAgIGdyZWVuID0gQ29sb3IuYnl0ZVRvRmxvYXQoZGVmYXVsdFZhbHVlKGdyZWVuLCAyNTUuMCkpO1xyXG4gICAgYmx1ZSA9IENvbG9yLmJ5dGVUb0Zsb2F0KGRlZmF1bHRWYWx1ZShibHVlLCAyNTUuMCkpO1xyXG5cclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgQ29sb3IocmVkLCBncmVlbiwgYmx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdWx0LnJlZCA9IHJlZDtcclxuICAgIHJlc3VsdC5ncmVlbiA9IGdyZWVuO1xyXG4gICAgcmVzdWx0LmJsdWUgPSBibHVlO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tSHNsKFxyXG4gICAgaHVlOiBudW1iZXIsXHJcbiAgICBzYXR1cmF0aW9uOiBudW1iZXIsXHJcbiAgICBsaWdodG5lc3M6IG51bWJlcixcclxuICAgIHJlc3VsdDogQ29sb3JcclxuICApOiBDb2xvciB7XHJcbiAgICBodWUgPSBkZWZhdWx0VmFsdWUoaHVlLCAwLjApICUgMS4wO1xyXG4gICAgc2F0dXJhdGlvbiA9IGRlZmF1bHRWYWx1ZShzYXR1cmF0aW9uLCAwLjApO1xyXG4gICAgbGlnaHRuZXNzID0gZGVmYXVsdFZhbHVlKGxpZ2h0bmVzcywgMC4wKTtcclxuICAgIGxldCByZWQgPSBsaWdodG5lc3M7XHJcbiAgICBsZXQgZ3JlZW4gPSBsaWdodG5lc3M7XHJcbiAgICBsZXQgYmx1ZSA9IGxpZ2h0bmVzcztcclxuXHJcbiAgICBpZiAoc2F0dXJhdGlvbiAhPT0gMCkge1xyXG4gICAgICBsZXQgbTI7XHJcbiAgICAgIGlmIChsaWdodG5lc3MgPCAwLjUpIHtcclxuICAgICAgICBtMiA9IGxpZ2h0bmVzcyAqICgxICsgc2F0dXJhdGlvbik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbTIgPSBsaWdodG5lc3MgKyBzYXR1cmF0aW9uIC0gbGlnaHRuZXNzICogc2F0dXJhdGlvbjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgbTEgPSAyLjAgKiBsaWdodG5lc3MgLSBtMjtcclxuICAgICAgcmVkID0gaHVlMnJnYihtMSwgbTIsIGh1ZSArIDEgLyAzKTtcclxuICAgICAgZ3JlZW4gPSBodWUycmdiKG0xLCBtMiwgaHVlKTtcclxuICAgICAgYmx1ZSA9IGh1ZTJyZ2IobTEsIG0yLCBodWUgLSAxIC8gMyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBDb2xvcihyZWQsIGdyZWVuLCBibHVlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHQucmVkID0gcmVkO1xyXG4gICAgcmVzdWx0LmdyZWVuID0gZ3JlZW47XHJcbiAgICByZXN1bHQuYmx1ZSA9IGJsdWU7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIHJhbmRvbSBjb2xvciB1c2luZyB0aGUgcHJvdmlkZWQgb3B0aW9ucy4gRm9yIHJlcHJvZHVjaWJsZSByYW5kb20gY29sb3JzLCB5b3Ugc2hvdWxkXHJcbiAgICogY2FsbCB7QGxpbmsgR01hdGgjc2V0UmFuZG9tTnVtYmVyU2VlZH0gb25jZSBhdCB0aGUgYmVnaW5uaW5nIG9mIHlvdXIgYXBwbGljYXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucmVkXSBJZiBzcGVjaWZpZWQsIHRoZSByZWQgY29tcG9uZW50IHRvIHVzZSBpbnN0ZWFkIG9mIGEgcmFuZG9taXplZCB2YWx1ZS5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWluaW11bVJlZD0wLjBdIFRoZSBtYXhpbXVtIHJlZCB2YWx1ZSB0byBnZW5lcmF0ZSBpZiBub25lIHdhcyBzcGVjaWZpZWQuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1heGltdW1SZWQ9MS4wXSBUaGUgbWluaW11bSByZWQgdmFsdWUgdG8gZ2VuZXJhdGUgaWYgbm9uZSB3YXMgc3BlY2lmaWVkLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5ncmVlbl0gSWYgc3BlY2lmaWVkLCB0aGUgZ3JlZW4gY29tcG9uZW50IHRvIHVzZSBpbnN0ZWFkIG9mIGEgcmFuZG9taXplZCB2YWx1ZS5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWluaW11bUdyZWVuPTAuMF0gVGhlIG1heGltdW0gZ3JlZW4gdmFsdWUgdG8gZ2VuZXJhdGUgaWYgbm9uZSB3YXMgc3BlY2lmaWVkLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhpbXVtR3JlZW49MS4wXSBUaGUgbWluaW11bSBncmVlbiB2YWx1ZSB0byBnZW5lcmF0ZSBpZiBub25lIHdhcyBzcGVjaWZpZWQuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmJsdWVdIElmIHNwZWNpZmllZCwgdGhlIGJsdWUgY29tcG9uZW50IHRvIHVzZSBpbnN0ZWFkIG9mIGEgcmFuZG9taXplZCB2YWx1ZS5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWluaW11bUJsdWU9MC4wXSBUaGUgbWF4aW11bSBibHVlIHZhbHVlIHRvIGdlbmVyYXRlIGlmIG5vbmUgd2FzIHNwZWNpZmllZC5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4aW11bUJsdWU9MS4wXSBUaGUgbWluaW11bSBibHVlIHZhbHVlIHRvIGdlbmVyYXRlIGlmIG5vbmUgd2FzIHNwZWNpZmllZC5cclxuICAgKiBAcGFyYW0ge0NvbG9yfSBbcmVzdWx0XSBUaGUgb2JqZWN0IHRvIHN0b3JlIHRoZSByZXN1bHQgaW4sIGlmIHVuZGVmaW5lZCBhIG5ldyBpbnN0YW5jZSB3aWxsIGJlIGNyZWF0ZWQuXHJcbiAgICogQHJldHVybnMge0NvbG9yfSBUaGUgbW9kaWZpZWQgcmVzdWx0IHBhcmFtZXRlciBvciBhIG5ldyBpbnN0YW5jZSBpZiByZXN1bHQgd2FzIHVuZGVmaW5lZC5cclxuICAgKlxyXG4gICAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSBtaW5pbXVtUmVkIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIG1heGltdW1SZWQuXHJcbiAgICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IG1pbmltdW1HcmVlbiBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBtYXhpbXVtR3JlZW4uXHJcbiAgICogQGV4Y2VwdGlvbiB7RGV2ZWxvcGVyRXJyb3J9IG1pbmltdW1CbHVlIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIG1heGltdW1CbHVlLlxyXG4gICAqIEBleGNlcHRpb24ge0RldmVsb3BlckVycm9yfSBtaW5pbXVtQWxwaGEgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gbWF4aW11bUFscGhhLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiAvL0NyZWF0ZSBhIGNvbXBsZXRlbHkgcmFuZG9tIGNvbG9yXHJcbiAgICogY29uc3QgY29sb3IgPSBDb2xvci5mcm9tUmFuZG9tKCk7XHJcbiAgICpcclxuICAgKiAvL0NyZWF0ZSBhIHJhbmRvbSBzaGFkZSBvZiB5ZWxsb3cuXHJcbiAgICogY29uc3QgY29sb3IxID0gQ29sb3IuZnJvbVJhbmRvbSh7XHJcbiAgICogICAgIHJlZCA6IDEuMCxcclxuICAgKiAgICAgZ3JlZW4gOiAxLjAsXHJcbiAgICogfSk7XHJcbiAgICpcclxuICAgKiAvL0NyZWF0ZSBhIHJhbmRvbSBicmlnaHQgY29sb3IuXHJcbiAgICogY29uc3QgY29sb3IyID0gQ29sb3IuZnJvbVJhbmRvbSh7XHJcbiAgICogICAgIG1pbmltdW1SZWQgOiAwLjc1LFxyXG4gICAqICAgICBtaW5pbXVtR3JlZW4gOiAwLjc1LFxyXG4gICAqICAgICBtaW5pbXVtQmx1ZSA6IDAuNzUsXHJcbiAgICogfSk7XHJcbiAgICovXHJcbiAgc3RhdGljIGZyb21SYW5kb20ob3B0aW9ucywgcmVzdWx0OiBDb2xvcik6IENvbG9yIHtcclxuICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWUob3B0aW9ucywgZGVmYXVsdFZhbHVlLkVNUFRZX09CSkVDVCk7XHJcblxyXG4gICAgbGV0IHJlZCA9IG9wdGlvbnMucmVkO1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlZCkpIHtcclxuICAgICAgY29uc3QgbWluaW11bVJlZCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLm1pbmltdW1SZWQsIDApO1xyXG4gICAgICBjb25zdCBtYXhpbXVtUmVkID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMubWF4aW11bVJlZCwgMS4wKTtcclxuXHJcbiAgICAgIHJlZCA9IG1pbmltdW1SZWQgKyBHTWF0aC5uZXh0UmFuZG9tTnVtYmVyKCkgKiAobWF4aW11bVJlZCAtIG1pbmltdW1SZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBncmVlbiA9IG9wdGlvbnMuZ3JlZW47XHJcbiAgICBpZiAoIWRlZmluZWQoZ3JlZW4pKSB7XHJcbiAgICAgIGNvbnN0IG1pbmltdW1HcmVlbiA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLm1pbmltdW1HcmVlbiwgMCk7XHJcbiAgICAgIGNvbnN0IG1heGltdW1HcmVlbiA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLm1heGltdW1HcmVlbiwgMS4wKTtcclxuXHJcbiAgICAgIGdyZWVuID1cclxuICAgICAgICBtaW5pbXVtR3JlZW4gKyBHTWF0aC5uZXh0UmFuZG9tTnVtYmVyKCkgKiAobWF4aW11bUdyZWVuIC0gbWluaW11bUdyZWVuKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgYmx1ZSA9IG9wdGlvbnMuYmx1ZTtcclxuICAgIGlmICghZGVmaW5lZChibHVlKSkge1xyXG4gICAgICBjb25zdCBtaW5pbXVtQmx1ZSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLm1pbmltdW1CbHVlLCAwKTtcclxuICAgICAgY29uc3QgbWF4aW11bUJsdWUgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5tYXhpbXVtQmx1ZSwgMS4wKTtcclxuXHJcbiAgICAgIGJsdWUgPVxyXG4gICAgICAgIG1pbmltdW1CbHVlICsgR01hdGgubmV4dFJhbmRvbU51bWJlcigpICogKG1heGltdW1CbHVlIC0gbWluaW11bUJsdWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBDb2xvcihyZWQsIGdyZWVuLCBibHVlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHQucmVkID0gcmVkO1xyXG4gICAgcmVzdWx0LmdyZWVuID0gZ3JlZW47XHJcbiAgICByZXN1bHQuYmx1ZSA9IGJsdWU7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21Dc3NDb2xvclN0cmluZyhjb2xvcjogc3RyaW5nLCByZXN1bHQ6IENvbG9yID0gbmV3IENvbG9yKCkpOiBDb2xvciB7XHJcbiAgICAvLyBSZW1vdmUgYWxsIHdoaXRlc3BhY2VzIGZyb20gdGhlIGNvbG9yIHN0cmluZ1xyXG4gICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKC9cXHMvZywgXCJcIik7XHJcblxyXG4gICAgY29uc3QgbmFtZWRDb2xvciA9IENvbG9yW2NvbG9yLnRvVXBwZXJDYXNlKCldO1xyXG4gICAgaWYgKGRlZmluZWQobmFtZWRDb2xvcikpIHtcclxuICAgICAgQ29sb3IuY2xvbmUobmFtZWRDb2xvciwgcmVzdWx0KTtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbWF0Y2hlcyA9IHJnYmFNYXRjaGVyLmV4ZWMoY29sb3IpO1xyXG4gICAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcclxuICAgICAgcmVzdWx0LnJlZCA9IHBhcnNlSW50KG1hdGNoZXNbMV0sIDE2KSAvIDE1O1xyXG4gICAgICByZXN1bHQuZ3JlZW4gPSBwYXJzZUludChtYXRjaGVzWzJdLCAxNikgLyAxNS4wO1xyXG4gICAgICByZXN1bHQuYmx1ZSA9IHBhcnNlSW50KG1hdGNoZXNbM10sIDE2KSAvIDE1LjA7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgbWF0Y2hlcyA9IHJyZ2diYmFhTWF0Y2hlci5leGVjKGNvbG9yKTtcclxuICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XHJcbiAgICAgIHJlc3VsdC5yZWQgPSBwYXJzZUludChtYXRjaGVzWzFdLCAxNikgLyAyNTUuMDtcclxuICAgICAgcmVzdWx0LmdyZWVuID0gcGFyc2VJbnQobWF0Y2hlc1syXSwgMTYpIC8gMjU1LjA7XHJcbiAgICAgIHJlc3VsdC5ibHVlID0gcGFyc2VJbnQobWF0Y2hlc1szXSwgMTYpIC8gMjU1LjA7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgbWF0Y2hlcyA9IHJnYlBhcmVudGhlc2VzTWF0Y2hlci5leGVjKGNvbG9yKTtcclxuICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XHJcbiAgICAgIHJlc3VsdC5yZWQgPVxyXG4gICAgICAgIHBhcnNlRmxvYXQobWF0Y2hlc1sxXSkgL1xyXG4gICAgICAgIChcIiVcIiA9PT0gbWF0Y2hlc1sxXS5zdWJzdHIoLTEpID8gMTAwLjAgOiAyNTUuMCk7XHJcbiAgICAgIHJlc3VsdC5ncmVlbiA9XHJcbiAgICAgICAgcGFyc2VGbG9hdChtYXRjaGVzWzJdKSAvXHJcbiAgICAgICAgKFwiJVwiID09PSBtYXRjaGVzWzJdLnN1YnN0cigtMSkgPyAxMDAuMCA6IDI1NS4wKTtcclxuICAgICAgcmVzdWx0LmJsdWUgPVxyXG4gICAgICAgIHBhcnNlRmxvYXQobWF0Y2hlc1szXSkgL1xyXG4gICAgICAgIChcIiVcIiA9PT0gbWF0Y2hlc1szXS5zdWJzdHIoLTEpID8gMTAwLjAgOiAyNTUuMCk7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgbWF0Y2hlcyA9IGhzbFBhcmVudGhlc2VzTWF0Y2hlci5leGVjKGNvbG9yKTtcclxuICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBDb2xvci5mcm9tSHNsKFxyXG4gICAgICAgIHBhcnNlRmxvYXQobWF0Y2hlc1sxXSkgLyAzNjAuMCxcclxuICAgICAgICBwYXJzZUZsb2F0KG1hdGNoZXNbMl0pIC8gMTAwLjAsXHJcbiAgICAgICAgcGFyc2VGbG9hdChtYXRjaGVzWzNdKSAvIDEwMC4wLFxyXG4gICAgICAgIHJlc3VsdFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc3VsdCA9IHVuZGVmaW5lZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYnl0ZVRvRmxvYXQodmFsdWU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdmFsdWUgLyAyNTUuMDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmbG9hdFRvQnl0ZSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB2YWx1ZSA9PT0gMS4wID8gMjU1LjAgOiAodmFsdWUgKiAyNTYuMCkgfCAwO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsb25lKGNvbG9yOiBDb2xvciwgcmVzdWx0OiBDb2xvcik6IENvbG9yIHtcclxuICAgIGlmICghZGVmaW5lZChjb2xvcikpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgQ29sb3IoY29sb3IucmVkLCBjb2xvci5ncmVlbiwgY29sb3IuYmx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXN1bHQucmVkID0gY29sb3IucmVkO1xyXG4gICAgcmVzdWx0LmdyZWVuID0gY29sb3IuZ3JlZW47XHJcbiAgICByZXN1bHQuYmx1ZSA9IGNvbG9yLmJsdWU7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBDb2xvciwgcmlnaHQ6IENvbG9yKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBsZWZ0ID09PSByaWdodCB8fCAvL1xyXG4gICAgICAoZGVmaW5lZChsZWZ0KSAmJiAvL1xyXG4gICAgICAgIGRlZmluZWQocmlnaHQpICYmIC8vXHJcbiAgICAgICAgbGVmdC5yZWQgPT09IHJpZ2h0LnJlZCAmJiAvL1xyXG4gICAgICAgIGxlZnQuZ3JlZW4gPT09IHJpZ2h0LmdyZWVuICYmIC8vXHJcbiAgICAgICAgbGVmdC5ibHVlID09PSByaWdodC5ibHVlKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgc3RhdGljIGVxdWFsc0FycmF5KGNvbG9yOiBDb2xvciwgYXJyYXk6IG51bWJlcltdLCBvZmZzZXQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgY29sb3IucmVkID09PSBhcnJheVtvZmZzZXRdICYmXHJcbiAgICAgIGNvbG9yLmdyZWVuID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJlxyXG4gICAgICBjb2xvci5ibHVlID09PSBhcnJheVtvZmZzZXQgKyAyXVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgQ29sb3I7XHJcbiIsImltcG9ydCB7IEF0dHJpYnV0ZSB9IGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlXCI7XHJcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xyXG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xyXG5pbXBvcnQgR01hdGggZnJvbSBcIi4vTWF0aFwiO1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tIFwiLi9NYXRyaXgzXCI7XHJcbi8qKlxyXG4gKiBBIDJEIENhcnRlc2lhbiBwb2ludC5cclxuICogQGFsaWFzIFZlY3RvcjJcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbeD0wLjBdIFRoZSBYIGNvbXBvbmVudC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFt5PTAuMF0gVGhlIFkgY29tcG9uZW50LlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgVmVjdG9yMiB7XHJcbiAgcHVibGljIHN0YXRpYyBaRVJPID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMigwLjAsIDAuMCkpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIE9ORSA9IE9iamVjdC5mcmVlemUobmV3IFZlY3RvcjIoMS4wLCAxLjApKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBVTklUX1ggPSBPYmplY3QuZnJlZXplKG5ldyBWZWN0b3IyKDEuMCwgMC4wKSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgVU5JVF9ZID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMigwLjAsIDEuMCkpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgeDogbnVtYmVyID0gMC4wLCBwdWJsaWMgeTogbnVtYmVyID0gMC4wKSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICB9XHJcbiAgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICB9XHJcbiAgdG9BcnJheSgpIHtcclxuICAgIHJldHVybiBbdGhpcy54LCB0aGlzLnldO1xyXG4gIH1cclxuXHJcbiAgY2xvbmUocmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5jbG9uZSh0aGlzLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgZXF1YWxzKHJpZ2h0OiBWZWN0b3IyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5lcXVhbHModGhpcywgcmlnaHQpO1xyXG4gIH1cclxuICBlcXVhbHNFcHNpbG9uKFxyXG4gICAgcmlnaHQ6IFZlY3RvcjIsXHJcbiAgICByZWxhdGl2ZUVwc2lsb246IG51bWJlciA9IDAsXHJcbiAgICBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IDBcclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiBWZWN0b3IyLmVxdWFsc0Vwc2lsb24odGhpcywgcmlnaHQsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKTtcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIGAoJHt0aGlzLnh9LCAke3RoaXMueX0pYDtcclxuICB9XHJcbiAgZnJvbUJ1ZmZlckF0dHJpYnV0ZShhdHRyaWJ1dGU6IEF0dHJpYnV0ZSwgaW5kZXg6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgdGhpcy54ID0gYXR0cmlidXRlLmdldFgoaW5kZXgpO1xyXG4gICAgdGhpcy55ID0gYXR0cmlidXRlLmdldFkoaW5kZXgpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGFwcGx5TWF0cml4MyhtYXRyaXgzOiBNYXRyaXgzKTogVmVjdG9yMiB7XHJcbiAgICBjb25zdCB4ID0gdGhpcy54LFxyXG4gICAgICB5ID0gdGhpcy55O1xyXG4gICAgdGhpcy54ID0gbWF0cml4M1swXSAqIHggKyBtYXRyaXgzWzNdICogeSArIG1hdHJpeDNbNl07XHJcbiAgICB0aGlzLnkgPSBtYXRyaXgzWzFdICogeCArIG1hdHJpeDNbNF0gKiB5ICsgbWF0cml4M1s3XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21FbGVtZW50cyh4OiBudW1iZXIsIHk6IG51bWJlciwgcmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdWx0LnggPSB4O1xyXG4gICAgcmVzdWx0LnkgPSB5O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjbG9uZShjYXJ0ZXNpYW46IFZlY3RvcjIsIHJlc3VsdDogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgaWYgKCFkZWZpbmVkKGNhcnRlc2lhbikpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yMihjYXJ0ZXNpYW4ueCwgY2FydGVzaWFuLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc3VsdC54ID0gY2FydGVzaWFuLng7XHJcbiAgICByZXN1bHQueSA9IGNhcnRlc2lhbi55O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYXhpbXVtQ29tcG9uZW50KGNhcnRlc2lhbjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoY2FydGVzaWFuLngsIGNhcnRlc2lhbi55KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtaW5pbXVtQ29tcG9uZW50KGNhcnRlc2lhbjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5taW4oY2FydGVzaWFuLngsIGNhcnRlc2lhbi55KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtaW5pbXVtQnlDb21wb25lbnQoXHJcbiAgICBmaXJzdDogVmVjdG9yMixcclxuICAgIHNlY29uZDogVmVjdG9yMixcclxuICAgIHJlc3VsdDogVmVjdG9yMlxyXG4gICk6IFZlY3RvcjIge1xyXG4gICAgcmVzdWx0LnggPSBNYXRoLm1pbihmaXJzdC54LCBzZWNvbmQueCk7XHJcbiAgICByZXN1bHQueSA9IE1hdGgubWluKGZpcnN0LnksIHNlY29uZC55KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1heGltdW1CeUNvbXBvbmVudChcclxuICAgIGZpcnN0OiBWZWN0b3IyLFxyXG4gICAgc2Vjb25kOiBWZWN0b3IyLFxyXG4gICAgcmVzdWx0OiBWZWN0b3IyXHJcbiAgKTogVmVjdG9yMiB7XHJcbiAgICByZXN1bHQueCA9IE1hdGgubWF4KGZpcnN0LngsIHNlY29uZC54KTtcclxuICAgIHJlc3VsdC55ID0gTWF0aC5tYXgoZmlyc3QueSwgc2Vjb25kLnkpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjbGFtcChcclxuICAgIHZhbHVlOiBWZWN0b3IyLFxyXG4gICAgbWluOiBWZWN0b3IyLFxyXG4gICAgbWF4OiBWZWN0b3IyLFxyXG4gICAgcmVzdWx0OiBWZWN0b3IyXHJcbiAgKTogVmVjdG9yMiB7XHJcbiAgICBjb25zdCB4ID0gR01hdGguY2xhbXAodmFsdWUueCwgbWluLngsIG1heC54KTtcclxuICAgIGNvbnN0IHkgPSBHTWF0aC5jbGFtcCh2YWx1ZS55LCBtaW4ueSwgbWF4LnkpO1xyXG5cclxuICAgIHJlc3VsdC54ID0geDtcclxuICAgIHJlc3VsdC55ID0geTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hZ25pdHVkZVNxdWFyZWQoY2FydGVzaWFuOiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBjYXJ0ZXNpYW4ueCAqIGNhcnRlc2lhbi54ICsgY2FydGVzaWFuLnkgKiBjYXJ0ZXNpYW4ueTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYWduaXR1ZGUoY2FydGVzaWFuOiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQoVmVjdG9yMi5tYWduaXR1ZGVTcXVhcmVkKGNhcnRlc2lhbikpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRpc3RhbmNlKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIFZlY3RvcjIuc3VidHJhY3QobGVmdCwgcmlnaHQsIGRpc3RhbmNlU2NyYXRjaCk7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5tYWduaXR1ZGUoZGlzdGFuY2VTY3JhdGNoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXN0YW5jZVNxdWFyZWQobGVmdDogVmVjdG9yMiwgcmlnaHQ6IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgVmVjdG9yMi5zdWJ0cmFjdChsZWZ0LCByaWdodCwgZGlzdGFuY2VTY3JhdGNoKTtcclxuICAgIHJldHVybiBWZWN0b3IyLm1hZ25pdHVkZVNxdWFyZWQoZGlzdGFuY2VTY3JhdGNoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBub3JtYWxpemUoY2FydGVzaWFuOiBWZWN0b3IyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcclxuICAgIGNvbnN0IG1hZ25pdHVkZSA9IFZlY3RvcjIubWFnbml0dWRlKGNhcnRlc2lhbik7XHJcblxyXG4gICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4ueCAvIG1hZ25pdHVkZTtcclxuICAgIHJlc3VsdC55ID0gY2FydGVzaWFuLnkgLyBtYWduaXR1ZGU7XHJcblxyXG4gICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcclxuICAgIGlmIChpc05hTihyZXN1bHQueCkgfHwgaXNOYU4ocmVzdWx0LnkpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vcm1hbGl6ZWQgcmVzdWx0IGlzIG5vdCBhIG51bWJlclwiKTtcclxuICAgIH1cclxuICAgIC8vPj5pbmNsdWRlRW5kKCdkZWJ1ZycpO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZG90KGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcm9zcyhsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gbGVmdC54ICogcmlnaHQueSAtIGxlZnQueSAqIHJpZ2h0Lng7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbXVsdGlwbHlDb21wb25lbnRzKFxyXG4gICAgbGVmdDogVmVjdG9yMixcclxuICAgIHJpZ2h0OiBWZWN0b3IyLFxyXG4gICAgcmVzdWx0OiBWZWN0b3IyXHJcbiAgKTogVmVjdG9yMiB7XHJcbiAgICByZXN1bHQueCA9IGxlZnQueCAqIHJpZ2h0Lng7XHJcbiAgICByZXN1bHQueSA9IGxlZnQueSAqIHJpZ2h0Lnk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRpdmlkZUNvbXBvbmVudHMoXHJcbiAgICBsZWZ0OiBWZWN0b3IyLFxyXG4gICAgcmlnaHQ6IFZlY3RvcjIsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjJcclxuICApOiBWZWN0b3IyIHtcclxuICAgIHJlc3VsdC54ID0gbGVmdC54IC8gcmlnaHQueDtcclxuICAgIHJlc3VsdC55ID0gbGVmdC55IC8gcmlnaHQueTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYWRkKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcclxuICAgIHJlc3VsdC54ID0gbGVmdC54ICsgcmlnaHQueDtcclxuICAgIHJlc3VsdC55ID0gbGVmdC55ICsgcmlnaHQueTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VidHJhY3QobGVmdDogVmVjdG9yMiwgcmlnaHQ6IFZlY3RvcjIsIHJlc3VsdDogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmVzdWx0LnggPSBsZWZ0LnggLSByaWdodC54O1xyXG4gICAgcmVzdWx0LnkgPSBsZWZ0LnkgLSByaWdodC55O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtdWx0aXBseUJ5U2NhbGFyKFxyXG4gICAgY2FydGVzaWFuOiBWZWN0b3IyLFxyXG4gICAgc2NhbGFyOiBudW1iZXIsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjJcclxuICApOiBWZWN0b3IyIHtcclxuICAgIHJlc3VsdC54ID0gY2FydGVzaWFuLnggKiBzY2FsYXI7XHJcbiAgICByZXN1bHQueSA9IGNhcnRlc2lhbi55ICogc2NhbGFyO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXZpZGVCeVNjYWxhcihcclxuICAgIGNhcnRlc2lhbjogVmVjdG9yMixcclxuICAgIHNjYWxhcjogbnVtYmVyLFxyXG4gICAgcmVzdWx0OiBWZWN0b3IyXHJcbiAgKTogVmVjdG9yMiB7XHJcbiAgICByZXN1bHQueCA9IGNhcnRlc2lhbi54IC8gc2NhbGFyO1xyXG4gICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4ueSAvIHNjYWxhcjtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbmVnYXRlKGNhcnRlc2lhbjogVmVjdG9yMiwgcmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICByZXN1bHQueCA9IC1jYXJ0ZXNpYW4ueDtcclxuICAgIHJlc3VsdC55ID0gLWNhcnRlc2lhbi55O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhYnMoY2FydGVzaWFuOiBWZWN0b3IyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcclxuICAgIHJlc3VsdC54ID0gTWF0aC5hYnMoY2FydGVzaWFuLngpO1xyXG4gICAgcmVzdWx0LnkgPSBNYXRoLmFicyhjYXJ0ZXNpYW4ueSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxlcnAoXHJcbiAgICBzdGFydDogVmVjdG9yMixcclxuICAgIGVuZDogVmVjdG9yMixcclxuICAgIHQ6IG51bWJlcixcclxuICAgIHJlc3VsdDogVmVjdG9yMlxyXG4gICk6IFZlY3RvcjIge1xyXG4gICAgVmVjdG9yMi5tdWx0aXBseUJ5U2NhbGFyKGVuZCwgdCwgbGVycFNjcmF0Y2gpO1xyXG4gICAgcmVzdWx0ID0gVmVjdG9yMi5tdWx0aXBseUJ5U2NhbGFyKHN0YXJ0LCAxLjAgLSB0LCByZXN1bHQpO1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuYWRkKGxlcnBTY3JhdGNoLCByZXN1bHQsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYW5nbGVCZXR3ZWVuKGxlZnQ6IFZlY3RvcjIsIHJpZ2h0OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIFZlY3RvcjIubm9ybWFsaXplKGxlZnQsIGFuZ2xlQmV0d2VlblNjcmF0Y2gpO1xyXG4gICAgVmVjdG9yMi5ub3JtYWxpemUocmlnaHQsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyKTtcclxuICAgIHJldHVybiBHTWF0aC5hY29zQ2xhbXBlZChcclxuICAgICAgVmVjdG9yMi5kb3QoYW5nbGVCZXR3ZWVuU2NyYXRjaCwgYW5nbGVCZXR3ZWVuU2NyYXRjaDIpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1vc3RPcnRob2dvbmFsQXhpcyhjYXJ0ZXNpYW46IFZlY3RvcjIsIHJlc3VsdDogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgY29uc3QgZiA9IFZlY3RvcjIubm9ybWFsaXplKGNhcnRlc2lhbiwgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaCk7XHJcbiAgICBWZWN0b3IyLmFicyhmLCBmKTtcclxuXHJcbiAgICBpZiAoZi54IDw9IGYueSkge1xyXG4gICAgICByZXN1bHQgPSBWZWN0b3IyLmNsb25lKFZlY3RvcjIuVU5JVF9YLCByZXN1bHQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzdWx0ID0gVmVjdG9yMi5jbG9uZShWZWN0b3IyLlVOSVRfWSwgcmVzdWx0KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBWZWN0b3IyLCByaWdodDogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgbGVmdCA9PT0gcmlnaHQgfHxcclxuICAgICAgKGRlZmluZWQobGVmdCkgJiZcclxuICAgICAgICBkZWZpbmVkKHJpZ2h0KSAmJlxyXG4gICAgICAgIGxlZnQueCA9PT0gcmlnaHQueCAmJlxyXG4gICAgICAgIGxlZnQueSA9PT0gcmlnaHQueSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBlcXVhbHNBcnJheShcclxuICAgIGNhcnRlc2lhbjogVmVjdG9yMixcclxuICAgIGFycmF5OiBudW1iZXJbXSxcclxuICAgIG9mZnNldDogbnVtYmVyXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gY2FydGVzaWFuLnggPT09IGFycmF5W29mZnNldF0gJiYgY2FydGVzaWFuLnkgPT09IGFycmF5W29mZnNldCArIDFdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFsc0Vwc2lsb24oXHJcbiAgICBsZWZ0OiBWZWN0b3IyLFxyXG4gICAgcmlnaHQ6IFZlY3RvcjIsXHJcbiAgICByZWxhdGl2ZUVwc2lsb246IG51bWJlciA9IDAsXHJcbiAgICBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IDBcclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGxlZnQgPT09IHJpZ2h0IHx8XHJcbiAgICAgIChkZWZpbmVkKGxlZnQpICYmXHJcbiAgICAgICAgZGVmaW5lZChyaWdodCkgJiZcclxuICAgICAgICBHTWF0aC5lcXVhbHNFcHNpbG9uKFxyXG4gICAgICAgICAgbGVmdC54LFxyXG4gICAgICAgICAgcmlnaHQueCxcclxuICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbixcclxuICAgICAgICAgIGFic29sdXRlRXBzaWxvblxyXG4gICAgICAgICkgJiZcclxuICAgICAgICBHTWF0aC5lcXVhbHNFcHNpbG9uKGxlZnQueSwgcmlnaHQueSwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuY29uc3QgZGlzdGFuY2VTY3JhdGNoID0gbmV3IFZlY3RvcjIoKTtcclxuY29uc3QgbGVycFNjcmF0Y2ggPSBuZXcgVmVjdG9yMigpO1xyXG5jb25zdCBhbmdsZUJldHdlZW5TY3JhdGNoID0gbmV3IFZlY3RvcjIoKTtcclxuY29uc3QgYW5nbGVCZXR3ZWVuU2NyYXRjaDIgPSBuZXcgVmVjdG9yMigpO1xyXG5jb25zdCBtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoID0gbmV3IFZlY3RvcjIoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFZlY3RvcjI7XHJcbiIsImltcG9ydCBWZWN0b3IyIGZyb20gXCIuL1ZlY3RvcjJcIjtcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcblxuLyoqXG4gKiBBIDJ4MiBtYXRyaXgsIGluZGV4YWJsZSBhcyBhIGNvbHVtbi1tYWpvciBvcmRlciBhcnJheS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMFJvdzA9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAwLCByb3cgMC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMVJvdzA9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAxLCByb3cgMC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMFJvdzE9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAwLCByb3cgMS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMVJvdzE9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAxLCByb3cgMS5cbiAqL1xuY2xhc3MgTWF0cml4MiB7XG5cdGNvbnN0cnVjdG9yKGNvbHVtbjBSb3cwID0gMCwgY29sdW1uMVJvdzAgPSAwLCBjb2x1bW4wUm93MSA9IDAsIGNvbHVtbjFSb3cxID0gMCkge1xuXHRcdHRoaXNbMF0gPSBjb2x1bW4wUm93MDtcblx0XHR0aGlzWzFdID0gY29sdW1uMFJvdzE7XG5cdFx0dGhpc1syXSA9IGNvbHVtbjFSb3cwO1xuXHRcdHRoaXNbM10gPSBjb2x1bW4xUm93MTtcblx0fVxuXG5cdHN0YXRpYyBjbG9uZShtYXRyaXg6IE1hdHJpeDIgfCBudW1iZXJbXSwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XG5cdFx0aWYgKCFkZWZpbmVkKG1hdHJpeCkpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XG5cdFx0XHRyZXR1cm4gbmV3IE1hdHJpeDIobWF0cml4WzBdLCBtYXRyaXhbMl0sIG1hdHJpeFsxXSwgbWF0cml4WzNdKTtcblx0XHR9XG5cdFx0cmVzdWx0WzBdID0gbWF0cml4WzBdO1xuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXTtcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl07XG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgZnJvbUNvbHVtbk1ham9yQXJyYXkodmFsdWVzOiBudW1iZXJbXSwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XG5cdFx0cmV0dXJuIE1hdHJpeDIuY2xvbmUodmFsdWVzLCByZXN1bHQpO1xuXHR9XG5cblx0c3RhdGljIGZyb21Sb3dNYWpvckFycmF5KHZhbHVlczogbnVtYmVyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIG5ldyBNYXRyaXgyKHZhbHVlc1swXSwgdmFsdWVzWzFdLCB2YWx1ZXNbMl0sIHZhbHVlc1szXSk7XG5cdFx0fVxuXHRcdHJlc3VsdFswXSA9IHZhbHVlc1swXTtcblx0XHRyZXN1bHRbMV0gPSB2YWx1ZXNbMl07XG5cdFx0cmVzdWx0WzJdID0gdmFsdWVzWzFdO1xuXHRcdHJlc3VsdFszXSA9IHZhbHVlc1szXTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGZyb21TY2FsZShzY2FsZTogVmVjdG9yMiwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcblx0XHRcdHJldHVybiBuZXcgTWF0cml4MihzY2FsZS54LCAwLjAsIDAuMCwgc2NhbGUueSk7XG5cdFx0fVxuXG5cdFx0cmVzdWx0WzBdID0gc2NhbGUueDtcblx0XHRyZXN1bHRbMV0gPSAwLjA7XG5cdFx0cmVzdWx0WzJdID0gMC4wO1xuXHRcdHJlc3VsdFszXSA9IHNjYWxlLnk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBmcm9tUm90YXRpb24oYW5nbGU6IG51bWJlciwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XG5cdFx0Y29uc3QgY29zQW5nbGUgPSBNYXRoLmNvcyhhbmdsZSk7XG5cdFx0Y29uc3Qgc2luQW5nbGUgPSBNYXRoLnNpbihhbmdsZSk7XG5cblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIG5ldyBNYXRyaXgyKGNvc0FuZ2xlLCAtc2luQW5nbGUsIHNpbkFuZ2xlLCBjb3NBbmdsZSk7XG5cdFx0fVxuXHRcdHJlc3VsdFswXSA9IGNvc0FuZ2xlO1xuXHRcdHJlc3VsdFsxXSA9IHNpbkFuZ2xlO1xuXHRcdHJlc3VsdFsyXSA9IC1zaW5BbmdsZTtcblx0XHRyZXN1bHRbM10gPSBjb3NBbmdsZTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cdHRvQXJyYXkoKSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gW107XG5cdFx0TWF0cml4Mi50b0FycmF5KHRoaXMsIHJlc3VsdCk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyB0b0FycmF5KG1hdHJpeDogTWF0cml4MiwgcmVzdWx0OiBudW1iZXJbXSk6IG51bWJlcltdIHtcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIFttYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBtYXRyaXhbM11dO1xuXHRcdH1cblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF07XG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdO1xuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXTtcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbM107XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBnZXRFbGVtZW50SW5kZXgoY29sdW1uOiBudW1iZXIsIHJvdzogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gY29sdW1uICogMiArIHJvdztcblx0fVxuXG5cdHN0YXRpYyBnZXRDb2x1bW4obWF0cml4OiBNYXRyaXgyLCBpbmRleDogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcblx0XHRjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiAyO1xuXHRcdGNvbnN0IHggPSBtYXRyaXhbc3RhcnRJbmRleF07XG5cdFx0Y29uc3QgeSA9IG1hdHJpeFtzdGFydEluZGV4ICsgMV07XG5cblx0XHRyZXN1bHQueCA9IHg7XG5cdFx0cmVzdWx0LnkgPSB5O1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgc2V0Q29sdW1uKG1hdHJpeDogTWF0cml4MiwgaW5kZXg6IG51bWJlciwgY2FydGVzaWFuOiBWZWN0b3IyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcblx0XHRyZXN1bHQgPSBNYXRyaXgyLmNsb25lKG1hdHJpeCwgcmVzdWx0KTtcblx0XHRjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiAyO1xuXHRcdHJlc3VsdFtzdGFydEluZGV4XSA9IGNhcnRlc2lhbi54O1xuXHRcdHJlc3VsdFtzdGFydEluZGV4ICsgMV0gPSBjYXJ0ZXNpYW4ueTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGdldFJvdyhtYXRyaXg6IE1hdHJpeDIsIGluZGV4OiBudW1iZXIsIHJlc3VsdDogVmVjdG9yMik6IFZlY3RvcjIge1xuXHRcdGNvbnN0IHggPSBtYXRyaXhbaW5kZXhdO1xuXHRcdGNvbnN0IHkgPSBtYXRyaXhbaW5kZXggKyAyXTtcblxuXHRcdHJlc3VsdC54ID0geDtcblx0XHRyZXN1bHQueSA9IHk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBzZXRSb3cobWF0cml4OiBNYXRyaXgyLCBpbmRleDogbnVtYmVyLCBjYXJ0ZXNpYW46IFZlY3RvcjIsIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xuXHRcdHJlc3VsdCA9IE1hdHJpeDIuY2xvbmUobWF0cml4LCByZXN1bHQpO1xuXHRcdHJlc3VsdFtpbmRleF0gPSBjYXJ0ZXNpYW4ueDtcblx0XHRyZXN1bHRbaW5kZXggKyAyXSA9IGNhcnRlc2lhbi55O1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgc2V0U2NhbGUobWF0cml4OiBNYXRyaXgyLCBzY2FsZTogVmVjdG9yMiwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XG5cdFx0Y29uc3QgZXhpc3RpbmdTY2FsZSA9IE1hdHJpeDIuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gxKTtcblx0XHRjb25zdCBzY2FsZVJhdGlvWCA9IHNjYWxlLnggLyBleGlzdGluZ1NjYWxlLng7XG5cdFx0Y29uc3Qgc2NhbGVSYXRpb1kgPSBzY2FsZS55IC8gZXhpc3RpbmdTY2FsZS55O1xuXG5cdFx0cmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGVSYXRpb1g7XG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGVSYXRpb1g7XG5cdFx0cmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGVSYXRpb1k7XG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGVSYXRpb1k7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGdldFNjYWxlKG1hdHJpeDogTWF0cml4MiwgcmVzdWx0OiBWZWN0b3IyKTogVmVjdG9yMiB7XG5cdFx0cmVzdWx0LnggPSBWZWN0b3IyLm1hZ25pdHVkZShWZWN0b3IyLmZyb21FbGVtZW50cyhtYXRyaXhbMF0sIG1hdHJpeFsxXSwgc2NyYXRjaENvbHVtbikpO1xuXHRcdHJlc3VsdC55ID0gVmVjdG9yMi5tYWduaXR1ZGUoVmVjdG9yMi5mcm9tRWxlbWVudHMobWF0cml4WzJdLCBtYXRyaXhbM10sIHNjcmF0Y2hDb2x1bW4pKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGdldE1heGltdW1TY2FsZShtYXRyaXg6IE1hdHJpeDIpOiBudW1iZXIge1xuXHRcdE1hdHJpeDIuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gzKTtcblx0XHRyZXR1cm4gVmVjdG9yMi5tYXhpbXVtQ29tcG9uZW50KHNjYWxlU2NyYXRjaDMpO1xuXHR9XG5cblx0c3RhdGljIHNldFJvdGF0aW9uKG1hdHJpeDogTWF0cml4Miwgcm90YXRpb246IE1hdHJpeDIsIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xuXHRcdGNvbnN0IHNjYWxlID0gTWF0cml4Mi5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDQpO1xuXG5cdFx0cmVzdWx0WzBdID0gcm90YXRpb25bMF0gKiBzY2FsZS54O1xuXHRcdHJlc3VsdFsxXSA9IHJvdGF0aW9uWzFdICogc2NhbGUueDtcblx0XHRyZXN1bHRbMl0gPSByb3RhdGlvblsyXSAqIHNjYWxlLnk7XG5cdFx0cmVzdWx0WzNdID0gcm90YXRpb25bM10gKiBzY2FsZS55O1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBnZXRSb3RhdGlvbihtYXRyaXg6IE1hdHJpeDIsIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xuXHRcdGNvbnN0IHNjYWxlID0gTWF0cml4Mi5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDUpO1xuXG5cdFx0cmVzdWx0WzBdID0gbWF0cml4WzBdIC8gc2NhbGUueDtcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbMV0gLyBzY2FsZS54O1xuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAvIHNjYWxlLnk7XG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdIC8gc2NhbGUueTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgbXVsdGlwbHkobGVmdDogTWF0cml4MiwgcmlnaHQ6IE1hdHJpeDIsIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xuXHRcdGNvbnN0IGNvbHVtbjBSb3cwID0gbGVmdFswXSAqIHJpZ2h0WzBdICsgbGVmdFsyXSAqIHJpZ2h0WzFdO1xuXHRcdGNvbnN0IGNvbHVtbjFSb3cwID0gbGVmdFswXSAqIHJpZ2h0WzJdICsgbGVmdFsyXSAqIHJpZ2h0WzNdO1xuXHRcdGNvbnN0IGNvbHVtbjBSb3cxID0gbGVmdFsxXSAqIHJpZ2h0WzBdICsgbGVmdFszXSAqIHJpZ2h0WzFdO1xuXHRcdGNvbnN0IGNvbHVtbjFSb3cxID0gbGVmdFsxXSAqIHJpZ2h0WzJdICsgbGVmdFszXSAqIHJpZ2h0WzNdO1xuXG5cdFx0cmVzdWx0WzBdID0gY29sdW1uMFJvdzA7XG5cdFx0cmVzdWx0WzFdID0gY29sdW1uMFJvdzE7XG5cdFx0cmVzdWx0WzJdID0gY29sdW1uMVJvdzA7XG5cdFx0cmVzdWx0WzNdID0gY29sdW1uMVJvdzE7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBhZGQobGVmdDogTWF0cml4MiwgcmlnaHQ6IE1hdHJpeDIsIHJlc3VsdDogTWF0cml4Mikge1xuXHRcdHJlc3VsdFswXSA9IGxlZnRbMF0gKyByaWdodFswXTtcblx0XHRyZXN1bHRbMV0gPSBsZWZ0WzFdICsgcmlnaHRbMV07XG5cdFx0cmVzdWx0WzJdID0gbGVmdFsyXSArIHJpZ2h0WzJdO1xuXHRcdHJlc3VsdFszXSA9IGxlZnRbM10gKyByaWdodFszXTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIHN1YnRyYWN0KGxlZnQ6IE1hdHJpeDIsIHJpZ2h0OiBNYXRyaXgyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcblx0XHRyZXN1bHRbMF0gPSBsZWZ0WzBdIC0gcmlnaHRbMF07XG5cdFx0cmVzdWx0WzFdID0gbGVmdFsxXSAtIHJpZ2h0WzFdO1xuXHRcdHJlc3VsdFsyXSA9IGxlZnRbMl0gLSByaWdodFsyXTtcblx0XHRyZXN1bHRbM10gPSBsZWZ0WzNdIC0gcmlnaHRbM107XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBtdWx0aXBseUJ5VmVjdG9yKG1hdHJpeDogTWF0cml4MiwgY2FydGVzaWFuOiBWZWN0b3IyLCByZXN1bHQ6IFZlY3RvcjIpOiBWZWN0b3IyIHtcblx0XHRjb25zdCB4ID0gbWF0cml4WzBdICogY2FydGVzaWFuLnggKyBtYXRyaXhbMl0gKiBjYXJ0ZXNpYW4ueTtcblx0XHRjb25zdCB5ID0gbWF0cml4WzFdICogY2FydGVzaWFuLnggKyBtYXRyaXhbM10gKiBjYXJ0ZXNpYW4ueTtcblxuXHRcdHJlc3VsdC54ID0geDtcblx0XHRyZXN1bHQueSA9IHk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBtdWx0aXBseUJ5U2NhbGFyKG1hdHJpeDogTWF0cml4Miwgc2NhbGFyOiBudW1iZXIsIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxhcjtcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsYXI7XG5cdFx0cmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGFyO1xuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxhcjtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIG11bHRpcGx5QnlTY2FsZShtYXRyaXg6IE1hdHJpeDIsIHNjYWxlOiBWZWN0b3IyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZS54O1xuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlLng7XG5cdFx0cmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGUueTtcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsZS55O1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBuZWdhdGUobWF0cml4OiBNYXRyaXgyLCByZXN1bHQ6IE1hdHJpeDIpOiBNYXRyaXgyIHtcblx0XHRyZXN1bHRbMF0gPSAtbWF0cml4WzBdO1xuXHRcdHJlc3VsdFsxXSA9IC1tYXRyaXhbMV07XG5cdFx0cmVzdWx0WzJdID0gLW1hdHJpeFsyXTtcblx0XHRyZXN1bHRbM10gPSAtbWF0cml4WzNdO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgdHJhbnNwb3NlKG1hdHJpeDogTWF0cml4MiwgcmVzdWx0OiBNYXRyaXgyKTogTWF0cml4MiB7XG5cdFx0Y29uc3QgY29sdW1uMFJvdzAgPSBtYXRyaXhbMF07XG5cdFx0Y29uc3QgY29sdW1uMFJvdzEgPSBtYXRyaXhbMl07XG5cdFx0Y29uc3QgY29sdW1uMVJvdzAgPSBtYXRyaXhbMV07XG5cdFx0Y29uc3QgY29sdW1uMVJvdzEgPSBtYXRyaXhbM107XG5cblx0XHRyZXN1bHRbMF0gPSBjb2x1bW4wUm93MDtcblx0XHRyZXN1bHRbMV0gPSBjb2x1bW4wUm93MTtcblx0XHRyZXN1bHRbMl0gPSBjb2x1bW4xUm93MDtcblx0XHRyZXN1bHRbM10gPSBjb2x1bW4xUm93MTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGFicyhtYXRyaXg6IE1hdHJpeDIsIHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xuXHRcdHJlc3VsdFswXSA9IE1hdGguYWJzKG1hdHJpeFswXSk7XG5cdFx0cmVzdWx0WzFdID0gTWF0aC5hYnMobWF0cml4WzFdKTtcblx0XHRyZXN1bHRbMl0gPSBNYXRoLmFicyhtYXRyaXhbMl0pO1xuXHRcdHJlc3VsdFszXSA9IE1hdGguYWJzKG1hdHJpeFszXSk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIGVxdWFscyhsZWZ0OiBNYXRyaXgyLCByaWdodDogTWF0cml4Mik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHRsZWZ0ID09PSByaWdodCB8fFxuXHRcdFx0KGRlZmluZWQobGVmdCkgJiZcblx0XHRcdFx0ZGVmaW5lZChyaWdodCkgJiZcblx0XHRcdFx0bGVmdFswXSA9PT0gcmlnaHRbMF0gJiZcblx0XHRcdFx0bGVmdFsxXSA9PT0gcmlnaHRbMV0gJiZcblx0XHRcdFx0bGVmdFsyXSA9PT0gcmlnaHRbMl0gJiZcblx0XHRcdFx0bGVmdFszXSA9PT0gcmlnaHRbM10pXG5cdFx0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0c3RhdGljIGVxdWFsc0FycmF5KG1hdHJpeDogTWF0cml4MiwgYXJyYXk6IG51bWJlcltdLCBvZmZzZXQ6IG51bWJlcik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAoXG5cdFx0XHRtYXRyaXhbMF0gPT09IGFycmF5W29mZnNldF0gJiZcblx0XHRcdG1hdHJpeFsxXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiZcblx0XHRcdG1hdHJpeFsyXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMl0gJiZcblx0XHRcdG1hdHJpeFszXSA9PT0gYXJyYXlbb2Zmc2V0ICsgM11cblx0XHQpO1xuXHR9XG5cblx0c3RhdGljIGVxdWFsc0Vwc2lsb24obGVmdDogTWF0cml4MiwgcmlnaHQ6IE1hdHJpeDIsIGVwc2lsb246IG51bWJlciA9IDApOiBib29sZWFuIHtcblx0XHRlcHNpbG9uID0gZGVmYXVsdFZhbHVlKGVwc2lsb24sIDApO1xuXHRcdHJldHVybiAoXG5cdFx0XHRsZWZ0ID09PSByaWdodCB8fFxuXHRcdFx0KGRlZmluZWQobGVmdCkgJiZcblx0XHRcdFx0ZGVmaW5lZChyaWdodCkgJiZcblx0XHRcdFx0TWF0aC5hYnMobGVmdFswXSAtIHJpZ2h0WzBdKSA8PSBlcHNpbG9uICYmXG5cdFx0XHRcdE1hdGguYWJzKGxlZnRbMV0gLSByaWdodFsxXSkgPD0gZXBzaWxvbiAmJlxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzJdIC0gcmlnaHRbMl0pIDw9IGVwc2lsb24gJiZcblx0XHRcdFx0TWF0aC5hYnMobGVmdFszXSAtIHJpZ2h0WzNdKSA8PSBlcHNpbG9uKVxuXHRcdCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIElERU5USVRZID0gT2JqZWN0LmZyZWV6ZShuZXcgTWF0cml4MigxLjAsIDAuMCwgMC4wLCAxLjApKTtcblxuXHRwdWJsaWMgc3RhdGljIFpFUk8gPSBPYmplY3QuZnJlZXplKG5ldyBNYXRyaXgyKDAuMCwgMC4wLCAwLjAsIDAuMCkpO1xuXG5cdGNsb25lKHJlc3VsdDogTWF0cml4Mik6IE1hdHJpeDIge1xuXHRcdHJldHVybiBNYXRyaXgyLmNsb25lKHRoaXMsIHJlc3VsdCk7XG5cdH1cblxuXHRlcXVhbHMocmlnaHQ6IE1hdHJpeDIpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gTWF0cml4Mi5lcXVhbHModGhpcywgcmlnaHQpO1xuXHR9XG5cblx0ZXF1YWxzRXBzaWxvbihyaWdodDogTWF0cml4MiwgZXBzaWxvbjogbnVtYmVyID0gMCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBNYXRyaXgyLmVxdWFsc0Vwc2lsb24odGhpcywgcmlnaHQsIGVwc2lsb24pO1xuXHR9XG5cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIGAoJHt0aGlzWzBdfSwgJHt0aGlzWzJdfSlcXG5gICsgYCgke3RoaXNbMV19LCAke3RoaXNbM119KWA7XG5cdH1cbn1cbmNvbnN0IHNjYWxlU2NyYXRjaDEgPSBuZXcgVmVjdG9yMigpO1xuY29uc3Qgc2NhbGVTY3JhdGNoMiA9IG5ldyBWZWN0b3IyKCk7XG5jb25zdCBzY2FsZVNjcmF0Y2gzID0gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IHNjYWxlU2NyYXRjaDQgPSBuZXcgVmVjdG9yMigpO1xuY29uc3Qgc2NyYXRjaENvbHVtbiA9IG5ldyBWZWN0b3IyKCk7XG5jb25zdCBzY2FsZVNjcmF0Y2g1ID0gbmV3IFZlY3RvcjIoKTtcbmV4cG9ydCBkZWZhdWx0IE1hdHJpeDI7XG4iLCJpbXBvcnQgeyBBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vcmVuZGVyL0F0dHJpYnV0ZVwiO1xyXG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xyXG5pbXBvcnQgR01hdGggZnJvbSBcIi4vTWF0aFwiO1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tIFwiLi9NYXRyaXgzXCI7XHJcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuL01hdHJpeDRcIjtcclxuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gXCIuL1F1YXRlcm5pb25cIjtcclxuaW1wb3J0IHsgU3BoZXJpY2FsIH0gZnJvbSBcIi4vU3BoZXJpY2FsXCI7XHJcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuL1ZlY3RvcjRcIjtcclxuY2xhc3MgVmVjdG9yMyB7XHJcbiAgcHVibGljIHN0YXRpYyBaRVJPID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygwLjAsIDAuMCwgMC4wKSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgT05FID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygxLjAsIDEuMCwgMS4wKSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgVU5JVF9YID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygxLjAsIDAuMCwgMC4wKSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgVU5JVF9ZID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygwLjAsIDEuMCwgMC4wKSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgVU5JVF9aID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yMygwLjAsIDAuMCwgMS4wKSk7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxuICB6OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciA9IDAsIHk6IG51bWJlciA9IDAsIHo6IG51bWJlciA9IDApIHtcclxuICAgIHRoaXMueCA9IHg7XHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gICAgdGhpcy56ID0gejtcclxuICB9XHJcbiAgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMueCA9IHg7XHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gICAgdGhpcy56ID0gejtcclxuICB9XHJcbiAgdG9BcnJheSgpOiBudW1iZXJbXSB7XHJcbiAgICByZXR1cm4gW3RoaXMueCwgdGhpcy55LCB0aGlzLnpdO1xyXG4gIH1cclxuXHJcbiAgY29weSh2OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcbiAgICB0aGlzLnggPSB2Lng7XHJcbiAgICB0aGlzLnkgPSB2Lnk7XHJcbiAgICB0aGlzLnogPSB2Lno7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgbGVycChlbmQ6IFZlY3RvcjMsIHQ6IG51bWJlcik6IFZlY3RvcjMge1xyXG4gICAgVmVjdG9yMy5sZXJwKHRoaXMsIGVuZCwgdCwgdGhpcyk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgYWRkKHY6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgIFZlY3RvcjMuYWRkKHRoaXMsIHYsIHRoaXMpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGFkZFNjYWxlZFZlY3Rvcih2OiBWZWN0b3IzLCBzOiBudW1iZXIpOiBWZWN0b3IzIHtcclxuICAgIHRoaXMueCArPSB2LnggKiBzO1xyXG4gICAgdGhpcy55ICs9IHYueSAqIHM7XHJcbiAgICB0aGlzLnogKz0gdi56ICogcztcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBzdWJ0cmFjdCh2OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcbiAgICBWZWN0b3IzLnN1YnRyYWN0KHRoaXMsIHYsIHRoaXMpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGFwcGx5UXVhdGVybmlvbihxOiBRdWF0ZXJuaW9uKTogVmVjdG9yMyB7XHJcbiAgICBjb25zdCB4ID0gdGhpcy54LFxyXG4gICAgICB5ID0gdGhpcy55LFxyXG4gICAgICB6ID0gdGhpcy56O1xyXG4gICAgY29uc3QgcXggPSBxLngsXHJcbiAgICAgIHF5ID0gcS55LFxyXG4gICAgICBxeiA9IHEueixcclxuICAgICAgcXcgPSBxLnc7XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIHF1YXQgKiB2ZWN0b3JcclxuXHJcbiAgICBjb25zdCBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcclxuICAgIGNvbnN0IGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xyXG4gICAgY29uc3QgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XHJcbiAgICBjb25zdCBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxyXG5cclxuICAgIHRoaXMueCA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7XHJcbiAgICB0aGlzLnkgPSBpeSAqIHF3ICsgaXcgKiAtcXkgKyBpeiAqIC1xeCAtIGl4ICogLXF6O1xyXG4gICAgdGhpcy56ID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgc2V0RnJvbU1hdHJpeENvbHVtbihtOiBNYXRyaXgzIHwgTWF0cml4NCwgaW5kZXg6IG51bWJlcik6IFZlY3RvcjMge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJvbUFycmF5KG0sIGluZGV4ICogNCk7XHJcbiAgfVxyXG4gIGZyb21BcnJheShhcnJheTogTWF0cml4MyB8IE1hdHJpeDQsIG9mZnNldDogbnVtYmVyID0gMCk6IFZlY3RvcjMge1xyXG4gICAgdGhpcy54ID0gYXJyYXlbb2Zmc2V0XTtcclxuICAgIHRoaXMueSA9IGFycmF5W29mZnNldCArIDFdO1xyXG4gICAgdGhpcy56ID0gYXJyYXlbb2Zmc2V0ICsgMl07XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBtdWx0aXBseUJ5U2NhbGFyKHNjYWxlOiBudW1iZXIpOiBWZWN0b3IzIHtcclxuICAgIFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcih0aGlzLCBzY2FsZSwgdGhpcyk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGNsb25lKCk6IFZlY3RvcjMge1xyXG4gICAgcmV0dXJuIFZlY3RvcjMuY2xvbmUodGhpcywgbmV3IFZlY3RvcjMoKSk7XHJcbiAgfVxyXG4gIGxlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnopO1xyXG4gIH1cclxuICBhcHBseU1hdHJpeDQobWF0cml4OiBNYXRyaXg0KTogVmVjdG9yMyB7XHJcbiAgICBjb25zdCB4ID0gdGhpcy54LFxyXG4gICAgICB5ID0gdGhpcy55LFxyXG4gICAgICB6ID0gdGhpcy56O1xyXG4gICAgY29uc3QgZSA9IG1hdHJpeDtcclxuICAgIGNvbnN0IHcgPSAxIC8gKGVbM10gKiB4ICsgZVs3XSAqIHkgKyBlWzExXSAqIHogKyBlWzE1XSk7XHJcbiAgICB0aGlzLnggPSAoZVswXSAqIHggKyBlWzRdICogeSArIGVbOF0gKiB6ICsgZVsxMl0pICogdztcclxuICAgIHRoaXMueSA9IChlWzFdICogeCArIGVbNV0gKiB5ICsgZVs5XSAqIHogKyBlWzEzXSkgKiB3O1xyXG4gICAgdGhpcy56ID0gKGVbMl0gKiB4ICsgZVs2XSAqIHkgKyBlWzEwXSAqIHogKyBlWzE0XSkgKiB3O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGFwcGx5TWF0cml4MyhtYXRyaXg6IE1hdHJpeDMpOiBWZWN0b3IzIHtcclxuICAgIGxldCB4ID0gdGhpcy54LFxyXG4gICAgICB5ID0gdGhpcy55LFxyXG4gICAgICB6ID0gdGhpcy56O1xyXG4gICAgdGhpcy54ID0geCAqIG1hdHJpeFswXSArIHkgKiBtYXRyaXhbM10gKyB6ICogbWF0cml4WzZdO1xyXG4gICAgdGhpcy55ID0geCAqIG1hdHJpeFsxXSArIHkgKiBtYXRyaXhbNF0gKyB6ICogbWF0cml4WzddO1xyXG4gICAgdGhpcy56ID0geCAqIG1hdHJpeFsyXSArIHkgKiBtYXRyaXhbNV0gKyB6ICogbWF0cml4WzhdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIHRyYW5zZm9ybURpcmVjdGlvbihtYXRyaXg6IE1hdHJpeDMgfCBNYXRyaXg0KTogVmVjdG9yMyB7XHJcbiAgICBjb25zdCB4ID0gdGhpcy54LFxyXG4gICAgICB5ID0gdGhpcy55LFxyXG4gICAgICB6ID0gdGhpcy56O1xyXG4gICAgY29uc3QgZSA9IG1hdHJpeDtcclxuICAgIHRoaXMueCA9IGVbMF0gKiB4ICsgZVs0XSAqIHkgKyBlWzhdICogejtcclxuICAgIHRoaXMueSA9IGVbMV0gKiB4ICsgZVs1XSAqIHkgKyBlWzldICogejtcclxuICAgIHRoaXMueiA9IGVbMl0gKiB4ICsgZVs2XSAqIHkgKyBlWzEwXSAqIHo7XHJcbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcclxuICB9XHJcbiAgbm9ybWFsaXplKCk6IFZlY3RvcjMge1xyXG4gICAgVmVjdG9yMy5ub3JtYWxpemUodGhpcywgdGhpcyk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGVxdWFscyhyaWdodDogVmVjdG9yMyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIFZlY3RvcjMuZXF1YWxzKHRoaXMsIHJpZ2h0KTtcclxuICB9XHJcblxyXG4gIGVxdWFsc0Vwc2lsb24oXHJcbiAgICByaWdodDogVmVjdG9yMyxcclxuICAgIHJlbGF0aXZlRXBzaWxvbjogbnVtYmVyID0gMCxcclxuICAgIGFic29sdXRlRXBzaWxvbjogbnVtYmVyID0gMFxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIFZlY3RvcjMuZXF1YWxzRXBzaWxvbih0aGlzLCByaWdodCwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pO1xyXG4gIH1cclxuXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gYCgke3RoaXMueH0sICR7dGhpcy55fSwgJHt0aGlzLnp9KWA7XHJcbiAgfVxyXG4gIGZyb21CdWZmZXJBdHRyaWJ1dGUoYXR0cmlidXRlOiBBdHRyaWJ1dGUsIGluZGV4OiBudW1iZXIpOiBWZWN0b3IzIHtcclxuICAgIHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKGluZGV4KTtcclxuICAgIHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKGluZGV4KTtcclxuICAgIHRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKGluZGV4KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBzdGF0aWMgZnJvbVZlY3RvcjQodmVjNDogVmVjdG9yNCwgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcbiAgICByZXN1bHQueCA9IHZlYzQueDtcclxuICAgIHJlc3VsdC55ID0gdmVjNC55O1xyXG4gICAgcmVzdWx0LnogPSB2ZWM0Lno7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21TcGhlcmljYWwoc3BoZXJpY2FsOiBTcGhlcmljYWwsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmVzdWx0ID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgcGhpLCByYWRpdXMsIHRoZXRhIH0gPSBzcGhlcmljYWw7XHJcbiAgICBjb25zdCBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbihwaGkpICogcmFkaXVzO1xyXG4gICAgcmVzdWx0LnggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbih0aGV0YSk7XHJcbiAgICByZXN1bHQueSA9IE1hdGguY29zKHBoaSkgKiByYWRpdXM7XHJcbiAgICByZXN1bHQueiA9IHNpblBoaVJhZGl1cyAqIE1hdGguY29zKHRoZXRhKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbUVsZW1lbnRzKFxyXG4gICAgeDogbnVtYmVyLFxyXG4gICAgeTogbnVtYmVyLFxyXG4gICAgejogbnVtYmVyLFxyXG4gICAgcmVzdWx0OiBWZWN0b3IzXHJcbiAgKTogVmVjdG9yMyB7XHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IFZlY3RvcjMoeCwgeSwgeik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdWx0LnggPSB4O1xyXG4gICAgcmVzdWx0LnkgPSB5O1xyXG4gICAgcmVzdWx0LnogPSB6O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjbG9uZShjYXJ0ZXNpYW46IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCkpOiBWZWN0b3IzIHtcclxuICAgIGlmICghZGVmaW5lZChjYXJ0ZXNpYW4pKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IFZlY3RvcjMoY2FydGVzaWFuLngsIGNhcnRlc2lhbi55LCBjYXJ0ZXNpYW4ueik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4ueDtcclxuICAgIHJlc3VsdC55ID0gY2FydGVzaWFuLnk7XHJcbiAgICByZXN1bHQueiA9IGNhcnRlc2lhbi56O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYXhpbXVtQ29tcG9uZW50KGNhcnRlc2lhbjogVmVjdG9yMyk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoY2FydGVzaWFuLngsIGNhcnRlc2lhbi55LCBjYXJ0ZXNpYW4ueik7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWluaW11bUNvbXBvbmVudChjYXJ0ZXNpYW46IFZlY3RvcjMpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGgubWluKGNhcnRlc2lhbi54LCBjYXJ0ZXNpYW4ueSwgY2FydGVzaWFuLnopO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1pbmltdW1CeUNvbXBvbmVudChcclxuICAgIGZpcnN0OiBWZWN0b3IzLFxyXG4gICAgc2Vjb25kOiBWZWN0b3IzLFxyXG4gICAgcmVzdWx0OiBWZWN0b3IzXHJcbiAgKTogVmVjdG9yMyB7XHJcbiAgICByZXN1bHQueCA9IE1hdGgubWluKGZpcnN0LngsIHNlY29uZC54KTtcclxuICAgIHJlc3VsdC55ID0gTWF0aC5taW4oZmlyc3QueSwgc2Vjb25kLnkpO1xyXG4gICAgcmVzdWx0LnogPSBNYXRoLm1pbihmaXJzdC56LCBzZWNvbmQueik7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYXhpbXVtQnlDb21wb25lbnQoXHJcbiAgICBmaXJzdDogVmVjdG9yMyxcclxuICAgIHNlY29uZDogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogVmVjdG9yM1xyXG4gICk6IFZlY3RvcjMge1xyXG4gICAgcmVzdWx0LnggPSBNYXRoLm1heChmaXJzdC54LCBzZWNvbmQueCk7XHJcbiAgICByZXN1bHQueSA9IE1hdGgubWF4KGZpcnN0LnksIHNlY29uZC55KTtcclxuICAgIHJlc3VsdC56ID0gTWF0aC5tYXgoZmlyc3Queiwgc2Vjb25kLnopO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjbGFtcChcclxuICAgIHZhbHVlOiBWZWN0b3IzLFxyXG4gICAgbWluOiBWZWN0b3IzLFxyXG4gICAgbWF4OiBWZWN0b3IzLFxyXG4gICAgcmVzdWx0OiBWZWN0b3IzXHJcbiAgKTogVmVjdG9yMyB7XHJcbiAgICBjb25zdCB4ID0gR01hdGguY2xhbXAodmFsdWUueCwgbWluLngsIG1heC54KTtcclxuICAgIGNvbnN0IHkgPSBHTWF0aC5jbGFtcCh2YWx1ZS55LCBtaW4ueSwgbWF4LnkpO1xyXG4gICAgY29uc3QgeiA9IEdNYXRoLmNsYW1wKHZhbHVlLnosIG1pbi56LCBtYXgueik7XHJcblxyXG4gICAgcmVzdWx0LnggPSB4O1xyXG4gICAgcmVzdWx0LnkgPSB5O1xyXG4gICAgcmVzdWx0LnogPSB6O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWFnbml0dWRlU3F1YXJlZChjYXJ0ZXNpYW46IFZlY3RvcjMpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgY2FydGVzaWFuLnggKiBjYXJ0ZXNpYW4ueCArXHJcbiAgICAgIGNhcnRlc2lhbi55ICogY2FydGVzaWFuLnkgK1xyXG4gICAgICBjYXJ0ZXNpYW4ueiAqIGNhcnRlc2lhbi56XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hZ25pdHVkZShjYXJ0ZXNpYW46IFZlY3RvcjMpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydChWZWN0b3IzLm1hZ25pdHVkZVNxdWFyZWQoY2FydGVzaWFuKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGlzdGFuY2UobGVmdDogVmVjdG9yMywgcmlnaHQ6IFZlY3RvcjMpOiBudW1iZXIge1xyXG4gICAgVmVjdG9yMy5zdWJ0cmFjdChsZWZ0LCByaWdodCwgZGlzdGFuY2VTY3JhdGNoKTtcclxuICAgIHJldHVybiBWZWN0b3IzLm1hZ25pdHVkZShkaXN0YW5jZVNjcmF0Y2gpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRpc3RhbmNlU3F1YXJlZChsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMyk6IG51bWJlciB7XHJcbiAgICBWZWN0b3IzLnN1YnRyYWN0KGxlZnQsIHJpZ2h0LCBkaXN0YW5jZVNjcmF0Y2gpO1xyXG4gICAgcmV0dXJuIFZlY3RvcjMubWFnbml0dWRlU3F1YXJlZChkaXN0YW5jZVNjcmF0Y2gpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG5vcm1hbGl6ZShjYXJ0ZXNpYW46IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG4gICAgY29uc3QgbWFnbml0dWRlID0gVmVjdG9yMy5tYWduaXR1ZGUoY2FydGVzaWFuKTtcclxuXHJcbiAgICByZXN1bHQueCA9IGNhcnRlc2lhbi54IC8gbWFnbml0dWRlO1xyXG4gICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4ueSAvIG1hZ25pdHVkZTtcclxuICAgIHJlc3VsdC56ID0gY2FydGVzaWFuLnogLyBtYWduaXR1ZGU7XHJcblxyXG4gICAgaWYgKGlzTmFOKHJlc3VsdC54KSB8fCBpc05hTihyZXN1bHQueSkgfHwgaXNOYU4ocmVzdWx0LnopKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vcm1hbGl6ZWQgcmVzdWx0IGlzIG5vdCBhIG51bWJlclwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRvdChsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMyk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0LnkgKyBsZWZ0LnogKiByaWdodC56O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG11bHRpcGx5Q29tcG9uZW50cyhcclxuICAgIGxlZnQ6IFZlY3RvcjMsXHJcbiAgICByaWdodDogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogVmVjdG9yM1xyXG4gICk6IFZlY3RvcjMge1xyXG4gICAgcmVzdWx0LnggPSBsZWZ0LnggKiByaWdodC54O1xyXG4gICAgcmVzdWx0LnkgPSBsZWZ0LnkgKiByaWdodC55O1xyXG4gICAgcmVzdWx0LnogPSBsZWZ0LnogKiByaWdodC56O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXZpZGVDb21wb25lbnRzKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpIHtcclxuICAgIHJlc3VsdC54ID0gbGVmdC54IC8gcmlnaHQueDtcclxuICAgIHJlc3VsdC55ID0gbGVmdC55IC8gcmlnaHQueTtcclxuICAgIHJlc3VsdC56ID0gbGVmdC56IC8gcmlnaHQuejtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYWRkKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgIHJlc3VsdC54ID0gbGVmdC54ICsgcmlnaHQueDtcclxuICAgIHJlc3VsdC55ID0gbGVmdC55ICsgcmlnaHQueTtcclxuICAgIHJlc3VsdC56ID0gbGVmdC56ICsgcmlnaHQuejtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VidHJhY3QobGVmdDogVmVjdG9yMywgcmlnaHQ6IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG4gICAgcmVzdWx0LnggPSBsZWZ0LnggLSByaWdodC54O1xyXG4gICAgcmVzdWx0LnkgPSBsZWZ0LnkgLSByaWdodC55O1xyXG4gICAgcmVzdWx0LnogPSBsZWZ0LnogLSByaWdodC56O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtdWx0aXBseUJ5U2NhbGFyKFxyXG4gICAgY2FydGVzaWFuOiBWZWN0b3IzLFxyXG4gICAgc2NhbGFyOiBudW1iZXIsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjNcclxuICApOiBWZWN0b3IzIHtcclxuICAgIHJlc3VsdC54ID0gY2FydGVzaWFuLnggKiBzY2FsYXI7XHJcbiAgICByZXN1bHQueSA9IGNhcnRlc2lhbi55ICogc2NhbGFyO1xyXG4gICAgcmVzdWx0LnogPSBjYXJ0ZXNpYW4ueiAqIHNjYWxhcjtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGl2aWRlQnlTY2FsYXIoXHJcbiAgICBjYXJ0ZXNpYW46IFZlY3RvcjMsXHJcbiAgICBzY2FsYXI6IG51bWJlcixcclxuICAgIHJlc3VsdDogVmVjdG9yM1xyXG4gICk6IFZlY3RvcjMge1xyXG4gICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4ueCAvIHNjYWxhcjtcclxuICAgIHJlc3VsdC55ID0gY2FydGVzaWFuLnkgLyBzY2FsYXI7XHJcbiAgICByZXN1bHQueiA9IGNhcnRlc2lhbi56IC8gc2NhbGFyO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBuZWdhdGUoY2FydGVzaWFuOiBWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgIHJlc3VsdC54ID0gLWNhcnRlc2lhbi54O1xyXG4gICAgcmVzdWx0LnkgPSAtY2FydGVzaWFuLnk7XHJcbiAgICByZXN1bHQueiA9IC1jYXJ0ZXNpYW4uejtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYWJzKGNhcnRlc2lhbjogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcbiAgICByZXN1bHQueCA9IE1hdGguYWJzKGNhcnRlc2lhbi54KTtcclxuICAgIHJlc3VsdC55ID0gTWF0aC5hYnMoY2FydGVzaWFuLnkpO1xyXG4gICAgcmVzdWx0LnogPSBNYXRoLmFicyhjYXJ0ZXNpYW4ueik7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxlcnAoXHJcbiAgICBzdGFydDogVmVjdG9yMyxcclxuICAgIGVuZDogVmVjdG9yMyxcclxuICAgIHQ6IG51bWJlcixcclxuICAgIHJlc3VsdDogVmVjdG9yM1xyXG4gICk6IFZlY3RvcjMge1xyXG4gICAgVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGVuZCwgdCwgbGVycFNjcmF0Y2gpO1xyXG4gICAgcmVzdWx0ID0gVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKHN0YXJ0LCAxLjAgLSB0LCByZXN1bHQpO1xyXG4gICAgcmV0dXJuIFZlY3RvcjMuYWRkKGxlcnBTY3JhdGNoLCByZXN1bHQsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYW5nbGVCZXR3ZWVuKGxlZnQ6IFZlY3RvcjMsIHJpZ2h0OiBWZWN0b3IzKTogbnVtYmVyIHtcclxuICAgIFZlY3RvcjMubm9ybWFsaXplKGxlZnQsIGFuZ2xlQmV0d2VlblNjcmF0Y2gpO1xyXG4gICAgVmVjdG9yMy5ub3JtYWxpemUocmlnaHQsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyKTtcclxuICAgIGNvbnN0IGNvc2luZSA9IFZlY3RvcjMuZG90KGFuZ2xlQmV0d2VlblNjcmF0Y2gsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyKTtcclxuICAgIGNvbnN0IHNpbmUgPSBWZWN0b3IzLm1hZ25pdHVkZShcclxuICAgICAgVmVjdG9yMy5jcm9zcyhcclxuICAgICAgICBhbmdsZUJldHdlZW5TY3JhdGNoLFxyXG4gICAgICAgIGFuZ2xlQmV0d2VlblNjcmF0Y2gyLFxyXG4gICAgICAgIGFuZ2xlQmV0d2VlblNjcmF0Y2hcclxuICAgICAgKVxyXG4gICAgKTtcclxuICAgIHJldHVybiBNYXRoLmF0YW4yKHNpbmUsIGNvc2luZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbW9zdE9ydGhvZ29uYWxBeGlzKGNhcnRlc2lhbjogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcbiAgICBjb25zdCBmID0gVmVjdG9yMy5ub3JtYWxpemUoY2FydGVzaWFuLCBtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoKTtcclxuICAgIFZlY3RvcjMuYWJzKGYsIGYpO1xyXG5cclxuICAgIGlmIChmLnggPD0gZi55KSB7XHJcbiAgICAgIGlmIChmLnggPD0gZi56KSB7XHJcbiAgICAgICAgcmVzdWx0ID0gVmVjdG9yMy5jbG9uZShWZWN0b3IzLlVOSVRfWCwgcmVzdWx0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXN1bHQgPSBWZWN0b3IzLmNsb25lKFZlY3RvcjMuVU5JVF9aLCByZXN1bHQpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGYueSA8PSBmLnopIHtcclxuICAgICAgcmVzdWx0ID0gVmVjdG9yMy5jbG9uZShWZWN0b3IzLlVOSVRfWSwgcmVzdWx0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlc3VsdCA9IFZlY3RvcjMuY2xvbmUoVmVjdG9yMy5VTklUX1osIHJlc3VsdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcm9qZWN0VmVjdG9yKGE6IFZlY3RvcjMsIGI6IFZlY3RvcjMsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG4gICAgY29uc3Qgc2NhbGFyID0gVmVjdG9yMy5kb3QoYSwgYikgLyBWZWN0b3IzLmRvdChiLCBiKTtcclxuICAgIHJldHVybiBWZWN0b3IzLm11bHRpcGx5QnlTY2FsYXIoYiwgc2NhbGFyLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgbGVmdCA9PT0gcmlnaHQgfHxcclxuICAgICAgKGRlZmluZWQobGVmdCkgJiZcclxuICAgICAgICBkZWZpbmVkKHJpZ2h0KSAmJlxyXG4gICAgICAgIGxlZnQueCA9PT0gcmlnaHQueCAmJlxyXG4gICAgICAgIGxlZnQueSA9PT0gcmlnaHQueSAmJlxyXG4gICAgICAgIGxlZnQueiA9PT0gcmlnaHQueilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBlcXVhbHNBcnJheShcclxuICAgIGNhcnRlc2lhbjogVmVjdG9yMyxcclxuICAgIGFycmF5OiBudW1iZXJbXSxcclxuICAgIG9mZnNldDogbnVtYmVyXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBjYXJ0ZXNpYW4ueCA9PT0gYXJyYXlbb2Zmc2V0XSAmJlxyXG4gICAgICBjYXJ0ZXNpYW4ueSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiZcclxuICAgICAgY2FydGVzaWFuLnogPT09IGFycmF5W29mZnNldCArIDJdXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFsc0Vwc2lsb24oXHJcbiAgICBsZWZ0OiBWZWN0b3IzLFxyXG4gICAgcmlnaHQ6IFZlY3RvcjMsXHJcbiAgICByZWxhdGl2ZUVwc2lsb246IG51bWJlciA9IDAsXHJcbiAgICBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IDBcclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGxlZnQgPT09IHJpZ2h0IHx8XHJcbiAgICAgIChkZWZpbmVkKGxlZnQpICYmXHJcbiAgICAgICAgZGVmaW5lZChyaWdodCkgJiZcclxuICAgICAgICBHTWF0aC5lcXVhbHNFcHNpbG9uKFxyXG4gICAgICAgICAgbGVmdC54LFxyXG4gICAgICAgICAgcmlnaHQueCxcclxuICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbixcclxuICAgICAgICAgIGFic29sdXRlRXBzaWxvblxyXG4gICAgICAgICkgJiZcclxuICAgICAgICBHTWF0aC5lcXVhbHNFcHNpbG9uKFxyXG4gICAgICAgICAgbGVmdC55LFxyXG4gICAgICAgICAgcmlnaHQueSxcclxuICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbixcclxuICAgICAgICAgIGFic29sdXRlRXBzaWxvblxyXG4gICAgICAgICkgJiZcclxuICAgICAgICBHTWF0aC5lcXVhbHNFcHNpbG9uKGxlZnQueiwgcmlnaHQueiwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcm9zcyhsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcbiAgICBjb25zdCBsZWZ0WCA9IGxlZnQueDtcclxuICAgIGNvbnN0IGxlZnRZID0gbGVmdC55O1xyXG4gICAgY29uc3QgbGVmdFogPSBsZWZ0Lno7XHJcbiAgICBjb25zdCByaWdodFggPSByaWdodC54O1xyXG4gICAgY29uc3QgcmlnaHRZID0gcmlnaHQueTtcclxuICAgIGNvbnN0IHJpZ2h0WiA9IHJpZ2h0Lno7XHJcblxyXG4gICAgY29uc3QgeCA9IGxlZnRZICogcmlnaHRaIC0gbGVmdFogKiByaWdodFk7XHJcbiAgICBjb25zdCB5ID0gbGVmdFogKiByaWdodFggLSBsZWZ0WCAqIHJpZ2h0WjtcclxuICAgIGNvbnN0IHogPSBsZWZ0WCAqIHJpZ2h0WSAtIGxlZnRZICogcmlnaHRYO1xyXG5cclxuICAgIHJlc3VsdC54ID0geDtcclxuICAgIHJlc3VsdC55ID0geTtcclxuICAgIHJlc3VsdC56ID0gejtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWlkcG9pbnQgPSBmdW5jdGlvbiAoXHJcbiAgICBsZWZ0OiBWZWN0b3IzLFxyXG4gICAgcmlnaHQ6IFZlY3RvcjMsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjNcclxuICApOiBWZWN0b3IzIHtcclxuICAgIHJlc3VsdC54ID0gKGxlZnQueCArIHJpZ2h0LngpICogMC41O1xyXG4gICAgcmVzdWx0LnkgPSAobGVmdC55ICsgcmlnaHQueSkgKiAwLjU7XHJcbiAgICByZXN1bHQueiA9IChsZWZ0LnogKyByaWdodC56KSAqIDAuNTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH07XHJcbn1cclxuY29uc3QgZGlzdGFuY2VTY3JhdGNoID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgbGVycFNjcmF0Y2ggPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBhbmdsZUJldHdlZW5TY3JhdGNoID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgYW5nbGVCZXR3ZWVuU2NyYXRjaDIgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoID0gbmV3IFZlY3RvcjMoKTtcclxuZXhwb3J0IGRlZmF1bHQgVmVjdG9yMztcclxuIiwiaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4vVmVjdG9yM1wiO1xyXG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcclxuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcclxuaW1wb3J0IEdNYXRoIGZyb20gXCIuL01hdGhcIjtcclxuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gXCIuL1F1YXRlcm5pb25cIjtcclxuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4vTWF0cml4NFwiO1xyXG4vKipcclxuICogQSAzeDMgbWF0cml4LCBpbmRleGFibGUgYXMgYSBjb2x1bW4tbWFqb3Igb3JkZXIgYXJyYXkuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMFJvdzA9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAwLCByb3cgMC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4xUm93MD0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDEsIHJvdyAwLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjJSb3cwPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMiwgcm93IDAuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMFJvdzE9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAwLCByb3cgMS5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4xUm93MT0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDEsIHJvdyAxLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjJSb3cxPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMiwgcm93IDEuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMFJvdzI9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAwLCByb3cgMi5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4xUm93Mj0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDEsIHJvdyAyLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjJSb3cyPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMiwgcm93IDIuXHJcbiAqL1xyXG5jbGFzcyBNYXRyaXgzIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGNvbHVtbjBSb3cwID0gMCxcclxuICAgIGNvbHVtbjFSb3cwID0gMCxcclxuICAgIGNvbHVtbjJSb3cwID0gMCxcclxuICAgIGNvbHVtbjBSb3cxID0gMCxcclxuICAgIGNvbHVtbjFSb3cxID0gMCxcclxuICAgIGNvbHVtbjJSb3cxID0gMCxcclxuICAgIGNvbHVtbjBSb3cyID0gMCxcclxuICAgIGNvbHVtbjFSb3cyID0gMCxcclxuICAgIGNvbHVtbjJSb3cyID0gMFxyXG4gICkge1xyXG4gICAgdGhpc1swXSA9IGNvbHVtbjBSb3cwO1xyXG4gICAgdGhpc1sxXSA9IGNvbHVtbjBSb3cxO1xyXG4gICAgdGhpc1syXSA9IGNvbHVtbjBSb3cyO1xyXG4gICAgdGhpc1szXSA9IGNvbHVtbjFSb3cwO1xyXG4gICAgdGhpc1s0XSA9IGNvbHVtbjFSb3cxO1xyXG4gICAgdGhpc1s1XSA9IGNvbHVtbjFSb3cyO1xyXG4gICAgdGhpc1s2XSA9IGNvbHVtbjJSb3cwO1xyXG4gICAgdGhpc1s3XSA9IGNvbHVtbjJSb3cxO1xyXG4gICAgdGhpc1s4XSA9IGNvbHVtbjJSb3cyO1xyXG4gIH1cclxuICBzZXRGcm9tTWF0cml4NChtYXRyaXg6IE1hdHJpeDQpOiBNYXRyaXgzIHtcclxuICAgIHRoaXNbMF0gPSBtYXRyaXhbMF07XHJcbiAgICB0aGlzWzFdID0gbWF0cml4WzFdO1xyXG4gICAgdGhpc1syXSA9IG1hdHJpeFsyXTtcclxuICAgIHRoaXNbM10gPSBtYXRyaXhbNF07XHJcbiAgICB0aGlzWzRdID0gbWF0cml4WzVdO1xyXG4gICAgdGhpc1s1XSA9IG1hdHJpeFsyXTtcclxuICAgIHRoaXNbNl0gPSBtYXRyaXhbOF07XHJcbiAgICB0aGlzWzddID0gbWF0cml4WzldO1xyXG4gICAgdGhpc1s4XSA9IG1hdHJpeFsxMF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgZ2V0Tm9ybWFsTWF0cml4KG1hdHJpeDQ6IE1hdHJpeDQpOiBNYXRyaXgzIHtcclxuICAgIHRoaXMuc2V0RnJvbU1hdHJpeDQobWF0cml4NCk7XHJcbiAgICBNYXRyaXgzLmludmVyc2UodGhpcywgdGhpcyk7XHJcbiAgICBNYXRyaXgzLnRyYW5zcG9zZSh0aGlzLCB0aGlzKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsb25lKG1hdHJpeDogTWF0cml4MyB8IG51bWJlcltdLCByZXN1bHQ6IE1hdHJpeDMpOiBNYXRyaXgzIHtcclxuICAgIGlmICghZGVmaW5lZChtYXRyaXgpKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IE1hdHJpeDMoXHJcbiAgICAgICAgbWF0cml4WzBdLFxyXG4gICAgICAgIG1hdHJpeFszXSxcclxuICAgICAgICBtYXRyaXhbNl0sXHJcbiAgICAgICAgbWF0cml4WzFdLFxyXG4gICAgICAgIG1hdHJpeFs0XSxcclxuICAgICAgICBtYXRyaXhbN10sXHJcbiAgICAgICAgbWF0cml4WzJdLFxyXG4gICAgICAgIG1hdHJpeFs1XSxcclxuICAgICAgICBtYXRyaXhbOF1cclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTtcclxuICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXTtcclxuICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXTtcclxuICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTtcclxuICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XTtcclxuICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XTtcclxuICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XTtcclxuICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XTtcclxuICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbUNvbHVtbk1ham9yQXJyYXkoXHJcbiAgICB2YWx1ZXM6IEFycmF5PG51bWJlcj4sXHJcbiAgICByZXN1bHQ/OiBNYXRyaXgzXHJcbiAgKTogTWF0cml4MyB7XHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXN1bHQgPSBuZXcgTWF0cml4MygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1hdHJpeDMuY2xvbmUodmFsdWVzLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21Sb3dNYWpvckFycmF5KHZhbHVlczogQXJyYXk8bnVtYmVyPiwgcmVzdWx0PzogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKFxyXG4gICAgICAgIHZhbHVlc1swXSxcclxuICAgICAgICB2YWx1ZXNbMV0sXHJcbiAgICAgICAgdmFsdWVzWzJdLFxyXG4gICAgICAgIHZhbHVlc1szXSxcclxuICAgICAgICB2YWx1ZXNbNF0sXHJcbiAgICAgICAgdmFsdWVzWzVdLFxyXG4gICAgICAgIHZhbHVlc1s2XSxcclxuICAgICAgICB2YWx1ZXNbN10sXHJcbiAgICAgICAgdmFsdWVzWzhdXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZXN1bHRbMF0gPSB2YWx1ZXNbMF07XHJcbiAgICByZXN1bHRbMV0gPSB2YWx1ZXNbM107XHJcbiAgICByZXN1bHRbMl0gPSB2YWx1ZXNbNl07XHJcbiAgICByZXN1bHRbM10gPSB2YWx1ZXNbMV07XHJcbiAgICByZXN1bHRbNF0gPSB2YWx1ZXNbNF07XHJcbiAgICByZXN1bHRbNV0gPSB2YWx1ZXNbN107XHJcbiAgICByZXN1bHRbNl0gPSB2YWx1ZXNbMl07XHJcbiAgICByZXN1bHRbN10gPSB2YWx1ZXNbNV07XHJcbiAgICByZXN1bHRbOF0gPSB2YWx1ZXNbOF07XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21RdWF0ZXJuaW9uKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJlc3VsdD86IE1hdHJpeDMpOiBNYXRyaXgzIHtcclxuICAgIGNvbnN0IHgyID0gcXVhdGVybmlvbi54ICogcXVhdGVybmlvbi54O1xyXG4gICAgY29uc3QgeHkgPSBxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLnk7XHJcbiAgICBjb25zdCB4eiA9IHF1YXRlcm5pb24ueCAqIHF1YXRlcm5pb24uejtcclxuICAgIGNvbnN0IHh3ID0gcXVhdGVybmlvbi54ICogcXVhdGVybmlvbi53O1xyXG4gICAgY29uc3QgeTIgPSBxdWF0ZXJuaW9uLnkgKiBxdWF0ZXJuaW9uLnk7XHJcbiAgICBjb25zdCB5eiA9IHF1YXRlcm5pb24ueSAqIHF1YXRlcm5pb24uejtcclxuICAgIGNvbnN0IHl3ID0gcXVhdGVybmlvbi55ICogcXVhdGVybmlvbi53O1xyXG4gICAgY29uc3QgejIgPSBxdWF0ZXJuaW9uLnogKiBxdWF0ZXJuaW9uLno7XHJcbiAgICBjb25zdCB6dyA9IHF1YXRlcm5pb24ueiAqIHF1YXRlcm5pb24udztcclxuICAgIGNvbnN0IHcyID0gcXVhdGVybmlvbi53ICogcXVhdGVybmlvbi53O1xyXG5cclxuICAgIGNvbnN0IG0wMCA9IHgyIC0geTIgLSB6MiArIHcyO1xyXG4gICAgY29uc3QgbTAxID0gMi4wICogKHh5IC0gencpO1xyXG4gICAgY29uc3QgbTAyID0gMi4wICogKHh6ICsgeXcpO1xyXG5cclxuICAgIGNvbnN0IG0xMCA9IDIuMCAqICh4eSArIHp3KTtcclxuICAgIGNvbnN0IG0xMSA9IC14MiArIHkyIC0gejIgKyB3MjtcclxuICAgIGNvbnN0IG0xMiA9IDIuMCAqICh5eiAtIHh3KTtcclxuXHJcbiAgICBjb25zdCBtMjAgPSAyLjAgKiAoeHogLSB5dyk7XHJcbiAgICBjb25zdCBtMjEgPSAyLjAgKiAoeXogKyB4dyk7XHJcbiAgICBjb25zdCBtMjIgPSAteDIgLSB5MiArIHoyICsgdzI7XHJcblxyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpO1xyXG4gICAgfVxyXG4gICAgcmVzdWx0WzBdID0gbTAwO1xyXG4gICAgcmVzdWx0WzFdID0gbTEwO1xyXG4gICAgcmVzdWx0WzJdID0gbTIwO1xyXG4gICAgcmVzdWx0WzNdID0gbTAxO1xyXG4gICAgcmVzdWx0WzRdID0gbTExO1xyXG4gICAgcmVzdWx0WzVdID0gbTIxO1xyXG4gICAgcmVzdWx0WzZdID0gbTAyO1xyXG4gICAgcmVzdWx0WzddID0gbTEyO1xyXG4gICAgcmVzdWx0WzhdID0gbTIyO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tU2NhbGUoc2NhbGU6IFZlY3RvcjMsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKFxyXG4gICAgICAgIHNjYWxlLngsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgc2NhbGUueSxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICBzY2FsZS56XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdWx0WzBdID0gc2NhbGUueDtcclxuICAgIHJlc3VsdFsxXSA9IDAuMDtcclxuICAgIHJlc3VsdFsyXSA9IDAuMDtcclxuICAgIHJlc3VsdFszXSA9IDAuMDtcclxuICAgIHJlc3VsdFs0XSA9IHNjYWxlLnk7XHJcbiAgICByZXN1bHRbNV0gPSAwLjA7XHJcbiAgICByZXN1bHRbNl0gPSAwLjA7XHJcbiAgICByZXN1bHRbN10gPSAwLjA7XHJcbiAgICByZXN1bHRbOF0gPSBzY2FsZS56O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tUm90YXRpb25YKGFuZ2xlOiBudW1iZXIsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgY29uc3QgY29zQW5nbGUgPSBNYXRoLmNvcyhhbmdsZSk7XHJcbiAgICBjb25zdCBzaW5BbmdsZSA9IE1hdGguc2luKGFuZ2xlKTtcclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IE1hdHJpeDMoXHJcbiAgICAgICAgMS4wLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIGNvc0FuZ2xlLFxyXG4gICAgICAgIC1zaW5BbmdsZSxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgc2luQW5nbGUsXHJcbiAgICAgICAgY29zQW5nbGVcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHRbMF0gPSAxLjA7XHJcbiAgICByZXN1bHRbMV0gPSAwLjA7XHJcbiAgICByZXN1bHRbMl0gPSAwLjA7XHJcbiAgICByZXN1bHRbM10gPSAwLjA7XHJcbiAgICByZXN1bHRbNF0gPSBjb3NBbmdsZTtcclxuICAgIHJlc3VsdFs1XSA9IHNpbkFuZ2xlO1xyXG4gICAgcmVzdWx0WzZdID0gMC4wO1xyXG4gICAgcmVzdWx0WzddID0gLXNpbkFuZ2xlO1xyXG4gICAgcmVzdWx0WzhdID0gY29zQW5nbGU7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tUm90YXRpb25ZKGFuZ2xlOiBudW1iZXIsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgY29uc3QgY29zQW5nbGUgPSBNYXRoLmNvcyhhbmdsZSk7XHJcbiAgICBjb25zdCBzaW5BbmdsZSA9IE1hdGguc2luKGFuZ2xlKTtcclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IE1hdHJpeDMoXHJcbiAgICAgICAgY29zQW5nbGUsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIHNpbkFuZ2xlLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICAxLjAsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIC1zaW5BbmdsZSxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgY29zQW5nbGVcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHRbMF0gPSBjb3NBbmdsZTtcclxuICAgIHJlc3VsdFsxXSA9IDAuMDtcclxuICAgIHJlc3VsdFsyXSA9IC1zaW5BbmdsZTtcclxuICAgIHJlc3VsdFszXSA9IDAuMDtcclxuICAgIHJlc3VsdFs0XSA9IDEuMDtcclxuICAgIHJlc3VsdFs1XSA9IDAuMDtcclxuICAgIHJlc3VsdFs2XSA9IHNpbkFuZ2xlO1xyXG4gICAgcmVzdWx0WzddID0gMC4wO1xyXG4gICAgcmVzdWx0WzhdID0gY29zQW5nbGU7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tUm90YXRpb25ac3RhdGljKGFuZ2xlOiBudW1iZXIsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgY29uc3QgY29zQW5nbGUgPSBNYXRoLmNvcyhhbmdsZSk7XHJcbiAgICBjb25zdCBzaW5BbmdsZSA9IE1hdGguc2luKGFuZ2xlKTtcclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IE1hdHJpeDMoXHJcbiAgICAgICAgY29zQW5nbGUsXHJcbiAgICAgICAgLXNpbkFuZ2xlLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICBzaW5BbmdsZSxcclxuICAgICAgICBjb3NBbmdsZSxcclxuICAgICAgICAwLjAsXHJcbiAgICAgICAgMC4wLFxyXG4gICAgICAgIDAuMCxcclxuICAgICAgICAxLjBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHRbMF0gPSBjb3NBbmdsZTtcclxuICAgIHJlc3VsdFsxXSA9IHNpbkFuZ2xlO1xyXG4gICAgcmVzdWx0WzJdID0gMC4wO1xyXG4gICAgcmVzdWx0WzNdID0gLXNpbkFuZ2xlO1xyXG4gICAgcmVzdWx0WzRdID0gY29zQW5nbGU7XHJcbiAgICByZXN1bHRbNV0gPSAwLjA7XHJcbiAgICByZXN1bHRbNl0gPSAwLjA7XHJcbiAgICByZXN1bHRbN10gPSAwLjA7XHJcbiAgICByZXN1bHRbOF0gPSAxLjA7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgdG9BcnJheSgpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgTWF0cml4My50b0FycmF5KHRoaXMsIHJlc3VsdCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRvQXJyYXkobWF0cml4OiBNYXRyaXgzLCByZXN1bHQ6IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICBtYXRyaXhbMF0sXHJcbiAgICAgICAgbWF0cml4WzFdLFxyXG4gICAgICAgIG1hdHJpeFsyXSxcclxuICAgICAgICBtYXRyaXhbM10sXHJcbiAgICAgICAgbWF0cml4WzRdLFxyXG4gICAgICAgIG1hdHJpeFs1XSxcclxuICAgICAgICBtYXRyaXhbNl0sXHJcbiAgICAgICAgbWF0cml4WzddLFxyXG4gICAgICAgIG1hdHJpeFs4XSxcclxuICAgICAgXTtcclxuICAgIH1cclxuICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTtcclxuICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXTtcclxuICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXTtcclxuICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTtcclxuICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XTtcclxuICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XTtcclxuICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XTtcclxuICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XTtcclxuICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0RWxlbWVudEluZGV4KGNvbHVtbjogbnVtYmVyLCByb3c6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gY29sdW1uICogMyArIHJvdztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRDb2x1bW4obWF0cml4OiBNYXRyaXgzLCBpbmRleDogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCAqIDM7XHJcbiAgICBjb25zdCB4ID0gbWF0cml4W3N0YXJ0SW5kZXhdO1xyXG4gICAgY29uc3QgeSA9IG1hdHJpeFtzdGFydEluZGV4ICsgMV07XHJcbiAgICBjb25zdCB6ID0gbWF0cml4W3N0YXJ0SW5kZXggKyAyXTtcclxuXHJcbiAgICByZXN1bHQueCA9IHg7XHJcbiAgICByZXN1bHQueSA9IHk7XHJcbiAgICByZXN1bHQueiA9IHo7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldENvbHVtbihcclxuICAgIG1hdHJpeDogTWF0cml4MyxcclxuICAgIGluZGV4OiBudW1iZXIsXHJcbiAgICBjYXJ0ZXNpYW46IFZlY3RvcjMsXHJcbiAgICByZXN1bHQ6IE1hdHJpeDNcclxuICApOiBNYXRyaXgzIHtcclxuICAgIHJlc3VsdCA9IE1hdHJpeDMuY2xvbmUobWF0cml4LCByZXN1bHQpO1xyXG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4ICogMztcclxuICAgIHJlc3VsdFtzdGFydEluZGV4XSA9IGNhcnRlc2lhbi54O1xyXG4gICAgcmVzdWx0W3N0YXJ0SW5kZXggKyAxXSA9IGNhcnRlc2lhbi55O1xyXG4gICAgcmVzdWx0W3N0YXJ0SW5kZXggKyAyXSA9IGNhcnRlc2lhbi56O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRSb3cobWF0cml4OiBNYXRyaXgzLCBpbmRleDogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgIGNvbnN0IHggPSBtYXRyaXhbaW5kZXhdO1xyXG4gICAgY29uc3QgeSA9IG1hdHJpeFtpbmRleCArIDNdO1xyXG4gICAgY29uc3QgeiA9IG1hdHJpeFtpbmRleCArIDZdO1xyXG5cclxuICAgIHJlc3VsdC54ID0geDtcclxuICAgIHJlc3VsdC55ID0geTtcclxuICAgIHJlc3VsdC56ID0gejtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0Um93KFxyXG4gICAgbWF0cml4OiBNYXRyaXgzLFxyXG4gICAgaW5kZXg6IG51bWJlcixcclxuICAgIGNhcnRlc2lhbjogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogTWF0cml4M1xyXG4gICk6IE1hdHJpeDMge1xyXG4gICAgcmVzdWx0ID0gTWF0cml4My5jbG9uZShtYXRyaXgsIHJlc3VsdCk7XHJcbiAgICByZXN1bHRbaW5kZXhdID0gY2FydGVzaWFuLng7XHJcbiAgICByZXN1bHRbaW5kZXggKyAzXSA9IGNhcnRlc2lhbi55O1xyXG4gICAgcmVzdWx0W2luZGV4ICsgNl0gPSBjYXJ0ZXNpYW4uejtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0U2NhbGUobWF0cml4OiBNYXRyaXgzLCBzY2FsZTogVmVjdG9yMywgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICBjb25zdCBleGlzdGluZ1NjYWxlID0gTWF0cml4My5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDEpO1xyXG4gICAgY29uc3Qgc2NhbGVSYXRpb1ggPSBzY2FsZS54IC8gZXhpc3RpbmdTY2FsZS54O1xyXG4gICAgY29uc3Qgc2NhbGVSYXRpb1kgPSBzY2FsZS55IC8gZXhpc3RpbmdTY2FsZS55O1xyXG4gICAgY29uc3Qgc2NhbGVSYXRpb1ogPSBzY2FsZS56IC8gZXhpc3RpbmdTY2FsZS56O1xyXG5cclxuICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlUmF0aW9YO1xyXG4gICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGVSYXRpb1g7XHJcbiAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZVJhdGlvWDtcclxuICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxlUmF0aW9ZO1xyXG4gICAgcmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGVSYXRpb1k7XHJcbiAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsZVJhdGlvWTtcclxuICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XSAqIHNjYWxlUmF0aW9aO1xyXG4gICAgcmVzdWx0WzddID0gbWF0cml4WzddICogc2NhbGVSYXRpb1o7XHJcbiAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF0gKiBzY2FsZVJhdGlvWjtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFNjYWxlKG1hdHJpeDogTWF0cml4MywgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcbiAgICByZXN1bHQueCA9IFZlY3RvcjMubWFnbml0dWRlKFxyXG4gICAgICBWZWN0b3IzLmZyb21FbGVtZW50cyhtYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBzY3JhdGNoQ29sdW1uKVxyXG4gICAgKTtcclxuICAgIHJlc3VsdC55ID0gVmVjdG9yMy5tYWduaXR1ZGUoXHJcbiAgICAgIFZlY3RvcjMuZnJvbUVsZW1lbnRzKG1hdHJpeFszXSwgbWF0cml4WzRdLCBtYXRyaXhbNV0sIHNjcmF0Y2hDb2x1bW4pXHJcbiAgICApO1xyXG4gICAgcmVzdWx0LnogPSBWZWN0b3IzLm1hZ25pdHVkZShcclxuICAgICAgVmVjdG9yMy5mcm9tRWxlbWVudHMobWF0cml4WzZdLCBtYXRyaXhbN10sIG1hdHJpeFs4XSwgc2NyYXRjaENvbHVtbilcclxuICAgICk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldE1heGltdW1TY2FsZShtYXRyaXg6IE1hdHJpeDMpOiBudW1iZXIge1xyXG4gICAgTWF0cml4My5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDMpO1xyXG4gICAgcmV0dXJuIFZlY3RvcjMubWF4aW11bUNvbXBvbmVudChzY2FsZVNjcmF0Y2gzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXRSb3RhdGlvbihcclxuICAgIG1hdHJpeDogTWF0cml4MyxcclxuICAgIHJvdGF0aW9uOiBNYXRyaXgzLFxyXG4gICAgcmVzdWx0OiBNYXRyaXgzXHJcbiAgKTogTWF0cml4MyB7XHJcbiAgICBjb25zdCBzY2FsZSA9IE1hdHJpeDMuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2g0KTtcclxuXHJcbiAgICByZXN1bHRbMF0gPSByb3RhdGlvblswXSAqIHNjYWxlLng7XHJcbiAgICByZXN1bHRbMV0gPSByb3RhdGlvblsxXSAqIHNjYWxlLng7XHJcbiAgICByZXN1bHRbMl0gPSByb3RhdGlvblsyXSAqIHNjYWxlLng7XHJcbiAgICByZXN1bHRbM10gPSByb3RhdGlvblszXSAqIHNjYWxlLnk7XHJcbiAgICByZXN1bHRbNF0gPSByb3RhdGlvbls0XSAqIHNjYWxlLnk7XHJcbiAgICByZXN1bHRbNV0gPSByb3RhdGlvbls1XSAqIHNjYWxlLnk7XHJcbiAgICByZXN1bHRbNl0gPSByb3RhdGlvbls2XSAqIHNjYWxlLno7XHJcbiAgICByZXN1bHRbN10gPSByb3RhdGlvbls3XSAqIHNjYWxlLno7XHJcbiAgICByZXN1bHRbOF0gPSByb3RhdGlvbls4XSAqIHNjYWxlLno7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRSb3RhdGlvbihtYXRyaXg6IE1hdHJpeDMsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgY29uc3Qgc2NhbGUgPSBNYXRyaXgzLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoNSk7XHJcblxyXG4gICAgcmVzdWx0WzBdID0gbWF0cml4WzBdIC8gc2NhbGUueDtcclxuICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAvIHNjYWxlLng7XHJcbiAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gLyBzY2FsZS54O1xyXG4gICAgcmVzdWx0WzNdID0gbWF0cml4WzNdIC8gc2NhbGUueTtcclxuICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAvIHNjYWxlLnk7XHJcbiAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gLyBzY2FsZS55O1xyXG4gICAgcmVzdWx0WzZdID0gbWF0cml4WzZdIC8gc2NhbGUuejtcclxuICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAvIHNjYWxlLno7XHJcbiAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF0gLyBzY2FsZS56O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbXVsdGlwbHkobGVmdDogTWF0cml4MywgcmlnaHQ6IE1hdHJpeDMsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgY29uc3QgY29sdW1uMFJvdzAgPVxyXG4gICAgICBsZWZ0WzBdICogcmlnaHRbMF0gKyBsZWZ0WzNdICogcmlnaHRbMV0gKyBsZWZ0WzZdICogcmlnaHRbMl07XHJcbiAgICBjb25zdCBjb2x1bW4wUm93MSA9XHJcbiAgICAgIGxlZnRbMV0gKiByaWdodFswXSArIGxlZnRbNF0gKiByaWdodFsxXSArIGxlZnRbN10gKiByaWdodFsyXTtcclxuICAgIGNvbnN0IGNvbHVtbjBSb3cyID1cclxuICAgICAgbGVmdFsyXSAqIHJpZ2h0WzBdICsgbGVmdFs1XSAqIHJpZ2h0WzFdICsgbGVmdFs4XSAqIHJpZ2h0WzJdO1xyXG5cclxuICAgIGNvbnN0IGNvbHVtbjFSb3cwID1cclxuICAgICAgbGVmdFswXSAqIHJpZ2h0WzNdICsgbGVmdFszXSAqIHJpZ2h0WzRdICsgbGVmdFs2XSAqIHJpZ2h0WzVdO1xyXG4gICAgY29uc3QgY29sdW1uMVJvdzEgPVxyXG4gICAgICBsZWZ0WzFdICogcmlnaHRbM10gKyBsZWZ0WzRdICogcmlnaHRbNF0gKyBsZWZ0WzddICogcmlnaHRbNV07XHJcbiAgICBjb25zdCBjb2x1bW4xUm93MiA9XHJcbiAgICAgIGxlZnRbMl0gKiByaWdodFszXSArIGxlZnRbNV0gKiByaWdodFs0XSArIGxlZnRbOF0gKiByaWdodFs1XTtcclxuXHJcbiAgICBjb25zdCBjb2x1bW4yUm93MCA9XHJcbiAgICAgIGxlZnRbMF0gKiByaWdodFs2XSArIGxlZnRbM10gKiByaWdodFs3XSArIGxlZnRbNl0gKiByaWdodFs4XTtcclxuICAgIGNvbnN0IGNvbHVtbjJSb3cxID1cclxuICAgICAgbGVmdFsxXSAqIHJpZ2h0WzZdICsgbGVmdFs0XSAqIHJpZ2h0WzddICsgbGVmdFs3XSAqIHJpZ2h0WzhdO1xyXG4gICAgY29uc3QgY29sdW1uMlJvdzIgPVxyXG4gICAgICBsZWZ0WzJdICogcmlnaHRbNl0gKyBsZWZ0WzVdICogcmlnaHRbN10gKyBsZWZ0WzhdICogcmlnaHRbOF07XHJcblxyXG4gICAgcmVzdWx0WzBdID0gY29sdW1uMFJvdzA7XHJcbiAgICByZXN1bHRbMV0gPSBjb2x1bW4wUm93MTtcclxuICAgIHJlc3VsdFsyXSA9IGNvbHVtbjBSb3cyO1xyXG4gICAgcmVzdWx0WzNdID0gY29sdW1uMVJvdzA7XHJcbiAgICByZXN1bHRbNF0gPSBjb2x1bW4xUm93MTtcclxuICAgIHJlc3VsdFs1XSA9IGNvbHVtbjFSb3cyO1xyXG4gICAgcmVzdWx0WzZdID0gY29sdW1uMlJvdzA7XHJcbiAgICByZXN1bHRbN10gPSBjb2x1bW4yUm93MTtcclxuICAgIHJlc3VsdFs4XSA9IGNvbHVtbjJSb3cyO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhZGQobGVmdDogTWF0cml4MywgcmlnaHQ6IE1hdHJpeDMsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgcmVzdWx0WzBdID0gbGVmdFswXSArIHJpZ2h0WzBdO1xyXG4gICAgcmVzdWx0WzFdID0gbGVmdFsxXSArIHJpZ2h0WzFdO1xyXG4gICAgcmVzdWx0WzJdID0gbGVmdFsyXSArIHJpZ2h0WzJdO1xyXG4gICAgcmVzdWx0WzNdID0gbGVmdFszXSArIHJpZ2h0WzNdO1xyXG4gICAgcmVzdWx0WzRdID0gbGVmdFs0XSArIHJpZ2h0WzRdO1xyXG4gICAgcmVzdWx0WzVdID0gbGVmdFs1XSArIHJpZ2h0WzVdO1xyXG4gICAgcmVzdWx0WzZdID0gbGVmdFs2XSArIHJpZ2h0WzZdO1xyXG4gICAgcmVzdWx0WzddID0gbGVmdFs3XSArIHJpZ2h0WzddO1xyXG4gICAgcmVzdWx0WzhdID0gbGVmdFs4XSArIHJpZ2h0WzhdO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdWJ0cmFjdChsZWZ0OiBNYXRyaXgzLCByaWdodDogTWF0cml4MywgcmVzdWx0OiBNYXRyaXgzKSB7XHJcbiAgICByZXN1bHRbMF0gPSBsZWZ0WzBdIC0gcmlnaHRbMF07XHJcbiAgICByZXN1bHRbMV0gPSBsZWZ0WzFdIC0gcmlnaHRbMV07XHJcbiAgICByZXN1bHRbMl0gPSBsZWZ0WzJdIC0gcmlnaHRbMl07XHJcbiAgICByZXN1bHRbM10gPSBsZWZ0WzNdIC0gcmlnaHRbM107XHJcbiAgICByZXN1bHRbNF0gPSBsZWZ0WzRdIC0gcmlnaHRbNF07XHJcbiAgICByZXN1bHRbNV0gPSBsZWZ0WzVdIC0gcmlnaHRbNV07XHJcbiAgICByZXN1bHRbNl0gPSBsZWZ0WzZdIC0gcmlnaHRbNl07XHJcbiAgICByZXN1bHRbN10gPSBsZWZ0WzddIC0gcmlnaHRbN107XHJcbiAgICByZXN1bHRbOF0gPSBsZWZ0WzhdIC0gcmlnaHRbOF07XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG11bHRpcGx5QnlWZWN0b3IoXHJcbiAgICBtYXRyaXg6IE1hdHJpeDMsXHJcbiAgICBjYXJ0ZXNpYW46IFZlY3RvcjMsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjNcclxuICApOiBWZWN0b3IzIHtcclxuICAgIGNvbnN0IHZYID0gY2FydGVzaWFuLng7XHJcbiAgICBjb25zdCB2WSA9IGNhcnRlc2lhbi55O1xyXG4gICAgY29uc3QgdlogPSBjYXJ0ZXNpYW4uejtcclxuXHJcbiAgICBjb25zdCB4ID0gbWF0cml4WzBdICogdlggKyBtYXRyaXhbM10gKiB2WSArIG1hdHJpeFs2XSAqIHZaO1xyXG4gICAgY29uc3QgeSA9IG1hdHJpeFsxXSAqIHZYICsgbWF0cml4WzRdICogdlkgKyBtYXRyaXhbN10gKiB2WjtcclxuICAgIGNvbnN0IHogPSBtYXRyaXhbMl0gKiB2WCArIG1hdHJpeFs1XSAqIHZZICsgbWF0cml4WzhdICogdlo7XHJcblxyXG4gICAgcmVzdWx0LnggPSB4O1xyXG4gICAgcmVzdWx0LnkgPSB5O1xyXG4gICAgcmVzdWx0LnogPSB6O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtdWx0aXBseUJ5U2NhbGFyKFxyXG4gICAgbWF0cml4OiBNYXRyaXgzLFxyXG4gICAgc2NhbGFyOiBudW1iZXIsXHJcbiAgICByZXN1bHQ6IE1hdHJpeDNcclxuICApOiBNYXRyaXgzIHtcclxuICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxhcjtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbXVsdGlwbHlCeVNjYWxlKFxyXG4gICAgbWF0cml4OiBNYXRyaXgzLFxyXG4gICAgc2NhbGU6IFZlY3RvcjMsXHJcbiAgICByZXN1bHQ6IE1hdHJpeDNcclxuICApOiBNYXRyaXgzIHtcclxuICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlLng7XHJcbiAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZS54O1xyXG4gICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGUueDtcclxuICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxlLnk7XHJcbiAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsZS55O1xyXG4gICAgcmVzdWx0WzVdID0gbWF0cml4WzVdICogc2NhbGUueTtcclxuICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XSAqIHNjYWxlLno7XHJcbiAgICByZXN1bHRbN10gPSBtYXRyaXhbN10gKiBzY2FsZS56O1xyXG4gICAgcmVzdWx0WzhdID0gbWF0cml4WzhdICogc2NhbGUuejtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG5lZ2F0ZShtYXRyaXg6IE1hdHJpeDMsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgcmVzdWx0WzBdID0gLW1hdHJpeFswXTtcclxuICAgIHJlc3VsdFsxXSA9IC1tYXRyaXhbMV07XHJcbiAgICByZXN1bHRbMl0gPSAtbWF0cml4WzJdO1xyXG4gICAgcmVzdWx0WzNdID0gLW1hdHJpeFszXTtcclxuICAgIHJlc3VsdFs0XSA9IC1tYXRyaXhbNF07XHJcbiAgICByZXN1bHRbNV0gPSAtbWF0cml4WzVdO1xyXG4gICAgcmVzdWx0WzZdID0gLW1hdHJpeFs2XTtcclxuICAgIHJlc3VsdFs3XSA9IC1tYXRyaXhbN107XHJcbiAgICByZXN1bHRbOF0gPSAtbWF0cml4WzhdO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB0cmFuc3Bvc2UobWF0cml4OiBNYXRyaXgzLCByZXN1bHQ6IE1hdHJpeDMpOiBNYXRyaXgzIHtcclxuICAgIGNvbnN0IGNvbHVtbjBSb3cwID0gbWF0cml4WzBdO1xyXG4gICAgY29uc3QgY29sdW1uMFJvdzEgPSBtYXRyaXhbM107XHJcbiAgICBjb25zdCBjb2x1bW4wUm93MiA9IG1hdHJpeFs2XTtcclxuICAgIGNvbnN0IGNvbHVtbjFSb3cwID0gbWF0cml4WzFdO1xyXG4gICAgY29uc3QgY29sdW1uMVJvdzEgPSBtYXRyaXhbNF07XHJcbiAgICBjb25zdCBjb2x1bW4xUm93MiA9IG1hdHJpeFs3XTtcclxuICAgIGNvbnN0IGNvbHVtbjJSb3cwID0gbWF0cml4WzJdO1xyXG4gICAgY29uc3QgY29sdW1uMlJvdzEgPSBtYXRyaXhbNV07XHJcbiAgICBjb25zdCBjb2x1bW4yUm93MiA9IG1hdHJpeFs4XTtcclxuXHJcbiAgICByZXN1bHRbMF0gPSBjb2x1bW4wUm93MDtcclxuICAgIHJlc3VsdFsxXSA9IGNvbHVtbjBSb3cxO1xyXG4gICAgcmVzdWx0WzJdID0gY29sdW1uMFJvdzI7XHJcbiAgICByZXN1bHRbM10gPSBjb2x1bW4xUm93MDtcclxuICAgIHJlc3VsdFs0XSA9IGNvbHVtbjFSb3cxO1xyXG4gICAgcmVzdWx0WzVdID0gY29sdW1uMVJvdzI7XHJcbiAgICByZXN1bHRbNl0gPSBjb2x1bW4yUm93MDtcclxuICAgIHJlc3VsdFs3XSA9IGNvbHVtbjJSb3cxO1xyXG4gICAgcmVzdWx0WzhdID0gY29sdW1uMlJvdzI7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFicyhtYXRyaXg6IE1hdHJpeDMsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgcmVzdWx0WzBdID0gTWF0aC5hYnMobWF0cml4WzBdKTtcclxuICAgIHJlc3VsdFsxXSA9IE1hdGguYWJzKG1hdHJpeFsxXSk7XHJcbiAgICByZXN1bHRbMl0gPSBNYXRoLmFicyhtYXRyaXhbMl0pO1xyXG4gICAgcmVzdWx0WzNdID0gTWF0aC5hYnMobWF0cml4WzNdKTtcclxuICAgIHJlc3VsdFs0XSA9IE1hdGguYWJzKG1hdHJpeFs0XSk7XHJcbiAgICByZXN1bHRbNV0gPSBNYXRoLmFicyhtYXRyaXhbNV0pO1xyXG4gICAgcmVzdWx0WzZdID0gTWF0aC5hYnMobWF0cml4WzZdKTtcclxuICAgIHJlc3VsdFs3XSA9IE1hdGguYWJzKG1hdHJpeFs3XSk7XHJcbiAgICByZXN1bHRbOF0gPSBNYXRoLmFicyhtYXRyaXhbOF0pO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGV0ZXJtaW5hbnQobWF0cml4OiBNYXRyaXgzKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IG0xMSA9IG1hdHJpeFswXTtcclxuICAgIGNvbnN0IG0yMSA9IG1hdHJpeFszXTtcclxuICAgIGNvbnN0IG0zMSA9IG1hdHJpeFs2XTtcclxuICAgIGNvbnN0IG0xMiA9IG1hdHJpeFsxXTtcclxuICAgIGNvbnN0IG0yMiA9IG1hdHJpeFs0XTtcclxuICAgIGNvbnN0IG0zMiA9IG1hdHJpeFs3XTtcclxuICAgIGNvbnN0IG0xMyA9IG1hdHJpeFsyXTtcclxuICAgIGNvbnN0IG0yMyA9IG1hdHJpeFs1XTtcclxuICAgIGNvbnN0IG0zMyA9IG1hdHJpeFs4XTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBtMTEgKiAobTIyICogbTMzIC0gbTIzICogbTMyKSArXHJcbiAgICAgIG0xMiAqIChtMjMgKiBtMzEgLSBtMjEgKiBtMzMpICtcclxuICAgICAgbTEzICogKG0yMSAqIG0zMiAtIG0yMiAqIG0zMSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaW52ZXJzZShtYXRyaXg6IE1hdHJpeDMsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG4gICAgY29uc3QgbTExID0gbWF0cml4WzBdO1xyXG4gICAgY29uc3QgbTIxID0gbWF0cml4WzFdO1xyXG4gICAgY29uc3QgbTMxID0gbWF0cml4WzJdO1xyXG4gICAgY29uc3QgbTEyID0gbWF0cml4WzNdO1xyXG4gICAgY29uc3QgbTIyID0gbWF0cml4WzRdO1xyXG4gICAgY29uc3QgbTMyID0gbWF0cml4WzVdO1xyXG4gICAgY29uc3QgbTEzID0gbWF0cml4WzZdO1xyXG4gICAgY29uc3QgbTIzID0gbWF0cml4WzddO1xyXG4gICAgY29uc3QgbTMzID0gbWF0cml4WzhdO1xyXG5cclxuICAgIGNvbnN0IGRldGVybWluYW50ID0gTWF0cml4My5kZXRlcm1pbmFudChtYXRyaXgpO1xyXG5cclxuICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XHJcbiAgICBpZiAoTWF0aC5hYnMoZGV0ZXJtaW5hbnQpIDw9IEdNYXRoLkVQU0lMT04xNSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtYXRyaXggaXMgbm90IGludmVydGlibGVcIik7XHJcbiAgICB9XHJcbiAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcclxuXHJcbiAgICByZXN1bHRbMF0gPSBtMjIgKiBtMzMgLSBtMjMgKiBtMzI7XHJcbiAgICByZXN1bHRbMV0gPSBtMjMgKiBtMzEgLSBtMjEgKiBtMzM7XHJcbiAgICByZXN1bHRbMl0gPSBtMjEgKiBtMzIgLSBtMjIgKiBtMzE7XHJcbiAgICByZXN1bHRbM10gPSBtMTMgKiBtMzIgLSBtMTIgKiBtMzM7XHJcbiAgICByZXN1bHRbNF0gPSBtMTEgKiBtMzMgLSBtMTMgKiBtMzE7XHJcbiAgICByZXN1bHRbNV0gPSBtMTIgKiBtMzEgLSBtMTEgKiBtMzI7XHJcbiAgICByZXN1bHRbNl0gPSBtMTIgKiBtMjMgLSBtMTMgKiBtMjI7XHJcbiAgICByZXN1bHRbN10gPSBtMTMgKiBtMjEgLSBtMTEgKiBtMjM7XHJcbiAgICByZXN1bHRbOF0gPSBtMTEgKiBtMjIgLSBtMTIgKiBtMjE7XHJcblxyXG4gICAgY29uc3Qgc2NhbGUgPSAxLjAgLyBkZXRlcm1pbmFudDtcclxuICAgIHJldHVybiBNYXRyaXgzLm11bHRpcGx5QnlTY2FsYXIocmVzdWx0LCBzY2FsZSwgcmVzdWx0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpbnZlcnNlVHJhbnNwb3NlKG1hdHJpeDogTWF0cml4MywgcmVzdWx0OiBNYXRyaXgzKSB7XHJcbiAgICByZXR1cm4gTWF0cml4My5pbnZlcnNlKFxyXG4gICAgICBNYXRyaXgzLnRyYW5zcG9zZShtYXRyaXgsIHNjcmF0Y2hUcmFuc3Bvc2VNYXRyaXgpLFxyXG4gICAgICByZXN1bHRcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXF1YWxzKGxlZnQ6IE1hdHJpeDMsIHJpZ2h0OiBNYXRyaXgzKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBsZWZ0ID09PSByaWdodCB8fFxyXG4gICAgICAoZGVmaW5lZChsZWZ0KSAmJlxyXG4gICAgICAgIGRlZmluZWQocmlnaHQpICYmXHJcbiAgICAgICAgbGVmdFswXSA9PT0gcmlnaHRbMF0gJiZcclxuICAgICAgICBsZWZ0WzFdID09PSByaWdodFsxXSAmJlxyXG4gICAgICAgIGxlZnRbMl0gPT09IHJpZ2h0WzJdICYmXHJcbiAgICAgICAgbGVmdFszXSA9PT0gcmlnaHRbM10gJiZcclxuICAgICAgICBsZWZ0WzRdID09PSByaWdodFs0XSAmJlxyXG4gICAgICAgIGxlZnRbNV0gPT09IHJpZ2h0WzVdICYmXHJcbiAgICAgICAgbGVmdFs2XSA9PT0gcmlnaHRbNl0gJiZcclxuICAgICAgICBsZWZ0WzddID09PSByaWdodFs3XSAmJlxyXG4gICAgICAgIGxlZnRbOF0gPT09IHJpZ2h0WzhdKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBlcXVhbHNFcHNpbG9uKFxyXG4gICAgbGVmdDogTWF0cml4MyxcclxuICAgIHJpZ2h0OiBNYXRyaXgzLFxyXG4gICAgZXBzaWxvbjogbnVtYmVyID0gMFxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgZXBzaWxvbiA9IGRlZmF1bHRWYWx1ZShlcHNpbG9uLCAwKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBsZWZ0ID09PSByaWdodCB8fFxyXG4gICAgICAoZGVmaW5lZChsZWZ0KSAmJlxyXG4gICAgICAgIGRlZmluZWQocmlnaHQpICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdFswXSAtIHJpZ2h0WzBdKSA8PSBlcHNpbG9uICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdFsxXSAtIHJpZ2h0WzFdKSA8PSBlcHNpbG9uICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdFsyXSAtIHJpZ2h0WzJdKSA8PSBlcHNpbG9uICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdFszXSAtIHJpZ2h0WzNdKSA8PSBlcHNpbG9uICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdFs0XSAtIHJpZ2h0WzRdKSA8PSBlcHNpbG9uICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdFs1XSAtIHJpZ2h0WzVdKSA8PSBlcHNpbG9uICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdFs2XSAtIHJpZ2h0WzZdKSA8PSBlcHNpbG9uICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdFs3XSAtIHJpZ2h0WzddKSA8PSBlcHNpbG9uICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdFs4XSAtIHJpZ2h0WzhdKSA8PSBlcHNpbG9uKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBJREVOVElUWSA9IE9iamVjdC5mcmVlemUoXHJcbiAgICBuZXcgTWF0cml4MygxLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMS4wKVxyXG4gICk7XHJcblxyXG4gIHN0YXRpYyBaRVJPID0gT2JqZWN0LmZyZWV6ZShcclxuICAgIG5ldyBNYXRyaXgzKDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjApXHJcbiAgKTtcclxuXHJcbiAgY2xvbmUocmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcbiAgICByZXR1cm4gTWF0cml4My5jbG9uZSh0aGlzLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgZXF1YWxzKHJpZ2h0OiBNYXRyaXgzKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gTWF0cml4My5lcXVhbHModGhpcywgcmlnaHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBlcXVhbHNBcnJheShcclxuICAgIG1hdHJpeDogTWF0cml4MyB8IG51bWJlcltdLFxyXG4gICAgYXJyYXk6IG51bWJlcltdLFxyXG4gICAgb2Zmc2V0OiBudW1iZXJcclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIG1hdHJpeFswXSA9PT0gYXJyYXlbb2Zmc2V0XSAmJlxyXG4gICAgICBtYXRyaXhbMV0gPT09IGFycmF5W29mZnNldCArIDFdICYmXHJcbiAgICAgIG1hdHJpeFsyXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMl0gJiZcclxuICAgICAgbWF0cml4WzNdID09PSBhcnJheVtvZmZzZXQgKyAzXSAmJlxyXG4gICAgICBtYXRyaXhbNF0gPT09IGFycmF5W29mZnNldCArIDRdICYmXHJcbiAgICAgIG1hdHJpeFs1XSA9PT0gYXJyYXlbb2Zmc2V0ICsgNV0gJiZcclxuICAgICAgbWF0cml4WzZdID09PSBhcnJheVtvZmZzZXQgKyA2XSAmJlxyXG4gICAgICBtYXRyaXhbN10gPT09IGFycmF5W29mZnNldCArIDddICYmXHJcbiAgICAgIG1hdHJpeFs4XSA9PT0gYXJyYXlbb2Zmc2V0ICsgOF1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb21wYXJlcyB0aGlzIG1hdHJpeCB0byB0aGUgcHJvdmlkZWQgbWF0cml4IGNvbXBvbmVudHdpc2UgYW5kIHJldHVybnNcclxuICAgKiA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGV5IGFyZSB3aXRoaW4gdGhlIHByb3ZpZGVkIGVwc2lsb24sXHJcbiAgICogPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVyd2lzZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7TWF0cml4M30gW3JpZ2h0XSBUaGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeC5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gW2Vwc2lsb249MF0gVGhlIGVwc2lsb24gdG8gdXNlIGZvciBlcXVhbGl0eSB0ZXN0aW5nLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGV5IGFyZSB3aXRoaW4gdGhlIHByb3ZpZGVkIGVwc2lsb24sIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhlcndpc2UuXHJcbiAgICovXHJcbiAgZXF1YWxzRXBzaWxvbihyaWdodCwgZXBzaWxvbikge1xyXG4gICAgcmV0dXJuIE1hdHJpeDMuZXF1YWxzRXBzaWxvbih0aGlzLCByaWdodCwgZXBzaWxvbik7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGAoJHt0aGlzWzBdfSwgJHt0aGlzWzNdfSwgJHt0aGlzWzZdfSlcXG5gICtcclxuICAgICAgYCgke3RoaXNbMV19LCAke3RoaXNbNF19LCAke3RoaXNbN119KVxcbmAgK1xyXG4gICAgICBgKCR7dGhpc1syXX0sICR7dGhpc1s1XX0sICR7dGhpc1s4XX0pYFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHNjYWxlU2NyYXRjaDEgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY2FsZVNjcmF0Y2gyID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2NyYXRjaENvbHVtbiA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNjYWxlU2NyYXRjaDMgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY2FsZVNjcmF0Y2g0ID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2NhbGVTY3JhdGNoNSA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5mdW5jdGlvbiBjb21wdXRlRnJvYmVuaXVzTm9ybShtYXRyaXgpIHtcclxuICBsZXQgbm9ybSA9IDAuMDtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDk7ICsraSkge1xyXG4gICAgY29uc3QgdGVtcCA9IG1hdHJpeFtpXTtcclxuICAgIG5vcm0gKz0gdGVtcCAqIHRlbXA7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gTWF0aC5zcXJ0KG5vcm0pO1xyXG59XHJcblxyXG5jb25zdCByb3dWYWwgPSBbMSwgMCwgMF07XHJcbmNvbnN0IGNvbFZhbCA9IFsyLCAyLCAxXTtcclxuXHJcbmZ1bmN0aW9uIG9mZkRpYWdvbmFsRnJvYmVuaXVzTm9ybShtYXRyaXgpIHtcclxuICAvLyBDb21wdXRlcyB0aGUgXCJvZmYtZGlhZ29uYWxcIiBGcm9iZW5pdXMgbm9ybS5cclxuICAvLyBBc3N1bWVzIG1hdHJpeCBpcyBzeW1tZXRyaWMuXHJcblxyXG4gIGxldCBub3JtID0gMC4wO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgKytpKSB7XHJcbiAgICBjb25zdCB0ZW1wID0gbWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KGNvbFZhbFtpXSwgcm93VmFsW2ldKV07XHJcbiAgICBub3JtICs9IDIuMCAqIHRlbXAgKiB0ZW1wO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIE1hdGguc3FydChub3JtKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2h1ckRlY29tcG9zaXRpb24obWF0cml4LCByZXN1bHQpIHtcclxuICAvLyBUaGlzIHJvdXRpbmUgd2FzIGNyZWF0ZWQgYmFzZWQgdXBvbiBNYXRyaXggQ29tcHV0YXRpb25zLCAzcmQgZWQuLCBieSBHb2x1YiBhbmQgVmFuIExvYW4sXHJcbiAgLy8gc2VjdGlvbiA4LjQuMiBUaGUgMmJ5MiBTeW1tZXRyaWMgU2NodXIgRGVjb21wb3NpdGlvbi5cclxuICAvL1xyXG4gIC8vIFRoZSByb3V0aW5lIHRha2VzIGEgbWF0cml4LCB3aGljaCBpcyBhc3N1bWVkIHRvIGJlIHN5bW1ldHJpYywgYW5kXHJcbiAgLy8gZmluZHMgdGhlIGxhcmdlc3Qgb2ZmLWRpYWdvbmFsIHRlcm0sIGFuZCB0aGVuIGNyZWF0ZXNcclxuICAvLyBhIG1hdHJpeCAocmVzdWx0KSB3aGljaCBjYW4gYmUgdXNlZCB0byBoZWxwIHJlZHVjZSBpdFxyXG5cclxuICBjb25zdCB0b2xlcmFuY2UgPSBHTWF0aC5FUFNJTE9OMTU7XHJcblxyXG4gIGxldCBtYXhEaWFnb25hbCA9IDAuMDtcclxuICBsZXQgcm90QXhpcyA9IDE7XHJcblxyXG4gIC8vIGZpbmQgcGl2b3QgKHJvdEF4aXMpIGJhc2VkIG9uIG1heCBkaWFnb25hbCBvZiBtYXRyaXhcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7ICsraSkge1xyXG4gICAgY29uc3QgdGVtcCA9IE1hdGguYWJzKFxyXG4gICAgICBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoY29sVmFsW2ldLCByb3dWYWxbaV0pXVxyXG4gICAgKTtcclxuICAgIGlmICh0ZW1wID4gbWF4RGlhZ29uYWwpIHtcclxuICAgICAgcm90QXhpcyA9IGk7XHJcbiAgICAgIG1heERpYWdvbmFsID0gdGVtcDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxldCBjID0gMS4wO1xyXG4gIGxldCBzID0gMC4wO1xyXG5cclxuICBjb25zdCBwID0gcm93VmFsW3JvdEF4aXNdO1xyXG4gIGNvbnN0IHEgPSBjb2xWYWxbcm90QXhpc107XHJcblxyXG4gIGlmIChNYXRoLmFicyhtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgocSwgcCldKSA+IHRvbGVyYW5jZSkge1xyXG4gICAgY29uc3QgcXEgPSBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgocSwgcSldO1xyXG4gICAgY29uc3QgcHAgPSBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgocCwgcCldO1xyXG4gICAgY29uc3QgcXAgPSBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgocSwgcCldO1xyXG5cclxuICAgIGNvbnN0IHRhdSA9IChxcSAtIHBwKSAvIDIuMCAvIHFwO1xyXG4gICAgbGV0IHQ7XHJcblxyXG4gICAgaWYgKHRhdSA8IDAuMCkge1xyXG4gICAgICB0ID0gLTEuMCAvICgtdGF1ICsgTWF0aC5zcXJ0KDEuMCArIHRhdSAqIHRhdSkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdCA9IDEuMCAvICh0YXUgKyBNYXRoLnNxcnQoMS4wICsgdGF1ICogdGF1KSk7XHJcbiAgICB9XHJcblxyXG4gICAgYyA9IDEuMCAvIE1hdGguc3FydCgxLjAgKyB0ICogdCk7XHJcbiAgICBzID0gdCAqIGM7XHJcbiAgfVxyXG5cclxuICByZXN1bHQgPSBNYXRyaXgzLmNsb25lKE1hdHJpeDMuSURFTlRJVFksIHJlc3VsdCk7XHJcblxyXG4gIHJlc3VsdFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChwLCBwKV0gPSByZXN1bHRbXHJcbiAgICBNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBxKVxyXG4gIF0gPSBjO1xyXG4gIHJlc3VsdFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBwKV0gPSBzO1xyXG4gIHJlc3VsdFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChwLCBxKV0gPSAtcztcclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5jb25zdCBzY3JhdGNoVHJhbnNwb3NlTWF0cml4ID0gbmV3IE1hdHJpeDMoKTtcclxuZXhwb3J0IGRlZmF1bHQgTWF0cml4MztcclxuIiwiaW1wb3J0IHsgQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcclxuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XHJcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi91dGlscy9kZWZpbmVkXCI7XHJcbmltcG9ydCBDb2xvciBmcm9tIFwiLi9Db2xvclwiO1xyXG5pbXBvcnQgR01hdGggZnJvbSBcIi4vTWF0aFwiO1xyXG5cclxuY2xhc3MgVmVjdG9yNCB7XHJcbiAgcHVibGljIHN0YXRpYyBaRVJPID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yNCgwLjAsIDAuMCwgMC4wLCAwLjApKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBPTkUgPSBPYmplY3QuZnJlZXplKG5ldyBWZWN0b3I0KDEuMCwgMS4wLCAxLjAsIDEuMCkpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIFVOSVRfWCA9IE9iamVjdC5mcmVlemUobmV3IFZlY3RvcjQoMS4wLCAwLjAsIDAuMCwgMC4wKSk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgVU5JVF9ZID0gT2JqZWN0LmZyZWV6ZShuZXcgVmVjdG9yNCgwLjAsIDEuMCwgMC4wLCAwLjApKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBVTklUX1ogPSBPYmplY3QuZnJlZXplKG5ldyBWZWN0b3I0KDAuMCwgMC4wLCAxLjAsIDAuMCkpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIFVOSVRfVyA9IE9iamVjdC5mcmVlemUobmV3IFZlY3RvcjQoMC4wLCAwLjAsIDAuMCwgMS4wKSk7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxuICB6OiBudW1iZXI7XHJcbiAgdzogbnVtYmVyO1xyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciA9IDAsIHk6IG51bWJlciA9IDAsIHo6IG51bWJlciA9IDAsIHc6IG51bWJlciA9IDApIHtcclxuICAgIHRoaXMueCA9IHg7XHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gICAgdGhpcy56ID0gejtcclxuICAgIHRoaXMudyA9IHc7XHJcbiAgfVxyXG4gIHNldCh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCB3OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMueCA9IHg7XHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gICAgdGhpcy56ID0gejtcclxuICAgIHRoaXMudyA9IHc7XHJcbiAgfVxyXG4gIHRvQXJyYXkoKTogbnVtYmVyW10ge1xyXG4gICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLnddO1xyXG4gIH1cclxuXHJcbiAgY2xvbmUocmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcbiAgICByZXR1cm4gVmVjdG9yNC5jbG9uZSh0aGlzLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgZXF1YWxzKHJpZ2h0OiBWZWN0b3I0KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gVmVjdG9yNC5lcXVhbHModGhpcywgcmlnaHQpO1xyXG4gIH1cclxuXHJcbiAgZXF1YWxzRXBzaWxvbihcclxuICAgIHJpZ2h0OiBWZWN0b3I0LFxyXG4gICAgcmVsYXRpdmVFcHNpbG9uOiBudW1iZXIgPSAwLFxyXG4gICAgYWJzb2x1dGVFcHNpbG9uOiBudW1iZXIgPSAwXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gVmVjdG9yNC5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbik7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAoJHt0aGlzLnh9LCAke3RoaXMueX0sICR7dGhpcy56fSwgJHt0aGlzLnd9KWA7XHJcbiAgfVxyXG4gIGZyb21CdWZmZXJBdHRyaWJ1dGUoYXR0cmlidXRlOiBBdHRyaWJ1dGUsIGluZGV4OiBudW1iZXIpOiBWZWN0b3I0IHtcclxuICAgIHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKGluZGV4KTtcclxuICAgIHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKGluZGV4KTtcclxuICAgIHRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKGluZGV4KTtcclxuICAgIHRoaXMudyA9IGF0dHJpYnV0ZS5nZXRXKGluZGV4KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tRWxlbWVudHMoXHJcbiAgICB4OiBudW1iZXIsXHJcbiAgICB5OiBudW1iZXIsXHJcbiAgICB6OiBudW1iZXIsXHJcbiAgICB3OiBudW1iZXIsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjRcclxuICApOiBWZWN0b3I0IHtcclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh4LCB5LCB6LCB3KTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHQueCA9IHg7XHJcbiAgICByZXN1bHQueSA9IHk7XHJcbiAgICByZXN1bHQueiA9IHo7XHJcbiAgICByZXN1bHQudyA9IHc7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsb25lKGNhcnRlc2lhbjogVmVjdG9yNCwgcmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcbiAgICBpZiAoIWRlZmluZWQoY2FydGVzaWFuKSkge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yNChjYXJ0ZXNpYW4ueCwgY2FydGVzaWFuLnksIGNhcnRlc2lhbi56LCBjYXJ0ZXNpYW4udyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4ueDtcclxuICAgIHJlc3VsdC55ID0gY2FydGVzaWFuLnk7XHJcbiAgICByZXN1bHQueiA9IGNhcnRlc2lhbi56O1xyXG4gICAgcmVzdWx0LncgPSBjYXJ0ZXNpYW4udztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWF4aW11bUNvbXBvbmVudChjYXJ0ZXNpYW46IFZlY3RvcjQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KGNhcnRlc2lhbi54LCBjYXJ0ZXNpYW4ueSwgY2FydGVzaWFuLnosIGNhcnRlc2lhbi53KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtaW5pbXVtQ29tcG9uZW50KGNhcnRlc2lhbjogVmVjdG9yNCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5taW4oY2FydGVzaWFuLngsIGNhcnRlc2lhbi55LCBjYXJ0ZXNpYW4ueiwgY2FydGVzaWFuLncpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1pbmltdW1CeUNvbXBvbmVudChcclxuICAgIGZpcnN0OiBWZWN0b3I0LFxyXG4gICAgc2Vjb25kOiBWZWN0b3I0LFxyXG4gICAgcmVzdWx0OiBWZWN0b3I0XHJcbiAgKTogVmVjdG9yNCB7XHJcbiAgICByZXN1bHQueCA9IE1hdGgubWluKGZpcnN0LngsIHNlY29uZC54KTtcclxuICAgIHJlc3VsdC55ID0gTWF0aC5taW4oZmlyc3QueSwgc2Vjb25kLnkpO1xyXG4gICAgcmVzdWx0LnogPSBNYXRoLm1pbihmaXJzdC56LCBzZWNvbmQueik7XHJcbiAgICByZXN1bHQudyA9IE1hdGgubWluKGZpcnN0LncsIHNlY29uZC53KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1heGltdW1CeUNvbXBvbmVudChcclxuICAgIGZpcnN0OiBWZWN0b3I0LFxyXG4gICAgc2Vjb25kOiBWZWN0b3I0LFxyXG4gICAgcmVzdWx0OiBWZWN0b3I0XHJcbiAgKTogVmVjdG9yNCB7XHJcbiAgICByZXN1bHQueCA9IE1hdGgubWF4KGZpcnN0LngsIHNlY29uZC54KTtcclxuICAgIHJlc3VsdC55ID0gTWF0aC5tYXgoZmlyc3QueSwgc2Vjb25kLnkpO1xyXG4gICAgcmVzdWx0LnogPSBNYXRoLm1heChmaXJzdC56LCBzZWNvbmQueik7XHJcbiAgICByZXN1bHQudyA9IE1hdGgubWF4KGZpcnN0LncsIHNlY29uZC53KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsYW1wKFxyXG4gICAgdmFsdWU6IFZlY3RvcjQsXHJcbiAgICBtaW46IFZlY3RvcjQsXHJcbiAgICBtYXg6IFZlY3RvcjQsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjRcclxuICApOiBWZWN0b3I0IHtcclxuICAgIGNvbnN0IHggPSBHTWF0aC5jbGFtcCh2YWx1ZS54LCBtaW4ueCwgbWF4LngpO1xyXG4gICAgY29uc3QgeSA9IEdNYXRoLmNsYW1wKHZhbHVlLnksIG1pbi55LCBtYXgueSk7XHJcbiAgICBjb25zdCB6ID0gR01hdGguY2xhbXAodmFsdWUueiwgbWluLnosIG1heC56KTtcclxuICAgIGNvbnN0IHcgPSBHTWF0aC5jbGFtcCh2YWx1ZS53LCBtaW4udywgbWF4LncpO1xyXG5cclxuICAgIHJlc3VsdC54ID0geDtcclxuICAgIHJlc3VsdC55ID0geTtcclxuICAgIHJlc3VsdC56ID0gejtcclxuICAgIHJlc3VsdC53ID0gdztcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hZ25pdHVkZVNxdWFyZWQoY2FydGVzaWFuOiBWZWN0b3I0KTogbnVtYmVyIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGNhcnRlc2lhbi54ICogY2FydGVzaWFuLnggK1xyXG4gICAgICBjYXJ0ZXNpYW4ueSAqIGNhcnRlc2lhbi55ICtcclxuICAgICAgY2FydGVzaWFuLnogKiBjYXJ0ZXNpYW4ueiArXHJcbiAgICAgIGNhcnRlc2lhbi53ICogY2FydGVzaWFuLndcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWFnbml0dWRlKGNhcnRlc2lhbjogVmVjdG9yNCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KFZlY3RvcjQubWFnbml0dWRlU3F1YXJlZChjYXJ0ZXNpYW4pKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXN0YW5jZShsZWZ0OiBWZWN0b3I0LCByaWdodDogVmVjdG9yNCk6IG51bWJlciB7XHJcbiAgICBWZWN0b3I0LnN1YnRyYWN0KGxlZnQsIHJpZ2h0LCBkaXN0YW5jZVNjcmF0Y2gpO1xyXG4gICAgcmV0dXJuIFZlY3RvcjQubWFnbml0dWRlKGRpc3RhbmNlU2NyYXRjaCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGlzdGFuY2VTcXVhcmVkKGxlZnQ6IFZlY3RvcjQsIHJpZ2h0OiBWZWN0b3I0KTogbnVtYmVyIHtcclxuICAgIFZlY3RvcjQuc3VidHJhY3QobGVmdCwgcmlnaHQsIGRpc3RhbmNlU2NyYXRjaCk7XHJcbiAgICByZXR1cm4gVmVjdG9yNC5tYWduaXR1ZGVTcXVhcmVkKGRpc3RhbmNlU2NyYXRjaCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbm9ybWFsaXplKGNhcnRlc2lhbjogVmVjdG9yNCwgcmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcbiAgICBjb25zdCBtYWduaXR1ZGUgPSBWZWN0b3I0Lm1hZ25pdHVkZShjYXJ0ZXNpYW4pO1xyXG5cclxuICAgIHJlc3VsdC54ID0gY2FydGVzaWFuLnggLyBtYWduaXR1ZGU7XHJcbiAgICByZXN1bHQueSA9IGNhcnRlc2lhbi55IC8gbWFnbml0dWRlO1xyXG4gICAgcmVzdWx0LnogPSBjYXJ0ZXNpYW4ueiAvIG1hZ25pdHVkZTtcclxuICAgIHJlc3VsdC53ID0gY2FydGVzaWFuLncgLyBtYWduaXR1ZGU7XHJcblxyXG4gICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcclxuICAgIGlmIChcclxuICAgICAgaXNOYU4ocmVzdWx0LngpIHx8XHJcbiAgICAgIGlzTmFOKHJlc3VsdC55KSB8fFxyXG4gICAgICBpc05hTihyZXN1bHQueikgfHxcclxuICAgICAgaXNOYU4ocmVzdWx0LncpXHJcbiAgICApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9ybWFsaXplZCByZXN1bHQgaXMgbm90IGEgbnVtYmVyXCIpO1xyXG4gICAgfVxyXG4gICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkb3QobGVmdDogVmVjdG9yNCwgcmlnaHQ6IFZlY3RvcjQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0LnkgKyBsZWZ0LnogKiByaWdodC56ICsgbGVmdC53ICogcmlnaHQud1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtdWx0aXBseUNvbXBvbmVudHMoXHJcbiAgICBsZWZ0OiBWZWN0b3I0LFxyXG4gICAgcmlnaHQ6IFZlY3RvcjQsXHJcbiAgICByZXN1bHQ6IFZlY3RvcjRcclxuICApOiBWZWN0b3I0IHtcclxuICAgIHJlc3VsdC54ID0gbGVmdC54ICogcmlnaHQueDtcclxuICAgIHJlc3VsdC55ID0gbGVmdC55ICogcmlnaHQueTtcclxuICAgIHJlc3VsdC56ID0gbGVmdC56ICogcmlnaHQuejtcclxuICAgIHJlc3VsdC53ID0gbGVmdC53ICogcmlnaHQudztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGl2aWRlQ29tcG9uZW50cyhcclxuICAgIGxlZnQ6IFZlY3RvcjQsXHJcbiAgICByaWdodDogVmVjdG9yNCxcclxuICAgIHJlc3VsdDogVmVjdG9yNFxyXG4gICk6IFZlY3RvcjQge1xyXG4gICAgcmVzdWx0LnggPSBsZWZ0LnggLyByaWdodC54O1xyXG4gICAgcmVzdWx0LnkgPSBsZWZ0LnkgLyByaWdodC55O1xyXG4gICAgcmVzdWx0LnogPSBsZWZ0LnogLyByaWdodC56O1xyXG4gICAgcmVzdWx0LncgPSBsZWZ0LncgLyByaWdodC53O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhZGQobGVmdDogVmVjdG9yNCwgcmlnaHQ6IFZlY3RvcjQsIHJlc3VsdDogVmVjdG9yNCk6IFZlY3RvcjQge1xyXG4gICAgcmVzdWx0LnggPSBsZWZ0LnggKyByaWdodC54O1xyXG4gICAgcmVzdWx0LnkgPSBsZWZ0LnkgKyByaWdodC55O1xyXG4gICAgcmVzdWx0LnogPSBsZWZ0LnogKyByaWdodC56O1xyXG4gICAgcmVzdWx0LncgPSBsZWZ0LncgKyByaWdodC53O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdWJ0cmFjdChsZWZ0OiBWZWN0b3I0LCByaWdodDogVmVjdG9yNCwgcmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcbiAgICByZXN1bHQueCA9IGxlZnQueCAtIHJpZ2h0Lng7XHJcbiAgICByZXN1bHQueSA9IGxlZnQueSAtIHJpZ2h0Lnk7XHJcbiAgICByZXN1bHQueiA9IGxlZnQueiAtIHJpZ2h0Lno7XHJcbiAgICByZXN1bHQudyA9IGxlZnQudyAtIHJpZ2h0Lnc7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG11bHRpcGx5QnlTY2FsYXIoXHJcbiAgICBjYXJ0ZXNpYW46IFZlY3RvcjQsXHJcbiAgICBzY2FsYXI6IG51bWJlcixcclxuICAgIHJlc3VsdDogVmVjdG9yNFxyXG4gICk6IFZlY3RvcjQge1xyXG4gICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4ueCAqIHNjYWxhcjtcclxuICAgIHJlc3VsdC55ID0gY2FydGVzaWFuLnkgKiBzY2FsYXI7XHJcbiAgICByZXN1bHQueiA9IGNhcnRlc2lhbi56ICogc2NhbGFyO1xyXG4gICAgcmVzdWx0LncgPSBjYXJ0ZXNpYW4udyAqIHNjYWxhcjtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGl2aWRlQnlTY2FsYXIoXHJcbiAgICBjYXJ0ZXNpYW46IFZlY3RvcjQsXHJcbiAgICBzY2FsYXI6IG51bWJlcixcclxuICAgIHJlc3VsdDogVmVjdG9yNFxyXG4gICk6IFZlY3RvcjQge1xyXG4gICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4ueCAvIHNjYWxhcjtcclxuICAgIHJlc3VsdC55ID0gY2FydGVzaWFuLnkgLyBzY2FsYXI7XHJcbiAgICByZXN1bHQueiA9IGNhcnRlc2lhbi56IC8gc2NhbGFyO1xyXG4gICAgcmVzdWx0LncgPSBjYXJ0ZXNpYW4udyAvIHNjYWxhcjtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbmVnYXRlKGNhcnRlc2lhbjogVmVjdG9yNCwgcmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcbiAgICByZXN1bHQueCA9IC1jYXJ0ZXNpYW4ueDtcclxuICAgIHJlc3VsdC55ID0gLWNhcnRlc2lhbi55O1xyXG4gICAgcmVzdWx0LnogPSAtY2FydGVzaWFuLno7XHJcbiAgICByZXN1bHQudyA9IC1jYXJ0ZXNpYW4udztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYWJzKGNhcnRlc2lhbjogVmVjdG9yNCwgcmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcbiAgICByZXN1bHQueCA9IE1hdGguYWJzKGNhcnRlc2lhbi54KTtcclxuICAgIHJlc3VsdC55ID0gTWF0aC5hYnMoY2FydGVzaWFuLnkpO1xyXG4gICAgcmVzdWx0LnogPSBNYXRoLmFicyhjYXJ0ZXNpYW4ueik7XHJcbiAgICByZXN1bHQudyA9IE1hdGguYWJzKGNhcnRlc2lhbi53KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbGVycChcclxuICAgIHN0YXJ0OiBWZWN0b3I0LFxyXG4gICAgZW5kOiBWZWN0b3I0LFxyXG4gICAgdDogbnVtYmVyLFxyXG4gICAgcmVzdWx0OiBWZWN0b3I0XHJcbiAgKTogVmVjdG9yNCB7XHJcbiAgICBWZWN0b3I0Lm11bHRpcGx5QnlTY2FsYXIoZW5kLCB0LCBsZXJwU2NyYXRjaCk7XHJcbiAgICByZXN1bHQgPSBWZWN0b3I0Lm11bHRpcGx5QnlTY2FsYXIoc3RhcnQsIDEuMCAtIHQsIHJlc3VsdCk7XHJcbiAgICByZXR1cm4gVmVjdG9yNC5hZGQobGVycFNjcmF0Y2gsIHJlc3VsdCwgcmVzdWx0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBlcXVhbHMobGVmdDogVmVjdG9yNCwgcmlnaHQ6IFZlY3RvcjQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGxlZnQgPT09IHJpZ2h0IHx8XHJcbiAgICAgIChkZWZpbmVkKGxlZnQpICYmXHJcbiAgICAgICAgZGVmaW5lZChyaWdodCkgJiZcclxuICAgICAgICBsZWZ0LnggPT09IHJpZ2h0LnggJiZcclxuICAgICAgICBsZWZ0LnkgPT09IHJpZ2h0LnkgJiZcclxuICAgICAgICBsZWZ0LnogPT09IHJpZ2h0LnogJiZcclxuICAgICAgICBsZWZ0LncgPT09IHJpZ2h0LncpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFsc0FycmF5KFxyXG4gICAgY2FydGVzaWFuOiBWZWN0b3I0LFxyXG4gICAgYXJyYXk6IG51bWJlcltdLFxyXG4gICAgb2Zmc2V0OiBudW1iZXJcclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGNhcnRlc2lhbi54ID09PSBhcnJheVtvZmZzZXRdICYmXHJcbiAgICAgIGNhcnRlc2lhbi55ID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJlxyXG4gICAgICBjYXJ0ZXNpYW4ueiA9PT0gYXJyYXlbb2Zmc2V0ICsgMl0gJiZcclxuICAgICAgY2FydGVzaWFuLncgPT09IGFycmF5W29mZnNldCArIDNdXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFsc0Vwc2lsb24oXHJcbiAgICBsZWZ0OiBWZWN0b3I0LFxyXG4gICAgcmlnaHQ6IFZlY3RvcjQsXHJcbiAgICByZWxhdGl2ZUVwc2lsb246IG51bWJlciA9IDAsXHJcbiAgICBhYnNvbHV0ZUVwc2lsb246IG51bWJlciA9IDBcclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGxlZnQgPT09IHJpZ2h0IHx8XHJcbiAgICAgIChkZWZpbmVkKGxlZnQpICYmXHJcbiAgICAgICAgZGVmaW5lZChyaWdodCkgJiZcclxuICAgICAgICBHTWF0aC5lcXVhbHNFcHNpbG9uKFxyXG4gICAgICAgICAgbGVmdC54LFxyXG4gICAgICAgICAgcmlnaHQueCxcclxuICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbixcclxuICAgICAgICAgIGFic29sdXRlRXBzaWxvblxyXG4gICAgICAgICkgJiZcclxuICAgICAgICBHTWF0aC5lcXVhbHNFcHNpbG9uKFxyXG4gICAgICAgICAgbGVmdC55LFxyXG4gICAgICAgICAgcmlnaHQueSxcclxuICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbixcclxuICAgICAgICAgIGFic29sdXRlRXBzaWxvblxyXG4gICAgICAgICkgJiZcclxuICAgICAgICBHTWF0aC5lcXVhbHNFcHNpbG9uKFxyXG4gICAgICAgICAgbGVmdC56LFxyXG4gICAgICAgICAgcmlnaHQueixcclxuICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbixcclxuICAgICAgICAgIGFic29sdXRlRXBzaWxvblxyXG4gICAgICAgICkgJiZcclxuICAgICAgICBHTWF0aC5lcXVhbHNFcHNpbG9uKGxlZnQudywgcmlnaHQudywgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIHNjcmF0Y2hVOEFycmF5IGFuZCBzY3JhdGNoRjMyQXJyYXkgYXJlIHZpZXdzIGludG8gdGhlIHNhbWUgYnVmZmVyXHJcbmNvbnN0IHNjcmF0Y2hGMzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoMSk7XHJcbmNvbnN0IHNjcmF0Y2hVOEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoc2NyYXRjaEYzMkFycmF5LmJ1ZmZlcik7XHJcblxyXG5jb25zdCB0ZXN0VTMyID0gbmV3IFVpbnQzMkFycmF5KFsweDExMjIzMzQ0XSk7XHJcbmNvbnN0IHRlc3RVOCA9IG5ldyBVaW50OEFycmF5KHRlc3RVMzIuYnVmZmVyKTtcclxuY29uc3QgbGl0dGxlRW5kaWFuID0gdGVzdFU4WzBdID09PSAweDQ0O1xyXG5jb25zdCBkaXN0YW5jZVNjcmF0Y2ggPSBuZXcgVmVjdG9yNCgpO1xyXG5jb25zdCBsZXJwU2NyYXRjaCA9IG5ldyBWZWN0b3I0KCk7XHJcbmNvbnN0IG1vc3RPcnRob2dvbmFsQXhpc1NjcmF0Y2ggPSBuZXcgVmVjdG9yNCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVmVjdG9yNDtcclxuIiwiaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4vVmVjdG9yM1wiO1xyXG5pbXBvcnQgVmVjdG9yNCBmcm9tIFwiLi9WZWN0b3I0XCI7XHJcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xyXG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xyXG5pbXBvcnQgR01hdGggZnJvbSBcIi4vTWF0aFwiO1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tIFwiLi9NYXRyaXgzXCI7XHJcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tIFwiLi9RdWF0ZXJuaW9uXCI7XHJcbmNsYXNzIE1hdHJpeDQge1xyXG5cdHB1YmxpYyBzdGF0aWMgSURFTlRJVFkgPSBPYmplY3QuZnJlZXplKFxyXG5cdFx0bmV3IE1hdHJpeDQoMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wKVxyXG5cdCk7XHJcblx0cHVibGljIHN0YXRpYyBaRVJPID0gT2JqZWN0LmZyZWV6ZShcclxuXHRcdG5ldyBNYXRyaXg0KDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMClcclxuXHQpO1xyXG5cdC8qKlxyXG5cdCAqIEEgNHg0IG1hdHJpeCwgaW5kZXhhYmxlIGFzIGEgY29sdW1uLW1ham9yIG9yZGVyIGFycmF5LlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMFJvdzA9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAwLCByb3cgMC5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjFSb3cwPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMSwgcm93IDAuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4yUm93MD0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDIsIHJvdyAwLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uM1JvdzA9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAzLCByb3cgMC5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjBSb3cxPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMCwgcm93IDEuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4xUm93MT0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDEsIHJvdyAxLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMlJvdzE9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAyLCByb3cgMS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjNSb3cxPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMywgcm93IDEuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4wUm93Mj0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDAsIHJvdyAyLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMVJvdzI9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAxLCByb3cgMi5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjJSb3cyPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMiwgcm93IDIuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4zUm93Mj0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDMsIHJvdyAyLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uMFJvdzM9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAwLCByb3cgMy5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2NvbHVtbjFSb3czPTAuMF0gVGhlIHZhbHVlIGZvciBjb2x1bW4gMSwgcm93IDMuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtjb2x1bW4yUm93Mz0wLjBdIFRoZSB2YWx1ZSBmb3IgY29sdW1uIDIsIHJvdyAzLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbY29sdW1uM1JvdzM9MC4wXSBUaGUgdmFsdWUgZm9yIGNvbHVtbiAzLCByb3cgMy5cclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdGNvbHVtbjBSb3cwID0gMCxcclxuXHRcdGNvbHVtbjFSb3cwID0gMCxcclxuXHRcdGNvbHVtbjJSb3cwID0gMCxcclxuXHRcdGNvbHVtbjNSb3cwID0gMCxcclxuXHRcdGNvbHVtbjBSb3cxID0gMCxcclxuXHRcdGNvbHVtbjFSb3cxID0gMCxcclxuXHRcdGNvbHVtbjJSb3cxID0gMCxcclxuXHRcdGNvbHVtbjNSb3cxID0gMCxcclxuXHRcdGNvbHVtbjBSb3cyID0gMCxcclxuXHRcdGNvbHVtbjFSb3cyID0gMCxcclxuXHRcdGNvbHVtbjJSb3cyID0gMCxcclxuXHRcdGNvbHVtbjNSb3cyID0gMCxcclxuXHRcdGNvbHVtbjBSb3czID0gMCxcclxuXHRcdGNvbHVtbjFSb3czID0gMCxcclxuXHRcdGNvbHVtbjJSb3czID0gMCxcclxuXHRcdGNvbHVtbjNSb3czID0gMFxyXG5cdCkge1xyXG5cdFx0dGhpc1swXSA9IGNvbHVtbjBSb3cwO1xyXG5cdFx0dGhpc1sxXSA9IGNvbHVtbjBSb3cxO1xyXG5cdFx0dGhpc1syXSA9IGNvbHVtbjBSb3cyO1xyXG5cdFx0dGhpc1szXSA9IGNvbHVtbjBSb3czO1xyXG5cdFx0dGhpc1s0XSA9IGNvbHVtbjFSb3cwO1xyXG5cdFx0dGhpc1s1XSA9IGNvbHVtbjFSb3cxO1xyXG5cdFx0dGhpc1s2XSA9IGNvbHVtbjFSb3cyO1xyXG5cdFx0dGhpc1s3XSA9IGNvbHVtbjFSb3czO1xyXG5cdFx0dGhpc1s4XSA9IGNvbHVtbjJSb3cwO1xyXG5cdFx0dGhpc1s5XSA9IGNvbHVtbjJSb3cxO1xyXG5cdFx0dGhpc1sxMF0gPSBjb2x1bW4yUm93MjtcclxuXHRcdHRoaXNbMTFdID0gY29sdW1uMlJvdzM7XHJcblx0XHR0aGlzWzEyXSA9IGNvbHVtbjNSb3cwO1xyXG5cdFx0dGhpc1sxM10gPSBjb2x1bW4zUm93MTtcclxuXHRcdHRoaXNbMTRdID0gY29sdW1uM1JvdzI7XHJcblx0XHR0aGlzWzE1XSA9IGNvbHVtbjNSb3czO1xyXG5cdH1cclxuXHQvLz8/Pz9cclxuXHRjbG9uZShyZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdHJldHVybiBNYXRyaXg0LmNsb25lKHRoaXMsIHJlc3VsdCk7XHJcblx0fVxyXG5cclxuXHRlcXVhbHMocmlnaHQ6IE1hdHJpeDQpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBNYXRyaXg0LmVxdWFscyh0aGlzLCByaWdodCk7XHJcblx0fVxyXG5cclxuXHRlcXVhbHNFcHNpbG9uKHJpZ2h0OiBNYXRyaXg0LCBlcHNpbG9uOiBudW1iZXIgPSAwKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gTWF0cml4NC5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCBlcHNpbG9uKTtcclxuXHR9XHJcblx0bG9va0F0KGV5ZTogVmVjdG9yMywgdGFyZ2V0OiBWZWN0b3IzLCB1cDogVmVjdG9yMyk6IE1hdHJpeDQge1xyXG5cdFx0Y29uc3QgbWF0cml4ID0gdGhpcztcclxuXHRcdFZlY3RvcjMuc3VidHJhY3QoZXllLCB0YXJnZXQsIHopO1xyXG5cdFx0aWYgKHoubGVuZ3RoKCkgPT09IDApIHtcclxuXHRcdFx0Ly8gZXllIGFuZCB0YXJnZXQgYXJlIGluIHRoZSBzYW1lIHBvc2l0aW9uXHJcblx0XHRcdHoueiA9IDE7XHJcblx0XHR9XHJcblx0XHR6Lm5vcm1hbGl6ZSgpO1xyXG5cdFx0VmVjdG9yMy5jcm9zcyh1cCwgeiwgeCk7XHJcblx0XHRpZiAoeC5sZW5ndGgoKSA9PT0gMCkge1xyXG5cdFx0XHQvLyB1cCBhbmQgeiBhcmUgcGFyYWxsZWxcclxuXHJcblx0XHRcdGlmIChNYXRoLmFicyh1cC56KSA9PT0gMSkge1xyXG5cdFx0XHRcdHoueCArPSAwLjAwMDE7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ei56ICs9IDAuMDAwMTtcclxuXHRcdFx0fVxyXG5cdFx0XHR6Lm5vcm1hbGl6ZSgpO1xyXG5cdFx0XHRWZWN0b3IzLmNyb3NzKHVwLCB6LCB4KTtcclxuXHRcdH1cclxuXHRcdHgubm9ybWFsaXplKCk7XHJcblx0XHRWZWN0b3IzLmNyb3NzKHosIHgsIHkpO1xyXG5cdFx0bWF0cml4WzBdID0geC54O1xyXG5cdFx0bWF0cml4WzRdID0geS54O1xyXG5cdFx0bWF0cml4WzhdID0gei54O1xyXG5cdFx0bWF0cml4WzFdID0geC55O1xyXG5cdFx0bWF0cml4WzVdID0geS55O1xyXG5cdFx0bWF0cml4WzldID0gei55O1xyXG5cdFx0bWF0cml4WzJdID0geC56O1xyXG5cdFx0bWF0cml4WzZdID0geS56O1xyXG5cdFx0bWF0cml4WzEwXSA9IHouejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0dG9TdHJpbmcoKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRgKCR7dGhpc1swXX0sICR7dGhpc1s0XX0sICR7dGhpc1s4XX0sICR7dGhpc1sxMl19KVxcbmAgK1xyXG5cdFx0XHRgKCR7dGhpc1sxXX0sICR7dGhpc1s1XX0sICR7dGhpc1s5XX0sICR7dGhpc1sxM119KVxcbmAgK1xyXG5cdFx0XHRgKCR7dGhpc1syXX0sICR7dGhpc1s2XX0sICR7dGhpc1sxMF19LCAke3RoaXNbMTRdfSlcXG5gICtcclxuXHRcdFx0YCgke3RoaXNbM119LCAke3RoaXNbN119LCAke3RoaXNbMTFdfSwgJHt0aGlzWzE1XX0pYFxyXG5cdFx0KTtcclxuXHR9XHJcblx0c3RhdGljIGNsb25lKG1hdHJpeDogTWF0cml4NCB8IG51bWJlcltdLCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdGlmICghZGVmaW5lZChtYXRyaXgpKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoXHJcblx0XHRcdFx0bWF0cml4WzBdLFxyXG5cdFx0XHRcdG1hdHJpeFs0XSxcclxuXHRcdFx0XHRtYXRyaXhbOF0sXHJcblx0XHRcdFx0bWF0cml4WzEyXSxcclxuXHRcdFx0XHRtYXRyaXhbMV0sXHJcblx0XHRcdFx0bWF0cml4WzVdLFxyXG5cdFx0XHRcdG1hdHJpeFs5XSxcclxuXHRcdFx0XHRtYXRyaXhbMTNdLFxyXG5cdFx0XHRcdG1hdHJpeFsyXSxcclxuXHRcdFx0XHRtYXRyaXhbNl0sXHJcblx0XHRcdFx0bWF0cml4WzEwXSxcclxuXHRcdFx0XHRtYXRyaXhbMTRdLFxyXG5cdFx0XHRcdG1hdHJpeFszXSxcclxuXHRcdFx0XHRtYXRyaXhbN10sXHJcblx0XHRcdFx0bWF0cml4WzExXSxcclxuXHRcdFx0XHRtYXRyaXhbMTVdXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF07XHJcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbMV07XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl07XHJcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbM107XHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXhbNF07XHJcblx0XHRyZXN1bHRbNV0gPSBtYXRyaXhbNV07XHJcblx0XHRyZXN1bHRbNl0gPSBtYXRyaXhbNl07XHJcblx0XHRyZXN1bHRbN10gPSBtYXRyaXhbN107XHJcblx0XHRyZXN1bHRbOF0gPSBtYXRyaXhbOF07XHJcblx0XHRyZXN1bHRbOV0gPSBtYXRyaXhbOV07XHJcblx0XHRyZXN1bHRbMTBdID0gbWF0cml4WzEwXTtcclxuXHRcdHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdO1xyXG5cdFx0cmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07XHJcblx0XHRyZXN1bHRbMTNdID0gbWF0cml4WzEzXTtcclxuXHRcdHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdO1xyXG5cdFx0cmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21Db2x1bW5NYWpvckFycmF5KHZhbHVlczogbnVtYmVyW10sIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0cmV0dXJuIE1hdHJpeDQuY2xvbmUodmFsdWVzLCByZXN1bHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21Sb3dNYWpvckFycmF5KHZhbHVlczogbnVtYmVyW10sIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBNYXRyaXg0KFxyXG5cdFx0XHRcdHZhbHVlc1swXSxcclxuXHRcdFx0XHR2YWx1ZXNbMV0sXHJcblx0XHRcdFx0dmFsdWVzWzJdLFxyXG5cdFx0XHRcdHZhbHVlc1szXSxcclxuXHRcdFx0XHR2YWx1ZXNbNF0sXHJcblx0XHRcdFx0dmFsdWVzWzVdLFxyXG5cdFx0XHRcdHZhbHVlc1s2XSxcclxuXHRcdFx0XHR2YWx1ZXNbN10sXHJcblx0XHRcdFx0dmFsdWVzWzhdLFxyXG5cdFx0XHRcdHZhbHVlc1s5XSxcclxuXHRcdFx0XHR2YWx1ZXNbMTBdLFxyXG5cdFx0XHRcdHZhbHVlc1sxMV0sXHJcblx0XHRcdFx0dmFsdWVzWzEyXSxcclxuXHRcdFx0XHR2YWx1ZXNbMTNdLFxyXG5cdFx0XHRcdHZhbHVlc1sxNF0sXHJcblx0XHRcdFx0dmFsdWVzWzE1XVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFx0cmVzdWx0WzBdID0gdmFsdWVzWzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gdmFsdWVzWzRdO1xyXG5cdFx0cmVzdWx0WzJdID0gdmFsdWVzWzhdO1xyXG5cdFx0cmVzdWx0WzNdID0gdmFsdWVzWzEyXTtcclxuXHRcdHJlc3VsdFs0XSA9IHZhbHVlc1sxXTtcclxuXHRcdHJlc3VsdFs1XSA9IHZhbHVlc1s1XTtcclxuXHRcdHJlc3VsdFs2XSA9IHZhbHVlc1s5XTtcclxuXHRcdHJlc3VsdFs3XSA9IHZhbHVlc1sxM107XHJcblx0XHRyZXN1bHRbOF0gPSB2YWx1ZXNbMl07XHJcblx0XHRyZXN1bHRbOV0gPSB2YWx1ZXNbNl07XHJcblx0XHRyZXN1bHRbMTBdID0gdmFsdWVzWzEwXTtcclxuXHRcdHJlc3VsdFsxMV0gPSB2YWx1ZXNbMTRdO1xyXG5cdFx0cmVzdWx0WzEyXSA9IHZhbHVlc1szXTtcclxuXHRcdHJlc3VsdFsxM10gPSB2YWx1ZXNbN107XHJcblx0XHRyZXN1bHRbMTRdID0gdmFsdWVzWzExXTtcclxuXHRcdHJlc3VsdFsxNV0gPSB2YWx1ZXNbMTVdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihyb3RhdGlvbjogTWF0cml4MywgdHJhbnNsYXRpb246IFZlY3RvcjMsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0dHJhbnNsYXRpb24gPSBkZWZhdWx0VmFsdWUodHJhbnNsYXRpb24sIFZlY3RvcjMuWkVSTyk7XHJcblxyXG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBNYXRyaXg0KFxyXG5cdFx0XHRcdHJvdGF0aW9uWzBdLFxyXG5cdFx0XHRcdHJvdGF0aW9uWzNdLFxyXG5cdFx0XHRcdHJvdGF0aW9uWzZdLFxyXG5cdFx0XHRcdHRyYW5zbGF0aW9uLngsXHJcblx0XHRcdFx0cm90YXRpb25bMV0sXHJcblx0XHRcdFx0cm90YXRpb25bNF0sXHJcblx0XHRcdFx0cm90YXRpb25bN10sXHJcblx0XHRcdFx0dHJhbnNsYXRpb24ueSxcclxuXHRcdFx0XHRyb3RhdGlvblsyXSxcclxuXHRcdFx0XHRyb3RhdGlvbls1XSxcclxuXHRcdFx0XHRyb3RhdGlvbls4XSxcclxuXHRcdFx0XHR0cmFuc2xhdGlvbi56LFxyXG5cdFx0XHRcdDAuMCxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdDEuMFxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJlc3VsdFswXSA9IHJvdGF0aW9uWzBdO1xyXG5cdFx0cmVzdWx0WzFdID0gcm90YXRpb25bMV07XHJcblx0XHRyZXN1bHRbMl0gPSByb3RhdGlvblsyXTtcclxuXHRcdHJlc3VsdFszXSA9IDAuMDtcclxuXHRcdHJlc3VsdFs0XSA9IHJvdGF0aW9uWzNdO1xyXG5cdFx0cmVzdWx0WzVdID0gcm90YXRpb25bNF07XHJcblx0XHRyZXN1bHRbNl0gPSByb3RhdGlvbls1XTtcclxuXHRcdHJlc3VsdFs3XSA9IDAuMDtcclxuXHRcdHJlc3VsdFs4XSA9IHJvdGF0aW9uWzZdO1xyXG5cdFx0cmVzdWx0WzldID0gcm90YXRpb25bN107XHJcblx0XHRyZXN1bHRbMTBdID0gcm90YXRpb25bOF07XHJcblx0XHRyZXN1bHRbMTFdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzEyXSA9IHRyYW5zbGF0aW9uLng7XHJcblx0XHRyZXN1bHRbMTNdID0gdHJhbnNsYXRpb24ueTtcclxuXHRcdHJlc3VsdFsxNF0gPSB0cmFuc2xhdGlvbi56O1xyXG5cdFx0cmVzdWx0WzE1XSA9IDEuMDtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbVRyYW5zbGF0aW9uUXVhdGVybmlvblJvdGF0aW9uU2NhbGUoXHJcblx0XHR0cmFuc2xhdGlvbjogVmVjdG9yMyxcclxuXHRcdHJvdGF0aW9uOiBRdWF0ZXJuaW9uLFxyXG5cdFx0c2NhbGU6IFZlY3RvcjMsXHJcblx0XHRyZXN1bHQ6IE1hdHJpeDRcclxuXHQpOiBNYXRyaXg0IHtcclxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcblx0XHRcdHJlc3VsdCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgc2NhbGVYID0gc2NhbGUueDtcclxuXHRcdGNvbnN0IHNjYWxlWSA9IHNjYWxlLnk7XHJcblx0XHRjb25zdCBzY2FsZVogPSBzY2FsZS56O1xyXG5cclxuXHRcdGNvbnN0IHgyID0gcm90YXRpb24ueCAqIHJvdGF0aW9uLng7XHJcblx0XHRjb25zdCB4eSA9IHJvdGF0aW9uLnggKiByb3RhdGlvbi55O1xyXG5cdFx0Y29uc3QgeHogPSByb3RhdGlvbi54ICogcm90YXRpb24uejtcclxuXHRcdGNvbnN0IHh3ID0gcm90YXRpb24ueCAqIHJvdGF0aW9uLnc7XHJcblx0XHRjb25zdCB5MiA9IHJvdGF0aW9uLnkgKiByb3RhdGlvbi55O1xyXG5cdFx0Y29uc3QgeXogPSByb3RhdGlvbi55ICogcm90YXRpb24uejtcclxuXHRcdGNvbnN0IHl3ID0gcm90YXRpb24ueSAqIHJvdGF0aW9uLnc7XHJcblx0XHRjb25zdCB6MiA9IHJvdGF0aW9uLnogKiByb3RhdGlvbi56O1xyXG5cdFx0Y29uc3QgencgPSByb3RhdGlvbi56ICogcm90YXRpb24udztcclxuXHRcdGNvbnN0IHcyID0gcm90YXRpb24udyAqIHJvdGF0aW9uLnc7XHJcblxyXG5cdFx0Y29uc3QgbTAwID0geDIgLSB5MiAtIHoyICsgdzI7XHJcblx0XHRjb25zdCBtMDEgPSAyLjAgKiAoeHkgLSB6dyk7XHJcblx0XHRjb25zdCBtMDIgPSAyLjAgKiAoeHogKyB5dyk7XHJcblxyXG5cdFx0Y29uc3QgbTEwID0gMi4wICogKHh5ICsgencpO1xyXG5cdFx0Y29uc3QgbTExID0gLXgyICsgeTIgLSB6MiArIHcyO1xyXG5cdFx0Y29uc3QgbTEyID0gMi4wICogKHl6IC0geHcpO1xyXG5cclxuXHRcdGNvbnN0IG0yMCA9IDIuMCAqICh4eiAtIHl3KTtcclxuXHRcdGNvbnN0IG0yMSA9IDIuMCAqICh5eiArIHh3KTtcclxuXHRcdGNvbnN0IG0yMiA9IC14MiAtIHkyICsgejIgKyB3MjtcclxuXHJcblx0XHRyZXN1bHRbMF0gPSBtMDAgKiBzY2FsZVg7XHJcblx0XHRyZXN1bHRbMV0gPSBtMTAgKiBzY2FsZVg7XHJcblx0XHRyZXN1bHRbMl0gPSBtMjAgKiBzY2FsZVg7XHJcblx0XHRyZXN1bHRbM10gPSAwLjA7XHJcblx0XHRyZXN1bHRbNF0gPSBtMDEgKiBzY2FsZVk7XHJcblx0XHRyZXN1bHRbNV0gPSBtMTEgKiBzY2FsZVk7XHJcblx0XHRyZXN1bHRbNl0gPSBtMjEgKiBzY2FsZVk7XHJcblx0XHRyZXN1bHRbN10gPSAwLjA7XHJcblx0XHRyZXN1bHRbOF0gPSBtMDIgKiBzY2FsZVo7XHJcblx0XHRyZXN1bHRbOV0gPSBtMTIgKiBzY2FsZVo7XHJcblx0XHRyZXN1bHRbMTBdID0gbTIyICogc2NhbGVaO1xyXG5cdFx0cmVzdWx0WzExXSA9IDAuMDtcclxuXHRcdHJlc3VsdFsxMl0gPSB0cmFuc2xhdGlvbi54O1xyXG5cdFx0cmVzdWx0WzEzXSA9IHRyYW5zbGF0aW9uLnk7XHJcblx0XHRyZXN1bHRbMTRdID0gdHJhbnNsYXRpb24uejtcclxuXHRcdHJlc3VsdFsxNV0gPSAxLjA7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tVHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlKFxyXG5cdFx0dHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlOiB7XHJcblx0XHRcdHRyYW5zbGF0aW9uOiBWZWN0b3IzO1xyXG5cdFx0XHRyb3RhdGlvbjogUXVhdGVybmlvbjtcclxuXHRcdFx0c2NhbGU6IFZlY3RvcjM7XHJcblx0XHR9LFxyXG5cdFx0cmVzdWx0OiBNYXRyaXg0XHJcblx0KTogTWF0cml4NCB7XHJcblx0XHRyZXR1cm4gTWF0cml4NC5mcm9tVHJhbnNsYXRpb25RdWF0ZXJuaW9uUm90YXRpb25TY2FsZShcclxuXHRcdFx0dHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlLnRyYW5zbGF0aW9uLFxyXG5cdFx0XHR0cmFuc2xhdGlvblJvdGF0aW9uU2NhbGUucm90YXRpb24sXHJcblx0XHRcdHRyYW5zbGF0aW9uUm90YXRpb25TY2FsZS5zY2FsZSxcclxuXHRcdFx0cmVzdWx0XHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21UcmFuc2xhdGlvbih0cmFuc2xhdGlvbjogVmVjdG9yMywgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRyZXR1cm4gTWF0cml4NC5mcm9tUm90YXRpb25UcmFuc2xhdGlvbihNYXRyaXgzLklERU5USVRZLCB0cmFuc2xhdGlvbiwgcmVzdWx0KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tU2NhbGUoc2NhbGU6IFZlY3RvcjMsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0aWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBNYXRyaXg0KFxyXG5cdFx0XHRcdHNjYWxlLngsXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdDAuMCxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdHNjYWxlLnksXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdDAuMCxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdHNjYWxlLnosXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdDAuMCxcclxuXHRcdFx0XHQwLjAsXHJcblx0XHRcdFx0MC4wLFxyXG5cdFx0XHRcdDEuMFxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJlc3VsdFswXSA9IHNjYWxlLng7XHJcblx0XHRyZXN1bHRbMV0gPSAwLjA7XHJcblx0XHRyZXN1bHRbMl0gPSAwLjA7XHJcblx0XHRyZXN1bHRbM10gPSAwLjA7XHJcblx0XHRyZXN1bHRbNF0gPSAwLjA7XHJcblx0XHRyZXN1bHRbNV0gPSBzY2FsZS55O1xyXG5cdFx0cmVzdWx0WzZdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzddID0gMC4wO1xyXG5cdFx0cmVzdWx0WzhdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzldID0gMC4wO1xyXG5cdFx0cmVzdWx0WzEwXSA9IHNjYWxlLno7XHJcblx0XHRyZXN1bHRbMTFdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzEyXSA9IDAuMDtcclxuXHRcdHJlc3VsdFsxM10gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTRdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzE1XSA9IDEuMDtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbVJvdGF0aW9uKHJvdGF0aW9uOiBNYXRyaXgzLCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcblx0XHRcdHJlc3VsdCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0XHR9XHJcblx0XHRyZXN1bHRbMF0gPSByb3RhdGlvblswXTtcclxuXHRcdHJlc3VsdFsxXSA9IHJvdGF0aW9uWzFdO1xyXG5cdFx0cmVzdWx0WzJdID0gcm90YXRpb25bMl07XHJcblx0XHRyZXN1bHRbM10gPSAwLjA7XHJcblxyXG5cdFx0cmVzdWx0WzRdID0gcm90YXRpb25bM107XHJcblx0XHRyZXN1bHRbNV0gPSByb3RhdGlvbls0XTtcclxuXHRcdHJlc3VsdFs2XSA9IHJvdGF0aW9uWzVdO1xyXG5cdFx0cmVzdWx0WzddID0gMC4wO1xyXG5cclxuXHRcdHJlc3VsdFs4XSA9IHJvdGF0aW9uWzZdO1xyXG5cdFx0cmVzdWx0WzldID0gcm90YXRpb25bN107XHJcblx0XHRyZXN1bHRbMTBdID0gcm90YXRpb25bOF07XHJcblx0XHRyZXN1bHRbMTFdID0gMC4wO1xyXG5cclxuXHRcdHJlc3VsdFsxMl0gPSAwLjA7XHJcblx0XHRyZXN1bHRbMTNdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzE0XSA9IDAuMDtcclxuXHRcdHJlc3VsdFsxNV0gPSAxLjA7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtYWtlUGVyc3BlY3RpdmUoXHJcblx0XHRsZWZ0OiBudW1iZXIsXHJcblx0XHRyaWdodDogbnVtYmVyLFxyXG5cdFx0dG9wOiBudW1iZXIsXHJcblx0XHRib3R0b206IG51bWJlcixcclxuXHRcdG5lYXI6IG51bWJlcixcclxuXHRcdGZhcjogbnVtYmVyXHJcblx0KTogTWF0cml4NCB7XHJcblx0XHQvLyBmcm9tIHRocmVlLmpzXHJcblx0XHRjb25zdCBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xyXG5cdFx0Y29uc3QgeCA9ICgyICogbmVhcikgLyAocmlnaHQgLSBsZWZ0KTtcclxuXHRcdGNvbnN0IHkgPSAoMiAqIG5lYXIpIC8gKHRvcCAtIGJvdHRvbSk7XHJcblxyXG5cdFx0Y29uc3QgYSA9IChyaWdodCArIGxlZnQpIC8gKHJpZ2h0IC0gbGVmdCk7XHJcblx0XHRjb25zdCBiID0gKHRvcCArIGJvdHRvbSkgLyAodG9wIC0gYm90dG9tKTtcclxuXHRcdGNvbnN0IGMgPSAtZmFyIC8gKGZhciAtIG5lYXIpO1xyXG5cdFx0Y29uc3QgZCA9ICgtZmFyICogbmVhcikgLyAoZmFyIC0gbmVhcik7XHJcblxyXG5cdFx0bWF0cml4WzBdID0geDtcclxuXHRcdG1hdHJpeFs0XSA9IDA7XHJcblx0XHRtYXRyaXhbOF0gPSBhO1xyXG5cdFx0bWF0cml4WzEyXSA9IDA7XHJcblx0XHRtYXRyaXhbMV0gPSAwO1xyXG5cdFx0bWF0cml4WzVdID0geTtcclxuXHRcdG1hdHJpeFs5XSA9IGI7XHJcblx0XHRtYXRyaXhbMTNdID0gMDtcclxuXHRcdG1hdHJpeFsyXSA9IDA7XHJcblx0XHRtYXRyaXhbNl0gPSAwO1xyXG5cdFx0bWF0cml4WzEwXSA9IGM7XHJcblx0XHRtYXRyaXhbMTRdID0gZDtcclxuXHRcdG1hdHJpeFszXSA9IDA7XHJcblx0XHRtYXRyaXhbN10gPSAwO1xyXG5cdFx0bWF0cml4WzExXSA9IC0xO1xyXG5cdFx0bWF0cml4WzE1XSA9IDA7XHJcblx0XHRyZXR1cm4gbWF0cml4O1xyXG5cdH1cclxuXHRzdGF0aWMgbWFrZU9ydGhvZ3JhcGhpYyhcclxuXHRcdGxlZnQ6IG51bWJlcixcclxuXHRcdHJpZ2h0OiBudW1iZXIsXHJcblx0XHR0b3A6IG51bWJlcixcclxuXHRcdGJvdHRvbTogbnVtYmVyLFxyXG5cdFx0bmVhcjogbnVtYmVyLFxyXG5cdFx0ZmFyOiBudW1iZXJcclxuXHQpOiBNYXRyaXg0IHtcclxuXHRcdGNvbnN0IG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0XHRjb25zdCB3ID0gMS4wIC8gKHJpZ2h0IC0gbGVmdCk7XHJcblx0XHRjb25zdCBoID0gMS4wIC8gKHRvcCAtIGJvdHRvbSk7XHJcblx0XHRjb25zdCBwID0gMS4wIC8gKGZhciAtIG5lYXIpO1xyXG5cclxuXHRcdGNvbnN0IHggPSAocmlnaHQgKyBsZWZ0KSAqIHc7XHJcblx0XHRjb25zdCB5ID0gKHRvcCArIGJvdHRvbSkgKiBoO1xyXG5cdFx0Y29uc3QgeiA9IG5lYXIgKiBwO1xyXG5cclxuXHRcdG1hdHJpeFswXSA9IDIgKiB3O1xyXG5cdFx0bWF0cml4WzRdID0gMDtcclxuXHRcdG1hdHJpeFs4XSA9IDA7XHJcblx0XHRtYXRyaXhbMTJdID0gLXg7XHJcblx0XHRtYXRyaXhbMV0gPSAwO1xyXG5cdFx0bWF0cml4WzVdID0gMiAqIGg7XHJcblx0XHRtYXRyaXhbOV0gPSAwO1xyXG5cdFx0bWF0cml4WzEzXSA9IC15O1xyXG5cdFx0bWF0cml4WzJdID0gMDtcclxuXHRcdG1hdHJpeFs2XSA9IDA7XHJcblx0XHRtYXRyaXhbMTBdID0gLTEgKiBwO1xyXG5cdFx0bWF0cml4WzE0XSA9IC16O1xyXG5cdFx0bWF0cml4WzNdID0gMDtcclxuXHRcdG1hdHJpeFs3XSA9IDA7XHJcblx0XHRtYXRyaXhbMTFdID0gMDtcclxuXHRcdG1hdHJpeFsxNV0gPSAxO1xyXG5cdFx0cmV0dXJuIG1hdHJpeDtcclxuXHR9XHJcblx0dG9BcnJheSgpIHtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IFtdO1xyXG5cdFx0TWF0cml4NC50b0FycmF5KHRoaXMsIHJlc3VsdCk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBDb21wdXRlcyBhbiBBcnJheSBmcm9tIHRoZSBwcm92aWRlZCBNYXRyaXg0IGluc3RhbmNlLlxyXG5cdCAqIFRoZSBhcnJheSB3aWxsIGJlIGluIGNvbHVtbi1tYWpvciBvcmRlci5cclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIC8vY3JlYXRlIGFuIGFycmF5IGZyb20gYW4gaW5zdGFuY2Ugb2YgTWF0cml4NFxyXG5cdCAqIC8vIG0gPSBbMTAuMCwgMTQuMCwgMTguMCwgMjIuMF1cclxuXHQgKiAvLyAgICAgWzExLjAsIDE1LjAsIDE5LjAsIDIzLjBdXHJcblx0ICogLy8gICAgIFsxMi4wLCAxNi4wLCAyMC4wLCAyNC4wXVxyXG5cdCAqIC8vICAgICBbMTMuMCwgMTcuMCwgMjEuMCwgMjUuMF1cclxuXHQgKiBjb25zdCBhID0gTWF0cml4NC50b0FycmF5KG0pO1xyXG5cdCAqXHJcblx0ICogLy8gbSByZW1haW5zIHRoZSBzYW1lXHJcblx0ICogLy9jcmVhdGVzIGEgPSBbMTAuMCwgMTEuMCwgMTIuMCwgMTMuMCwgMTQuMCwgMTUuMCwgMTYuMCwgMTcuMCwgMTguMCwgMTkuMCwgMjAuMCwgMjEuMCwgMjIuMCwgMjMuMCwgMjQuMCwgMjUuMF1cclxuXHQgKi9cclxuXHRzdGF0aWMgdG9BcnJheShtYXRyaXg6IEFycmF5PG51bWJlcj4gfCBNYXRyaXg0LCByZXN1bHQ6IEFycmF5PG51bWJlcj4pOiBBcnJheTxudW1iZXI+IHtcclxuXHRcdGlmICghZGVmaW5lZChyZXN1bHQpKSB7XHJcblx0XHRcdHJldHVybiBbXHJcblx0XHRcdFx0bWF0cml4WzBdLFxyXG5cdFx0XHRcdG1hdHJpeFsxXSxcclxuXHRcdFx0XHRtYXRyaXhbMl0sXHJcblx0XHRcdFx0bWF0cml4WzNdLFxyXG5cdFx0XHRcdG1hdHJpeFs0XSxcclxuXHRcdFx0XHRtYXRyaXhbNV0sXHJcblx0XHRcdFx0bWF0cml4WzZdLFxyXG5cdFx0XHRcdG1hdHJpeFs3XSxcclxuXHRcdFx0XHRtYXRyaXhbOF0sXHJcblx0XHRcdFx0bWF0cml4WzldLFxyXG5cdFx0XHRcdG1hdHJpeFsxMF0sXHJcblx0XHRcdFx0bWF0cml4WzExXSxcclxuXHRcdFx0XHRtYXRyaXhbMTJdLFxyXG5cdFx0XHRcdG1hdHJpeFsxM10sXHJcblx0XHRcdFx0bWF0cml4WzE0XSxcclxuXHRcdFx0XHRtYXRyaXhbMTVdXHJcblx0XHRcdF07XHJcblx0XHR9XHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF07XHJcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbMV07XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl07XHJcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbM107XHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXhbNF07XHJcblx0XHRyZXN1bHRbNV0gPSBtYXRyaXhbNV07XHJcblx0XHRyZXN1bHRbNl0gPSBtYXRyaXhbNl07XHJcblx0XHRyZXN1bHRbN10gPSBtYXRyaXhbN107XHJcblx0XHRyZXN1bHRbOF0gPSBtYXRyaXhbOF07XHJcblx0XHRyZXN1bHRbOV0gPSBtYXRyaXhbOV07XHJcblx0XHRyZXN1bHRbMTBdID0gbWF0cml4WzEwXTtcclxuXHRcdHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdO1xyXG5cdFx0cmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07XHJcblx0XHRyZXN1bHRbMTNdID0gbWF0cml4WzEzXTtcclxuXHRcdHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdO1xyXG5cdFx0cmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldEVsZW1lbnRJbmRleChjb2x1bW46IG51bWJlciwgcm93OiBudW1iZXIpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIGNvbHVtbiAqIDQgKyByb3c7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0Q29sdW1uKG1hdHJpeDogTWF0cml4NCwgaW5kZXg6IG51bWJlciwgcmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcblx0XHRjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiA0O1xyXG5cdFx0Y29uc3QgeCA9IG1hdHJpeFtzdGFydEluZGV4XTtcclxuXHRcdGNvbnN0IHkgPSBtYXRyaXhbc3RhcnRJbmRleCArIDFdO1xyXG5cdFx0Y29uc3QgeiA9IG1hdHJpeFtzdGFydEluZGV4ICsgMl07XHJcblx0XHRjb25zdCB3ID0gbWF0cml4W3N0YXJ0SW5kZXggKyAzXTtcclxuXHJcblx0XHRyZXN1bHQueCA9IHg7XHJcblx0XHRyZXN1bHQueSA9IHk7XHJcblx0XHRyZXN1bHQueiA9IHo7XHJcblx0XHRyZXN1bHQudyA9IHc7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHNldENvbHVtbihtYXRyaXg6IE1hdHJpeDQsIGluZGV4OiBudW1iZXIsIGNhcnRlc2lhbjogVmVjdG9yNCwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRyZXN1bHQgPSBNYXRyaXg0LmNsb25lKG1hdHJpeCwgcmVzdWx0KTtcclxuXHRcdGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCAqIDQ7XHJcblx0XHRyZXN1bHRbc3RhcnRJbmRleF0gPSBjYXJ0ZXNpYW4ueDtcclxuXHRcdHJlc3VsdFtzdGFydEluZGV4ICsgMV0gPSBjYXJ0ZXNpYW4ueTtcclxuXHRcdHJlc3VsdFtzdGFydEluZGV4ICsgMl0gPSBjYXJ0ZXNpYW4uejtcclxuXHRcdHJlc3VsdFtzdGFydEluZGV4ICsgM10gPSBjYXJ0ZXNpYW4udztcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0Um93KG1hdHJpeDogTWF0cml4NCwgaW5kZXg6IG51bWJlciwgcmVzdWx0OiBWZWN0b3I0KTogVmVjdG9yNCB7XHJcblx0XHRjb25zdCB4ID0gbWF0cml4W2luZGV4XTtcclxuXHRcdGNvbnN0IHkgPSBtYXRyaXhbaW5kZXggKyA0XTtcclxuXHRcdGNvbnN0IHogPSBtYXRyaXhbaW5kZXggKyA4XTtcclxuXHRcdGNvbnN0IHcgPSBtYXRyaXhbaW5kZXggKyAxMl07XHJcblxyXG5cdFx0cmVzdWx0LnggPSB4O1xyXG5cdFx0cmVzdWx0LnkgPSB5O1xyXG5cdFx0cmVzdWx0LnogPSB6O1xyXG5cdFx0cmVzdWx0LncgPSB3O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBzZXRSb3cobWF0cml4OiBNYXRyaXg0LCBpbmRleDogbnVtYmVyLCBjYXJ0ZXNpYW46IFZlY3RvcjQsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0cmVzdWx0ID0gTWF0cml4NC5jbG9uZShtYXRyaXgsIHJlc3VsdCk7XHJcblx0XHRyZXN1bHRbaW5kZXhdID0gY2FydGVzaWFuLng7XHJcblx0XHRyZXN1bHRbaW5kZXggKyA0XSA9IGNhcnRlc2lhbi55O1xyXG5cdFx0cmVzdWx0W2luZGV4ICsgOF0gPSBjYXJ0ZXNpYW4uejtcclxuXHRcdHJlc3VsdFtpbmRleCArIDEyXSA9IGNhcnRlc2lhbi53O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBzZXRUcmFuc2xhdGlvbihtYXRyaXg6IE1hdHJpeDQsIHRyYW5zbGF0aW9uOiBWZWN0b3IzLCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXTtcclxuXHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXhbNF07XHJcblx0XHRyZXN1bHRbNV0gPSBtYXRyaXhbNV07XHJcblx0XHRyZXN1bHRbNl0gPSBtYXRyaXhbNl07XHJcblx0XHRyZXN1bHRbN10gPSBtYXRyaXhbN107XHJcblxyXG5cdFx0cmVzdWx0WzhdID0gbWF0cml4WzhdO1xyXG5cdFx0cmVzdWx0WzldID0gbWF0cml4WzldO1xyXG5cdFx0cmVzdWx0WzEwXSA9IG1hdHJpeFsxMF07XHJcblx0XHRyZXN1bHRbMTFdID0gbWF0cml4WzExXTtcclxuXHJcblx0XHRyZXN1bHRbMTJdID0gdHJhbnNsYXRpb24ueDtcclxuXHRcdHJlc3VsdFsxM10gPSB0cmFuc2xhdGlvbi55O1xyXG5cdFx0cmVzdWx0WzE0XSA9IHRyYW5zbGF0aW9uLno7XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHNldFNjYWxlKG1hdHJpeDogTWF0cml4NCwgc2NhbGU6IFZlY3RvcjMsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0Y29uc3QgZXhpc3RpbmdTY2FsZSA9IE1hdHJpeDQuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gxKTtcclxuXHRcdGNvbnN0IHNjYWxlUmF0aW9YID0gc2NhbGUueCAvIGV4aXN0aW5nU2NhbGUueDtcclxuXHRcdGNvbnN0IHNjYWxlUmF0aW9ZID0gc2NhbGUueSAvIGV4aXN0aW5nU2NhbGUueTtcclxuXHRcdGNvbnN0IHNjYWxlUmF0aW9aID0gc2NhbGUueiAvIGV4aXN0aW5nU2NhbGUuejtcclxuXHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZVJhdGlvWDtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlUmF0aW9YO1xyXG5cdFx0cmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGVSYXRpb1g7XHJcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbM107XHJcblxyXG5cdFx0cmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGVSYXRpb1k7XHJcblx0XHRyZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsZVJhdGlvWTtcclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeFs2XSAqIHNjYWxlUmF0aW9ZO1xyXG5cdFx0cmVzdWx0WzddID0gbWF0cml4WzddO1xyXG5cclxuXHRcdHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxlUmF0aW9aO1xyXG5cdFx0cmVzdWx0WzldID0gbWF0cml4WzldICogc2NhbGVSYXRpb1o7XHJcblx0XHRyZXN1bHRbMTBdID0gbWF0cml4WzEwXSAqIHNjYWxlUmF0aW9aO1xyXG5cdFx0cmVzdWx0WzExXSA9IG1hdHJpeFsxMV07XHJcblxyXG5cdFx0cmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07XHJcblx0XHRyZXN1bHRbMTNdID0gbWF0cml4WzEzXTtcclxuXHRcdHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdO1xyXG5cdFx0cmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRTY2FsZShtYXRyaXg6IE1hdHJpeDQsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0cmVzdWx0LnggPSBWZWN0b3IzLm1hZ25pdHVkZShWZWN0b3IzLmZyb21FbGVtZW50cyhtYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBzY3JhdGNoQ29sdW1uKSk7XHJcblx0XHRyZXN1bHQueSA9IFZlY3RvcjMubWFnbml0dWRlKFZlY3RvcjMuZnJvbUVsZW1lbnRzKG1hdHJpeFs0XSwgbWF0cml4WzVdLCBtYXRyaXhbNl0sIHNjcmF0Y2hDb2x1bW4pKTtcclxuXHRcdHJlc3VsdC56ID0gVmVjdG9yMy5tYWduaXR1ZGUoVmVjdG9yMy5mcm9tRWxlbWVudHMobWF0cml4WzhdLCBtYXRyaXhbOV0sIG1hdHJpeFsxMF0sIHNjcmF0Y2hDb2x1bW4pKTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0TWF4aW11bVNjYWxlKG1hdHJpeDogTWF0cml4NCk6IG51bWJlciB7XHJcblx0XHRNYXRyaXg0LmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoMyk7XHJcblx0XHRyZXR1cm4gVmVjdG9yMy5tYXhpbXVtQ29tcG9uZW50KHNjYWxlU2NyYXRjaDMpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHNldFJvdGF0aW9uKG1hdHJpeDogTWF0cml4NCwgcm90YXRpb246IE1hdHJpeDMsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRyaXg0LmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoNCk7XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gcm90YXRpb25bMF0gKiBzY2FsZS54O1xyXG5cdFx0cmVzdWx0WzFdID0gcm90YXRpb25bMV0gKiBzY2FsZS54O1xyXG5cdFx0cmVzdWx0WzJdID0gcm90YXRpb25bMl0gKiBzY2FsZS54O1xyXG5cdFx0cmVzdWx0WzNdID0gbWF0cml4WzNdO1xyXG5cclxuXHRcdHJlc3VsdFs0XSA9IHJvdGF0aW9uWzNdICogc2NhbGUueTtcclxuXHRcdHJlc3VsdFs1XSA9IHJvdGF0aW9uWzRdICogc2NhbGUueTtcclxuXHRcdHJlc3VsdFs2XSA9IHJvdGF0aW9uWzVdICogc2NhbGUueTtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFs3XTtcclxuXHJcblx0XHRyZXN1bHRbOF0gPSByb3RhdGlvbls2XSAqIHNjYWxlLno7XHJcblx0XHRyZXN1bHRbOV0gPSByb3RhdGlvbls3XSAqIHNjYWxlLno7XHJcblx0XHRyZXN1bHRbMTBdID0gcm90YXRpb25bOF0gKiBzY2FsZS56O1xyXG5cdFx0cmVzdWx0WzExXSA9IG1hdHJpeFsxMV07XHJcblxyXG5cdFx0cmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07XHJcblx0XHRyZXN1bHRbMTNdID0gbWF0cml4WzEzXTtcclxuXHRcdHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdO1xyXG5cdFx0cmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRSb3RhdGlvbihtYXRyaXg6IE1hdHJpeDQsIHJlc3VsdDogTWF0cml4Myk6IE1hdHJpeDMge1xyXG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRyaXg0LmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoNSk7XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gbWF0cml4WzBdIC8gc2NhbGUueDtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAvIHNjYWxlLng7XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl0gLyBzY2FsZS54O1xyXG5cclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFs0XSAvIHNjYWxlLnk7XHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXhbNV0gLyBzY2FsZS55O1xyXG5cdFx0cmVzdWx0WzVdID0gbWF0cml4WzZdIC8gc2NhbGUueTtcclxuXHJcblx0XHRyZXN1bHRbNl0gPSBtYXRyaXhbOF0gLyBzY2FsZS56O1xyXG5cdFx0cmVzdWx0WzddID0gbWF0cml4WzldIC8gc2NhbGUuejtcclxuXHRcdHJlc3VsdFs4XSA9IG1hdHJpeFsxMF0gLyBzY2FsZS56O1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHkobGVmdDogTWF0cml4NCwgcmlnaHQ6IE1hdHJpeDQsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0Y29uc3QgbGVmdDAgPSBsZWZ0WzBdO1xyXG5cdFx0Y29uc3QgbGVmdDEgPSBsZWZ0WzFdO1xyXG5cdFx0Y29uc3QgbGVmdDIgPSBsZWZ0WzJdO1xyXG5cdFx0Y29uc3QgbGVmdDMgPSBsZWZ0WzNdO1xyXG5cdFx0Y29uc3QgbGVmdDQgPSBsZWZ0WzRdO1xyXG5cdFx0Y29uc3QgbGVmdDUgPSBsZWZ0WzVdO1xyXG5cdFx0Y29uc3QgbGVmdDYgPSBsZWZ0WzZdO1xyXG5cdFx0Y29uc3QgbGVmdDcgPSBsZWZ0WzddO1xyXG5cdFx0Y29uc3QgbGVmdDggPSBsZWZ0WzhdO1xyXG5cdFx0Y29uc3QgbGVmdDkgPSBsZWZ0WzldO1xyXG5cdFx0Y29uc3QgbGVmdDEwID0gbGVmdFsxMF07XHJcblx0XHRjb25zdCBsZWZ0MTEgPSBsZWZ0WzExXTtcclxuXHRcdGNvbnN0IGxlZnQxMiA9IGxlZnRbMTJdO1xyXG5cdFx0Y29uc3QgbGVmdDEzID0gbGVmdFsxM107XHJcblx0XHRjb25zdCBsZWZ0MTQgPSBsZWZ0WzE0XTtcclxuXHRcdGNvbnN0IGxlZnQxNSA9IGxlZnRbMTVdO1xyXG5cclxuXHRcdGNvbnN0IHJpZ2h0MCA9IHJpZ2h0WzBdO1xyXG5cdFx0Y29uc3QgcmlnaHQxID0gcmlnaHRbMV07XHJcblx0XHRjb25zdCByaWdodDIgPSByaWdodFsyXTtcclxuXHRcdGNvbnN0IHJpZ2h0MyA9IHJpZ2h0WzNdO1xyXG5cdFx0Y29uc3QgcmlnaHQ0ID0gcmlnaHRbNF07XHJcblx0XHRjb25zdCByaWdodDUgPSByaWdodFs1XTtcclxuXHRcdGNvbnN0IHJpZ2h0NiA9IHJpZ2h0WzZdO1xyXG5cdFx0Y29uc3QgcmlnaHQ3ID0gcmlnaHRbN107XHJcblx0XHRjb25zdCByaWdodDggPSByaWdodFs4XTtcclxuXHRcdGNvbnN0IHJpZ2h0OSA9IHJpZ2h0WzldO1xyXG5cdFx0Y29uc3QgcmlnaHQxMCA9IHJpZ2h0WzEwXTtcclxuXHRcdGNvbnN0IHJpZ2h0MTEgPSByaWdodFsxMV07XHJcblx0XHRjb25zdCByaWdodDEyID0gcmlnaHRbMTJdO1xyXG5cdFx0Y29uc3QgcmlnaHQxMyA9IHJpZ2h0WzEzXTtcclxuXHRcdGNvbnN0IHJpZ2h0MTQgPSByaWdodFsxNF07XHJcblx0XHRjb25zdCByaWdodDE1ID0gcmlnaHRbMTVdO1xyXG5cclxuXHRcdGNvbnN0IGNvbHVtbjBSb3cwID0gbGVmdDAgKiByaWdodDAgKyBsZWZ0NCAqIHJpZ2h0MSArIGxlZnQ4ICogcmlnaHQyICsgbGVmdDEyICogcmlnaHQzO1xyXG5cdFx0Y29uc3QgY29sdW1uMFJvdzEgPSBsZWZ0MSAqIHJpZ2h0MCArIGxlZnQ1ICogcmlnaHQxICsgbGVmdDkgKiByaWdodDIgKyBsZWZ0MTMgKiByaWdodDM7XHJcblx0XHRjb25zdCBjb2x1bW4wUm93MiA9IGxlZnQyICogcmlnaHQwICsgbGVmdDYgKiByaWdodDEgKyBsZWZ0MTAgKiByaWdodDIgKyBsZWZ0MTQgKiByaWdodDM7XHJcblx0XHRjb25zdCBjb2x1bW4wUm93MyA9IGxlZnQzICogcmlnaHQwICsgbGVmdDcgKiByaWdodDEgKyBsZWZ0MTEgKiByaWdodDIgKyBsZWZ0MTUgKiByaWdodDM7XHJcblxyXG5cdFx0Y29uc3QgY29sdW1uMVJvdzAgPSBsZWZ0MCAqIHJpZ2h0NCArIGxlZnQ0ICogcmlnaHQ1ICsgbGVmdDggKiByaWdodDYgKyBsZWZ0MTIgKiByaWdodDc7XHJcblx0XHRjb25zdCBjb2x1bW4xUm93MSA9IGxlZnQxICogcmlnaHQ0ICsgbGVmdDUgKiByaWdodDUgKyBsZWZ0OSAqIHJpZ2h0NiArIGxlZnQxMyAqIHJpZ2h0NztcclxuXHRcdGNvbnN0IGNvbHVtbjFSb3cyID0gbGVmdDIgKiByaWdodDQgKyBsZWZ0NiAqIHJpZ2h0NSArIGxlZnQxMCAqIHJpZ2h0NiArIGxlZnQxNCAqIHJpZ2h0NztcclxuXHRcdGNvbnN0IGNvbHVtbjFSb3czID0gbGVmdDMgKiByaWdodDQgKyBsZWZ0NyAqIHJpZ2h0NSArIGxlZnQxMSAqIHJpZ2h0NiArIGxlZnQxNSAqIHJpZ2h0NztcclxuXHJcblx0XHRjb25zdCBjb2x1bW4yUm93MCA9IGxlZnQwICogcmlnaHQ4ICsgbGVmdDQgKiByaWdodDkgKyBsZWZ0OCAqIHJpZ2h0MTAgKyBsZWZ0MTIgKiByaWdodDExO1xyXG5cdFx0Y29uc3QgY29sdW1uMlJvdzEgPSBsZWZ0MSAqIHJpZ2h0OCArIGxlZnQ1ICogcmlnaHQ5ICsgbGVmdDkgKiByaWdodDEwICsgbGVmdDEzICogcmlnaHQxMTtcclxuXHRcdGNvbnN0IGNvbHVtbjJSb3cyID0gbGVmdDIgKiByaWdodDggKyBsZWZ0NiAqIHJpZ2h0OSArIGxlZnQxMCAqIHJpZ2h0MTAgKyBsZWZ0MTQgKiByaWdodDExO1xyXG5cdFx0Y29uc3QgY29sdW1uMlJvdzMgPSBsZWZ0MyAqIHJpZ2h0OCArIGxlZnQ3ICogcmlnaHQ5ICsgbGVmdDExICogcmlnaHQxMCArIGxlZnQxNSAqIHJpZ2h0MTE7XHJcblxyXG5cdFx0Y29uc3QgY29sdW1uM1JvdzAgPSBsZWZ0MCAqIHJpZ2h0MTIgKyBsZWZ0NCAqIHJpZ2h0MTMgKyBsZWZ0OCAqIHJpZ2h0MTQgKyBsZWZ0MTIgKiByaWdodDE1O1xyXG5cdFx0Y29uc3QgY29sdW1uM1JvdzEgPSBsZWZ0MSAqIHJpZ2h0MTIgKyBsZWZ0NSAqIHJpZ2h0MTMgKyBsZWZ0OSAqIHJpZ2h0MTQgKyBsZWZ0MTMgKiByaWdodDE1O1xyXG5cdFx0Y29uc3QgY29sdW1uM1JvdzIgPSBsZWZ0MiAqIHJpZ2h0MTIgKyBsZWZ0NiAqIHJpZ2h0MTMgKyBsZWZ0MTAgKiByaWdodDE0ICsgbGVmdDE0ICogcmlnaHQxNTtcclxuXHRcdGNvbnN0IGNvbHVtbjNSb3czID0gbGVmdDMgKiByaWdodDEyICsgbGVmdDcgKiByaWdodDEzICsgbGVmdDExICogcmlnaHQxNCArIGxlZnQxNSAqIHJpZ2h0MTU7XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gY29sdW1uMFJvdzA7XHJcblx0XHRyZXN1bHRbMV0gPSBjb2x1bW4wUm93MTtcclxuXHRcdHJlc3VsdFsyXSA9IGNvbHVtbjBSb3cyO1xyXG5cdFx0cmVzdWx0WzNdID0gY29sdW1uMFJvdzM7XHJcblx0XHRyZXN1bHRbNF0gPSBjb2x1bW4xUm93MDtcclxuXHRcdHJlc3VsdFs1XSA9IGNvbHVtbjFSb3cxO1xyXG5cdFx0cmVzdWx0WzZdID0gY29sdW1uMVJvdzI7XHJcblx0XHRyZXN1bHRbN10gPSBjb2x1bW4xUm93MztcclxuXHRcdHJlc3VsdFs4XSA9IGNvbHVtbjJSb3cwO1xyXG5cdFx0cmVzdWx0WzldID0gY29sdW1uMlJvdzE7XHJcblx0XHRyZXN1bHRbMTBdID0gY29sdW1uMlJvdzI7XHJcblx0XHRyZXN1bHRbMTFdID0gY29sdW1uMlJvdzM7XHJcblx0XHRyZXN1bHRbMTJdID0gY29sdW1uM1JvdzA7XHJcblx0XHRyZXN1bHRbMTNdID0gY29sdW1uM1JvdzE7XHJcblx0XHRyZXN1bHRbMTRdID0gY29sdW1uM1JvdzI7XHJcblx0XHRyZXN1bHRbMTVdID0gY29sdW1uM1JvdzM7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGFkZChsZWZ0OiBNYXRyaXg0LCByaWdodDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRyZXN1bHRbMF0gPSBsZWZ0WzBdICsgcmlnaHRbMF07XHJcblx0XHRyZXN1bHRbMV0gPSBsZWZ0WzFdICsgcmlnaHRbMV07XHJcblx0XHRyZXN1bHRbMl0gPSBsZWZ0WzJdICsgcmlnaHRbMl07XHJcblx0XHRyZXN1bHRbM10gPSBsZWZ0WzNdICsgcmlnaHRbM107XHJcblx0XHRyZXN1bHRbNF0gPSBsZWZ0WzRdICsgcmlnaHRbNF07XHJcblx0XHRyZXN1bHRbNV0gPSBsZWZ0WzVdICsgcmlnaHRbNV07XHJcblx0XHRyZXN1bHRbNl0gPSBsZWZ0WzZdICsgcmlnaHRbNl07XHJcblx0XHRyZXN1bHRbN10gPSBsZWZ0WzddICsgcmlnaHRbN107XHJcblx0XHRyZXN1bHRbOF0gPSBsZWZ0WzhdICsgcmlnaHRbOF07XHJcblx0XHRyZXN1bHRbOV0gPSBsZWZ0WzldICsgcmlnaHRbOV07XHJcblx0XHRyZXN1bHRbMTBdID0gbGVmdFsxMF0gKyByaWdodFsxMF07XHJcblx0XHRyZXN1bHRbMTFdID0gbGVmdFsxMV0gKyByaWdodFsxMV07XHJcblx0XHRyZXN1bHRbMTJdID0gbGVmdFsxMl0gKyByaWdodFsxMl07XHJcblx0XHRyZXN1bHRbMTNdID0gbGVmdFsxM10gKyByaWdodFsxM107XHJcblx0XHRyZXN1bHRbMTRdID0gbGVmdFsxNF0gKyByaWdodFsxNF07XHJcblx0XHRyZXN1bHRbMTVdID0gbGVmdFsxNV0gKyByaWdodFsxNV07XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHN1YnRyYWN0KGxlZnQ6IE1hdHJpeDQsIHJpZ2h0OiBNYXRyaXg0LCByZXN1bHQ6IE1hdHJpeDQpIHtcclxuXHRcdHJlc3VsdFswXSA9IGxlZnRbMF0gLSByaWdodFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IGxlZnRbMV0gLSByaWdodFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IGxlZnRbMl0gLSByaWdodFsyXTtcclxuXHRcdHJlc3VsdFszXSA9IGxlZnRbM10gLSByaWdodFszXTtcclxuXHRcdHJlc3VsdFs0XSA9IGxlZnRbNF0gLSByaWdodFs0XTtcclxuXHRcdHJlc3VsdFs1XSA9IGxlZnRbNV0gLSByaWdodFs1XTtcclxuXHRcdHJlc3VsdFs2XSA9IGxlZnRbNl0gLSByaWdodFs2XTtcclxuXHRcdHJlc3VsdFs3XSA9IGxlZnRbN10gLSByaWdodFs3XTtcclxuXHRcdHJlc3VsdFs4XSA9IGxlZnRbOF0gLSByaWdodFs4XTtcclxuXHRcdHJlc3VsdFs5XSA9IGxlZnRbOV0gLSByaWdodFs5XTtcclxuXHRcdHJlc3VsdFsxMF0gPSBsZWZ0WzEwXSAtIHJpZ2h0WzEwXTtcclxuXHRcdHJlc3VsdFsxMV0gPSBsZWZ0WzExXSAtIHJpZ2h0WzExXTtcclxuXHRcdHJlc3VsdFsxMl0gPSBsZWZ0WzEyXSAtIHJpZ2h0WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSBsZWZ0WzEzXSAtIHJpZ2h0WzEzXTtcclxuXHRcdHJlc3VsdFsxNF0gPSBsZWZ0WzE0XSAtIHJpZ2h0WzE0XTtcclxuXHRcdHJlc3VsdFsxNV0gPSBsZWZ0WzE1XSAtIHJpZ2h0WzE1XTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlUcmFuc2Zvcm1hdGlvbihsZWZ0OiBNYXRyaXg0LCByaWdodDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRjb25zdCBsZWZ0MCA9IGxlZnRbMF07XHJcblx0XHRjb25zdCBsZWZ0MSA9IGxlZnRbMV07XHJcblx0XHRjb25zdCBsZWZ0MiA9IGxlZnRbMl07XHJcblx0XHRjb25zdCBsZWZ0NCA9IGxlZnRbNF07XHJcblx0XHRjb25zdCBsZWZ0NSA9IGxlZnRbNV07XHJcblx0XHRjb25zdCBsZWZ0NiA9IGxlZnRbNl07XHJcblx0XHRjb25zdCBsZWZ0OCA9IGxlZnRbOF07XHJcblx0XHRjb25zdCBsZWZ0OSA9IGxlZnRbOV07XHJcblx0XHRjb25zdCBsZWZ0MTAgPSBsZWZ0WzEwXTtcclxuXHRcdGNvbnN0IGxlZnQxMiA9IGxlZnRbMTJdO1xyXG5cdFx0Y29uc3QgbGVmdDEzID0gbGVmdFsxM107XHJcblx0XHRjb25zdCBsZWZ0MTQgPSBsZWZ0WzE0XTtcclxuXHJcblx0XHRjb25zdCByaWdodDAgPSByaWdodFswXTtcclxuXHRcdGNvbnN0IHJpZ2h0MSA9IHJpZ2h0WzFdO1xyXG5cdFx0Y29uc3QgcmlnaHQyID0gcmlnaHRbMl07XHJcblx0XHRjb25zdCByaWdodDQgPSByaWdodFs0XTtcclxuXHRcdGNvbnN0IHJpZ2h0NSA9IHJpZ2h0WzVdO1xyXG5cdFx0Y29uc3QgcmlnaHQ2ID0gcmlnaHRbNl07XHJcblx0XHRjb25zdCByaWdodDggPSByaWdodFs4XTtcclxuXHRcdGNvbnN0IHJpZ2h0OSA9IHJpZ2h0WzldO1xyXG5cdFx0Y29uc3QgcmlnaHQxMCA9IHJpZ2h0WzEwXTtcclxuXHRcdGNvbnN0IHJpZ2h0MTIgPSByaWdodFsxMl07XHJcblx0XHRjb25zdCByaWdodDEzID0gcmlnaHRbMTNdO1xyXG5cdFx0Y29uc3QgcmlnaHQxNCA9IHJpZ2h0WzE0XTtcclxuXHJcblx0XHRjb25zdCBjb2x1bW4wUm93MCA9IGxlZnQwICogcmlnaHQwICsgbGVmdDQgKiByaWdodDEgKyBsZWZ0OCAqIHJpZ2h0MjtcclxuXHRcdGNvbnN0IGNvbHVtbjBSb3cxID0gbGVmdDEgKiByaWdodDAgKyBsZWZ0NSAqIHJpZ2h0MSArIGxlZnQ5ICogcmlnaHQyO1xyXG5cdFx0Y29uc3QgY29sdW1uMFJvdzIgPSBsZWZ0MiAqIHJpZ2h0MCArIGxlZnQ2ICogcmlnaHQxICsgbGVmdDEwICogcmlnaHQyO1xyXG5cclxuXHRcdGNvbnN0IGNvbHVtbjFSb3cwID0gbGVmdDAgKiByaWdodDQgKyBsZWZ0NCAqIHJpZ2h0NSArIGxlZnQ4ICogcmlnaHQ2O1xyXG5cdFx0Y29uc3QgY29sdW1uMVJvdzEgPSBsZWZ0MSAqIHJpZ2h0NCArIGxlZnQ1ICogcmlnaHQ1ICsgbGVmdDkgKiByaWdodDY7XHJcblx0XHRjb25zdCBjb2x1bW4xUm93MiA9IGxlZnQyICogcmlnaHQ0ICsgbGVmdDYgKiByaWdodDUgKyBsZWZ0MTAgKiByaWdodDY7XHJcblxyXG5cdFx0Y29uc3QgY29sdW1uMlJvdzAgPSBsZWZ0MCAqIHJpZ2h0OCArIGxlZnQ0ICogcmlnaHQ5ICsgbGVmdDggKiByaWdodDEwO1xyXG5cdFx0Y29uc3QgY29sdW1uMlJvdzEgPSBsZWZ0MSAqIHJpZ2h0OCArIGxlZnQ1ICogcmlnaHQ5ICsgbGVmdDkgKiByaWdodDEwO1xyXG5cdFx0Y29uc3QgY29sdW1uMlJvdzIgPSBsZWZ0MiAqIHJpZ2h0OCArIGxlZnQ2ICogcmlnaHQ5ICsgbGVmdDEwICogcmlnaHQxMDtcclxuXHJcblx0XHRjb25zdCBjb2x1bW4zUm93MCA9IGxlZnQwICogcmlnaHQxMiArIGxlZnQ0ICogcmlnaHQxMyArIGxlZnQ4ICogcmlnaHQxNCArIGxlZnQxMjtcclxuXHRcdGNvbnN0IGNvbHVtbjNSb3cxID0gbGVmdDEgKiByaWdodDEyICsgbGVmdDUgKiByaWdodDEzICsgbGVmdDkgKiByaWdodDE0ICsgbGVmdDEzO1xyXG5cdFx0Y29uc3QgY29sdW1uM1JvdzIgPSBsZWZ0MiAqIHJpZ2h0MTIgKyBsZWZ0NiAqIHJpZ2h0MTMgKyBsZWZ0MTAgKiByaWdodDE0ICsgbGVmdDE0O1xyXG5cclxuXHRcdHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwO1xyXG5cdFx0cmVzdWx0WzFdID0gY29sdW1uMFJvdzE7XHJcblx0XHRyZXN1bHRbMl0gPSBjb2x1bW4wUm93MjtcclxuXHRcdHJlc3VsdFszXSA9IDAuMDtcclxuXHRcdHJlc3VsdFs0XSA9IGNvbHVtbjFSb3cwO1xyXG5cdFx0cmVzdWx0WzVdID0gY29sdW1uMVJvdzE7XHJcblx0XHRyZXN1bHRbNl0gPSBjb2x1bW4xUm93MjtcclxuXHRcdHJlc3VsdFs3XSA9IDAuMDtcclxuXHRcdHJlc3VsdFs4XSA9IGNvbHVtbjJSb3cwO1xyXG5cdFx0cmVzdWx0WzldID0gY29sdW1uMlJvdzE7XHJcblx0XHRyZXN1bHRbMTBdID0gY29sdW1uMlJvdzI7XHJcblx0XHRyZXN1bHRbMTFdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzEyXSA9IGNvbHVtbjNSb3cwO1xyXG5cdFx0cmVzdWx0WzEzXSA9IGNvbHVtbjNSb3cxO1xyXG5cdFx0cmVzdWx0WzE0XSA9IGNvbHVtbjNSb3cyO1xyXG5cdFx0cmVzdWx0WzE1XSA9IDEuMDtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlCeU1hdHJpeDMobWF0cml4OiBNYXRyaXg0LCByb3RhdGlvbjogTWF0cml4MywgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRjb25zdCBsZWZ0MCA9IG1hdHJpeFswXTtcclxuXHRcdGNvbnN0IGxlZnQxID0gbWF0cml4WzFdO1xyXG5cdFx0Y29uc3QgbGVmdDIgPSBtYXRyaXhbMl07XHJcblx0XHRjb25zdCBsZWZ0NCA9IG1hdHJpeFs0XTtcclxuXHRcdGNvbnN0IGxlZnQ1ID0gbWF0cml4WzVdO1xyXG5cdFx0Y29uc3QgbGVmdDYgPSBtYXRyaXhbNl07XHJcblx0XHRjb25zdCBsZWZ0OCA9IG1hdHJpeFs4XTtcclxuXHRcdGNvbnN0IGxlZnQ5ID0gbWF0cml4WzldO1xyXG5cdFx0Y29uc3QgbGVmdDEwID0gbWF0cml4WzEwXTtcclxuXHJcblx0XHRjb25zdCByaWdodDAgPSByb3RhdGlvblswXTtcclxuXHRcdGNvbnN0IHJpZ2h0MSA9IHJvdGF0aW9uWzFdO1xyXG5cdFx0Y29uc3QgcmlnaHQyID0gcm90YXRpb25bMl07XHJcblx0XHRjb25zdCByaWdodDQgPSByb3RhdGlvblszXTtcclxuXHRcdGNvbnN0IHJpZ2h0NSA9IHJvdGF0aW9uWzRdO1xyXG5cdFx0Y29uc3QgcmlnaHQ2ID0gcm90YXRpb25bNV07XHJcblx0XHRjb25zdCByaWdodDggPSByb3RhdGlvbls2XTtcclxuXHRcdGNvbnN0IHJpZ2h0OSA9IHJvdGF0aW9uWzddO1xyXG5cdFx0Y29uc3QgcmlnaHQxMCA9IHJvdGF0aW9uWzhdO1xyXG5cclxuXHRcdGNvbnN0IGNvbHVtbjBSb3cwID0gbGVmdDAgKiByaWdodDAgKyBsZWZ0NCAqIHJpZ2h0MSArIGxlZnQ4ICogcmlnaHQyO1xyXG5cdFx0Y29uc3QgY29sdW1uMFJvdzEgPSBsZWZ0MSAqIHJpZ2h0MCArIGxlZnQ1ICogcmlnaHQxICsgbGVmdDkgKiByaWdodDI7XHJcblx0XHRjb25zdCBjb2x1bW4wUm93MiA9IGxlZnQyICogcmlnaHQwICsgbGVmdDYgKiByaWdodDEgKyBsZWZ0MTAgKiByaWdodDI7XHJcblxyXG5cdFx0Y29uc3QgY29sdW1uMVJvdzAgPSBsZWZ0MCAqIHJpZ2h0NCArIGxlZnQ0ICogcmlnaHQ1ICsgbGVmdDggKiByaWdodDY7XHJcblx0XHRjb25zdCBjb2x1bW4xUm93MSA9IGxlZnQxICogcmlnaHQ0ICsgbGVmdDUgKiByaWdodDUgKyBsZWZ0OSAqIHJpZ2h0NjtcclxuXHRcdGNvbnN0IGNvbHVtbjFSb3cyID0gbGVmdDIgKiByaWdodDQgKyBsZWZ0NiAqIHJpZ2h0NSArIGxlZnQxMCAqIHJpZ2h0NjtcclxuXHJcblx0XHRjb25zdCBjb2x1bW4yUm93MCA9IGxlZnQwICogcmlnaHQ4ICsgbGVmdDQgKiByaWdodDkgKyBsZWZ0OCAqIHJpZ2h0MTA7XHJcblx0XHRjb25zdCBjb2x1bW4yUm93MSA9IGxlZnQxICogcmlnaHQ4ICsgbGVmdDUgKiByaWdodDkgKyBsZWZ0OSAqIHJpZ2h0MTA7XHJcblx0XHRjb25zdCBjb2x1bW4yUm93MiA9IGxlZnQyICogcmlnaHQ4ICsgbGVmdDYgKiByaWdodDkgKyBsZWZ0MTAgKiByaWdodDEwO1xyXG5cclxuXHRcdHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwO1xyXG5cdFx0cmVzdWx0WzFdID0gY29sdW1uMFJvdzE7XHJcblx0XHRyZXN1bHRbMl0gPSBjb2x1bW4wUm93MjtcclxuXHRcdHJlc3VsdFszXSA9IDAuMDtcclxuXHRcdHJlc3VsdFs0XSA9IGNvbHVtbjFSb3cwO1xyXG5cdFx0cmVzdWx0WzVdID0gY29sdW1uMVJvdzE7XHJcblx0XHRyZXN1bHRbNl0gPSBjb2x1bW4xUm93MjtcclxuXHRcdHJlc3VsdFs3XSA9IDAuMDtcclxuXHRcdHJlc3VsdFs4XSA9IGNvbHVtbjJSb3cwO1xyXG5cdFx0cmVzdWx0WzldID0gY29sdW1uMlJvdzE7XHJcblx0XHRyZXN1bHRbMTBdID0gY29sdW1uMlJvdzI7XHJcblx0XHRyZXN1bHRbMTFdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07XHJcblx0XHRyZXN1bHRbMTNdID0gbWF0cml4WzEzXTtcclxuXHRcdHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdO1xyXG5cdFx0cmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG11bHRpcGx5QnlUcmFuc2xhdGlvbihtYXRyaXg6IE1hdHJpeDQsIHRyYW5zbGF0aW9uOiBWZWN0b3IzLCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdGNvbnN0IHggPSB0cmFuc2xhdGlvbi54O1xyXG5cdFx0Y29uc3QgeSA9IHRyYW5zbGF0aW9uLnk7XHJcblx0XHRjb25zdCB6ID0gdHJhbnNsYXRpb24uejtcclxuXHJcblx0XHRjb25zdCB0eCA9IHggKiBtYXRyaXhbMF0gKyB5ICogbWF0cml4WzRdICsgeiAqIG1hdHJpeFs4XSArIG1hdHJpeFsxMl07XHJcblx0XHRjb25zdCB0eSA9IHggKiBtYXRyaXhbMV0gKyB5ICogbWF0cml4WzVdICsgeiAqIG1hdHJpeFs5XSArIG1hdHJpeFsxM107XHJcblx0XHRjb25zdCB0eiA9IHggKiBtYXRyaXhbMl0gKyB5ICogbWF0cml4WzZdICsgeiAqIG1hdHJpeFsxMF0gKyBtYXRyaXhbMTRdO1xyXG5cclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IG1hdHJpeFsyXTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXTtcclxuXHRcdHJlc3VsdFs0XSA9IG1hdHJpeFs0XTtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeFs1XTtcclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeFs2XTtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFs3XTtcclxuXHRcdHJlc3VsdFs4XSA9IG1hdHJpeFs4XTtcclxuXHRcdHJlc3VsdFs5XSA9IG1hdHJpeFs5XTtcclxuXHRcdHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdO1xyXG5cdFx0cmVzdWx0WzExXSA9IG1hdHJpeFsxMV07XHJcblx0XHRyZXN1bHRbMTJdID0gdHg7XHJcblx0XHRyZXN1bHRbMTNdID0gdHk7XHJcblx0XHRyZXN1bHRbMTRdID0gdHo7XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbXVsdGlwbHlCeVNjYWxlKG1hdHJpeDogTWF0cml4NCwgc2NhbGU6IFZlY3RvcjMsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0Y29uc3Qgc2NhbGVYID0gc2NhbGUueDtcclxuXHRcdGNvbnN0IHNjYWxlWSA9IHNjYWxlLnk7XHJcblx0XHRjb25zdCBzY2FsZVogPSBzY2FsZS56O1xyXG5cclxuXHRcdC8vIEZhc3RlciB0aGFuIFZlY3RvcjMuZXF1YWxzXHJcblx0XHRpZiAoc2NhbGVYID09PSAxLjAgJiYgc2NhbGVZID09PSAxLjAgJiYgc2NhbGVaID09PSAxLjApIHtcclxuXHRcdFx0cmV0dXJuIE1hdHJpeDQuY2xvbmUobWF0cml4LCByZXN1bHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJlc3VsdFswXSA9IHNjYWxlWCAqIG1hdHJpeFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IHNjYWxlWCAqIG1hdHJpeFsxXTtcclxuXHRcdHJlc3VsdFsyXSA9IHNjYWxlWCAqIG1hdHJpeFsyXTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXTtcclxuXHJcblx0XHRyZXN1bHRbNF0gPSBzY2FsZVkgKiBtYXRyaXhbNF07XHJcblx0XHRyZXN1bHRbNV0gPSBzY2FsZVkgKiBtYXRyaXhbNV07XHJcblx0XHRyZXN1bHRbNl0gPSBzY2FsZVkgKiBtYXRyaXhbNl07XHJcblx0XHRyZXN1bHRbN10gPSBtYXRyaXhbN107XHJcblxyXG5cdFx0cmVzdWx0WzhdID0gc2NhbGVaICogbWF0cml4WzhdO1xyXG5cdFx0cmVzdWx0WzldID0gc2NhbGVaICogbWF0cml4WzldO1xyXG5cdFx0cmVzdWx0WzEwXSA9IHNjYWxlWiAqIG1hdHJpeFsxMF07XHJcblx0XHRyZXN1bHRbMTFdID0gbWF0cml4WzExXTtcclxuXHJcblx0XHRyZXN1bHRbMTJdID0gbWF0cml4WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdO1xyXG5cdFx0cmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG11bHRpcGx5QnlVbmlmb3JtU2NhbGUobWF0cml4OiBNYXRyaXg0LCBzY2FsZTogbnVtYmVyLCByZXN1bHQ6IE1hdHJpeDQpOiBNYXRyaXg0IHtcclxuXHRcdHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlO1xyXG5cdFx0cmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGU7XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZTtcclxuXHRcdHJlc3VsdFszXSA9IG1hdHJpeFszXTtcclxuXHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsZTtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxlO1xyXG5cdFx0cmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGU7XHJcblx0XHRyZXN1bHRbN10gPSBtYXRyaXhbN107XHJcblxyXG5cdFx0cmVzdWx0WzhdID0gbWF0cml4WzhdICogc2NhbGU7XHJcblx0XHRyZXN1bHRbOV0gPSBtYXRyaXhbOV0gKiBzY2FsZTtcclxuXHRcdHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdICogc2NhbGU7XHJcblx0XHRyZXN1bHRbMTFdID0gbWF0cml4WzExXTtcclxuXHJcblx0XHRyZXN1bHRbMTJdID0gbWF0cml4WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdO1xyXG5cdFx0cmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07XHJcblx0XHRyZXN1bHRbMTVdID0gbWF0cml4WzE1XTtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG11bHRpcGx5QnlWZWN0b3IobWF0cml4OiBNYXRyaXg0LCBjYXJ0ZXNpYW46IFZlY3RvcjQsIHJlc3VsdDogVmVjdG9yNCk6IFZlY3RvcjQge1xyXG5cdFx0Y29uc3QgdlggPSBjYXJ0ZXNpYW4ueDtcclxuXHRcdGNvbnN0IHZZID0gY2FydGVzaWFuLnk7XHJcblx0XHRjb25zdCB2WiA9IGNhcnRlc2lhbi56O1xyXG5cdFx0Y29uc3QgdlcgPSBjYXJ0ZXNpYW4udztcclxuXHJcblx0XHRjb25zdCB4ID0gbWF0cml4WzBdICogdlggKyBtYXRyaXhbNF0gKiB2WSArIG1hdHJpeFs4XSAqIHZaICsgbWF0cml4WzEyXSAqIHZXO1xyXG5cdFx0Y29uc3QgeSA9IG1hdHJpeFsxXSAqIHZYICsgbWF0cml4WzVdICogdlkgKyBtYXRyaXhbOV0gKiB2WiArIG1hdHJpeFsxM10gKiB2VztcclxuXHRcdGNvbnN0IHogPSBtYXRyaXhbMl0gKiB2WCArIG1hdHJpeFs2XSAqIHZZICsgbWF0cml4WzEwXSAqIHZaICsgbWF0cml4WzE0XSAqIHZXO1xyXG5cdFx0Y29uc3QgdyA9IG1hdHJpeFszXSAqIHZYICsgbWF0cml4WzddICogdlkgKyBtYXRyaXhbMTFdICogdlogKyBtYXRyaXhbMTVdICogdlc7XHJcblxyXG5cdFx0cmVzdWx0LnggPSB4O1xyXG5cdFx0cmVzdWx0LnkgPSB5O1xyXG5cdFx0cmVzdWx0LnogPSB6O1xyXG5cdFx0cmVzdWx0LncgPSB3O1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBtdWx0aXBseUJ5UG9pbnRBc1ZlY3RvcihtYXRyaXg6IE1hdHJpeDQsIGNhcnRlc2lhbjogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcblx0XHRjb25zdCB2WCA9IGNhcnRlc2lhbi54O1xyXG5cdFx0Y29uc3QgdlkgPSBjYXJ0ZXNpYW4ueTtcclxuXHRcdGNvbnN0IHZaID0gY2FydGVzaWFuLno7XHJcblxyXG5cdFx0Y29uc3QgeCA9IG1hdHJpeFswXSAqIHZYICsgbWF0cml4WzRdICogdlkgKyBtYXRyaXhbOF0gKiB2WjtcclxuXHRcdGNvbnN0IHkgPSBtYXRyaXhbMV0gKiB2WCArIG1hdHJpeFs1XSAqIHZZICsgbWF0cml4WzldICogdlo7XHJcblx0XHRjb25zdCB6ID0gbWF0cml4WzJdICogdlggKyBtYXRyaXhbNl0gKiB2WSArIG1hdHJpeFsxMF0gKiB2WjtcclxuXHJcblx0XHRyZXN1bHQueCA9IHg7XHJcblx0XHRyZXN1bHQueSA9IHk7XHJcblx0XHRyZXN1bHQueiA9IHo7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG11bHRpcGx5QnlQb2ludChtYXRyaXg6IE1hdHJpeDQsIGNhcnRlc2lhbjogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcblx0XHRjb25zdCB2WCA9IGNhcnRlc2lhbi54O1xyXG5cdFx0Y29uc3QgdlkgPSBjYXJ0ZXNpYW4ueTtcclxuXHRcdGNvbnN0IHZaID0gY2FydGVzaWFuLno7XHJcblxyXG5cdFx0Y29uc3QgeCA9IG1hdHJpeFswXSAqIHZYICsgbWF0cml4WzRdICogdlkgKyBtYXRyaXhbOF0gKiB2WiArIG1hdHJpeFsxMl07XHJcblx0XHRjb25zdCB5ID0gbWF0cml4WzFdICogdlggKyBtYXRyaXhbNV0gKiB2WSArIG1hdHJpeFs5XSAqIHZaICsgbWF0cml4WzEzXTtcclxuXHRcdGNvbnN0IHogPSBtYXRyaXhbMl0gKiB2WCArIG1hdHJpeFs2XSAqIHZZICsgbWF0cml4WzEwXSAqIHZaICsgbWF0cml4WzE0XTtcclxuXHJcblx0XHRyZXN1bHQueCA9IHg7XHJcblx0XHRyZXN1bHQueSA9IHk7XHJcblx0XHRyZXN1bHQueiA9IHo7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG11bHRpcGx5QnlTY2FsYXIobWF0cml4OiBNYXRyaXg0LCBzY2FsYXI6IG51bWJlciwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbNl0gPSBtYXRyaXhbNl0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbN10gPSBtYXRyaXhbN10gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbOF0gPSBtYXRyaXhbOF0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbOV0gPSBtYXRyaXhbOV0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbMTBdID0gbWF0cml4WzEwXSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0WzEyXSA9IG1hdHJpeFsxMl0gKiBzY2FsYXI7XHJcblx0XHRyZXN1bHRbMTNdID0gbWF0cml4WzEzXSAqIHNjYWxhcjtcclxuXHRcdHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdICogc2NhbGFyO1xyXG5cdFx0cmVzdWx0WzE1XSA9IG1hdHJpeFsxNV0gKiBzY2FsYXI7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG5lZ2F0ZShtYXRyaXg6IE1hdHJpeDQsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0cmVzdWx0WzBdID0gLW1hdHJpeFswXTtcclxuXHRcdHJlc3VsdFsxXSA9IC1tYXRyaXhbMV07XHJcblx0XHRyZXN1bHRbMl0gPSAtbWF0cml4WzJdO1xyXG5cdFx0cmVzdWx0WzNdID0gLW1hdHJpeFszXTtcclxuXHRcdHJlc3VsdFs0XSA9IC1tYXRyaXhbNF07XHJcblx0XHRyZXN1bHRbNV0gPSAtbWF0cml4WzVdO1xyXG5cdFx0cmVzdWx0WzZdID0gLW1hdHJpeFs2XTtcclxuXHRcdHJlc3VsdFs3XSA9IC1tYXRyaXhbN107XHJcblx0XHRyZXN1bHRbOF0gPSAtbWF0cml4WzhdO1xyXG5cdFx0cmVzdWx0WzldID0gLW1hdHJpeFs5XTtcclxuXHRcdHJlc3VsdFsxMF0gPSAtbWF0cml4WzEwXTtcclxuXHRcdHJlc3VsdFsxMV0gPSAtbWF0cml4WzExXTtcclxuXHRcdHJlc3VsdFsxMl0gPSAtbWF0cml4WzEyXTtcclxuXHRcdHJlc3VsdFsxM10gPSAtbWF0cml4WzEzXTtcclxuXHRcdHJlc3VsdFsxNF0gPSAtbWF0cml4WzE0XTtcclxuXHRcdHJlc3VsdFsxNV0gPSAtbWF0cml4WzE1XTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgdHJhbnNwb3NlKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHRjb25zdCBtYXRyaXgxID0gbWF0cml4WzFdO1xyXG5cdFx0Y29uc3QgbWF0cml4MiA9IG1hdHJpeFsyXTtcclxuXHRcdGNvbnN0IG1hdHJpeDMgPSBtYXRyaXhbM107XHJcblx0XHRjb25zdCBtYXRyaXg2ID0gbWF0cml4WzZdO1xyXG5cdFx0Y29uc3QgbWF0cml4NyA9IG1hdHJpeFs3XTtcclxuXHRcdGNvbnN0IG1hdHJpeDExID0gbWF0cml4WzExXTtcclxuXHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF07XHJcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbNF07XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbOF07XHJcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbMTJdO1xyXG5cdFx0cmVzdWx0WzRdID0gbWF0cml4MTtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeFs1XTtcclxuXHRcdHJlc3VsdFs2XSA9IG1hdHJpeFs5XTtcclxuXHRcdHJlc3VsdFs3XSA9IG1hdHJpeFsxM107XHJcblx0XHRyZXN1bHRbOF0gPSBtYXRyaXgyO1xyXG5cdFx0cmVzdWx0WzldID0gbWF0cml4NjtcclxuXHRcdHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdO1xyXG5cdFx0cmVzdWx0WzExXSA9IG1hdHJpeFsxNF07XHJcblx0XHRyZXN1bHRbMTJdID0gbWF0cml4MztcclxuXHRcdHJlc3VsdFsxM10gPSBtYXRyaXg3O1xyXG5cdFx0cmVzdWx0WzE0XSA9IG1hdHJpeDExO1xyXG5cdFx0cmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGFicyhtYXRyaXg6IE1hdHJpeDQsIHJlc3VsdDogTWF0cml4NCkge1xyXG5cdFx0cmVzdWx0WzBdID0gTWF0aC5hYnMobWF0cml4WzBdKTtcclxuXHRcdHJlc3VsdFsxXSA9IE1hdGguYWJzKG1hdHJpeFsxXSk7XHJcblx0XHRyZXN1bHRbMl0gPSBNYXRoLmFicyhtYXRyaXhbMl0pO1xyXG5cdFx0cmVzdWx0WzNdID0gTWF0aC5hYnMobWF0cml4WzNdKTtcclxuXHRcdHJlc3VsdFs0XSA9IE1hdGguYWJzKG1hdHJpeFs0XSk7XHJcblx0XHRyZXN1bHRbNV0gPSBNYXRoLmFicyhtYXRyaXhbNV0pO1xyXG5cdFx0cmVzdWx0WzZdID0gTWF0aC5hYnMobWF0cml4WzZdKTtcclxuXHRcdHJlc3VsdFs3XSA9IE1hdGguYWJzKG1hdHJpeFs3XSk7XHJcblx0XHRyZXN1bHRbOF0gPSBNYXRoLmFicyhtYXRyaXhbOF0pO1xyXG5cdFx0cmVzdWx0WzldID0gTWF0aC5hYnMobWF0cml4WzldKTtcclxuXHRcdHJlc3VsdFsxMF0gPSBNYXRoLmFicyhtYXRyaXhbMTBdKTtcclxuXHRcdHJlc3VsdFsxMV0gPSBNYXRoLmFicyhtYXRyaXhbMTFdKTtcclxuXHRcdHJlc3VsdFsxMl0gPSBNYXRoLmFicyhtYXRyaXhbMTJdKTtcclxuXHRcdHJlc3VsdFsxM10gPSBNYXRoLmFicyhtYXRyaXhbMTNdKTtcclxuXHRcdHJlc3VsdFsxNF0gPSBNYXRoLmFicyhtYXRyaXhbMTRdKTtcclxuXHRcdHJlc3VsdFsxNV0gPSBNYXRoLmFicyhtYXRyaXhbMTVdKTtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGVxdWFscyhsZWZ0OiBNYXRyaXg0LCByaWdodDogTWF0cml4NCk6IGJvb2xlYW4ge1xyXG5cdFx0Ly8gR2l2ZW4gdGhhdCBtb3N0IG1hdHJpY2VzIHdpbGwgYmUgdHJhbnNmb3JtYXRpb24gbWF0cmljZXMsIHRoZSBlbGVtZW50c1xyXG5cdFx0Ly8gYXJlIHRlc3RlZCBpbiBvcmRlciBzdWNoIHRoYXQgdGhlIHRlc3QgaXMgbGlrZWx5IHRvIGZhaWwgYXMgZWFybHlcclxuXHRcdC8vIGFzIHBvc3NpYmxlLiAgSSBfdGhpbmtfIHRoaXMgaXMganVzdCBhcyBmcmllbmRseSB0byB0aGUgTDEgY2FjaGVcclxuXHRcdC8vIGFzIHRlc3RpbmcgaW4gaW5kZXggb3JkZXIuICBJdCBpcyBjZXJ0YWludHkgZmFzdGVyIGluIHByYWN0aWNlLlxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0bGVmdCA9PT0gcmlnaHQgfHxcclxuXHRcdFx0KGRlZmluZWQobGVmdCkgJiZcclxuXHRcdFx0XHRkZWZpbmVkKHJpZ2h0KSAmJlxyXG5cdFx0XHRcdC8vIFRyYW5zbGF0aW9uXHJcblx0XHRcdFx0bGVmdFsxMl0gPT09IHJpZ2h0WzEyXSAmJlxyXG5cdFx0XHRcdGxlZnRbMTNdID09PSByaWdodFsxM10gJiZcclxuXHRcdFx0XHRsZWZ0WzE0XSA9PT0gcmlnaHRbMTRdICYmXHJcblx0XHRcdFx0Ly8gUm90YXRpb24vc2NhbGVcclxuXHRcdFx0XHRsZWZ0WzBdID09PSByaWdodFswXSAmJlxyXG5cdFx0XHRcdGxlZnRbMV0gPT09IHJpZ2h0WzFdICYmXHJcblx0XHRcdFx0bGVmdFsyXSA9PT0gcmlnaHRbMl0gJiZcclxuXHRcdFx0XHRsZWZ0WzRdID09PSByaWdodFs0XSAmJlxyXG5cdFx0XHRcdGxlZnRbNV0gPT09IHJpZ2h0WzVdICYmXHJcblx0XHRcdFx0bGVmdFs2XSA9PT0gcmlnaHRbNl0gJiZcclxuXHRcdFx0XHRsZWZ0WzhdID09PSByaWdodFs4XSAmJlxyXG5cdFx0XHRcdGxlZnRbOV0gPT09IHJpZ2h0WzldICYmXHJcblx0XHRcdFx0bGVmdFsxMF0gPT09IHJpZ2h0WzEwXSAmJlxyXG5cdFx0XHRcdC8vIEJvdHRvbSByb3dcclxuXHRcdFx0XHRsZWZ0WzNdID09PSByaWdodFszXSAmJlxyXG5cdFx0XHRcdGxlZnRbN10gPT09IHJpZ2h0WzddICYmXHJcblx0XHRcdFx0bGVmdFsxMV0gPT09IHJpZ2h0WzExXSAmJlxyXG5cdFx0XHRcdGxlZnRbMTVdID09PSByaWdodFsxNV0pXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGVxdWFsc0Vwc2lsb24obGVmdDogTWF0cml4NCwgcmlnaHQ6IE1hdHJpeDQsIGVwc2lsb246IG51bWJlcik6IGJvb2xlYW4ge1xyXG5cdFx0ZXBzaWxvbiA9IGRlZmF1bHRWYWx1ZShlcHNpbG9uLCAwKTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRsZWZ0ID09PSByaWdodCB8fFxyXG5cdFx0XHQoZGVmaW5lZChsZWZ0KSAmJlxyXG5cdFx0XHRcdGRlZmluZWQocmlnaHQpICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFswXSAtIHJpZ2h0WzBdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFsxXSAtIHJpZ2h0WzFdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFsyXSAtIHJpZ2h0WzJdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFszXSAtIHJpZ2h0WzNdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFs0XSAtIHJpZ2h0WzRdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFs1XSAtIHJpZ2h0WzVdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFs2XSAtIHJpZ2h0WzZdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFs3XSAtIHJpZ2h0WzddKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFs4XSAtIHJpZ2h0WzhdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFs5XSAtIHJpZ2h0WzldKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFsxMF0gLSByaWdodFsxMF0pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzExXSAtIHJpZ2h0WzExXSkgPD0gZXBzaWxvbiAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnRbMTJdIC0gcmlnaHRbMTJdKSA8PSBlcHNpbG9uICYmXHJcblx0XHRcdFx0TWF0aC5hYnMobGVmdFsxM10gLSByaWdodFsxM10pIDw9IGVwc2lsb24gJiZcclxuXHRcdFx0XHRNYXRoLmFicyhsZWZ0WzE0XSAtIHJpZ2h0WzE0XSkgPD0gZXBzaWxvbiAmJlxyXG5cdFx0XHRcdE1hdGguYWJzKGxlZnRbMTVdIC0gcmlnaHRbMTVdKSA8PSBlcHNpbG9uKVxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRUcmFuc2xhdGlvbihtYXRyaXg6IE1hdHJpeDQsIHJlc3VsdDogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG5cdFx0cmVzdWx0LnggPSBtYXRyaXhbMTJdO1xyXG5cdFx0cmVzdWx0LnkgPSBtYXRyaXhbMTNdO1xyXG5cdFx0cmVzdWx0LnogPSBtYXRyaXhbMTRdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRNYXRyaXgzKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXgzKTogTWF0cml4MyB7XHJcblx0XHRyZXN1bHRbMF0gPSBtYXRyaXhbMF07XHJcblx0XHRyZXN1bHRbMV0gPSBtYXRyaXhbMV07XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXhbMl07XHJcblx0XHRyZXN1bHRbM10gPSBtYXRyaXhbNF07XHJcblx0XHRyZXN1bHRbNF0gPSBtYXRyaXhbNV07XHJcblx0XHRyZXN1bHRbNV0gPSBtYXRyaXhbNl07XHJcblx0XHRyZXN1bHRbNl0gPSBtYXRyaXhbOF07XHJcblx0XHRyZXN1bHRbN10gPSBtYXRyaXhbOV07XHJcblx0XHRyZXN1bHRbOF0gPSBtYXRyaXhbMTBdO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBpbnZlcnNlKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXg0KSB7XHJcblx0XHQvL1xyXG5cdFx0Ly8gUG9ydGVkIGZyb206XHJcblx0XHQvLyAgIGZ0cDovL2Rvd25sb2FkLmludGVsLmNvbS9kZXNpZ24vUGVudGl1bUlJSS9zbWwvMjQ1MDQzMDEucGRmXHJcblx0XHQvL1xyXG5cdFx0Y29uc3Qgc3JjMCA9IG1hdHJpeFswXTtcclxuXHRcdGNvbnN0IHNyYzEgPSBtYXRyaXhbNF07XHJcblx0XHRjb25zdCBzcmMyID0gbWF0cml4WzhdO1xyXG5cdFx0Y29uc3Qgc3JjMyA9IG1hdHJpeFsxMl07XHJcblx0XHRjb25zdCBzcmM0ID0gbWF0cml4WzFdO1xyXG5cdFx0Y29uc3Qgc3JjNSA9IG1hdHJpeFs1XTtcclxuXHRcdGNvbnN0IHNyYzYgPSBtYXRyaXhbOV07XHJcblx0XHRjb25zdCBzcmM3ID0gbWF0cml4WzEzXTtcclxuXHRcdGNvbnN0IHNyYzggPSBtYXRyaXhbMl07XHJcblx0XHRjb25zdCBzcmM5ID0gbWF0cml4WzZdO1xyXG5cdFx0Y29uc3Qgc3JjMTAgPSBtYXRyaXhbMTBdO1xyXG5cdFx0Y29uc3Qgc3JjMTEgPSBtYXRyaXhbMTRdO1xyXG5cdFx0Y29uc3Qgc3JjMTIgPSBtYXRyaXhbM107XHJcblx0XHRjb25zdCBzcmMxMyA9IG1hdHJpeFs3XTtcclxuXHRcdGNvbnN0IHNyYzE0ID0gbWF0cml4WzExXTtcclxuXHRcdGNvbnN0IHNyYzE1ID0gbWF0cml4WzE1XTtcclxuXHJcblx0XHQvLyBjYWxjdWxhdGUgcGFpcnMgZm9yIGZpcnN0IDggZWxlbWVudHMgKGNvZmFjdG9ycylcclxuXHRcdGxldCB0bXAwID0gc3JjMTAgKiBzcmMxNTtcclxuXHRcdGxldCB0bXAxID0gc3JjMTEgKiBzcmMxNDtcclxuXHRcdGxldCB0bXAyID0gc3JjOSAqIHNyYzE1O1xyXG5cdFx0bGV0IHRtcDMgPSBzcmMxMSAqIHNyYzEzO1xyXG5cdFx0bGV0IHRtcDQgPSBzcmM5ICogc3JjMTQ7XHJcblx0XHRsZXQgdG1wNSA9IHNyYzEwICogc3JjMTM7XHJcblx0XHRsZXQgdG1wNiA9IHNyYzggKiBzcmMxNTtcclxuXHRcdGxldCB0bXA3ID0gc3JjMTEgKiBzcmMxMjtcclxuXHRcdGxldCB0bXA4ID0gc3JjOCAqIHNyYzE0O1xyXG5cdFx0bGV0IHRtcDkgPSBzcmMxMCAqIHNyYzEyO1xyXG5cdFx0bGV0IHRtcDEwID0gc3JjOCAqIHNyYzEzO1xyXG5cdFx0bGV0IHRtcDExID0gc3JjOSAqIHNyYzEyO1xyXG5cclxuXHRcdC8vIGNhbGN1bGF0ZSBmaXJzdCA4IGVsZW1lbnRzIChjb2ZhY3RvcnMpXHJcblx0XHRjb25zdCBkc3QwID0gdG1wMCAqIHNyYzUgKyB0bXAzICogc3JjNiArIHRtcDQgKiBzcmM3IC0gKHRtcDEgKiBzcmM1ICsgdG1wMiAqIHNyYzYgKyB0bXA1ICogc3JjNyk7XHJcblx0XHRjb25zdCBkc3QxID0gdG1wMSAqIHNyYzQgKyB0bXA2ICogc3JjNiArIHRtcDkgKiBzcmM3IC0gKHRtcDAgKiBzcmM0ICsgdG1wNyAqIHNyYzYgKyB0bXA4ICogc3JjNyk7XHJcblx0XHRjb25zdCBkc3QyID0gdG1wMiAqIHNyYzQgKyB0bXA3ICogc3JjNSArIHRtcDEwICogc3JjNyAtICh0bXAzICogc3JjNCArIHRtcDYgKiBzcmM1ICsgdG1wMTEgKiBzcmM3KTtcclxuXHRcdGNvbnN0IGRzdDMgPSB0bXA1ICogc3JjNCArIHRtcDggKiBzcmM1ICsgdG1wMTEgKiBzcmM2IC0gKHRtcDQgKiBzcmM0ICsgdG1wOSAqIHNyYzUgKyB0bXAxMCAqIHNyYzYpO1xyXG5cdFx0Y29uc3QgZHN0NCA9IHRtcDEgKiBzcmMxICsgdG1wMiAqIHNyYzIgKyB0bXA1ICogc3JjMyAtICh0bXAwICogc3JjMSArIHRtcDMgKiBzcmMyICsgdG1wNCAqIHNyYzMpO1xyXG5cdFx0Y29uc3QgZHN0NSA9IHRtcDAgKiBzcmMwICsgdG1wNyAqIHNyYzIgKyB0bXA4ICogc3JjMyAtICh0bXAxICogc3JjMCArIHRtcDYgKiBzcmMyICsgdG1wOSAqIHNyYzMpO1xyXG5cdFx0Y29uc3QgZHN0NiA9IHRtcDMgKiBzcmMwICsgdG1wNiAqIHNyYzEgKyB0bXAxMSAqIHNyYzMgLSAodG1wMiAqIHNyYzAgKyB0bXA3ICogc3JjMSArIHRtcDEwICogc3JjMyk7XHJcblx0XHRjb25zdCBkc3Q3ID0gdG1wNCAqIHNyYzAgKyB0bXA5ICogc3JjMSArIHRtcDEwICogc3JjMiAtICh0bXA1ICogc3JjMCArIHRtcDggKiBzcmMxICsgdG1wMTEgKiBzcmMyKTtcclxuXHJcblx0XHQvLyBjYWxjdWxhdGUgcGFpcnMgZm9yIHNlY29uZCA4IGVsZW1lbnRzIChjb2ZhY3RvcnMpXHJcblx0XHR0bXAwID0gc3JjMiAqIHNyYzc7XHJcblx0XHR0bXAxID0gc3JjMyAqIHNyYzY7XHJcblx0XHR0bXAyID0gc3JjMSAqIHNyYzc7XHJcblx0XHR0bXAzID0gc3JjMyAqIHNyYzU7XHJcblx0XHR0bXA0ID0gc3JjMSAqIHNyYzY7XHJcblx0XHR0bXA1ID0gc3JjMiAqIHNyYzU7XHJcblx0XHR0bXA2ID0gc3JjMCAqIHNyYzc7XHJcblx0XHR0bXA3ID0gc3JjMyAqIHNyYzQ7XHJcblx0XHR0bXA4ID0gc3JjMCAqIHNyYzY7XHJcblx0XHR0bXA5ID0gc3JjMiAqIHNyYzQ7XHJcblx0XHR0bXAxMCA9IHNyYzAgKiBzcmM1O1xyXG5cdFx0dG1wMTEgPSBzcmMxICogc3JjNDtcclxuXHJcblx0XHQvLyBjYWxjdWxhdGUgc2Vjb25kIDggZWxlbWVudHMgKGNvZmFjdG9ycylcclxuXHRcdGNvbnN0IGRzdDggPSB0bXAwICogc3JjMTMgKyB0bXAzICogc3JjMTQgKyB0bXA0ICogc3JjMTUgLSAodG1wMSAqIHNyYzEzICsgdG1wMiAqIHNyYzE0ICsgdG1wNSAqIHNyYzE1KTtcclxuXHRcdGNvbnN0IGRzdDkgPSB0bXAxICogc3JjMTIgKyB0bXA2ICogc3JjMTQgKyB0bXA5ICogc3JjMTUgLSAodG1wMCAqIHNyYzEyICsgdG1wNyAqIHNyYzE0ICsgdG1wOCAqIHNyYzE1KTtcclxuXHRcdGNvbnN0IGRzdDEwID0gdG1wMiAqIHNyYzEyICsgdG1wNyAqIHNyYzEzICsgdG1wMTAgKiBzcmMxNSAtICh0bXAzICogc3JjMTIgKyB0bXA2ICogc3JjMTMgKyB0bXAxMSAqIHNyYzE1KTtcclxuXHRcdGNvbnN0IGRzdDExID0gdG1wNSAqIHNyYzEyICsgdG1wOCAqIHNyYzEzICsgdG1wMTEgKiBzcmMxNCAtICh0bXA0ICogc3JjMTIgKyB0bXA5ICogc3JjMTMgKyB0bXAxMCAqIHNyYzE0KTtcclxuXHRcdGNvbnN0IGRzdDEyID0gdG1wMiAqIHNyYzEwICsgdG1wNSAqIHNyYzExICsgdG1wMSAqIHNyYzkgLSAodG1wNCAqIHNyYzExICsgdG1wMCAqIHNyYzkgKyB0bXAzICogc3JjMTApO1xyXG5cdFx0Y29uc3QgZHN0MTMgPSB0bXA4ICogc3JjMTEgKyB0bXAwICogc3JjOCArIHRtcDcgKiBzcmMxMCAtICh0bXA2ICogc3JjMTAgKyB0bXA5ICogc3JjMTEgKyB0bXAxICogc3JjOCk7XHJcblx0XHRjb25zdCBkc3QxNCA9IHRtcDYgKiBzcmM5ICsgdG1wMTEgKiBzcmMxMSArIHRtcDMgKiBzcmM4IC0gKHRtcDEwICogc3JjMTEgKyB0bXAyICogc3JjOCArIHRtcDcgKiBzcmM5KTtcclxuXHRcdGNvbnN0IGRzdDE1ID0gdG1wMTAgKiBzcmMxMCArIHRtcDQgKiBzcmM4ICsgdG1wOSAqIHNyYzkgLSAodG1wOCAqIHNyYzkgKyB0bXAxMSAqIHNyYzEwICsgdG1wNSAqIHNyYzgpO1xyXG5cclxuXHRcdC8vIGNhbGN1bGF0ZSBkZXRlcm1pbmFudFxyXG5cdFx0bGV0IGRldCA9IHNyYzAgKiBkc3QwICsgc3JjMSAqIGRzdDEgKyBzcmMyICogZHN0MiArIHNyYzMgKiBkc3QzO1xyXG5cclxuXHRcdGlmIChNYXRoLmFicyhkZXQpIDwgR01hdGguRVBTSUxPTjIxKSB7XHJcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSBmb3IgYSB6ZXJvIHNjYWxlIG1hdHJpeCB0aGF0IGNhbiBvY2N1ciwgZm9yIGV4YW1wbGUsXHJcblx0XHRcdC8vIHdoZW4gYSBtb2RlbCdzIG5vZGUgaGFzIGEgWzAsIDAsIDBdIHNjYWxlLlxyXG5cdFx0XHRpZiAoXHJcblx0XHRcdFx0TWF0cml4My5lcXVhbHNFcHNpbG9uKFxyXG5cdFx0XHRcdFx0TWF0cml4NC5nZXRNYXRyaXgzKG1hdHJpeCwgc2NyYXRjaEludmVyc2VSb3RhdGlvbiksXHJcblx0XHRcdFx0XHRzY3JhdGNoTWF0cml4M1plcm8sXHJcblx0XHRcdFx0XHRHTWF0aC5FUFNJTE9ON1xyXG5cdFx0XHRcdCkgJiZcclxuXHRcdFx0XHRWZWN0b3I0LmVxdWFscyhNYXRyaXg0LmdldFJvdyhtYXRyaXgsIDMsIHNjcmF0Y2hCb3R0b21Sb3cpLCBzY3JhdGNoRXhwZWN0ZWRCb3R0b21Sb3cpXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdHJlc3VsdFswXSA9IDAuMDtcclxuXHRcdFx0XHRyZXN1bHRbMV0gPSAwLjA7XHJcblx0XHRcdFx0cmVzdWx0WzJdID0gMC4wO1xyXG5cdFx0XHRcdHJlc3VsdFszXSA9IDAuMDtcclxuXHRcdFx0XHRyZXN1bHRbNF0gPSAwLjA7XHJcblx0XHRcdFx0cmVzdWx0WzVdID0gMC4wO1xyXG5cdFx0XHRcdHJlc3VsdFs2XSA9IDAuMDtcclxuXHRcdFx0XHRyZXN1bHRbN10gPSAwLjA7XHJcblx0XHRcdFx0cmVzdWx0WzhdID0gMC4wO1xyXG5cdFx0XHRcdHJlc3VsdFs5XSA9IDAuMDtcclxuXHRcdFx0XHRyZXN1bHRbMTBdID0gMC4wO1xyXG5cdFx0XHRcdHJlc3VsdFsxMV0gPSAwLjA7XHJcblx0XHRcdFx0cmVzdWx0WzEyXSA9IC1tYXRyaXhbMTJdO1xyXG5cdFx0XHRcdHJlc3VsdFsxM10gPSAtbWF0cml4WzEzXTtcclxuXHRcdFx0XHRyZXN1bHRbMTRdID0gLW1hdHJpeFsxNF07XHJcblx0XHRcdFx0cmVzdWx0WzE1XSA9IDEuMDtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJtYXRyaXggaXMgbm90IGludmVydGlibGUgYmVjYXVzZSBpdHMgZGV0ZXJtaW5hdGUgaXMgemVyby5cIik7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY2FsY3VsYXRlIG1hdHJpeCBpbnZlcnNlXHJcblx0XHRkZXQgPSAxLjAgLyBkZXQ7XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gZHN0MCAqIGRldDtcclxuXHRcdHJlc3VsdFsxXSA9IGRzdDEgKiBkZXQ7XHJcblx0XHRyZXN1bHRbMl0gPSBkc3QyICogZGV0O1xyXG5cdFx0cmVzdWx0WzNdID0gZHN0MyAqIGRldDtcclxuXHRcdHJlc3VsdFs0XSA9IGRzdDQgKiBkZXQ7XHJcblx0XHRyZXN1bHRbNV0gPSBkc3Q1ICogZGV0O1xyXG5cdFx0cmVzdWx0WzZdID0gZHN0NiAqIGRldDtcclxuXHRcdHJlc3VsdFs3XSA9IGRzdDcgKiBkZXQ7XHJcblx0XHRyZXN1bHRbOF0gPSBkc3Q4ICogZGV0O1xyXG5cdFx0cmVzdWx0WzldID0gZHN0OSAqIGRldDtcclxuXHRcdHJlc3VsdFsxMF0gPSBkc3QxMCAqIGRldDtcclxuXHRcdHJlc3VsdFsxMV0gPSBkc3QxMSAqIGRldDtcclxuXHRcdHJlc3VsdFsxMl0gPSBkc3QxMiAqIGRldDtcclxuXHRcdHJlc3VsdFsxM10gPSBkc3QxMyAqIGRldDtcclxuXHRcdHJlc3VsdFsxNF0gPSBkc3QxNCAqIGRldDtcclxuXHRcdHJlc3VsdFsxNV0gPSBkc3QxNSAqIGRldDtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgaW52ZXJzZVRyYW5zZm9ybWF0aW9uKG1hdHJpeDogTWF0cml4NCwgcmVzdWx0OiBNYXRyaXg0KTogTWF0cml4NCB7XHJcblx0XHQvL1RoaXMgZnVuY3Rpb24gaXMgYW4gb3B0aW1pemVkIHZlcnNpb24gb2YgdGhlIGJlbG93IDQgbGluZXMuXHJcblx0XHQvL2NvbnN0IHJUID0gTWF0cml4My50cmFuc3Bvc2UoTWF0cml4NC5nZXRNYXRyaXgzKG1hdHJpeCkpO1xyXG5cdFx0Ly9jb25zdCByVE4gPSBNYXRyaXgzLm5lZ2F0ZShyVCk7XHJcblx0XHQvL2NvbnN0IHJUVCA9IE1hdHJpeDMubXVsdGlwbHlCeVZlY3RvcihyVE4sIE1hdHJpeDQuZ2V0VHJhbnNsYXRpb24obWF0cml4KSk7XHJcblx0XHQvL3JldHVybiBNYXRyaXg0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKHJULCByVFQsIHJlc3VsdCk7XHJcblxyXG5cdFx0Y29uc3QgbWF0cml4MCA9IG1hdHJpeFswXTtcclxuXHRcdGNvbnN0IG1hdHJpeDEgPSBtYXRyaXhbMV07XHJcblx0XHRjb25zdCBtYXRyaXgyID0gbWF0cml4WzJdO1xyXG5cdFx0Y29uc3QgbWF0cml4NCA9IG1hdHJpeFs0XTtcclxuXHRcdGNvbnN0IG1hdHJpeDUgPSBtYXRyaXhbNV07XHJcblx0XHRjb25zdCBtYXRyaXg2ID0gbWF0cml4WzZdO1xyXG5cdFx0Y29uc3QgbWF0cml4OCA9IG1hdHJpeFs4XTtcclxuXHRcdGNvbnN0IG1hdHJpeDkgPSBtYXRyaXhbOV07XHJcblx0XHRjb25zdCBtYXRyaXgxMCA9IG1hdHJpeFsxMF07XHJcblxyXG5cdFx0Y29uc3QgdlggPSBtYXRyaXhbMTJdO1xyXG5cdFx0Y29uc3QgdlkgPSBtYXRyaXhbMTNdO1xyXG5cdFx0Y29uc3QgdlogPSBtYXRyaXhbMTRdO1xyXG5cclxuXHRcdGNvbnN0IHggPSAtbWF0cml4MCAqIHZYIC0gbWF0cml4MSAqIHZZIC0gbWF0cml4MiAqIHZaO1xyXG5cdFx0Y29uc3QgeSA9IC1tYXRyaXg0ICogdlggLSBtYXRyaXg1ICogdlkgLSBtYXRyaXg2ICogdlo7XHJcblx0XHRjb25zdCB6ID0gLW1hdHJpeDggKiB2WCAtIG1hdHJpeDkgKiB2WSAtIG1hdHJpeDEwICogdlo7XHJcblxyXG5cdFx0cmVzdWx0WzBdID0gbWF0cml4MDtcclxuXHRcdHJlc3VsdFsxXSA9IG1hdHJpeDQ7XHJcblx0XHRyZXN1bHRbMl0gPSBtYXRyaXg4O1xyXG5cdFx0cmVzdWx0WzNdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzRdID0gbWF0cml4MTtcclxuXHRcdHJlc3VsdFs1XSA9IG1hdHJpeDU7XHJcblx0XHRyZXN1bHRbNl0gPSBtYXRyaXg5O1xyXG5cdFx0cmVzdWx0WzddID0gMC4wO1xyXG5cdFx0cmVzdWx0WzhdID0gbWF0cml4MjtcclxuXHRcdHJlc3VsdFs5XSA9IG1hdHJpeDY7XHJcblx0XHRyZXN1bHRbMTBdID0gbWF0cml4MTA7XHJcblx0XHRyZXN1bHRbMTFdID0gMC4wO1xyXG5cdFx0cmVzdWx0WzEyXSA9IHg7XHJcblx0XHRyZXN1bHRbMTNdID0geTtcclxuXHRcdHJlc3VsdFsxNF0gPSB6O1xyXG5cdFx0cmVzdWx0WzE1XSA9IDEuMDtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgaW52ZXJzZVRyYW5zcG9zZShtYXRyaXg6IE1hdHJpeDQsIHJlc3VsdDogTWF0cml4NCk6IE1hdHJpeDQge1xyXG5cdFx0cmV0dXJuIE1hdHJpeDQuaW52ZXJzZShNYXRyaXg0LnRyYW5zcG9zZShtYXRyaXgsIHNjcmF0Y2hUcmFuc3Bvc2VNYXRyaXgpLCByZXN1bHQpO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBAcHJpdmF0ZVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBlcXVhbHNBcnJheShtYXRyaXg6IE1hdHJpeDQsIGFycmF5OiBBcnJheTxudW1iZXI+LCBvZmZzZXQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0bWF0cml4WzBdID09PSBhcnJheVtvZmZzZXRdICYmXHJcblx0XHRcdG1hdHJpeFsxXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiZcclxuXHRcdFx0bWF0cml4WzJdID09PSBhcnJheVtvZmZzZXQgKyAyXSAmJlxyXG5cdFx0XHRtYXRyaXhbM10gPT09IGFycmF5W29mZnNldCArIDNdICYmXHJcblx0XHRcdG1hdHJpeFs0XSA9PT0gYXJyYXlbb2Zmc2V0ICsgNF0gJiZcclxuXHRcdFx0bWF0cml4WzVdID09PSBhcnJheVtvZmZzZXQgKyA1XSAmJlxyXG5cdFx0XHRtYXRyaXhbNl0gPT09IGFycmF5W29mZnNldCArIDZdICYmXHJcblx0XHRcdG1hdHJpeFs3XSA9PT0gYXJyYXlbb2Zmc2V0ICsgN10gJiZcclxuXHRcdFx0bWF0cml4WzhdID09PSBhcnJheVtvZmZzZXQgKyA4XSAmJlxyXG5cdFx0XHRtYXRyaXhbOV0gPT09IGFycmF5W29mZnNldCArIDldICYmXHJcblx0XHRcdG1hdHJpeFsxMF0gPT09IGFycmF5W29mZnNldCArIDEwXSAmJlxyXG5cdFx0XHRtYXRyaXhbMTFdID09PSBhcnJheVtvZmZzZXQgKyAxMV0gJiZcclxuXHRcdFx0bWF0cml4WzEyXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMTJdICYmXHJcblx0XHRcdG1hdHJpeFsxM10gPT09IGFycmF5W29mZnNldCArIDEzXSAmJlxyXG5cdFx0XHRtYXRyaXhbMTRdID09PSBhcnJheVtvZmZzZXQgKyAxNF0gJiZcclxuXHRcdFx0bWF0cml4WzE1XSA9PT0gYXJyYXlbb2Zmc2V0ICsgMTVdXHJcblx0XHQpO1xyXG5cdH1cclxufVxyXG5cclxuY29uc3Qgc2NyYXRjaFRyYW5zcG9zZU1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblxyXG5jb25zdCBmcm9tQ2FtZXJhRiA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IGZyb21DYW1lcmFSID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgZnJvbUNhbWVyYVUgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuY29uc3Qgc2NhbGVTY3JhdGNoMSA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNjYWxlU2NyYXRjaDIgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY3JhdGNoQ29sdW1uID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2NhbGVTY3JhdGNoMyA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNjYWxlU2NyYXRjaDQgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY2FsZVNjcmF0Y2g1ID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2NyYXRjaEludmVyc2VSb3RhdGlvbiA9IG5ldyBNYXRyaXgzKCk7XHJcbmNvbnN0IHNjcmF0Y2hNYXRyaXgzWmVybyA9IG5ldyBNYXRyaXgzKCk7XHJcbmNvbnN0IHNjcmF0Y2hCb3R0b21Sb3cgPSBuZXcgVmVjdG9yNCgpO1xyXG5jb25zdCBzY3JhdGNoRXhwZWN0ZWRCb3R0b21Sb3cgPSBuZXcgVmVjdG9yNCgwLjAsIDAuMCwgMC4wLCAxLjApO1xyXG5jb25zdCB4ID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3QgeSA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHogPSBuZXcgVmVjdG9yMygpO1xyXG5leHBvcnQgZGVmYXVsdCBNYXRyaXg0O1xyXG4iLCJpbXBvcnQgQ29sb3IgZnJvbSBcIi4uL21hdGgvQ29sb3JcIjtcbmltcG9ydCBNYXRyaXgyIGZyb20gXCIuLi9tYXRoL01hdHJpeDJcIjtcbmltcG9ydCBNYXRyaXgzIGZyb20gXCIuLi9tYXRoL01hdHJpeDNcIjtcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9tYXRoL01hdHJpeDRcIjtcbmltcG9ydCBWZWN0b3IyIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjRcIjtcbmltcG9ydCB7IFNoYWRlclN0YWdlIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuL1RleHR1cmVcIjtcbmltcG9ydCBTYW1wbGVyIGZyb20gXCIuL1NhbXBsZXJcIjtcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4uL2xpZ2h0L0xpZ2h0XCI7XG5pbXBvcnQgQnVmZmVyIGZyb20gXCIuL0J1ZmZlclwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vQ29udGV4dFwiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XG5pbXBvcnQgVW5pZm9ybUJ1ZmZlciBmcm9tIFwiLi9Vbmlmb3JtQnVmZmVyXCI7XG5pbXBvcnQgeyBTcG90TGlnaHQgfSBmcm9tIFwiLi4vbGlnaHQvU3BvdExpZ2h0XCI7XG5pbXBvcnQgeyBQb2ludExpZ2h0IH0gZnJvbSBcIi4uL2xpZ2h0L1BvaW50TGlnaHRcIjtcbmltcG9ydCB7IERpcmVjdGlvbmFsTGlnaHQgfSBmcm9tIFwiLi4vbGlnaHQvRGlyZWN0aW9uYWxMaWdodFwiO1xuZXhwb3J0IGNsYXNzIFVuaWZvcm08VD4ge1xuXHRfdmFsdWU6IFQ7XG5cdG5hbWU6IHN0cmluZztcblx0dmFsdWU6IFQ7XG5cdG9mZnNldDogbnVtYmVyO1xuXHRidWZmZXI6IEZsb2F0MzJBcnJheSB8IFVpbnQxNkFycmF5IHwgVWludDMyQXJyYXkgfCBVaW50OEFycmF5IHwgRmxvYXQ2NEFycmF5IHwgVW5pZm9ybUJ1ZmZlcjtcblx0Y2I6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0O1xuXHRieXRlU2l6ZTogbnVtYmVyO1xuXHRiaW5kaW5nPzogbnVtYmVyO1xuXHR2aXNpYmlsaXR5PzogbnVtYmVyO1xuXHR0eXBlPzogc3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKHVuaWZvcm1OYW1lOiBzdHJpbmcsIGNiPzogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsIGJpbmRpbmc/OiBudW1iZXIsIG9mZnNldD86IG51bWJlcikge1xuXHRcdHRoaXMubmFtZSA9IHVuaWZvcm1OYW1lO1xuXHRcdHRoaXMuY2IgPSBjYjtcblx0XHR0aGlzLmJpbmRpbmcgPSBkZWZhdWx0VmFsdWUoYmluZGluZywgMCk7XG5cdFx0dGhpcy5vZmZzZXQgPSBkZWZhdWx0VmFsdWUob2Zmc2V0LCAwKTtcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5WZXJ0ZXggfCBTaGFkZXJTdGFnZS5GcmFnbWVudDtcblx0XHR0aGlzLnR5cGUgPSBcIm51bWJlclwiO1xuXHR9XG5cdHNldEJ1ZmZlcihhcnJheTogQXJyYXk8bnVtYmVyPikge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRoaXMuYnVmZmVyW2ldID0gYXJyYXlbaV07XG5cdFx0fVxuXHR9XG5cdHNldCgpIHt9XG5cdGdldFZhbHVlKCkge1xuXHRcdGxldCByZXN1bHQ7XG5cdFx0Y29uc3QgY2JUeXBlID0gdHlwZW9mIHRoaXMuY2I7XG5cdFx0c3dpdGNoIChjYlR5cGUpIHtcblx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5jYlt0aGlzLm5hbWVdfHx0aGlzLmNiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHQvL0B0cy1pZ25vcmVcblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5jYigpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJudW1iZXJcIjpcblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5jYjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJ0eXBlIGlzIGVycm9yXCIpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgVW5pZm9ybUZsb2F0IGV4dGVuZHMgVW5pZm9ybTxudW1iZXI+IHtcblx0c3RhdGljIGFsaWduID0gNDtcblx0Y29uc3RydWN0b3IoXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXG5cdFx0Y2I6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LFxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXG5cdFx0b2Zmc2V0PzogbnVtYmVyXG5cdCkge1xuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcblx0XHR0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuX3ZhbHVlID0gMDtcblx0XHR0aGlzLmJ5dGVTaXplID0gNDtcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgMSk7XG5cdFx0dGhpcy50eXBlID0gXCJ2ZWMxXCI7XG5cdH1cblx0c2V0KCkge1xuXHRcdGlmICh0aGlzLmNiICE9IHVuZGVmaW5lZCkgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblx0XHRpZiAodGhpcy52YWx1ZSAhPT0gdGhpcy5fdmFsdWUpIHtcblx0XHRcdHRoaXMuX3ZhbHVlID0gdGhpcy52YWx1ZTtcblx0XHRcdHRoaXMuYnVmZmVyWzBdID0gdGhpcy52YWx1ZTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cbmV4cG9ydCBjbGFzcyBVbmlmb3JtRmxvYXRWZWMyIGV4dGVuZHMgVW5pZm9ybTxWZWN0b3IyPiB7XG5cdHN0YXRpYyBhbGlnbiA9IDg7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxuXHRcdGNiOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCxcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxuXHRcdG9mZnNldD86IG51bWJlclxuXHQpIHtcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XG5cdFx0dGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLl92YWx1ZSA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIDIpO1xuXHRcdHRoaXMuYnl0ZVNpemUgPSA4O1xuXHRcdHRoaXMudHlwZSA9IFwidmVjMlwiO1xuXHR9XG5cdHNldCgpOiBib29sZWFuIHtcblx0XHRpZiAodGhpcy5jYiAhPSB1bmRlZmluZWQpIHRoaXMudmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cdFx0Y29uc3QgdiA9IHRoaXMudmFsdWU7XG5cdFx0aWYgKCFWZWN0b3IyLmVxdWFscyh2LCB0aGlzLl92YWx1ZSkpIHtcblx0XHRcdFZlY3RvcjIuY2xvbmUodiwgdGhpcy5fdmFsdWUpO1xuXHRcdFx0dGhpcy5zZXRCdWZmZXIodGhpcy5fdmFsdWUudG9BcnJheSgpKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cbmV4cG9ydCBjbGFzcyBVbmlmb3JtRmxvYXRWZWMzIGV4dGVuZHMgVW5pZm9ybTxWZWN0b3IzPiB7XG5cdHN0YXRpYyBhbGlnbiA9IDE2O1xuXHRjb25zdHJ1Y3Rvcihcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxuXHRcdGJ5dGVPZmZzZXQ6IG51bWJlcixcblx0XHRjYjogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsXG5cdFx0YmluZGluZz86IG51bWJlcixcblx0XHRvZmZzZXQ/OiBudW1iZXJcblx0KSB7XG5cdFx0c3VwZXIodW5pZm9ybU5hbWUsIGNiLCBiaW5kaW5nLCBvZmZzZXQpO1xuXHRcdHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5fdmFsdWUgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIuYnVmZmVyLCBieXRlT2Zmc2V0LCAzKTtcblx0XHR0aGlzLmJ5dGVTaXplID0gMTI7XG5cdFx0dGhpcy50eXBlID0gXCJ2ZWMzXCI7XG5cdH1cblx0c2V0KCk6IGJvb2xlYW4ge1xuXHRcdGlmICh0aGlzLmNiICE9IHVuZGVmaW5lZCkgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblx0XHRjb25zdCB2ID0gdGhpcy52YWx1ZTtcblx0XHRpZiAoIVZlY3RvcjMuZXF1YWxzKHYsIHRoaXMuX3ZhbHVlKSkge1xuXHRcdFx0VmVjdG9yMy5jbG9uZSh2LCB0aGlzLl92YWx1ZSk7XG5cdFx0XHR0aGlzLnNldEJ1ZmZlcih0aGlzLl92YWx1ZS50b0FycmF5KCkpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuZXhwb3J0IGNsYXNzIFVuaWZvcm1GbG9hdFZlYzQgZXh0ZW5kcyBVbmlmb3JtPFZlY3RvcjQ+IHtcblx0c3RhdGljIGFsaWduID0gMTY7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxuXHRcdGNiOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCxcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxuXHRcdG9mZnNldD86IG51bWJlclxuXHQpIHtcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XG5cdFx0dGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLl92YWx1ZSA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIDQpO1xuXHRcdHRoaXMuYnl0ZVNpemUgPSAxNjtcblx0XHR0aGlzLnR5cGUgPSBcInZlYzRcIjtcblx0fVxuXHRzZXQoKTogYm9vbGVhbiB7XG5cdFx0aWYgKHRoaXMuY2IgIT0gdW5kZWZpbmVkKSB0aGlzLnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IHYgPSB0aGlzLnZhbHVlO1xuXHRcdGlmICghVmVjdG9yNC5lcXVhbHModiwgdGhpcy5fdmFsdWUpKSB7XG5cdFx0XHRWZWN0b3I0LmNsb25lKHYsIHRoaXMuX3ZhbHVlKTtcblx0XHRcdHRoaXMuc2V0QnVmZmVyKHRoaXMuX3ZhbHVlLnRvQXJyYXkoKSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5leHBvcnQgY2xhc3MgVW5pZm9ybUNvbG9yIGV4dGVuZHMgVW5pZm9ybTxDb2xvcj4ge1xuXHRzdGF0aWMgYWxpZ24gPSAxNjtcblx0Y29uc3RydWN0b3IoXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXG5cdFx0Y2I6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LFxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXG5cdFx0b2Zmc2V0PzogbnVtYmVyXG5cdCkge1xuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcblx0XHR0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuX3ZhbHVlID0gbmV3IENvbG9yKCk7XG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIDMpO1xuXHRcdHRoaXMuYnl0ZVNpemUgPSAxMjtcblx0XHR0aGlzLnR5cGUgPSBcInZlYzNcIjtcblx0fVxuXHRzZXQoKTogYm9vbGVhbiB7XG5cdFx0aWYgKHRoaXMuY2IgIT0gdW5kZWZpbmVkKSB0aGlzLnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IHYgPSB0aGlzLnZhbHVlO1xuXHRcdGlmICghQ29sb3IuZXF1YWxzKHYsIHRoaXMuX3ZhbHVlKSkge1xuXHRcdFx0Q29sb3IuY2xvbmUodiwgdGhpcy5fdmFsdWUpO1xuXHRcdFx0dGhpcy5zZXRCdWZmZXIodGhpcy5fdmFsdWUudG9BcnJheSgpKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFVuaWZvcm1NYXQyIGV4dGVuZHMgVW5pZm9ybTxNYXRyaXgyPiB7XG5cdHN0YXRpYyBhbGlnbiA9IDg7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxuXHRcdGNiOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCxcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxuXHRcdG9mZnNldD86IG51bWJlclxuXHQpIHtcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIG9mZnNldCk7XG5cdFx0dGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLl92YWx1ZSA9IG5ldyBNYXRyaXgyKCk7XG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIDQpO1xuXHRcdHRoaXMuYnl0ZVNpemUgPSAxNjtcblx0XHR0aGlzLnR5cGUgPSBcIm1hdDJcIjtcblx0fVxuXHRzZXQoKTogYm9vbGVhbiB7XG5cdFx0aWYgKHRoaXMuY2IgIT0gdW5kZWZpbmVkKSB0aGlzLnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IHYgPSB0aGlzLnZhbHVlO1xuXHRcdGlmICghTWF0cml4Mi5lcXVhbHModiwgdGhpcy5fdmFsdWUpKSB7XG5cdFx0XHRNYXRyaXgyLmNsb25lKHYsIHRoaXMuX3ZhbHVlKTtcblx0XHRcdHRoaXMuc2V0QnVmZmVyKHRoaXMuX3ZhbHVlLnRvQXJyYXkoKSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5leHBvcnQgY2xhc3MgVW5pZm9ybU1hdDMgZXh0ZW5kcyBVbmlmb3JtPE1hdHJpeDM+IHtcblx0c3RhdGljIGFsaWduID0gMTY7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxuXHRcdGNiOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCxcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxuXHRcdG9mZnNldD86IG51bWJlclxuXHQpIHtcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XG5cdFx0dGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLl92YWx1ZSA9IG5ldyBNYXRyaXgzKCk7XG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIDkpO1xuXHRcdHRoaXMuYnl0ZVNpemUgPSA0ODtcblx0XHR0aGlzLnR5cGUgPSBcIm1hdDNcIjtcblx0fVxuXHRzZXQoKTogYm9vbGVhbiB7XG5cdFx0aWYgKHRoaXMuY2IgIT0gdW5kZWZpbmVkKSB0aGlzLnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IHYgPSB0aGlzLnZhbHVlO1xuXHRcdGlmICghTWF0cml4My5lcXVhbHModiwgdGhpcy5fdmFsdWUpKSB7XG5cdFx0XHRNYXRyaXgzLmNsb25lKHYsIHRoaXMuX3ZhbHVlKTtcblx0XHRcdHRoaXMuc2V0QnVmZmVyKHRoaXMuX3ZhbHVlLnRvQXJyYXkoKSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5leHBvcnQgY2xhc3MgVW5pZm9ybU1hdDQgZXh0ZW5kcyBVbmlmb3JtPE1hdHJpeDQ+IHtcblx0c3RhdGljIGFsaWduID0gMTY7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXG5cdFx0YnVmZmVyOiBGbG9hdDMyQXJyYXksXG5cdFx0Ynl0ZU9mZnNldDogbnVtYmVyLFxuXHRcdGNiOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCxcblx0XHRiaW5kaW5nPzogbnVtYmVyLFxuXHRcdG9mZnNldD86IG51bWJlclxuXHQpIHtcblx0XHRzdXBlcih1bmlmb3JtTmFtZSwgY2IsIGJpbmRpbmcsIG9mZnNldCk7XG5cdFx0dGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLl92YWx1ZSA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIDE2KTtcblx0XHR0aGlzLmJ5dGVTaXplID0gNjQ7XG5cdFx0dGhpcy50eXBlID0gXCJtYXQ0XCI7XG5cdH1cblx0c2V0KCk6IGJvb2xlYW4ge1xuXHRcdGlmICh0aGlzLmNiICE9IHVuZGVmaW5lZCkgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblx0XHRjb25zdCB2ID0gdGhpcy52YWx1ZTtcblx0XHRpZiAoIU1hdHJpeDQuZXF1YWxzKHYsIHRoaXMuX3ZhbHVlKSkge1xuXHRcdFx0TWF0cml4NC5jbG9uZSh2LCB0aGlzLl92YWx1ZSk7XG5cdFx0XHR0aGlzLnNldEJ1ZmZlcih0aGlzLl92YWx1ZS50b0FycmF5KCkpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuZXhwb3J0IGNsYXNzIFVuaWZvcm1GbG9hdEFycmF5IGV4dGVuZHMgVW5pZm9ybTxBcnJheTxudW1iZXI+PiB7XG5cdHN0YXRpYyBhbGlnbiA9IDQ7XG5cdGNiOiBGdW5jdGlvbjtcblx0Y29uc3RydWN0b3IoXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXG5cdFx0Y2I6IEZ1bmN0aW9uLFxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXG5cdFx0b2Zmc2V0PzogbnVtYmVyLFxuXHRcdGNvdW50PzogbnVtYmVyXG5cdCkge1xuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5WZXJ0ZXggfCBTaGFkZXJTdGFnZS5GcmFnbWVudDtcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgY291bnQpO1xuXHRcdHRoaXMuYnl0ZVNpemUgPSA0ICogY291bnQ7XG5cdFx0dGhpcy50eXBlID0gXCJmbG9hdC1hcnJheVwiO1xuXHR9XG5cdHNldCgpOiBib29sZWFuIHtcblx0XHR0aGlzLnZhbHVlID0gdGhpcy5jYigpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5idWZmZXJbaV0gPSB0aGlzLnZhbHVlW2ldO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufVxuZXhwb3J0IGNsYXNzIFVuaWZvcm1WZWMyQXJyYXkgZXh0ZW5kcyBVbmlmb3JtPEFycmF5PFZlY3RvcjI+PiB7XG5cdHN0YXRpYyBhbGlnbiA9IDg7XG5cdGNiOiBGdW5jdGlvbjtcblx0Y29uc3RydWN0b3IoXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXG5cdFx0Y2I6IEZ1bmN0aW9uLFxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXG5cdFx0b2Zmc2V0PzogbnVtYmVyLFxuXHRcdGNvdW50PzogbnVtYmVyXG5cdCkge1xuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5WZXJ0ZXggfCBTaGFkZXJTdGFnZS5GcmFnbWVudDtcblx0XHR0aGlzLmJ5dGVTaXplID0gY291bnQgKiA4O1xuXHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIuYnVmZmVyLCBieXRlT2Zmc2V0LCB0aGlzLmJ5dGVTaXplIC8gNCk7XG5cdFx0dGhpcy50eXBlID0gXCJ2ZWMyLWFycmF5XCI7XG5cdH1cblx0c2V0KCk6IGJvb2xlYW4ge1xuXHRcdHRoaXMudmFsdWUgPSB0aGlzLmNiKCk7XG5cdFx0bGV0IGogPSAwO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5idWZmZXJbal0gPSB0aGlzLnZhbHVlW2ldLng7XG5cdFx0XHR0aGlzLmJ1ZmZlcltqICsgMV0gPSB0aGlzLnZhbHVlW2ldLnk7XG5cdFx0XHRqICs9IDI7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59XG5leHBvcnQgY2xhc3MgVW5pZm9ybVZlYzNBcnJheSBleHRlbmRzIFVuaWZvcm08QXJyYXk8VmVjdG9yMz4+IHtcblx0c3RhdGljIGFsaWduID0gMTY7XG5cdGNiOiBGdW5jdGlvbjtcblx0Y29uc3RydWN0b3IoXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXG5cdFx0Y2I6IEZ1bmN0aW9uLFxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXG5cdFx0b2Zmc2V0PzogbnVtYmVyLFxuXHRcdGNvdW50PzogbnVtYmVyXG5cdCkge1xuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5WZXJ0ZXggfCBTaGFkZXJTdGFnZS5GcmFnbWVudDtcblx0XHR0aGlzLmJ5dGVTaXplID0gY291bnQgKiAxNjtcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgdGhpcy5ieXRlU2l6ZSAvIDQpO1xuXHRcdHRoaXMudHlwZSA9IFwidmVjMy1hcnJheVwiO1xuXHR9XG5cdHNldCgpOiBib29sZWFuIHtcblx0XHR0aGlzLnZhbHVlID0gdGhpcy5jYigpO1xuXHRcdGxldCBqID0gMDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsdWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRoaXMuYnVmZmVyW2pdID0gdGhpcy52YWx1ZVtpXS54O1xuXHRcdFx0dGhpcy5idWZmZXJbaiArIDFdID0gdGhpcy52YWx1ZVtpXS55O1xuXHRcdFx0dGhpcy5idWZmZXJbaiArIDJdID0gdGhpcy52YWx1ZVtpXS56O1xuXHRcdFx0dGhpcy5idWZmZXJbaiArIDNdID0gMDtcblx0XHRcdGogKz0gNDtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn1cbmV4cG9ydCBjbGFzcyBVbmlmb3JtVmVjNEFycmF5IGV4dGVuZHMgVW5pZm9ybTxBcnJheTxWZWN0b3I0Pj4ge1xuXHRzdGF0aWMgYWxpZ24gPSAxNjtcblx0Y2I6IEZ1bmN0aW9uO1xuXHRjb25zdHJ1Y3Rvcihcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxuXHRcdGJ5dGVPZmZzZXQ6IG51bWJlcixcblx0XHRjYjogRnVuY3Rpb24sXG5cdFx0YmluZGluZz86IG51bWJlcixcblx0XHRvZmZzZXQ/OiBudW1iZXIsXG5cdFx0Y291bnQ/OiBudW1iZXJcblx0KSB7XG5cdFx0c3VwZXIodW5pZm9ybU5hbWUsIGNiLCBiaW5kaW5nLCBvZmZzZXQpO1xuXHRcdHRoaXMudmlzaWJpbGl0eSA9IFNoYWRlclN0YWdlLlZlcnRleCB8IFNoYWRlclN0YWdlLkZyYWdtZW50O1xuXHRcdHRoaXMuYnl0ZVNpemUgPSBjb3VudCAqIDE2O1xuXHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIuYnVmZmVyLCBieXRlT2Zmc2V0LCB0aGlzLmJ5dGVTaXplIC8gNCk7XG5cdFx0dGhpcy50eXBlID0gXCJ2ZWM0LWFycmF5XCI7XG5cdH1cblx0c2V0KCk6IGJvb2xlYW4ge1xuXHRcdHRoaXMudmFsdWUgPSB0aGlzLmNiKCk7XG5cdFx0bGV0IGogPSAwO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5idWZmZXJbal0gPSB0aGlzLnZhbHVlW2ldLng7XG5cdFx0XHR0aGlzLmJ1ZmZlcltqICsgMV0gPSB0aGlzLnZhbHVlW2ldLnk7XG5cdFx0XHR0aGlzLmJ1ZmZlcltqICsgMl0gPSB0aGlzLnZhbHVlW2ldLno7XG5cdFx0XHR0aGlzLmJ1ZmZlcltqICsgM10gPSB0aGlzLnZhbHVlW2ldLnc7XG5cdFx0XHRqICs9IDQ7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59XG5leHBvcnQgY2xhc3MgVW5pZm9ybVRleHR1cmUgZXh0ZW5kcyBVbmlmb3JtPFRleHR1cmU+IHtcblx0cHVibGljIGJpbmRpbmc6IG51bWJlcjtcblx0cHVibGljIHR5cGU6IHN0cmluZztcblx0cHVibGljIHZpc2liaWxpdHk6IFNoYWRlclN0YWdlO1xuXHRwdWJsaWMgbmFtZTogc3RyaW5nO1xuXHRwdWJsaWMgdGV4dHVyZTogVGV4dHVyZTtcblx0cHJpdmF0ZSBfdGV4dHVyZTogRnVuY3Rpb24gfCBUZXh0dXJlO1xuXHRjb25zdHJ1Y3Rvcih1bmlmb3JtTmFtZTogc3RyaW5nLCBiaW5kaW5nOiBudW1iZXIsIHRleHR1cmU6IEZ1bmN0aW9uIHwgVGV4dHVyZSkge1xuXHRcdHN1cGVyKHVuaWZvcm1OYW1lKTtcblx0XHR0aGlzLmJpbmRpbmcgPSBiaW5kaW5nO1xuXHRcdHRoaXMudHlwZSA9IFwidGV4dHVyZVwiO1xuXHRcdHRoaXMudmlzaWJpbGl0eSA9IFNoYWRlclN0YWdlLkZyYWdtZW50O1xuXHRcdHRoaXMuX3RleHR1cmUgPSB0ZXh0dXJlO1xuXHR9XG5cdGdldCBsYXlvdXRUeXBlKCkge1xuXHRcdHJldHVybiB0aGlzLnRleHR1cmUubGF5b3V0VHlwZTtcblx0fVxuXHRiaW5kKGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHR0aGlzLnRleHR1cmUgPSB0aGlzLl90ZXh0dXJlIGluc3RhbmNlb2YgRnVuY3Rpb24gPyB0aGlzLl90ZXh0dXJlKCkgOiB0aGlzLl90ZXh0dXJlO1xuXHRcdHRoaXMudGV4dHVyZS51cGRhdGUoY29udGV4dCk7XG5cdH1cbn1cbmV4cG9ydCBjbGFzcyBVbmlmb3JtU2FtcGxlciBleHRlbmRzIFVuaWZvcm08U2FtcGxlcj4ge1xuXHRwdWJsaWMgYmluZGluZzogbnVtYmVyO1xuXHRwdWJsaWMgdHlwZTogc3RyaW5nO1xuXHRwdWJsaWMgdmlzaWJpbGl0eTogU2hhZGVyU3RhZ2U7XG5cdHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cdHB1YmxpYyBzYW1wbGVyOiBUZXh0dXJlO1xuXHRwcml2YXRlIF9zYW1wbGVyOiBGdW5jdGlvbiB8IFNhbXBsZXI7XG5cdGNvbnN0cnVjdG9yKHVuaWZvcm1OYW1lOiBzdHJpbmcsIGJpbmRpbmc6IG51bWJlciwgc2FtcGxlcjogRnVuY3Rpb24gfCBTYW1wbGVyKSB7XG5cdFx0c3VwZXIodW5pZm9ybU5hbWUpO1xuXHRcdHRoaXMubmFtZSA9IHVuaWZvcm1OYW1lO1xuXHRcdHRoaXMuYmluZGluZyA9IGJpbmRpbmc7XG5cdFx0dGhpcy50eXBlID0gXCJzYW1wbGVyXCI7XG5cdFx0dGhpcy52aXNpYmlsaXR5ID0gU2hhZGVyU3RhZ2UuRnJhZ21lbnQ7XG5cdFx0dGhpcy5fc2FtcGxlciA9IHNhbXBsZXI7XG5cdH1cblx0Z2V0IGxheW91dFR5cGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2FtcGxlci5sYXlvdXRUeXBlO1xuXHR9XG5cdGJpbmQoY29udGV4dDogQ29udGV4dCkge1xuXHRcdHRoaXMuc2FtcGxlciA9IHRoaXMuX3NhbXBsZXIgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IHRoaXMuX3NhbXBsZXIoKSA6IHRoaXMuX3NhbXBsZXI7XG5cdFx0dGhpcy5zYW1wbGVyLnVwZGF0ZShjb250ZXh0KTtcblx0fVxufVxuZXhwb3J0IGNsYXNzIFVuaWZvcm1MaWdodCBleHRlbmRzIFVuaWZvcm08TGlnaHQ+IHtcblx0YnVmZmVyU2l6ZTogbnVtYmVyO1xuXHRidWZmZXI6IFVuaWZvcm1CdWZmZXI7XG5cdGNvbnN0cnVjdG9yKHVuaWZvcm1OYW1lOiBzdHJpbmcsIGJpbmRpbmc6IG51bWJlciwgYnVmZmVyOiBCdWZmZXIgfCBGdW5jdGlvbiB8IE9iamVjdCwgc2l6ZTogbnVtYmVyKSB7XG5cdFx0c3VwZXIodW5pZm9ybU5hbWUpO1xuXHRcdHRoaXMuY2IgPSBidWZmZXI7XG5cdFx0dGhpcy5iaW5kaW5nID0gYmluZGluZztcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5GcmFnbWVudDtcblx0XHR0aGlzLmJ1ZmZlclNpemUgPSBzaXplO1xuXHR9XG5cdHNldCgpIHtcblx0XHR0aGlzLmJ1ZmZlciA9IHRoaXMuZ2V0VmFsdWUoKTtcblx0fVxufVxuZXhwb3J0IGNsYXNzIFVuaWZvcm1TcG90TGlnaHRzIGV4dGVuZHMgVW5pZm9ybTxTcG90TGlnaHQ+IHtcblx0c3RhdGljIGFsaWduID0gMTY7XG5cdGxpZ2h0czogQXJyYXk8U3BvdExpZ2h0Pjtcblx0Y2I6IEZ1bmN0aW9uO1xuXHRjb25zdHJ1Y3Rvcihcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxuXHRcdGJ5dGVPZmZzZXQ6IG51bWJlcixcblx0XHRjYjogRnVuY3Rpb24sXG5cdFx0YmluZGluZz86IG51bWJlcixcblx0XHRvZmZzZXQ/OiBudW1iZXIsXG5cdFx0Y291bnQ/OiBudW1iZXJcblx0KSB7XG5cdFx0c3VwZXIodW5pZm9ybU5hbWUsIGNiLCBiaW5kaW5nLCBvZmZzZXQpO1xuXHRcdHRoaXMuY2IgPSBjYjtcblx0XHR0aGlzLmJ5dGVTaXplID0gY291bnQgKiA2NDtcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgdGhpcy5ieXRlU2l6ZSAvIDQpO1xuXHRcdHRoaXMudHlwZSA9IFwic3BvdHNMaWdodFwiO1xuXHRcdHRoaXMudmlzaWJpbGl0eSA9IFNoYWRlclN0YWdlLkZyYWdtZW50O1xuXHR9XG5cdHNldCgpIHtcblx0XHR0aGlzLmxpZ2h0cyA9IHRoaXMuY2IoKTtcblx0XHR0aGlzLmxpZ2h0cy5mb3JFYWNoKChzcG90TGlnaHQsIGluZGV4KSA9PiB7XG5cdFx0XHR0aGlzLnNldFN1YkRhdGEoc3BvdExpZ2h0LCBpbmRleCk7XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBzZXRTdWJEYXRhKHNwb3RMaWdodDogU3BvdExpZ2h0LCBpbmRleDogbnVtYmVyKSB7XG5cdFx0Y29uc3Qgb2Zmc2V0ID0gaW5kZXggKiAxNjtcblx0XHRpZiAoc3BvdExpZ2h0LnBvc2l0aW9uRGlydHkpIHtcblx0XHRcdHNwb3RMaWdodC5wb3NpdGlvbkRpcnR5ID0gZmFsc2U7XG5cdFx0XHRzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHNwb3RMaWdodC5wb3NpdGlvblZDLnRvQXJyYXkoKSwgb2Zmc2V0ICsgMCk7IC8vYnl0ZU9mZnNldD0wO1xuXHRcdH1cblx0XHRpZiAoc3BvdExpZ2h0LmRpc3RhbmNlRGlydHkpIHtcblx0XHRcdHNwb3RMaWdodC5kaXN0YW5jZURpcnR5ID0gZmFsc2U7XG5cdFx0XHRzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHNwb3RMaWdodC5kaXN0YW5jZSwgb2Zmc2V0ICsgMyk7IC8vYnl0ZU9mZnNldD0xMjtcblx0XHR9XG5cdFx0aWYgKHNwb3RMaWdodC5kaXJ0ZWN0RGlydHkpIHtcblx0XHRcdHNwb3RMaWdodC5kaXJ0ZWN0RGlydHkgPSBmYWxzZTtcblx0XHRcdHNldERhdGFUb1R5cGVBcnJheSh0aGlzLmJ1ZmZlciwgc3BvdExpZ2h0LmRpcnRlY3RWQy50b0FycmF5KCksIG9mZnNldCArIDQpOyAvL2J5dGVPZmZzZXQ9MTY7XG5cdFx0fVxuXHRcdGlmIChzcG90TGlnaHQuY29uZUNvc0RpcnR5KSB7XG5cdFx0XHRzcG90TGlnaHQuY29uZUNvc0RpcnR5ID0gZmFsc2U7XG5cdFx0XHRzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHNwb3RMaWdodC5jb25lQ29zLCBvZmZzZXQgKyA3KTsgLy9ieXRlT2Zmc2V0PTI4O1xuXHRcdH1cblx0XHRpZiAoc3BvdExpZ2h0LmNvbG9yRGlydHkpIHtcblx0XHRcdHNwb3RMaWdodC5jb2xvckRpcnR5ID0gZmFsc2U7XG5cdFx0XHRzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHNwb3RMaWdodC5jb2xvci50b0FycmF5KCksIG9mZnNldCArIDgpOyAvL2J5dGVPZmZzZXQ9MzI7XG5cdFx0fVxuXHRcdGlmIChzcG90TGlnaHQucGVudW1icmFDb3NEaXJ0eSkge1xuXHRcdFx0c3BvdExpZ2h0LnBlbnVtYnJhQ29zRGlydHkgPSBmYWxzZTtcblx0XHRcdHNldERhdGFUb1R5cGVBcnJheSh0aGlzLmJ1ZmZlciwgc3BvdExpZ2h0LnBlbnVtYnJhQ29zLCBvZmZzZXQgKyAxMSk7IC8vYnl0ZU9mZnNldD00NDtcblx0XHR9XG5cdFx0aWYgKHNwb3RMaWdodC5kZWNheURpcnR5KSB7XG5cdFx0XHRzcG90TGlnaHQuZGVjYXlEaXJ0eSA9IGZhbHNlO1xuXHRcdFx0c2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBzcG90TGlnaHQuZGVjYXksIG9mZnNldCArIDEyKTsgLy9ieXRlT2Zmc2V0PTQ4O1xuXHRcdH1cblx0fVxufVxuZXhwb3J0IGNsYXNzIFVuaWZvcm1Qb2ludExpZ2h0cyBleHRlbmRzIFVuaWZvcm08UG9pbnRMaWdodD4ge1xuXHRzdGF0aWMgYWxpZ24gPSAxNjtcblx0bGlnaHRzOiBBcnJheTxQb2ludExpZ2h0Pjtcblx0Y2I6IEZ1bmN0aW9uO1xuXHRjb25zdHJ1Y3Rvcihcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxuXHRcdGJ1ZmZlcjogRmxvYXQzMkFycmF5LFxuXHRcdGJ5dGVPZmZzZXQ6IG51bWJlcixcblx0XHRjYjogRnVuY3Rpb24sXG5cdFx0YmluZGluZz86IG51bWJlcixcblx0XHRvZmZzZXQ/OiBudW1iZXIsXG5cdFx0Y291bnQ/OiBudW1iZXJcblx0KSB7XG5cdFx0c3VwZXIodW5pZm9ybU5hbWUsIGNiLCBiaW5kaW5nLCBvZmZzZXQpO1xuXHRcdHRoaXMuY2IgPSBjYjtcblx0XHR0aGlzLmJ5dGVTaXplID0gY291bnQgKiAzMjtcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnl0ZU9mZnNldCwgdGhpcy5ieXRlU2l6ZSAvIDQpO1xuXHRcdHRoaXMudHlwZSA9IFwicG9pbnRzTGlnaHRcIjtcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5GcmFnbWVudDtcblx0fVxuXHRzZXQoKSB7XG5cdFx0dGhpcy5saWdodHMgPSB0aGlzLmNiKCk7XG5cdFx0dGhpcy5saWdodHMuZm9yRWFjaCgocG9pbnRMaWdodCwgaW5kZXgpID0+IHtcblx0XHRcdHRoaXMuc2V0U3ViRGF0YShwb2ludExpZ2h0LCBpbmRleCk7XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBzZXRTdWJEYXRhKHBvaW50TGlnaHQ6IFBvaW50TGlnaHQsIGluZGV4OiBudW1iZXIpIHtcblx0XHRjb25zdCBvZmZzZXQgPSBpbmRleCAqIDg7XG5cdFx0aWYgKHBvaW50TGlnaHQucG9zaXRpb25EaXJ0eSkge1xuXHRcdFx0cG9pbnRMaWdodC5wb3NpdGlvbkRpcnR5ID0gZmFsc2U7XG5cdFx0XHRzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHBvaW50TGlnaHQucG9zaXRpb25WQy50b0FycmF5KCksIG9mZnNldCArIDApOyAvL2J5dGVPZmZzZXQ9MDtcblx0XHR9XG5cdFx0aWYgKHBvaW50TGlnaHQuZGlzdGFuY2VEaXJ0eSkge1xuXHRcdFx0cG9pbnRMaWdodC5kaXN0YW5jZURpcnR5ID0gZmFsc2U7XG5cdFx0XHRzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHBvaW50TGlnaHQuZGlzdGFuY2UsIG9mZnNldCArIDMpOyAvL2J5dGVPZmZzZXQ9MTI7XG5cdFx0fVxuXHRcdGlmIChwb2ludExpZ2h0LmNvbG9yRGlydHkpIHtcblx0XHRcdHBvaW50TGlnaHQuY29sb3JEaXJ0eSA9IGZhbHNlO1xuXHRcdFx0c2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBwb2ludExpZ2h0LmNvbG9yLnRvQXJyYXkoKSwgb2Zmc2V0ICsgNCk7IC8vYnl0ZU9mZnNldD0zMjtcblx0XHR9XG5cdFx0aWYgKHBvaW50TGlnaHQuZGVjYXlEaXJ0eSkge1xuXHRcdFx0cG9pbnRMaWdodC5kZWNheURpcnR5ID0gZmFsc2U7XG5cdFx0XHRzZXREYXRhVG9UeXBlQXJyYXkodGhpcy5idWZmZXIsIHBvaW50TGlnaHQuZGVjYXksIG9mZnNldCArIDcpOyAvL2J5dGVPZmZzZXQ9MTI7XG5cdFx0fVxuXHR9XG59XG5leHBvcnQgY2xhc3MgVW5pZm9ybURpcnRlY3RMaWdodHMgZXh0ZW5kcyBVbmlmb3JtPERpcmVjdGlvbmFsTGlnaHQ+IHtcblx0c3RhdGljIGFsaWduID0gMTY7XG5cdGxpZ2h0czogQXJyYXk8RGlyZWN0aW9uYWxMaWdodD47XG5cdGNiOiBGdW5jdGlvbjtcblx0Y29uc3RydWN0b3IoXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcblx0XHRidWZmZXI6IEZsb2F0MzJBcnJheSxcblx0XHRieXRlT2Zmc2V0OiBudW1iZXIsXG5cdFx0Y2I6IEZ1bmN0aW9uLFxuXHRcdGJpbmRpbmc/OiBudW1iZXIsXG5cdFx0b2Zmc2V0PzogbnVtYmVyLFxuXHRcdGNvdW50PzogbnVtYmVyXG5cdCkge1xuXHRcdHN1cGVyKHVuaWZvcm1OYW1lLCBjYiwgYmluZGluZywgb2Zmc2V0KTtcblx0XHR0aGlzLmNiID0gY2I7XG5cdFx0dGhpcy5ieXRlU2l6ZSA9IGNvdW50ICogMzI7XG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5idWZmZXIsIGJ5dGVPZmZzZXQsIHRoaXMuYnl0ZVNpemUgLyA0KTtcblx0XHR0aGlzLnR5cGUgPSBcImRpcnRlY3RMaWdodHNcIjtcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5GcmFnbWVudDtcblx0fVxuXHRzZXQoKSB7XG5cdFx0dGhpcy5saWdodHMgPSB0aGlzLmNiKCk7XG5cdFx0dGhpcy5saWdodHMuZm9yRWFjaCgoZGlyZWN0aW9uYWxMaWdodCwgaW5kZXgpID0+IHtcblx0XHRcdHRoaXMuc2V0U3ViRGF0YShkaXJlY3Rpb25hbExpZ2h0LCBpbmRleCk7XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBzZXRTdWJEYXRhKGRpcmVjdGlvbmFsTGlnaHQ6IERpcmVjdGlvbmFsTGlnaHQsIGluZGV4OiBudW1iZXIpIHtcblx0XHRjb25zdCBvZmZzZXQgPSBpbmRleCAqIDg7XG5cdFx0aWYgKGRpcmVjdGlvbmFsTGlnaHQuZGlydGVjdERpcnR5KSB7XG5cdFx0XHRkaXJlY3Rpb25hbExpZ2h0LmRpcnRlY3REaXJ0eSA9IGZhbHNlO1xuXHRcdFx0c2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBkaXJlY3Rpb25hbExpZ2h0LmRpcnRlY3RWQy50b0FycmF5KCksIG9mZnNldCArIDApOyAvL2J5dGVPZmZzZXQ9MTY7XG5cdFx0fVxuXHRcdGlmIChkaXJlY3Rpb25hbExpZ2h0LmNvbG9yRGlydHkpIHtcblx0XHRcdGRpcmVjdGlvbmFsTGlnaHQuY29sb3JEaXJ0eSA9IGZhbHNlO1xuXHRcdFx0c2V0RGF0YVRvVHlwZUFycmF5KHRoaXMuYnVmZmVyLCBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yLnRvQXJyYXkoKSwgb2Zmc2V0ICsgNCk7IC8vYnl0ZU9mZnNldD0zMjtcblx0XHR9XG5cdH1cbn1cbmZ1bmN0aW9uIHNldERhdGFUb1R5cGVBcnJheShidWZmZXIsIGRhdGEsIG9mZnNldCkge1xuXHRpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuXHRcdGRhdGEuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG5cdFx0XHRidWZmZXJbaW5kZXggKyBvZmZzZXRdID0gdmFsdWU7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0YnVmZmVyW29mZnNldF0gPSBkYXRhO1xuXHR9XG59XG4iLCJpbXBvcnQge1xyXG4gIEJpbmRHcm91cEVudGl0eU9wdGlvbnMsXHJcbiAgQmluZEdyb3VwRW50aXR5UmVzb3VyY2VUeXBlLFxyXG59IGZyb20gXCIuLi9jb3JlL1dlYkdQVVR5cGVzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpbmRHcm91cEVudGl0eSB7XHJcbiAgYmluZGluZzogbnVtYmVyO1xyXG4gIHJlc291cmNlOiBHUFVCaW5kaW5nUmVzb3VyY2U7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9uczogQmluZEdyb3VwRW50aXR5T3B0aW9ucykge1xyXG4gICAgdGhpcy5iaW5kaW5nID0gb3B0aW9ucy5iaW5kaW5nO1xyXG4gICAgdGhpcy5yZXNvdXJjZSA9IG9wdGlvbnMucmVzb3VyY2U7XHJcbiAgfVxyXG4gIHB1YmxpYyBnZXRHUFVHcm91cEVudGl0eSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGJpbmRpbmc6IHRoaXMuYmluZGluZyxcclxuICAgICAgcmVzb3VyY2U6IHRoaXMucmVzb3VyY2UsXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCaW5kR3JvdXBMYXlvdXRFbnRyeVR5cGUgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaW5kR3JvdXBMYXlvdXRFbnRyeSB7XHJcbiAgYmluZGluZzogbnVtYmVyO1xyXG4gIHZpc2liaWxpdHk6IEdQVVNoYWRlclN0YWdlRmxhZ3M7XHJcbiAgdW5pZm9ybXM/OiBhbnlbXTtcclxuICBidWZmZXI/OiBHUFVCdWZmZXJCaW5kaW5nTGF5b3V0O1xyXG4gIHNhbXBsZXI/OiBHUFVTYW1wbGVyQmluZGluZ0xheW91dDtcclxuICB0ZXh0dXJlPzogR1BVVGV4dHVyZUJpbmRpbmdMYXlvdXQ7XHJcbiAgc3RvcmFnZVRleHR1cmU/OiBHUFVTdG9yYWdlVGV4dHVyZUJpbmRpbmdMYXlvdXQ7XHJcbiAgZXh0ZXJuYWxUZXh0dXJlPzogR1BVRXh0ZXJuYWxUZXh0dXJlQmluZGluZ0xheW91dDtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBCaW5kR3JvdXBMYXlvdXRFbnRyeVR5cGUpIHtcclxuICAgIHRoaXMuYmluZGluZyA9IG9wdGlvbnMuYmluZGluZztcclxuICAgIHRoaXMudmlzaWJpbGl0eSA9IG9wdGlvbnMudmlzaWJpbGl0eTtcclxuICAgIHRoaXMuYnVmZmVyID0gb3B0aW9ucy5idWZmZXI7XHJcbiAgICB0aGlzLnNhbXBsZXIgPSBvcHRpb25zLnNhbXBsZXI7XHJcbiAgICB0aGlzLnRleHR1cmUgPSBvcHRpb25zLnRleHR1cmU7XHJcbiAgICB0aGlzLnN0b3JhZ2VUZXh0dXJlID0gb3B0aW9ucy5zdG9yYWdlVGV4dHVyZTtcclxuICAgIHRoaXMuZXh0ZXJuYWxUZXh0dXJlID0gb3B0aW9ucy5zdG9yYWdlVGV4dHVyZTtcclxuICB9XHJcbiAgZ2V0R1BVTGF5b3V0RW50aXR5KCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYmluZGluZzogdGhpcy5iaW5kaW5nLFxyXG4gICAgICB2aXNpYmlsaXR5OiB0aGlzLnZpc2liaWxpdHksXHJcbiAgICAgIGJ1ZmZlcjogdGhpcy5idWZmZXIsXHJcbiAgICAgIHNhbXBsZXI6IHRoaXMuc2FtcGxlcixcclxuICAgICAgdGV4dHVyZTogdGhpcy50ZXh0dXJlLFxyXG4gICAgICBzdG9yYWdlVGV4dHVyZTogdGhpcy5zdG9yYWdlVGV4dHVyZSxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJ1ZmZlckJpbmRpbmdUeXBlIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcbmltcG9ydCBCaW5kR3JvdXBMYXlvdXRFbnRyeSBmcm9tIFwiLi9CaW5kR3JvdXBMYXlvdXRFbnRyeVwiO1xuY29uc3QgbGF5b3V0Q2FjaGUgPSBuZXcgTWFwKCk7XG5jbGFzcyBCaW5kR3JvdXBMYXlvdXQge1xuXHRwdWJsaWMgZ3B1QmluZEdyb3VwTGF5b3V0OiBHUFVCaW5kR3JvdXBMYXlvdXQ7XG5cdGluZGV4OiBudW1iZXI7XG5cdHByaXZhdGUgY29uc3RydWN0b3IoXG5cdFx0ZGV2aWNlOiBHUFVEZXZpY2UsXG5cdFx0bGFiZWw6IHN0cmluZyxcblx0XHRwdWJsaWMgZW50cmllczogQmluZEdyb3VwTGF5b3V0RW50cnlbXSA9IFtdLFxuXHRcdGluZGV4OiBudW1iZXIgPSAwXG5cdCkge1xuXHRcdHRoaXMuaW5kZXggPSBpbmRleCB8fCAwO1xuXHRcdHRoaXMuZ3B1QmluZEdyb3VwTGF5b3V0ID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cExheW91dCh7XG5cdFx0XHRsYWJlbDogbGFiZWwsXG5cdFx0XHRlbnRyaWVzOiBlbnRyaWVzLm1hcCgoeyB2aXNpYmlsaXR5LCBidWZmZXIsIHNhbXBsZXIsIHRleHR1cmUsIHN0b3JhZ2VUZXh0dXJlLCBiaW5kaW5nIH0pID0+ICh7XG5cdFx0XHRcdGJpbmRpbmcsXG5cdFx0XHRcdHZpc2liaWxpdHksXG5cdFx0XHRcdGJ1ZmZlcixcblx0XHRcdFx0c2FtcGxlcixcblx0XHRcdFx0dGV4dHVyZSxcblx0XHRcdFx0c3RvcmFnZVRleHR1cmVcblx0XHRcdH0pKVxuXHRcdH0pO1xuXHR9XG5cdHN0YXRpYyBnZXRCaW5kR3JvdXBMYXlvdXRGcm9tQ2FjaGUoXG5cdFx0ZGV2aWNlOiBHUFVEZXZpY2UsXG5cdFx0bGFiZWw6IHN0cmluZyxcblx0XHRlbnRpcmVzOiBCaW5kR3JvdXBMYXlvdXRFbnRyeVtdLFxuXHRcdGluZGV4XG5cdCk6IEJpbmRHcm91cExheW91dCB7XG5cdFx0aWYgKGxheW91dENhY2hlLmhhcyhsYWJlbCkpIHtcblx0XHRcdHJldHVybiBsYXlvdXRDYWNoZS5nZXQobGFiZWwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBiaW5kR3JvdXBMYXlvdXQgPSBuZXcgQmluZEdyb3VwTGF5b3V0KGRldmljZSwgbGFiZWwsIGVudGlyZXMsIGluZGV4KTtcblx0XHRcdGxheW91dENhY2hlLnNldChsYWJlbCwgYmluZEdyb3VwTGF5b3V0KTtcblx0XHRcdHJldHVybiBiaW5kR3JvdXBMYXlvdXQ7XG5cdFx0fVxuXHR9XG5cdHN0YXRpYyByZW1vdmVCaW5kR3JvdXBMYXlvdXRGcm9tQ2FjaGUoYmluZEdyb3VwTGF5b3V0OiBCaW5kR3JvdXBMYXlvdXQpIHtcblx0XHRsYXlvdXRDYWNoZS5kZWxldGUoYmluZEdyb3VwTGF5b3V0KTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBCaW5kR3JvdXBMYXlvdXQ7XG4iLCJpbXBvcnQgeyBCaW5kR3JvdXBDYWNoZU9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xuY29uc3QgYmluZEdyb3VwQ2FjaGUgPSBuZXcgTWFwKCk7XG5jbGFzcyBCaW5kR3JvdXAge1xuXHRkZXZpY2U6IEdQVURldmljZTtcblx0Z3B1QmluZEdyb3VwOiBHUFVCaW5kR3JvdXA7XG5cdGxhYmVsOiBzdHJpbmc7XG5cdGluZGV4OiBudW1iZXI7XG5cdGRpcnR5OiBib29sZWFuO1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zOiBCaW5kR3JvdXBDYWNoZU9wdGlvbnMpIHtcblx0XHR0aGlzLmluZGV4ID0gb3B0aW9ucy5pbmRleCB8fCAwO1xuXHRcdHRoaXMuZ3B1QmluZEdyb3VwID0gb3B0aW9ucy5kZXZpY2UuY3JlYXRlQmluZEdyb3VwKHtcblx0XHRcdGxhYmVsOiBvcHRpb25zLmxhYmVsLFxuXHRcdFx0bGF5b3V0OiBvcHRpb25zLmxheW91dC5ncHVCaW5kR3JvdXBMYXlvdXQsXG5cdFx0XHRlbnRyaWVzOiBvcHRpb25zLmVudGlyZXMubWFwKChlbnRpdHkpID0+ICh7XG5cdFx0XHRcdGJpbmRpbmc6IGVudGl0eS5iaW5kaW5nLFxuXHRcdFx0XHRyZXNvdXJjZTogZW50aXR5LnJlc291cmNlXG5cdFx0XHR9KSlcblx0XHR9KTtcblx0fVxuXHRiaW5kKHBhc3NFbmNvZGVyOiBHUFVSZW5kZXJQYXNzRW5jb2Rlcikge1xuXHRcdHBhc3NFbmNvZGVyLnNldEJpbmRHcm91cCh0aGlzLmluZGV4LCB0aGlzLmdwdUJpbmRHcm91cCk7XG5cdH1cblx0c3RhdGljIGdldEJpbmRHcm91cEZyb21DYWNoZShvcHRpb25zOiBCaW5kR3JvdXBDYWNoZU9wdGlvbnMpOiBCaW5kR3JvdXAge1xuXHRcdGlmIChiaW5kR3JvdXBDYWNoZS5oYXMob3B0aW9ucy5sYWJlbCkpIHtcblx0XHRcdHJldHVybiBiaW5kR3JvdXBDYWNoZS5nZXQob3B0aW9ucy5sYWJlbCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vQHRzLWlnbm9yZVxuXHRcdFx0Y29uc3QgYmluZEdyb3VwID0gbmV3IEJpbmRHcm91cChvcHRpb25zKTtcblx0XHRcdGJpbmRHcm91cENhY2hlLnNldChvcHRpb25zLmxhYmVsLCBiaW5kR3JvdXApO1xuXHRcdFx0cmV0dXJuIGJpbmRHcm91cDtcblx0XHR9XG5cdH1cblx0c3RhdGljIHJlbW92ZUJpbmRHcm91cEZyb21DYWNoZShiaW5kR3JvdXA6IEJpbmRHcm91cCkge1xuXHRcdGJpbmRHcm91cENhY2hlLmRlbGV0ZShiaW5kR3JvdXApO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJpbmRHcm91cDtcbiIsImltcG9ydCB7IFVuaWZvcm1TYW1wbGVyLCBVbmlmb3JtVGV4dHVyZSB9IGZyb20gXCIuL1VuaWZvcm1zXCI7XG5pbXBvcnQgQmluZEdyb3VwRW50aXR5IGZyb20gXCIuL0JpbmRHcm91cEVudGl0eVwiO1xuaW1wb3J0IEJpbmRHcm91cExheW91dEVudHJ5IGZyb20gXCIuL0JpbmRHcm91cExheW91dEVudHJ5XCI7XG5pbXBvcnQgQmluZEdyb3VwTGF5b3V0IGZyb20gXCIuL0JpbmRHcm91cExheW91dFwiO1xuaW1wb3J0IEJpbmRHcm91cCBmcm9tIFwiLi9CaW5kR3JvdXBcIjtcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vQ29udGV4dFwiO1xuaW1wb3J0IFVuaWZvcm1CdWZmZXIgZnJvbSBcIi4vVW5pZm9ybUJ1ZmZlclwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4vVGV4dHVyZVwiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4vU2FtcGxlclwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhZGVyRGF0YSB7XG5cdHVuaWZvcm1CdWZmZXI6IFVuaWZvcm1CdWZmZXI7XG5cblx0dGV4dHVyZUJpbmRpbmc6IG51bWJlcjtcblxuXHRkZWZpbmVzOiB7IFtwcm9wOiBzdHJpbmddOiBib29sZWFuIHwgbnVtYmVyIH07XG5cblx0ZGVmaW5lRGlydHk6IGJvb2xlYW47XG5cblx0bGFiZWw6IHN0cmluZztcblxuXHRiaW5kR3JvdXA6IEJpbmRHcm91cDtcblxuXHRncm91cExheW91dDogQmluZEdyb3VwTGF5b3V0O1xuXG5cdGxheW91dEluZGV4OiBudW1iZXI7XG5cblx0Z3JvdXBJbmRleDogbnVtYmVyO1xuXG5cdHByb3RlY3RlZCBfdW5pZm9ybXM6IE1hcDxzdHJpbmcsIGFueT47XG5cblx0Y29uc3RydWN0b3IobGFiZWw6IHN0cmluZywgc2l6ZT86IG51bWJlciwgbGF5b3V0SW5kZXg/OiBudW1iZXIsIGdyb3VwSW5kZXg/KSB7XG5cdFx0dGhpcy5sYWJlbCA9IGxhYmVsO1xuXHRcdHRoaXMudGV4dHVyZUJpbmRpbmcgPSAxO1xuXHRcdHRoaXMuZGVmaW5lRGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuZGVmaW5lcyA9IHt9O1xuXHRcdHRoaXMuX3VuaWZvcm1zID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMuZ3JvdXBJbmRleCA9IGRlZmF1bHRWYWx1ZShncm91cEluZGV4LCAwKTtcblx0XHR0aGlzLmxheW91dEluZGV4ID0gZGVmYXVsdFZhbHVlKGxheW91dEluZGV4LCAwKTtcblx0fVxuXHRzZXRVbmlmb3JtQnVmZmVyKG5hbWU6IHN0cmluZywgdW5pZm9ybUJ1ZmZlcjogVW5pZm9ybUJ1ZmZlcikge1xuXHRcdGlmICh0aGlzLl91bmlmb3Jtcy5nZXQobmFtZSkpIHJldHVybjtcblx0XHR0aGlzLl91bmlmb3Jtcy5zZXQobmFtZSwgdW5pZm9ybUJ1ZmZlcik7XG5cdH1cblx0c2V0VGV4dHVyZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBGdW5jdGlvbiB8IFRleHR1cmUsIGJpbmRpbmc/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5fdW5pZm9ybXMuZ2V0KG5hbWUpKSByZXR1cm47XG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtVGV4dHVyZShuYW1lLCB0aGlzLnRleHR1cmVCaW5kaW5nLCB2YWx1ZSk7XG5cdFx0dGhpcy5zZXREZWZpbmUobmFtZS5jb25jYXQoXCJCaW5kaW5nXCIpLCB0aGlzLnRleHR1cmVCaW5kaW5nKTtcblx0XHR0aGlzLnRleHR1cmVCaW5kaW5nICs9IDE7XG5cdFx0dGhpcy5fdW5pZm9ybXMuc2V0KG5hbWUsIHVuaWZvcm0pO1xuXHR9XG5cdHNldFNhbXBsZXIobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24gfCBTYW1wbGVyLCBiaW5kaW5nPzogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1zLmdldChuYW1lKSkgcmV0dXJuO1xuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVNhbXBsZXIobmFtZSwgdGhpcy50ZXh0dXJlQmluZGluZywgdmFsdWUpO1xuXHRcdHRoaXMuc2V0RGVmaW5lKG5hbWUuY29uY2F0KFwiQmluZGluZ1wiKSwgdGhpcy50ZXh0dXJlQmluZGluZyk7XG5cdFx0dGhpcy50ZXh0dXJlQmluZGluZyArPSAxO1xuXHRcdHRoaXMuX3VuaWZvcm1zLnNldChuYW1lLCB1bmlmb3JtKTtcblx0fVxuXHRzZXREZWZpbmUobmFtZTogc3RyaW5nLCB2YWx1ZTogYm9vbGVhbiB8IG51bWJlcikge1xuXHRcdGlmICh0aGlzLmRlZmluZXNbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5kZWZpbmVEaXJ0eSA9IHRydWU7XG5cdFx0XHR0aGlzLmRlZmluZXNbbmFtZV0gPSB2YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHRoaXMuZGVmaW5lc1tuYW1lXSA9PT0gdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5kZWZpbmVEaXJ0eSA9IHRydWU7XG5cdFx0XHRcdHRoaXMuZGVmaW5lc1tuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXBsYWNlVW5pZm9ybUJ1ZmZlclZhbHVlKG5hbWU6c3RyaW5nLHZhbHVlOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCl7XG5cdFx0dGhpcy5fdW5pZm9ybXMuZm9yRWFjaCgodW5pZm9ybSk9Pntcblx0XHRcdGlmKHVuaWZvcm0/LmlzVW5pZm9ybUJ1ZmZlcil7XG5cdFx0XHRcdHVuaWZvcm0ucmVwbGFjZVVuaWZvcm1WYWx1ZShuYW1lLHZhbHVlKVxuXHRcdFx0fVxuXHRcdH0pXG5cdH1cblx0YmluZChjb250ZXh0OiBDb250ZXh0LCBwYXNzRW5jb2RlcjogR1BVUmVuZGVyUGFzc0VuY29kZXIpIHtcblx0XHR0aGlzLnVwbG9hZFVuaWZvcm0oY29udGV4dCk7XG5cdFx0Y29uc3QgeyBncm91cExheW91dCwgYmluZEdyb3VwIH0gPSB0aGlzLmNyZWF0ZUJpbmRHcm91cEFuZExheW91dChcblx0XHRcdGNvbnRleHQuZGV2aWNlLFxuXHRcdFx0dGhpcy5sYWJlbCxcblx0XHRcdHRoaXMubGF5b3V0SW5kZXgsXG5cdFx0XHR0aGlzLmdyb3VwSW5kZXhcblx0XHQpO1xuXHRcdGJpbmRHcm91cC5iaW5kKHBhc3NFbmNvZGVyKTtcblx0XHR0aGlzLmJpbmRHcm91cCA9IGJpbmRHcm91cDtcblx0XHR0aGlzLmdyb3VwTGF5b3V0ID0gZ3JvdXBMYXlvdXQ7XG5cdH1cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLl91bmlmb3Jtcy5mb3JFYWNoKCh1bmlmb3JtKSA9PiB7XG5cdFx0XHRpZiAodW5pZm9ybS5kZXN0cm95KSB1bmlmb3JtPy5kZXN0cm95KCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5sYWJlbCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnRleHR1cmVCaW5kaW5nID0gMTtcblx0XHR0aGlzLmRlZmluZURpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLmRlZmluZXMgPSB7fTtcblx0XHR0aGlzLl91bmlmb3Jtcy5jbGVhcigpO1xuXHRcdEJpbmRHcm91cExheW91dC5yZW1vdmVCaW5kR3JvdXBMYXlvdXRGcm9tQ2FjaGUodGhpcy5ncm91cExheW91dCk7XG5cdFx0QmluZEdyb3VwLnJlbW92ZUJpbmRHcm91cEZyb21DYWNoZSh0aGlzLmJpbmRHcm91cCk7XG5cdH1cblx0cHVibGljIGdldEJpbmRHcm91cEFuZExheW91dChkZXZpY2U6IEdQVURldmljZSwgbGFiZWw6IHN0cmluZywgaW5kZXg6IG51bWJlcikge1xuXHRcdGNvbnN0IGxheW91dEVudGl0aWVzID0gdGhpcy5jcmVhdGVCaW5kR3JvdXBMYXlvdXRFbnRyeSgpO1xuXHRcdGNvbnN0IGdyb3VwTGF5b3V0ID0gQmluZEdyb3VwTGF5b3V0LmdldEJpbmRHcm91cExheW91dEZyb21DYWNoZShkZXZpY2UsIGxhYmVsLCBsYXlvdXRFbnRpdGllcywgaW5kZXgpO1xuXHRcdGNvbnN0IGdyb3VwRW50aXRpZXMgPSB0aGlzLmNyZWF0ZUJpbmRHcm91cEVudGl0eSgpO1xuXHRcdGNvbnN0IGJpbmRHcm91cCA9IEJpbmRHcm91cC5nZXRCaW5kR3JvdXBGcm9tQ2FjaGUoe1xuXHRcdFx0bGFiZWw6IGxhYmVsLFxuXHRcdFx0ZW50aXJlczogZ3JvdXBFbnRpdGllcyxcblx0XHRcdGRldmljZTogZGV2aWNlLFxuXHRcdFx0bGF5b3V0OiBncm91cExheW91dCxcblx0XHRcdGluZGV4OiBpbmRleFxuXHRcdH0pO1xuXHRcdHJldHVybiB7IGdyb3VwTGF5b3V0LCBiaW5kR3JvdXAgfTtcblx0fVxuXHRwdWJsaWMgY3JlYXRlQmluZEdyb3VwQW5kTGF5b3V0KGRldmljZTogR1BVRGV2aWNlLCBsYWJlbDogc3RyaW5nLCBsYXlvdXRJbmRleD86IG51bWJlciwgZ3JvdXBJbmRleD86IG51bWJlcikge1xuXHRcdGNvbnN0IGxheW91dEVudGl0aWVzID0gdGhpcy5jcmVhdGVCaW5kR3JvdXBMYXlvdXRFbnRyeSgpO1xuXHRcdGNvbnN0IGdyb3VwTGF5b3V0ID0gQmluZEdyb3VwTGF5b3V0LmdldEJpbmRHcm91cExheW91dEZyb21DYWNoZShcblx0XHRcdGRldmljZSxcblx0XHRcdGxhYmVsLFxuXHRcdFx0bGF5b3V0RW50aXRpZXMsXG5cdFx0XHRsYXlvdXRJbmRleCB8fCAwXG5cdFx0KTtcblx0XHRjb25zdCBncm91cEVudGl0aWVzID0gdGhpcy5jcmVhdGVCaW5kR3JvdXBFbnRpdHkoKTtcblx0XHRjb25zdCBiaW5kR3JvdXAgPSBCaW5kR3JvdXAuZ2V0QmluZEdyb3VwRnJvbUNhY2hlKHtcblx0XHRcdGxhYmVsOiBsYWJlbCxcblx0XHRcdGVudGlyZXM6IGdyb3VwRW50aXRpZXMsXG5cdFx0XHRkZXZpY2U6IGRldmljZSxcblx0XHRcdGxheW91dDogZ3JvdXBMYXlvdXQsXG5cdFx0XHRpbmRleDogZ3JvdXBJbmRleCB8fCAwIC8v5ZCO57ut5pS55oiQZ3JvdXBJbmRleFxuXHRcdH0pO1xuXHRcdHJldHVybiB7IGdyb3VwTGF5b3V0LCBiaW5kR3JvdXAgfTtcblx0fVxuXHRwcm90ZWN0ZWQgdXBsb2FkVW5pZm9ybShjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0dGhpcy5fdW5pZm9ybXMuZm9yRWFjaCgodW5pZm9ybSkgPT4ge1xuXHRcdFx0dW5pZm9ybS5iaW5kKGNvbnRleHQpO1xuXHRcdH0pO1xuXHR9XG5cdHByaXZhdGUgY3JlYXRlQmluZEdyb3VwTGF5b3V0RW50cnkoKSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMuX3VuaWZvcm1zLmZvckVhY2goKHVuaWZvcm0pID0+IHtcblx0XHRcdGlmICghcmVzdWx0Lmhhcyh1bmlmb3JtLmJpbmRpbmcpKSB7XG5cdFx0XHRcdHJlc3VsdC5zZXQodW5pZm9ybS5iaW5kaW5nLCB0aGlzLmNyZWF0ZU9uZUxheW91dEVudHJ5KHVuaWZvcm0pKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRjb25zdCBsYXVvdXRFbnRpdHlBcnJheSA9IFtdO1xuXHRcdHJlc3VsdC5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuXHRcdFx0bGF1b3V0RW50aXR5QXJyYXkucHVzaCh2YWx1ZSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gbGF1b3V0RW50aXR5QXJyYXk7XG5cdH1cblx0cHJpdmF0ZSBjcmVhdGVCaW5kR3JvdXBFbnRpdHkoKSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMuX3VuaWZvcm1zLmZvckVhY2goKHVuaWZvcm0pID0+IHtcblx0XHRcdGlmICghcmVzdWx0Lmhhcyh1bmlmb3JtLmJpbmRpbmcpKSB7XG5cdFx0XHRcdHJlc3VsdC5zZXQodW5pZm9ybS5iaW5kaW5nLCB0aGlzLmNyZWF5ZU9uZUdyb3VwRW50aXR5KHVuaWZvcm0pKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRjb25zdCBncm91cEVudGl0eUFycmF5ID0gW107XG5cdFx0cmVzdWx0LmZvckVhY2goKHZhbHVlKSA9PiB7XG5cdFx0XHRncm91cEVudGl0eUFycmF5LnB1c2godmFsdWUpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGdyb3VwRW50aXR5QXJyYXk7XG5cdH1cblx0cHJpdmF0ZSBjcmVhdGVPbmVMYXlvdXRFbnRyeSh1bmlmb3JtKSB7XG5cdFx0bGV0IGxheW91dEVudGl0eTtcblx0XHRpZiAodW5pZm9ybS50eXBlID09PSBcInVuaWZvcm1cIiB8fCB1bmlmb3JtLnR5cGUgPT09IFwicmVhZC1vbmx5LXN0b3JhZ2VcIikge1xuXHRcdFx0bGF5b3V0RW50aXR5ID0gbmV3IEJpbmRHcm91cExheW91dEVudHJ5KHtcblx0XHRcdFx0YmluZGluZzogdW5pZm9ybS5iaW5kaW5nLFxuXHRcdFx0XHRidWZmZXI6IHVuaWZvcm0ubGF5b3V0VHlwZSxcblx0XHRcdFx0dmlzaWJpbGl0eTogdW5pZm9ybS52aXNpYmlsaXR5XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKHVuaWZvcm0udHlwZSA9PT0gXCJ0ZXh0dXJlXCIpIHtcblx0XHRcdGxheW91dEVudGl0eSA9IG5ldyBCaW5kR3JvdXBMYXlvdXRFbnRyeSh7XG5cdFx0XHRcdGJpbmRpbmc6IHVuaWZvcm0uYmluZGluZyxcblx0XHRcdFx0dmlzaWJpbGl0eTogdW5pZm9ybS52aXNpYmlsaXR5LFxuXHRcdFx0XHR0ZXh0dXJlOiB1bmlmb3JtLmxheW91dFR5cGVcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAodW5pZm9ybS50eXBlID09PSBcInNhbXBsZXJcIikge1xuXHRcdFx0bGF5b3V0RW50aXR5ID0gbmV3IEJpbmRHcm91cExheW91dEVudHJ5KHtcblx0XHRcdFx0YmluZGluZzogdW5pZm9ybS5iaW5kaW5nLFxuXHRcdFx0XHR2aXNpYmlsaXR5OiB1bmlmb3JtLnZpc2liaWxpdHksXG5cdFx0XHRcdHNhbXBsZXI6IHVuaWZvcm0ubGF5b3V0VHlwZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiBsYXlvdXRFbnRpdHk7XG5cdH1cblx0cHJpdmF0ZSBjcmVheWVPbmVHcm91cEVudGl0eSh1bmlmb3JtKSB7XG5cdFx0bGV0IGdyb3VwRW50aXR5O1xuXHRcdGlmICh1bmlmb3JtLnR5cGUgPT09IFwidW5pZm9ybVwiIHx8IHVuaWZvcm0udHlwZSA9PT0gXCJyZWFkLW9ubHktc3RvcmFnZVwiKSB7XG5cdFx0XHRncm91cEVudGl0eSA9IG5ldyBCaW5kR3JvdXBFbnRpdHkoe1xuXHRcdFx0XHRiaW5kaW5nOiB1bmlmb3JtLmJpbmRpbmcsXG5cdFx0XHRcdHJlc291cmNlOiB7XG5cdFx0XHRcdFx0YnVmZmVyOiB1bmlmb3JtLmJ1ZmZlci5ncHVCdWZmZXIsXG5cdFx0XHRcdFx0b2Zmc2V0OiB1bmlmb3JtLm9mZnNldCxcblx0XHRcdFx0XHRzaXplOiB1bmlmb3JtLmJ1ZmZlclNpemVcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmICh1bmlmb3JtLnR5cGUgPT09IFwidGV4dHVyZVwiKSB7XG5cdFx0XHRncm91cEVudGl0eSA9IG5ldyBCaW5kR3JvdXBFbnRpdHkoe1xuXHRcdFx0XHRiaW5kaW5nOiB1bmlmb3JtLmJpbmRpbmcsXG5cdFx0XHRcdHJlc291cmNlOiB1bmlmb3JtLnRleHR1cmUudGV4dHVyZVZpZXdcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAodW5pZm9ybS50eXBlID09PSBcInNhbXBsZXJcIikge1xuXHRcdFx0Z3JvdXBFbnRpdHkgPSBuZXcgQmluZEdyb3VwRW50aXR5KHtcblx0XHRcdFx0YmluZGluZzogdW5pZm9ybS5iaW5kaW5nLFxuXHRcdFx0XHRyZXNvdXJjZTogdW5pZm9ybS5zYW1wbGVyLmdwdVNhbXBsZXJcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gZ3JvdXBFbnRpdHk7XG5cdH1cbn1cbiIsImltcG9ydCB7IEJ1ZmZlclVzYWdlLCBTaGFkZXJTdGFnZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xyXG5pbXBvcnQgQnVmZmVyIGZyb20gXCIuL0J1ZmZlclwiO1xyXG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9Db250ZXh0XCI7XHJcbmltcG9ydCB7XHJcblx0VW5pZm9ybUNvbG9yLFxyXG5cdFVuaWZvcm1EaXJ0ZWN0TGlnaHRzLFxyXG5cdFVuaWZvcm1GbG9hdCxcclxuXHRVbmlmb3JtRmxvYXRBcnJheSxcclxuXHRVbmlmb3JtRmxvYXRWZWMyLFxyXG5cdFVuaWZvcm1GbG9hdFZlYzMsXHJcblx0VW5pZm9ybUZsb2F0VmVjNCxcclxuXHRVbmlmb3JtTWF0MixcclxuXHRVbmlmb3JtTWF0MyxcclxuXHRVbmlmb3JtTWF0NCxcclxuXHRVbmlmb3JtUG9pbnRMaWdodHMsXHJcblx0VW5pZm9ybVNwb3RMaWdodHMsXHJcblx0VW5pZm9ybVZlYzJBcnJheSxcclxuXHRVbmlmb3JtVmVjM0FycmF5LFxyXG5cdFVuaWZvcm1WZWM0QXJyYXlcclxufSBmcm9tIFwiLi9Vbmlmb3Jtc1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbmlmb3JtQnVmZmVyIHtcclxuXHRwdWJsaWMgdHlwZTogc3RyaW5nO1xyXG5cdHB1YmxpYyBoYXNEeW5hbWljT2Zmc2V0OiBib29sZWFuO1xyXG5cdHB1YmxpYyBtaW5CaW5kaW5nU2l6ZTogbnVtYmVyO1xyXG5cdHByaXZhdGUgX3VuaWZvcm1zOiBhbnk7XHJcblx0cHJpdmF0ZSBfYnVmZmVyU2l6ZTogbnVtYmVyO1xyXG5cdGJ5dGVPZmZzZXQ6IG51bWJlcjtcclxuXHR1bmlmb3JtRGlydHk6IGJvb2xlYW47XHJcblx0YmluZGluZzogbnVtYmVyO1xyXG5cdHZpc2liaWxpdHk6IFNoYWRlclN0YWdlO1xyXG5cdHVzYWdlOiBCdWZmZXJVc2FnZTtcclxuXHRidWZmZXI6IEJ1ZmZlcjtcclxuXHRkYXRhQnVmZmVyOiBGbG9hdDMyQXJyYXk7XHJcblx0b2Zmc2V0OiBudW1iZXI7XHJcblx0aXNVbmlmb3JtQnVmZmVyOmJvb2xlYW47XHJcblx0Y29uc3RydWN0b3IodHlwZT86IHN0cmluZywgdXNhZ2U/OiBCdWZmZXJVc2FnZSwgc2l6ZT86IG51bWJlciwgZGF0YUJ1ZmZlcj86IEZsb2F0MzJBcnJheSwgYmluZGluZz86IG51bWJlcikge1xyXG5cdFx0dGhpcy50eXBlID0gZGVmYXVsdFZhbHVlKHR5cGUsIFwidW5pZm9ybVwiKTtcclxuXHRcdCh0aGlzLmhhc0R5bmFtaWNPZmZzZXQgPSBmYWxzZSksICh0aGlzLm1pbkJpbmRpbmdTaXplID0gMCk7XHJcblx0XHR0aGlzLmJpbmRpbmcgPSBkZWZhdWx0VmFsdWUoYmluZGluZywgMCk7XHJcblx0XHR0aGlzLnZpc2liaWxpdHkgPSBTaGFkZXJTdGFnZS5GcmFnbWVudCB8IFNoYWRlclN0YWdlLlZlcnRleDtcclxuXHRcdHRoaXMudXNhZ2UgPSBkZWZhdWx0VmFsdWUodXNhZ2UsIEJ1ZmZlclVzYWdlLlVuaWZvcm0gfCBCdWZmZXJVc2FnZS5Db3B5RHN0KTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zID0gbmV3IE1hcCgpO1xyXG5cdFx0dGhpcy51bmlmb3JtRGlydHkgPSB0cnVlO1xyXG5cdFx0dGhpcy5fYnVmZmVyU2l6ZSA9IHNpemU7XHJcblx0XHR0aGlzLm9mZnNldCA9IDA7XHJcblx0XHR0aGlzLmRhdGFCdWZmZXIgPSBkZWZhdWx0VmFsdWUoZGF0YUJ1ZmZlciwgbmV3IEZsb2F0MzJBcnJheShkZWZhdWx0VmFsdWUodGhpcy5fYnVmZmVyU2l6ZSwgNDAwKSkpO1xyXG5cdFx0dGhpcy5ieXRlT2Zmc2V0ID0gMDtcclxuICAgICAgICB0aGlzLmlzVW5pZm9ybUJ1ZmZlcj10cnVlO1xyXG5cdH1cclxuXHRnZXQgbGF5b3V0VHlwZSgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHR5cGU6IHRoaXMudHlwZSxcclxuXHRcdFx0aGFzRHluYW1pY09mZnNldDogdGhpcy5oYXNEeW5hbWljT2Zmc2V0LFxyXG5cdFx0XHRtaW5CaW5kaW5nU2l6ZTogdGhpcy5taW5CaW5kaW5nU2l6ZVxyXG5cdFx0fTtcclxuXHR9XHJcblx0Z2V0IGJ1ZmZlclNpemUoKSB7XHJcblx0XHRyZXR1cm4gZGVmYXVsdFZhbHVlKHRoaXMuX2J1ZmZlclNpemUsIHRoaXMudW5pZm9ybXNTaXplICogNCk7XHJcblx0fVxyXG5cdGdldCB1bmlmb3Jtc1NpemUoKSB7XHJcblx0XHQvL2h0dHBzOi8vZ3B1d2ViLmdpdGh1Yi5pby9ncHV3ZWIvd2dzbC8jYWRkcmVzcy1zcGFjZS1sYXlvdXQtY29uc3RyYWludHNcclxuXHRcdHJldHVybiBNYXRoLmNlaWwodGhpcy5ieXRlT2Zmc2V0IC8gMTYpICogMTY7XHJcblx0fVxyXG5cdGJpbmQoY29udGV4dDogQ29udGV4dCkge1xyXG5cdFx0dGhpcy5fdW5pZm9ybXMuZm9yRWFjaCgodW5pZm9ybSkgPT4ge1xyXG5cdFx0XHRjb25zdCByZXN1bHQgPSB1bmlmb3JtLnNldCgpO1xyXG5cdFx0XHRpZiAocmVzdWx0ICE9IHVuZGVmaW5lZCAmJiB0aGlzLnVuaWZvcm1EaXJ0eSA9PSBmYWxzZSkgdGhpcy51bmlmb3JtRGlydHkgPSByZXN1bHQ7XHJcblx0XHR9KTtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1EaXJ0eSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1EaXJ0eSA9IGZhbHNlO1xyXG5cdFx0XHRpZiAoIXRoaXMuYnVmZmVyKSB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5jcmVhdGVVbmlmb3JtQnVmZmVyKGNvbnRleHQuZGV2aWNlLCB0aGlzLmJ1ZmZlclNpemUsIHRoaXMudXNhZ2UpO1xyXG5cdFx0XHR0aGlzLmJ1ZmZlci5zZXRTdWJEYXRhKDAsIHRoaXMuZGF0YUJ1ZmZlci5zbGljZSgwLCBkZWZhdWx0VmFsdWUodGhpcz8uYnVmZmVyU2l6ZSAvIDQsIHRoaXMudW5pZm9ybXNTaXplKSkpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRwdWJsaWMgZ2V0VW5pZm9ybUJ1ZmZlclN0cnVjdCgpIHtcclxuXHRcdGxldCB1bmlmb3JtU3RydWN0ID0gYHN0cnVjdCBNYXRlcmlhbFVuaWZvcm0ge1xcbiBgO1xyXG5cdFx0dGhpcy5fdW5pZm9ybXMuZm9yRWFjaCgodW5pZm9ybSkgPT4ge1xyXG5cdFx0XHR1bmlmb3JtU3RydWN0ICs9IHRoaXMuY3JlYXRlVW5pZm9ybVN0cmluZyh1bmlmb3JtKTtcclxuXHRcdH0pO1xyXG5cdFx0dW5pZm9ybVN0cnVjdCArPSBgfVxcbmA7XHJcblx0XHRyZXR1cm4gdW5pZm9ybVN0cnVjdDtcclxuXHR9XHJcblx0cHJpdmF0ZSBjcmVhdGVVbmlmb3JtU3RyaW5nKHVuaWZvcm0pIHtcclxuXHRcdGxldCByZXN1bHQgPSBgYDtcclxuXHRcdHN3aXRjaCAodW5pZm9ybS50eXBlKSB7XHJcblx0XHRcdGNhc2UgXCJ2ZWMxXCI6XHJcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6ZjMyLFxcbmA7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgXCJ2ZWMyXCI6XHJcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6dmVjMjxmMzI+LFxcbmA7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgXCJ2ZWMzXCI6XHJcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6dmVjMzxmMzI+LFxcbmA7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgXCJ2ZWM0XCI6XHJcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6dmVjNDxmMzI+LFxcbmA7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgXCJtYXQyXCI6XHJcblx0XHRcdFx0cmVzdWx0ID0gYCR7dW5pZm9ybS5uYW1lfSA6bWF0MngyPGYzMj4sXFxuYDtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSBcIm1hdDNcIjpcclxuXHRcdFx0XHRyZXN1bHQgPSBgJHt1bmlmb3JtLm5hbWV9IDptYXQzeDM8ZjMyPixcXG5gO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIFwibWF0NFwiOlxyXG5cdFx0XHRcdHJlc3VsdCA9IGAke3VuaWZvcm0ubmFtZX0gOm1hdDR4NDxmMzI+LFxcbmA7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHRzZXRGbG9hdChuYW1lOiBzdHJpbmcsIHZhbHVlOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCwgYmluZGluZz86IG51bWJlcikge1xyXG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1zLmdldChuYW1lKSkgcmV0dXJuO1xyXG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtRmxvYXQobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLnNldChuYW1lLCB1bmlmb3JtKTtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB1bmlmb3JtLmJ5dGVTaXplO1xyXG5cdH1cclxuXHRzZXRGbG9hdFZlYzIobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsIGJpbmRpbmc/OiBudW1iZXIpIHtcclxuXHRcdGlmICh0aGlzLl91bmlmb3Jtcy5nZXQobmFtZSkpIHJldHVybjtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB0aGlzLmNoZWNrVW5pZm9ybU9mZnNldCh0aGlzLmJ5dGVPZmZzZXQsIFVuaWZvcm1GbG9hdFZlYzIuYWxpZ24pO1xyXG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtRmxvYXRWZWMyKG5hbWUsIHRoaXMuZGF0YUJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB2YWx1ZSwgYmluZGluZyk7XHJcblx0XHR0aGlzLl91bmlmb3Jtcy5zZXQobmFtZSwgdW5pZm9ybSk7XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcclxuXHR9XHJcblx0c2V0RmxvYXRWZWMzKG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LCBiaW5kaW5nPzogbnVtYmVyKSB7XHJcblx0XHRpZiAodGhpcy5fdW5pZm9ybXMuZ2V0KG5hbWUpKSByZXR1cm47XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtRmxvYXRWZWMzLmFsaWduKTtcclxuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybUZsb2F0VmVjMyhuYW1lLCB0aGlzLmRhdGFCdWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdmFsdWUsIGJpbmRpbmcpO1xyXG5cdFx0dGhpcy5fdW5pZm9ybXMuc2V0KG5hbWUsIHVuaWZvcm0pO1xyXG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHVuaWZvcm0uYnl0ZVNpemU7XHJcblx0fVxyXG5cdHNldENvbG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LCBiaW5kaW5nPzogbnVtYmVyKSB7XHJcblx0XHRpZiAodGhpcy5fdW5pZm9ybXMuZ2V0KG5hbWUpKSByZXR1cm47XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtQ29sb3IuYWxpZ24pO1xyXG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtQ29sb3IobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLnNldChuYW1lLCB1bmlmb3JtKTtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB1bmlmb3JtLmJ5dGVTaXplO1xyXG5cdH1cclxuXHRzZXRGbG9hdFZlYzQobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsIGJpbmRpbmc/OiBudW1iZXIpIHtcclxuXHRcdGlmICh0aGlzLl91bmlmb3Jtcy5nZXQobmFtZSkpIHJldHVybjtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB0aGlzLmNoZWNrVW5pZm9ybU9mZnNldCh0aGlzLmJ5dGVPZmZzZXQsIFVuaWZvcm1GbG9hdFZlYzQuYWxpZ24pO1xyXG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtRmxvYXRWZWM0KG5hbWUsIHRoaXMuZGF0YUJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB2YWx1ZSwgYmluZGluZyk7XHJcblx0XHR0aGlzLl91bmlmb3Jtcy5zZXQobmFtZSwgdW5pZm9ybSk7XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcclxuXHR9XHJcblx0c2V0TWF0cml4MihuYW1lOiBzdHJpbmcsIHZhbHVlOiBGdW5jdGlvbiB8IG51bWJlciB8IE9iamVjdCwgYmluZGluZz86IG51bWJlcikge1xyXG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1zLmdldChuYW1lKSkgcmV0dXJuO1xyXG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHRoaXMuY2hlY2tVbmlmb3JtT2Zmc2V0KHRoaXMuYnl0ZU9mZnNldCwgVW5pZm9ybU1hdDIuYWxpZ24pO1xyXG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtTWF0MihuYW1lLCB0aGlzLmRhdGFCdWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdmFsdWUsIGJpbmRpbmcpO1xyXG5cdFx0dGhpcy5fdW5pZm9ybXMuc2V0KG5hbWUsIHVuaWZvcm0pO1xyXG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHVuaWZvcm0uYnl0ZVNpemU7XHJcblx0fVxyXG5cdHNldE1hdHJpeDMobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3QsIGJpbmRpbmc/OiBudW1iZXIpIHtcclxuXHRcdGlmICh0aGlzLl91bmlmb3Jtcy5nZXQobmFtZSkpIHJldHVybjtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB0aGlzLmNoZWNrVW5pZm9ybU9mZnNldCh0aGlzLmJ5dGVPZmZzZXQsIFVuaWZvcm1NYXQzLmFsaWduKTtcclxuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybU1hdDMobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nKTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLnNldChuYW1lLCB1bmlmb3JtKTtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB1bmlmb3JtLmJ5dGVTaXplO1xyXG5cdH1cclxuXHRzZXRNYXRyaXg0KG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uIHwgbnVtYmVyIHwgT2JqZWN0LCBiaW5kaW5nPzogbnVtYmVyKSB7XHJcblx0XHRpZiAodGhpcy5fdW5pZm9ybXMuZ2V0KG5hbWUpKSByZXR1cm47XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtTWF0NC5hbGlnbik7XHJcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1NYXQ0KG5hbWUsIHRoaXMuZGF0YUJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB2YWx1ZSwgYmluZGluZyk7XHJcblx0XHR0aGlzLl91bmlmb3Jtcy5zZXQobmFtZSwgdW5pZm9ybSk7XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcclxuXHR9XHJcblx0cmVwbGFjZVVuaWZvcm1WYWx1ZShuYW1lOnN0cmluZyx2YWx1ZTogRnVuY3Rpb24gfCBudW1iZXIgfCBPYmplY3Qpe1xyXG4gICAgICAgIGNvbnN0IHVuaWZvcm09dGhpcy5fdW5pZm9ybXMuZ2V0KG5hbWUpO1xyXG5cdFx0aWYoIXVuaWZvcm0pIGNvbnNvbGUuZXJyb3IoJ25vdCBmaW5kIHVuaWZvcm0nKTtcclxuXHRcdHVuaWZvcm0uY2I9dmFsdWU7XHJcblx0fVxyXG5cdC8vIHVuaWZvcm1CdWZmZXIuc2V0VmVjM0FycmF5KCd0ZXN0JywoKT0+e3JldHVybiBbbmV3IFZlY3RvcjMoMSwwLDApLG5ldyBWZWN0b3IzKDEsMC44LDAuNSldfSwyKTtcclxuXHQvLyB1bmlmb3JtQnVmZmVyLnNldEZsb2F0QXJyYXkoJ3Rlc3QxJywoKT0+e3JldHVybiBbMC41LDAuNSwxLjBdfSwzKTtcclxuXHQvLyB1bmlmb3JtQnVmZmVyLnNldFZlYzRBcnJheSgndGVzdDQnLCgpPT57cmV0dXJuIFtuZXcgVmVjdG9yNCgwLjUsMC42LDAuMiwxLjApLG5ldyBWZWN0b3I0KDAuNSwwLjgsMC44LDEuMCldfSwyKTtcclxuXHQvLyB1bmlmb3JtQnVmZmVyLnNldFZlYzJBcnJheSgndGVzdDInLCgpPT57cmV0dXJuIFtuZXcgVmVjdG9yMigwLjUsMC42KSxuZXcgVmVjdG9yMigwLjUsMC44LCldfSwyKTtcclxuXHRzZXRGbG9hdEFycmF5KG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uLCBjb3VudDogbnVtYmVyLCBiaW5kaW5nPzogbnVtYmVyKSB7XHJcblx0XHRpZiAodGhpcy5fdW5pZm9ybXMuZ2V0KG5hbWUpKSByZXR1cm47XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtRmxvYXRBcnJheS5hbGlnbik7XHJcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1GbG9hdEFycmF5KG5hbWUsIHRoaXMuZGF0YUJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB2YWx1ZSwgYmluZGluZywgMCwgY291bnQpO1xyXG5cdFx0dGhpcy5fdW5pZm9ybXMuc2V0KG5hbWUsIHVuaWZvcm0pO1xyXG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHVuaWZvcm0uYnl0ZVNpemU7XHJcblx0fVxyXG5cdHNldFZlYzJBcnJheShuYW1lOiBzdHJpbmcsIHZhbHVlOiBGdW5jdGlvbiwgY291bnQ6IG51bWJlciwgYmluZGluZz86IG51bWJlcikge1xyXG5cdFx0aWYgKHRoaXMuX3VuaWZvcm1zLmdldChuYW1lKSkgcmV0dXJuO1xyXG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHRoaXMuY2hlY2tVbmlmb3JtT2Zmc2V0KHRoaXMuYnl0ZU9mZnNldCwgVW5pZm9ybVZlYzJBcnJheS5hbGlnbik7XHJcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1WZWMyQXJyYXkobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nLCAwLCBjb3VudCk7XHJcblx0XHR0aGlzLl91bmlmb3Jtcy5zZXQobmFtZSwgdW5pZm9ybSk7XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcclxuXHR9XHJcblx0c2V0VmVjM0FycmF5KG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uLCBjb3VudDogbnVtYmVyLCBiaW5kaW5nPzogbnVtYmVyKSB7XHJcblx0XHRpZiAodGhpcy5fdW5pZm9ybXMuZ2V0KG5hbWUpKSByZXR1cm47XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtVmVjM0FycmF5LmFsaWduKTtcclxuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVZlYzNBcnJheShuYW1lLCB0aGlzLmRhdGFCdWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdmFsdWUsIGJpbmRpbmcsIDAsIGNvdW50KTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLnNldChuYW1lLCB1bmlmb3JtKTtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB1bmlmb3JtLmJ5dGVTaXplO1xyXG5cdH1cclxuXHRzZXRWZWM0QXJyYXkobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcclxuXHRcdGlmICh0aGlzLl91bmlmb3Jtcy5nZXQobmFtZSkpIHJldHVybjtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB0aGlzLmNoZWNrVW5pZm9ybU9mZnNldCh0aGlzLmJ5dGVPZmZzZXQsIFVuaWZvcm1WZWM0QXJyYXkuYWxpZ24pO1xyXG5cdFx0Y29uc3QgdW5pZm9ybSA9IG5ldyBVbmlmb3JtVmVjNEFycmF5KG5hbWUsIHRoaXMuZGF0YUJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB2YWx1ZSwgYmluZGluZywgMCwgY291bnQpO1xyXG5cdFx0dGhpcy5fdW5pZm9ybXMuc2V0KG5hbWUsIHVuaWZvcm0pO1xyXG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHVuaWZvcm0uYnl0ZVNpemU7XHJcblx0fVxyXG5cdHNldFNwb3RMaWdodHMobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcclxuXHRcdGlmICh0aGlzLl91bmlmb3Jtcy5nZXQobmFtZSkpIHJldHVybjtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB0aGlzLmNoZWNrVW5pZm9ybU9mZnNldCh0aGlzLmJ5dGVPZmZzZXQsIFVuaWZvcm1TcG90TGlnaHRzLmFsaWduKTtcclxuXHRcdGNvbnN0IHVuaWZvcm0gPSBuZXcgVW5pZm9ybVNwb3RMaWdodHMobmFtZSwgdGhpcy5kYXRhQnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHZhbHVlLCBiaW5kaW5nLCAwLCBjb3VudCk7XHJcblx0XHR0aGlzLl91bmlmb3Jtcy5zZXQobmFtZSwgdW5pZm9ybSk7XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdW5pZm9ybS5ieXRlU2l6ZTtcclxuXHR9XHJcblx0c2V0UG9pbnRMaWdodHMobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb24sIGNvdW50OiBudW1iZXIsIGJpbmRpbmc/OiBudW1iZXIpIHtcclxuXHRcdGlmICh0aGlzLl91bmlmb3Jtcy5nZXQobmFtZSkpIHJldHVybjtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB0aGlzLmNoZWNrVW5pZm9ybU9mZnNldCh0aGlzLmJ5dGVPZmZzZXQsIFVuaWZvcm1Qb2ludExpZ2h0cy5hbGlnbik7XHJcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1Qb2ludExpZ2h0cyhuYW1lLCB0aGlzLmRhdGFCdWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdmFsdWUsIGJpbmRpbmcsIDAsIGNvdW50KTtcclxuXHRcdHRoaXMuX3VuaWZvcm1zLnNldChuYW1lLCB1bmlmb3JtKTtcclxuXHRcdHRoaXMuYnl0ZU9mZnNldCArPSB1bmlmb3JtLmJ5dGVTaXplO1xyXG5cdH1cclxuXHRzZXREaXJ0ZWN0TGlnaHRzKG5hbWU6IHN0cmluZywgdmFsdWU6IEZ1bmN0aW9uLCBjb3VudDogbnVtYmVyLCBiaW5kaW5nPzogbnVtYmVyKSB7XHJcblx0XHRpZiAodGhpcy5fdW5pZm9ybXMuZ2V0KG5hbWUpKSByZXR1cm47XHJcblx0XHR0aGlzLmJ5dGVPZmZzZXQgKz0gdGhpcy5jaGVja1VuaWZvcm1PZmZzZXQodGhpcy5ieXRlT2Zmc2V0LCBVbmlmb3JtRGlydGVjdExpZ2h0cy5hbGlnbik7XHJcblx0XHRjb25zdCB1bmlmb3JtID0gbmV3IFVuaWZvcm1EaXJ0ZWN0TGlnaHRzKG5hbWUsIHRoaXMuZGF0YUJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0LCB2YWx1ZSwgYmluZGluZywgMCwgY291bnQpO1xyXG5cdFx0dGhpcy5fdW5pZm9ybXMuc2V0KG5hbWUsIHVuaWZvcm0pO1xyXG5cdFx0dGhpcy5ieXRlT2Zmc2V0ICs9IHVuaWZvcm0uYnl0ZVNpemU7XHJcblx0fVxyXG5cdHByaXZhdGUgY2hlY2tVbmlmb3JtT2Zmc2V0KGJ5dGVTaXplOiBudW1iZXIsIEFsaWduOiBudW1iZXIpOiBudW1iZXIge1xyXG5cdFx0Ly9mcm9tIGh0dHBzOi8vZ3B1d2ViLmdpdGh1Yi5pby9ncHV3ZWIvd2dzbC8jYWRkcmVzcy1zcGFjZS1sYXlvdXQtY29uc3RyYWludHNcclxuXHRcdHJldHVybiBNYXRoLmNlaWwoYnl0ZVNpemUgLyBBbGlnbikgKiBBbGlnbiAtIGJ5dGVTaXplO1xyXG5cdH1cclxuXHRkZXN0cm95KCkge1xyXG5cdFx0dGhpcy5idWZmZXIuZGVzdHJveSgpO1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgeyBBbWJpZW50TGlnaHQgfSBmcm9tIFwiLi4vbGlnaHQvQW1iaWVudExpZ2h0XCI7XG5pbXBvcnQgeyBEaXJlY3Rpb25hbExpZ2h0IH0gZnJvbSBcIi4uL2xpZ2h0L0RpcmVjdGlvbmFsTGlnaHRcIjtcbmltcG9ydCB7IFBvaW50TGlnaHQgfSBmcm9tIFwiLi4vbGlnaHQvUG9pbnRMaWdodFwiO1xuaW1wb3J0IHsgU3BvdExpZ2h0IH0gZnJvbSBcIi4uL2xpZ2h0L1Nwb3RMaWdodFwiO1xuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuL0ZyYW1lU3RhdGVcIjtcbmltcG9ydCBTaGFkZXJEYXRhIGZyb20gXCIuLi9yZW5kZXIvU2hhZGVyRGF0YVwiO1xuaW1wb3J0IHsgQnVmZmVyVXNhZ2UgfSBmcm9tIFwiLi9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IFVuaWZvcm1CdWZmZXIgZnJvbSBcIi4uL3JlbmRlci9Vbmlmb3JtQnVmZmVyXCI7XG5pbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvQ2FtZXJhXCI7XG5pbXBvcnQgeyBMaWdodCB9IGZyb20gXCIuLi9saWdodC9MaWdodFwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlnaHRNYW5nZXIge1xuXHRsaWdodFVuaWZvcm1CdWZmZXI6IFVuaWZvcm1CdWZmZXI7XG5cdHBvaW50TGlnaHRzOiBQb2ludExpZ2h0W107XG5cblx0c3BvdExpZ2h0czogU3BvdExpZ2h0W107XG5cblx0ZGlydGVjdExpZ2h0czogRGlyZWN0aW9uYWxMaWdodFtdO1xuXG5cdGFtYmllbnRMaWdodDogQW1iaWVudExpZ2h0O1xuXG5cdGxpZ2h0U2hhZGVyRGF0YTogU2hhZGVyRGF0YTtcblxuXHRsaWdodENvdW50RGlydHk6IGJvb2xlYW47XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5zcG90TGlnaHRzID0gW107XG5cdFx0dGhpcy5wb2ludExpZ2h0cyA9IFtdO1xuXHRcdHRoaXMuZGlydGVjdExpZ2h0cyA9IFtdO1xuXHRcdHRoaXMuYW1iaWVudExpZ2h0ID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMubGlnaHRDb3VudERpcnR5ID0gZmFsc2U7XG5cdH1cblx0dXBkYXRlKGZyYW1lU3RhdGU6IEZyYW1lU3RhdGUsIGNhbWVyYTogQ2FtZXJhKSB7XG5cdFx0dGhpcy51cGRhdGVMaWdodChjYW1lcmEpO1xuXHR9XG5cdGFkZChsaWdodCkge1xuXHRcdHRoaXMubGlnaHRDb3VudERpcnR5ID0gdHJ1ZTtcblx0XHRpZiAobGlnaHQudHlwZSA9PSBcImFtYmllbnRcIikge1xuXHRcdFx0dGhpcy5hbWJpZW50TGlnaHQgPSBsaWdodDtcblx0XHR9IGVsc2UgaWYgKGxpZ2h0LnR5cGUgPT0gXCJkaXJlY3Rpb25hbFwiKSB7XG5cdFx0XHR0aGlzLmRpcnRlY3RMaWdodHMucHVzaChsaWdodCk7XG5cdFx0fSBlbHNlIGlmIChsaWdodC50eXBlID09IFwicG9pbnRcIikge1xuXHRcdFx0dGhpcy5wb2ludExpZ2h0cy5wdXNoKGxpZ2h0KTtcblx0XHR9IGVsc2UgaWYgKGxpZ2h0LnR5cGUgPT0gXCJzcG90XCIpIHtcblx0XHRcdHRoaXMuc3BvdExpZ2h0cy5wdXNoKGxpZ2h0KTtcblx0XHR9XG5cdH1cblx0cmVtb3ZlKCkge31cblx0cHJpdmF0ZSB1cGRhdGVMaWdodChjYW1lcmE6IENhbWVyYSkge1xuXHRcdHRoaXMudXBkYXRlTGlnaHREYXRhKGNhbWVyYSk7XG5cdFx0aWYgKHRoaXMubGlnaHRDb3VudERpcnR5KSB7XG5cdFx0XHR0aGlzLmxpZ2h0Q291bnREaXJ0eSA9IGZhbHNlO1xuXHRcdFx0aWYgKHRoaXMubGlnaHRTaGFkZXJEYXRhKSB0aGlzLmxpZ2h0U2hhZGVyRGF0YS5kZXN0cm95KCk7XG5cdFx0XHR0aGlzLmNyZWF0ZUxpZ2h0U2hhZGVyRGF0YSgpO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIHVwZGF0ZUxpZ2h0RGF0YShjYW1lcmE6IENhbWVyYSkge1xuXHRcdHRoaXMudXBkYXRlU3BvdExpZ2h0KGNhbWVyYSk7XG5cdFx0dGhpcy51cGRhdGVQb2ludExpZ2h0KGNhbWVyYSk7XG5cdFx0dGhpcy51cGRhdGVEaXJ0ZWN0TGlnaHQoY2FtZXJhKTtcblx0fVxuXHRwcml2YXRlIHVwZGF0ZVNwb3RMaWdodChjYW1lcmE6IENhbWVyYSkge1xuXHRcdHRoaXMuc3BvdExpZ2h0cy5mb3JFYWNoKChsaWdodCkgPT4ge1xuXHRcdFx0bGlnaHQudXBkYXRlKGNhbWVyYSk7XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSB1cGRhdGVQb2ludExpZ2h0KGNhbWVyYTogQ2FtZXJhKSB7XG5cdFx0dGhpcy5wb2ludExpZ2h0cy5mb3JFYWNoKChsaWdodCkgPT4ge1xuXHRcdFx0bGlnaHQudXBkYXRlKGNhbWVyYSk7XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSB1cGRhdGVEaXJ0ZWN0TGlnaHQoY2FtZXJhOiBDYW1lcmEpIHtcblx0XHR0aGlzLmRpcnRlY3RMaWdodHMuZm9yRWFjaCgobGlnaHQpID0+IHtcblx0XHRcdGxpZ2h0LnVwZGF0ZShjYW1lcmEpO1xuXHRcdH0pO1xuXHR9XG5cdHByaXZhdGUgY3JlYXRlTGlnaHRTaGFkZXJEYXRhKCkge1xuXHRcdHRoaXMubGlnaHRTaGFkZXJEYXRhID0gbmV3IFNoYWRlckRhdGEoXCJsaWdodFwiLCAwLCAyLCAyKTtcblx0XHR0aGlzLmxpZ2h0VW5pZm9ybUJ1ZmZlciA9IG5ldyBVbmlmb3JtQnVmZmVyKFwicmVhZC1vbmx5LXN0b3JhZ2VcIiwgQnVmZmVyVXNhZ2UuU3RvcmFnZSB8IEJ1ZmZlclVzYWdlLkNvcHlEc3QpO1xuXG5cdFx0dGhpcy5saWdodFNoYWRlckRhdGEuc2V0RGVmaW5lKFwic3BvdExpZ2h0c0NvdW50XCIsIHRoaXMuc3BvdExpZ2h0cy5sZW5ndGgpO1xuXHRcdHRoaXMubGlnaHRTaGFkZXJEYXRhLnNldERlZmluZShcInBvaW50TGlnaHRzQ291bnRcIiwgdGhpcy5wb2ludExpZ2h0cy5sZW5ndGgpO1xuXHRcdHRoaXMubGlnaHRTaGFkZXJEYXRhLnNldERlZmluZShcImRpcnRlY3RMaWdodHNDb3VudFwiLCB0aGlzLmRpcnRlY3RMaWdodHMubGVuZ3RoKTtcblx0XHR0aGlzLmxpZ2h0U2hhZGVyRGF0YS5zZXREZWZpbmUoXCJhbWJpZW50TGlnaHRDb3VudFwiLCB0aGlzLmFtYmllbnRMaWdodCAhPSB1bmRlZmluZWQgPyAxIDogMCk7XG5cdFx0aWYgKHRoaXMuYW1iaWVudExpZ2h0KVxuXHRcdFx0dGhpcy5saWdodFVuaWZvcm1CdWZmZXIuc2V0RmxvYXRWZWMzKFwiYW1iaWVudExpZ2h0XCIsICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuYW1iaWVudExpZ2h0LmNvbG9yO1xuXHRcdFx0fSk7XG5cdFx0aWYgKHRoaXMuc3BvdExpZ2h0cy5sZW5ndGgpIHtcblx0XHRcdC8v5Yid5aeL5YyW6IGa5YWJ54GvXG5cdFx0XHR0aGlzLmxpZ2h0VW5pZm9ybUJ1ZmZlci5zZXRTcG90TGlnaHRzKFxuXHRcdFx0XHRcInNwb3RMaWdodHNcIixcblx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnNwb3RMaWdodHM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoaXMuc3BvdExpZ2h0cy5sZW5ndGhcblx0XHRcdCk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnBvaW50TGlnaHRzLmxlbmd0aCkge1xuXHRcdFx0Ly/ngrnlhYnmupBcblx0XHRcdHRoaXMubGlnaHRVbmlmb3JtQnVmZmVyLnNldFBvaW50TGlnaHRzKFxuXHRcdFx0XHRcInBvaW50TGlnaHRzXCIsXG5cdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5wb2ludExpZ2h0cztcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhpcy5wb2ludExpZ2h0cy5sZW5ndGhcblx0XHRcdCk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmRpcnRlY3RMaWdodHMubGVuZ3RoKSB7XG5cdFx0XHQvL+aWueWQkeWFiVxuXHRcdFx0dGhpcy5saWdodFVuaWZvcm1CdWZmZXIuc2V0RGlydGVjdExpZ2h0cyhcblx0XHRcdFx0XCJkaXJ0ZWN0TGlnaHRzXCIsXG5cdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5kaXJ0ZWN0TGlnaHRzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGlzLmRpcnRlY3RMaWdodHMubGVuZ3RoXG5cdFx0XHQpO1xuXHRcdH1cblx0XHR0aGlzLmxpZ2h0U2hhZGVyRGF0YS5zZXRVbmlmb3JtQnVmZmVyKFwibGlnaHRcIiwgdGhpcy5saWdodFVuaWZvcm1CdWZmZXIpO1xuXHR9XG5cblx0cHVibGljIGdldEFsbExpZ2h0cygpOiBBcnJheTxMaWdodD4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IFtdO1xuXHRcdHJldHVybiByZXN1bHQuY29uY2F0KHRoaXMuc3BvdExpZ2h0cywgdGhpcy5wb2ludExpZ2h0cywgdGhpcy5kaXJ0ZWN0TGlnaHRzKTtcblx0fVxuXG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5saWdodFNoYWRlckRhdGEuZGVzdHJveSgpO1xuXHRcdHRoaXMubGlnaHRVbmlmb3JtQnVmZmVyLmRlc3Ryb3koKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgR1BVQ2FudmFzQ29tcG9zaXRpbmdBbHBoYU1vZGUsIFNjaXNzb3JUZXN0LCBWaWV3UG9ydCB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVVR5cGVzXCI7XG5pbXBvcnQgeyBUZXh0dXJlVXNhZ2UgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IHsgQ29udGV4dE9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xuaW1wb3J0IERyYXdDb21tYW5kIGZyb20gXCIuL0RyYXdDb21tYW5kLmpzXCI7XG5pbXBvcnQgeyBNaXBtYXBHZW5lcmF0b3IgfSBmcm9tIFwiLi4vdXRpbHMvTWlwbWFwR2VuZXJhdG9yXCI7XG5pbXBvcnQgUGlwZWxpbmUgZnJvbSBcIi4vUGlwZWxpbmVcIjtcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcbmltcG9ydCBMaWdodE1hbmdlciBmcm9tIFwiLi4vY29yZS9MaWdodE1hbmdlclwiO1xuXG5jbGFzcyBDb250ZXh0IHtcblx0cHVibGljIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG5cblx0cHVibGljIGNvbnRleHQ6IEdQVUNhbnZhc0NvbnRleHQ7XG5cblx0cHVibGljIHBpeGVsUmF0aW86IG51bWJlcjtcblxuXHRwdWJsaWMgZGV2aWNlOiBHUFVEZXZpY2U7XG5cblx0cHJpdmF0ZSBhZGFwdGVyOiBHUFVBZGFwdGVyO1xuXG5cdHB1YmxpYyBjb21tYW5kRW5jb2RlcjogR1BVQ29tbWFuZEVuY29kZXIgfCBudWxsO1xuXG5cdHB1YmxpYyBwcmVzZW50YXRpb25TaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyBkZXB0aDogbnVtYmVyIH07XG5cblx0cHVibGljIHByZXNlbnRhdGlvbkZvcm1hdDogR1BVVGV4dHVyZUZvcm1hdDtcblxuXHRwdWJsaWMgbWlwbWFwVG9vbHM6IE1pcG1hcEdlbmVyYXRvcjtcblxuXHRwdWJsaWMgbGlnaHRNYW5nZXI6IExpZ2h0TWFuZ2VyO1xuXG5cdHByaXZhdGUgX3ZpZXdQb3J0OiBWaWV3UG9ydDtcblxuXHRwcml2YXRlIF9zY2lzc29yVGVzdDogU2Npc3NvclRlc3Q7XG5cblx0cHJpdmF0ZSBfc2Npc3NvclRlc3RFbmFibGVkOiBib29sZWFuO1xuXG5cdGNvbnN0cnVjdG9yKHsgY2FudmFzLCBjb250YWluZXIsIGNvbnRleHQsIHBpeGVsUmF0aW8gfTogQ29udGV4dE9wdGlvbnMgPSB7fSkge1xuXHRcdHRoaXMuY2FudmFzID0gY2FudmFzIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG5cdFx0dGhpcy5jYW52YXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0XHR0aGlzLmNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdHRoaXMuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xuXHRcdHRoaXMuY29udGV4dCA9IGNvbnRleHQgfHwgKHRoaXMuY2FudmFzLmdldENvbnRleHQoXCJ3ZWJncHVcIikgYXMgR1BVQ2FudmFzQ29udGV4dCk7XG5cdFx0dGhpcy5waXhlbFJhdGlvID0gcGl4ZWxSYXRpbyB8fCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXHRcdHRoaXMuZGV2aWNlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMubGlnaHRNYW5nZXIgPSBuZXcgTGlnaHRNYW5nZXIoKTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBpbml0KFxuXHRcdHJlcXVlc3RBZGFwdGVyID0ge30sXG5cdFx0ZGV2aWNlRGVzY3JpcHRvciA9IHt9LFxuXHRcdHByZXNlbnRhdGlvbkNvbnRleHREZXNjcmlwdG9yID0ge31cblx0KTogUHJvbWlzZTxib29sZWFuPiB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmICghdGhpcy5jb250ZXh0KSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGluc3RhbnRpYXRlIFwid2ViZ3B1XCIgY29udGV4dC5gKTtcblx0XHRcdH1cblx0XHRcdGlmICghbmF2aWdhdG9yLmdwdSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgXCJuYXZpZ2F0b3IuZ3B1XCIuYCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYWRhcHRlciA9IGF3YWl0IG5hdmlnYXRvci5ncHUucmVxdWVzdEFkYXB0ZXIoKTtcblx0XHRcdHRoaXMuZGV2aWNlID0gYXdhaXQgdGhpcy5hZGFwdGVyLnJlcXVlc3REZXZpY2UoKTtcblx0XHRcdHRoaXMucHJlc2VudGF0aW9uU2l6ZSA9IHtcblx0XHRcdFx0d2lkdGg6IHRoaXMuY2FudmFzLmNsaWVudFdpZHRoICogdGhpcy5waXhlbFJhdGlvLFxuXHRcdFx0XHRoZWlnaHQ6IHRoaXMuY2FudmFzLmNsaWVudEhlaWdodCAqIHRoaXMucGl4ZWxSYXRpbyxcblx0XHRcdFx0ZGVwdGg6IDFcblx0XHRcdH07XG5cdFx0XHR0aGlzLnByZXNlbnRhdGlvbkZvcm1hdCA9IG5hdmlnYXRvci5ncHUuZ2V0UHJlZmVycmVkQ2FudmFzRm9ybWF0KCk7XG5cdFx0XHR0aGlzLmRldmljZS5hZGRFdmVudExpc3RlbmVyKFwidW5jYXB0dXJlZGVycm9yXCIsIChlcnJvcikgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0XHRcdFx0Ly9TdGF0ZS5lcnJvciA9IHRydWU7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMubWlwbWFwVG9vbHMgPSBuZXcgTWlwbWFwR2VuZXJhdG9yKHRoaXMuZGV2aWNlKTtcblx0XHRcdHRoaXMuY29udGV4dC5jb25maWd1cmUoe1xuXHRcdFx0XHRkZXZpY2U6IHRoaXMuZGV2aWNlLFxuXHRcdFx0XHRmb3JtYXQ6IHRoaXMucHJlc2VudGF0aW9uRm9ybWF0LFxuXHRcdFx0XHR1c2FnZTogVGV4dHVyZVVzYWdlLlJlbmRlckF0dGFjaG1lbnQsXG5cdFx0XHRcdGFscGhhTW9kZTogXCJvcGFxdWVcIixcblx0XHRcdFx0Li4ucHJlc2VudGF0aW9uQ29udGV4dERlc2NyaXB0b3Jcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5fdmlld1BvcnQgPSB7XG5cdFx0XHRcdHg6IDAsXG5cdFx0XHRcdHk6IDAsXG5cdFx0XHRcdHdpZHRoOiB0aGlzLmNhbnZhcy5jbGllbnRXaWR0aCAqIHRoaXMucGl4ZWxSYXRpbyxcblx0XHRcdFx0aGVpZ2h0OiB0aGlzLmNhbnZhcy5jbGllbnRIZWlnaHQgKiB0aGlzLnBpeGVsUmF0aW9cblx0XHRcdH07XG5cdFx0XHR0aGlzLl9zY2lzc29yVGVzdEVuYWJsZWQgPSBmYWxzZTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cHVibGljIHNldFZpZXdQb3J0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuXHRcdHRoaXMuX3ZpZXdQb3J0ID0geyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH07XG5cdH1cblx0cHVibGljIHNldFNjaXNzb3JUZXN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuXHRcdHRoaXMuX3NjaXNzb3JUZXN0RW5hYmxlZCA9IHRydWU7XG5cdFx0dGhpcy5fc2Npc3NvclRlc3QgPSB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfTtcblx0fVxuXHRwdWJsaWMgcmVzaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBwcmVzZW50YXRpb25Db250ZXh0RGVzY3JpcHRvciA9IHt9KTogdm9pZCB7XG5cdFx0Y29uc3QgdyA9IHdpZHRoICogdGhpcy5waXhlbFJhdGlvO1xuXHRcdGNvbnN0IGggPSBoZWlnaHQgKiB0aGlzLnBpeGVsUmF0aW87XG5cdFx0dGhpcy5jYW52YXMud2lkdGggPSB3O1xuXHRcdHRoaXMuY2FudmFzLmhlaWdodCA9IGg7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLmNhbnZhcy5zdHlsZSwgeyB3aWR0aCwgaGVpZ2h0IH0pO1xuXG5cdFx0dGhpcy5jb250ZXh0LmNvbmZpZ3VyZSh7XG5cdFx0XHRkZXZpY2U6IHRoaXMuZGV2aWNlLFxuXHRcdFx0Zm9ybWF0OiBuYXZpZ2F0b3IuZ3B1LmdldFByZWZlcnJlZENhbnZhc0Zvcm1hdCgpLFxuXHRcdFx0dXNhZ2U6IFRleHR1cmVVc2FnZS5SZW5kZXJBdHRhY2htZW50LFxuXHRcdFx0YWxwaGFNb2RlOiBHUFVDYW52YXNDb21wb3NpdGluZ0FscGhhTW9kZS5QcmVtdWx0aXBsaWVkLFxuXHRcdFx0Li4ucHJlc2VudGF0aW9uQ29udGV4dERlc2NyaXB0b3Jcblx0XHR9KTtcblx0fVxuXG5cdHB1YmxpYyByZW5kZXIoY29tbWFuZDogRHJhd0NvbW1hbmQsIHBhc3NFbmNvZGVyOiBHUFVSZW5kZXJQYXNzRW5jb2RlciwgY2FtZXJhPzogQ2FtZXJhKTogdm9pZCB7XG5cdFx0Y29uc3QgZ3JvdXBsYXlvdXRzID0gW107XG5cdFx0aWYgKGNvbW1hbmQuc2hhZGVyRGF0YSkge1xuXHRcdFx0aWYgKGNvbW1hbmQubW9kZWxNYXRyaXgpIGNvbW1hbmQuc2hhZGVyRGF0YS5yZXBsYWNlVW5pZm9ybUJ1ZmZlclZhbHVlKCdtb2RlbE1hdHJpeCcsY29tbWFuZC5tb2RlbE1hdHJpeCk7XG5cdFx0XHRjb21tYW5kLnNoYWRlckRhdGEuYmluZCh0aGlzLCBwYXNzRW5jb2Rlcik7XG5cdFx0fVxuXHRcdC8v6K6+572u57O757ufXG5cdFx0aWYgKGNhbWVyYSkge1xuXHRcdFx0Y2FtZXJhLnNoYWRlckRhdGEuYmluZCh0aGlzLCBwYXNzRW5jb2Rlcik7XG5cdFx0XHRncm91cGxheW91dHMucHVzaChjYW1lcmEuc2hhZGVyRGF0YS5ncm91cExheW91dCk7XG5cdFx0fVxuXHRcdGlmIChjb21tYW5kLmxpZ2h0ICYmIHRoaXMubGlnaHRNYW5nZXIubGlnaHRTaGFkZXJEYXRhKSB7XG5cdFx0XHR0aGlzLmxpZ2h0TWFuZ2VyLmxpZ2h0U2hhZGVyRGF0YS5iaW5kKHRoaXMsIHBhc3NFbmNvZGVyKTtcblx0XHRcdGdyb3VwbGF5b3V0cy5wdXNoKHRoaXMubGlnaHRNYW5nZXIubGlnaHRTaGFkZXJEYXRhLmdyb3VwTGF5b3V0KTtcblx0XHRcdGlmIChjb21tYW5kLnNoYWRlclNvdXJjZSkgY29tbWFuZC5zaGFkZXJTb3VyY2Uuc2V0RGVmaW5lcyh0aGlzLmxpZ2h0TWFuZ2VyLmxpZ2h0U2hhZGVyRGF0YS5kZWZpbmVzKTtcblx0XHR9XG5cdFx0aWYgKGNvbW1hbmQucmVuZGVyU3RhdGUpIGNvbW1hbmQucmVuZGVyU3RhdGUuYmluZChwYXNzRW5jb2RlciwgdGhpcyk7XG5cdFx0aWYgKGNvbW1hbmQudmVydGV4QnVmZmVyKSBjb21tYW5kLnZlcnRleEJ1ZmZlci5iaW5kKHRoaXMuZGV2aWNlLCBwYXNzRW5jb2Rlcik7XG5cblx0XHRpZiAoY29tbWFuZC5pbmRleEJ1ZmZlcikgY29tbWFuZC5pbmRleEJ1ZmZlci5iaW5kKHRoaXMuZGV2aWNlLCBwYXNzRW5jb2Rlcik7XG5cblx0XHRjb25zdCBwaXBlbGluZSA9IFBpcGVsaW5lLmdldFJlbmRlclBpcGVsaW5lRnJvbUNhY2hlKFxuXHRcdFx0dGhpcy5kZXZpY2UsXG5cdFx0XHRjb21tYW5kLFxuXHRcdFx0Z3JvdXBsYXlvdXRzLmNvbmNhdChjb21tYW5kLnNoYWRlckRhdGEuZ3JvdXBMYXlvdXQpXG5cdFx0KTtcblx0XHRwaXBlbGluZS5iaW5kKHBhc3NFbmNvZGVyKTtcblx0XHRpZiAoY29tbWFuZC5pbmRleEJ1ZmZlcikge1xuXHRcdFx0cGFzc0VuY29kZXIuZHJhd0luZGV4ZWQoY29tbWFuZC5jb3VudCB8fCAwLCBjb21tYW5kLmluc3RhbmNlcyB8fCAxLCAwLCAwLCAwKTtcblx0XHR9IGVsc2UgaWYgKGNvbW1hbmQuY291bnQpIHtcblx0XHRcdHBhc3NFbmNvZGVyLmRyYXcoY29tbWFuZC5jb3VudCwgY29tbWFuZC5pbnN0YW5jZXMgfHwgMSwgMCwgMCk7XG5cdFx0fVxuXHR9XG5cdHB1YmxpYyBjb21wdXRlKGNvbW1hbmQ6IERyYXdDb21tYW5kLCBwYXNzRW5jb2RlcjogR1BVQ29tcHV0ZVBhc3NFbmNvZGVyKSB7XG5cdFx0Y29uc3QgcGlwZWxpbmUgPSBQaXBlbGluZS5nZXRDb21wdXRlUGlwZWxpbmVGcm9tQ2FjaGUodGhpcy5kZXZpY2UsIGNvbW1hbmQsIFtjb21tYW5kLnNoYWRlckRhdGEuZ3JvdXBMYXlvdXRdKTtcblx0XHRwaXBlbGluZS5iaW5kKHBhc3NFbmNvZGVyKTtcblx0XHRjb25zdCB7IHgsIHksIHogfSA9IGNvbW1hbmQuZGlzcGF0Y2g7XG5cdFx0cGFzc0VuY29kZXIuZGlzcGF0Y2hXb3JrZ3JvdXBzKHgsIHksIHopO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRleHQ7XG4iLCJpbXBvcnQgeyBUZXh0dXJlRm9ybWF0IH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcbmltcG9ydCB7IFdlYkdQVVRleHR1cmVQcm9wcywgSW1hZ2VEYXRhIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVVHlwZXNcIjtcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vQ29udGV4dFwiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4vU2FtcGxlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0dXJlIHtcblx0W3g6IHN0cmluZ106IGFueTtcblx0cHJpdmF0ZSBfdGV4dHVyZVZpZXc6IEdQVVRleHR1cmVWaWV3O1xuXHRwdWJsaWMgZ3B1VGV4dHVyZT86IEdQVVRleHR1cmU7XG5cdHB1YmxpYyBtaXBMZXZlbENvdW50PzogbnVtYmVyO1xuXHRwdWJsaWMgc2FtcGxlcj86IFNhbXBsZXI7XG5cdHB1YmxpYyBjb250ZXh0PzogQ29udGV4dDtcblx0cHVibGljIHRleHR1cmVQcm9wPzogV2ViR1BVVGV4dHVyZVByb3BzO1xuXHRwdWJsaWMgZGlydHk6IGJvb2xlYW47XG5cdGNvbnN0cnVjdG9yKHRleHR1cmVQcm9wOiBXZWJHUFVUZXh0dXJlUHJvcHMpIHtcblx0XHR0aGlzLnRleHR1cmVQcm9wID0gT2JqZWN0LmFzc2lnbihcblx0XHRcdHtcblx0XHRcdFx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0LlJHQkE4VW5vcm0sXG5cdFx0XHRcdHVzYWdlOiBHUFVUZXh0dXJlVXNhZ2UuVEVYVFVSRV9CSU5ESU5HIHwgR1BVVGV4dHVyZVVzYWdlLkNPUFlfRFNUIHwgR1BVVGV4dHVyZVVzYWdlLlJFTkRFUl9BVFRBQ0hNRU5UXG5cdFx0XHR9LFxuXHRcdFx0dGV4dHVyZVByb3Bcblx0XHQpO1xuXHRcdHRoaXMuc2FtcGxlciA9IHRleHR1cmVQcm9wLnNhbXBsZXI7XG5cdFx0dGhpcy5kaXJ0eSA9IHRydWU7XG5cdH1cblx0Z2V0IGxheW91dFR5cGUoKSB7XG5cdFx0Y29uc3QgeyB2aWV3Rm9ybWF0cywgc2FtcGxlVHlwZSwgc2FtcGxlQ291bnQgfSA9IHRoaXMudGV4dHVyZVByb3A7XG5cdFx0Ly8gY29uc3Rcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2FtcGxlVHlwZTogZGVmYXVsdFZhbHVlKHNhbXBsZVR5cGUsIFwiZmxvYXRcIiksXG5cdFx0XHR2aWV3RGltZW5zaW9uOiBkZWZhdWx0VmFsdWUodmlld0Zvcm1hdHMsIFwiMmRcIiksXG5cdFx0XHRtdWx0aXNhbXBsZWQ6IHNhbXBsZUNvdW50ICYmIHNhbXBsZUNvdW50ID4gMSA/IHRydWUgOiBmYWxzZVxuXHRcdH07XG5cdH1cblx0Z2V0IHRleHR1cmVWaWV3KCkge1xuXHRcdGlmICghdGhpcy5fdGV4dHVyZVZpZXcpXG5cdFx0XHR0aGlzLl90ZXh0dXJlVmlldyA9IHRoaXMuZ3B1VGV4dHVyZS5jcmVhdGVWaWV3KHtcblx0XHRcdFx0ZGltZW5zaW9uOiA8R1BVVGV4dHVyZVZpZXdEaW1lbnNpb24+ZGVmYXVsdFZhbHVlKHRoaXMudGV4dHVyZVByb3Audmlld0Zvcm1hdHMsIFwiMmRcIilcblx0XHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLl90ZXh0dXJlVmlldztcblx0fVxuXHR1cGRhdGUoY29udGV4dDogQ29udGV4dCkge1xuXHRcdC8vIHRvZG8g5LuF6ICD6JmR6YeN5bu677yIc2l6ZeaUueWPmO+8ie+8jOWQjue7reimgeiAg+iZkWRhdGHmlLnlj5hcblx0XHRpZiAoIXRoaXMuY29udGV4dCkgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblx0XHRpZiAodGhpcy5kaXJ0eSkge1xuXHRcdFx0aWYgKHRoaXMuZ3B1VGV4dHVyZSkgdGhpcy5ncHVUZXh0dXJlLmRlc3Ryb3koKTtcblx0XHRcdHRoaXMuZ3B1VGV4dHVyZSA9IHRoaXMuY3JlYXRlR1BVVGV4dHVyZSgpO1xuXHRcdFx0dGhpcy5kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0aWYgKHRoaXMudGV4dHVyZVByb3AuZGF0YSkge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnRleHR1cmVQcm9wLmRhdGEpKSB7XG5cdFx0XHRcdFx0dGhpcy50ZXh0dXJlUHJvcC5kYXRhLmZvckVhY2goKGltYWdlRGF0YSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXREYXRhKGltYWdlRGF0YSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5zZXREYXRhKHRoaXMudGV4dHVyZVByb3AuZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnRleHR1cmVQcm9wLm5lZWRNaXBNYXApIHtcblx0XHRcdFx0dGhpcy5ncHVUZXh0dXJlID0gY29udGV4dC5taXBtYXBUb29scy5nZW5lcmF0ZU1pcG1hcCh0aGlzKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnNhbXBsZXIpIHRoaXMuc2FtcGxlci51cGRhdGUoY29udGV4dCk7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgc2V0RGF0YShvcHRpb25zOiBJbWFnZURhdGEpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRzb3VyY2UsXG5cdFx0XHR3aWR0aCA9IG9wdGlvbnMuc291cmNlLndpZHRoLFxuXHRcdFx0aGVpZ2h0ID0gb3B0aW9ucy5zb3VyY2UuaGVpZ2h0LFxuXHRcdFx0ZGVwdGggPSAxLFxuXHRcdFx0c291cmNlWCA9IDAsXG5cdFx0XHRzb3VyY2VZID0gMCxcblx0XHRcdG1pcExldmVsID0gMCxcblx0XHRcdHggPSAwLFxuXHRcdFx0eSA9IDAsXG5cdFx0XHR6ID0gMCxcblx0XHRcdGFzcGVjdCA9IFwiYWxsXCIsXG5cdFx0XHRjb2xvclNwYWNlID0gXCJzcmdiXCIsXG5cdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGEgPSBmYWxzZVxuXHRcdH0gPSBvcHRpb25zO1xuXG5cdFx0dGhpcy5jb250ZXh0LmRldmljZS5xdWV1ZS5jb3B5RXh0ZXJuYWxJbWFnZVRvVGV4dHVyZShcblx0XHRcdHtcblx0XHRcdFx0c291cmNlLFxuXHRcdFx0XHRvcmlnaW46IFtzb3VyY2VYLCBzb3VyY2VZXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0dGV4dHVyZTogdGhpcy5ncHVUZXh0dXJlLFxuXHRcdFx0XHRvcmlnaW46IFt4LCB5LCB6XSxcblx0XHRcdFx0bWlwTGV2ZWwsXG5cdFx0XHRcdGFzcGVjdCxcblx0XHRcdFx0Y29sb3JTcGFjZSxcblx0XHRcdFx0cHJlbXVsdGlwbGllZEFscGhhXG5cdFx0XHR9LFxuXHRcdFx0W3dpZHRoLCBoZWlnaHQsIGRlcHRoXVxuXHRcdCk7XG5cdH1cblx0c2V0U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZGVwdGg/OiBudW1iZXIpIHtcblx0XHR0aGlzLnRleHR1cmVQcm9wLnNpemUud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLnRleHR1cmVQcm9wLnNpemUuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdGlmIChkZXB0aCkgdGhpcy50ZXh0dXJlUHJvcC5zaXplLmRlcHRoID0gZGVwdGg7XG5cdFx0dGhpcy5kaXJ0eSA9IHRydWU7XG5cdH1cblx0ZGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmdwdVRleHR1cmUuZGVzdHJveSgpO1xuXHR9XG5cdHByaXZhdGUgY3JlYXRlR1BVVGV4dHVyZSgpIHtcblx0XHRpZiAodHlwZW9mIHRoaXMudGV4dHVyZVByb3AuZm9ybWF0ID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJudW1iZXIgZm9ybWF0XCIpO1xuXHRcdH1cblx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGRlcHRoIH0gPSB0aGlzLnRleHR1cmVQcm9wLnNpemU7XG5cdFx0cmV0dXJuIHRoaXMuY29udGV4dC5kZXZpY2UuY3JlYXRlVGV4dHVyZSh7XG5cdFx0XHRzaXplOiBbd2lkdGgsIGhlaWdodCwgZGVwdGhdLFxuXHRcdFx0ZGltZW5zaW9uOiB0aGlzLnRleHR1cmVQcm9wLmRpbWVuc2lvbiB8fCBcIjJkXCIsXG5cdFx0XHRmb3JtYXQ6IHRoaXMudGV4dHVyZVByb3AuZm9ybWF0IGFzIEdQVVRleHR1cmVGb3JtYXQsXG5cdFx0XHR1c2FnZTogdGhpcy50ZXh0dXJlUHJvcC51c2FnZSxcblx0XHRcdG1pcExldmVsQ291bnQ6IHRoaXMudGV4dHVyZVByb3AubWlwTGV2ZWxDb3VudCB8fCAxLFxuXHRcdFx0c2FtcGxlQ291bnQ6IHRoaXMudGV4dHVyZVByb3Auc2FtcGxlQ291bnQgfHwgMVxuXHRcdH0pO1xuXHR9XG59XG4iLCJpbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9Db250ZXh0XCI7XG5cbmNsYXNzIFNhbXBsZXIge1xuXHRwdWJsaWMgZ3B1U2FtcGxlcjogR1BVU2FtcGxlcjtcblx0bGF5b3V0VHlwZTogYW55O1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwdWJsaWMgZGVzY3JpcHRvcjogR1BVU2FtcGxlckRlc2NyaXB0b3IgPSB7XG5cdFx0XHRtYWdGaWx0ZXI6IFwibGluZWFyXCIsXG5cdFx0XHRtaW5GaWx0ZXI6IFwibGluZWFyXCIsXG5cdFx0XHQvLyBtaXBtYXBGaWx0ZXI6IFwibGluZWFyXCIsXG5cdFx0XHRhZGRyZXNzTW9kZVU6IFwiY2xhbXAtdG8tZWRnZVwiLFxuXHRcdFx0YWRkcmVzc01vZGVWOiBcImNsYW1wLXRvLWVkZ2VcIlxuXHRcdFx0Ly8gYWRkcmVzc01vZGVXOiBcImNsYW1wLXRvLWVkZ2VcIixcblx0XHR9XG5cdCkge1xuXHRcdHRoaXMubGF5b3V0VHlwZSA9IHtcblx0XHRcdHR5cGU6IFwiZmlsdGVyaW5nXCJcblx0XHR9O1xuXHR9XG5cdHVwZGF0ZShjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0aWYgKCF0aGlzLmdwdVNhbXBsZXIpIHRoaXMuZ3B1U2FtcGxlciA9IGNvbnRleHQuZGV2aWNlLmNyZWF0ZVNhbXBsZXIodGhpcy5kZXNjcmlwdG9yKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBTYW1wbGVyO1xuIiwiaW1wb3J0IHtcblx0QmxlbmRGYWN0b3IsXG5cdEJsZW5kT3BlcmF0aW9uLFxuXHRUZXh0dXJlRm9ybWF0LFxuXHRHUFVDb2xvcldyaXRlLFxuXHRDb21wYXJlRnVuY3Rpb24sXG5cdFN0ZW5jaWxPcGVyYXRpb24sXG5cdEZyb250RmFjZSxcblx0Q3VsbE1vZGUsXG5cdFByaW1pdGl2ZVRvcG9sb2d5XG59IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuL0NvbnRleHRcIjtcblxuZXhwb3J0IGNsYXNzIFJlbmRlclN0YXRlIHtcblx0c2Npc3NvclRlc3Q6IFNjaXNzb3JUZXN0O1xuXHR2aWV3cG9ydDogVmlld1BvcnQ7XG5cdHRhcmdldHM6IEFycmF5PFRhcmdldD47XG5cdGRlcHRoU3RlbmNpbDogRGVwdGhTdGVuY2lsO1xuXHRibGVuZENvbnN0YW50OiBCbGVuZENvbnN0YW50O1xuXHRzdGVuY2lsUmVmZXJlbmNlOiBudW1iZXI7XG5cdG11bHRpc2FtcGxlOiBNdWx0aVNhbXBsZTtcblx0cHJpbWl0aXZlOiBQcmltaXRpdmU7XG5cdHN0ZW5jaWxFbmFibGVkOiBib29sZWFuO1xuXHRzY2lzc29yVGVzdEVuYWJsZWQ6IGJvb2xlYW47XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuc2Npc3NvclRlc3QgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy52aWV3cG9ydCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmRlcHRoU3RlbmNpbCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmJsZW5kQ29uc3RhbnQgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5zdGVuY2lsUmVmZXJlbmNlID0gMDtcblx0XHR0aGlzLm11bHRpc2FtcGxlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMucHJpbWl0aXZlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuc3RlbmNpbEVuYWJsZWQgPSBmYWxzZTtcblx0XHR0aGlzLnNjaXNzb3JUZXN0RW5hYmxlZCA9IGZhbHNlO1xuXHRcdHRoaXMudGFyZ2V0cyA9IHVuZGVmaW5lZDtcblx0fVxuXHRiaW5kKHBhc3NFbmNvZGVyOiBHUFVSZW5kZXJQYXNzRW5jb2RlciwgY29udGV4dDogQ29udGV4dCkge1xuXHRcdC8vIGNvbnN0IHt3aWR0aCxoZWlnaHR9PWNvbnRleHQucHJlc2VudGF0aW9uU2l6ZTtcblx0XHQvLyB0aGlzLnNldFZpZXdQb3J0KDQwMCwwLDQwMCw5MDApO1xuXHRcdC8vIHRoaXMuc2V0U2Npc3NvclJlY3QoNDAwLDAsNDAwLDkwMClcblx0XHQvLyBpZiAodGhpcy5zdGVuY2lsUmVmZXJlbmNlKSBwYXNzRW5jb2Rlci5zZXRTdGVuY2lsUmVmZXJlbmNlKHRoaXMuc3RlbmNpbFJlZmVyZW5jZSk7XG5cdFx0Ly8gaWYgKHRoaXMudmlld3BvcnQuZXF1YWxzQW5kVXBkYXRlQ2FjaGUoY2FjaGVWaWV3UG9ydCkpIHtcblx0XHQvLyBcdGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgbWluRGVwdGgsIG1heERlcHRoIH0gPSB0aGlzLnZpZXdwb3J0O1xuXHRcdC8vIHBhc3NFbmNvZGVyLnNldFZpZXdwb3J0KDAsIDAsIDQwMCwgNDAwLCAwLCAxKTtcblx0XHQvL31cblx0XHRpZiAodGhpcy5ibGVuZENvbnN0YW50KSBwYXNzRW5jb2Rlci5zZXRCbGVuZENvbnN0YW50KHRoaXMuYmxlbmRDb25zdGFudCk7XG5cdFx0Ly8gaWYgKHRoaXMuc2Npc3NvclRlc3QuZXF1YWxzQW5kVXBkYXRlQ2FjaGUoY2FjaGVTY2lzc29yVGVzdCkpIHtcblx0XHQvLyBcdGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5zY2lzc29yVGVzdDtcblx0XHQvLyBcdHBhc3NFbmNvZGVyLnNldFNjaXNzb3JSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuXHRcdC8vIH1cblx0fVxuXHRzZXRWaWV3UG9ydCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBtaW5EZXB0aCA9IDAsIG1heERlcHRoID0gMSkge1xuXHRcdGlmICh0aGlzLnZpZXdwb3J0KSB7XG5cdFx0XHR0aGlzLnZpZXdwb3J0LnNldCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBtaW5EZXB0aCwgbWF4RGVwdGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnZpZXdwb3J0ID0gbmV3IFZpZXdQb3J0KHgsIHksIHdpZHRoLCBoZWlnaHQsIG1pbkRlcHRoLCBtYXhEZXB0aCk7XG5cdFx0fVxuXHR9XG5cdHNldFNjaXNzb3JSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRpZiAodGhpcy5zY2lzc29yVGVzdCkge1xuXHRcdFx0dGhpcy5zY2lzc29yVGVzdC5zZXQoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2Npc3NvclRlc3QgPSBuZXcgU2Npc3NvclRlc3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fVxuXHR9XG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5zY2lzc29yVGVzdCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnZpZXdwb3J0ID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuZGVwdGhTdGVuY2lsID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuYmxlbmRDb25zdGFudCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnN0ZW5jaWxSZWZlcmVuY2UgPSAtMTtcblx0XHR0aGlzLm11bHRpc2FtcGxlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMucHJpbWl0aXZlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuc3RlbmNpbEVuYWJsZWQgPSBmYWxzZTtcblx0XHR0aGlzLnNjaXNzb3JUZXN0RW5hYmxlZCA9IGZhbHNlO1xuXHR9XG59XG5leHBvcnQgY2xhc3MgQmxlbmRDb25zdGFudCB7XG5cdHI6IG51bWJlcjtcblx0ZzogbnVtYmVyO1xuXHRiOiBudW1iZXI7XG5cdGE6IG51bWJlcjtcblx0Y29uc3RydWN0b3IocjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYTogbnVtYmVyKSB7XG5cdFx0dGhpcy5yID0gcjtcblx0XHR0aGlzLmcgPSBnO1xuXHRcdHRoaXMuYiA9IGI7XG5cdFx0dGhpcy5hID0gYTtcblx0fVxufVxuZXhwb3J0IGNsYXNzIE11bHRpU2FtcGxlIHtcblx0Y291bnQ6IG51bWJlcjtcblx0bWFzazogbnVtYmVyO1xuXHRhbHBoYVRvQ292ZXJhZ2VFbmFibGVkOiBib29sZWFuO1xuXHRjb25zdHJ1Y3Rvcihjb3VudDogbnVtYmVyID0gMSwgbWFzazogbnVtYmVyID0gMHhmZmZmZmZmZiwgYWxwaGFUb0NvdmVyYWdlRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlKSB7XG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXHRcdHRoaXMubWFzayA9IG1hc2s7XG5cdFx0dGhpcy5hbHBoYVRvQ292ZXJhZ2VFbmFibGVkID0gYWxwaGFUb0NvdmVyYWdlRW5hYmxlZDtcblx0fVxuXHRnZXRNdWx0aVNhbXBsZURlYygpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y291bnQ6IHRoaXMuY291bnQsXG5cdFx0XHRtYXNrOiB0aGlzLm1hc2ssXG5cdFx0XHRhbHBoYVRvQ292ZXJhZ2VFbmFibGVkOiB0aGlzLmFscGhhVG9Db3ZlcmFnZUVuYWJsZWRcblx0XHR9O1xuXHR9XG59XG5leHBvcnQgY2xhc3MgU2Npc3NvclRlc3Qge1xuXHR4OiBudW1iZXI7XG5cdHk6IG51bWJlcjtcblx0d2lkdGg6IG51bWJlcjtcblx0aGVpZ2h0OiBudW1iZXI7XG5cdHZhcmlhYmxlOiBib29sZWFuO1xuXHRjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwLCB3aWR0aDogbnVtYmVyID0gMCwgaGVpZ2h0OiBudW1iZXIgPSAwLCB2YXJpYWJsZTogYm9vbGVhbiA9IHRydWUpIHtcblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdHRoaXMudmFyaWFibGUgPSB2YXJpYWJsZTtcblx0fVxuXHRzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0fVxuXHRlcXVhbHNBbmRVcGRhdGVDYWNoZShzY2lzc29yVGVzdDogU2Npc3NvclRlc3QpOiBib29sZWFuIHtcblx0XHRjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHNjaXNzb3JUZXN0O1xuXHRcdGlmICh0aGlzLnggIT0geCB8fCB0aGlzLnkgIT0geSB8fCB0aGlzLndpZHRoICE9IHdpZHRoIHx8IHRoaXMuaGVpZ2h0ICE9IGhlaWdodCkge1xuXHRcdFx0c2Npc3NvclRlc3Quc2V0KHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5leHBvcnQgY2xhc3MgVmlld1BvcnQge1xuXHR4OiBudW1iZXI7XG5cdHk6IG51bWJlcjtcblx0d2lkdGg6IG51bWJlcjtcblx0aGVpZ2h0OiBudW1iZXI7XG5cdG1pbkRlcHRoOiBudW1iZXI7XG5cdG1heERlcHRoOiBudW1iZXI7XG5cdHZhcmlhYmxlOiBib29sZWFuO1xuXHRjb25zdHJ1Y3Rvcihcblx0XHR4OiBudW1iZXIgPSAwLFxuXHRcdHk6IG51bWJlciA9IDAsXG5cdFx0d2lkdGg6IG51bWJlciA9IDAsXG5cdFx0aGVpZ2h0OiBudW1iZXIgPSAwLFxuXHRcdG1pbkRlcHRoOiBudW1iZXIgPSAwLFxuXHRcdG1heERlcHRoOiBudW1iZXIgPSAxLFxuXHRcdHZhcmlhYmxlOiBib29sZWFuID0gdHJ1ZVxuXHQpIHtcblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdHRoaXMubWluRGVwdGggPSBtaW5EZXB0aDtcblx0XHR0aGlzLm1heERlcHRoID0gbWF4RGVwdGg7XG5cdFx0dGhpcy52YXJpYWJsZSA9IHZhcmlhYmxlO1xuXHR9XG5cdHNldCh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG1pbkRlcHRoOiBudW1iZXIgPSAwLCBtYXhEZXB0aDogbnVtYmVyID0gMSkge1xuXHRcdGlmICghdGhpcy52YXJpYWJsZSkgcmV0dXJuO1xuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0dGhpcy5taW5EZXB0aCA9IG1pbkRlcHRoO1xuXHRcdHRoaXMubWF4RGVwdGggPSBtYXhEZXB0aDtcblx0fVxuXHRlcXVhbHNBbmRVcGRhdGVDYWNoZSh2aWV3UG9ydDogVmlld1BvcnQpOiBib29sZWFuIHtcblx0XHRjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQsIG1pbkRlcHRoLCBtYXhEZXB0aCB9ID0gdmlld1BvcnQ7XG5cdFx0aWYgKFxuXHRcdFx0dGhpcy54ICE9IHggfHxcblx0XHRcdHRoaXMueSAhPSB5IHx8XG5cdFx0XHR0aGlzLndpZHRoICE9IHdpZHRoIHx8XG5cdFx0XHR0aGlzLmhlaWdodCAhPSBoZWlnaHQgfHxcblx0XHRcdHRoaXMubWluRGVwdGggIT0gbWluRGVwdGggfHxcblx0XHRcdHRoaXMubWF4RGVwdGggIT0gbWF4RGVwdGhcblx0XHQpIHtcblx0XHRcdHZpZXdQb3J0LnNldCh0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMubWluRGVwdGgsIHRoaXMubWF4RGVwdGgpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuZXhwb3J0IGNsYXNzIFByaW1pdGl2ZSB7XG5cdGZyb250RmFjZTogRnJvbnRGYWNlO1xuXHRjdWxsTW9kZTogQ3VsbE1vZGU7XG5cdHVuY2xpcHBlZERlcHRoOiBib29sZWFuO1xuXHR0b3BvbG9neTogUHJpbWl0aXZlVG9wb2xvZ3k7XG5cdGNvbnN0cnVjdG9yKHRvcG9sb2d5PzogUHJpbWl0aXZlVG9wb2xvZ3ksIGN1bGxNb2RlPzogQ3VsbE1vZGUsIGZyb250RmFjZT86IEZyb250RmFjZSwgdW5jbGlwcGVkRGVwdGg/OiBib29sZWFuKSB7XG5cdFx0dGhpcy5mcm9udEZhY2UgPSBkZWZhdWx0VmFsdWUoZnJvbnRGYWNlLCBGcm9udEZhY2UuQ0NXKTtcblx0XHR0aGlzLmN1bGxNb2RlID0gZGVmYXVsdFZhbHVlKGN1bGxNb2RlLCBDdWxsTW9kZS5Ob25lKTtcblx0XHR0aGlzLnVuY2xpcHBlZERlcHRoID0gZGVmYXVsdFZhbHVlKHVuY2xpcHBlZERlcHRoLCBmYWxzZSk7XG5cdFx0dGhpcy50b3BvbG9neSA9IGRlZmF1bHRWYWx1ZSh0b3BvbG9neSwgUHJpbWl0aXZlVG9wb2xvZ3kuVHJpYW5nbGVMaXN0KTtcblx0fVxuXHRnZXRHUFVQcmltaXRpdmVEZWMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZyb250RmFjZTogdGhpcy5mcm9udEZhY2UsXG5cdFx0XHRjdWxsTW9kZTogdGhpcy5jdWxsTW9kZSxcblx0XHRcdHVuY2xpcHBlZERlcHRoOiB0aGlzLnVuY2xpcHBlZERlcHRoLFxuXHRcdFx0dG9wb2xvZ3k6IHRoaXMudG9wb2xvZ3lcblx0XHR9O1xuXHR9XG59XG5leHBvcnQgY2xhc3MgRGVwdGhTdGVuY2lsIHtcblx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0O1xuXHRkZXB0aFdyaXRlRW5hYmxlZDogYm9vbGVhbjtcblx0ZGVwdGhDb21wYXJlOiBDb21wYXJlRnVuY3Rpb247XG5cdHN0ZW5jaWxSZWFkTWFzazogbnVtYmVyO1xuXHRzdGVuY2lsV3JpdGVNYXNrOiBudW1iZXI7XG5cdHN0ZW5jaWxGcm9udENvbXBhcmU6IENvbXBhcmVGdW5jdGlvbjtcblx0c3RlbmNpbEZyb250RmFpbE9wOiBTdGVuY2lsT3BlcmF0aW9uO1xuXHRzdGVuY2lsRnJvbnREZXB0aEZhaWxPcDogU3RlbmNpbE9wZXJhdGlvbjtcblx0c3RlbmNpbEZyb250UGFzc09wOiBTdGVuY2lsT3BlcmF0aW9uO1xuXG5cdHN0ZW5jaWxCYWNrQ29tcGFyZTogQ29tcGFyZUZ1bmN0aW9uO1xuXHRzdGVuY2lsQmFja0ZhaWxPcDogU3RlbmNpbE9wZXJhdGlvbjtcblx0c3RlbmNpbEJhY2tEZXB0aEZhaWxPcDogU3RlbmNpbE9wZXJhdGlvbjtcblx0c3RlbmNpbEJhY2tQYXNzT3A6IFN0ZW5jaWxPcGVyYXRpb247XG5cdGRlcHRoQmlhczogbnVtYmVyO1xuXHRkZXB0aEJpYXNTbG9wZVNjYWxlOiBudW1iZXI7XG5cdGRlcHRoQmlhc0NsYW1wOiBudW1iZXI7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBEZXB0aFN0ZW5jaWxQcm9wcykge1xuXHRcdHRoaXMuZm9ybWF0ID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmZvcm1hdCwgVGV4dHVyZUZvcm1hdC5EZXB0aDI0UGx1cyk7XG5cdFx0dGhpcy5kZXB0aFdyaXRlRW5hYmxlZCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5kZXB0aFdyaXRlRW5hYmxlZCwgdHJ1ZSk7XG5cdFx0dGhpcy5kZXB0aENvbXBhcmUgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uZGVwdGhDb21wYXJlLCBDb21wYXJlRnVuY3Rpb24uTGVzcyk7XG5cdFx0dGhpcy5zdGVuY2lsUmVhZE1hc2sgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbFJlYWRNYXNrLCAweGZmZmZmZmZmKTtcblx0XHR0aGlzLnN0ZW5jaWxXcml0ZU1hc2sgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbFdyaXRlTWFzaywgMHhmZmZmZmZmZik7XG5cdFx0dGhpcy5zdGVuY2lsRnJvbnRDb21wYXJlID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LnN0ZW5jaWxGcm9udENvbXBhcmUsIENvbXBhcmVGdW5jdGlvbi5BbHdheXMpO1xuXHRcdHRoaXMuc3RlbmNpbEZyb250RmFpbE9wID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LnN0ZW5jaWxGcm9udEZhaWxPcCwgU3RlbmNpbE9wZXJhdGlvbi5LZWVwKTtcblx0XHR0aGlzLnN0ZW5jaWxGcm9udERlcHRoRmFpbE9wID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LnN0ZW5jaWxGcm9udERlcHRoRmFpbE9wLCBTdGVuY2lsT3BlcmF0aW9uLktlZXApO1xuXHRcdHRoaXMuc3RlbmNpbEZyb250UGFzc09wID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LnN0ZW5jaWxGcm9udFBhc3NPcCwgU3RlbmNpbE9wZXJhdGlvbi5LZWVwKTtcblx0XHR0aGlzLnN0ZW5jaWxCYWNrQ29tcGFyZSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5zdGVuY2lsQmFja0NvbXBhcmUsIENvbXBhcmVGdW5jdGlvbi5BbHdheXMpO1xuXHRcdHRoaXMuc3RlbmNpbEJhY2tGYWlsT3AgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uc3RlbmNpbEJhY2tGYWlsT3AsIFN0ZW5jaWxPcGVyYXRpb24uS2VlcCk7XG5cdFx0dGhpcy5zdGVuY2lsQmFja0RlcHRoRmFpbE9wID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LnN0ZW5jaWxCYWNrRGVwdGhGYWlsT3AsIFN0ZW5jaWxPcGVyYXRpb24uS2VlcCk7XG5cdFx0dGhpcy5zdGVuY2lsQmFja1Bhc3NPcCA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5zdGVuY2lsQmFja1Bhc3NPcCwgU3RlbmNpbE9wZXJhdGlvbi5LZWVwKTtcblx0XHR0aGlzLmRlcHRoQmlhcyA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5kZXB0aEJpYXMsIDApO1xuXHRcdHRoaXMuZGVwdGhCaWFzU2xvcGVTY2FsZSA9IGRlZmF1bHRWYWx1ZShvcHRpb25zPy5kZXB0aEJpYXNTbG9wZVNjYWxlLCAwKTtcblx0XHR0aGlzLmRlcHRoQmlhc0NsYW1wID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmRlcHRoQmlhc0NsYW1wLCAwKTtcblx0fVxuXHRnZXRHUFVEZXB0aFN0ZW5jaWxEZWMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZvcm1hdDogdGhpcy5mb3JtYXQsXG5cdFx0XHRkZXB0aFdyaXRlRW5hYmxlZDogdGhpcy5kZXB0aFdyaXRlRW5hYmxlZCxcblx0XHRcdGRlcHRoQ29tcGFyZTogdGhpcy5kZXB0aENvbXBhcmUsXG5cdFx0XHRzdGVuY2lsUmVhZE1hc2s6IHRoaXMuc3RlbmNpbFJlYWRNYXNrLFxuXHRcdFx0c3RlbmNpbFdyaXRlTWFzazogdGhpcy5zdGVuY2lsV3JpdGVNYXNrLFxuXHRcdFx0c3RlbmNpbEZyb250OiB7XG5cdFx0XHRcdGNvbXBhcmU6IHRoaXMuc3RlbmNpbEZyb250Q29tcGFyZSxcblx0XHRcdFx0ZmFpbE9wOiB0aGlzLnN0ZW5jaWxGcm9udEZhaWxPcCxcblx0XHRcdFx0ZGVwdGhGYWlsT3A6IHRoaXMuc3RlbmNpbEZyb250RGVwdGhGYWlsT3AsXG5cdFx0XHRcdHBhc3NPcDogdGhpcy5zdGVuY2lsRnJvbnRQYXNzT3Bcblx0XHRcdH0sXG5cdFx0XHRzdGVuY2lsQmFjazoge1xuXHRcdFx0XHRjb21wYXJlOiB0aGlzLnN0ZW5jaWxCYWNrQ29tcGFyZSxcblx0XHRcdFx0ZmFpbE9wOiB0aGlzLnN0ZW5jaWxCYWNrRmFpbE9wLFxuXHRcdFx0XHRkZXB0aEZhaWxPcDogdGhpcy5zdGVuY2lsQmFja0RlcHRoRmFpbE9wLFxuXHRcdFx0XHRwYXNzT3A6IHRoaXMuc3RlbmNpbEJhY2tQYXNzT3Bcblx0XHRcdH0sXG5cdFx0XHRkZXB0aEJpYXM6IHRoaXMuZGVwdGhCaWFzLFxuXHRcdFx0ZGVwdGhCaWFzU2xvcGVTY2FsZTogdGhpcy5kZXB0aEJpYXNTbG9wZVNjYWxlLFxuXHRcdFx0ZGVwdGhCaWFzQ2xhbXA6IHRoaXMuZGVwdGhCaWFzQ2xhbXBcblx0XHR9O1xuXHR9XG59XG5leHBvcnQgY2xhc3MgVGFyZ2V0IHtcblx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0O1xuXHRibGVuZENvbG9yT3BlcmF0aW9uPzogQmxlbmRPcGVyYXRpb247XG5cdGJsZW5kQ29sb3JTcmNGYWN0b3I/OiBCbGVuZEZhY3Rvcjtcblx0YmxlbmRDb2xvckRzdEZhY3Rvcj86IEJsZW5kRmFjdG9yO1xuXHRibGVuZEFscGhhT3BlcmF0aW9uPzogQmxlbmRPcGVyYXRpb247XG5cdGJsZW5kQWxwaGFTcmNGYWN0b3I/OiBCbGVuZEZhY3Rvcjtcblx0YmxlbmRBbHBoYURzdEZhY3Rvcj86IEJsZW5kRmFjdG9yO1xuXHR3cml0ZU1hc2s6IEdQVUNvbG9yV3JpdGU7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBUYXJnZXRQcm9wcykge1xuXHRcdHRoaXMuZm9ybWF0ID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmZvcm1hdCwgVGV4dHVyZUZvcm1hdC5CR1JBOFVub3JtKTtcblx0XHR0aGlzLmJsZW5kQ29sb3JPcGVyYXRpb24gPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uYmxlbmRDb2xvck9wZXJhdGlvbiwgQmxlbmRPcGVyYXRpb24uQWRkKTtcblx0XHR0aGlzLmJsZW5kQ29sb3JTcmNGYWN0b3IgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uYmxlbmRDb2xvclNyY0ZhY3RvciwgQmxlbmRGYWN0b3I/LlNyY0FscGhhKTtcblx0XHR0aGlzLmJsZW5kQ29sb3JEc3RGYWN0b3IgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8uYmxlbmRDb2xvckRzdEZhY3RvciwgQmxlbmRGYWN0b3IuT25lTWludXNTcmNBbHBoYSk7XG5cdFx0dGhpcy5ibGVuZEFscGhhT3BlcmF0aW9uID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmJsZW5kQWxwaGFPcGVyYXRpb24sIEJsZW5kT3BlcmF0aW9uLkFkZCk7XG5cdFx0dGhpcy5ibGVuZEFscGhhU3JjRmFjdG9yID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmJsZW5kQWxwaGFTcmNGYWN0b3IsIEJsZW5kRmFjdG9yLk9uZSk7XG5cdFx0dGhpcy5ibGVuZEFscGhhRHN0RmFjdG9yID0gZGVmYXVsdFZhbHVlKG9wdGlvbnM/LmJsZW5kQWxwaGFEc3RGYWN0b3IsIEJsZW5kRmFjdG9yLk9uZSk7XG5cdFx0dGhpcy53cml0ZU1hc2sgPSBkZWZhdWx0VmFsdWUob3B0aW9ucz8ud3JpdGVNYXNrLCBHUFVDb2xvcldyaXRlLkFsbCk7XG5cdH1cblx0Z2V0R1BVVGFyZ2V0RGVjKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRmb3JtYXQ6IHRoaXMuZm9ybWF0LFxuXHRcdFx0YmxlbmQ6IHtcblx0XHRcdFx0Y29sb3I6IHtcblx0XHRcdFx0XHRvcGVyYXRpb246IHRoaXMuYmxlbmRDb2xvck9wZXJhdGlvbixcblx0XHRcdFx0XHRzcmNGYWN0b3I6IHRoaXMuYmxlbmRDb2xvclNyY0ZhY3Rvcixcblx0XHRcdFx0XHRkc3RGYWN0b3I6IHRoaXMuYmxlbmRDb2xvckRzdEZhY3RvclxuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHBoYToge1xuXHRcdFx0XHRcdG9wZXJhdGlvbjogdGhpcy5ibGVuZEFscGhhT3BlcmF0aW9uLFxuXHRcdFx0XHRcdHNyY0ZhY3RvcjogdGhpcy5ibGVuZEFscGhhU3JjRmFjdG9yLFxuXHRcdFx0XHRcdGRzdEZhY3RvcjogdGhpcy5ibGVuZEFscGhhRHN0RmFjdG9yXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHR3cml0ZU1hc2s6IHRoaXMud3JpdGVNYXNrXG5cdFx0fTtcblx0fVxufVxuY29uc3QgY2FjaGVWaWV3UG9ydCA9IG5ldyBWaWV3UG9ydCgpO1xuY29uc3QgY2FjaGVTY2lzc29yVGVzdCA9IG5ldyBTY2lzc29yVGVzdCgpO1xudHlwZSBEZXB0aFN0ZW5jaWxQcm9wcyA9IHtcblx0Zm9ybWF0PzogVGV4dHVyZUZvcm1hdDtcblx0ZGVwdGhXcml0ZUVuYWJsZWQ/OiBib29sZWFuO1xuXHRkZXB0aENvbXBhcmU/OiBDb21wYXJlRnVuY3Rpb247XG5cdHN0ZW5jaWxSZWFkTWFzaz86IG51bWJlcjtcblx0c3RlbmNpbFdyaXRlTWFzaz86IG51bWJlcjtcblx0c3RlbmNpbEZyb250Q29tcGFyZT86IENvbXBhcmVGdW5jdGlvbjtcblx0c3RlbmNpbEZyb250RmFpbE9wPzogU3RlbmNpbE9wZXJhdGlvbjtcblx0c3RlbmNpbEZyb250RGVwdGhGYWlsT3A/OiBTdGVuY2lsT3BlcmF0aW9uO1xuXHRzdGVuY2lsRnJvbnRQYXNzT3A/OiBTdGVuY2lsT3BlcmF0aW9uO1xuXG5cdHN0ZW5jaWxCYWNrQ29tcGFyZT86IENvbXBhcmVGdW5jdGlvbjtcblx0c3RlbmNpbEJhY2tGYWlsT3A/OiBTdGVuY2lsT3BlcmF0aW9uO1xuXHRzdGVuY2lsQmFja0RlcHRoRmFpbE9wPzogU3RlbmNpbE9wZXJhdGlvbjtcblx0c3RlbmNpbEJhY2tQYXNzT3A/OiBTdGVuY2lsT3BlcmF0aW9uO1xuXHRkZXB0aEJpYXM/OiBudW1iZXI7XG5cdGRlcHRoQmlhc1Nsb3BlU2NhbGU/OiBudW1iZXI7XG5cdGRlcHRoQmlhc0NsYW1wPzogbnVtYmVyO1xufTtcbnR5cGUgVGFyZ2V0UHJvcHMgPSB7XG5cdGZvcm1hdD86IFRleHR1cmVGb3JtYXQ7XG5cdGJsZW5kQ29sb3JPcGVyYXRpb24/OiBCbGVuZE9wZXJhdGlvbjtcblx0YmxlbmRDb2xvclNyY0ZhY3Rvcj86IEJsZW5kRmFjdG9yO1xuXHRibGVuZENvbG9yRHN0RmFjdG9yPzogQmxlbmRGYWN0b3I7XG5cdGJsZW5kQWxwaGFPcGVyYXRpb24/OiBCbGVuZE9wZXJhdGlvbjtcblx0YmxlbmRBbHBoYVNyY0ZhY3Rvcj86IEJsZW5kRmFjdG9yO1xuXHRibGVuZEFscGhhRHN0RmFjdG9yPzogQmxlbmRGYWN0b3I7XG5cdHdyaXRlTWFzaz86IEdQVUNvbG9yV3JpdGU7XG59O1xuIiwiaW1wb3J0IHsgQXR0YWNobWVudE9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4vVGV4dHVyZVwiO1xuXG5jbGFzcyBBdHRhY2htZW50IHtcblx0cHVibGljIG9wOiBHUFVMb2FkT3AgPSBcImNsZWFyXCI7XG5cdHB1YmxpYyBzdG9yZU9wOiBHUFVTdG9yZU9wID0gXCJzdG9yZVwiO1xuXG5cdHB1YmxpYyB0ZXh0dXJlPzogVGV4dHVyZTtcblx0cHVibGljIHJlc29sdmVUYXJnZXQ/OiBUZXh0dXJlO1xuXG5cdGNvbnN0cnVjdG9yKHB1YmxpYyB2YWx1ZTogR1BVQ29sb3JEaWN0IHwgR1BVQ29sb3IgfCBudW1iZXIsIG9wdGlvbnM/OiBBdHRhY2htZW50T3B0aW9ucykge1xuXHRcdE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXR0YWNobWVudDtcbiIsImltcG9ydCB7IFZlcnRleEZvcm1hdCB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZSB7XHJcbiAgcHVibGljIG9mZnNldDogbnVtYmVyO1xyXG4gIHB1YmxpYyBzaGFkZXJMb2NhdGlvbjogbnVtYmVyO1xyXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmc7XHJcbiAgcHVibGljIGZvcm1hdDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhdHRyaWJ1dGVCeXRlU2l6ZTogbnVtYmVyO1xyXG4gIHB1YmxpYyBzdGF0aWMgdjMgPSBuZXcgVmVjdG9yMygpO1xyXG4gIHB1YmxpYyBzdGF0aWMgdjIgPSBuZXcgVmVjdG9yMigpO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyxcclxuICAgIHB1YmxpYyB2YWx1ZTogQXJyYXk8bnVtYmVyPixcclxuICAgIHB1YmxpYyBpdGVtU2l6ZTogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgdGhpcy5zaGFkZXJMb2NhdGlvbiA9IDA7XHJcbiAgfVxyXG4gIGdldEdQVUF0dHJpYnV0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNoYWRlckxvY2F0aW9uOiB0aGlzLnNoYWRlckxvY2F0aW9uLFxyXG4gICAgICBmb3JtYXQ6IHRoaXMuZm9ybWF0LFxyXG4gICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxyXG4gICAgfTtcclxuICB9XHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMudmFsdWUgPSBbXTtcclxuICB9XHJcbiAgYXBwbHlNYXRyaXgzKG1hdHJpeDMpIHtcclxuICAgIGlmICh0aGlzLml0ZW1TaXplID09PSAyKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy52YWx1ZS5sZW5ndGggLyB0aGlzLml0ZW1TaXplOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgQXR0cmlidXRlLnYyLmZyb21CdWZmZXJBdHRyaWJ1dGUodGhpcywgaSk7XHJcbiAgICAgICAgQXR0cmlidXRlLnYyLmFwcGx5TWF0cml4MyhtYXRyaXgzKTtcclxuICAgICAgICB0aGlzLnNldFhZKGksIEF0dHJpYnV0ZS52Mi54LCBBdHRyaWJ1dGUudjIueSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodGhpcy5pdGVtU2l6ZSA9PT0gMykge1xyXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMudmFsdWUubGVuZ3RoIC8gdGhpcy5pdGVtU2l6ZTsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIEF0dHJpYnV0ZS52My5mcm9tQnVmZmVyQXR0cmlidXRlKHRoaXMsIGkpO1xyXG4gICAgICAgIEF0dHJpYnV0ZS52My5hcHBseU1hdHJpeDMobWF0cml4Myk7XHJcbiAgICAgICAgdGhpcy5zZXRYWVooaSwgQXR0cmlidXRlLnYzLngsIEF0dHJpYnV0ZS52My55LCBBdHRyaWJ1dGUudjMueik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBhcHBseU1hdHJpeDQobWF0cml4NCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLnZhbHVlLmxlbmd0aCAvIHRoaXMuaXRlbVNpemU7IGkgPCBsOyBpKyspIHtcclxuICAgICAgQXR0cmlidXRlLnYzLmZyb21CdWZmZXJBdHRyaWJ1dGUodGhpcywgaSk7XHJcbiAgICAgIEF0dHJpYnV0ZS52My5hcHBseU1hdHJpeDQobWF0cml4NCk7XHJcbiAgICAgIHRoaXMuc2V0WFlaKGksIEF0dHJpYnV0ZS52My54LCBBdHRyaWJ1dGUudjMueSwgQXR0cmlidXRlLnYzLnopO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIHNldFgoaW5kZXgsIHgpIHtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKiB0aGlzLml0ZW1TaXplXSA9IHg7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgZ2V0WChpbmRleCkge1xyXG4gICAgbGV0IHggPSB0aGlzLnZhbHVlW2luZGV4ICogdGhpcy5pdGVtU2l6ZV07XHJcbiAgICByZXR1cm4geDtcclxuICB9XHJcbiAgc2V0WShpbmRleCwgeSkge1xyXG4gICAgdGhpcy52YWx1ZVtpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxXSA9IHk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgZ2V0WShpbmRleCkge1xyXG4gICAgbGV0IHkgPSB0aGlzLnZhbHVlW2luZGV4ICogdGhpcy5pdGVtU2l6ZSArIDFdO1xyXG4gICAgcmV0dXJuIHk7XHJcbiAgfVxyXG4gIHNldFooaW5kZXgsIHopIHtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMl0gPSB6O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGdldFooaW5kZXgpIHtcclxuICAgIGxldCB6ID0gdGhpcy52YWx1ZVtpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyXTtcclxuICAgIHJldHVybiB6O1xyXG4gIH1cclxuICBnZXRXKGluZGV4KSB7XHJcbiAgICBsZXQgdyA9IHRoaXMudmFsdWVbaW5kZXggKiB0aGlzLml0ZW1TaXplICsgM107XHJcbiAgICByZXR1cm4gdztcclxuICB9XHJcbiAgc2V0WFkoaW5kZXgsIHgsIHkpIHtcclxuICAgIGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XHJcbiAgICB0aGlzLnZhbHVlW2luZGV4ICsgMF0gPSB4O1xyXG4gICAgdGhpcy52YWx1ZVtpbmRleCArIDFdID0geTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBzZXRYWVooaW5kZXgsIHgsIHksIHopIHtcclxuICAgIGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XHJcbiAgICB0aGlzLnZhbHVlW2luZGV4ICsgMF0gPSB4O1xyXG4gICAgdGhpcy52YWx1ZVtpbmRleCArIDFdID0geTtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKyAyXSA9IHo7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgc2V0WFlaVyhpbmRleCwgeCwgeSwgeiwgdykge1xyXG4gICAgaW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKyAwXSA9IHg7XHJcbiAgICB0aGlzLnZhbHVlW2luZGV4ICsgMV0gPSB5O1xyXG4gICAgdGhpcy52YWx1ZVtpbmRleCArIDJdID0gejtcclxuICAgIHRoaXMudmFsdWVbaW5kZXggKyAzXSA9IHc7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEZsb2F0MzJBdHRyaWJ1dGUgZXh0ZW5kcyBBdHRyaWJ1dGUge1xyXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IEFycmF5PG51bWJlcj4sIGl0ZW1TaXplOiBudW1iZXIpIHtcclxuICAgIHN1cGVyKG5hbWUsIHZhbHVlLCBpdGVtU2l6ZSk7XHJcbiAgICB0aGlzLmZvcm1hdCA9IGdldEF0dHJpYnV0ZUZvcm1hdChcImZsb2F0MzJcIiwgaXRlbVNpemUpO1xyXG4gICAgdGhpcy5hdHRyaWJ1dGVCeXRlU2l6ZSA9IEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIGl0ZW1TaXplO1xyXG4gIH1cclxufVxyXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVGb3JtYXQodHlwZTogc3RyaW5nLCBpdGVtU2l6ZTogbnVtYmVyKSB7XHJcbiAgY29uc3Qga2V5ID0gYCR7dHlwZX14JHtpdGVtU2l6ZX1gO1xyXG4gIGxldCBmb3JtYXQ7XHJcbiAgc3dpdGNoIChrZXkpIHtcclxuICAgIGNhc2UgXCJmbG9hdDMyXCI6XHJcbiAgICAgIGZvcm1hdCA9IFZlcnRleEZvcm1hdC5GbG9hdDMyO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJmbG9hdDMyeDJcIjpcclxuICAgICAgZm9ybWF0ID0gVmVydGV4Rm9ybWF0LkZsb2F0MzJ4MjtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwiZmxvYXQzMngzXCI6XHJcbiAgICAgIGZvcm1hdCA9IFZlcnRleEZvcm1hdC5GbG9hdDMyeDM7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBcImZsb2F0MzJ4NFwiOlxyXG4gICAgICBmb3JtYXQgPSBWZXJ0ZXhGb3JtYXQuRmxvYXQzMng0O1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuICByZXR1cm4gZm9ybWF0O1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGlzIGVudW1lcmF0ZWQgdHlwZSBpcyB1c2VkIGluIGRldGVybWluaW5nIHdoZXJlLCByZWxhdGl2ZSB0byB0aGUgZnJ1c3R1bSwgYW5cclxuICogb2JqZWN0IGlzIGxvY2F0ZWQuIFRoZSBvYmplY3QgY2FuIGVpdGhlciBiZSBmdWxseSBjb250YWluZWQgd2l0aGluIHRoZSBmcnVzdHVtIChJTlNJREUpLFxyXG4gKiBwYXJ0aWFsbHkgaW5zaWRlIHRoZSBmcnVzdHVtIGFuZCBwYXJ0aWFsbHkgb3V0c2lkZSAoSU5URVJTRUNUSU5HKSwgb3Igc29tZXdoZXJlIGVudGlyZWx5XHJcbiAqIG91dHNpZGUgb2YgdGhlIGZydXN0dW0ncyA2IHBsYW5lcyAoT1VUU0lERSkuXHJcbiAqXHJcbiAqIEBlbnVtIHtOdW1iZXJ9XHJcbiAqL1xyXG5jb25zdCBJbnRlcnNlY3QgPSB7XHJcbiAgLyoqXHJcbiAgICogUmVwcmVzZW50cyB0aGF0IGFuIG9iamVjdCBpcyBub3QgY29udGFpbmVkIHdpdGhpbiB0aGUgZnJ1c3R1bS5cclxuICAgKlxyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICogQGNvbnN0YW50XHJcbiAgICovXHJcbiAgT1VUU0lERTogLTEsXHJcblxyXG4gIC8qKlxyXG4gICAqIFJlcHJlc2VudHMgdGhhdCBhbiBvYmplY3QgaW50ZXJzZWN0cyBvbmUgb2YgdGhlIGZydXN0dW0ncyBwbGFuZXMuXHJcbiAgICpcclxuICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAqIEBjb25zdGFudFxyXG4gICAqL1xyXG4gIElOVEVSU0VDVElORzogMCxcclxuXHJcbiAgLyoqXHJcbiAgICogUmVwcmVzZW50cyB0aGF0IGFuIG9iamVjdCBpcyBmdWxseSB3aXRoaW4gdGhlIGZydXN0dW0uXHJcbiAgICpcclxuICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAqIEBjb25zdGFudFxyXG4gICAqL1xyXG4gIElOU0lERTogMSxcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZShJbnRlcnNlY3QpO1xyXG4iLCIvLyBAdHMtbm9jaGVja1xyXG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi9WZWN0b3IzXCI7XHJcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xyXG5pbXBvcnQgZGVmaW5lZCBmcm9tIFwiLi4vdXRpbHMvZGVmaW5lZFwiO1xyXG5pbXBvcnQgR01hdGggZnJvbSBcIi4vTWF0aFwiO1xyXG5pbXBvcnQgTWF0cml4MyBmcm9tIFwiLi9NYXRyaXgzXCI7XHJcbmltcG9ydCBNYXRyaXg0IGZyb20gXCIuL01hdHJpeDRcIjtcclxuLyoqXHJcbiAqIEEgc2V0IG9mIDQtZGltZW5zaW9uYWwgY29vcmRpbmF0ZXMgdXNlZCB0byByZXByZXNlbnQgcm90YXRpb24gaW4gMy1kaW1lbnNpb25hbCBzcGFjZS5cclxuICogQGFsaWFzIFF1YXRlcm5pb25cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbeD0wLjBdIFRoZSBYIGNvbXBvbmVudC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IFt5PTAuMF0gVGhlIFkgY29tcG9uZW50LlxyXG4gKiBAcGFyYW0ge051bWJlcn0gW3o9MC4wXSBUaGUgWiBjb21wb25lbnQuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbdz0wLjBdIFRoZSBXIGNvbXBvbmVudC5cclxuICpcclxuICogQHNlZSBQYWNrYWJsZUZvckludGVycG9sYXRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBRdWF0ZXJuaW9uIHtcclxuICBwdWJsaWMgc3RhdGljIFpFUk8gPSBPYmplY3QuZnJlZXplKG5ldyBRdWF0ZXJuaW9uKDAuMCwgMC4wLCAwLjAsIDAuMCkpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIElERU5USVRZID0gT2JqZWN0LmZyZWV6ZShuZXcgUXVhdGVybmlvbigwLjAsIDAuMCwgMC4wLCAxLjApKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgeDogbnVtYmVyID0gMCxcclxuICAgIHB1YmxpYyB5OiBudW1iZXIgPSAwLFxyXG4gICAgcHVibGljIHo6IG51bWJlciA9IDAsXHJcbiAgICBwdWJsaWMgdzogbnVtYmVyID0gMVxyXG4gICkge31cclxuXHJcbiAgbm9ybWFsaXplKCkge1xyXG4gICAgY29uc3QgaW52ZXJzZU1hZ25pdHVkZSA9IDEuMCAvIFF1YXRlcm5pb24ubWFnbml0dWRlKHRoaXMpO1xyXG4gICAgY29uc3QgeCA9IHRoaXMueCAqIGludmVyc2VNYWduaXR1ZGU7XHJcbiAgICBjb25zdCB5ID0gdGhpcy55ICogaW52ZXJzZU1hZ25pdHVkZTtcclxuICAgIGNvbnN0IHogPSB0aGlzLnogKiBpbnZlcnNlTWFnbml0dWRlO1xyXG4gICAgY29uc3QgdyA9IHRoaXMudyAqIGludmVyc2VNYWduaXR1ZGU7XHJcblxyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLnogPSB6O1xyXG4gICAgdGhpcy53ID0gdztcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBpbnZlcnQoKSB7XHJcbiAgICB0aGlzLnggKj0gLTE7XHJcbiAgICB0aGlzLnkgKj0gLTE7XHJcbiAgICB0aGlzLnogKj0gLTE7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGRvdCh2OiBRdWF0ZXJuaW9uKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2LnogKyB0aGlzLncgKiB2Lnc7XHJcbiAgfVxyXG4gIHNldEZyb21Vbml0VmVjdG9ycyh2RnJvbTogVmVjdG9yMywgdlRvOiBWZWN0b3IzKTogUXVhdGVybmlvbiB7XHJcbiAgICAvLyBhc3N1bWVzIGRpcmVjdGlvbiB2ZWN0b3JzIHZGcm9tIGFuZCB2VG8gYXJlIG5vcm1hbGl6ZWRcclxuICAgIGxldCByID0gVmVjdG9yMy5kb3QodkZyb20sIHZUbykgKyAxO1xyXG4gICAgaWYgKHIgPCBOdW1iZXIuRVBTSUxPTikge1xyXG4gICAgICAvLyB2RnJvbSBhbmQgdlRvIHBvaW50IGluIG9wcG9zaXRlIGRpcmVjdGlvbnNcclxuXHJcbiAgICAgIHIgPSAwO1xyXG5cclxuICAgICAgaWYgKE1hdGguYWJzKHZGcm9tLngpID4gTWF0aC5hYnModkZyb20ueikpIHtcclxuICAgICAgICB0aGlzLnggPSAtdkZyb20ueTtcclxuICAgICAgICB0aGlzLnkgPSB2RnJvbS54O1xyXG4gICAgICAgIHRoaXMueiA9IDA7XHJcbiAgICAgICAgdGhpcy53ID0gcjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnggPSAwO1xyXG4gICAgICAgIHRoaXMueSA9IC12RnJvbS56O1xyXG4gICAgICAgIHRoaXMueiA9IHZGcm9tLnk7XHJcbiAgICAgICAgdGhpcy53ID0gcjtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gY3Jvc3NWZWN0b3JzKCB2RnJvbSwgdlRvICk7IC8vIGlubGluZWQgdG8gYXZvaWQgY3ljbGljIGRlcGVuZGVuY3kgb24gVmVjdG9yM1xyXG5cclxuICAgICAgdGhpcy5feCA9IHZGcm9tLnkgKiB2VG8ueiAtIHZGcm9tLnogKiB2VG8ueTtcclxuICAgICAgdGhpcy5feSA9IHZGcm9tLnogKiB2VG8ueCAtIHZGcm9tLnggKiB2VG8uejtcclxuICAgICAgdGhpcy5feiA9IHZGcm9tLnggKiB2VG8ueSAtIHZGcm9tLnkgKiB2VG8ueDtcclxuICAgICAgdGhpcy5fdyA9IHI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XHJcbiAgfVxyXG4gIHNldEZyb21Sb3RhdGlvbk1hdHJpeChtYXRyaXg6IE1hdHJpeDQpOiBRdWF0ZXJuaW9uIHtcclxuICAgIGNvbnN0IHRlID0gbWF0cml4LFxyXG4gICAgICBtMTEgPSB0ZVswXSxcclxuICAgICAgbTEyID0gdGVbNF0sXHJcbiAgICAgIG0xMyA9IHRlWzhdLFxyXG4gICAgICBtMjEgPSB0ZVsxXSxcclxuICAgICAgbTIyID0gdGVbNV0sXHJcbiAgICAgIG0yMyA9IHRlWzldLFxyXG4gICAgICBtMzEgPSB0ZVsyXSxcclxuICAgICAgbTMyID0gdGVbNl0sXHJcbiAgICAgIG0zMyA9IHRlWzEwXSxcclxuICAgICAgdHJhY2UgPSBtMTEgKyBtMjIgKyBtMzM7XHJcblxyXG4gICAgaWYgKHRyYWNlID4gMCkge1xyXG4gICAgICBjb25zdCBzID0gMC41IC8gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKTtcclxuXHJcbiAgICAgIHRoaXMudyA9IDAuMjUgLyBzO1xyXG4gICAgICB0aGlzLnggPSAobTMyIC0gbTIzKSAqIHM7XHJcbiAgICAgIHRoaXMueSA9IChtMTMgLSBtMzEpICogcztcclxuICAgICAgdGhpcy56ID0gKG0yMSAtIG0xMikgKiBzO1xyXG4gICAgfSBlbHNlIGlmIChtMTEgPiBtMjIgJiYgbTExID4gbTMzKSB7XHJcbiAgICAgIGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTExIC0gbTIyIC0gbTMzKTtcclxuXHJcbiAgICAgIHRoaXMudyA9IChtMzIgLSBtMjMpIC8gcztcclxuICAgICAgdGhpcy54ID0gMC4yNSAqIHM7XHJcbiAgICAgIHRoaXMueSA9IChtMTIgKyBtMjEpIC8gcztcclxuICAgICAgdGhpcy56ID0gKG0xMyArIG0zMSkgLyBzO1xyXG4gICAgfSBlbHNlIGlmIChtMjIgPiBtMzMpIHtcclxuICAgICAgY29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCgxLjAgKyBtMjIgLSBtMTEgLSBtMzMpO1xyXG5cclxuICAgICAgdGhpcy53ID0gKG0xMyAtIG0zMSkgLyBzO1xyXG4gICAgICB0aGlzLnggPSAobTEyICsgbTIxKSAvIHM7XHJcbiAgICAgIHRoaXMueSA9IDAuMjUgKiBzO1xyXG4gICAgICB0aGlzLnogPSAobTIzICsgbTMyKSAvIHM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KDEuMCArIG0zMyAtIG0xMSAtIG0yMik7XHJcblxyXG4gICAgICB0aGlzLncgPSAobTIxIC0gbTEyKSAvIHM7XHJcbiAgICAgIHRoaXMueCA9IChtMTMgKyBtMzEpIC8gcztcclxuICAgICAgdGhpcy55ID0gKG0yMyArIG0zMikgLyBzO1xyXG4gICAgICB0aGlzLnogPSAwLjI1ICogcztcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBjbG9uZSgpIHtcclxuICAgIHJldHVybiBRdWF0ZXJuaW9uLmNsb25lKHRoaXMsIHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgZXF1YWxzKHJpZ2h0OiBRdWF0ZXJuaW9uKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gUXVhdGVybmlvbi5lcXVhbHModGhpcywgcmlnaHQpO1xyXG4gIH1cclxuXHJcbiAgZXF1YWxzRXBzaWxvbihyaWdodDogUXVhdGVybmlvbiwgZXBzaWxvbjogbnVtYmVyID0gMCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIFF1YXRlcm5pb24uZXF1YWxzRXBzaWxvbih0aGlzLCByaWdodCwgZXBzaWxvbik7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbUF4aXNBbmdsZShheGlzOiBWZWN0b3IzLCBhbmdsZTogbnVtYmVyKTogUXVhdGVybmlvbiB7XHJcbiAgICBjb25zdCBoYWxmQW5nbGUgPSBhbmdsZSAvIDIuMDtcclxuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihoYWxmQW5nbGUpO1xyXG4gICAgZnJvbUF4aXNBbmdsZVNjcmF0Y2ggPSBWZWN0b3IzLm5vcm1hbGl6ZShheGlzLCBmcm9tQXhpc0FuZ2xlU2NyYXRjaCk7XHJcblxyXG4gICAgY29uc3QgeCA9IGZyb21BeGlzQW5nbGVTY3JhdGNoLnggKiBzO1xyXG4gICAgY29uc3QgeSA9IGZyb21BeGlzQW5nbGVTY3JhdGNoLnkgKiBzO1xyXG4gICAgY29uc3QgeiA9IGZyb21BeGlzQW5nbGVTY3JhdGNoLnogKiBzO1xyXG4gICAgY29uc3QgdyA9IE1hdGguY29zKGhhbGZBbmdsZSk7XHJcbiAgICAvLyBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgLy8gICByZXR1cm5cclxuICAgIC8vIH1cclxuICAgIGxldCByZXN1bHQgPSBuZXcgUXVhdGVybmlvbih4LCB5LCB6LCB3KTtcclxuICAgIHJlc3VsdC54ID0geDtcclxuICAgIHJlc3VsdC55ID0geTtcclxuICAgIHJlc3VsdC56ID0gejtcclxuICAgIHJlc3VsdC53ID0gdztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbVJvdGF0aW9uTWF0cml4KG1hdHJpeDogTWF0cml4MywgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcbiAgICBsZXQgcm9vdDtcclxuICAgIGxldCB4O1xyXG4gICAgbGV0IHk7XHJcbiAgICBsZXQgejtcclxuICAgIGxldCB3O1xyXG5cclxuICAgIGNvbnN0IG0wMCA9IG1hdHJpeFtNYXRyaXgzLkNPTFVNTjBST1cwXTtcclxuICAgIGNvbnN0IG0xMSA9IG1hdHJpeFtNYXRyaXgzLkNPTFVNTjFST1cxXTtcclxuICAgIGNvbnN0IG0yMiA9IG1hdHJpeFtNYXRyaXgzLkNPTFVNTjJST1cyXTtcclxuICAgIGNvbnN0IHRyYWNlID0gbTAwICsgbTExICsgbTIyO1xyXG5cclxuICAgIGlmICh0cmFjZSA+IDAuMCkge1xyXG4gICAgICAvLyB8d3wgPiAxLzIsIG1heSBhcyB3ZWxsIGNob29zZSB3ID4gMS8yXHJcbiAgICAgIHJvb3QgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApOyAvLyAyd1xyXG4gICAgICB3ID0gMC41ICogcm9vdDtcclxuICAgICAgcm9vdCA9IDAuNSAvIHJvb3Q7IC8vIDEvKDR3KVxyXG5cclxuICAgICAgeCA9IChtYXRyaXhbTWF0cml4My5DT0xVTU4xUk9XMl0gLSBtYXRyaXhbTWF0cml4My5DT0xVTU4yUk9XMV0pICogcm9vdDtcclxuICAgICAgeSA9IChtYXRyaXhbTWF0cml4My5DT0xVTU4yUk9XMF0gLSBtYXRyaXhbTWF0cml4My5DT0xVTU4wUk9XMl0pICogcm9vdDtcclxuICAgICAgeiA9IChtYXRyaXhbTWF0cml4My5DT0xVTU4wUk9XMV0gLSBtYXRyaXhbTWF0cml4My5DT0xVTU4xUk9XMF0pICogcm9vdDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHx3fCA8PSAxLzJcclxuICAgICAgY29uc3QgbmV4dCA9IGZyb21Sb3RhdGlvbk1hdHJpeE5leHQ7XHJcblxyXG4gICAgICBsZXQgaSA9IDA7XHJcbiAgICAgIGlmIChtMTEgPiBtMDApIHtcclxuICAgICAgICBpID0gMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAobTIyID4gbTAwICYmIG0yMiA+IG0xMSkge1xyXG4gICAgICAgIGkgPSAyO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGogPSBuZXh0W2ldO1xyXG4gICAgICBjb25zdCBrID0gbmV4dFtqXTtcclxuXHJcbiAgICAgIHJvb3QgPSBNYXRoLnNxcnQoXHJcbiAgICAgICAgbWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KGksIGkpXSAtXHJcbiAgICAgICAgICBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoaiwgaildIC1cclxuICAgICAgICAgIG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChrLCBrKV0gK1xyXG4gICAgICAgICAgMS4wXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBxdWF0ID0gZnJvbVJvdGF0aW9uTWF0cml4UXVhdDtcclxuICAgICAgcXVhdFtpXSA9IDAuNSAqIHJvb3Q7XHJcbiAgICAgIHJvb3QgPSAwLjUgLyByb290O1xyXG4gICAgICB3ID1cclxuICAgICAgICAobWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KGssIGopXSAtXHJcbiAgICAgICAgICBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoaiwgayldKSAqXHJcbiAgICAgICAgcm9vdDtcclxuICAgICAgcXVhdFtqXSA9XHJcbiAgICAgICAgKG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChqLCBpKV0gK1xyXG4gICAgICAgICAgbWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KGksIGopXSkgKlxyXG4gICAgICAgIHJvb3Q7XHJcbiAgICAgIHF1YXRba10gPVxyXG4gICAgICAgIChtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoaywgaSldICtcclxuICAgICAgICAgIG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChpLCBrKV0pICpcclxuICAgICAgICByb290O1xyXG5cclxuICAgICAgeCA9IC1xdWF0WzBdO1xyXG4gICAgICB5ID0gLXF1YXRbMV07XHJcbiAgICAgIHogPSAtcXVhdFsyXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oeCwgeSwgeiwgdyk7XHJcbiAgICB9XHJcbiAgICByZXN1bHQueCA9IHg7XHJcbiAgICByZXN1bHQueSA9IHk7XHJcbiAgICByZXN1bHQueiA9IHo7XHJcbiAgICByZXN1bHQudyA9IHc7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsb25lKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJlc3VsdDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xyXG4gICAgaWYgKCFkZWZpbmVkKHF1YXRlcm5pb24pKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKFxyXG4gICAgICAgIHF1YXRlcm5pb24ueCxcclxuICAgICAgICBxdWF0ZXJuaW9uLnksXHJcbiAgICAgICAgcXVhdGVybmlvbi56LFxyXG4gICAgICAgIHF1YXRlcm5pb24ud1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc3VsdC54ID0gcXVhdGVybmlvbi54O1xyXG4gICAgcmVzdWx0LnkgPSBxdWF0ZXJuaW9uLnk7XHJcbiAgICByZXN1bHQueiA9IHF1YXRlcm5pb24uejtcclxuICAgIHJlc3VsdC53ID0gcXVhdGVybmlvbi53O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb25qdWdhdGUocXVhdGVybmlvbjogUXVhdGVybmlvbiwgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcbiAgICByZXN1bHQueCA9IC1xdWF0ZXJuaW9uLng7XHJcbiAgICByZXN1bHQueSA9IC1xdWF0ZXJuaW9uLnk7XHJcbiAgICByZXN1bHQueiA9IC1xdWF0ZXJuaW9uLno7XHJcbiAgICByZXN1bHQudyA9IHF1YXRlcm5pb24udztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWFnbml0dWRlU3F1YXJlZChxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHF1YXRlcm5pb24ueCAqIHF1YXRlcm5pb24ueCArXHJcbiAgICAgIHF1YXRlcm5pb24ueSAqIHF1YXRlcm5pb24ueSArXHJcbiAgICAgIHF1YXRlcm5pb24ueiAqIHF1YXRlcm5pb24ueiArXHJcbiAgICAgIHF1YXRlcm5pb24udyAqIHF1YXRlcm5pb24ud1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYWduaXR1ZGUocXVhdGVybmlvbjogUXVhdGVybmlvbik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KFF1YXRlcm5pb24ubWFnbml0dWRlU3F1YXJlZChxdWF0ZXJuaW9uKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbm9ybWFsaXplKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJlc3VsdDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xyXG4gICAgY29uc3QgaW52ZXJzZU1hZ25pdHVkZSA9IDEuMCAvIFF1YXRlcm5pb24ubWFnbml0dWRlKHF1YXRlcm5pb24pO1xyXG4gICAgY29uc3QgeCA9IHF1YXRlcm5pb24ueCAqIGludmVyc2VNYWduaXR1ZGU7XHJcbiAgICBjb25zdCB5ID0gcXVhdGVybmlvbi55ICogaW52ZXJzZU1hZ25pdHVkZTtcclxuICAgIGNvbnN0IHogPSBxdWF0ZXJuaW9uLnogKiBpbnZlcnNlTWFnbml0dWRlO1xyXG4gICAgY29uc3QgdyA9IHF1YXRlcm5pb24udyAqIGludmVyc2VNYWduaXR1ZGU7XHJcblxyXG4gICAgcmVzdWx0LnggPSB4O1xyXG4gICAgcmVzdWx0LnkgPSB5O1xyXG4gICAgcmVzdWx0LnogPSB6O1xyXG4gICAgcmVzdWx0LncgPSB3O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpbnZlcnNlKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJlc3VsdDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xyXG4gICAgY29uc3QgbWFnbml0dWRlU3F1YXJlZCA9IFF1YXRlcm5pb24ubWFnbml0dWRlU3F1YXJlZChxdWF0ZXJuaW9uKTtcclxuICAgIHJlc3VsdCA9IFF1YXRlcm5pb24uY29uanVnYXRlKHF1YXRlcm5pb24sIHJlc3VsdCk7XHJcbiAgICByZXR1cm4gUXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKHJlc3VsdCwgMS4wIC8gbWFnbml0dWRlU3F1YXJlZCwgcmVzdWx0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhZGQoXHJcbiAgICBsZWZ0OiBRdWF0ZXJuaW9uLFxyXG4gICAgcmlnaHQ6IFF1YXRlcm5pb24sXHJcbiAgICByZXN1bHQ6IFF1YXRlcm5pb25cclxuICApOiBRdWF0ZXJuaW9uIHtcclxuICAgIHJlc3VsdC54ID0gbGVmdC54ICsgcmlnaHQueDtcclxuICAgIHJlc3VsdC55ID0gbGVmdC55ICsgcmlnaHQueTtcclxuICAgIHJlc3VsdC56ID0gbGVmdC56ICsgcmlnaHQuejtcclxuICAgIHJlc3VsdC53ID0gbGVmdC53ICsgcmlnaHQudztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VidHJhY3QoXHJcbiAgICBsZWZ0OiBRdWF0ZXJuaW9uLFxyXG4gICAgcmlnaHQ6IFF1YXRlcm5pb24sXHJcbiAgICByZXN1bHQ6IFF1YXRlcm5pb25cclxuICApOiBRdWF0ZXJuaW9uIHtcclxuICAgIHJlc3VsdC54ID0gbGVmdC54IC0gcmlnaHQueDtcclxuICAgIHJlc3VsdC55ID0gbGVmdC55IC0gcmlnaHQueTtcclxuICAgIHJlc3VsdC56ID0gbGVmdC56IC0gcmlnaHQuejtcclxuICAgIHJlc3VsdC53ID0gbGVmdC53IC0gcmlnaHQudztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbmVnYXRlKHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHJlc3VsdDogUXVhdGVybmlvbik6IFF1YXRlcm5pb24ge1xyXG4gICAgcmVzdWx0LnggPSAtcXVhdGVybmlvbi54O1xyXG4gICAgcmVzdWx0LnkgPSAtcXVhdGVybmlvbi55O1xyXG4gICAgcmVzdWx0LnogPSAtcXVhdGVybmlvbi56O1xyXG4gICAgcmVzdWx0LncgPSAtcXVhdGVybmlvbi53O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkb3QobGVmdDogUXVhdGVybmlvbiwgcmlnaHQ6IFF1YXRlcm5pb24pOiBRdWF0ZXJuaW9uIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGxlZnQueCAqIHJpZ2h0LnggKyBsZWZ0LnkgKiByaWdodC55ICsgbGVmdC56ICogcmlnaHQueiArIGxlZnQudyAqIHJpZ2h0LndcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbXVsdGlwbHkoXHJcbiAgICBsZWZ0OiBRdWF0ZXJuaW9uLFxyXG4gICAgcmlnaHQ6IFF1YXRlcm5pb24sXHJcbiAgICByZXN1bHQ6IFF1YXRlcm5pb25cclxuICApOiBRdWF0ZXJuaW9uIHtcclxuICAgIGNvbnN0IGxlZnRYID0gbGVmdC54O1xyXG4gICAgY29uc3QgbGVmdFkgPSBsZWZ0Lnk7XHJcbiAgICBjb25zdCBsZWZ0WiA9IGxlZnQuejtcclxuICAgIGNvbnN0IGxlZnRXID0gbGVmdC53O1xyXG5cclxuICAgIGNvbnN0IHJpZ2h0WCA9IHJpZ2h0Lng7XHJcbiAgICBjb25zdCByaWdodFkgPSByaWdodC55O1xyXG4gICAgY29uc3QgcmlnaHRaID0gcmlnaHQuejtcclxuICAgIGNvbnN0IHJpZ2h0VyA9IHJpZ2h0Lnc7XHJcblxyXG4gICAgY29uc3QgeCA9IGxlZnRXICogcmlnaHRYICsgbGVmdFggKiByaWdodFcgKyBsZWZ0WSAqIHJpZ2h0WiAtIGxlZnRaICogcmlnaHRZO1xyXG4gICAgY29uc3QgeSA9IGxlZnRXICogcmlnaHRZIC0gbGVmdFggKiByaWdodFogKyBsZWZ0WSAqIHJpZ2h0VyArIGxlZnRaICogcmlnaHRYO1xyXG4gICAgY29uc3QgeiA9IGxlZnRXICogcmlnaHRaICsgbGVmdFggKiByaWdodFkgLSBsZWZ0WSAqIHJpZ2h0WCArIGxlZnRaICogcmlnaHRXO1xyXG4gICAgY29uc3QgdyA9IGxlZnRXICogcmlnaHRXIC0gbGVmdFggKiByaWdodFggLSBsZWZ0WSAqIHJpZ2h0WSAtIGxlZnRaICogcmlnaHRaO1xyXG5cclxuICAgIHJlc3VsdC54ID0geDtcclxuICAgIHJlc3VsdC55ID0geTtcclxuICAgIHJlc3VsdC56ID0gejtcclxuICAgIHJlc3VsdC53ID0gdztcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbXVsdGlwbHlCeVNjYWxhcihcclxuICAgIHF1YXRlcm5pb246IFF1YXRlcm5pb24sXHJcbiAgICBzY2FsYXI6IG51bWJlcixcclxuICAgIHJlc3VsdDogUXVhdGVybmlvblxyXG4gICk6IFF1YXRlcm5pb24ge1xyXG4gICAgcmVzdWx0LnggPSBxdWF0ZXJuaW9uLnggKiBzY2FsYXI7XHJcbiAgICByZXN1bHQueSA9IHF1YXRlcm5pb24ueSAqIHNjYWxhcjtcclxuICAgIHJlc3VsdC56ID0gcXVhdGVybmlvbi56ICogc2NhbGFyO1xyXG4gICAgcmVzdWx0LncgPSBxdWF0ZXJuaW9uLncgKiBzY2FsYXI7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRpdmlkZUJ5U2NhbGFyKFxyXG4gICAgcXVhdGVybmlvbjogUXVhdGVybmlvbixcclxuICAgIHNjYWxhcjogbnVtYmVyLFxyXG4gICAgcmVzdWx0OiBRdWF0ZXJuaW9uXHJcbiAgKTogUXVhdGVybmlvbiB7XHJcbiAgICByZXN1bHQueCA9IHF1YXRlcm5pb24ueCAvIHNjYWxhcjtcclxuICAgIHJlc3VsdC55ID0gcXVhdGVybmlvbi55IC8gc2NhbGFyO1xyXG4gICAgcmVzdWx0LnogPSBxdWF0ZXJuaW9uLnogLyBzY2FsYXI7XHJcbiAgICByZXN1bHQudyA9IHF1YXRlcm5pb24udyAvIHNjYWxhcjtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcHV0ZUF4aXMocXVhdGVybmlvbjogUXVhdGVybmlvbiwgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XHJcbiAgICBjb25zdCB3ID0gcXVhdGVybmlvbi53O1xyXG4gICAgaWYgKE1hdGguYWJzKHcgLSAxLjApIDwgR01hdGguRVBTSUxPTjYpIHtcclxuICAgICAgcmVzdWx0LnggPSByZXN1bHQueSA9IHJlc3VsdC56ID0gMDtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzY2FsYXIgPSAxLjAgLyBNYXRoLnNxcnQoMS4wIC0gdyAqIHcpO1xyXG5cclxuICAgIHJlc3VsdC54ID0gcXVhdGVybmlvbi54ICogc2NhbGFyO1xyXG4gICAgcmVzdWx0LnkgPSBxdWF0ZXJuaW9uLnkgKiBzY2FsYXI7XHJcbiAgICByZXN1bHQueiA9IHF1YXRlcm5pb24ueiAqIHNjYWxhcjtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcHV0ZUFuZ2xlKHF1YXRlcm5pb246IFF1YXRlcm5pb24pOiBudW1iZXIge1xyXG4gICAgaWYgKE1hdGguYWJzKHF1YXRlcm5pb24udyAtIDEuMCkgPCBHTWF0aC5FUFNJTE9ONikge1xyXG4gICAgICByZXR1cm4gMC4wO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDIuMCAqIE1hdGguYWNvcyhxdWF0ZXJuaW9uLncpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxlcnAoXHJcbiAgICBzdGFydDogUXVhdGVybmlvbixcclxuICAgIGVuZDogUXVhdGVybmlvbixcclxuICAgIHQ6IG51bWJlcixcclxuICAgIHJlc3VsdDogUXVhdGVybmlvblxyXG4gICk6IFF1YXRlcm5pb24ge1xyXG4gICAgbGVycFNjcmF0Y2ggPSBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIoZW5kLCB0LCBsZXJwU2NyYXRjaCk7XHJcbiAgICByZXN1bHQgPSBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIoc3RhcnQsIDEuMCAtIHQsIHJlc3VsdCk7XHJcbiAgICByZXR1cm4gUXVhdGVybmlvbi5hZGQobGVycFNjcmF0Y2gsIHJlc3VsdCwgcmVzdWx0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzbGVycChcclxuICAgIHN0YXJ0OiBRdWF0ZXJuaW9uLFxyXG4gICAgZW5kOiBRdWF0ZXJuaW9uLFxyXG4gICAgdDogbnVtYmVyLFxyXG4gICAgcmVzdWx0OiBRdWF0ZXJuaW9uXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIGxldCBkb3QgPSBRdWF0ZXJuaW9uLmRvdChzdGFydCwgZW5kKTtcclxuXHJcbiAgICAvLyBUaGUgYW5nbGUgYmV0d2VlbiBzdGFydCBtdXN0IGJlIGFjdXRlLiBTaW5jZSBxIGFuZCAtcSByZXByZXNlbnRcclxuICAgIC8vIHRoZSBzYW1lIHJvdGF0aW9uLCBuZWdhdGUgcSB0byBnZXQgdGhlIGFjdXRlIGFuZ2xlLlxyXG4gICAgbGV0IHIgPSBlbmQ7XHJcbiAgICBpZiAoZG90IDwgMC4wKSB7XHJcbiAgICAgIGRvdCA9IC1kb3Q7XHJcbiAgICAgIHIgPSBzbGVycEVuZE5lZ2F0ZWQgPSBRdWF0ZXJuaW9uLm5lZ2F0ZShlbmQsIHNsZXJwRW5kTmVnYXRlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZG90ID4gMCwgYXMgdGhlIGRvdCBwcm9kdWN0IGFwcHJvYWNoZXMgMSwgdGhlIGFuZ2xlIGJldHdlZW4gdGhlXHJcbiAgICAvLyBxdWF0ZXJuaW9ucyB2YW5pc2hlcy4gdXNlIGxpbmVhciBpbnRlcnBvbGF0aW9uLlxyXG4gICAgaWYgKDEuMCAtIGRvdCA8IEdNYXRoLkVQU0lMT042KSB7XHJcbiAgICAgIHJldHVybiBRdWF0ZXJuaW9uLmxlcnAoc3RhcnQsIHIsIHQsIHJlc3VsdCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGhldGEgPSBNYXRoLmFjb3MoZG90KTtcclxuICAgIHNsZXJwU2NhbGVkUCA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihcclxuICAgICAgc3RhcnQsXHJcbiAgICAgIE1hdGguc2luKCgxIC0gdCkgKiB0aGV0YSksXHJcbiAgICAgIHNsZXJwU2NhbGVkUFxyXG4gICAgKTtcclxuICAgIHNsZXJwU2NhbGVkUiA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihcclxuICAgICAgcixcclxuICAgICAgTWF0aC5zaW4odCAqIHRoZXRhKSxcclxuICAgICAgc2xlcnBTY2FsZWRSXHJcbiAgICApO1xyXG4gICAgcmVzdWx0ID0gUXVhdGVybmlvbi5hZGQoc2xlcnBTY2FsZWRQLCBzbGVycFNjYWxlZFIsIHJlc3VsdCk7XHJcbiAgICByZXR1cm4gUXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKHJlc3VsdCwgMS4wIC8gTWF0aC5zaW4odGhldGEpLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbXB1dGVJbm5lclF1YWRyYW5nbGUoXHJcbiAgICBxMDogUXVhdGVybmlvbixcclxuICAgIHExOiBRdWF0ZXJuaW9uLFxyXG4gICAgcTI6IFF1YXRlcm5pb24sXHJcbiAgICByZXN1bHQ6IFF1YXRlcm5pb25cclxuICApOiBRdWF0ZXJuaW9uIHtcclxuICAgIGNvbnN0IHFJbnYgPSBRdWF0ZXJuaW9uLmNvbmp1Z2F0ZShxMSwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjApO1xyXG4gICAgUXVhdGVybmlvbi5tdWx0aXBseShxSW52LCBxMiwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEpO1xyXG4gICAgY29uc3QgY2FydDAgPSBRdWF0ZXJuaW9uLmxvZyhcclxuICAgICAgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEsXHJcbiAgICAgIHNxdWFkU2NyYXRjaENhcnRlc2lhbjBcclxuICAgICk7XHJcblxyXG4gICAgUXVhdGVybmlvbi5tdWx0aXBseShxSW52LCBxMCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEpO1xyXG4gICAgY29uc3QgY2FydDEgPSBRdWF0ZXJuaW9uLmxvZyhcclxuICAgICAgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEsXHJcbiAgICAgIHNxdWFkU2NyYXRjaENhcnRlc2lhbjFcclxuICAgICk7XHJcblxyXG4gICAgVmVjdG9yMy5hZGQoY2FydDAsIGNhcnQxLCBjYXJ0MCk7XHJcbiAgICBWZWN0b3IzLm11bHRpcGx5QnlTY2FsYXIoY2FydDAsIDAuMjUsIGNhcnQwKTtcclxuICAgIFZlY3RvcjMubmVnYXRlKGNhcnQwLCBjYXJ0MCk7XHJcbiAgICBRdWF0ZXJuaW9uLmV4cChjYXJ0MCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjApO1xyXG5cclxuICAgIHJldHVybiBRdWF0ZXJuaW9uLm11bHRpcGx5KHExLCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMCwgcmVzdWx0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzcXVhZChcclxuICAgIHEwOiBRdWF0ZXJuaW9uLFxyXG4gICAgcTE6IFF1YXRlcm5pb24sXHJcbiAgICBzMDogUXVhdGVybmlvbixcclxuICAgIHMxOiBRdWF0ZXJuaW9uLFxyXG4gICAgdDogbnVtYmVyLFxyXG4gICAgcmVzdWx0OiBRdWF0ZXJuaW9uXHJcbiAgKTogUXVhdGVybmlvbiB7XHJcbiAgICBjb25zdCBzbGVycDAgPSBRdWF0ZXJuaW9uLnNsZXJwKHEwLCBxMSwgdCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjApO1xyXG4gICAgY29uc3Qgc2xlcnAxID0gUXVhdGVybmlvbi5zbGVycChzMCwgczEsIHQsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xKTtcclxuICAgIHJldHVybiBRdWF0ZXJuaW9uLnNsZXJwKHNsZXJwMCwgc2xlcnAxLCAyLjAgKiB0ICogKDEuMCAtIHQpLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZhc3RTbGVycChcclxuICAgIHN0YXJ0OiBRdWF0ZXJuaW9uLFxyXG4gICAgZW5kOiBRdWF0ZXJuaW9uLFxyXG4gICAgdDogbnVtYmVyLFxyXG4gICAgcmVzdWx0OiBudW1iZXJcclxuICApOiBRdWF0ZXJuaW9uIHtcclxuICAgIGxldCB4ID0gUXVhdGVybmlvbi5kb3Qoc3RhcnQsIGVuZCk7XHJcblxyXG4gICAgbGV0IHNpZ247XHJcbiAgICBpZiAoeCA+PSAwKSB7XHJcbiAgICAgIHNpZ24gPSAxLjA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzaWduID0gLTEuMDtcclxuICAgICAgeCA9IC14O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHhtMSA9IHggLSAxLjA7XHJcbiAgICBjb25zdCBkID0gMS4wIC0gdDtcclxuICAgIGNvbnN0IHNxclQgPSB0ICogdDtcclxuICAgIGNvbnN0IHNxckQgPSBkICogZDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gNzsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgYlRbaV0gPSAodVtpXSAqIHNxclQgLSB2W2ldKSAqIHhtMTtcclxuICAgICAgYkRbaV0gPSAodVtpXSAqIHNxckQgLSB2W2ldKSAqIHhtMTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjVCA9XHJcbiAgICAgIHNpZ24gKlxyXG4gICAgICB0ICpcclxuICAgICAgKDEuMCArXHJcbiAgICAgICAgYlRbMF0gKlxyXG4gICAgICAgICAgKDEuMCArXHJcbiAgICAgICAgICAgIGJUWzFdICpcclxuICAgICAgICAgICAgICAoMS4wICtcclxuICAgICAgICAgICAgICAgIGJUWzJdICpcclxuICAgICAgICAgICAgICAgICAgKDEuMCArXHJcbiAgICAgICAgICAgICAgICAgICAgYlRbM10gKlxyXG4gICAgICAgICAgICAgICAgICAgICAgKDEuMCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJUWzRdICpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAoMS4wICsgYlRbNV0gKiAoMS4wICsgYlRbNl0gKiAoMS4wICsgYlRbN10pKSkpKSkpKTtcclxuICAgIGNvbnN0IGNEID1cclxuICAgICAgZCAqXHJcbiAgICAgICgxLjAgK1xyXG4gICAgICAgIGJEWzBdICpcclxuICAgICAgICAgICgxLjAgK1xyXG4gICAgICAgICAgICBiRFsxXSAqXHJcbiAgICAgICAgICAgICAgKDEuMCArXHJcbiAgICAgICAgICAgICAgICBiRFsyXSAqXHJcbiAgICAgICAgICAgICAgICAgICgxLjAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGJEWzNdICpcclxuICAgICAgICAgICAgICAgICAgICAgICgxLjAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiRFs0XSAqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKDEuMCArIGJEWzVdICogKDEuMCArIGJEWzZdICogKDEuMCArIGJEWzddKSkpKSkpKSk7XHJcblxyXG4gICAgY29uc3QgdGVtcCA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihcclxuICAgICAgc3RhcnQsXHJcbiAgICAgIGNELFxyXG4gICAgICBmYXN0U2xlcnBTY3JhdGNoUXVhdGVybmlvblxyXG4gICAgKTtcclxuICAgIFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihlbmQsIGNULCByZXN1bHQpO1xyXG4gICAgcmV0dXJuIFF1YXRlcm5pb24uYWRkKHRlbXAsIHJlc3VsdCwgcmVzdWx0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmYXN0U3F1YWQoXHJcbiAgICBxMDogUXVhdGVybmlvbixcclxuICAgIHExOiBRdWF0ZXJuaW9uLFxyXG4gICAgczA6IFF1YXRlcm5pb24sXHJcbiAgICBzMTogUXVhdGVybmlvbixcclxuICAgIHQ6IG51bWJlcixcclxuICAgIHJlc3VsdDogbnVtYmVyXHJcbiAgKTogUXVhdGVybmlvbiB7XHJcbiAgICBjb25zdCBzbGVycDAgPSBRdWF0ZXJuaW9uLmZhc3RTbGVycChxMCwgcTEsIHQsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24wKTtcclxuICAgIGNvbnN0IHNsZXJwMSA9IFF1YXRlcm5pb24uZmFzdFNsZXJwKHMwLCBzMSwgdCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEpO1xyXG4gICAgcmV0dXJuIFF1YXRlcm5pb24uZmFzdFNsZXJwKHNsZXJwMCwgc2xlcnAxLCAyLjAgKiB0ICogKDEuMCAtIHQpLCByZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBRdWF0ZXJuaW9uLCByaWdodDogUXVhdGVybmlvbik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgbGVmdCA9PT0gcmlnaHQgfHxcclxuICAgICAgKGRlZmluZWQobGVmdCkgJiZcclxuICAgICAgICBkZWZpbmVkKHJpZ2h0KSAmJlxyXG4gICAgICAgIGxlZnQueCA9PT0gcmlnaHQueCAmJlxyXG4gICAgICAgIGxlZnQueSA9PT0gcmlnaHQueSAmJlxyXG4gICAgICAgIGxlZnQueiA9PT0gcmlnaHQueiAmJlxyXG4gICAgICAgIGxlZnQudyA9PT0gcmlnaHQudylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXF1YWxzRXBzaWxvbihcclxuICAgIGxlZnQ6IFF1YXRlcm5pb24sXHJcbiAgICByaWdodDogUXVhdGVybmlvbixcclxuICAgIGVwc2lsb246IG51bWJlciA9IDBcclxuICApOiBib29sZWFuIHtcclxuICAgIGVwc2lsb24gPSBkZWZhdWx0VmFsdWUoZXBzaWxvbiwgMCk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgbGVmdCA9PT0gcmlnaHQgfHxcclxuICAgICAgKGRlZmluZWQobGVmdCkgJiZcclxuICAgICAgICBkZWZpbmVkKHJpZ2h0KSAmJlxyXG4gICAgICAgIE1hdGguYWJzKGxlZnQueCAtIHJpZ2h0LngpIDw9IGVwc2lsb24gJiZcclxuICAgICAgICBNYXRoLmFicyhsZWZ0LnkgLSByaWdodC55KSA8PSBlcHNpbG9uICYmXHJcbiAgICAgICAgTWF0aC5hYnMobGVmdC56IC0gcmlnaHQueikgPD0gZXBzaWxvbiAmJlxyXG4gICAgICAgIE1hdGguYWJzKGxlZnQudyAtIHJpZ2h0LncpIDw9IGVwc2lsb24pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxvZyhxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgIGNvbnN0IHRoZXRhID0gR01hdGguYWNvc0NsYW1wZWQocXVhdGVybmlvbi53KTtcclxuICAgIGxldCB0aGV0YU92ZXJTaW5UaGV0YSA9IDAuMDtcclxuXHJcbiAgICBpZiAodGhldGEgIT09IDAuMCkge1xyXG4gICAgICB0aGV0YU92ZXJTaW5UaGV0YSA9IHRoZXRhIC8gTWF0aC5zaW4odGhldGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBWZWN0b3IzLm11bHRpcGx5QnlTY2FsYXIocXVhdGVybmlvbiwgdGhldGFPdmVyU2luVGhldGEsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXhwKGNhcnRlc2lhbjogVmVjdG9yMywgcmVzdWx0OiBRdWF0ZXJuaW9uKTogUXVhdGVybmlvbiB7XHJcbiAgICBjb25zdCB0aGV0YSA9IFZlY3RvcjMubWFnbml0dWRlKGNhcnRlc2lhbik7XHJcbiAgICBsZXQgc2luVGhldGFPdmVyVGhldGEgPSAwLjA7XHJcblxyXG4gICAgaWYgKHRoZXRhICE9PSAwLjApIHtcclxuICAgICAgc2luVGhldGFPdmVyVGhldGEgPSBNYXRoLnNpbih0aGV0YSkgLyB0aGV0YTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bHQueCA9IGNhcnRlc2lhbi54ICogc2luVGhldGFPdmVyVGhldGE7XHJcbiAgICByZXN1bHQueSA9IGNhcnRlc2lhbi55ICogc2luVGhldGFPdmVyVGhldGE7XHJcbiAgICByZXN1bHQueiA9IGNhcnRlc2lhbi56ICogc2luVGhldGFPdmVyVGhldGE7XHJcbiAgICByZXN1bHQudyA9IE1hdGguY29zKHRoZXRhKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG5cclxubGV0IGZyb21BeGlzQW5nbGVTY3JhdGNoID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmNvbnN0IGZyb21Sb3RhdGlvbk1hdHJpeE5leHQgPSBbMSwgMiwgMF07XHJcbmNvbnN0IGZyb21Sb3RhdGlvbk1hdHJpeFF1YXQgPSBuZXcgQXJyYXkoMyk7XHJcblxyXG5jb25zdCBzY3JhdGNoSFBSUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbmxldCBzY3JhdGNoSGVhZGluZ1F1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5sZXQgc2NyYXRjaFBpdGNoUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbmxldCBzY3JhdGNoUm9sbFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cclxuY29uc3Qgc2FtcGxlZFF1YXRlcm5pb25BeGlzID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc2FtcGxlZFF1YXRlcm5pb25Sb3RhdGlvbiA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNhbXBsZWRRdWF0ZXJuaW9uVGVtcFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5jb25zdCBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wID0gbmV3IFF1YXRlcm5pb24oKTtcclxuY29uc3Qgc2FtcGxlZFF1YXRlcm5pb25RdWF0ZXJuaW9uMENvbmp1Z2F0ZSA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcblxyXG5sZXQgbGVycFNjcmF0Y2ggPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cclxubGV0IHNsZXJwRW5kTmVnYXRlZCA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbmxldCBzbGVycFNjYWxlZFAgPSBuZXcgUXVhdGVybmlvbigpO1xyXG5sZXQgc2xlcnBTY2FsZWRSID0gbmV3IFF1YXRlcm5pb24oKTtcclxuXHJcbmNvbnN0IGZhc3RTbGVycFNjcmF0Y2hRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvc3Mtb2YtcHJlY2lzaW9uXHJcbmNvbnN0IG9wbXUgPSAxLjkwMTEwNzQ1MzUxNzMwMDM3O1xyXG5jb25zdCB1ID0gbmV3IEZsb2F0MzJBcnJheSg4KTtcclxuY29uc3QgdiA9IG5ldyBGbG9hdDMyQXJyYXkoOCk7XHJcbmNvbnN0IGJUID0gbmV3IEZsb2F0MzJBcnJheSg4KTtcclxuY29uc3QgYkQgPSBuZXcgRmxvYXQzMkFycmF5KDgpO1xyXG5cclxuZm9yIChsZXQgaSA9IDA7IGkgPCA3OyArK2kpIHtcclxuICBjb25zdCBzID0gaSArIDEuMDtcclxuICBjb25zdCB0ID0gMi4wICogcyArIDEuMDtcclxuICB1W2ldID0gMS4wIC8gKHMgKiB0KTtcclxuICB2W2ldID0gcyAvIHQ7XHJcbn1cclxuXHJcbnVbN10gPSBvcG11IC8gKDguMCAqIDE3LjApO1xyXG52WzddID0gKG9wbXUgKiA4LjApIC8gMTcuMDtcclxuXHJcbmNvbnN0IHNxdWFkU2NyYXRjaENhcnRlc2lhbjAgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4xID0gbmV3IFZlY3RvcjMoKTtcclxuY29uc3Qgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjAgPSBuZXcgUXVhdGVybmlvbigpO1xyXG5jb25zdCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMSA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbiIsImltcG9ydCBNYXRyaXgzIGZyb20gXCIuLi9tYXRoL01hdHJpeDNcIjtcclxuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4uL21hdGgvTWF0cml4NFwiO1xyXG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSBcIi4uL21hdGgvUXVhdGVybmlvblwiO1xyXG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW5kZXJPYmplY3Qge1xyXG5cdHB1YmxpYyB1cDogVmVjdG9yMztcclxuXHRwcml2YXRlIF9wb3NpdGlvbjogVmVjdG9yMztcclxuXHRwcml2YXRlIF9zY2FsZTogVmVjdG9yMztcclxuXHRwcml2YXRlIF9xdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uO1xyXG5cdG1vZGVsTWF0cml4OiBNYXRyaXg0O1xyXG5cdHByaXZhdGUgX25vcm1hbE1hdHJpeDogTWF0cml4NDtcclxuXHRpc0NhbWVyYTogYm9vbGVhbjtcclxuXHRpc0xpZ2h0OiBib29sZWFuO1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5fcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0dGhpcy5fc2NhbGUgPSBuZXcgVmVjdG9yMygxLCAxLCAxKTtcclxuXHRcdHRoaXMuX3F1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cdFx0dGhpcy5tb2RlbE1hdHJpeCA9IE1hdHJpeDQuY2xvbmUoTWF0cml4NC5JREVOVElUWSwgbmV3IE1hdHJpeDQoKSk7XHJcblx0XHR0aGlzLl9ub3JtYWxNYXRyaXggPSBNYXRyaXg0LmNsb25lKE1hdHJpeDQuSURFTlRJVFksIG5ldyBNYXRyaXg0KCkpO1xyXG5cdFx0dGhpcy51cCA9IG5ldyBWZWN0b3IzKDAsIDEsIDApO1xyXG5cdH1cclxuXHRwdWJsaWMgZ2V0IG5vcm1hbE1hdHJpeCgpOiBNYXRyaXg0IHtcclxuXHRcdHJldHVybiB0aGlzLl9ub3JtYWxNYXRyaXg7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0IHBvc2l0aW9uKCk6IFZlY3RvcjMge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xyXG5cdH1cclxuXHRwdWJsaWMgZ2V0IHNjYWxlKCk6IFZlY3RvcjMge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NjYWxlO1xyXG5cdH1cclxuXHRwdWJsaWMgZ2V0IHF1YXRlcm5pb24oKTogUXVhdGVybmlvbiB7XHJcblx0XHRyZXR1cm4gdGhpcy5fcXVhdGVybmlvbjtcclxuXHR9XHJcblx0dXBkYXRlTm9ybWFsTWF0cml4KGNhbWVyYSkge1xyXG5cdFx0Ly9NYXRyaXg0Lm11bHRpcGx5KGNhbWVyYS52aWV3TWF0cml4LCB0aGlzLnRoaXMuX25vcm1hbE1hdHJpeCx0aGlzLl9ub3JtYWxNYXRyaXgsIHRoaXMuX25vcm1hbE1hdHJpeCk7XHJcblx0XHRNYXRyaXg0LmludmVyc2UodGhpcy5tb2RlbE1hdHJpeCwgdGhpcy5fbm9ybWFsTWF0cml4KTtcclxuXHRcdE1hdHJpeDQudHJhbnNwb3NlKHRoaXMuX25vcm1hbE1hdHJpeCwgdGhpcy5fbm9ybWFsTWF0cml4KTtcclxuXHRcdC8vIHRoaXMuX25vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgodGhpcy5tb2RlbE1hdHJpeCk7XHJcblx0fVxyXG5cdHVwZGF0ZU1hdHJpeCgpIHtcclxuXHRcdE1hdHJpeDQuZnJvbVRyYW5zbGF0aW9uUXVhdGVybmlvblJvdGF0aW9uU2NhbGUoXHJcblx0XHRcdHRoaXMucG9zaXRpb24sXHJcblx0XHRcdHRoaXMucXVhdGVybmlvbixcclxuXHRcdFx0dGhpcy5zY2FsZSxcclxuXHRcdFx0dGhpcy5tb2RlbE1hdHJpeFxyXG5cdFx0KTtcclxuXHR9XHJcblx0bG9va0F0KHgsIHksIHopIHtcclxuXHRcdF90YXJnZXQuc2V0KHgsIHksIHopO1xyXG5cdFx0aWYgKHRoaXMuaXNDYW1lcmEgfHwgdGhpcy5pc0xpZ2h0KSB7XHJcblx0XHRcdF9tMS5sb29rQXQodGhpcy5wb3NpdGlvbiwgX3RhcmdldCwgdGhpcy51cCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRfbTEubG9va0F0KF90YXJnZXQsIHRoaXMucG9zaXRpb24sIHRoaXMudXApO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeChfbTEpO1xyXG5cdH1cclxuXHRyb3RhdGVPbkF4aXMoYXhpcywgYW5nbGUpIHtcclxuXHRcdGNvbnN0IHF1YXQgPSBRdWF0ZXJuaW9uLmZyb21BeGlzQW5nbGUoYXhpcywgYW5nbGUpO1xyXG5cdFx0UXVhdGVybmlvbi5tdWx0aXBseSh0aGlzLnF1YXRlcm5pb24sIHF1YXQsIHRoaXMucXVhdGVybmlvbik7XHJcblx0fVxyXG5cdHJvdGF0ZVgoYW5nbGUpIHtcclxuXHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyhfeEF4aXMsIGFuZ2xlKTtcclxuXHR9XHJcblx0cm90YXRlWShhbmdsZSkge1xyXG5cdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKF95QXhpcywgYW5nbGUpO1xyXG5cdH1cclxuXHRyb3RhdGVaKGFuZ2xlKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoX3pBeGlzLCBhbmdsZSk7XHJcblx0fVxyXG59XHJcbmNvbnN0IF94QXhpcyA9IG5ldyBWZWN0b3IzKDEsIDAsIDApO1xyXG5jb25zdCBfeUF4aXMgPSBuZXcgVmVjdG9yMygwLCAxLCAwKTtcclxuY29uc3QgX3pBeGlzID0gbmV3IFZlY3RvcjMoMCwgMCwgMSk7XHJcbmNvbnN0IF9tMSA9IG5ldyBNYXRyaXg0KCk7XHJcbmNvbnN0IF90YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBfbWF0cml4MyA9IG5ldyBNYXRyaXgzKCk7XHJcbmNvbnN0IF9tdk1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcbiIsImltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcclxuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGVcIjtcclxuaW1wb3J0IEludGVyc2VjdCBmcm9tIFwiLi4vY29yZS9JbnRlcnNlY3RcIjtcclxuaW1wb3J0IFJlbmRlck9iamVjdCBmcm9tIFwiLi4vY29yZS9SZW5kZXJPYmplY3RcIjtcclxuaW1wb3J0IHsgUHJpbWl0aXZlVG9wb2xvZ3kgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xyXG5pbXBvcnQgR2VvbWV0cnkgZnJvbSBcIi4uL2dlb21ldHJ5L0dlb21ldHJ5XCI7XHJcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4uL21hdGVyaWFsL01hdGVyaWFsXCI7XHJcbmltcG9ydCBEcmF3Q29tbWFuZCBmcm9tIFwiLi4vcmVuZGVyL0RyYXdDb21tYW5kXCI7XHJcbmV4cG9ydCBjbGFzcyBNZXNoIGV4dGVuZHMgUmVuZGVyT2JqZWN0IHtcclxuXHRbeDogc3RyaW5nXTogYW55O1xyXG5cdGdlb21ldHJ5PzogR2VvbWV0cnk7XHJcblx0bWF0ZXJpYWw/OiBNYXRlcmlhbDtcclxuXHRpbnN0YW5jZXM/OiBudW1iZXI7XHJcblx0cHJpb3JpdHk/OiBudW1iZXI7XHJcblx0ZHJhd0NvbW1hbmQ/OiBEcmF3Q29tbWFuZDtcclxuXHRkaXN0YW5jZVRvQ2FtZXJhPzogbnVtYmVyO1xyXG5cdGNvbnN0cnVjdG9yKGdlb21ldHJ5PzogR2VvbWV0cnksIG1hdGVyaWFsPzogTWF0ZXJpYWwpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XHJcblx0XHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XHJcblx0XHR0aGlzLnR5cGUgPSBcInByaW1pdGl2ZVwiO1xyXG5cdH1cclxuXHR1cGRhdGUoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSwgY2FtZXJhPzogQ2FtZXJhKSB7XHJcblx0XHQvL3VwZGF0ZSBtYXRyaXhcclxuXHRcdHRoaXMudXBkYXRlTWF0cml4KCk7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVOb3JtYWxNYXRyaXgoY2FtZXJhKTtcclxuXHRcdC8vY3JlYXRlXHJcblx0XHR0aGlzLmdlb21ldHJ5LnVwZGF0ZShmcmFtZVN0YXRlKTtcclxuXHJcblx0XHR0aGlzLm1hdGVyaWFsLnVwZGF0ZShmcmFtZVN0YXRlLCB0aGlzKTtcclxuXHJcblx0XHQvLyB1cGRhdGUgYm91bmRpbmdTcGhlcmVcclxuXHRcdHRoaXMuZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUudXBkYXRlKHRoaXMubW9kZWxNYXRyaXgpO1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5zaGFkZXJTb3VyY2Uuc2V0RGVmaW5lcyhmcmFtZVN0YXRlLmRlZmluZXMpO1xyXG5cdFx0dGhpcy5kaXN0YW5jZVRvQ2FtZXJhID0gdGhpcy5nZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5kaXN0YW5jZVRvQ2FtZXJhKGNhbWVyYSk7XHJcblxyXG5cdFx0Y29uc3QgdmlzaWJpbGl0eSA9IGZyYW1lU3RhdGUuY3VsbGluZ1ZvbHVtZS5jb21wdXRlVmlzaWJpbGl0eSh0aGlzLmdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlKTtcclxuXHRcdC8v6KeG6ZSl5YmU6ZmkXHJcblx0XHRpZiAodmlzaWJpbGl0eSA9PT0gSW50ZXJzZWN0LklOVEVSU0VDVElORyB8fCB2aXNpYmlsaXR5ID09PSBJbnRlcnNlY3QuSU5TSURFKSB7XHJcblx0XHRcdGlmICh0aGlzLm1hdGVyaWFsLnRyYW5zcGFyZW50KSB7XHJcblx0XHRcdFx0ZnJhbWVTdGF0ZS5yZW5kZXJRdWV1ZS50cmFuc3BhcmVudC5wdXNoKHRoaXMpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZyYW1lU3RhdGUucmVuZGVyUXVldWUub3BhcXVlLnB1c2godGhpcyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0YmVmb3JlUmVuZGVyKCkge31cclxuXHRhZnRlclJlbmRlcigpIHt9XHJcblx0cHVibGljIGdldERyYXdDb21tYW5kKG92ZXJyaWRlTWF0ZXJpYWw/OiBNYXRlcmlhbCkge1xyXG5cdFx0aWYgKCF0aGlzLmRyYXdDb21tYW5kIHx8IHRoaXMubWF0ZXJpYWwuZGlydHkpIHtcclxuXHRcdFx0aWYgKHRoaXMubWF0ZXJpYWwuZGlydHkpIHRoaXMubWF0ZXJpYWwuZGlydHkgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5kcmF3Q29tbWFuZCA9IG5ldyBEcmF3Q29tbWFuZCh7XHJcblx0XHRcdFx0dmVydGV4QnVmZmVyOiB0aGlzLmdlb21ldHJ5LnZlcnRCdWZmZXIsXHJcblx0XHRcdFx0aW5kZXhCdWZmZXI6IHRoaXMuZ2VvbWV0cnkuaW5kZXhCdWZmZXIsXHJcblx0XHRcdFx0c2hhZGVyRGF0YTogdGhpcy5tYXRlcmlhbC5zaGFkZXJEYXRhLFxyXG5cdFx0XHRcdGluc3RhbmNlczogdGhpcy5pbnN0YW5jZXMsXHJcblx0XHRcdFx0Y291bnQ6IHRoaXMuZ2VvbWV0cnkuY291bnQsXHJcblx0XHRcdFx0cmVuZGVyU3RhdGU6IHRoaXMubWF0ZXJpYWwucmVuZGVyU3RhdGUsXHJcblx0XHRcdFx0c2hhZGVyU291cmNlOiB0aGlzLm1hdGVyaWFsLnNoYWRlclNvdXJjZSxcclxuXHRcdFx0XHR0eXBlOiBcInJlbmRlclwiLFxyXG5cdFx0XHRcdGxpZ2h0OiB0aGlzLm1hdGVyaWFsLmxpZ2h0LFxyXG5cdFx0XHRcdG1vZGVsTWF0cml4OnRoaXMubW9kZWxNYXRyaXhcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHR0aGlzLm1hdGVyaWFsLnNoYWRlclNvdXJjZS5zZXREZWZpbmVzKE9iamVjdC5hc3NpZ24odGhpcy5tYXRlcmlhbC5zaGFkZXJEYXRhLmRlZmluZXMsIHRoaXMuZ2VvbWV0cnkuZGVmaW5lcykpO1xyXG5cdFx0aWYgKG92ZXJyaWRlTWF0ZXJpYWwpIHtcclxuXHRcdFx0b3ZlcnJpZGVNYXRlcmlhbC51cGRhdGUoKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZHJhd0NvbW1hbmQuc2hhbGxvd0Nsb25lKG92ZXJyaWRlTWF0ZXJpYWwpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZHJhd0NvbW1hbmQ7XHJcblx0fVxyXG5cdGRlc3Ryb3koKSB7XHJcblx0XHR0aGlzLmdlb21ldHJ5LmRlc3Ryb3koKTtcclxuXHRcdHRoaXMubWF0ZXJpYWwuZGVzdHJveSgpO1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvQ2FtZXJhXCI7XG5pbXBvcnQgR01hdGggZnJvbSBcIi4uL21hdGgvTWF0aFwiO1xuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4uL21hdGgvTWF0cml4NFwiO1xuaW1wb3J0IFBsYW5lIGZyb20gXCIuLi9tYXRoL1BsYW5lXCI7XG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi91dGlscy9kZWZpbmVkXCI7XG5pbXBvcnQgSW50ZXJzZWN0IGZyb20gXCIuL0ludGVyc2VjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3VuZGluZ1NwaGVyZSB7XG5cdHJhZGl1czogbnVtYmVyO1xuXHRjZW50ZXI6IFZlY3RvcjM7XG5cdG9yaWdpblJhZGl1czogbnVtYmVyO1xuXHRvcmlnaW5DZW50ZXI6IFZlY3RvcjM7XG5cdGNvbnN0cnVjdG9yKGNlbnRlcjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKDAsIDAsIDApLCByYWRpdXMgPSAwKSB7XG5cdFx0dGhpcy5jZW50ZXIgPSBjZW50ZXI7XG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0dGhpcy5vcmlnaW5DZW50ZXIgPSB0aGlzLmNlbnRlci5jbG9uZSgpO1xuXHRcdHRoaXMub3JpZ2luUmFkaXVzID0gcmFkaXVzO1xuXHR9XG5cdC8qKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjNbXX0gW3Bvc2l0aW9uc10gQW4gYXJyYXkgb2YgcG9pbnRzIHRoYXQgdGhlIGJvdW5kaW5nIHNwaGVyZSB3aWxsIGVuY2xvc2UuICBFYWNoIHBvaW50IG11c3QgaGF2ZSA8Y29kZT54PC9jb2RlPiwgPGNvZGU+eTwvY29kZT4sIGFuZCA8Y29kZT56PC9jb2RlPiBwcm9wZXJ0aWVzLlxuXHQgKiBAcmV0dXJucyB7Qm91bmRpbmdTcGhlcmV9IFRoZSBtb2RpZmllZCByZXN1bHQgcGFyYW1ldGVyIG9yIGEgbmV3IEJvdW5kaW5nU3BoZXJlIGluc3RhbmNlIGlmIG9uZSB3YXMgbm90IHByb3ZpZGVkLlxuXHQgKi9cblx0c3RhdGljIGZyb21Qb2ludHMocG9zaXRpb25zKSB7XG5cdFx0bGV0IHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0aWYgKCFkZWZpbmVkKHBvc2l0aW9ucykgfHwgcG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmVzdWx0LmNlbnRlciA9IFZlY3RvcjMuY2xvbmUoVmVjdG9yMy5aRVJPLCByZXN1bHQuY2VudGVyKTtcblx0XHRcdHJlc3VsdC5yYWRpdXMgPSAwLjA7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblxuXHRcdGNvbnN0IGN1cnJlbnRQb3MgPSBWZWN0b3IzLmNsb25lKHBvc2l0aW9uc1swXSwgZnJvbVBvaW50c0N1cnJlbnRQb3MpO1xuXG5cdFx0Y29uc3QgeE1pbiA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNaW4pO1xuXHRcdGNvbnN0IHlNaW4gPSBWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNZTWluKTtcblx0XHRjb25zdCB6TWluID0gVmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCBmcm9tUG9pbnRzWk1pbik7XG5cblx0XHRjb25zdCB4TWF4ID0gVmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCBmcm9tUG9pbnRzWE1heCk7XG5cdFx0Y29uc3QgeU1heCA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1lNYXgpO1xuXHRcdGNvbnN0IHpNYXggPSBWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNaTWF4KTtcblxuXHRcdGNvbnN0IG51bVBvc2l0aW9ucyA9IHBvc2l0aW9ucy5sZW5ndGg7XG5cdFx0bGV0IGk7XG5cdFx0Zm9yIChpID0gMTsgaSA8IG51bVBvc2l0aW9uczsgaSsrKSB7XG5cdFx0XHRWZWN0b3IzLmNsb25lKHBvc2l0aW9uc1tpXSwgY3VycmVudFBvcyk7XG5cblx0XHRcdGNvbnN0IHggPSBjdXJyZW50UG9zLng7XG5cdFx0XHRjb25zdCB5ID0gY3VycmVudFBvcy55O1xuXHRcdFx0Y29uc3QgeiA9IGN1cnJlbnRQb3MuejtcblxuXHRcdFx0Ly8gU3RvcmUgcG9pbnRzIGNvbnRhaW5pbmcgdGhlIHRoZSBzbWFsbGVzdCBhbmQgbGFyZ2VzdCBjb21wb25lbnRzXG5cdFx0XHRpZiAoeCA8IHhNaW4ueCkge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHhNaW4pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeCA+IHhNYXgueCkge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHhNYXgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeSA8IHlNaW4ueSkge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHlNaW4pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeSA+IHlNYXgueSkge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHlNYXgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeiA8IHpNaW4ueikge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHpNaW4pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeiA+IHpNYXgueikge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHpNYXgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbXB1dGUgeC0sIHktLCBhbmQgei1zcGFucyAoU3F1YXJlZCBkaXN0YW5jZXMgYi9uIGVhY2ggY29tcG9uZW50J3MgbWluLiBhbmQgbWF4LikuXG5cdFx0Y29uc3QgeFNwYW4gPSBWZWN0b3IzLm1hZ25pdHVkZVNxdWFyZWQoVmVjdG9yMy5zdWJ0cmFjdCh4TWF4LCB4TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkpO1xuXHRcdGNvbnN0IHlTcGFuID0gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKFZlY3RvcjMuc3VidHJhY3QoeU1heCwgeU1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpKTtcblx0XHRjb25zdCB6U3BhbiA9IFZlY3RvcjMubWFnbml0dWRlU3F1YXJlZChWZWN0b3IzLnN1YnRyYWN0KHpNYXgsIHpNaW4sIGZyb21Qb2ludHNTY3JhdGNoKSk7XG5cblx0XHQvLyBTZXQgdGhlIGRpYW1ldGVyIGVuZHBvaW50cyB0byB0aGUgbGFyZ2VzdCBzcGFuLlxuXHRcdGxldCBkaWFtZXRlcjEgPSB4TWluO1xuXHRcdGxldCBkaWFtZXRlcjIgPSB4TWF4O1xuXHRcdGxldCBtYXhTcGFuID0geFNwYW47XG5cdFx0aWYgKHlTcGFuID4gbWF4U3Bhbikge1xuXHRcdFx0bWF4U3BhbiA9IHlTcGFuO1xuXHRcdFx0ZGlhbWV0ZXIxID0geU1pbjtcblx0XHRcdGRpYW1ldGVyMiA9IHlNYXg7XG5cdFx0fVxuXHRcdGlmICh6U3BhbiA+IG1heFNwYW4pIHtcblx0XHRcdG1heFNwYW4gPSB6U3Bhbjtcblx0XHRcdGRpYW1ldGVyMSA9IHpNaW47XG5cdFx0XHRkaWFtZXRlcjIgPSB6TWF4O1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSB0aGUgY2VudGVyIG9mIHRoZSBpbml0aWFsIHNwaGVyZSBmb3VuZCBieSBSaXR0ZXIncyBhbGdvcml0aG1cblx0XHRjb25zdCByaXR0ZXJDZW50ZXIgPSBmcm9tUG9pbnRzUml0dGVyQ2VudGVyO1xuXHRcdHJpdHRlckNlbnRlci54ID0gKGRpYW1ldGVyMS54ICsgZGlhbWV0ZXIyLngpICogMC41O1xuXHRcdHJpdHRlckNlbnRlci55ID0gKGRpYW1ldGVyMS55ICsgZGlhbWV0ZXIyLnkpICogMC41O1xuXHRcdHJpdHRlckNlbnRlci56ID0gKGRpYW1ldGVyMS56ICsgZGlhbWV0ZXIyLnopICogMC41O1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSByYWRpdXMgb2YgdGhlIGluaXRpYWwgc3BoZXJlIGZvdW5kIGJ5IFJpdHRlcidzIGFsZ29yaXRobVxuXHRcdGxldCByYWRpdXNTcXVhcmVkID0gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKFZlY3RvcjMuc3VidHJhY3QoZGlhbWV0ZXIyLCByaXR0ZXJDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKSk7XG5cdFx0bGV0IHJpdHRlclJhZGl1cyA9IE1hdGguc3FydChyYWRpdXNTcXVhcmVkKTtcblxuXHRcdC8vIEZpbmQgdGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlIGZvdW5kIHVzaW5nIHRoZSBOYWl2ZSBtZXRob2QuXG5cdFx0Y29uc3QgbWluQm94UHQgPSBmcm9tUG9pbnRzTWluQm94UHQ7XG5cdFx0bWluQm94UHQueCA9IHhNaW4ueDtcblx0XHRtaW5Cb3hQdC55ID0geU1pbi55O1xuXHRcdG1pbkJveFB0LnogPSB6TWluLno7XG5cblx0XHRjb25zdCBtYXhCb3hQdCA9IGZyb21Qb2ludHNNYXhCb3hQdDtcblx0XHRtYXhCb3hQdC54ID0geE1heC54O1xuXHRcdG1heEJveFB0LnkgPSB5TWF4Lnk7XG5cdFx0bWF4Qm94UHQueiA9IHpNYXguejtcblxuXHRcdGNvbnN0IG5haXZlQ2VudGVyID0gVmVjdG9yMy5taWRwb2ludChtaW5Cb3hQdCwgbWF4Qm94UHQsIGZyb21Qb2ludHNOYWl2ZUNlbnRlclNjcmF0Y2gpO1xuXG5cdFx0Ly8gQmVnaW4gMm5kIHBhc3MgdG8gZmluZCBuYWl2ZSByYWRpdXMgYW5kIG1vZGlmeSB0aGUgcml0dGVyIHNwaGVyZS5cblx0XHRsZXQgbmFpdmVSYWRpdXMgPSAwO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBudW1Qb3NpdGlvbnM7IGkrKykge1xuXHRcdFx0VmVjdG9yMy5jbG9uZShwb3NpdGlvbnNbaV0sIGN1cnJlbnRQb3MpO1xuXG5cdFx0XHQvLyBGaW5kIHRoZSBmdXJ0aGVzdCBwb2ludCBmcm9tIHRoZSBuYWl2ZSBjZW50ZXIgdG8gY2FsY3VsYXRlIHRoZSBuYWl2ZSByYWRpdXMuXG5cdFx0XHRjb25zdCByID0gVmVjdG9yMy5tYWduaXR1ZGUoVmVjdG9yMy5zdWJ0cmFjdChjdXJyZW50UG9zLCBuYWl2ZUNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpKTtcblx0XHRcdGlmIChyID4gbmFpdmVSYWRpdXMpIHtcblx0XHRcdFx0bmFpdmVSYWRpdXMgPSByO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIGFkanVzdG1lbnRzIHRvIHRoZSBSaXR0ZXIgU3BoZXJlIHRvIGluY2x1ZGUgYWxsIHBvaW50cy5cblx0XHRcdGNvbnN0IG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID0gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKFxuXHRcdFx0XHRWZWN0b3IzLnN1YnRyYWN0KGN1cnJlbnRQb3MsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpXG5cdFx0XHQpO1xuXHRcdFx0aWYgKG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID4gcmFkaXVzU3F1YXJlZCkge1xuXHRcdFx0XHRjb25zdCBvbGRDZW50ZXJUb1BvaW50ID0gTWF0aC5zcXJ0KG9sZENlbnRlclRvUG9pbnRTcXVhcmVkKTtcblx0XHRcdFx0Ly8gQ2FsY3VsYXRlIG5ldyByYWRpdXMgdG8gaW5jbHVkZSB0aGUgcG9pbnQgdGhhdCBsaWVzIG91dHNpZGVcblx0XHRcdFx0cml0dGVyUmFkaXVzID0gKHJpdHRlclJhZGl1cyArIG9sZENlbnRlclRvUG9pbnQpICogMC41O1xuXHRcdFx0XHRyYWRpdXNTcXVhcmVkID0gcml0dGVyUmFkaXVzICogcml0dGVyUmFkaXVzO1xuXHRcdFx0XHQvLyBDYWxjdWxhdGUgY2VudGVyIG9mIG5ldyBSaXR0ZXIgc3BoZXJlXG5cdFx0XHRcdGNvbnN0IG9sZFRvTmV3ID0gb2xkQ2VudGVyVG9Qb2ludCAtIHJpdHRlclJhZGl1cztcblx0XHRcdFx0cml0dGVyQ2VudGVyLnggPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnggKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueCkgLyBvbGRDZW50ZXJUb1BvaW50O1xuXHRcdFx0XHRyaXR0ZXJDZW50ZXIueSA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueSArIG9sZFRvTmV3ICogY3VycmVudFBvcy55KSAvIG9sZENlbnRlclRvUG9pbnQ7XG5cdFx0XHRcdHJpdHRlckNlbnRlci56ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci56ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLnopIC8gb2xkQ2VudGVyVG9Qb2ludDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocml0dGVyUmFkaXVzIDwgbmFpdmVSYWRpdXMpIHtcblx0XHRcdFZlY3RvcjMuY2xvbmUocml0dGVyQ2VudGVyLCByZXN1bHQuY2VudGVyKTtcblx0XHRcdHJlc3VsdC5yYWRpdXMgPSByaXR0ZXJSYWRpdXM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFZlY3RvcjMuY2xvbmUobmFpdmVDZW50ZXIsIHJlc3VsdC5jZW50ZXIpO1xuXHRcdFx0cmVzdWx0LnJhZGl1cyA9IG5haXZlUmFkaXVzO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblx0LyoqXG5cdCAqIENvbXB1dGVzIGEgdGlnaHQtZml0dGluZyBib3VuZGluZyBzcGhlcmUgZW5jbG9zaW5nIGEgbGlzdCBvZiAzRCBwb2ludHMsIHdoZXJlIHRoZSBwb2ludHMgYXJlXG5cdCAqIHN0b3JlZCBpbiBhIGZsYXQgYXJyYXkgaW4gWCwgWSwgWiwgb3JkZXIuICBUaGUgYm91bmRpbmcgc3BoZXJlIGlzIGNvbXB1dGVkIGJ5IHJ1bm5pbmcgdHdvXG5cdCAqIGFsZ29yaXRobXMsIGEgbmFpdmUgYWxnb3JpdGhtIGFuZCBSaXR0ZXIncyBhbGdvcml0aG0uIFRoZSBzbWFsbGVyIG9mIHRoZSB0d28gc3BoZXJlcyBpcyB1c2VkIHRvXG5cdCAqIGVuc3VyZSBhIHRpZ2h0IGZpdC5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJbXX0gW3Bvc2l0aW9uc10gQW4gYXJyYXkgb2YgcG9pbnRzIHRoYXQgdGhlIGJvdW5kaW5nIHNwaGVyZSB3aWxsIGVuY2xvc2UuICBFYWNoIHBvaW50XG5cdCAqICAgICAgICBpcyBmb3JtZWQgZnJvbSB0aHJlZSBlbGVtZW50cyBpbiB0aGUgYXJyYXkgaW4gdGhlIG9yZGVyIFgsIFksIFouXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW2NlbnRlcj1WZWN0b3IzLlpFUk9dIFRoZSBwb3NpdGlvbiB0byB3aGljaCB0aGUgcG9zaXRpb25zIGFyZSByZWxhdGl2ZSwgd2hpY2ggbmVlZCBub3QgYmUgdGhlXG5cdCAqICAgICAgICBvcmlnaW4gb2YgdGhlIGNvb3JkaW5hdGUgc3lzdGVtLiAgVGhpcyBpcyB1c2VmdWwgd2hlbiB0aGUgcG9zaXRpb25zIGFyZSB0byBiZSB1c2VkIGZvclxuXHQgKiAgICAgICAgcmVsYXRpdmUtdG8tY2VudGVyIChSVEMpIHJlbmRlcmluZy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzdHJpZGU9M10gVGhlIG51bWJlciBvZiBhcnJheSBlbGVtZW50cyBwZXIgdmVydGV4LiAgSXQgbXVzdCBiZSBhdCBsZWFzdCAzLCBidXQgaXQgbWF5XG5cdCAqICAgICAgICBiZSBoaWdoZXIuICBSZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciwgdGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgZmlyc3QgcG9zaXRpb25cblx0ICogICAgICAgIGlzIGF0IGFycmF5IGluZGV4IDAsIHRoZSBZIGNvb3JkaW5hdGUgaXMgYXQgYXJyYXkgaW5kZXggMSwgYW5kIHRoZSBaIGNvb3JkaW5hdGUgaXMgYXQgYXJyYXkgaW5kZXhcblx0ICogICAgICAgIDIuICBXaGVuIHN0cmlkZSBpcyAzLCB0aGUgWCBjb29yZGluYXRlIG9mIHRoZSBuZXh0IHBvc2l0aW9uIHRoZW4gYmVnaW5zIGF0IGFycmF5IGluZGV4IDMuICBJZlxuXHQgKiAgICAgICAgdGhlIHN0cmlkZSBpcyA1LCBob3dldmVyLCB0d28gYXJyYXkgZWxlbWVudHMgYXJlIHNraXBwZWQgYW5kIHRoZSBuZXh0IHBvc2l0aW9uIGJlZ2lucyBhdCBhcnJheVxuXHQgKiAgICAgICAgaW5kZXggNS5cblx0ICogQHBhcmFtIHtCb3VuZGluZ1NwaGVyZX0gW3Jlc3VsdF0gVGhlIG9iamVjdCBvbnRvIHdoaWNoIHRvIHN0b3JlIHRoZSByZXN1bHQuXG5cdCAqIEByZXR1cm5zIHtCb3VuZGluZ1NwaGVyZX0gVGhlIG1vZGlmaWVkIHJlc3VsdCBwYXJhbWV0ZXIgb3IgYSBuZXcgQm91bmRpbmdTcGhlcmUgaW5zdGFuY2UgaWYgb25lIHdhcyBub3QgcHJvdmlkZWQuXG5cdCAqXG5cdCAqIEBleGFtcGxlXG5cdCAqIC8vIENvbXB1dGUgdGhlIGJvdW5kaW5nIHNwaGVyZSBmcm9tIDMgcG9zaXRpb25zLCBlYWNoIHNwZWNpZmllZCByZWxhdGl2ZSB0byBhIGNlbnRlci5cblx0ICogLy8gSW4gYWRkaXRpb24gdG8gdGhlIFgsIFksIGFuZCBaIGNvb3JkaW5hdGVzLCB0aGUgcG9pbnRzIGFycmF5IGNvbnRhaW5zIHR3byBhZGRpdGlvbmFsXG5cdCAqIC8vIGVsZW1lbnRzIHBlciBwb2ludCB3aGljaCBhcmUgaWdub3JlZCBmb3IgdGhlIHB1cnBvc2Ugb2YgY29tcHV0aW5nIHRoZSBib3VuZGluZyBzcGhlcmUuXG5cdCAqIGNvbnN0IGNlbnRlciA9IG5ldyBWZWN0b3IzKDEuMCwgMi4wLCAzLjApO1xuXHQgKiBjb25zdCBwb2ludHMgPSBbMS4wLCAyLjAsIDMuMCwgMC4xLCAwLjIsXG5cdCAqICAgICAgICAgICAgICAgNC4wLCA1LjAsIDYuMCwgMC4xLCAwLjIsXG5cdCAqICAgICAgICAgICAgICAgNy4wLCA4LjAsIDkuMCwgMC4xLCAwLjJdO1xuXHQgKiBjb25zdCBzcGhlcmUgPSBCb3VuZGluZ1NwaGVyZS5mcm9tVmVydGljZXMocG9pbnRzLCBjZW50ZXIsIDUpO1xuXHQgKlxuXHQgKi9cblx0c3RhdGljIGZyb21WZXJ0aWNlcyhwb3NpdGlvbnM6IG51bWJlcltdLCBjZW50ZXI6IFZlY3RvcjMgPSBWZWN0b3IzLlpFUk8sIHN0cmlkZTogbnVtYmVyID0gMykge1xuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0aWYgKCFkZWZpbmVkKHBvc2l0aW9ucykgfHwgcG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmVzdWx0LmNlbnRlciA9IFZlY3RvcjMuY2xvbmUoVmVjdG9yMy5aRVJPLCByZXN1bHQuY2VudGVyKTtcblx0XHRcdHJlc3VsdC5yYWRpdXMgPSAwLjA7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblxuXHRcdGNlbnRlciA9IGRlZmF1bHRWYWx1ZShjZW50ZXIsIFZlY3RvcjMuWkVSTyk7XG5cblx0XHRzdHJpZGUgPSBkZWZhdWx0VmFsdWUoc3RyaWRlLCAzKTtcblxuXHRcdGNvbnN0IGN1cnJlbnRQb3MgPSBmcm9tUG9pbnRzQ3VycmVudFBvcztcblx0XHRjdXJyZW50UG9zLnggPSBwb3NpdGlvbnNbMF0gKyBjZW50ZXIueDtcblx0XHRjdXJyZW50UG9zLnkgPSBwb3NpdGlvbnNbMV0gKyBjZW50ZXIueTtcblx0XHRjdXJyZW50UG9zLnogPSBwb3NpdGlvbnNbMl0gKyBjZW50ZXIuejtcblxuXHRcdGNvbnN0IHhNaW4gPSBWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNYTWluKTtcblx0XHRjb25zdCB5TWluID0gVmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCBmcm9tUG9pbnRzWU1pbik7XG5cdFx0Y29uc3Qgek1pbiA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1pNaW4pO1xuXG5cdFx0Y29uc3QgeE1heCA9IFZlY3RvcjMuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNYXgpO1xuXHRcdGNvbnN0IHlNYXggPSBWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNZTWF4KTtcblx0XHRjb25zdCB6TWF4ID0gVmVjdG9yMy5jbG9uZShjdXJyZW50UG9zLCBmcm9tUG9pbnRzWk1heCk7XG5cblx0XHRjb25zdCBudW1FbGVtZW50cyA9IHBvc2l0aW9ucy5sZW5ndGg7XG5cdFx0bGV0IGk7XG5cdFx0Zm9yIChpID0gMDsgaSA8IG51bUVsZW1lbnRzOyBpICs9IHN0cmlkZSkge1xuXHRcdFx0Y29uc3QgeCA9IHBvc2l0aW9uc1tpXSArIGNlbnRlci54O1xuXHRcdFx0Y29uc3QgeSA9IHBvc2l0aW9uc1tpICsgMV0gKyBjZW50ZXIueTtcblx0XHRcdGNvbnN0IHogPSBwb3NpdGlvbnNbaSArIDJdICsgY2VudGVyLno7XG5cblx0XHRcdGN1cnJlbnRQb3MueCA9IHg7XG5cdFx0XHRjdXJyZW50UG9zLnkgPSB5O1xuXHRcdFx0Y3VycmVudFBvcy56ID0gejtcblxuXHRcdFx0Ly8gU3RvcmUgcG9pbnRzIGNvbnRhaW5pbmcgdGhlIHRoZSBzbWFsbGVzdCBhbmQgbGFyZ2VzdCBjb21wb25lbnRzXG5cdFx0XHRpZiAoeCA8IHhNaW4ueCkge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHhNaW4pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeCA+IHhNYXgueCkge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHhNYXgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeSA8IHlNaW4ueSkge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHlNaW4pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeSA+IHlNYXgueSkge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHlNYXgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeiA8IHpNaW4ueikge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHpNaW4pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoeiA+IHpNYXgueikge1xuXHRcdFx0XHRWZWN0b3IzLmNsb25lKGN1cnJlbnRQb3MsIHpNYXgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbXB1dGUgeC0sIHktLCBhbmQgei1zcGFucyAoU3F1YXJlZCBkaXN0YW5jZXMgYi9uIGVhY2ggY29tcG9uZW50J3MgbWluLiBhbmQgbWF4LikuXG5cdFx0Y29uc3QgeFNwYW4gPSBWZWN0b3IzLm1hZ25pdHVkZVNxdWFyZWQoVmVjdG9yMy5zdWJ0cmFjdCh4TWF4LCB4TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkpO1xuXHRcdGNvbnN0IHlTcGFuID0gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKFZlY3RvcjMuc3VidHJhY3QoeU1heCwgeU1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpKTtcblx0XHRjb25zdCB6U3BhbiA9IFZlY3RvcjMubWFnbml0dWRlU3F1YXJlZChWZWN0b3IzLnN1YnRyYWN0KHpNYXgsIHpNaW4sIGZyb21Qb2ludHNTY3JhdGNoKSk7XG5cblx0XHQvLyBTZXQgdGhlIGRpYW1ldGVyIGVuZHBvaW50cyB0byB0aGUgbGFyZ2VzdCBzcGFuLlxuXHRcdGxldCBkaWFtZXRlcjEgPSB4TWluO1xuXHRcdGxldCBkaWFtZXRlcjIgPSB4TWF4O1xuXHRcdGxldCBtYXhTcGFuID0geFNwYW47XG5cdFx0aWYgKHlTcGFuID4gbWF4U3Bhbikge1xuXHRcdFx0bWF4U3BhbiA9IHlTcGFuO1xuXHRcdFx0ZGlhbWV0ZXIxID0geU1pbjtcblx0XHRcdGRpYW1ldGVyMiA9IHlNYXg7XG5cdFx0fVxuXHRcdGlmICh6U3BhbiA+IG1heFNwYW4pIHtcblx0XHRcdG1heFNwYW4gPSB6U3Bhbjtcblx0XHRcdGRpYW1ldGVyMSA9IHpNaW47XG5cdFx0XHRkaWFtZXRlcjIgPSB6TWF4O1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSB0aGUgY2VudGVyIG9mIHRoZSBpbml0aWFsIHNwaGVyZSBmb3VuZCBieSBSaXR0ZXIncyBhbGdvcml0aG1cblx0XHRjb25zdCByaXR0ZXJDZW50ZXIgPSBmcm9tUG9pbnRzUml0dGVyQ2VudGVyO1xuXHRcdHJpdHRlckNlbnRlci54ID0gKGRpYW1ldGVyMS54ICsgZGlhbWV0ZXIyLngpICogMC41O1xuXHRcdHJpdHRlckNlbnRlci55ID0gKGRpYW1ldGVyMS55ICsgZGlhbWV0ZXIyLnkpICogMC41O1xuXHRcdHJpdHRlckNlbnRlci56ID0gKGRpYW1ldGVyMS56ICsgZGlhbWV0ZXIyLnopICogMC41O1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSByYWRpdXMgb2YgdGhlIGluaXRpYWwgc3BoZXJlIGZvdW5kIGJ5IFJpdHRlcidzIGFsZ29yaXRobVxuXHRcdGxldCByYWRpdXNTcXVhcmVkID0gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKFZlY3RvcjMuc3VidHJhY3QoZGlhbWV0ZXIyLCByaXR0ZXJDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKSk7XG5cdFx0bGV0IHJpdHRlclJhZGl1cyA9IE1hdGguc3FydChyYWRpdXNTcXVhcmVkKTtcblxuXHRcdC8vIEZpbmQgdGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlIGZvdW5kIHVzaW5nIHRoZSBOYWl2ZSBtZXRob2QuXG5cdFx0Y29uc3QgbWluQm94UHQgPSBmcm9tUG9pbnRzTWluQm94UHQ7XG5cdFx0bWluQm94UHQueCA9IHhNaW4ueDtcblx0XHRtaW5Cb3hQdC55ID0geU1pbi55O1xuXHRcdG1pbkJveFB0LnogPSB6TWluLno7XG5cblx0XHRjb25zdCBtYXhCb3hQdCA9IGZyb21Qb2ludHNNYXhCb3hQdDtcblx0XHRtYXhCb3hQdC54ID0geE1heC54O1xuXHRcdG1heEJveFB0LnkgPSB5TWF4Lnk7XG5cdFx0bWF4Qm94UHQueiA9IHpNYXguejtcblxuXHRcdGNvbnN0IG5haXZlQ2VudGVyID0gVmVjdG9yMy5taWRwb2ludChtaW5Cb3hQdCwgbWF4Qm94UHQsIGZyb21Qb2ludHNOYWl2ZUNlbnRlclNjcmF0Y2gpO1xuXG5cdFx0Ly8gQmVnaW4gMm5kIHBhc3MgdG8gZmluZCBuYWl2ZSByYWRpdXMgYW5kIG1vZGlmeSB0aGUgcml0dGVyIHNwaGVyZS5cblx0XHRsZXQgbmFpdmVSYWRpdXMgPSAwO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBudW1FbGVtZW50czsgaSArPSBzdHJpZGUpIHtcblx0XHRcdGN1cnJlbnRQb3MueCA9IHBvc2l0aW9uc1tpXSArIGNlbnRlci54O1xuXHRcdFx0Y3VycmVudFBvcy55ID0gcG9zaXRpb25zW2kgKyAxXSArIGNlbnRlci55O1xuXHRcdFx0Y3VycmVudFBvcy56ID0gcG9zaXRpb25zW2kgKyAyXSArIGNlbnRlci56O1xuXG5cdFx0XHQvLyBGaW5kIHRoZSBmdXJ0aGVzdCBwb2ludCBmcm9tIHRoZSBuYWl2ZSBjZW50ZXIgdG8gY2FsY3VsYXRlIHRoZSBuYWl2ZSByYWRpdXMuXG5cdFx0XHRjb25zdCByID0gVmVjdG9yMy5tYWduaXR1ZGUoVmVjdG9yMy5zdWJ0cmFjdChjdXJyZW50UG9zLCBuYWl2ZUNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpKTtcblx0XHRcdGlmIChyID4gbmFpdmVSYWRpdXMpIHtcblx0XHRcdFx0bmFpdmVSYWRpdXMgPSByO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIGFkanVzdG1lbnRzIHRvIHRoZSBSaXR0ZXIgU3BoZXJlIHRvIGluY2x1ZGUgYWxsIHBvaW50cy5cblx0XHRcdGNvbnN0IG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID0gVmVjdG9yMy5tYWduaXR1ZGVTcXVhcmVkKFxuXHRcdFx0XHRWZWN0b3IzLnN1YnRyYWN0KGN1cnJlbnRQb3MsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpXG5cdFx0XHQpO1xuXHRcdFx0aWYgKG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID4gcmFkaXVzU3F1YXJlZCkge1xuXHRcdFx0XHRjb25zdCBvbGRDZW50ZXJUb1BvaW50ID0gTWF0aC5zcXJ0KG9sZENlbnRlclRvUG9pbnRTcXVhcmVkKTtcblx0XHRcdFx0Ly8gQ2FsY3VsYXRlIG5ldyByYWRpdXMgdG8gaW5jbHVkZSB0aGUgcG9pbnQgdGhhdCBsaWVzIG91dHNpZGVcblx0XHRcdFx0cml0dGVyUmFkaXVzID0gKHJpdHRlclJhZGl1cyArIG9sZENlbnRlclRvUG9pbnQpICogMC41O1xuXHRcdFx0XHRyYWRpdXNTcXVhcmVkID0gcml0dGVyUmFkaXVzICogcml0dGVyUmFkaXVzO1xuXHRcdFx0XHQvLyBDYWxjdWxhdGUgY2VudGVyIG9mIG5ldyBSaXR0ZXIgc3BoZXJlXG5cdFx0XHRcdGNvbnN0IG9sZFRvTmV3ID0gb2xkQ2VudGVyVG9Qb2ludCAtIHJpdHRlclJhZGl1cztcblx0XHRcdFx0cml0dGVyQ2VudGVyLnggPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnggKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueCkgLyBvbGRDZW50ZXJUb1BvaW50O1xuXHRcdFx0XHRyaXR0ZXJDZW50ZXIueSA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueSArIG9sZFRvTmV3ICogY3VycmVudFBvcy55KSAvIG9sZENlbnRlclRvUG9pbnQ7XG5cdFx0XHRcdHJpdHRlckNlbnRlci56ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci56ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLnopIC8gb2xkQ2VudGVyVG9Qb2ludDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocml0dGVyUmFkaXVzIDwgbmFpdmVSYWRpdXMpIHtcblx0XHRcdFZlY3RvcjMuY2xvbmUocml0dGVyQ2VudGVyLCByZXN1bHQuY2VudGVyKTtcblx0XHRcdHJlc3VsdC5yYWRpdXMgPSByaXR0ZXJSYWRpdXM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFZlY3RvcjMuY2xvbmUobmFpdmVDZW50ZXIsIHJlc3VsdC5jZW50ZXIpO1xuXHRcdFx0cmVzdWx0LnJhZGl1cyA9IG5haXZlUmFkaXVzO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRpbnRlcnNlY3RQbGFuZShwbGFuZTogUGxhbmUpIHtcblx0XHRjb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcblx0XHRjb25zdCByYWRpdXMgPSB0aGlzLnJhZGl1cztcblx0XHRjb25zdCBub3JtYWwgPSBwbGFuZS5ub3JtYWw7XG5cdFx0Y29uc3QgZGlzdGFuY2VUb1BsYW5lID0gVmVjdG9yMy5kb3Qobm9ybWFsLCBjZW50ZXIpICsgcGxhbmUuZGlzdGFuY2U7XG5cblx0XHRpZiAoZGlzdGFuY2VUb1BsYW5lIDwgLXJhZGl1cykge1xuXHRcdFx0Ly8gVGhlIGNlbnRlciBwb2ludCBpcyBuZWdhdGl2ZSBzaWRlIG9mIHRoZSBwbGFuZSBub3JtYWxcblx0XHRcdHJldHVybiBJbnRlcnNlY3QuT1VUU0lERTtcblx0XHR9IGVsc2UgaWYgKGRpc3RhbmNlVG9QbGFuZSA8IHJhZGl1cykge1xuXHRcdFx0Ly8gVGhlIGNlbnRlciBwb2ludCBpcyBwb3NpdGl2ZSBzaWRlIG9mIHRoZSBwbGFuZSwgYnV0IHJhZGl1cyBleHRlbmRzIGJleW9uZCBpdDsgcGFydGlhbCBvdmVybGFwXG5cdFx0XHRyZXR1cm4gSW50ZXJzZWN0LklOVEVSU0VDVElORztcblx0XHR9XG5cdFx0cmV0dXJuIEludGVyc2VjdC5JTlNJREU7XG5cdH1cblx0dXBkYXRlKHRyYW5zZm9ybTogTWF0cml4NCkge1xuXHRcdE1hdHJpeDQubXVsdGlwbHlCeVBvaW50KHRyYW5zZm9ybSwgdGhpcy5vcmlnaW5DZW50ZXIsIHRoaXMuY2VudGVyKTtcblx0XHR0aGlzLnJhZGl1cyA9IE1hdHJpeDQuZ2V0TWF4aW11bVNjYWxlKHRyYW5zZm9ybSkgKiB0aGlzLm9yaWdpblJhZGl1cztcblx0fVxuXHRkaXN0YW5jZVRvQ2FtZXJhKGNhbWVyYTogQ2FtZXJhKSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KDAuMCwgVmVjdG9yMy5kaXN0YW5jZSh0aGlzLmNlbnRlciwgY2FtZXJhLnBvc2l0aW9uKSAtIHRoaXMucmFkaXVzKTtcblx0fVxufVxuY29uc3QgZnJvbVBvaW50c1hNaW4gPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgZnJvbVBvaW50c1lNaW4gPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgZnJvbVBvaW50c1pNaW4gPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgZnJvbVBvaW50c1hNYXggPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgZnJvbVBvaW50c1lNYXggPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgZnJvbVBvaW50c1pNYXggPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgZnJvbVBvaW50c0N1cnJlbnRQb3MgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgZnJvbVBvaW50c1NjcmF0Y2ggPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgZnJvbVBvaW50c1JpdHRlckNlbnRlciA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBmcm9tUG9pbnRzTWluQm94UHQgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgZnJvbVBvaW50c01heEJveFB0ID0gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IGZyb21Qb2ludHNOYWl2ZUNlbnRlclNjcmF0Y2ggPSBuZXcgVmVjdG9yMygpO1xuIiwiaW1wb3J0IHsgSW5wdXRTdGVwTW9kZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5pbXBvcnQgQXR0cmlidXRlcyBmcm9tIFwiLi9BdHRyaWJ1dGVzXCI7XG5pbXBvcnQgQnVmZmVyIGZyb20gXCIuL0J1ZmZlclwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVydGV4dEJ1ZmZlciB7XG5cdHB1YmxpYyBpbmRleDogbnVtYmVyO1xuXHRwdWJsaWMgYXJyYXlTdHJpZGU6IG51bWJlcjtcblx0cHVibGljIHN0ZXBNb2RlOiBzdHJpbmc7XG5cdHB1YmxpYyBidWZmZXI6IEJ1ZmZlcjtcblx0cHVibGljIGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXM7XG5cdHB1YmxpYyBkaXJ0eTogQm9vbGVhbjtcblx0Y29uc3RydWN0b3IoYXR0cmlidXRlcz86IEF0dHJpYnV0ZXMsIGluZGV4PzogbnVtYmVyLCBzdGVwTW9kZT86IHN0cmluZykge1xuXHRcdHRoaXMuaW5kZXggPSBpbmRleCB8fCAwO1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwgdW5kZWZpbmVkO1xuXHRcdHRoaXMuc3RlcE1vZGUgPSBJbnB1dFN0ZXBNb2RlLlZlcnRleDtcblx0XHR0aGlzLmRpcnR5ID0gdHJ1ZTtcblx0fVxuXHRwdWJsaWMgZ2V0QnVmZmVyRGVzKCkge1xuXHRcdHJldHVybiBbXG5cdFx0XHR7XG5cdFx0XHRcdGFycmF5U3RyaWRlOiB0aGlzLmFycmF5U3RyaWRlLFxuXHRcdFx0XHRzdGVwTW9kZTogdGhpcy5zdGVwTW9kZSxcblx0XHRcdFx0YXR0cmlidXRlczogdGhpcy5hdHRyaWJ1dGVzLmdldEdQVUF0dHJpYnV0ZXMoKVxuXHRcdFx0fVxuXHRcdF07XG5cdH1cblx0cHVibGljIHNldEF0dHJpYnV0ZXMoYXR0cmlidXRlczogQXR0cmlidXRlcykge1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG5cdFx0dGhpcy5kaXJ0eSA9IHRydWU7XG5cdH1cblx0cHVibGljIGJpbmQoZGV2aWNlOiBHUFVEZXZpY2UsIHBhc3NFbmNvZGVyOiBHUFVSZW5kZXJQYXNzRW5jb2Rlcikge1xuXHRcdGlmICh0aGlzLmRpcnR5KSB7XG5cdFx0XHR0aGlzLmRpcnR5ID0gZmFsc2U7XG5cdFx0XHRjb25zdCB7IGFycmF5U3RyaWRlLCB0eXBlQXJyYXkgfSA9IHRoaXMuYXR0cmlidXRlcy5nZXRNZXJlZ2VBdHJyaWJ1dGVWYWx1ZXMoKTtcblx0XHRcdHRoaXMuYXJyYXlTdHJpZGUgPVxuXHRcdFx0XHRhcnJheVN0cmlkZS5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgaXRlbSwgaW5kZXgsIGFycikge1xuXHRcdFx0XHRcdHJldHVybiAoc3VtICs9IGl0ZW0pO1xuXHRcdFx0XHR9LCAwKSAqIDQ7XG5cdFx0XHR0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5jcmVhdGVWZXJ0ZXhCdWZmZXIoZGV2aWNlLCB0eXBlQXJyYXkpO1xuXHRcdH1cblx0XHRwYXNzRW5jb2Rlci5zZXRWZXJ0ZXhCdWZmZXIodGhpcy5pbmRleCwgdGhpcy5idWZmZXIuZ3B1QnVmZmVyKTtcblx0fVxuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMuYnVmZmVyLmRlc3Ryb3koKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgQXR0cmlidXRlIH0gZnJvbSBcIi4vQXR0cmlidXRlXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0dHJpYnV0ZXMge1xyXG4gIHByaXZhdGUgX2F0dHJpYnV0ZXM6IE1hcDxzdHJpbmcsIEF0dHJpYnV0ZT47XHJcbiAgcHJpdmF0ZSBzaGFkZXJMb2NhdGlvbjogbnVtYmVyO1xyXG4gIHByaXZhdGUgb2Zmc2V0OiBudW1iZXI7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9hdHRyaWJ1dGVzID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5zaGFkZXJMb2NhdGlvbiA9IDA7XHJcbiAgICB0aGlzLm9mZnNldCA9IDA7XHJcbiAgfVxyXG4gIGdldEF0dHJpYnV0ZShuYW1lKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXR0cmlidXRlcy5nZXQobmFtZSk7XHJcbiAgfVxyXG4gIHNldEF0dHJpYnV0ZShhdHRyaWJ1dGU6IEF0dHJpYnV0ZSkge1xyXG4gICAgaWYgKHRoaXMuX2F0dHJpYnV0ZXMuaGFzKGF0dHJpYnV0ZS5uYW1lKSkgcmV0dXJuO1xyXG4gICAgYXR0cmlidXRlLnNoYWRlckxvY2F0aW9uID0gdGhpcy5zaGFkZXJMb2NhdGlvbjtcclxuICAgIHRoaXMuc2hhZGVyTG9jYXRpb24gKz0gMTtcclxuICAgIGF0dHJpYnV0ZS5vZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgIHRoaXMub2Zmc2V0ICs9IGF0dHJpYnV0ZS5hdHRyaWJ1dGVCeXRlU2l6ZTtcclxuICAgIHRoaXMuX2F0dHJpYnV0ZXMuc2V0KGF0dHJpYnV0ZS5uYW1lLCBhdHRyaWJ1dGUpO1xyXG4gIH1cclxuICBnZXRHUFVBdHRyaWJ1dGVzKCkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICB0aGlzLl9hdHRyaWJ1dGVzLmZvckVhY2goKGF0dHJpYnV0ZSkgPT4ge1xyXG4gICAgICByZXN1bHQucHVzaChhdHRyaWJ1dGUuZ2V0R1BVQXR0cmlidXRlKCkpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICBnZXRNZXJlZ2VBdHJyaWJ1dGVWYWx1ZXMoKToge1xyXG4gICAgYXJyYXlTdHJpZGU6IEFycmF5PG51bWJlcj47XHJcbiAgICB0eXBlQXJyYXk6IEZsb2F0MzJBcnJheTtcclxuICB9IHtcclxuICAgIGNvbnN0IGFycmF5U3RyaWRlID0gW107XHJcbiAgICBjb25zdCBhcnJheXMgPSBbXTtcclxuICAgIHRoaXMuX2F0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XHJcbiAgICAgIGFycmF5U3RyaWRlLnB1c2goYXR0cmlidXRlLml0ZW1TaXplKTtcclxuICAgICAgYXJyYXlzLnB1c2goYXR0cmlidXRlLnZhbHVlKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYXJyYXlTdHJpZGUsXHJcbiAgICAgIHR5cGVBcnJheTogdGhpcy5pbnRlcmxlYXZlVHlwZWRBcnJheShcclxuICAgICAgICBGbG9hdDMyQXJyYXksXHJcbiAgICAgICAgYXJyYXlTdHJpZGUsXHJcbiAgICAgICAgLi4uYXJyYXlzXHJcbiAgICAgICksXHJcbiAgICB9O1xyXG4gIH1cclxuICBkZXN0cm95KCkge1xyXG4gICAgdGhpcy5fYXR0cmlidXRlcy5mb3JFYWNoKChhdHRyaWJ1dGUpID0+IHtcclxuICAgICAgYXR0cmlidXRlLmRlc3Ryb3koKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBJbnRlcmxlYXZlIG4gdHlwZWQgYXJyYXlzXHJcbiAgICogQGFsaWFzIG1vZHVsZTppbnRlcmxlYXZlVHlwZWRBcnJheVxyXG4gICAqIEBwYXJhbSB7VHlwZWRBcnJheX0gUmVzdWx0Q29uc3RydWN0b3IgUmV0dXJuZWQgdHlwZWQgYXJyYXkgY29uc3RydWN0b3JcclxuICAgKiBAcGFyYW0ge0FycmF5fSBlbGVtZW50cyBOdW1iZXIgb2YgZWxlbWVudHMgdG8gZ3JvdXAgZm9yIGVhY2ggdHlwZWQgYXJyYXlcclxuICAgKiBAcGFyYW0gey4uLlR5cGVkQXJyYXl9IGFycmF5cyBBcnJheXMgdG8gaW50ZXJsZWF2ZVxyXG4gICAqIEByZXR1cm5zIHtUeXBlZEFycmF5fVxyXG4gICAqL1xyXG4gIGludGVybGVhdmVUeXBlZEFycmF5KFJlc3VsdENvbnN0cnVjdG9yLCBlbGVtZW50cywgLi4uYXJyYXlzKSB7XHJcbiAgICBjb25zdCB0b3RhbExlbmd0aCA9IGFycmF5cy5yZWR1Y2UoKHRvdGFsLCBhcnIpID0+IHRvdGFsICsgYXJyLmxlbmd0aCwgMCk7XHJcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUmVzdWx0Q29uc3RydWN0b3IodG90YWxMZW5ndGgpO1xyXG4gICAgY29uc3Qgc3RyaWRlID0gZWxlbWVudHMucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbExlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVsZW1lbnRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBlbGVtZW50c1tqXTsgaysrKSB7XHJcbiAgICAgICAgICByZXN1bHRbaSAqIHN0cmlkZSArIG9mZnNldF0gPSBhcnJheXNbal1bZWxlbWVudHNbal0gKiBpICsga107XHJcbiAgICAgICAgICBvZmZzZXQrKztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEluZGV4Rm9ybWF0IH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcclxuaW1wb3J0IEJ1ZmZlciBmcm9tIFwiLi9CdWZmZXJcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5kZXhCdWZmZXIge1xyXG4gIGJ1ZmZlcjogQnVmZmVyO1xyXG4gIGluZGljZXM6IEFycmF5PG51bWJlcj47XHJcbiAgaW5kZXhGb3JtYXQ6IEdQVUluZGV4Rm9ybWF0O1xyXG4gIGRpcnR5OiBib29sZWFuO1xyXG4gIGNvbnN0cnVjdG9yKGluZGljZXM/OiBBcnJheTxudW1iZXI+KSB7XHJcbiAgICB0aGlzLmluZGljZXMgPSBpbmRpY2VzO1xyXG4gICAgdGhpcy5pbmRleEZvcm1hdCA9IEluZGV4Rm9ybWF0LlVpbnQxNjtcclxuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gIH1cclxuICBzZXRJbmRpY2VzKGluZGljZXMpIHtcclxuICAgIHRoaXMuaW5kaWNlcyA9IGluZGljZXM7XHJcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICB9XHJcbiAgYmluZChkZXZpY2U6IEdQVURldmljZSwgcGFzc0VuY29kZXI6IEdQVVJlbmRlclBhc3NFbmNvZGVyKSB7XHJcbiAgICBpZiAodGhpcy5kaXJ0eSkge1xyXG4gICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmNyZWF0ZUluZGV4QnVmZmVyKFxyXG4gICAgICAgIGRldmljZSxcclxuICAgICAgICB0aGlzLmluZGV4Rm9ybWF0ID09IEluZGV4Rm9ybWF0LlVpbnQxNlxyXG4gICAgICAgICAgPyBuZXcgVWludDE2QXJyYXkodGhpcy5pbmRpY2VzKVxyXG4gICAgICAgICAgOiBuZXcgVWludDMyQXJyYXkodGhpcy5pbmRpY2VzKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcGFzc0VuY29kZXIuc2V0SW5kZXhCdWZmZXIodGhpcy5idWZmZXIuZ3B1QnVmZmVyLCB0aGlzLmluZGV4Rm9ybWF0KTtcclxuICB9XHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMuYnVmZmVyLmRlc3Ryb3koKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi9kZWZhdWx0VmFsdWVcIjtcclxuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4vZGVmaW5lZFwiO1xyXG5cclxuLyoqXHJcbiAqIE1lcmdlcyB0d28gb2JqZWN0cywgY29weWluZyB0aGVpciBwcm9wZXJ0aWVzIG9udG8gYSBuZXcgY29tYmluZWQgb2JqZWN0LiBXaGVuIHR3byBvYmplY3RzIGhhdmUgdGhlIHNhbWVcclxuICogcHJvcGVydHksIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgb24gdGhlIGZpcnN0IG9iamVjdCBpcyB1c2VkLiAgSWYgZWl0aGVyIG9iamVjdCBpcyB1bmRlZmluZWQsXHJcbiAqIGl0IHdpbGwgYmUgdHJlYXRlZCBhcyBhbiBlbXB0eSBvYmplY3QuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNvbnN0IG9iamVjdDEgPSB7XHJcbiAqICAgICBwcm9wT25lIDogMSxcclxuICogICAgIHByb3BUd28gOiB7XHJcbiAqICAgICAgICAgdmFsdWUxIDogMTBcclxuICogICAgIH1cclxuICogfVxyXG4gKiBjb25zdCBvYmplY3QyID0ge1xyXG4gKiAgICAgcHJvcFR3byA6IDJcclxuICogfVxyXG4gKiBjb25zdCBmaW5hbCA9IENlc2l1bS5jb21iaW5lKG9iamVjdDEsIG9iamVjdDIpO1xyXG4gKlxyXG4gKiAvLyBmaW5hbCA9PT0ge1xyXG4gKiAvLyAgICAgcHJvcE9uZSA6IDEsXHJcbiAqIC8vICAgICBwcm9wVHdvIDoge1xyXG4gKiAvLyAgICAgICAgIHZhbHVlMSA6IDEwXHJcbiAqIC8vICAgICB9XHJcbiAqIC8vIH1cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3QxXSBUaGUgZmlyc3Qgb2JqZWN0IHRvIG1lcmdlLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdDJdIFRoZSBzZWNvbmQgb2JqZWN0IHRvIG1lcmdlLlxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtkZWVwPWZhbHNlXSBQZXJmb3JtIGEgcmVjdXJzaXZlIG1lcmdlLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY29tYmluZWQgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHByb3BlcnRpZXMgZnJvbSBib3RoIG9iamVjdHMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gY29tYmluZShvYmplY3QxLCBvYmplY3QyLCBkZWVwKSB7XHJcbiAgZGVlcCA9IGRlZmF1bHRWYWx1ZShkZWVwLCBmYWxzZSk7XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG5cclxuICBjb25zdCBvYmplY3QxRGVmaW5lZCA9IGRlZmluZWQob2JqZWN0MSk7XHJcbiAgY29uc3Qgb2JqZWN0MkRlZmluZWQgPSBkZWZpbmVkKG9iamVjdDIpO1xyXG4gIGxldCBwcm9wZXJ0eTtcclxuICBsZXQgb2JqZWN0MVZhbHVlO1xyXG4gIGxldCBvYmplY3QyVmFsdWU7XHJcbiAgaWYgKG9iamVjdDFEZWZpbmVkKSB7XHJcbiAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdDEpIHtcclxuICAgICAgaWYgKG9iamVjdDEuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgb2JqZWN0MVZhbHVlID0gb2JqZWN0MVtwcm9wZXJ0eV07XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgb2JqZWN0MkRlZmluZWQgJiZcclxuICAgICAgICAgIGRlZXAgJiZcclxuICAgICAgICAgIHR5cGVvZiBvYmplY3QxVmFsdWUgPT09IFwib2JqZWN0XCIgJiZcclxuICAgICAgICAgIG9iamVjdDIuaGFzT3duUHJvcGVydHkocHJvcGVydHkpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBvYmplY3QyVmFsdWUgPSBvYmplY3QyW3Byb3BlcnR5XTtcclxuICAgICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0MlZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eV0gPSBjb21iaW5lKG9iamVjdDFWYWx1ZSwgb2JqZWN0MlZhbHVlLCBkZWVwKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eV0gPSBvYmplY3QxVmFsdWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eV0gPSBvYmplY3QxVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChvYmplY3QyRGVmaW5lZCkge1xyXG4gICAgZm9yIChwcm9wZXJ0eSBpbiBvYmplY3QyKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBvYmplY3QyLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJlxyXG4gICAgICAgICFyZXN1bHQuaGFzT3duUHJvcGVydHkocHJvcGVydHkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIG9iamVjdDJWYWx1ZSA9IG9iamVjdDJbcHJvcGVydHldO1xyXG4gICAgICAgIHJlc3VsdFtwcm9wZXJ0eV0gPSBvYmplY3QyVmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lO1xyXG4iLCJpbXBvcnQgQm91bmRpbmdTcGhlcmUgZnJvbSBcIi4uL2NvcmUvQm91bmRpbmdTcGhlcmVcIjtcclxuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGVcIjtcclxuaW1wb3J0IFZlcnRleHRCdWZmZXIgZnJvbSBcIi4uL3JlbmRlci9WZXJ0ZXh0QnVmZmVyXCI7XHJcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcclxuaW1wb3J0IEF0dHJpYnV0ZXMgZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVzXCI7XHJcbmltcG9ydCBJbmRleEJ1ZmZlciBmcm9tIFwiLi4vcmVuZGVyL0luZGV4QnVmZmVyXCI7XHJcbmltcG9ydCBjb21iaW5lIGZyb20gXCIuLi91dGlscy9jb21iaW5lXCI7XHJcbmltcG9ydCB7IFByaW1pdGl2ZVRvcG9sb2d5IH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2VvbWV0cnkge1xyXG4gIHR5cGU6IHN0cmluZztcclxuICBkaXJ0eTogYm9vbGVhbjtcclxuICBpbmRleEJ1ZmZlcj86IEluZGV4QnVmZmVyO1xyXG4gIHZlcnRCdWZmZXI6IFZlcnRleHRCdWZmZXI7XHJcbiAgY291bnQ6IG51bWJlcjtcclxuICBib3VuZGluZ1NwaGVyZTogQm91bmRpbmdTcGhlcmU7XHJcbiAgcHJpdmF0ZSBfZGVmaW5lczogeyBbcHJvcDogc3RyaW5nXTogYm9vbGVhbiB8IG51bWJlciB9O1xyXG4gIHByaXZhdGUgYXR0cmlidXRlczogQXR0cmlidXRlcztcclxuICBkZWZpbmVzRGlydHk6IGJvb2xlYW47XHJcbiAgdG9wb2xvZ3k6IFByaW1pdGl2ZVRvcG9sb2d5O1xyXG4gIGdldCBkZWZpbmVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RlZmluZXM7XHJcbiAgfVxyXG4gIHNldCBkZWZpbmVzKHZhbHVlKSB7XHJcbiAgICB0aGlzLmRlZmluZXNEaXJ0eSA9IHRydWU7XHJcbiAgICB0aGlzLl9kZWZpbmVzID0gY29tYmluZSh2YWx1ZSwgdGhpcy5fZGVmaW5lcywgZmFsc2UpO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zPzogYW55KSB7XHJcbiAgICB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGUgfHwgdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5ib3VuZGluZ1NwaGVyZSA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcclxuICAgIHRoaXMuZGVmaW5lc0RpcnR5ID0gdHJ1ZTtcclxuICAgIHRoaXMuYXR0cmlidXRlcyA9IG5ldyBBdHRyaWJ1dGVzKCk7XHJcbiAgICB0aGlzLnZlcnRCdWZmZXIgPSBuZXcgVmVydGV4dEJ1ZmZlcih0aGlzLmF0dHJpYnV0ZXMsIDApO1xyXG4gICAgdGhpcy5fZGVmaW5lcyA9IHt9O1xyXG4gIH1cclxuICBnZXRBdHRyaWJ1dGUobmFtZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldEF0dHJpYnV0ZShuYW1lKTtcclxuICB9XHJcbiAgc2V0QXR0cmlidXRlKGF0dHJpYnV0ZTogQXR0cmlidXRlKSB7XHJcbiAgICB0aGlzLmF0dHJpYnV0ZXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XHJcbiAgfVxyXG4gIHNldEluZGljZShpbmRpY2U6IEFycmF5PG51bWJlcj4pIHtcclxuICAgIGlmICghdGhpcy5pbmRleEJ1ZmZlcikgdGhpcy5pbmRleEJ1ZmZlciA9IG5ldyBJbmRleEJ1ZmZlcigpO1xyXG4gICAgdGhpcy5pbmRleEJ1ZmZlci5zZXRJbmRpY2VzKGluZGljZSk7XHJcbiAgfVxyXG4gIHVwZGF0ZShmcmFtZVN0YXRlOiBGcmFtZVN0YXRlKSB7fVxyXG4gIGNvbXB1dGVCb3VuZGluZ1NwaGVyZShwb3NpdGlvbnMpIHtcclxuICAgIHRoaXMuYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZS5mcm9tVmVydGljZXMoXHJcbiAgICAgIHBvc2l0aW9ucyxcclxuICAgICAgbmV3IFZlY3RvcjMoMCwgMCwgMCksXHJcbiAgICAgIDNcclxuICAgICk7XHJcbiAgfVxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICB0aGlzPy5pbmRleEJ1ZmZlci5kZXN0cm95KCk7XHJcbiAgICB0aGlzLnZlcnRCdWZmZXIuZGVzdHJveSgpO1xyXG4gICAgdGhpcy5hdHRyaWJ1dGVzLmRlc3Ryb3koKTtcclxuICB9XHJcbn1cclxuIiwiY29uc3QgcHJlcHJvY2Vzc29yU3ltYm9scyA9IC8jKFteXFxzXSopKFxccyopL2dtO1xyXG4vLyBUZW1wbGF0ZSBsaXRlcmFsIHRhZyB0aGF0IGhhbmRsZXMgc2ltcGxlIHByZXByb2Nlc3NvciBzeW1ib2xzIGZvciBXR1NMXHJcbi8vIHNoYWRlcnMuIFN1cHBvcnRzICNpZi9lbGlmL2Vsc2UvZW5kaWYgc3RhdGVtZW50cy5cclxuZXhwb3J0IGZ1bmN0aW9uIHdnc2xQYXJzZURlZmluZXMoc3RyaW5ncywgLi4udmFsdWVzKSB7XHJcbiAgY29uc3Qgc3RhdGVTdGFjayA9IFtdO1xyXG4gIGxldCBzdGF0ZSA9IHsgZnJhZzogXCJcIiwgZWxzZUlzVmFsaWQ6IGZhbHNlLCBleHByZXNzaW9uOiB0cnVlIH07XHJcbiAgbGV0IGRlcHRoID0gMTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBjb25zdCBmcmFnID0gc3RyaW5nc1tpXTtcclxuICAgIGNvbnN0IG1hdGNoZWRTeW1ib2xzID0gZnJhZy5tYXRjaEFsbChwcmVwcm9jZXNzb3JTeW1ib2xzKTtcclxuXHJcbiAgICBsZXQgbGFzdEluZGV4ID0gMDtcclxuICAgIGxldCB2YWx1ZUNvbnN1bWVkID0gZmFsc2U7XHJcblxyXG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiBtYXRjaGVkU3ltYm9scykge1xyXG4gICAgICBzdGF0ZS5mcmFnICs9IGZyYWcuc3Vic3RyaW5nKGxhc3RJbmRleCwgbWF0Y2guaW5kZXgpO1xyXG5cclxuICAgICAgc3dpdGNoIChtYXRjaFsxXSkge1xyXG4gICAgICAgIGNhc2UgXCJpZlwiOlxyXG4gICAgICAgICAgaWYgKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoICE9IGZyYWcubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgICBcIiNpZiBtdXN0IGJlIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IGEgdGVtcGxhdGUgZXhwcmVzc2lvbiAoaWU6ICR7dmFsdWV9KVwiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB2YWx1ZUNvbnN1bWVkID0gdHJ1ZTtcclxuICAgICAgICAgIHN0YXRlU3RhY2sucHVzaChzdGF0ZSk7XHJcbiAgICAgICAgICBkZXB0aCsrO1xyXG4gICAgICAgICAgc3RhdGUgPSB7IGZyYWc6IFwiXCIsIGVsc2VJc1ZhbGlkOiB0cnVlLCBleHByZXNzaW9uOiAhIXZhbHVlc1tpXSB9O1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImVsaWZcIjpcclxuICAgICAgICAgIGlmIChtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCAhPSBmcmFnLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICAgXCIjZWxpZiBtdXN0IGJlIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IGEgdGVtcGxhdGUgZXhwcmVzc2lvbiAoaWU6ICR7dmFsdWV9KVwiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGUuZWxzZUlzVmFsaWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiI2VsaWYgbm90IHByZWNlZWRlZCBieSBhbiAjaWYgb3IgI2VsaWZcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdmFsdWVDb25zdW1lZCA9IHRydWU7XHJcbiAgICAgICAgICBpZiAoc3RhdGUuZXhwcmVzc2lvbiAmJiBzdGF0ZVN0YWNrLmxlbmd0aCAhPSBkZXB0aCkge1xyXG4gICAgICAgICAgICBzdGF0ZVN0YWNrLnB1c2goc3RhdGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3RhdGUgPSB7IGZyYWc6IFwiXCIsIGVsc2VJc1ZhbGlkOiB0cnVlLCBleHByZXNzaW9uOiAhIXZhbHVlc1tpXSB9O1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImVsc2VcIjpcclxuICAgICAgICAgIGlmICghc3RhdGUuZWxzZUlzVmFsaWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiI2Vsc2Ugbm90IHByZWNlZWRlZCBieSBhbiAjaWYgb3IgI2VsaWZcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHN0YXRlLmV4cHJlc3Npb24gJiYgc3RhdGVTdGFjay5sZW5ndGggIT0gZGVwdGgpIHtcclxuICAgICAgICAgICAgc3RhdGVTdGFjay5wdXNoKHN0YXRlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN0YXRlID0geyBmcmFnOiBtYXRjaFsyXSwgZWxzZUlzVmFsaWQ6IGZhbHNlLCBleHByZXNzaW9uOiB0cnVlIH07XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiZW5kaWZcIjpcclxuICAgICAgICAgIGlmICghc3RhdGVTdGFjay5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiI2VuZGlmIG5vdCBwcmVjZWVkZWQgYnkgYW4gI2lmXCIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IGJyYW5jaFN0YXRlID1cclxuICAgICAgICAgICAgc3RhdGVTdGFjay5sZW5ndGggPT0gZGVwdGggPyBzdGF0ZVN0YWNrLnBvcCgpIDogc3RhdGU7XHJcbiAgICAgICAgICBzdGF0ZSA9IHN0YXRlU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICBkZXB0aC0tO1xyXG4gICAgICAgICAgaWYgKGJyYW5jaFN0YXRlLmV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgc3RhdGUuZnJhZyArPSBicmFuY2hTdGF0ZS5mcmFnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3RhdGUuZnJhZyArPSBtYXRjaFsyXTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAvLyBVbmtub3duIHByZXByb2Nlc3NvciBzeW1ib2wuIEVtaXQgaXQgYmFjayBpbnRvIHRoZSBvdXRwdXQgZnJhZyB1bmNoYW5nZWQuXHJcbiAgICAgICAgICBzdGF0ZS5mcmFnICs9IG1hdGNoWzBdO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZSBmcmFnIGRpZG4ndCBlbmQgb24gb25lIG9mIHRoZSBwcmVwcm9jZXNzb3Igc3ltYm9scyBhcHBlbmQgdGhlIHJlc3Qgb2YgaXQgaGVyZS5cclxuICAgIGlmIChsYXN0SW5kZXggIT0gZnJhZy5sZW5ndGgpIHtcclxuICAgICAgc3RhdGUuZnJhZyArPSBmcmFnLnN1YnN0cmluZyhsYXN0SW5kZXgsIGZyYWcubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB0aGUgbmV4dCB2YWx1ZSB3YXNuJ3QgY29uc3VtZWQgYnkgdGhlIHByZXByb2Nlc3NvciBzeW1ib2wsIGFwcGVuZCBpdCBoZXJlLlxyXG4gICAgaWYgKCF2YWx1ZUNvbnN1bWVkICYmIHZhbHVlcy5sZW5ndGggPiBpKSB7XHJcbiAgICAgIHN0YXRlLmZyYWcgKz0gdmFsdWVzW2ldO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHN0YXRlU3RhY2subGVuZ3RoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNtYXRjaGVkICNpZi8jZW5kaWYgY291bnRcIik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RhdGUuZnJhZztcclxufVxyXG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uLy4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpZ2h0KGRlZmluZXMpIHtcblx0cmV0dXJuIHdnc2xQYXJzZURlZmluZXNgIFxuICAgIHN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XG4gICAgICAgIGRpcmVjdERpZmZ1c2U6dmVjMzxmMzI+LFxuICAgICAgICBkaXJlY3RTcGVjdWxhcjp2ZWMzPGYzMj4sXG4gICAgICAgIGluZGlyZWN0RGlmZnVzZTp2ZWMzPGYzMj4sXG4gICAgICAgIGluZGlyZWN0U3BlY3VsYXI6dmVjMzxmMzI+LFxuICAgIH07IFxuICAgIHN0cnVjdCBJbmNpZGVudExpZ2h0IHtcbiAgICAgICAgY29sb3I6IHZlYzM8ZjMyPixcbiAgICAgICAgZGlyZWN0aW9uOiB2ZWMzPGYzMj4sXG4gICAgICAgIHZpc2libGU6IGJvb2wsXG4gICAgfTtcbiAgICBzdHJ1Y3QgR2VvbWV0cnkge1xuICAgICAgICBwb3NpdGlvbjogdmVjMzxmMzI+LFxuICAgICAgICBub3JtYWw6IHZlYzM8ZjMyPixcbiAgICAgICAgdmlld0RpcjogdmVjMzxmMzI+LFxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVR9XG4gICAgICAgICAgICB2ZWMzIGNsZWFyY29hdE5vcm1hbDtcbiAgICAgICAgI2VuZGlmXG4gICAgfTtcbiAgICAjaWYgJHtkZWZpbmVzLnNwb3RMaWdodHNDb3VudCA+IDB9XG4gICAgICAgIHN0cnVjdCBTcG90TGlnaHQge1xuICAgICAgICAgICAgcG9zaXRpb246IHZlYzM8ZjMyPixcbiAgICAgICAgICAgIGRpc3RhbmNlOiBmMzIsXG4gICAgICAgICAgICBkaXJlY3Rpb246IHZlYzM8ZjMyPixcbiAgICAgICAgICAgIGNvbmVDb3M6IGYzMixcbiAgICAgICAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXG4gICAgICAgICAgICBwZW51bWJyYUNvczogZjMyLFxuICAgICAgICAgICAgZGVjYXk6IGYzMixcbiAgICAgICAgfTtcbiAgICAgICAgZm4gZ2V0U3BvdExpZ2h0SW5mbyhzcG90TGlnaHQ6U3BvdExpZ2h0LHdvcmxkUG9zOnZlYzM8ZjMyPixzaGluaW5lc3M6ZjMyLE46dmVjMzxmMzI+LFY6dmVjMzxmMzI+KS0+UmVmbGVjdGVkTGlnaHR7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbjp2ZWMzPGYzMj4gPSBzcG90TGlnaHQucG9zaXRpb24gLSB3b3JsZFBvcztcbiAgICAgICAgICAgICAgICB2YXIgbGlnaHRDb2xvcjpSZWZsZWN0ZWRMaWdodDtcbiAgICAgICAgICAgICAgICBsZXQgbGlnaHREaXN0YW5jZTpmMzIgPSBsZW5ndGgoZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBub3JtYWxpemUoZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBsZXQgYW5nbGVDb3M6ZjMyID0gZG90KCBkaXJlY3Rpb24sIHNwb3RMaWdodC5kaXJlY3Rpb24gKTtcbiAgICAgICAgICAgICAgICBsZXQgZGVjYXk6ZjMyID0gY2xhbXAoMS4wIC0gcG93KGxpZ2h0RGlzdGFuY2Uvc3BvdExpZ2h0LmRpc3RhbmNlLCA0LjApLCAwLjAsIDEuMCk7XG4gICAgICAgICAgICAgICAgbGV0IHNwb3RFZmZlY3Q6ZjMyID0gc21vb3Roc3RlcCggc3BvdExpZ2h0LnBlbnVtYnJhQ29zLCBzcG90TGlnaHQuY29uZUNvcywgYW5nbGVDb3MgKTtcbiAgICAgICAgICAgICAgICBsZXQgZGVjYXlUb3RhbDpmMzIgPSBkZWNheSAqIHNwb3RFZmZlY3Q7XG4gICAgICAgICAgICAgICAgbGV0IGQ6ZjMyID0gbWF4KCBkb3QoIE4sIGRpcmVjdGlvbiApLCAwLjAgKSAgKiBkZWNheVRvdGFsO1xuICAgICAgICAgICAgICAgIGxpZ2h0Q29sb3IuZGlyZWN0RGlmZnVzZT0gc3BvdExpZ2h0LmNvbG9yICogZDtcbiAgICAgICAgICAgICAgICBsZXQgaGFsZkRpcjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIFYgKyBkaXJlY3Rpb24gKTtcbiAgICAgICAgICAgICAgICBsZXQgczpmMzIgPSBwb3coIGNsYW1wKCBkb3QoIE4sIGhhbGZEaXIgKSwgMC4wLCAxLjAgKSwgc2hpbmluZXNzICkgKiBkZWNheVRvdGFsO1xuICAgICAgICAgICAgICAgIGxpZ2h0Q29sb3IuZGlyZWN0U3BlY3VsYXI9IHNwb3RMaWdodC5jb2xvciAqIHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpZ2h0Q29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgZm4gZ2V0U3BvdExpZ2h0SW5jaWRlbnRMaWdodChzcG90TGlnaHQ6U3BvdExpZ2h0LCBnZW9tZXRyeTpHZW9tZXRyeSktPkluY2lkZW50TGlnaHQge1xuICAgICAgICAgICAgdmFyIGluY2lkZW50TGlnaHQ6SW5jaWRlbnRMaWdodDtcbiAgICAgICAgICAgIGxldCBsVmVjdG9yOnZlYzM8ZjMyPiA9IHNwb3RMaWdodC5wb3NpdGlvbiAtIGdlb21ldHJ5LnBvc2l0aW9uO1xuICAgICAgICAgICAgaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcbiAgICBcbiAgICAgICAgICAgIGxldCBsaWdodERpc3RhbmNlOmYzMiA9IGxlbmd0aCggbFZlY3RvciApO1xuICAgICAgICAgICAgbGV0IGFuZ2xlQ29zOmYzMiA9IGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIHNwb3RMaWdodC5kaXJlY3Rpb24gKTtcbiAgICBcbiAgICAgICAgICAgIGxldCBzcG90RWZmZWN0OmYzMiA9IHNtb290aHN0ZXAoIHNwb3RMaWdodC5wZW51bWJyYUNvcywgc3BvdExpZ2h0LmNvbmVDb3MsIGFuZ2xlQ29zICk7XG4gICAgICAgICAgICBsZXQgZGVjYXlFZmZlY3Q6ZjMyID0gY2xhbXAoMS4wIC0gcG93KGxpZ2h0RGlzdGFuY2Uvc3BvdExpZ2h0LmRpc3RhbmNlLCA0LjApLCAwLjAsIDEuMCk7XG4gICAgXG4gICAgICAgICAgICBpbmNpZGVudExpZ2h0LmNvbG9yPXNwb3RMaWdodC5jb2xvcipzcG90RWZmZWN0ICogZGVjYXlFZmZlY3Q7IFxuICAgICAgICAgICAgcmV0dXJuICBpbmNpZGVudExpZ2h0O1xuICAgICAgICB9XG5cbiAgICAjZW5kaWYgXG5cbiAgICAjaWYgJHtkZWZpbmVzLnBvaW50TGlnaHRzQ291bnQgPiAwfVxuICAgICAgICBzdHJ1Y3QgUG9pbnRMaWdodCB7XG4gICAgICAgICAgICBwb3NpdGlvbjogdmVjMzxmMzI+LFxuICAgICAgICAgICAgZGlzdGFuY2U6IGYzMixcbiAgICAgICAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXG4gICAgICAgICAgICBkZWNheTogZjMyLFxuICAgICAgICB9O1xuICAgICAgICBmbiBnZXRQb2ludExpZ2h0SW5mbyhwb2ludExpZ2h0OlBvaW50TGlnaHQsd29ybGRQb3M6dmVjMzxmMzI+LHNoaW5pbmVzczpmMzIsTjp2ZWMzPGYzMj4sVjp2ZWMzPGYzMj4pLT5SZWZsZWN0ZWRMaWdodHtcbiAgICAgICAgICAgIHZhciBsaWdodENvbG9yOlJlZmxlY3RlZExpZ2h0O1xuICAgICAgICAgICAgdmFyIGRpcmVjdGlvbjp2ZWMzPGYzMj4gPSB3b3JsZFBvcyAtIHBvaW50TGlnaHQucG9zaXRpb247XG4gICAgICAgICAgICBsZXQgZGlzdDpmMzIgPSBsZW5ndGgoIGRpcmVjdGlvbiApO1xuICAgICAgICAgICAgZGlyZWN0aW9uID0gbm9ybWFsaXplKGRpcmVjdGlvbik7XG4gICAgICAgICAgICBsZXQgZGVjYXkgPSBjbGFtcCgxLjAgLSBwb3coZGlzdCAvIHBvaW50TGlnaHQuZGlzdGFuY2UsIDQuMCksIDAuMCwgMS4wKTtcbiAgICBcbiAgICAgICAgICAgIGxldCBkID0gIG1heCggZG90KCBOLCAtZGlyZWN0aW9uICksIDAuMCApICogZGVjYXk7XG4gICAgICAgICAgICBsaWdodENvbG9yLmRpcmVjdERpZmZ1c2UgKz0gcG9pbnRMaWdodC5jb2xvciAqIGQ7XG4gICAgXG4gICAgICAgICAgICBsZXQgaGFsZkRpcjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIFYgLSBkaXJlY3Rpb24gKTtcbiAgICAgICAgICAgIGxldCBzOmYzMiA9IHBvdyggY2xhbXAoIGRvdCggTiwgaGFsZkRpciApLCAwLjAsIDEuMCApLCBzaGluaW5lc3MgKSAgKiBkZWNheTtcbiAgICAgICAgICAgIGxpZ2h0Q29sb3IuZGlyZWN0U3BlY3VsYXIgKz0gcG9pbnRMaWdodC5jb2xvciAqIHM7XG4gICAgICAgICAgICByZXR1cm4gbGlnaHRDb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBmbiBnZXRQb2ludExpZ2h0SW5jaWRlbnRMaWdodChwb2ludExpZ2h0OlBvaW50TGlnaHQsIGdlb21ldHJ5Okdlb21ldHJ5KS0+SW5jaWRlbnRMaWdodCB7XG4gICAgICAgICAgICB2YXIgaW5jaWRlbnRMaWdodDpJbmNpZGVudExpZ2h0O1xuICAgICAgICAgICAgbGV0IGxWZWN0b3I6dmVjMzxmMzI+ID0gcG9pbnRMaWdodC5wb3NpdGlvbi1nZW9tZXRyeS5wb3NpdGlvbjtcbiAgICAgICAgICAgIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcbiAgICAgICAgICAgIGxldCBsaWdodERpc3RhbmNlOmYzMiA9IGxlbmd0aCggbFZlY3RvciApO1xuICAgICAgICAgICAgLy8gbGV0IHdlaWdodDpmMzI9MS4wIC0gcG93KGxpZ2h0RGlzdGFuY2UvcG9pbnRMaWdodC5kaXN0YW5jZSwgNC4wKTtcbiAgICAgICAgICAgIGluY2lkZW50TGlnaHQuY29sb3I9cG9pbnRMaWdodC5jb2xvcipjbGFtcCgxLjAgLSBwb3cobGlnaHREaXN0YW5jZS9wb2ludExpZ2h0LmRpc3RhbmNlLCA0LjApLCAwLjAsIDEuMCk7XG4gICAgICAgICAgICByZXR1cm4gaW5jaWRlbnRMaWdodDtcbiAgICAgICAgfVxuICAgICNlbmRpZlxuICAgICNpZiAke2RlZmluZXMuZGlydGVjdExpZ2h0c0NvdW50ID4gMH1cbiAgICAgICAgc3RydWN0IERpcmVjdGlvbmFsTGlnaHQge1xuICAgICAgICAgICAgZGlyZWN0aW9uOiB2ZWMzPGYzMj4sXG4gICAgICAgICAgICBjb2xvcjogdmVjMzxmMzI+LFxuICAgICAgICB9O1xuICAgICAgICBmbiBnZXREaXJ0ZWN0TGlnaHRJbmZvKGRpcmVjdGlvbmFsTGlnaHQ6RGlyZWN0aW9uYWxMaWdodCxzaGluaW5lc3M6ZjMyLE46dmVjMzxmMzI+LFY6dmVjMzxmMzI+KS0+UmVmbGVjdGVkTGlnaHR7XG4gICAgICAgICAgICB2YXIgbGlnaHRDb2xvcjpSZWZsZWN0ZWRMaWdodDtcbiAgICAgICAgICAgIGxldCBkOmYzMiA9IG1heChkb3QoTiwgZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb24pLCAwLjApO1xuICAgICAgICAgICAgbGlnaHRDb2xvci5kaXJlY3REaWZmdXNlICs9IGRpcmVjdGlvbmFsTGlnaHQuY29sb3IgKiBkO1xuICAgIFxuICAgICAgICAgICAgbGV0IGhhbGZEaXI6dmVjMzxmMzI+ID0gbm9ybWFsaXplKCBWIC0gZGlyZWN0aW9uYWxMaWdodC5kaXJlY3Rpb24gKTtcbiAgICAgICAgICAgIGxldCBzOmYzMiA9IHBvdyggY2xhbXAoIGRvdCggTiwgaGFsZkRpciApLCAwLjAsIDEuMCApLCBzaGluaW5lc3MgKTtcbiAgICAgICAgICAgIGxpZ2h0Q29sb3IuZGlyZWN0U3BlY3VsYXIgKz0gZGlyZWN0aW9uYWxMaWdodC5jb2xvciAqIHM7XG4gICAgICAgICAgICByZXR1cm4gbGlnaHRDb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBmbiBnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SW5jaWRlbnRMaWdodChkaXJlY3Rpb25hbExpZ2h0OkRpcmVjdGlvbmFsTGlnaHQsZ2VvbWV0cnk6R2VvbWV0cnkpLT5JbmNpZGVudExpZ2h0IHtcbiAgICAgICAgICAgIHZhciBpbmNpZGVudExpZ2h0OkluY2lkZW50TGlnaHQ7XG4gICAgICAgICAgICBpbmNpZGVudExpZ2h0LmNvbG9yID0gZGlyZWN0aW9uYWxMaWdodC5jb2xvcjtcbiAgICAgICAgICAgIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKGRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBpbmNpZGVudExpZ2h0OyAgICAgICAgIFxuICAgICAgICB9XG4gICAgI2VuZGlmXG4gICAgI2lmICR7XG5cdFx0ZGVmaW5lcy5hbWJpZW50TGlnaHRDb3VudCB8fCBkZWZpbmVzLnNwb3RMaWdodHNDb3VudCB8fCBkZWZpbmVzLnBvaW50TGlnaHRzQ291bnQgfHwgZGVmaW5lcy5kaXJ0ZWN0TGlnaHRzQ291bnRcblx0fVxuICAgIHN0cnVjdCBMaWdodFVuaWZvcm1ze1xuICAgICAgICAjaWYgJHtkZWZpbmVzLmFtYmllbnRMaWdodENvdW50fVxuICAgICAgICAgICAgYW1iaWVudDp2ZWMzPGYzMj4sXG4gICAgICAgICNlbmRpZlxuICAgICAgICAjaWYgJHtkZWZpbmVzLnNwb3RMaWdodHNDb3VudH1cbiAgICAgICAgICAgIHNwb3RMaWdodHM6YXJyYXk8U3BvdExpZ2h0LCR7ZGVmaW5lcy5zcG90TGlnaHRzQ291bnR9PixcbiAgICAgICAgI2VuZGlmXG4gICAgICAgICNpZiAke2RlZmluZXMucG9pbnRMaWdodHNDb3VudH1cbiAgICAgICAgICAgIHBvaW50TGlnaHRzOmFycmF5PFBvaW50TGlnaHQsJHtkZWZpbmVzLnBvaW50TGlnaHRzQ291bnR9PixcbiAgICAgICAgI2VuZGlmXG4gICAgICAgICNpZiAke2RlZmluZXMuZGlydGVjdExpZ2h0c0NvdW50fVxuICAgICAgICAgICAgZGlydGVjdExpZ2h0czphcnJheTxEaXJlY3Rpb25hbExpZ2h0LCR7ZGVmaW5lcy5kaXJ0ZWN0TGlnaHRzQ291bnR9PixcbiAgICAgICAgI2VuZGlmXG4gICAgICAgIFxuICAgIH1cbiAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMCkgdmFyPHN0b3JhZ2UsIHJlYWQ+IGxpZ2h0VW5pZm9ybXM6IExpZ2h0VW5pZm9ybXM7XG4gICAgI2VuZGlmXG4gICAgI2lmICR7ZGVmaW5lcy5tYXRlcmlhbFBob25nfVxuICAgICAgICBmbiBwYXJzZUxpZ2h0cyhnZW9tZXRyeTpHZW9tZXRyeSxzaGluaW5lc3M6ZjMyKS0+UmVmbGVjdGVkTGlnaHQge1xuICAgICNlbGlmICR7ZGVmaW5lcy5tYXRlcmlhbFBicn1cbiAgICAgICAgZm4gcGFyc2VMaWdodHMoZ2VvbWV0cnk6R2VvbWV0cnksbWF0ZXJpYWw6UGh5c2ljYWxNYXRlcmlhbCktPlJlZmxlY3RlZExpZ2h0e1xuICAgICNlbmRpZlxuICAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ7XG4gICAgICAgICNpZiAke2RlZmluZXMuc3BvdExpZ2h0c0NvdW50ID4gMH1cbiAgICAgICAgICAgIC8v5aSE55CG6IGa5YWJ54GvXG4gICAgICAgICAgICB2YXIgc3BvdExpZ2h0OlNwb3RMaWdodDtcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwdTsgayA8ICR7ZGVmaW5lcy5zcG90TGlnaHRzQ291bnR9OyBrID0gayArIDF1KSB7XG4gICAgICAgICAgICAgICAgc3BvdExpZ2h0PSBsaWdodFVuaWZvcm1zLnNwb3RMaWdodHNba107XG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5tYXRlcmlhbFBob25nfVxuICAgICAgICAgICAgICAgICAgICBsZXQgc3BSZWZsZWN0ZWRMaWdodD1nZXRTcG90TGlnaHRJbmZvKHNwb3RMaWdodCxnZW9tZXRyeS5wb3NpdGlvbixzaGluaW5lc3MsZ2VvbWV0cnkubm9ybWFsLGdlb21ldHJ5LnZpZXdEaXIpO1xuICAgICAgICAgICAgICAgICNlbGlmICR7ZGVmaW5lcy5tYXRlcmlhbFBicn1cbiAgICAgICAgICAgICAgICAgICAgbGV0IGluY2lkZW50TGlnaHQ9Z2V0U3BvdExpZ2h0SW5jaWRlbnRMaWdodChzcG90TGlnaHQsZ2VvbWV0cnkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3BSZWZsZWN0ZWRMaWdodD1kaXJlY3RfUGh5c2ljYWwoaW5jaWRlbnRMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICAjZW5kaWZcbiAgICAgICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlKz1zcFJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2U7XG4gICAgICAgICAgICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIrPXNwUmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICNlbmRpZlxuICAgICAgICAjaWYgJHtkZWZpbmVzLnBvaW50TGlnaHRzQ291bnQgPiAwfVxuICAgICAgICAgICAgLy/lpITnkIbngrnlhYnmupBcbiAgICAgICAgICAgIHZhciBwb2ludExpZ2h0OlBvaW50TGlnaHQ7XG4gICAgICAgICAgICBmb3IgKHZhciBqPSAwdTsgaiA8ICR7ZGVmaW5lcy5wb2ludExpZ2h0c0NvdW50fTtqID0gaiArIDF1KSB7XG4gICAgICAgICAgICAgICAgcG9pbnRMaWdodCA9IGxpZ2h0VW5pZm9ybXMucG9pbnRMaWdodHNbal07XG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5tYXRlcmlhbFBob25nfVxuICAgICAgICAgICAgICAgICAgICBsZXQgcG9pUmVmbGVjdGVkTGlnaHQ9Z2V0UG9pbnRMaWdodEluZm8ocG9pbnRMaWdodCxnZW9tZXRyeS5wb3NpdGlvbixzaGluaW5lc3MsZ2VvbWV0cnkubm9ybWFsLGdlb21ldHJ5LnZpZXdEaXIpO1xuICAgICAgICAgICAgICAgICNlbGlmICR7ZGVmaW5lcy5tYXRlcmlhbFBicn1cbiAgICAgICAgICAgICAgICAgICBsZXQgaW5jaWRlbnRMaWdodD1nZXRQb2ludExpZ2h0SW5jaWRlbnRMaWdodChwb2ludExpZ2h0LGdlb21ldHJ5KTtcbiAgICAgICAgICAgICAgICAgICBsZXQgcG9pUmVmbGVjdGVkTGlnaHQ9ZGlyZWN0X1BoeXNpY2FsKGluY2lkZW50TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgICAgICAgICAgICAgI2VuZGlmXG4gICAgICAgICAgICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSs9cG9pUmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZTtcbiAgICAgICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhcis9cG9pUmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICNlbmRpZlxuICAgICAgICAjaWYgJHtkZWZpbmVzLmRpcnRlY3RMaWdodHNDb3VudCA+IDB9XG4gICAgICAgIC8v5aSE55CG5pa55ZCR5YWJXG4gICAgICAgIHZhciBkaXJlY3Rpb25hbExpZ2h0OkRpcmVjdGlvbmFsTGlnaHQ7XG4gICAgICAgIGZvciAodmFyIGk9IDB1OyBpIDwke2RlZmluZXMuZGlydGVjdExpZ2h0c0NvdW50fTsgaSA9IGkgKyAxdSkge1xuICAgICAgICAgICAgZGlyZWN0aW9uYWxMaWdodCA9IGxpZ2h0VW5pZm9ybXMuZGlydGVjdExpZ2h0c1tpXTtcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMubWF0ZXJpYWxQaG9uZ31cbiAgICAgICAgICAgICAgICBsZXQgZGlyUmVmbGVjdGVkTGlnaHQ9Z2V0RGlydGVjdExpZ2h0SW5mbyhkaXJlY3Rpb25hbExpZ2h0LHNoaW5pbmVzcyxnZW9tZXRyeS5ub3JtYWwsZ2VvbWV0cnkudmlld0Rpcik7XG4gICAgICAgICAgICAjZWxpZiAke2RlZmluZXMubWF0ZXJpYWxQYnJ9XG4gICAgICAgICAgICAgICAgbGV0IGluY2lkZW50TGlnaHQ9Z2V0RGlyZWN0aW9uYWxEaXJlY3RMaWdodEluY2lkZW50TGlnaHQoZGlyZWN0aW9uYWxMaWdodCxnZW9tZXRyeSk7XG4gICAgICAgICAgICAgICAgbGV0IGRpclJlZmxlY3RlZExpZ2h0PWRpcmVjdF9QaHlzaWNhbChpbmNpZGVudExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICAgICAgI2VuZGlmXG4gICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlKz1kaXJSZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlO1xuICAgICAgICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIrPWRpclJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyO1xuICAgICAgICB9XG4gICAgI2VuZGlmXG4gICAgICAgIHJldHVybiByZWZsZWN0ZWRMaWdodDtcbiAgICB9YDtcbn1cbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vLi4vV2dzbFByZXByb2Nlc3NvclwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlnaHRDb21tb24oZGVmaW5lcykge1xuXHRyZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2BcbiAgICBzdHJ1Y3QgUmVmbGVjdGVkTGlnaHQge1xuICAgICAgICBkaXJlY3REaWZmdXNlOnZlYzM8ZjMyPixcbiAgICAgICAgZGlyZWN0U3BlY3VsYXI6dmVjMzxmMzI+LFxuICAgICAgICBpbmRpcmVjdERpZmZ1c2U6dmVjMzxmMzI+LFxuICAgICAgICBpbmRpcmVjdFNwZWN1bGFyOnZlYzM8ZjMyPixcbiAgICB9O1xuICAgIHN0cnVjdCBHZW9tZXRyeSB7XG4gICAgICAgIHBvc2l0aW9uOiB2ZWMzPGYzMj4sXG4gICAgICAgIG5vcm1hbDogdmVjMzxmMzI+LFxuICAgICAgICB2aWV3RGlyOiB2ZWMzPGYzMj4sXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cbiAgICAgICAgICAgIHZlYzMgY2xlYXJjb2F0Tm9ybWFsO1xuICAgICAgICAjZW5kaWZcbiAgICB9O1xuICAgIGZuIGdldEFtYmllbnRMaWdodElycmFkaWFuY2UoYW1iaWVudExpZ2h0Q29sb3I6IHZlYzM8ZjMyPikgLT4gdmVjMzxmMzI+IHtcbiAgICAgICAgbGV0IGlycmFkaWFuY2UgPSBhbWJpZW50TGlnaHRDb2xvcjtcbiAgICAgICAgcmV0dXJuIGlycmFkaWFuY2U7XG4gICAgfVxuICAgIGZuIGdldERpc3RhbmNlQXR0ZW51YXRpb24obGlnaHREaXN0YW5jZTogZjMyLCBjdXRvZmZEaXN0YW5jZTogZjMyLCBkZWNheUV4cG9uZW50OiBmMzIpIC0+IGYzMiB7XG4gICAgICAgIGlmIChjdXRvZmZEaXN0YW5jZSA+IDAuMCAmJiBkZWNheUV4cG9uZW50ID4gMC4wKSB7XG4gICAgICAgICAgICBsZXQgeDpmMzIgPSBzYXR1cmF0ZSgtIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSArIDEuMCk7XG4gICAgICAgICAgICByZXR1cm4gcG93KHgsIGRlY2F5RXhwb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxLjA7XG4gICAgfVxuICAgIGZuIGdldFNwb3RBdHRlbnVhdGlvbihjb25lQ29zaW5lOiBmMzIsIHBlbnVtYnJhQ29zaW5lOiBmMzIsIGFuZ2xlQ29zaW5lOiBmMzIpIC0+IGYzMiB7XG4gICAgICAgIHJldHVybiBzbW9vdGhzdGVwKGNvbmVDb3NpbmUsIHBlbnVtYnJhQ29zaW5lLCBhbmdsZUNvc2luZSk7XG4gICAgfVxuICAgIGZuIHNoR2V0SXJyYWRpYW5jZUF0KCBub3JtYWw6dmVjMzxmMzI+LCBzaENvZWZmaWNpZW50czphcnJheTx2ZWMzPGYzMj4sOT4pLT52ZWMzPGYzMj4ge1xuICAgICAgICBsZXQgeDpmMzIgPSBub3JtYWwueDsgXG4gICAgICAgIGxldCB5OmYzMiA9IG5vcm1hbC55OyBcbiAgICAgICAgbGV0IHo6ZjMyID0gbm9ybWFsLno7XG4gICAgICAgIHZhciByZXN1bHQ6dmVjMzxmMzI+ID0gc2hDb2VmZmljaWVudHNbIDAgXSAqIDAuODg2MjI3O1xuICAgICAgICByZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDEgXSAqIDIuMCAqIDAuNTExNjY0ICogeTtcbiAgICAgICAgcmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAyIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHo7XG4gICAgICAgIHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMyBdICogMi4wICogMC41MTE2NjQgKiB4O1xuICAgICAgICByZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDQgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHk7XG4gICAgICAgIHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNSBdICogMi4wICogMC40MjkwNDMgKiB5ICogejtcbiAgICAgICAgcmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA2IF0gKiAoIDAuNzQzMTI1ICogeiAqIHogLSAwLjI0NzcwOCApO1xuICAgICAgICByZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDcgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHo7XG4gICAgICAgIHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgOCBdICogMC40MjkwNDMgKiAoIHggKiB4IC0geSAqIHkgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZm4gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggZGlyOnZlYzM8ZjMyPiwgbWF0cml4Om1hdDR4NDxmMzI+ICktPnZlYzM8ZjMyPiB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemUoICggdmVjNDxmMzI+KCBkaXIsIDAuMCApICogbWF0cml4ICkueHl6ICk7XG4gICAgfVxuICAgIGZuIGdldExpZ2h0UHJvYmVJcnJhZGlhbmNlKCBsaWdodFByb2JlOmFycmF5PHZlYzM8ZjMyPiw5Piwgbm9ybWFsOnZlYzM8ZjMyPix2aWV3TWF0cml4Om1hdDR4NDxmMzI+ICktPnZlYzM8ZjMyPiB7XG4gICAgICAgIGxldCB3b3JsZE5vcm1hbDp2ZWMzPGYzMj4gPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsdmlld01hdHJpeCApO1xuICAgICAgICBsZXQgaXJyYWRpYW5jZTp2ZWMzPGYzMj4gPSBzaEdldElycmFkaWFuY2VBdCggd29ybGROb3JtYWwsIGxpZ2h0UHJvYmUgKTtcbiAgICAgICAgcmV0dXJuIGlycmFkaWFuY2U7XG4gICAgfVxuIGA7XG59XG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uLy4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJyZGYoZGVmaW5lcykge1xuXHRyZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2BcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU0hFRU59XG4gICAgICAgICAgICAgICAgZm4gRF9DaGFybGllKCByb3VnaG5lc3M6ZjMyLGRvdE5IOmYzMiApLT5mMzIge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYWxwaGE6ZjMyID0gcG93Miggcm91Z2huZXNzICk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnZBbHBoYTpmMzIgPSAxLjAgLyBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvczJoOmYzMiA9IGRvdE5IICogZG90Tkg7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaW4yaDpmMzIgPSBtYXgoIDEuMCAtIGNvczJoLCAwLjAwNzgxMjUgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggMi4wICsgaW52QWxwaGEgKSAqIHBvdyggc2luMmgsIGludkFscGhhICogMC41ICkgLyAoIDIuMCAqIFBJICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZuIFZfTmV1YmVsdCggZG90TlY6ZjMyLCBkb3ROTDpmMzIgKS0+ZjMyIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNhdHVyYXRlKCAxLjAgLyAoIDQuMCAqICggZG90TkwgKyBkb3ROViAtIGRvdE5MICogZG90TlYgKSApICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZuIEJSREZfU2hlZW4obGlnaHREaXI6dmVjMzxmMzI+LCB2aWV3RGlyOnZlYzM8ZjMyPiwgbm9ybWFsOnZlYzM8ZjMyPixzaGVlbkNvbG9yOnZlYzM8ZjMyPixzaGVlblJvdWdobmVzczpmMzIgKS0+dmVjMzxmMzI+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhhbGZEaXI6dmVjMzxmMzI+ID0gbm9ybWFsaXplKCBsaWdodERpciArIHZpZXdEaXIgKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRvdE5MOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgbGlnaHREaXIgKSApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZG90TlY6ZjMyID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCB2aWV3RGlyICkgKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRvdE5IOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBEOmYzMiA9IERfQ2hhcmxpZSggc2hlZW5Sb3VnaG5lc3MsIGRvdE5IICk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBWOmYzMiA9IFZfTmV1YmVsdCggZG90TlYsIGRvdE5MICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGVlbkNvbG9yICogKCBEICogViApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgI2VuZGlmXG4gICAgICAgIGZuIEJSREZfTGFtYmVydChkaWZmdXNlQ29sb3I6dmVjMzxmMzI+KS0+dmVjMzxmMzI+IHtcblxuICAgICAgICAgICAgcmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBkaWZmdXNlQ29sb3I7XG5cbiAgICAgICAgfSAvLyB2YWxpZGF0ZWRcblxuICAgICAgICBmbiBGX1NjaGxpY2soIGYwOnZlYzM8ZjMyPiwgZjkwOmYzMiwgZG90Vkg6ZjMyICktPnZlYzM8ZjMyPiB7XG5cbiAgICAgICAgICAgIC8vIE9yaWdpbmFsIGFwcHJveGltYXRpb24gYnkgQ2hyaXN0b3BoZSBTY2hsaWNrICc5NFxuICAgICAgICAgICAgLy8gZmxvYXQgZnJlc25lbCA9IHBvdyggMS4wIC0gZG90VkgsIDUuMCApO1xuXG4gICAgICAgICAgICAvLyBPcHRpbWl6ZWQgdmFyaWFudCAocHJlc2VudGVkIGJ5IEVwaWMgYXQgU0lHR1JBUEggJzEzKVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9jZG4yLnVucmVhbGVuZ2luZS5jb20vUmVzb3VyY2VzL2ZpbGVzLzIwMTNTaWdncmFwaFByZXNlbnRhdGlvbnNOb3Rlcy0yNjkxNTczOC5wZGZcbiAgICAgICAgICAgIGxldCBmcmVzbmVsID0gZXhwMiggKCAtIDUuNTU0NzMgKiBkb3RWSCAtIDYuOTgzMTYgKSAqIGRvdFZIICk7XG5cbiAgICAgICAgICAgLy8gcmV0dXJuIGYwICogKCAxLjAgLSBmcmVzbmVsICkgKyAoIGY5MCAqIGZyZXNuZWwgKTtcbiAgICAgICAgICAgcmV0dXJuICggMS4wIC0gZjAgKSAqIGZyZXNuZWwgKyBmMDtcblxuICAgICAgICB9IC8vIHZhbGlkYXRlZFxuXG4gICAgICAgIGZuIFNjaGxpY2tfdG9fRjAoZjp2ZWMzPGYzMj4sIGY5MDpmMzIsIGRvdFZIOmYzMiApLT52ZWMzPGYzMj4ge1xuICAgICAgICAgICAgbGV0IHg6ZjMyID0gY2xhbXAoIDEuMCAtIGRvdFZILCAwLjAsIDEuMCApO1xuICAgICAgICAgICAgbGV0IHgyOmYzMiA9IHggKiB4O1xuICAgICAgICAgICAgbGV0IHg1OmYzMiA9IGNsYW1wKCB4ICogeDIgKiB4MiwgMC4wLCAwLjk5OTkgKTtcblxuICAgICAgICAgICAgcmV0dXJuICggZiAtIHZlYzMoIGY5MCApICogeDUgKSAvICggMS4wIC0geDUgKTtcbiAgICAgICAgfVxuICAgICAgICBmbiBWX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGFscGhhOmYzMiwgZG90Tkw6ZjMyLGRvdE5WOmYzMiApLT5mMzIge1xuXG4gICAgICAgICAgICBsZXQgYTIgOmYzMj0gcG93MiggYWxwaGEgKTtcblxuICAgICAgICAgICAgbGV0IGd2OmYzMiA9IGRvdE5MICogc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROViApICk7XG4gICAgICAgICAgICBsZXQgZ2w6ZjMyID0gZG90TlYgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcblxuICAgICAgICAgICAgcmV0dXJuIDAuNSAvIG1heCgoZ3YgKyBnbCksIDAuMDAwMDAwMDAxICk7XG5cbiAgICAgICAgfVxuICAgICAgICBmbiBEX0dHWCggYWxwaGE6ZjMyLCBkb3ROSDpmMzIgKS0+ZjMyIHtcblxuICAgICAgICAgICAgbGV0IGEyOmYzMiA9IHBvdzIoIGFscGhhICk7XG5cbiAgICAgICAgICAgIGxldCBkZW5vbTpmMzIgPSBwb3cyKCBkb3ROSCApICogKCBhMiAtIDEuMCApICsgMS4wOyAvLyBhdm9pZCBhbHBoYSA9IDAgd2l0aCBkb3ROSCA9IDFcblxuICAgICAgICAgICAgcmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBhMiAvIHBvdzIoIGRlbm9tICk7XG5cbiAgICAgICAgfVxuICAgICAgICBmbiBCUkRGX0dHWCggbGlnaHREaXI6dmVjMzxmMzI+LCB2aWV3RGlyOnZlYzM8ZjMyPiwgbm9ybWFsOnZlYzM8ZjMyPiwgZjA6dmVjMzxmMzI+LCBmOTA6ZjMyLCByb3VnaG5lc3M6ZjMyICktPnZlYzM8ZjMyPiB7XG5cbiAgICAgICAgICAgIGxldCBhbHBoYTpmMzIgPSBwb3cyKCByb3VnaG5lc3MgKTsgLy8gVUU0J3Mgcm91Z2huZXNzXG5cbiAgICAgICAgICAgIGxldCBoYWxmRGlyID0gbm9ybWFsaXplKCBsaWdodERpciArIHZpZXdEaXIgKTtcblxuICAgICAgICAgICAgbGV0IGRvdE5MOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgbGlnaHREaXIgKSApO1xuICAgICAgICAgICAgbGV0IGRvdE5WOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XG4gICAgICAgICAgICBsZXQgZG90Tkg6ZjMyID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcbiAgICAgICAgICAgIGxldCBkb3RWSDpmMzIgPSBzYXR1cmF0ZSggZG90KCBsaWdodERpciwgaGFsZkRpciApICk7XG5cbiAgICAgICAgICAgIGxldCBGID0gRl9TY2hsaWNrKCBmMCwgZjkwLCBkb3RWSCApO1xuXG4gICAgICAgICAgICBsZXQgViA9IFZfR0dYX1NtaXRoQ29ycmVsYXRlZCggYWxwaGEsIGRvdE5MLCBkb3ROViApO1xuXG4gICAgICAgICAgICBsZXQgRCA9IERfR0dYKCBhbHBoYSwgZG90TkggKTtcblxuICAgICAgICAgICAgcmV0dXJuIEYgKiAoIFYgKiBEICk7XG5cbiAgICAgICAgfVxuICAgICAgICBmbiBkaXJlY3RfUGh5c2ljYWwoIGRpcmVjdExpZ2h0OkluY2lkZW50TGlnaHQsIGdlb21ldHJ5Okdlb21ldHJ5LG1hdGVyaWFsOlBoeXNpY2FsTWF0ZXJpYWwpLT5SZWZsZWN0ZWRMaWdodCB7XG4gICAgICAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ7XG4gICAgICAgICAgICBsZXQgZG90Tkw6ZjMyID0gc2F0dXJhdGUoZG90KCBnZW9tZXRyeS5ub3JtYWwsZ2VvbWV0cnkudmlld0RpcikpO1xuICAgICAgICAgICAgbGV0IGlycmFkaWFuY2U6dmVjMzxmMzI+ID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvciozLjE0MTU5MjY7XG4gICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciA9IGlycmFkaWFuY2UgKiBCUkRGX0dHWCggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLCBtYXRlcmlhbC5yb3VnaG5lc3MgKTtcbiAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcbiAgICAgICAgICAgIHJldHVybiByZWZsZWN0ZWRMaWdodDtcbiAgICAgICAgfVxuICBgO1xufVxuIiwiaW1wb3J0IHsgd2dzbFBhcnNlRGVmaW5lcyB9IGZyb20gXCIuLi8uLi9XZ3NsUHJlcHJvY2Vzc29yXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYnJGdW5jdGlvbihkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIHdnc2xQYXJzZURlZmluZXNgXHJcblxyXG4gICAgI2lmICR7ZGVmaW5lcy5ESVRIRVJJTkd9XHJcbiAgICAgICAgZm4gZGl0aGVyaW5nKGNvbG9yOnZlYzM8ZjMyPiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICBsZXQgZ3JpZF9wb3NpdGlvbjpmMzIgPSByYW5kKCBnbF9GcmFnQ29vcmQueHkgKTtcclxuICAgICAgICAgICAgbGV0IGRpdGhlcl9zaGlmdF9SR0I6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCAwLjI1IC8gMjU1LjAsIC0wLjI1IC8gMjU1LjAsIDAuMjUgLyAyNTUuMCApO1xyXG4gICAgICAgICAgICBkaXRoZXJfc2hpZnRfUkdCID0gbWl4KCAyLjAgKiBkaXRoZXJfc2hpZnRfUkdCLCAtMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgZ3JpZF9wb3NpdGlvbiApO1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3IgKyBkaXRoZXJfc2hpZnRfUkdCO1xyXG4gICAgICAgIH1cclxuICAgICNlbmRpZlxyXG5cclxuICAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFfVxyXG4gICAgICAgIGZuIEJSREZfR0dYX0lyaWRlc2NlbmNlKCBsaWdodERpcjp2ZWMzPGYzMj4sIHZpZXdEaXI6dmVjMzxmMzI+LG5vcm1hbDp2ZWMzPGYzMj4sIGYwOnZlYzM8ZjMyPiwgZjkwOmYzMixpcmlkZXNjZW5jZTpmMzIsIGlyaWRlc2NlbmNlRnJlc25lbDp2ZWMzPGYzMj4scm91Z2huZXNzOmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICBsZXQgYWxwaGE6ZjMyID0gcG93Miggcm91Z2huZXNzICk7XHJcbiAgICAgICAgICAgIGxldCBoYWxmRGlyOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XHJcbiAgICAgICAgICAgIGxldCBkb3ROTDpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcclxuICAgICAgICAgICAgbGV0IGRvdE5WOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XHJcbiAgICAgICAgICAgIGxldCBkb3ROSDpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xyXG4gICAgICAgICAgICBsZXQgZG90Vkg6ZjMyID0gc2F0dXJhdGUoIGRvdCggdmlld0RpciwgaGFsZkRpciApICk7XHJcbiAgICAgICAgICAgIGxldCBGOnZlYzM8ZjMyPiA9IG1peCggRl9TY2hsaWNrKCBmMCwgZjkwLCBkb3RWSCApLCBpcmlkZXNjZW5jZUZyZXNuZWwsIGlyaWRlc2NlbmNlICk7XHJcbiAgICAgICAgICAgIGxldCBWOmYzMiA9IFZfR0dYX1NtaXRoQ29ycmVsYXRlZCggYWxwaGEsIGRvdE5MLCBkb3ROViApO1xyXG4gICAgICAgICAgICBsZXQgRDpmMzIgPSBEX0dHWCggYWxwaGEsIGRvdE5IICk7XHJcbiAgICAgICAgICAgIHJldHVybiBGICogKCBWICogRCApO1xyXG4gICAgICAgIH1cclxuICAgICNlbmRpZlxyXG5cclxuICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOfVxyXG4gICAgICAgIGZuIERfQ2hhcmxpZSggcm91Z2huZXNzOmYzMixkb3ROSDpmMzIgKS0+ZjMyIHtcclxuICAgICAgICAgICAgbGV0IGFscGhhOmYzMiA9IHBvdzIoIHJvdWdobmVzcyApO1xyXG4gICAgICAgICAgICBsZXQgaW52QWxwaGE6ZjMyID0gMS4wIC8gYWxwaGE7XHJcbiAgICAgICAgICAgIGxldCBjb3MyaDpmMzIgPSBkb3ROSCAqIGRvdE5IO1xyXG4gICAgICAgICAgICBsZXQgc2luMmg6ZjMyID0gbWF4KCAxLjAgLSBjb3MyaCwgMC4wMDc4MTI1ICk7XHJcbiAgICAgICAgICAgIHJldHVybiAoIDIuMCArIGludkFscGhhICkgKiBwb3coIHNpbjJoLCBpbnZBbHBoYSAqIDAuNSApIC8gKCAyLjAgKiBQSSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBWX05ldWJlbHQoIGRvdE5WOmYzMiwgZG90Tkw6ZjMyICktPmYzMiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzYXR1cmF0ZSggMS4wIC8gKCA0LjAgKiAoIGRvdE5MICsgZG90TlYgLSBkb3ROTCAqIGRvdE5WICkgKSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBCUkRGX1NoZWVuKGxpZ2h0RGlyOnZlYzM8ZjMyPiwgdmlld0Rpcjp2ZWMzPGYzMj4sIG5vcm1hbDp2ZWMzPGYzMj4sc2hlZW5Db2xvcjp2ZWMzPGYzMj4sc2hlZW5Sb3VnaG5lc3M6ZjMyICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgICAgIGxldCBoYWxmRGlyOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XHJcbiAgICAgICAgICAgIGxldCBkb3ROTDpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcclxuICAgICAgICAgICAgbGV0IGRvdE5WOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XHJcbiAgICAgICAgICAgIGxldCBkb3ROSDpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xyXG4gICAgICAgICAgICBsZXQgRDpmMzIgPSBEX0NoYXJsaWUoIHNoZWVuUm91Z2huZXNzLCBkb3ROSCApO1xyXG4gICAgICAgICAgICBsZXQgVjpmMzIgPSBWX05ldWJlbHQoIGRvdE5WLCBkb3ROTCApO1xyXG4gICAgICAgICAgICByZXR1cm4gc2hlZW5Db2xvciAqICggRCAqIFYgKTtcclxuICAgICAgICB9XHJcbiAgICAjZW5kaWZcclxuXHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9JUklERVNDRU5DRX1cclxuICAgICAgICBsZXQgWFlaX1RPX1JFQzcwOTogbWF0M3gzPGYzMj4gPSBtYXQzeDM8ZjMyPihcclxuICAgICAgICAzLjI0MDQ1NDIsIC0wLjk2OTI2NjAsIDAuMDU1NjQzNCwgLTEuNTM3MTM4NSwgMS44NzYwMTA4LCAtMC4yMDQwMjU5LCAtMC40OTg1MzE0LCAwLjA0MTU1NjAsIDEuMDU3MjI1MlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZm4gRnJlc25lbDBUb0lvciggZnJlc25lbDA6dmVjMzxmMzI+ICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgICAgIGxldCBzcXJ0RjA6dmVjMzxmMzI+ID0gc3FydCggZnJlc25lbDAgKTtcclxuICAgICAgICAgICAgcmV0dXJuICggdmVjMzxmMzI+KCAxLjAgKSArIHNxcnRGMCApIC8gKCB2ZWMzPGYzMj4oIDEuMCApIC0gc3FydEYwICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIElvclRvRnJlc25lbDAodHJhbnNtaXR0ZWRJb3I6dmVjMzxmMzI+LGluY2lkZW50SW9yOmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcG93MlZlY3RvciggKCB0cmFuc21pdHRlZElvciAtIHZlYzM8ZjMyPiggaW5jaWRlbnRJb3IgKSApIC8gKCB0cmFuc21pdHRlZElvciArIHZlYzM8ZjMyPiggaW5jaWRlbnRJb3IgKSApICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIElvclRvRnJlc25lbDAodHJhbnNtaXR0ZWRJb3I6ZjMyLCBpbmNpZGVudElvcjpmMzIgKS0+ZjMyIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBvdzJWZWN0b3IoICggdHJhbnNtaXR0ZWRJb3IgLSBpbmNpZGVudElvciApIC8gKCB0cmFuc21pdHRlZElvciArIGluY2lkZW50SW9yICkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBldmFsU2Vuc2l0aXZpdHkoT1BEOmYzMixzaGlmdDp2ZWMzPGYzMj4gKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICAgICAgbGV0IHBoYXNlOmYzMiA9IDIuMCAqIFBJICogT1BEICogMS4wZS05O1xyXG4gICAgICAgICAgICBsZXQgdmFsOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggNS40ODU2ZS0xMywgNC40MjAxZS0xMywgNS4yNDgxZS0xMyApO1xyXG4gICAgICAgICAgICBsZXQgcG9zOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggMS42ODEwZSswNiwgMS43OTUzZSswNiwgMi4yMDg0ZSswNiApO1xyXG4gICAgICAgICAgICBsZXQgdmFydDp2ZWMzPGYzMj4gPSB2ZWMzPGYzMj4oIDQuMzI3OGUrMDksIDkuMzA0NmUrMDksIDYuNjEyMWUrMDkgKTtcclxuICAgICAgICAgICAgbGV0IHh5ejp2ZWMzPGYzMj4gPSB2YWwgKiBzcXJ0KCAyLjAgKiBQSSAqIHZhcnQgKSAqIGNvcyggcG9zICogcGhhc2UgKyBzaGlmdCApICogZXhwKCAtIHBvdzIoIHBoYXNlICkgKiB2YXJ0ICk7XHJcbiAgICAgICAgICAgIHh5ei54ICs9IDkuNzQ3MGUtMTQgKiBzcXJ0KCAyLjAgKiBQSSAqIDQuNTI4MmUrMDkgKSAqIGNvcyggMi4yMzk5ZSswNiAqIHBoYXNlICsgc2hpZnRbIDAgXSApICogZXhwKCAtIDQuNTI4MmUrMDkgKiBwb3cyKCBwaGFzZSApICk7XHJcbiAgICAgICAgICAgIHh5eiAvPSAxLjA2ODVlLTc7XHJcbiAgICAgICAgICAgIGxldCByZ2I6dmVjMzxmMzI+ID0gWFlaX1RPX1JFQzcwOSAqIHh5ejtcclxuICAgICAgICAgICAgcmV0dXJuIHJnYjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4gZXZhbElyaWRlc2NlbmNlKG91dHNpZGVJT1I6ZjMyLCBldGEyOmYzMixjb3NUaGV0YTE6ZjMyLHRoaW5GaWxtVGhpY2tuZXNzOmYzMixiYXNlRjA6dmVjMzxmMzI+ICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgICAgIHZhciBJOnZlYzM8ZjMyPjtcclxuICAgICAgICAgICAgbGV0IGlyaWRlc2NlbmNlSU9SOmYzMiA9IG1peCggb3V0c2lkZUlPUiwgZXRhMiwgc21vb3Roc3RlcCggMC4wLCAwLjAzLCB0aGluRmlsbVRoaWNrbmVzcyApICk7XHJcbiAgICAgICAgICAgIGxldCBzaW5UaGV0YTJTcTpmMzIgPSBwb3cyKCBvdXRzaWRlSU9SIC8gaXJpZGVzY2VuY2VJT1IgKSAqICggMS4wIC0gcG93MiggY29zVGhldGExICkgKTtcclxuICAgICAgICAgICAgbGV0IGNvc1RoZXRhMlNxOmYzMiA9IDEuMCAtIHNpblRoZXRhMlNxO1xyXG4gICAgICAgICAgICBpZiAoIGNvc1RoZXRhMlNxIDwgMC4wICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlYzM8ZjMyPiggMS4wICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGNvc1RoZXRhMjpmMzIgPSBzcXJ0KCBjb3NUaGV0YTJTcSApO1xyXG4gICAgICAgICAgICBsZXQgUjA6ZjMyID0gSW9yVG9GcmVzbmVsMCggaXJpZGVzY2VuY2VJT1IsIG91dHNpZGVJT1IgKTtcclxuICAgICAgICAgICAgbGV0IFIxMjpmMzIgPSBGX1NjaGxpY2soIFIwLCAxLjAsIGNvc1RoZXRhMSApO1xyXG4gICAgICAgICAgICBsZXQgUjIxOmYzMiA9IFIxMjtcclxuICAgICAgICAgICAgbGV0IFQxMjE6ZjMyID0gMS4wIC0gUjEyO1xyXG4gICAgICAgICAgICBsZXQgcGhpMTI6ZjMyID0gMC4wO1xyXG4gICAgICAgICAgICBpZiAoIGlyaWRlc2NlbmNlSU9SIDwgb3V0c2lkZUlPUiApIHBoaTEyID0gUEk7XHJcbiAgICAgICAgICAgIGxldCBwaGkyMTpmMzIgPSBQSSAtIHBoaTEyO1xyXG4gICAgICAgICAgICBsZXQgYmFzZUlPUjp2ZWMzPGYzMj4gPSBGcmVzbmVsMFRvSW9yKCBjbGFtcCggYmFzZUYwLCAwLjAsIDAuOTk5OSApICk7XHJcbiAgICAgICAgICAgIGxldCBSMTp2ZWMzPGYzMj4gPSBJb3JUb0ZyZXNuZWwwKCBiYXNlSU9SLCBpcmlkZXNjZW5jZUlPUiApO1xyXG4gICAgICAgICAgICBsZXQgUjIzOnZlYzM8ZjMyPiA9IEZfU2NobGljayggUjEsIDEuMCwgY29zVGhldGEyICk7XHJcbiAgICAgICAgICAgIGxldCBwaGkyMzp2ZWMzPGYzMj4gPSB2ZWMzPGYzMj4oIDAuMCApO1xyXG4gICAgICAgICAgICBpZiAoIGJhc2VJT1JbIDAgXSA8IGlyaWRlc2NlbmNlSU9SICkgcGhpMjNbIDAgXSA9IFBJO1xyXG4gICAgICAgICAgICBpZiAoIGJhc2VJT1JbIDEgXSA8IGlyaWRlc2NlbmNlSU9SICkgcGhpMjNbIDEgXSA9IFBJO1xyXG4gICAgICAgICAgICBpZiAoIGJhc2VJT1JbIDIgXSA8IGlyaWRlc2NlbmNlSU9SICkgcGhpMjNbIDIgXSA9IFBJO1xyXG4gICAgICAgICAgICBsZXQgT1BEOmYzMiA9IDIuMCAqIGlyaWRlc2NlbmNlSU9SICogdGhpbkZpbG1UaGlja25lc3MgKiBjb3NUaGV0YTI7XHJcbiAgICAgICAgICAgIGxldCBwaGk6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCBwaGkyMSApICsgcGhpMjM7XHJcbiAgICAgICAgICAgIGxldCBSMTIzOnZlYzM8ZjMyPiA9IGNsYW1wKCBSMTIgKiBSMjMsIDFlLTUsIDAuOTk5OSApO1xyXG4gICAgICAgICAgICBsZXQgcjEyMzp2ZWMzPGYzMj4gPSBzcXJ0KCBSMTIzICk7XHJcbiAgICAgICAgICAgIGxldCBSczp2ZWMzPGYzMj4gPSBwb3cyKCBUMTIxICkgKiBSMjMgLyAoIHZlYzM8ZjMyPiggMS4wICkgLSBSMTIzICk7XHJcbiAgICAgICAgICAgIGxldCBDMDp2ZWMzPGYzMj4gPSBSMTIgKyBScztcclxuICAgICAgICAgICAgSSA9IEMwO1xyXG4gICAgICAgICAgICBsZXQgQ206dmVjMzxmMzI+ID0gUnMgLSBUMTIxO1xyXG4gICAgICAgICAgICBmb3IgKCBsZXQgbSA6IHUzMiA9IDE7bSA8PSAyOyArKyBtICkge1xyXG4gICAgICAgICAgICAgICAgQ20gKj0gcjEyMztcclxuICAgICAgICAgICAgICAgIFNtOnZlYzM8ZjMyPiA9IDIuMCAqIGV2YWxTZW5zaXRpdml0eSggZjMyKCBtICkgKiBPUEQsIGYzMiggbSApICogcGhpICk7XHJcbiAgICAgICAgICAgICAgICBJICs9IENtICogU207XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1heCggSSwgdmVjMzxmMzI+KCAwLjAgKSApO1xyXG4gICAgICAgIH1cclxuICAgICNlbmRpZlxyXG4gICAgY29uc3QgY2xlYXJjb2F0U3BlY3VsYXI6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCAwLjAgKTtcclxuICAgIGNvbnN0IHNoZWVuU3BlY3VsYXI6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCAwLjAgKTtcclxuXHJcbiAgICBmbiBJQkxTaGVlbkJSREYoIG5vcm1hbDp2ZWMzPGYzMj4sIHZpZXdEaXI6dmVjMzxmMzI+LCByb3VnaG5lc3M6ZjMyICktPmYzMiB7XHJcbiAgICAgICAgbGV0IGRvdE5WOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XHJcbiAgICAgICAgbGV0IHIyOmYzMiA9IHJvdWdobmVzcyAqIHJvdWdobmVzcztcclxuICAgICAgICBsZXQgYTpmMzIgPXNlbGVjdCgtOC40OCAqIHIyICsgMTQuMyAqIHJvdWdobmVzcyAtIDkuOTUsLTMzOS4yICogcjIgKyAxNjEuNCAqIHJvdWdobmVzcyAtIDI1Ljkscm91Z2huZXNzIDwgMC4yNSk7XHJcbiAgICAgICAgLy9sZXQgYTpmMzIgPSByb3VnaG5lc3MgPCAwLjI1ID8gLTMzOS4yICogcjIgKyAxNjEuNCAqIHJvdWdobmVzcyAtIDI1LjkgOiAtOC40OCAqIHIyICsgMTQuMyAqIHJvdWdobmVzcyAtIDkuOTU7XHJcbiAgICAgICAgbGV0IGI6ZjMyPXNlbGVjdCgxLjk3ICogcjIgLSAzLjI3ICogcm91Z2huZXNzICsgMC43Miw0NC4wICogcjIgLSAyMy43ICogcm91Z2huZXNzICsgMy4yNiwgcm91Z2huZXNzIDwgMC4yNSk7XHJcbiAgICAgICAgLy9sZXQgYjpmMzIgPSByb3VnaG5lc3MgPCAwLjI1ID8gNDQuMCAqIHIyIC0gMjMuNyAqIHJvdWdobmVzcyArIDMuMjYgOiAxLjk3ICogcjIgLSAzLjI3ICogcm91Z2huZXNzICsgMC43MjtcclxuICAgICAgICAvL2xldCBERzpmMzIgPSBleHAoIGEgKiBkb3ROViArIGIgKSArICggcm91Z2huZXNzIDwgMC4yNSA/IDAuMCA6IDAuMSAqICggcm91Z2huZXNzIC0gMC4yNSApICk7XHJcbiAgICAgICAgbGV0IERHOmYzMiA9IGV4cCggYSAqIGRvdE5WICsgYiApICsgc2VsZWN0KDAuMSAqICggcm91Z2huZXNzIC0gMC4yNSApLDAuMCxyb3VnaG5lc3MgPCAwLjI1KTtcclxuICAgICAgICByZXR1cm4gc2F0dXJhdGUoIERHICogUkVDSVBST0NBTF9QSSApO1xyXG4gICAgfVxyXG4gICAgZm4gREZHQXBwcm94KCBub3JtYWw6dmVjMzxmMzI+LCB2aWV3RGlyOnZlYzM8ZjMyPixyb3VnaG5lc3M6ZjMyICktPnZlYzI8ZjMyPiB7XHJcbiAgICAgICAgbGV0IGRvdE5WOmYzMiA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XHJcbiAgICAgICAgY29uc3QgYzA6dmVjNDxmMzI+ID0gdmVjNDxmMzI+KCAtIDEsIC0gMC4wMjc1LCAtIDAuNTcyLCAwLjAyMiApO1xyXG4gICAgICAgIGxldCBjMTp2ZWM0PGYzMj4gPSB2ZWM0PGYzMj4oIDEsIDAuMDQyNSwgMS4wNCwgLSAwLjA0ICk7XHJcbiAgICAgICAgbGV0IHI6dmVjNDxmMzI+ID0gcm91Z2huZXNzICogYzAgKyBjMTtcclxuICAgICAgICBsZXQgYTAwNDpmMzIgPSBtaW4oIHIueCAqIHIueCwgZXhwMiggLSA5LjI4ICogZG90TlYgKSApICogci54ICsgci55O1xyXG4gICAgICAgIGxldCBmYWI6dmVjMjxmMzI+ID0gdmVjMjxmMzI+KCAtIDEuMDQsIDEuMDQgKSAqIGEwMDQgKyByLnp3O1xyXG4gICAgICAgIHJldHVybiBmYWI7XHJcbiAgICB9XHJcbiAgICBmbiBFbnZpcm9ubWVudEJSREYoIG5vcm1hbDp2ZWMzPGYzMj4sdmlld0Rpcjp2ZWMzPGYzMj4sc3BlY3VsYXJDb2xvcjp2ZWMzPGYzMj4sIHNwZWN1bGFyRjkwOmYzMixyb3VnaG5lc3M6ZjMyICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgbGV0IGZhYjp2ZWMyPGYzMj4gPSBERkdBcHByb3goIG5vcm1hbCwgdmlld0Rpciwgcm91Z2huZXNzICk7XHJcbiAgICAgICAgcmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBmYWIueCArIHNwZWN1bGFyRjkwICogZmFiLnk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZuIGNvbXB1dGVTcGVjdWxhck9jY2x1c2lvbiggZG90TlY6ZjMyLCBhbWJpZW50T2NjbHVzaW9uOmYzMiwgcm91Z2huZXNzOmYzMiApLT5mMzIge1xyXG4gICAgICAgIHJldHVybiBzYXR1cmF0ZSggcG93KCBkb3ROViArIGFtYmllbnRPY2NsdXNpb24sIGV4cDIoIC0gMTYuMCAqIHJvdWdobmVzcyAtIDEuMCApICkgLSAxLjAgKyBhbWJpZW50T2NjbHVzaW9uICk7XHJcbiAgICB9XHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9UUkFOU01JU1NJT059XHJcblxyXG4gICAgZm4gZ2V0Vm9sdW1lVHJhbnNtaXNzaW9uUmF5KCBuOnZlYzM8ZjMyPiwgdjp2ZWMzPGYzMj4sIHRoaWNrbmVzczpmMzIsIGlvcjpmMzIsIG1vZGVsTWF0cml4Om1hdDR4NDpmMzIpLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgIHZhciByZWZyYWN0aW9uVmVjdG9yOnZlYzM8ZjMyPiA9IHJlZnJhY3QoIC0gdiwgbm9ybWFsaXplKCBuICksIDEuMCAvIGlvciApO1xyXG4gICAgICAgIHZhciBtb2RlbFNjYWxlOnZlYzM8ZjMyPjtcclxuICAgICAgICBtb2RlbFNjYWxlLnggPSBsZW5ndGgoIHZlYzM8ZjMyPiggbW9kZWxNYXRyaXhbMF0ueHl6ICkgKTtcclxuICAgICAgICBtb2RlbFNjYWxlLnkgPSBsZW5ndGgoIHZlYzM8ZjMyPiggbW9kZWxNYXRyaXhbMV0ueHl6ICkgKTtcclxuICAgICAgICBtb2RlbFNjYWxlLnogPSBsZW5ndGgoIHZlYzM8ZjMyPiggbW9kZWxNYXRyaXhbMl0ueHl6ICkgKTtcclxuICAgICAgICByZXR1cm4gbm9ybWFsaXplKCByZWZyYWN0aW9uVmVjdG9yICkgKiB0aGlja25lc3MgKiBtb2RlbFNjYWxlO1xyXG4gICAgfVxyXG4gICAgZm4gYXBwbHlJb3JUb1JvdWdobmVzcyhyb3VnaG5lc3M6ZjMyLCBpb3I6ZjMyICktPmYzMiB7XHJcbiAgICAgICAgcmV0dXJuIHJvdWdobmVzcyAqIGNsYW1wKCBpb3IgKiAyLjAgLSAyLjAsIDAuMCwgMS4wICk7XHJcbiAgICB9XHJcbiAgICBmbiBnZXRUcmFuc21pc3Npb25TYW1wbGUoIGZyYWdDb29yZDp2ZWMyPGYzMj4sIHJvdWdobmVzczpmMzIsaW9yOmYzMiApLT52ZWM0PGYzMj4ge1xyXG4gICAgICAgIGxldCBmcmFtZWJ1ZmZlckxvZDpmMzIgPSBsb2cyKCBtYXRlcmlhbFVuaWZvcm0udHJhbnNtaXNzaW9uU2FtcGxlclNpemUueCApICogYXBwbHlJb3JUb1JvdWdobmVzcyggcm91Z2huZXNzLCBpb3IgKTtcclxuICAgICAgICByZXR1cm4gdGV4dHVyZVNhbXBsZUxldmVsKHRyYW5zbWlzc2lvblNhbXBsZXJUZXh0dXJlLGJhc2VTYW1wbGVyLGZyYWdDb29yZC54eSwgZnJhbWVidWZmZXJMb2QpO1xyXG5cclxuICAgIH1cclxuICAgIGZuIGFwcGx5Vm9sdW1lQXR0ZW51YXRpb24oIHJhZGlhbmNlOnZlYzM8dmVjMz4sIHRyYW5zbWlzc2lvbkRpc3RhbmNlOmYzMixhdHRlbnVhdGlvbkNvbG9yOnZlYzM8ZjMyPixhdHRlbnVhdGlvbkRpc3RhbmNlOmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgIGlmICggaXNpbmYoIGF0dGVudWF0aW9uRGlzdGFuY2UgKSApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJhZGlhbmNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGF0dGVudWF0aW9uQ29lZmZpY2llbnQ6dmVjMzxmMzI+ID0gLWxvZyggYXR0ZW51YXRpb25Db2xvciApIC8gYXR0ZW51YXRpb25EaXN0YW5jZTtcclxuICAgICAgICAgICAgbGV0IHRyYW5zbWl0dGFuY2U6dmVjMzxmMzI+ID0gZXhwKCAtIGF0dGVudWF0aW9uQ29lZmZpY2llbnQgKiB0cmFuc21pc3Npb25EaXN0YW5jZSApO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNtaXR0YW5jZSAqIHJhZGlhbmNlO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgfVxyXG4gICAgZm4gZ2V0SUJMVm9sdW1lUmVmcmFjdGlvbiggbjp2ZWMzPGYzMj4sdjp2ZWMzPGYzMj4sIHJvdWdobmVzczpmMzIsIGRpZmZ1c2VDb2xvcjp2ZWMzPGYzMj4sc3BlY3VsYXJDb2xvcjp2ZWMzPGYzMj4sIHNwZWN1bGFyRjkwOmYzMixwb3NpdGlvbjp2ZWMzPGYzMj4sIG1vZGVsTWF0cml4Om1hdDR4NDxmMzI+LCB2aWV3TWF0cml4Om1hdDR4NDxmMzI+LHByb2pNYXRyaXg6bWF0NHg0PGYzMj4saW9yOmYzMiwgdGhpY2tuZXNzOmYzMixhdHRlbnVhdGlvbkNvbG9yOnZlYzM8ZjMyPixhdHRlbnVhdGlvbkRpc3RhbmNlOmYzMiApLT52ZWM0PGYzMj4ge1xyXG4gICAgICAgIGxldCB0cmFuc21pc3Npb25SYXk6dmVjMzxmMzI+ID0gZ2V0Vm9sdW1lVHJhbnNtaXNzaW9uUmF5KCBuLCB2LCB0aGlja25lc3MsIGlvciwgbW9kZWxNYXRyaXggKTtcclxuICAgICAgICBsZXQgcmVmcmFjdGVkUmF5RXhpdDp2ZWMzPGYzMj4gPSBwb3NpdGlvbiArIHRyYW5zbWlzc2lvblJheTtcclxuICAgICAgICBsZXQgbmRjUG9zOnZlYzQ8ZjMyPiA9IHByb2pNYXRyaXggKiB2aWV3TWF0cml4ICogdmVjNCggcmVmcmFjdGVkUmF5RXhpdCwgMS4wICk7XHJcbiAgICAgICAgbGV0IHJlZnJhY3Rpb25Db29yZHM6dmVjMjxmMzI+ID0gbmRjUG9zLnh5IC8gbmRjUG9zLnc7XHJcbiAgICAgICAgcmVmcmFjdGlvbkNvb3JkcyArPSAxLjA7XHJcbiAgICAgICAgcmVmcmFjdGlvbkNvb3JkcyAvPSAyLjA7XHJcbiAgICAgICAgbGV0IHRyYW5zbWl0dGVkTGlnaHQ6dmVjNDxmMzI+ID0gZ2V0VHJhbnNtaXNzaW9uU2FtcGxlKCByZWZyYWN0aW9uQ29vcmRzLCByb3VnaG5lc3MsIGlvciApO1xyXG4gICAgICAgIGxldCBhdHRlbnVhdGVkQ29sb3I6dmVjMzxmMzI+ID0gYXBwbHlWb2x1bWVBdHRlbnVhdGlvbiggdHJhbnNtaXR0ZWRMaWdodC5yZ2IsIGxlbmd0aCggdHJhbnNtaXNzaW9uUmF5ICksIGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgKTtcclxuICAgICAgICBsZXQgRjp2ZWMzPGYzMj4gPSBFbnZpcm9ubWVudEJSREYoIG4sIHYsIHNwZWN1bGFyQ29sb3IsIHNwZWN1bGFyRjkwLCByb3VnaG5lc3MgKTtcclxuICAgICAgICByZXR1cm4gdmVjNDxmMzI+KCAoIDEuMCAtIEYgKSAqIGF0dGVudWF0ZWRDb2xvciAqIGRpZmZ1c2VDb2xvciwgdHJhbnNtaXR0ZWRMaWdodC5hICk7XHJcbiAgICB9XHJcbiAgICAjZW5kaWZcclxuXHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9CVU1QVEVYVFVSRX1cclxuICAgICAgICBmbiBkSGR4eV9md2QoKS0+dmVjMjxmMzI+IHtcclxuICAgICAgICAgICAgbGV0IGRTVGR4OnZlYzI8ZjMyPiA9IGRwZHgoIHZVdiApO1xyXG4gICAgICAgICAgICBsZXQgZFNUZHk6dmVjMjxmMzI+ID0gZHBkeSggdlV2ICk7XHJcblxyXG4gICAgICAgICAgICBsZXQgSGxsOmYzMiA9IG1hdGVyaWFsVW5pZm9ybS5idW1wU2NhbGUgKiB0ZXh0dXJlU2FtcGxlKGJ1bXBUZXh0dXJlLCBiYXNlU2FtcGxlciwgdlV2KS54O1xyXG4gICAgICAgICAgICBsZXQgZEJ4OmYzMiA9IG1hdGVyaWFsVW5pZm9ybS5idW1wU2NhbGUgKiB0ZXh0dXJlU2FtcGxlKGJ1bXBUZXh0dXJlLCBiYXNlU2FtcGxlciwgdlV2ICsgZFNUZHgpLnggLSBIbGw7XHJcbiAgICAgICAgICAgIGxldCBkQnk6ZjMyID0gbWF0ZXJpYWxVbmlmb3JtLmJ1bXBTY2FsZSAqIHRleHR1cmVTYW1wbGUoYnVtcFRleHR1cmUsIGJhc2VTYW1wbGVyLCB2VXYgKyBkU1RkeSkueCAtIEhsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHZlYzI8ZjMyPiggZEJ4LCBkQnkgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4gcGVydHVyYk5vcm1hbEFyYiggc3VyZl9wb3M6dmVjMzxmMzI+LCBzdXJmX25vcm06dmVjMzxmMzI+LCBkSGR4eTp2ZWMyPGYzMj4sIGZhY2VEaXJlY3Rpb246ZjMyICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgICAgIGxldCB2U2lnbWFYOnZlYzM8ZjMyPiA9IGRwZHgoIHN1cmZfcG9zLnh5eiApO1xyXG4gICAgICAgICAgICBsZXQgdlNpZ21hWTp2ZWMzPGYzMj4gPSBkcGR5KCBzdXJmX3Bvcy54eXogKTtcclxuICAgICAgICAgICAgbGV0IHZOOnZlYzM8ZjMyPiA9IHN1cmZfbm9ybTtcclxuICAgICAgICAgICAgbGV0IFIxOnZlYzM8ZjMyPiA9IGNyb3NzKCB2U2lnbWFZLCB2TiApO1xyXG4gICAgICAgICAgICBsZXQgUjI6dmVjMzxmMzI+ID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XHJcbiAgICAgICAgICAgIGxldCBmRGV0OmYzMiA9IGRvdCggdlNpZ21hWCwgUjEgKSAqIGZhY2VEaXJlY3Rpb247XHJcbiAgICAgICAgICAgIGxldCB2R3JhZDp2ZWMzPGYzMj4gPSBzaWduKCBmRGV0ICkgKiAoIGRIZHh5LnggKiBSMSArIGRIZHh5LnkgKiBSMiApO1xyXG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplKCBhYnMoIGZEZXQgKSAqIHN1cmZfbm9ybSAtIHZHcmFkICk7XHJcbiAgICAgICAgfVxyXG4gICAgI2VuZGlmXHJcblxyXG4gICAgLy8hIGRlZmluZWQgKCBVU0VfVEFOR0VOVCApICYmICggZGVmaW5lZCAoIFRBTkdFTlRTUEFDRV9OT1JNQUxURVhUVVJFICkgfHwgZGVmaW5lZCAoIFVTRV9DTEVBUkNPQVRfTk9STUFMVEVYVFVSRSApIClcclxuICAgICNpZiAke1xyXG4gICAgICAoIWRlZmluZXMuVVNFX1RBTkdFTlQgJiYgZGVmaW5lcy5UQU5HRU5UU1BBQ0VfTk9STUFMVEVYVFVSRSkgfHxcclxuICAgICAgZGVmaW5lcy5VU0VfQ0xFQVJDT0FUX05PUk1BTFRFWFRVUkVcclxuICAgIH1cclxuICAgIGZuIHBlcnR1cmJOb3JtYWwyQXJiKCBleWVfcG9zOnZlYzM8ZjMyPiwgc3VyZl9ub3JtOnZlYzM8ZjMyPiwgdGV4dHVyZU46dmVjMzxmMzI+LCBmYWNlRGlyZWN0aW9uOmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgIGxldCBxMDp2ZWMzPGYzMj4gPSBkcGR4KCBleWVfcG9zLnh5eiApO1xyXG4gICAgICAgIGxldCBxMTp2ZWMzPGYzMj4gPSBkcGR5KCBleWVfcG9zLnh5eiApO1xyXG4gICAgICAgIGxldCBzdDA6dmVjMjxmMzI+ID0gZHBkeCggdlV2LnN0ICk7XHJcbiAgICAgICAgbGV0IHN0MTp2ZWMyPGYzMj4gPSBkcGR5KCB2VXYuc3QgKTtcclxuICAgICAgICBsZXQgTjp2ZWMzPGYzMj4gPSBzdXJmX25vcm07XHJcbiAgICAgICAgbGV0IHExcGVycDp2ZWMzPGYzMj4gPSBjcm9zcyggcTEsIE4gKTtcclxuICAgICAgICBsZXQgcTBwZXJwOnZlYzM8ZjMyPiA9IGNyb3NzKCBOLCBxMCApO1xyXG4gICAgICAgIGxldCBUOnZlYzM8ZjMyPiA9IHExcGVycCAqIHN0MC54ICsgcTBwZXJwICogc3QxLng7XHJcbiAgICAgICAgbGV0IEI6dmVjMzxmMzI+ID0gcTFwZXJwICogc3QwLnkgKyBxMHBlcnAgKiBzdDEueTtcclxuICAgICAgICBsZXQgZGV0OmYzMiA9IG1heCggZG90KCBULCBUICksIGRvdCggQiwgQiApICk7XHJcbiAgICAgICAgbGV0IHNjYWxlOmYzMiA9ICggZGV0ID09IDAuMCApID8gMC4wIDogZmFjZURpcmVjdGlvbiAqIGludmVyc2VzcXJ0KCBkZXQgKTtcclxuICAgICAgICByZXR1cm4gbm9ybWFsaXplKCBUICogKCB0ZXh0dXJlTi54ICogc2NhbGUgKSArIEIgKiAoIHRleHR1cmVOLnkgKiBzY2FsZSApICsgTiAqIHRleHR1cmVOLnogKTtcclxuICAgIH1cclxuICAgICNlbmRpZlxyXG4gICAgc3RydWN0IE11bHRpQW5kU2luZ2xlU2NhdHRlcntcclxuICAgICAgICBtdWx0aVNjYXR0ZXI6dmVjMzxmMzI+LFxyXG4gICAgICAgIHNpbmdsZVNjYXR0ZXI6dmVjMzxmMzI+XHJcbiAgICB9XHJcbiAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFfVxyXG4gICAvLy8vLy8vL2lub3V0IHZlYzMgc2luZ2xlU2NhdHRlciwgaW5vdXQgdmVjMyBtdWx0aVNjYXR0ZXJcclxuICAgICAgIGZuIGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmdJcmlkZXNjZW5jZSggbm9ybWFsOnZlYzM8ZjMyPiwgdmlld0Rpcjp2ZWMzPGYzMj4sIHNwZWN1bGFyQ29sb3I6dmVjMzxmMzI+LCBzcGVjdWxhckY5MDpmMzIsIGlyaWRlc2NlbmNlOmYzMixpcmlkZXNjZW5jZUYwOnZlYzM8ZjMyPiwgcm91Z2huZXNzOmYzMiApLT5NdWx0aUFuZFNpbmdsZVNjYXR0ZXIge1xyXG4gICAjZWxzZVxyXG4gICAvLy8vLy8vL2lub3V0IHZlYzMgc2luZ2xlU2NhdHRlciwgaW5vdXQgdmVjMyBtdWx0aVNjYXR0ZXJcclxuICAgICAgIGZuIGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmcoIG5vcm1hbDp2ZWMzPGYzMj4sdmlld0Rpcjp2ZWMzPGYzMj4sIHNwZWN1bGFyQ29sb3I6dmVjMzxmMzI+LCBzcGVjdWxhckY5MDpmMzIsIHJvdWdobmVzczpmMzIpLT5NdWx0aUFuZFNpbmdsZVNjYXR0ZXIge1xyXG4gICAjZW5kaWZcclxuICAgbGV0IGZhYjp2ZWMyPGYzMj4gPSBERkdBcHByb3goIG5vcm1hbCwgdmlld0Rpciwgcm91Z2huZXNzICk7XHJcblxyXG4gICB2YXIgbXVsdGlBbmRTaW5nbGVTY2F0dGVyOk11bHRpQW5kU2luZ2xlU2NhdHRlcjtcclxuXHJcbiAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFfVxyXG4gICAgICAgbGV0IEZyOnZlYzM8ZjMyPiA9IG1peCggc3BlY3VsYXJDb2xvciwgaXJpZGVzY2VuY2VGMCwgaXJpZGVzY2VuY2UgKTtcclxuICAgI2Vsc2VcclxuICAgICAgIGxldCBGcjp2ZWMzPGYzMj4gPSBzcGVjdWxhckNvbG9yO1xyXG4gICAjZW5kaWZcclxuICAgICAgIGxldCBGc3NFc3M6dmVjMzxmMzI+ID0gRnIgKiBmYWIueCArIHNwZWN1bGFyRjkwICogZmFiLnk7XHJcbiAgICAgICBsZXQgRXNzOmYzMiA9IGZhYi54ICsgZmFiLnk7XHJcbiAgICAgICBsZXQgRW1zOmYzMiA9IDEuMCAtIEVzcztcclxuICAgICAgIGxldCBGYXZnOnZlYzM8ZjMyPiA9IEZyICsgKCAxLjAgLSBGciApICogMC4wNDc2MTk7XHJcbiAgICAgICBsZXQgRm1zOnZlYzM8ZjMyPiA9IEZzc0VzcyAqIEZhdmcgLyAoIDEuMCAtIEVtcyAqIEZhdmcgKTtcclxuICAgIC8vICAgIHNpbmdsZVNjYXR0ZXIgKz0gRnNzRXNzO1xyXG4gICAgLy8gICAgbXVsdGlTY2F0dGVyICs9IEZtcyAqIEVtcztcclxuICAgICAgIG11bHRpQW5kU2luZ2xlU2NhdHRlci5tdWx0aVNjYXR0ZXI9Rm1zICogRW1zO1xyXG4gICAgICAgbXVsdGlBbmRTaW5nbGVTY2F0dGVyLnNpbmdsZVNjYXR0ZXI9RnNzRXNzO1xyXG4gICAgICAgcmV0dXJuIG11bHRpQW5kU2luZ2xlU2NhdHRlcjtcclxuICAgfVxyXG4gICAvL+ebtOaOpeWFieeFp1xyXG4gICBmbiBSRV9EaXJlY3RfUGh5c2ljYWwoIGRpcmVjdExpZ2h0OkluY2lkZW50TGlnaHQsIGdlb21ldHJ5Okdlb21ldHJpY0NvbnRleHQsICBtYXRlcmlhbDpQaHlzaWNhbE1hdGVyaWFsKS0+UmVmbGVjdGVkTGlnaHQge1xyXG4gICAgICAgdmFyIHJlZmxlY3RlZExpZ2h0OlJlZmxlY3RlZExpZ2h0O1xyXG4gICAgICAgbGV0IGRvdE5MOmYzMiA9IHNhdHVyYXRlKGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24pKTtcclxuICAgICAgIGxldCBpcnJhZGlhbmNlOnZlYzM8ZjMyPiA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XHJcbiAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVR9XHJcbiAgICAgICAgICAgbGV0IGRvdE5MY2M6ZjMyID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xyXG4gICAgICAgICAgIGxldCBjY0lycmFkaWFuY2U6dmVjMzxmMzI+ID0gZG90TkxjYyAqIGRpcmVjdExpZ2h0LmNvbG9yO1xyXG4gICAgICAgICAgIGNsZWFyY29hdFNwZWN1bGFyICs9IGNjSXJyYWRpYW5jZSAqIEJSREZfR0dYKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwuY2xlYXJjb2F0RjAsIG1hdGVyaWFsLmNsZWFyY29hdEY5MCwgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICk7XHJcbiAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTn1cclxuICAgICAgICAgICBzaGVlblNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX1NoZWVuKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc2hlZW5Db2xvciwgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKTtcclxuICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFfVxyXG4gICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyID0gaXJyYWRpYW5jZSAqIEJSREZfR0dYX0lyaWRlc2NlbmNlKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsIG1hdGVyaWFsLmlyaWRlc2NlbmNlLCBtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwsIG1hdGVyaWFsLnJvdWdobmVzcyApO1xyXG4gICAgICAgI2Vsc2VcclxuICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciA9IGlycmFkaWFuY2UgKiBCUkRGX0dHWCggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLCBtYXRlcmlhbC5yb3VnaG5lc3MgKTtcclxuICAgICAgICNlbmRpZlxyXG4gICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xyXG4gICAgICAgcmV0dXJuIHJlZmxlY3RlZExpZ2h0O1xyXG4gICB9XHJcbiAgIC8v6Ze05o6l5YWJ54WnXHJcbiAgIGZuIFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbCggaXJyYWRpYW5jZTp2ZWMzPGYzMj4sIGdlb21ldHJ5Okdlb21ldHJpY0NvbnRleHQsIG1hdGVyaWFsOlBoeXNpY2FsTWF0ZXJpYWwgKS0+UmVmbGVjdGVkTGlnaHQge1xyXG4gICAgICAgdmFyIHJlZmxlY3RlZExpZ2h0OlJlZmxlY3RlZExpZ2h0O1xyXG4gICAgICAgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlID0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XHJcbiAgICAgICByZXR1cm4gcmVmbGVjdGVkTGlnaHQ7XHJcbiAgIH1cclxuICAgLy/pl7TmjqXpq5jlhYlcclxuICAgZm4gUkVfSW5kaXJlY3RTcGVjdWxhcl9QaHlzaWNhbCggcmFkaWFuY2U6dmVjMzxmMzI+LCBpcnJhZGlhbmNlOnZlYzM8ZjMyPiwgY2xlYXJjb2F0UmFkaWFuY2U6dmVjMzxmMzI+LCBnZW9tZXRyeTpHZW9tZXRyaWNDb250ZXh0LCBtYXRlcmlhbDpQaHlzaWNhbE1hdGVyaWFsKS0+UmVmbGVjdGVkTGlnaHQge1xyXG4gICAgICAgdmFyIHJlZmxlY3RlZExpZ2h0OlJlZmxlY3RlZExpZ2h0O1xyXG4gICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUfVxyXG4gICAgICAgICAgIGNsZWFyY29hdFNwZWN1bGFyICs9IGNsZWFyY29hdFJhZGlhbmNlICogRW52aXJvbm1lbnRCUkRGKCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIsIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xyXG4gICAgICAgI2VuZGlmXHJcbiAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTn1cclxuICAgICAgICAgICBzaGVlblNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBtYXRlcmlhbC5zaGVlbkNvbG9yICogSUJMU2hlZW5CUkRGKCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIsIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzICk7XHJcbiAgICAgICAjZW5kaWZcclxuICAgICAgIHZhciBzaW5nbGVTY2F0dGVyaW5nOnZlYzM8ZjMyPjtcclxuICAgICAgIHZhciBtdWx0aVNjYXR0ZXJpbmc6dmVjMzxmMzI+O1xyXG4gICAgICAgbGV0IGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZTp2ZWMzPGYzMj4gPSBpcnJhZGlhbmNlICogUkVDSVBST0NBTF9QSTtcclxuICAgICAgIHZhciB0ZW1wTXVsdGlBbmRTaW5nbGVTY2F0dGVyOk11bHRpQW5kU2luZ2xlU2NhdHRlcjtcclxuICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFfVxyXG4gICAgICAgICAgICAgdGVtcE11bHRpQW5kU2luZ2xlU2NhdHRlcj1jb21wdXRlTXVsdGlzY2F0dGVyaW5nSXJpZGVzY2VuY2UoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsIG1hdGVyaWFsLmlyaWRlc2NlbmNlLCBtYXRlcmlhbC5pcmlkZXNjZW5jZUZyZXNuZWwsIG1hdGVyaWFsLnJvdWdobmVzcyApO1xyXG4gICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgdGVtcE11bHRpQW5kU2luZ2xlU2NhdHRlcj0gY29tcHV0ZU11bHRpc2NhdHRlcmluZyggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckY5MCwgbWF0ZXJpYWwucm91Z2huZXNzICk7XHJcbiAgICAgICAjZW5kaWZcclxuICAgICAgIHNpbmdsZVNjYXR0ZXJpbmc9dGVtcE11bHRpQW5kU2luZ2xlU2NhdHRlci5zaW5nbGVTY2F0dGVyOyBcclxuICAgICAgIG11bHRpU2NhdHRlcmluZz10ZW1wTXVsdGlBbmRTaW5nbGVTY2F0dGVyLm11bHRpU2NhdHRlcjtcclxuICAgICAgIGxldCB0b3RhbFNjYXR0ZXJpbmc6dmVjMzxmMzI+ID0gc2luZ2xlU2NhdHRlcmluZyArIG11bHRpU2NhdHRlcmluZztcclxuICAgICAgIGxldCBkaWZmdXNlOnZlYzM8ZjMyPiA9IG1hdGVyaWFsLmRpZmZ1c2VDb2xvciAqICggMS4wIC0gbWF4KCBtYXgoIHRvdGFsU2NhdHRlcmluZy5yLCB0b3RhbFNjYXR0ZXJpbmcuZyApLCB0b3RhbFNjYXR0ZXJpbmcuYiApICk7XHJcbiAgICAgICByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyID0gcmFkaWFuY2UgKiBzaW5nbGVTY2F0dGVyaW5nO1xyXG4gICAgICAgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciA9IG11bHRpU2NhdHRlcmluZyAqIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZTtcclxuICAgICAgIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSA9IGRpZmZ1c2UgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XHJcbiAgICAgICByZXR1cm4gcmVmbGVjdGVkTGlnaHQ7XHJcbiAgIH1cclxuICAgYDtcclxufVxyXG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uLy4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBiclN0cnVjdChkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIHdnc2xQYXJzZURlZmluZXNgXHJcbiAgICAgICAgc3RydWN0IE1hdGVyaWFsVW5pZm9ybXtcclxuXHJcbiAgICAgICAgICAgIG1vZGVsTWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgIFxyXG4gICAgICAgICAgICBkaWZmdXNlOnZlYzM8ZjMyPixcclxuICAgIFxyXG4gICAgICAgICAgICBvcGFjaXR5OmYzMixcclxuICAgIFxyXG4gICAgICAgICAgICBub3JtYWxNYXRyaXg6IG1hdDN4MzxmMzI+LFxyXG4gICAgXHJcbiAgICAgICAgICAgIGVtaXNzaXZlOnZlYzM8ZjMyPixcclxuICAgIFxyXG4gICAgICAgICAgICByb3VnaG5lc3M6ZjMyLFxyXG4gICAgXHJcbiAgICAgICAgICAgIG1ldGFsbmVzczpmMzIsXHJcbiAgICBcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5UT05FX01BUFBJTkd9XHJcbiAgICAgICAgICAgICAgICB0b25lTWFwcGluZ0V4cG9zdXJlOmYzMixcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuU1BFQ1VMQVJ9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICBzcGVjdWxhckNvbG9yOnZlYzM8ZjMyPixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgIHNwZWN1bGFySW50ZW5zaXR5OmYzMixcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTn1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgc2hlZW5Db2xvcjp2ZWMzPGYzMj4sXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHNoZWVuUm91Z2huZXNzOmYzMixcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UUkFOU01JU1NJT059XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGF0dGVudWF0aW9uQ29sb3I6dmVjMzxmMzI+LFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICB0cmFuc21pc3Npb246ZjMyLFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICB0cmFuc21pc3Npb25TYW1wbGVyU2l6ZTp2ZWMyPGYzMj4sXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHRoaWNrbmVzczpmMzIsXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGF0dGVudWF0aW9uRGlzdGFuY2U6ZjMyLFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU0tJTk5JTkd9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGJpbmRNYXRyaXg6bWF0NHg0PGYzMj4sXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGJpbmRNYXRyaXhJbnZlcnNlOm1hdDR4NDxmMzI+LFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBib25lVGV4dHVyZVNpemU6dTMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX05PUk1BTFRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICAgbm9ybWFsU2NhbGU6dmVjMjxmMzI+LFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLklPUn1cclxuICAgICAgICAgICAgICAgIGlvcjpmMzIsXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUX05PUk1BTFRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJjb2F0Tm9ybWFsU2NhbGU6dmVjMjxmMzI+LFxyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICBcclxuICAgICAgICAgICAgICAgICBjbGVhcmNvYXQ6ZjMyLFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgY2xlYXJjb2F0Um91Z2huZXNzOmYzMixcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICBcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0V9XHJcbiAgICAgICAgICAgICAgICBpcmlkZXNjZW5jZTpmMzIsXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlSU9SOmYzMixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtOmYzMixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaXJpZGVzY2VuY2VUaGlja25lc3NNYXhpbXVtOmYzMixcclxuICAgIFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0FPVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICBhb1RleHR1cmVJbnRlbnNpdHk6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0xJR0hUVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICBsaWdodFRleHR1cmVJbnRlbnNpdHk6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9FTlZURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgZW52VGV4dHVyZUludGVuc2l0eTpmMzIsXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGZsaXBFbnZUZXh0dXJlOmYzMixcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9CVU1QVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIGJ1bXBTY2FsZTpmMzI7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRElTUExBQ0VNRU5UVEVYVFVSRX1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgZGlzcGxhY2VtZW50U2NhbGU6ZjMyLFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBkaXNwbGFjZW1lbnRCaWFzOmYzMixcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NT1JQSFRBUkdFVFN9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTpmMzIsXHJcbiAgICBcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuTU9SUEhUQVJHRVRTX1RFWFRVUkV9IFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgbW9ycGhUYXJnZXRzVGV4dHVyZVNpemU6dmVjMjx1MzI+LFxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgTU9SUEhUQVJHRVRTX0NPVU5UOnUzMixcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIG1vcnBoVGFyZ2V0SW5mbHVlbmNlczphcnJheTxmMzI+LFxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICB9XHJcblxyXG4gICBgO1xyXG59XHJcbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGJyVGV4dHVyZShkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIHdnc2xQYXJzZURlZmluZXNgICAgICAgICBcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQlVNUFRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmJ1bXBUZXh0dXJlQmluZGluZ30pIHZhciBidW1wVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVFJBTlNNSVNTSU9OfVxyXG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVFJBTlNNSVNTSU9OVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnRyYW5zbWlzc2lvblRleHR1cmVCaW5kaW5nfSkgdmFyIHRyYW5zbWlzc2lvblRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEhJQ0tORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnRoaWNrbmVzc1RleHR1cmVCaW5kaW5nfSkgdmFyIHRoaWNrbmVzc1RleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy50cmFuc21pc3Npb25TYW1wbGVyVGV4dHVyZUJpbmRpbmd9KSB2YXIgdHJhbnNtaXNzaW9uU2FtcGxlclRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0VOVlRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmVudlRleHR1cmVCaW5kaW5nfSkgdmFyIGVudlRleHR1cmU6IHRleHR1cmVfY3ViZTxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMubm9ybWFsVGV4dHVyZUJpbmRpbmd9KSB2YXIgbm9ybWFsVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVFRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmNsZWFyY29hdFRleHR1cmVCaW5kaW5nfSkgdmFyIGNsZWFyY29hdFRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVRfUk9VR0hORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuY2xlYXJjb2F0UmNsZWFyY29hdFJvdWdobmVzc1RleHR1cmVCaW5kaW5nfSkgdmFyIGNsZWFyY29hdFJvdWdobmVzc1RleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVRfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuY2xlYXJjb2F0Tm9ybWFsVGV4dHVyZUJpbmRpbmd9KSB2YXIgY2xlYXJjb2F0Tm9ybWFsVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuaXJpZGVzY2VuY2VUZXh0dXJlQmluZGluZ30pIHZhciBpcmlkZXNjZW5jZVRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JUklERVNDRU5DRV9USElDS05FU1NURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5pcmlkZXNjZW5jZVRoaWNrbmVzc1RleHR1cmVCaW5kaW5nfSkgdmFyIGlyaWRlc2NlbmNlVGhpY2tuZXNzVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1JPVUdITkVTU1RFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnJvdWdobmVzc1RleHR1cmVCaW5kaW5nfSkgdmFyIHJvdWdobmVzc1RleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NRVRBTE5FU1NURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5tZXRhbG5lc3NUZXh0dXJlQmluZGluZ30pIHZhciBtZXRhbG5lc3NUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5TUEVDVUxBUn1cclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NQRUNVTEFSSU5URU5TSVRZVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnNwZWN1bGFySW50ZW5zaXR5VGV4dHVyZUJpbmRpbmd9KSB2YXIgc3BlY3VsYXJJbnRlbnNpdHlUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TUEVDVUxBUkNPTE9SVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnNwZWN1bGFyQ29sb3JUZXh0dXJlQmluZGluZ30pIHZhciBzcGVjdWxhckNvbG9yVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU0hFRU59XHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTkNPTE9SVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnNoZWVuQ29sb3JUZXh0dXJlQmluZGluZ30pIHZhciBzaGVlbkNvbG9yVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTlJPVUdITkVTU1RFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5zaGVlblJvdWdobmVzc1RleHR1cmVCaW5kaW5nfSkgdmFyIHNoZWVuUm91Z2huZXNzVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYmFzZVNhbXBsZXJCaW5kaW5nfSkgdmFyIGJhc2VTYW1wbGVyOiBzYW1wbGVyO1xyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5iYXNlVGV4dHVyZUJpbmRpbmd9KSB2YXIgYmFzZVRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9BTFBIQVRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmFscGhhVGV4dHVyZUJpbmRpbmd9KSB2YXIgYWxwaGFUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQU9URVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5hb1RleHR1cmVCaW5kaW5nfSkgdmFyIGFvVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9MSUdIVFRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmxpZ2h0VGV4dHVyZUJpbmRpbmd9KSB2YXIgbGlnaHRUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRU1JU1NJVkVURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5lbWlzc2l2ZVRleHR1cmVCaW5kaW5nfSkgdmFyIGVtaXNzaXZlVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICBgO1xyXG59XHJcbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGJyVXRpbHMoZGVmaW5lcykge1xyXG4gIHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxyXG4gICAgY29uc3QgUEk6ZjMyPSAzLjE0MTU5MjY1MzU4OTc5MztcclxuICAgIGNvbnN0IFBJMjpmMzI9IDYuMjgzMTg1MzA3MTc5NTg2O1xyXG4gICAgY29uc3QgUElfSEFMRjpmMzI9IDEuNTcwNzk2MzI2Nzk0ODk2NjtcclxuICAgIGNvbnN0IFJFQ0lQUk9DQUxfUEk6ZjMyPSAwLjMxODMwOTg4NjE4Mzc5MDc7XHJcbiAgICBjb25zdCBSRUNJUFJPQ0FMX1BJMjpmMzI9IDAuMTU5MTU0OTQzMDkxODk1MzU7XHJcbiAgICBjb25zdCBFUFNJTE9OOmYzMj0gMWUtNjtcclxuXHJcbiAgICBmbiBwb3cyKHg6ZjMyICktPmYzMiB7XHJcbiAgICAgICAgcmV0dXJuIHgqeDtcclxuICAgIH1cclxuICAgIGZuIHBvdzJWZWN0b3IoeDp2ZWMzPGYzMj4gKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICByZXR1cm4geCp4O1xyXG4gICAgfVxyXG4gICAgZm4gcG93MyggeDpmMzIgKS0+ZjMyIHtcclxuICAgICAgICByZXR1cm4geCp4Kng7XHJcbiAgICB9XHJcbiAgICBmbiBwb3c0KCB4OmYzMiApLT5mMzIge1xyXG4gICAgICAgIGxldCB4MjpmMzIgPSB4Kng7XHJcbiAgICAgICAgcmV0dXJuIHgyKngyO1xyXG4gICAgfVxyXG4gICAgZm4gbWF4Myggdjp2ZWMzPGYzMj4gKS0+ZjMyIHtcclxuICAgICAgICByZXR1cm4gbWF4KCBtYXgoIHYueCwgdi55ICksIHYueiApO1xyXG4gICAgfVxyXG4gICAgZm4gYXZlcmFnZSh2OnZlYzM8ZjMyPiApLT5mMzIge1xyXG4gICAgICAgIHJldHVybiBkb3QoIHYsIHZlYzM8ZjMyPiggMC4zMzMzMzMzICkgKTtcclxuICAgIH1cclxuICAgIGZuIHJhbmQoIHV2OnZlYzI8ZjMyPiApLT5mMzIge1xyXG4gICAgICAgIGxldCBhOmYzMiA9IDEyLjk4OTg7XHJcbiAgICAgICAgbGV0IGI6ZjMyID0gNzguMjMzO1xyXG4gICAgICAgIGxldCBjOmYzMiA9IDQzNzU4LjU0NTM7XHJcbiAgICAgICAgbGV0IGR0OmYzMiA9IGRvdCggdXYueHksIHZlYzI8ZjMyPiggYSwgYiApICk7XHJcbiAgICAgICAgbGV0IHNuOmYzMiA9IGR0ICUgUEk7XHJcbiAgICAgICAgcmV0dXJuIGZyYWN0KCBzaW4oIHNuICkgKiBjICk7XHJcbiAgICB9XHJcbiAgICBmbiB0cmFuc2Zvcm1EaXJlY3Rpb24oIGRpcjp2ZWMzPGYzMj4sIG1hdHJpeDptYXQ0eDQ8ZjMyPiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgIHJldHVybiBub3JtYWxpemUoICggbWF0cml4ICogdmVjNDxmMzI+KCBkaXIsIDAuMCApICkueHl6ICk7XHJcbiAgICB9XHJcblxyXG4gICAgZm4gdHJhbnNwb3NlTWF0MyggbTptYXQzeDM8ZjMyPiApLT5tYXQzeDM8ZjMyPiB7XHJcbiAgICAgICAgdmFyIHRtcDptYXQzeDM8ZjMyPjtcclxuICAgICAgICB0bXBbIDAgXSA9IHZlYzM8ZjMyPiggbVsgMCBdLngsIG1bIDEgXS54LCBtWyAyIF0ueCApO1xyXG4gICAgICAgIHRtcFsgMSBdID0gdmVjMzxmMzI+KCBtWyAwIF0ueSwgbVsgMSBdLnksIG1bIDIgXS55ICk7XHJcbiAgICAgICAgdG1wWyAyIF0gPSB2ZWMzPGYzMj4oIG1bIDAgXS56LCBtWyAxIF0ueiwgbVsgMiBdLnogKTtcclxuICAgICAgICByZXR1cm4gdG1wO1xyXG4gICAgfVxyXG4gICAgZm4gbHVtaW5hbmNlKCByZ2I6dmVjMzxmMzI+ICktPmYzMiB7XHJcbiAgICAgICAgbGV0IHdlaWdodHM6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KDAuMjEyNjcyOSwgMC43MTUxNTIyLCAwLjA3MjE3NTAgKTtcclxuICAgICAgICByZXR1cm4gZG90KCB3ZWlnaHRzLCByZ2IgKTtcclxuICAgIH1cclxuICAgIGZuIExpbmVhclRvbmVNYXBwaW5nKCBjb2xvcjp2ZWMzPGYzMj4sdG9uZU1hcHBpbmdFeHBvc3VyZTpmMzIgICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgcmV0dXJuIHRvbmVNYXBwaW5nRXhwb3N1cmUgKiBjb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBmbiBSZWluaGFyZFRvbmVNYXBwaW5nKCBjb2xvcjp2ZWMzPGYzMj4sdG9uZU1hcHBpbmdFeHBvc3VyZTpmMzIgKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICB2YXIgdGVtcENvbG9yOnZlYzM8ZjMyPjtcclxuICAgICAgICB0ZW1wQ29sb3I9Y29sb3I7XHJcbiAgICAgICAgdGVtcENvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XHJcbiAgICAgICAgcmV0dXJuIHNhdHVyYXRlKCB0ZW1wQ29sb3IgLyAoIHZlYzM8ZjMyPiggMS4wICkgKyB0ZW1wQ29sb3IgKSApO1xyXG4gICAgfVxyXG4gICAgZm4gQ3VzdG9tVG9uZU1hcHBpbmcoIGNvbG9yOnZlYzM8ZjMyPiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgIHJldHVybiBjb2xvcjtcclxuICAgIH1cclxuICAgIGZuIHRvbmVNYXBwaW5nKCBjb2xvcjp2ZWMzPGYzMj4sdG9uZU1hcHBpbmdFeHBvc3VyZTpmMzIgICktPnZlYzM8ZjMyPiB7XHJcbiAgICAgICAgcmV0dXJuIFJlaW5oYXJkVG9uZU1hcHBpbmcoIGNvbG9yLHRvbmVNYXBwaW5nRXhwb3N1cmUgKTtcclxuICAgIH1cclxuXHJcbiAgICBmbiBMaW5lYXJUb0xpbmVhciggdmFsdWU6dmVjNDxmMzI+ICktPnZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZm4gbGVzc1RoYW5FcXVhbChhOnZlYzM8ZjMyPixiOnZlYzM8ZjMyPiktPnZlYzM8ZjMyPntcclxuICAgICAgIGxldCB4VmFsdWU6ZjMyPXNlbGVjdChiLngsYS54LGEueDw9Yi54KTtcclxuICAgICAgIGxldCB5VmFsdWU6ZjMyPXNlbGVjdChiLnksYS55LGEueTw9Yi55KTtcclxuICAgICAgIGxldCB6VmFsdWU6ZjMyPXNlbGVjdChiLnosYS56LGEuejw9Yi56KTtcclxuICAgICAgIHJldHVybiB2ZWMzPGYzMj4oeFZhbHVlLHlWYWx1ZSx6VmFsdWUpOyAgICBcclxuICAgIH1cclxuICAgIGZuIExpbmVhclRvc1JHQiggdmFsdWU6dmVjNDxmMzI+ICktPnZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgcmV0dXJuIHZlYzQ8ZjMyPiggbWl4KCBwb3coIHZhbHVlLnJnYiwgdmVjMzxmMzI+KCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMzxmMzI+KCAwLjA1NSApLCB2YWx1ZS5yZ2IgKiAxMi45MiwgdmVjMzxmMzI+KCBsZXNzVGhhbkVxdWFsKCB2YWx1ZS5yZ2IsIHZlYzM8ZjMyPiggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLmEgKTtcclxuICAgIH1cclxuICAgIGZuIGxpbmVhclRvT3V0cHV0VGV4ZWwodmFsdWU6dmVjNDxmMzI+ICktPnZlYzQ8ZjMyPiB7XHJcbiAgICAgICAgcmV0dXJuIExpbmVhclRvc1JHQiggdmFsdWUgKTtcclxuICAgIH1cclxuICAgIGA7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGhvbmdGdW5jdGlvbihkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIGBcclxuICAgIGZuIEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKS0+ZjMyIHtcclxuXHJcbiAgICAgICAgLy8gZ2VvbWV0cnkgdGVybSBpcyAobiBkb3QgbCkobiBkb3QgdikgLyA0KG4gZG90IGwpKG4gZG90IHYpXHJcbiAgICAgICAgcmV0dXJuIDAuMjU7XHJcblxyXG4gICAgfVxyXG4gICAgZm4gRF9CbGlublBob25nKCBzaGluaW5lc3M6ZjMyLCBkb3ROSDpmMzIgKS0+ZjMyIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiAoIHNoaW5pbmVzcyAqIDAuNSArIDEuMCApICogcG93KGRvdE5ILCBzaGluaW5lc3MpO1xyXG5cclxuICAgIH1cclxuICAgIGZuIEJSREZfQmxpbm5QaG9uZyggbGlnaHREaXI6dmVjMzxmMzI+LCB2aWV3RGlyOnZlYzM8ZjMyPiwgbm9ybWFsOnZlYzM8ZjMyPiwgc3BlY3VsYXJDb2xvcjp2ZWMzPGYzMj4sIHNoaW5pbmVzczpmMzIgKS0+dmVjMzxmMzI+IHtcclxuXHJcbiAgICAgICAgbGV0ICBoYWxmRGlyID0gbm9ybWFsaXplKCBsaWdodERpciArIHZpZXdEaXIgKTtcclxuXHJcbiAgICAgICAgbGV0ICBkb3ROSDpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xyXG4gICAgICAgIGxldCBkb3RWSDpmMzIgPSBzYXR1cmF0ZSggZG90KCB2aWV3RGlyLCBoYWxmRGlyICkgKTtcclxuXHJcbiAgICAgICAgbGV0IEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIDEuMCwgZG90VkggKTtcclxuXHJcbiAgICAgICAgbGV0IEc6ZjMyID0gR19CbGlublBob25nX0ltcGxpY2l0KCApO1xyXG5cclxuICAgICAgICBsZXQgRCA9IERfQmxpbm5QaG9uZyggc2hpbmluZXNzLCBkb3ROSCApO1xyXG5cclxuICAgICAgICByZXR1cm4gRiAqICggRyAqIEQgKTtcclxuXHJcbiAgICB9IFxyXG4gICAgZm4gUkVfRGlyZWN0X0JsaW5uUGhvbmcoICBkaXJlY3RMaWdodDpJbmNpZGVudExpZ2h0LGdlb21ldHJ5Okdlb21ldHJpY0NvbnRleHQsIG1hdGVyaWFsOkJsaW5uUGhvbmdNYXRlcmlhbCApLT5SZWZsZWN0ZWRMaWdodHtcclxuICAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ6UmVmbGVjdGVkTGlnaHQ7IFxyXG4gICAgICAgIGxldCBkb3ROTDpmMzIgPSBzYXR1cmF0ZShkb3QoZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24pKTtcclxuICAgICAgICBsZXQgaXJyYWRpYW5jZTp2ZWMzPGYzMj4gPSBkb3ROTCpkaXJlY3RMaWdodC5jb2xvcjtcclxuXHJcbiAgICAgICAgcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZT0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XHJcblxyXG4gICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyPSBpcnJhZGlhbmNlICogQlJERl9CbGlublBob25nKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgKSAqIG1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIHJlZmxlY3RlZExpZ2h0O1xyXG4gICAgfVxyXG4gICAgZm4gUkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmcoIGlycmFkaWFuY2U6dmVjMzxmMzI+LCBnZW9tZXRyeTpHZW9tZXRyaWNDb250ZXh0LCBtYXRlcmlhbDpCbGlublBob25nTWF0ZXJpYWwpLT5SZWZsZWN0ZWRMaWdodCB7XHJcbiAgICAgICAgdmFyIHJlZmxlY3RlZExpZ2h0OlJlZmxlY3RlZExpZ2h0OyBcclxuICAgICAgICByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XHJcbiAgICAgICAgcmV0dXJuIHJlZmxlY3RlZExpZ2h0O1xyXG4gICAgfVxyXG4gICAgYDtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwaG9uZ1V0aWxzKGRlZmluZXMpIHtcclxuICByZXR1cm4gYFxyXG4gICBzdHJ1Y3QgQmxpbm5QaG9uZ01hdGVyaWFsIHtcclxuICAgICAgICBkaWZmdXNlQ29sb3I6dmVjMzxmMzI+LFxyXG4gICAgICAgIHNwZWN1bGFyQ29sb3I6dmVjMzxmMzI+LFxyXG4gICAgICAgIHNwZWN1bGFyU2hpbmluZXNzOmYzMixcclxuICAgICAgICBzcGVjdWxhclN0cmVuZ3RoOmYzMixcclxuICAgIH07XHJcbiAgICBjb25zdCBSRUNJUFJPQ0FMX1BJOmYzMj0gMC4zMTgzMDk4ODYxODM3OTA3O1xyXG4gICBmbiBwb3cyKCB4OmYzMiApLT5mMzIgeyByZXR1cm4geCp4OyB9XHJcbiAgIGZuIHBvdzMoIHg6ZjMyICktPmYzMiB7IHJldHVybiB4KngqeDsgfVxyXG4gICBmbiBwb3c0KHg6ZjMyICktPmYzMiB7IGxldCB4MiA9IHgqeDsgcmV0dXJuIHgyKngyOyB9XHJcbiAgIGZuIG1heDMoIHY6dmVjMzxmMzI+ICktPmYzMiB7IHJldHVybiBtYXgoIG1heCggdi54LCB2LnkgKSwgdi56ICk7IH1cclxuICAgZm4gYXZlcmFnZSh2OnZlYzM8ZjMyPiApLT5mMzIgeyBcclxuICAgICAgIGxldCByZXN1bHQ9dmVjMzxmMzI+KCAwLjMzMzMzMzMsICAwLjMzMzMzMzMsIDAuMzMzMzMzMyk7XHJcbiAgICAgICByZXR1cm4gZG90KCB2LHJlc3VsdCApOyBcclxuICAgfVxyXG4gICBgO1xyXG59XHJcbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vLi4vV2dzbFByZXByb2Nlc3NvclwiO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbnZpcm9ubWVudChkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIHdnc2xQYXJzZURlZmluZXNgXHJcbiAgICNpZiAke2RlZmluZXMuRU5WVEVYVFVSRV9UWVBFX0NVQkVfVVZ9XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX21pbk1pcExldmVsOmYzMj0gNC4wO1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl9taW5UaWxlU2l6ZTpmMzI9IDE2LjA7XHJcbiAgICAgICAgY29uc3QgQ1VCRVVWX01BWF9NSVA6ZjMyPTYuMDtcclxuICAgICAgICBjb25zdCBDVUJFVVZfVEVYRUxfV0lEVEg6ZjMyPTEuMC8yNTYuMDtcclxuICAgICAgICBjb25zdCBDVUJFVVZfVEVYRUxfSEVJR0hUOmYzMj0xLjAvMjU2LjA7XHJcbiAgICAgICAgZm4gZ2V0RmFjZShkaXJlY3Rpb246dmVjMzxmMzI+ICktPmYzMiB7XHJcbiAgICAgICAgICAgIGxldCBhYnNEaXJlY3Rpb246dmVjMzxmMzI+ID0gYWJzKCBkaXJlY3Rpb24gKTtcclxuICAgICAgICAgICAgdmFyIGZhY2U6ZjMyID0gLSAxLjA7XHJcbiAgICAgICAgICAgIGlmICggYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueiApIHtcclxuICAgICAgICAgICAgICAgIGlmICggYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueSApe1xyXG4gICAgICAgICAgICAgICAgICAgIGZhY2UgPXNlbGVjdCgzLjAsMC4wLGRpcmVjdGlvbi54ID4gMC4wKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGZhY2UgPXNlbGVjdCg0LjAsMS4wLGRpcmVjdGlvbi55ID4gMC4wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCBhYnNEaXJlY3Rpb24ueiA+IGFic0RpcmVjdGlvbi55ICl7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZSA9c2VsZWN0KDUuMCwyLjAsZGlyZWN0aW9uLnogPiAwLjApO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZSA9c2VsZWN0KDQuMCwxLjAsZGlyZWN0aW9uLnkgPiAwLjApO1xyXG4gICAgICAgICAgICAgICAgfSAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFjZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4gZ2V0VVYoIGRpcmVjdGlvbjp2ZWMzPGYzMj4sIGZhY2U6ZjMyICktPnZlYzI8ZjMyPiB7XHJcbiAgICAgICAgICAgIHZhciB1djp2ZWMyPGYzMj47XHJcbiAgICAgICAgICAgIGlmICggZmFjZSA9PSAwLjAgKSB7XHJcbiAgICAgICAgICAgICAgICB1diA9IHZlYzI8ZjMyPiggZGlyZWN0aW9uLnosIGRpcmVjdGlvbi55ICkgLyBhYnMoIGRpcmVjdGlvbi54ICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIGZhY2UgPT0gMS4wICkge1xyXG4gICAgICAgICAgICAgICAgdXYgPSB2ZWMyPGYzMj4oIC0gZGlyZWN0aW9uLngsIC0gZGlyZWN0aW9uLnogKSAvIGFicyggZGlyZWN0aW9uLnkgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICggZmFjZSA9PSAyLjAgKSB7XHJcbiAgICAgICAgICAgICAgICB1diA9IHZlYzI8ZjMyPiggLSBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnogKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICggZmFjZSA9PSAzLjAgKSB7XHJcbiAgICAgICAgICAgICAgICB1diA9IHZlYzI8ZjMyPiggLSBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnggKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICggZmFjZSA9PSA0LjAgKSB7XHJcbiAgICAgICAgICAgICAgICB1diA9IHZlYzI8ZjMyPiggLSBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnogKSAvIGFicyggZGlyZWN0aW9uLnkgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHV2ID0gdmVjMjxmMzI+KCBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnogKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gMC41ICogKCB1diArIDEuMCApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBiaWxpbmVhckN1YmVVVihlbnZUZXh0dXJlOnRleHR1cmVfY3ViZTxmMzI+LGJhc2VTYW1wbGVyOnNhbXBsZXIsZGlyZWN0aW9uOnZlYzM8ZjMyPiwgbWlwSW50OmYzMiApLT52ZWMzPGYzMj4ge1xyXG4gICAgICAgICAgICB2YXIgZmFjZTpmMzIgPSBnZXRGYWNlKCBkaXJlY3Rpb24gKTtcclxuICAgICAgICAgICAgbGV0IGZpbHRlckludDpmMzIgPSBtYXgoIGN1YmVVVl9taW5NaXBMZXZlbCAtIG1pcEludCwgMC4wICk7XHJcbiAgICAgICAgICAgIGxldCB0ZW1wTWlwSW50ID0gbWF4KCBtaXBJbnQsIGN1YmVVVl9taW5NaXBMZXZlbCApO1xyXG4gICAgICAgICAgICBsZXQgZmFjZVNpemU6ZjMyID0gZXhwMiggdGVtcE1pcEludCApO1xyXG4gICAgICAgICAgICB2YXIgdXY6dmVjMjxmMzI+ID0gZ2V0VVYoIGRpcmVjdGlvbiwgZmFjZSApICogKCBmYWNlU2l6ZSAtIDIuMCApICsgMS4wO1xyXG4gICAgICAgICAgICBpZiAoIGZhY2UgPiAyLjAgKSB7XHJcbiAgICAgICAgICAgICAgICB1di55ICs9IGZhY2VTaXplO1xyXG4gICAgICAgICAgICAgICAgZmFjZSAtPSAzLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdXYueCArPSBmYWNlICogZmFjZVNpemU7XHJcbiAgICAgICAgICAgIHV2LnggKz0gZmlsdGVySW50ICogMy4wICogY3ViZVVWX21pblRpbGVTaXplO1xyXG4gICAgICAgICAgICB1di55ICs9IDQuMCAqICggZXhwMiggQ1VCRVVWX01BWF9NSVAgKSAtIGZhY2VTaXplICk7XHJcbiAgICAgICAgICAgIHV2LnggKj0gQ1VCRVVWX1RFWEVMX1dJRFRIO1xyXG4gICAgICAgICAgICB1di55ICo9IENVQkVVVl9URVhFTF9IRUlHSFQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlU2FtcGxlKGVudlRleHR1cmUsYmFzZVNhbXBsZXIsZGlyZWN0aW9uKS5yZ2I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGN1YmVVVl9yMDpmMzI9IDEuMDtcclxuICAgICAgICBjb25zdCBjdWJlVVZfdjA6ZjMyPSAwLjMzOTtcclxuICAgICAgICBjb25zdCBjdWJlVVZfbTA6ZjMyPSAtIDIuMDtcclxuICAgICAgICBjb25zdCBjdWJlVVZfcjE6ZjMyPSAwLjg7XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX3YxOmYzMj0gMC4yNzY7XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX20xOmYzMj0gLSAxLjA7XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX3I0OmYzMj0gMC40O1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl92NDpmMzI9IDAuMDQ2O1xyXG4gICAgICAgIGNvbnN0IGN1YmVVVl9tNDpmMzI9IDIuMDtcclxuICAgICAgICBjb25zdCBjdWJlVVZfcjU6ZjMyPSAwLjMwNTtcclxuICAgICAgICBjb25zdCBjdWJlVVZfdjU6ZjMyPSAwLjAxNjtcclxuICAgICAgICBjb25zdCBjdWJlVVZfbTU6ZjMyPSAzLjA7XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX3I2OmYzMj0gMC4yMTtcclxuICAgICAgICBjb25zdCBjdWJlVVZfdjY6ZjMyPSAwLjAwMzg7XHJcbiAgICAgICAgY29uc3QgY3ViZVVWX202OmYzMj0gNC4wO1xyXG4gICAgICAgIGZuIHJvdWdobmVzc1RvTWlwKCByb3VnaG5lc3M6ZjMyKS0+ZjMyIHtcclxuICAgICAgICAgICAgdmFyIG1pcDpmMzIgPSAwLjA7XHJcbiAgICAgICAgICAgIGlmICggcm91Z2huZXNzID49IGN1YmVVVl9yMSApIHtcclxuICAgICAgICAgICAgICAgIG1pcCA9ICggY3ViZVVWX3IwIC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tMSAtIGN1YmVVVl9tMCApIC8gKCBjdWJlVVZfcjAgLSBjdWJlVVZfcjEgKSArIGN1YmVVVl9tMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICggcm91Z2huZXNzID49IGN1YmVVVl9yNCApIHtcclxuICAgICAgICAgICAgICAgIG1pcCA9ICggY3ViZVVWX3IxIC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNCAtIGN1YmVVVl9tMSApIC8gKCBjdWJlVVZfcjEgLSBjdWJlVVZfcjQgKSArIGN1YmVVVl9tMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICggcm91Z2huZXNzID49IGN1YmVVVl9yNSApIHtcclxuICAgICAgICAgICAgICAgIG1pcCA9ICggY3ViZVVWX3I0IC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNSAtIGN1YmVVVl9tNCApIC8gKCBjdWJlVVZfcjQgLSBjdWJlVVZfcjUgKSArIGN1YmVVVl9tNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICggcm91Z2huZXNzID49IGN1YmVVVl9yNiApIHtcclxuICAgICAgICAgICAgICAgIG1pcCA9ICggY3ViZVVWX3I1IC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNiAtIGN1YmVVVl9tNSApIC8gKCBjdWJlVVZfcjUgLSBjdWJlVVZfcjYgKSArIGN1YmVVVl9tNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1pcCA9IC0gMi4wICogbG9nMiggMS4xNiAqIHJvdWdobmVzcyApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBtaXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuIHRleHR1cmVDdWJlVVYoZW52VGV4dHVyZTp0ZXh0dXJlX2N1YmU8ZjMyPiwgYmFzZVNhbXBsZXI6c2FtcGxlcixzYW1wbGVEaXI6dmVjMzxmMzI+LHJvdWdobmVzczpmMzIgKS0+dmVjNDxmMzI+IHtcclxuICAgICAgICAgICAgbGV0IG1pcCA9IGNsYW1wKCByb3VnaG5lc3NUb01pcCggcm91Z2huZXNzICksIGN1YmVVVl9tMCwgQ1VCRVVWX01BWF9NSVAgKTtcclxuICAgICAgICAgICAgbGV0IG1pcEYgPSBmcmFjdCggbWlwICk7XHJcbiAgICAgICAgICAgIGxldCBtaXBJbnQgPSBmbG9vciggbWlwICk7XHJcbiAgICAgICAgICAgIGxldCBjb2xvcjA6dmVjMzxmMzI+ID0gYmlsaW5lYXJDdWJlVVYoIGVudlRleHR1cmUsYmFzZVNhbXBsZXIsc2FtcGxlRGlyLCBtaXBJbnQgKTtcclxuICAgICAgICAgICAgaWYgKCBtaXBGID09IDAuMCApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2ZWM0PGYzMj4oY29sb3IwLCAxLjAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb2xvcjE6dmVjMzxmMzI+ID0gYmlsaW5lYXJDdWJlVVYoIGVudlRleHR1cmUsYmFzZVNhbXBsZXIsIHNhbXBsZURpciwgbWlwSW50ICsgMS4wICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmVjNDxmMzI+KG1peCggY29sb3IwLCBjb2xvcjEsIG1pcEYgKSwgMS4wICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICNlbmRpZlxyXG4gICAjaWYgJHtkZWZpbmVzLlVTRV9FTlZURVhUVVJFfVxyXG4gICAgICAgIGZuIGdldElCTElycmFkaWFuY2UoIG5vcm1hbDp2ZWMzPGYzMj4sYmFzZVNhbXBsZXI6c2FtcGxlcix2aWV3TWF0cml4Om1hdDR4NDxmMzI+KS0+dmVjMzxmMzI+IHtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5FTlZURVhUVVJFX1RZUEVfQ1VCRV9VVn1cclxuICAgICAgICAgICAgICAgIGxldCB3b3JsZE5vcm1hbDp2ZWMzPGYzMj4gPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcclxuICAgICAgICAgICAgICAgIGxldCBlbnZUZXh0dXJlQ29sb3I6dmVjNDxmMzI+ID0gdGV4dHVyZUN1YmVVViggZW52VGV4dHVyZSxiYXNlU2FtcGxlciwgd29ybGROb3JtYWwsIDEuMCApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFBJICogZW52VGV4dHVyZUNvbG9yLnJnYiAqIG1hdGVyaWFsVW5pZm9ybS5lbnZUZXh0dXJlSW50ZW5zaXR5O1xyXG4gICAgICAgICAgICAjZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlYzM8ZjMyPiggMC4wICk7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgIH1cclxuICAgICAgICBmbiBnZXRJQkxSYWRpYW5jZSggdmlld0Rpcjp2ZWMzPGYzMj4sYmFzZVNhbXBsZXI6c2FtcGxlcix2aWV3TWF0cml4Om1hdDR4NDxmMzI+LG5vcm1hbDp2ZWMzPGYzMj4sIHJvdWdobmVzczpmMzIgKS0+dmVjMzxmMzI+IHtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5FTlZURVhUVVJFX1RZUEVfQ1VCRV9VVn1cclxuICAgICAgICAgICAgICAgIHZhciByZWZsZWN0VmVjOnZlYzM8ZjMyPiA9IHJlZmxlY3QoIC0gdmlld0Rpciwgbm9ybWFsICk7XHJcbiAgICAgICAgICAgICAgICByZWZsZWN0VmVjID0gbm9ybWFsaXplKCBtaXgoIHJlZmxlY3RWZWMsIG5vcm1hbCwgcm91Z2huZXNzICogcm91Z2huZXNzKSApO1xyXG4gICAgICAgICAgICAgICAgcmVmbGVjdFZlYyA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHJlZmxlY3RWZWMsIHZpZXdNYXRyaXggKTtcclxuICAgICAgICAgICAgICAgIGxldCBlbnZUZXh0dXJlQ29sb3I6dmVjNDxmMzI+ID0gdGV4dHVyZUN1YmVVViggZW52VGV4dHVyZSxiYXNlU2FtcGxlciwgcmVmbGVjdFZlYywgcm91Z2huZXNzICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZW52VGV4dHVyZUNvbG9yLnJnYiAqIG1hdGVyaWFsVW5pZm9ybS5lbnZUZXh0dXJlSW50ZW5zaXR5O1xyXG4gICAgICAgICAgICAjZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlYzM8ZjMyPiggMC4wICk7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICB9XHJcbiAgICAjZW5kaWZcclxuICAgYDtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBibGlubl9waG9uZyhkZWZpbmVzKSB7XG5cdHJldHVybiBgXG4gICAgICAgZm4gZ2V0UG9pbnRMaWdodEluZm8ocG9pbnRMaWdodDpQb2ludExpZ2h0LHdvcmxkUG9zOnZlYzM8ZjMyPixzaGluaW5lc3M6ZjMyLE46dmVjMzxmMzI+LFY6dmVjMzxmMzI+KS0+dmVjMzxmMzI+e1xuICAgICAgICB2YXIgY29sb3I9dmVjMzxmMzI+KDAuMCwwLjAsMC4wKTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbjp2ZWMzPGYzMj4gPSB3b3JsZFBvcyAtIHBvaW50TGlnaHQucG9zaXRpb247XG4gICAgICAgIGxldCBkaXN0OmYzMiA9IGxlbmd0aCggZGlyZWN0aW9uICk7XG4gICAgICAgIGRpcmVjdGlvbiA9IG5vcm1hbGl6ZShkaXJlY3Rpb24pO1xuICAgICAgICBsZXQgZGVjYXkgPSBjbGFtcCgxLjAgLSBwb3coZGlzdCAvIHBvaW50TGlnaHQuZGlzdGFuY2UsIDQuMCksIDAuMCwgMS4wKTtcblxuICAgICAgICBsZXQgZCA9ICBtYXgoIGRvdCggTiwgLWRpcmVjdGlvbiApLCAwLjAgKSAqIGRlY2F5O1xuICAgICAgICBjb2xvciArPSBwb2ludExpZ2h0LmNvbG9yICogZDtcblxuICAgICAgICBsZXQgaGFsZkRpcjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIFYgLSBkaXJlY3Rpb24gKTtcbiAgICAgICAgbGV0IHM6ZjMyID0gcG93KCBjbGFtcCggZG90KCBOLCBoYWxmRGlyICksIDAuMCwgMS4wICksIHNoaW5pbmVzcyApICAqIGRlY2F5O1xuICAgICAgICBjb2xvciArPSBwb2ludExpZ2h0LmNvbG9yICogcztcbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgICAgIH1cbiAgICAgICBmbiBnZXRTcG90TGlnaHRJbmZvKHNwb3RMaWdodDpTcG90TGlnaHQsd29ybGRQb3M6dmVjMzxmMzI+LHNoaW5pbmVzczpmMzIsTjp2ZWMzPGYzMj4sVjp2ZWMzPGYzMj4pLT52ZWMzPGYzMj57XG4gICAgICAgIHZhciBjb2xvcj12ZWMzPGYzMj4oMC4wLDAuMCwwLjApO1xuICAgICAgICAgICAgdmFyIGRpcmVjdGlvbjp2ZWMzPGYzMj4gPSBzcG90TGlnaHQucG9zaXRpb24gLSB3b3JsZFBvcztcbiAgICAgICAgICAgIGxldCBsaWdodERpc3RhbmNlOmYzMiA9IGxlbmd0aChkaXJlY3Rpb24pO1xuICAgICAgICAgICAgZGlyZWN0aW9uID0gbm9ybWFsaXplKGRpcmVjdGlvbik7XG4gICAgICAgICAgICBsZXQgYW5nbGVDb3M6ZjMyID0gZG90KCBkaXJlY3Rpb24sIC1zcG90TGlnaHQuZGlyZWN0aW9uICk7XG4gICAgICAgICAgICBsZXQgZGVjYXk6ZjMyID0gY2xhbXAoMS4wIC0gcG93KGxpZ2h0RGlzdGFuY2Uvc3BvdExpZ2h0LmRpc3RhbmNlLCA0LjApLCAwLjAsIDEuMCk7XG4gICAgICAgICAgICBsZXQgc3BvdEVmZmVjdDpmMzIgPSBzbW9vdGhzdGVwKCBzcG90TGlnaHQucGVudW1icmFDb3MsIHNwb3RMaWdodC5jb25lQ29zLCBhbmdsZUNvcyApO1xuICAgICAgICAgICAgbGV0IGRlY2F5VG90YWw6ZjMyID0gZGVjYXkgKiBzcG90RWZmZWN0O1xuICAgICAgICAgICAgbGV0IGQ6ZjMyID0gbWF4KCBkb3QoIE4sIGRpcmVjdGlvbiApLCAwLjAgKSAgKiBkZWNheVRvdGFsO1xuICAgICAgICAgICAgY29sb3IgKz0gc3BvdExpZ2h0LmNvbG9yICogZDtcbiAgICAgICAgICAgIGxldCBoYWxmRGlyOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggViArIGRpcmVjdGlvbiApO1xuICAgICAgICAgICAgbGV0IHM6ZjMyID0gcG93KCBjbGFtcCggZG90KCBOLCBoYWxmRGlyICksIDAuMCwgMS4wICksIHNoaW5pbmVzcyApICogZGVjYXlUb3RhbDtcbiAgICAgICAgICAgIGNvbG9yICs9IHNwb3RMaWdodC5jb2xvciAqIHM7XG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgfVxuICAgIHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0IHtcbiAgICAgICAgZGlyZWN0aW9uOiB2ZWMzPGYzMj4sXG4gICAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXG4gICAgfTtcbiAgICAgIGZuIGdldERpcnRlY3RMaWdodEluZm8oZGlyZWN0aW9uYWxMaWdodDpEaXJlY3Rpb25hbExpZ2h0LHNoaW5pbmVzczpmMzIsTjp2ZWMzPGYzMj4sVjp2ZWMzPGYzMj4pLT52ZWMzPGYzMj57XG4gICAgICAgIHZhciBjb2xvcj12ZWMzPGYzMj4oMC4wLDAuMCwwLjApO1xuICAgICAgICBsZXQgZDpmMzIgPSBtYXgoZG90KE4sIC1kaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbiksIDAuMCk7XG4gICAgICAgIGNvbG9yICs9IGRpcmVjdGlvbmFsTGlnaHQuY29sb3IgKiBkO1xuXG4gICAgICAgIGxldCBoYWxmRGlyOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggViAtIGRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uICk7XG4gICAgICAgIGxldCBzOmYzMiA9IHBvdyggY2xhbXAoIGRvdCggTiwgaGFsZkRpciApLCAwLjAsIDEuMCApLCBzaGluaW5lc3MgKTtcbiAgICAgICAgY29sb3IgKz0gZGlyZWN0aW9uYWxMaWdodC5jb2xvciAqIHM7XG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICB9XG4gICAgYDtcbn1cbiIsImltcG9ydCB7IHdnc2xQYXJzZURlZmluZXMgfSBmcm9tIFwiLi4vLi4vV2dzbFByZXByb2Nlc3NvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb3JtYWwoZGVmaW5lcykge1xuXHRyZXR1cm4gd2dzbFBhcnNlRGVmaW5lc2BcbiAgZm4gZ2V0Tm9ybWFsKGlucHV0OlZlcnRJbnB1dFxuICAgICNpZiAke2RlZmluZXMuVVNFX05PUk1BTFRFWFRVUkV9XG4gICAgLG5vcm1hbFRleHR1cmU6dGV4dHVyZV8yZDxmMzI+LGRlZmF1bHRTYW1wbGVyOnNhbXBsZXJcbiAgICAjZW5kaWZcbiAgICApLT52ZWMzPGYzMj5cbiAgICB7XG4gICAgICAgIC8vIFJldHJpZXZlIHRoZSB0YW5nZW50IHNwYWNlIG1hdHJpeFxuICAgICAgICBsZXQgcG9zX2R4OnZlYzM8ZjMyPiA9IGRwZHgoaW5wdXQud29ybGRQb3MpO1xuICAgICAgICBsZXQgcG9zX2R5OnZlYzM8ZjMyPiA9IGRwZHkoaW5wdXQud29ybGRQb3MpO1xuICAgICAgICBsZXQgdGV4X2R4OnZlYzM8ZjMyPiA9IGRwZHgodmVjMzxmMzI+KGlucHV0LnV2LCAwLjApKTtcbiAgICAgICAgbGV0IHRleF9keTp2ZWMzPGYzMj4gPSBkcGR5KHZlYzM8ZjMyPihpbnB1dC51diwgMC4wKSk7XG4gICAgICAgIHZhciB0OnZlYzM8ZjMyPiA9ICh0ZXhfZHkueSAqIHBvc19keCAtIHRleF9keC55ICogcG9zX2R5KSAvICh0ZXhfZHgueCAqIHRleF9keS55IC0gdGV4X2R5LnggKiB0ZXhfZHgueSk7XG4gICAgICAgIGxldCBuZyA9IGlucHV0Lm5vcm1hbDtcbiAgICAgICAgdCA9IG5vcm1hbGl6ZSh0IC0gbmcgKiBkb3QobmcsIHQpKTtcbiAgICAgICAgbGV0IGI6dmVjMzxmMzI+ID0gbm9ybWFsaXplKGNyb3NzKG5nLCB0KSk7XG4gICAgICAgIGxldCB0Ym46bWF0M3gzPGYzMj4gPSBtYXQzeDM8ZjMyPih0LCBiLCBuZyk7XG4gICAgLy8gVE9ETzogVEFOR0VOVFNcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTk9STUFMVEVYVFVSRX1cbiAgICAgICAgICAgIHZhciBuOnZlYzM8ZjMyPiA9IHRleHR1cmVTYW1wbGUobm9ybWFsVGV4dHVyZSxkZWZhdWx0U2FtcGxlciwgaW5wdXQudXYpLnJnYjtcbiAgICAgICAgICAgIG4gPSBub3JtYWxpemUodGJuICogKCgyLjAgKiBuIC0gMS4wKSAqIHZlYzM8ZjMyPihtYXRlcmlhbFVuaWZvcm0ubm9ybWFsVGV4dHVyZVNjYWxlLCAxLjApKSk7XG4gICAgICAgICNlbHNlXG4gICAgICAgICAgICB2YXIgbjp2ZWMzPGYzMj4gPSB0Ym5bMl0ueHl6O1xuICAgICAgICAjZW5kaWZcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxuICBgO1xufVxuIiwiaW1wb3J0IGxpZ2h0IGZyb20gXCIuL2xpZ2h0L2xpZ2h0XCI7XG5pbXBvcnQgbGlnaHRDb21tb24gZnJvbSBcIi4vbGlnaHQvbGlnaHRDb21tb25cIjtcbmltcG9ydCBicmRmIGZyb20gXCIuL3Bici9icmRmXCI7XG5pbXBvcnQgcGJyRnVuY3Rpb24gZnJvbSBcIi4vcGJyL3BickZ1bmN0aW9uXCI7XG5pbXBvcnQgcGJyU3RydWN0IGZyb20gXCIuL3Bici9wYnJTdHJ1Y3RcIjtcbmltcG9ydCBwYnJUZXh0dXJlIGZyb20gXCIuL3Bici9wYnJUZXh0dXJlXCI7XG5pbXBvcnQgcGJyVXRpbHMgZnJvbSBcIi4vcGJyL3BiclV0aWxzXCI7XG5pbXBvcnQgcGhvbmdGdW5jdGlvbiBmcm9tIFwiLi9waG9uZy9waG9uZ0Z1bmN0aW9uXCI7XG5pbXBvcnQgcGhvbmdVdGlscyBmcm9tIFwiLi9waG9uZy9waG9uZ1V0aWxzXCI7XG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSBcIi4vZW52aXJvbm1lbnQvZW52aXJvbm1lbnRcIjtcbmltcG9ydCBibGlubl9waG9uZyBmcm9tIFwiLi9waG9uZy9ibGlubl9waG9uZ1wiO1xuaW1wb3J0IGdldE5vcm1hbCBmcm9tIFwiLi9ub3JtYWwvZ2V0Tm9ybWFsXCI7XG5jb25zdCBTaGFkZXJDaHVuayA9IHtcblx0bGlnaHQ6IGxpZ2h0LFxuXHRicmRmOiBicmRmLFxuXHRwaG9uZ0Z1bmN0aW9uOiBwaG9uZ0Z1bmN0aW9uLFxuXHRwaG9uZ1V0aWxzOiBwaG9uZ1V0aWxzLFxuXHRsaWdodENvbW1vbjogbGlnaHRDb21tb24sXG5cdHBiclN0cnVjdDogcGJyU3RydWN0LFxuXHRwYnJGdW5jdGlvbjogcGJyRnVuY3Rpb24sXG5cdHBiclRleHR1cmU6IHBiclRleHR1cmUsXG5cdHBiclV0aWxzOiBwYnJVdGlscyxcblx0ZW52aXJvbm1lbnQ6IGVudmlyb25tZW50LFxuXHRibGlubl9waG9uZzogYmxpbm5fcGhvbmcsXG5cdGdldE5vcm1hbDogZ2V0Tm9ybWFsXG59O1xuZXhwb3J0IGRlZmF1bHQgU2hhZGVyQ2h1bms7XG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBob25nVmVydChkZWZpbmVzKSB7XG5cdHJldHVybiBgXG4gICAgICBzdHJ1Y3QgVmVydGV4T3V0cHV0IHtcbiAgICAgICAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxuICAgICAgICAgICAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyPGYzMj4sXG4gICAgICAgICAgICBAbG9jYXRpb24oMSkgdmlldzogdmVjMzxmMzI+LCAvLyBWZWN0b3IgZnJvbSB2ZXJ0ZXggdG8gY2FtZXJhLlxuICAgICAgICAgICAgQGxvY2F0aW9uKDIpIHdvcmxkUG9zOiB2ZWMzPGYzMj4sXG4gICAgICAgICAgICBAbG9jYXRpb24oMykgY29sb3I6IHZlYzQ8ZjMyPixcbiAgICAgICAgICAgIEBsb2NhdGlvbig0KSBub3JtYWw6IHZlYzM8ZjMyPixcbiAgICAgICAgICAgIEBsb2NhdGlvbig1KSB2aWV3UG9zaXRpb246IHZlYzM8ZjMyPixcbiAgICAgIH07XG4gICAgICBzdHJ1Y3QgTWF0ZXJpYWxVbmlmb3JtIHtcbiAgICAgICAgICAgIG1vZGVsTWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgICAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXG4gICAgICAgICAgICBvcGFjaXR5OmYzMixcbiAgICAgICAgICAgIG5vcm1hbE1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgICAgICBlbWlzc2l2ZTp2ZWMzPGYzMj4sXG4gICAgICAgICAgICBzcGVjdWxhcjp2ZWMzPGYzMj4sXG4gICAgICAgICAgICBzaGluaW5lc3M6ZjMyLFxuICAgICAgfVxuICAgICAgc3RydWN0IFN5c3RlbVVuaWZvcm0ge1xuICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgICAgICB2aWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgICAgICAgIGludmVyc2VWaWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgICAgICAgIGNhbWVyYVBvc2l0aW9uOiB2ZWMzPGYzMj4sXG4gICAgICB9OyBcblxuICAgICAgQGJpbmRpbmcoMCkgQGdyb3VwKDApIHZhcjx1bmlmb3JtPiBzZWxmVW5pZm9ybSA6IE1hdGVyaWFsVW5pZm9ybTtcbiAgICAgIEBiaW5kaW5nKDApIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gc3lzdGVtVW5pZm9ybSA6IFN5c3RlbVVuaWZvcm07XG5cbiAgICAgIHN0cnVjdCBWZXJ0ZXhJbnB1dCB7XG4gICAgICAgICAgICBAbG9jYXRpb24oMCkgcG9zaXRpb246IHZlYzM8ZjMyPiwgICAgICAgXG4gICAgICAgICAgICBAbG9jYXRpb24oMSkgbm9ybWFsOiB2ZWMzPGYzMj4sXG4gICAgICAgICAgICBAbG9jYXRpb24oMikgdXY6IHZlYzI8ZjMyPixcbiAgICAgIH1cbiAgICAgIEB2ZXJ0ZXhcbiAgICAgIGZuIG1haW4oaW5wdXQ6IFZlcnRleElucHV0KSAtPiBWZXJ0ZXhPdXRwdXQge1xuICAgICAgICAgICAgdmFyIG91dHB1dDogVmVydGV4T3V0cHV0O1xuICAgICAgICAgICAgb3V0cHV0LnV2ID0gaW5wdXQudXY7XG4gICAgICAgICAgICBsZXQgbW9kZWxQb3M9c2VsZlVuaWZvcm0ubW9kZWxNYXRyaXggKnZlYzQ8ZjMyPihpbnB1dC5wb3NpdGlvbiwxLjApO1xuICAgICAgICAgICAgb3V0cHV0LndvcmxkUG9zID0gbW9kZWxQb3MueHl6L21vZGVsUG9zLnc7XG4gICAgICAgICAgICBsZXQgdk5vcm1hbFZpZXcgPSBzZWxmVW5pZm9ybS5ub3JtYWxNYXRyaXggKiB2ZWM0PGYzMj4oaW5wdXQubm9ybWFsLDAuMCk7XG4gICAgICAgICAgICBvdXRwdXQubm9ybWFsID0gIHZOb3JtYWxWaWV3Lnh5ejtcbiAgICAgICAgICAgIG91dHB1dC52aWV3ID0gc3lzdGVtVW5pZm9ybS5jYW1lcmFQb3NpdGlvbi54eXogLSBtb2RlbFBvcy54eXo7XG4gICAgICAgICAgICBsZXQgdmlld1Bvc2l0aW9uPXN5c3RlbVVuaWZvcm0udmlld01hdHJpeCAqIG1vZGVsUG9zO1xuICAgICAgICAgICAgb3V0cHV0LnZpZXdQb3NpdGlvbiA9IC12aWV3UG9zaXRpb24ueHl6O1xuICAgICAgICAgICAgb3V0cHV0LnBvc2l0aW9uID0gc3lzdGVtVW5pZm9ybS5wcm9qZWN0aW9uTWF0cml4ICogc3lzdGVtVW5pZm9ybS52aWV3TWF0cml4ICogbW9kZWxQb3M7XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgfWA7XG59XG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBob25nRnJhZyhkZWZpbmVzKSB7XG5cdHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYCAgXG4gIHN0cnVjdCBWZXJ0SW5wdXQge1xuICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uOiB2ZWM0PGYzMj4sXG4gICAgICBAYnVpbHRpbihmcm9udF9mYWNpbmcpIGlzX2Zyb250OiBib29sLFxuICAgICAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyPGYzMj4sXG4gICAgICBAbG9jYXRpb24oMSkgdmlldzogdmVjMzxmMzI+LCAvLyBWZWN0b3IgZnJvbSB2ZXJ0ZXggdG8gY2FtZXJhLlxuICAgICAgQGxvY2F0aW9uKDIpIHdvcmxkUG9zOiB2ZWMzPGYzMj4sXG4gICAgICBAbG9jYXRpb24oMykgY29sb3I6IHZlYzQ8ZjMyPixcbiAgICAgIEBsb2NhdGlvbig0KSBub3JtYWw6IHZlYzM8ZjMyPixcbiAgICAgIEBsb2NhdGlvbig1KSB2aWV3UG9zaXRpb246IHZlYzM8ZjMyPixcbiAgICB9O1xuICAgIC8vICNpbmNsdWRlIDxsaWdodENvbW1vbj5cbiAgICAjaW5jbHVkZSA8bGlnaHQ+XG4gICAgI2luY2x1ZGUgPGdldE5vcm1hbD5cbiAgICBzdHJ1Y3QgTWF0ZXJpYWxVbmlmb3JtIHtcbiAgICAgIG1vZGVsTWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgIGNvbG9yOiB2ZWMzPGYzMj4sXG4gICAgICBvcGFjaXR5OmYzMixcbiAgICAgIG5vcm1hbE1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICBlbWlzc2l2ZTp2ZWMzPGYzMj4sXG4gICAgICBzaGluaW5lc3M6ZjMyLFxuICAgICAgc3BlY3VsYXI6dmVjMzxmMzI+LCAgICAgIFxuICAgfVxuICAgc3RydWN0IFN5c3RlbVVuaWZvcm0ge1xuICAgICAgcHJvamVjdGlvbk1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICB2aWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgIGludmVyc2VWaWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgIGNhbWVyYVBvc2l0aW9uOiB2ZWMzPGYzMj4sXG4gIH07IFxuXG4gICAgI2lmJHtkZWZpbmVzLmJhc2VUZXh0dXJlfVxuICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKDIpIHZhciBteVNhbXBsZXI6IHNhbXBsZXI7XG4gICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoMSkgdmFyIG15VGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xuICAgICNlbmRpZlxuICAgIEBiaW5kaW5nKDApIEBncm91cCgwKSB2YXI8dW5pZm9ybT4gbWF0ZXJpYWxVbmlmb3JtIDogTWF0ZXJpYWxVbmlmb3JtO1xuICAgIEBiaW5kaW5nKDApIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gc3lzdGVtVW5pZm9ybSA6IFN5c3RlbVVuaWZvcm07XG5cbiAgICBAZnJhZ21lbnRcbiAgICBmbiBtYWluKGlucHV0OlZlcnRJbnB1dCkgLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XG4gICAgICAgIHZhciB0b3RhbEVtaXNzaXZlUmFkaWFuY2U6dmVjMzxmMzI+ID0gbWF0ZXJpYWxVbmlmb3JtLmVtaXNzaXZlO1xuICAgICAgICB2YXIgY29sb3I6dmVjNDxmMzI+O1xuICAgICAgICAjaWYke2RlZmluZXMuYmFzZVRleHR1cmV9XG4gICAgICAgICAgICBjb2xvcj0gdmVjNDxmMzI+KHRleHR1cmVTYW1wbGUobXlUZXh0dXJlLCBteVNhbXBsZXIsIGlucHV0LnV2KS5yZ2IrbWF0ZXJpYWxVbmlmb3JtLmNvbG9yLG1hdGVyaWFsVW5pZm9ybS5vcGFjaXR5KTtcbiAgICAgICAgI2Vsc2VcbiAgICAgICAgICAgIGNvbG9yPXZlYzQ8ZjMyPihtYXRlcmlhbFVuaWZvcm0uY29sb3IsbWF0ZXJpYWxVbmlmb3JtLm9wYWNpdHkpO1xuICAgICAgICAjZW5kaWYgICAgIFxuICAgICAgICBsZXQgZmFjZURpcmVjdGlvbjpmMzIgPXNlbGVjdCgtMS4wLDEuMCxpbnB1dC5pc19mcm9udCk7XG4gICAgICAgIGxldCAgVjp2ZWMzPGYzMj4gPSAgbm9ybWFsaXplKCBzeXN0ZW1Vbmlmb3JtLmNhbWVyYVBvc2l0aW9uIC0gaW5wdXQud29ybGRQb3MpO1xuICAgICAgICBsZXQgIE46dmVjMzxmMzI+ID0gZ2V0Tm9ybWFsKGlucHV0KSpmYWNlRGlyZWN0aW9uO1xuICAgICAgICB2YXIgZ2VvbWV0cnk6R2VvbWV0cnk7XG4gICAgICAgIGdlb21ldHJ5Lm5vcm1hbD1OO1xuICAgICAgICBnZW9tZXRyeS52aWV3RGlyPVY7XG4gICAgICAgIGdlb21ldHJ5LnBvc2l0aW9uPWlucHV0LndvcmxkUG9zO1xuICAgICAgICBsZXQgbGlnaHRDb2xvcjpSZWZsZWN0ZWRMaWdodD1wYXJzZUxpZ2h0cyhnZW9tZXRyeSxtYXRlcmlhbFVuaWZvcm0uc2hpbmluZXNzKTtcbiAgICAgICAgdmFyIGZpbm5hbENvbG9yOnZlYzM8ZjMyPj1jb2xvci54eXorbGlnaHRDb2xvci5kaXJlY3REaWZmdXNlK2xpZ2h0Q29sb3IuZGlyZWN0U3BlY3VsYXI7XG4gICAgICAgIHJldHVybiB2ZWM0PGYzMj4oZmlubmFsQ29sb3IsY29sb3IuYSk7XG4gICAgfWA7XG59XG4iLCIvLyBpbXBvcnQgQ29sb3IgZnJvbSBcIi4uLy4uL21hdGgvQ29sb3JcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yRnJhZyhkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIGBcclxuICAgIHN0cnVjdCBWZXJ0ZXhPdXRwdXQge1xyXG4gICAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxyXG4gICAgICAgIEBsb2NhdGlvbigwKSBjb2xvcjogdmVjNDxmMzI+LFxyXG4gICAgfTtcclxuICAgIEBmcmFnbWVudFxyXG4gICAgZm4gbWFpbihpbnB1dDpWZXJ0ZXhPdXRwdXQpIC0+IEBsb2NhdGlvbigwKSB2ZWM0PGYzMj4ge1xyXG4gICAgICByZXR1cm4gaW5wdXQuY29sb3I7XHJcbiAgICB9XHJcbiAgICBgO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yVmVydChkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIGBcclxuICAgc3RydWN0IFZlcnRleElucHV0IHtcclxuICAgICAgICBAbG9jYXRpb24oMCkgcG9zaXRpb246IHZlYzM8ZjMyPiwgICAgICAgXHJcbiAgICAgICAgQGxvY2F0aW9uKDEpIGNvbG9yOiB2ZWM0PGYzMj4sXHJcbiAgIH1cclxuICAgc3RydWN0IFZlcnRleE91dHB1dCB7XHJcbiAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uOiB2ZWM0PGYzMj4sXHJcbiAgICAgICAgQGxvY2F0aW9uKDApIGNvbG9yOiB2ZWM0PGYzMj4sXHJcbiAgICB9O1xyXG4gICBzdHJ1Y3QgU2VsZlVuaWZvcm0ge1xyXG4gICAgICBtb2RlbE1hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgIH1cclxuICAgc3RydWN0IFN5c3RlbVVuaWZvcm0ge1xyXG4gICAgICBwcm9qZWN0aW9uTWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgdmlld01hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgICAgIGludmVyc2VWaWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgY2FtZXJhUG9zaXRpb246IHZlYzM8ZjMyPixcclxuICAgfTsgXHJcbiAgIEBiaW5kaW5nKDApIEBncm91cCgwKSB2YXI8dW5pZm9ybT4gc2VsZlVuaWZvcm0gOiBTZWxmVW5pZm9ybTtcclxuICAgQGJpbmRpbmcoMCkgQGdyb3VwKDEpIHZhcjx1bmlmb3JtPiBzeXN0ZW1Vbmlmb3JtIDogU3lzdGVtVW5pZm9ybTtcclxuICAgQHZlcnRleFxyXG4gICBmbiBtYWluKGlucHV0OiBWZXJ0ZXhJbnB1dCkgLT4gVmVydGV4T3V0cHV0IHtcclxuICAgIHZhciBvdXRwdXQ6VmVydGV4T3V0cHV0O1xyXG4gICAgb3V0cHV0LmNvbG9yPWlucHV0LmNvbG9yO1xyXG4gICAgb3V0cHV0LnBvc2l0aW9uID0gc3lzdGVtVW5pZm9ybS5wcm9qZWN0aW9uTWF0cml4ICogc3lzdGVtVW5pZm9ybS52aWV3TWF0cml4ICpzZWxmVW5pZm9ybS5tb2RlbE1hdHJpeCp2ZWM0PGYzMj4oaW5wdXQucG9zaXRpb24sMS4wKTtcclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgIH1cclxuICAgYDtcclxufVxyXG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBickZyYWcoZGVmaW5lcykge1xyXG4gIHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxyXG4gICAgI2luY2x1ZGUgPGxpZ2h0Q29tbW9uPlxyXG4gICAgI2luY2x1ZGUgPGxpZ2h0PlxyXG4gICAgI2luY2x1ZGUgPGJyZGY+XHJcbiAgICAjaW5jbHVkZSA8cGJyU3RydWN0PlxyXG4gICAgI2luY2x1ZGUgPHBiclV0aWxzPlxyXG4gICAgI2luY2x1ZGUgPHBickZ1bmN0aW9uPlxyXG4gICAgI2luY2x1ZGUgPHBiclRleHR1cmU+XHJcbiAgICAjaW5jbHVkZSA8ZW52aXJvbm1lbnQ+XHJcbiAgICBzdHJ1Y3QgU3lzdGVtVW5pZm9ybSB7XHJcbiAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgICAgICAgdmlld01hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgICAgICAgaW52ZXJzZVZpZXdNYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgIGNhbWVyYVBvc2l0aW9uOiB2ZWMzPGYzMj4sXHJcbiAgICB9OyBcclxuICAgIC8vIHVuaWZvcm0gdmVjMyBsaWdodFByb2JlWzldLFxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuc3RydWN0IFZlcnRleE91dHB1dCB7XHJcbiAgICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb246IHZlYzQ8ZjMyPixcclxuICAgIEBidWlsdGluKGZyb250X2ZhY2luZykgaXNfZnJvbnQ6IGJvb2wsXHJcbiAgICBAbG9jYXRpb24oMCkgdlV2OiB2ZWMyPGYzMj4sXHJcbiAgICBAbG9jYXRpb24oMSkgdlZpZXdQb3NpdGlvbjogdmVjMzxmMzI+LCAvLyBWZWN0b3IgZnJvbSB2ZXJ0ZXggdG8gY2FtZXJhLlxyXG4gICAgQGxvY2F0aW9uKDIpIHZXb3JsZFBvc2l0aW9uOiB2ZWMzPGYzMj4sXHJcbiAgICBAbG9jYXRpb24oMykgdk5vcm1hbDogdmVjMzxmMzI+LFxyXG4gICAgLy8g5Y+v6YCJXHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9MSUdIVFRFWFRVUkUgfHwgZGVmaW5lcy5VU0VfQU9URVhUVVJFfVxyXG4gICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMudlV2Mk91dExvY2F0aW9ufSkgdlV2MjogdmVjMjxmMzI+LFxyXG4gICAgI2VuZGlmXHJcblxyXG4gICAgI2lmICR7ZGVmaW5lcy5VU0VfQ09MT1JfQUxQSEF9XHJcbiAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy52Q29sb3JPdXRMb2NhdGlvbn0pIHZDb2xvcjogdmVjNDxmMzI+LFxyXG4gICAgI2VsaWYgJHtkZWZpbmVzLlVTRV9DT0xPUiB8fCBkZWZpbmVzLlVTRV9JTlNUQU5DSU5HX0NPTE9SfVxyXG4gICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMudkNvbG9yT3V0TG9jYXRpb259KSB2Q29sb3I6IHZlYzM8ZjMyPixcclxuICAgICNlbmRpZlxyXG5cclxuICAgICNpZiAke2RlZmluZXMuVVNFX1RBTkdFTlR9XHJcbiAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy52VGFuZ2VudE91dExvY2F0aW9ufSkgdlRhbmdlbnQ6IHZlYzM8ZjMyPixcclxuICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnZCaXRhbmdlbnRPdXRMb2NhdGlvbn0pIHZCaXRhbmdlbnQ6IHZlYzM8ZjMyPixcclxuICAgICNlbmRpZlxyXG59O1xyXG4gICAgICAgIHN0cnVjdCBQaHlzaWNhbE1hdGVyaWFsIHtcclxuICAgICAgICAgICAgIGRpZmZ1c2VDb2xvcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICByb3VnaG5lc3M6ZjMyLFxyXG4gICAgICAgICAgICAgc3BlY3VsYXJDb2xvcjp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICBzcGVjdWxhckY5MDpmMzIsXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cclxuICAgICAgICAgICAgICAgIGNsZWFyY29hdDpmMzIsXHJcbiAgICAgICAgICAgICAgICBjbGVhcmNvYXRSb3VnaG5lc3M6ZjMyLFxyXG4gICAgICAgICAgICAgICAgY2xlYXJjb2F0RjA6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICAgICAgY2xlYXJjb2F0RjkwOmYzMixcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JUklERVNDRU5DRX1cclxuICAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlOmYzMixcclxuICAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlSU9SOmYzMixcclxuICAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlVGhpY2tuZXNzOmYzMixcclxuICAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlRnJlc25lbDp2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgICAgICBpcmlkZXNjZW5jZUYwOnZlYzM8ZjMyPixcclxuICAgICAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTn1cclxuICAgICAgICAgICAgICAgIHNoZWVuQ29sb3I6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICAgICAgc2hlZW5Sb3VnaG5lc3M6ZjMyLFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuSU9SfVxyXG4gICAgICAgICAgICAgICAgIGlvcjpmMzIsXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVFJBTlNNSVNTSU9OfVxyXG4gICAgICAgICAgICAgICAgdHJhbnNtaXNzaW9uOmYzMixcclxuICAgICAgICAgICAgICAgIHRyYW5zbWlzc2lvbkFscGhhOmYzMixcclxuICAgICAgICAgICAgICAgIHRoaWNrbmVzczpmMzIsXHJcbiAgICAgICAgICAgICAgICBhdHRlbnVhdGlvbkRpc3RhbmNlOmYzMixcclxuICAgICAgICAgICAgICAgIGF0dGVudWF0aW9uQ29sb3I6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICB9O1xyXG5AYmluZGluZygwKSBAZ3JvdXAoMCkgdmFyPHVuaWZvcm0+IG1hdGVyaWFsVW5pZm9ybSA6IE1hdGVyaWFsVW5pZm9ybTtcclxuQGJpbmRpbmcoMCkgQGdyb3VwKDEpIHZhcjx1bmlmb3JtPiBzeXN0ZW1Vbmlmb3JtIDogU3lzdGVtVW5pZm9ybTtcclxuQGZyYWdtZW50XHJcbmZuIG1haW4oaW5wdXQ6VmVydGV4T3V0cHV0KS0+IEBsb2NhdGlvbigwKSB2ZWM0PGYzMj4ge1xyXG4gICAgICAgIHZhciBkaWZmdXNlQ29sb3I6dmVjNDxmMzI+ID0gdmVjNChtYXRlcmlhbFVuaWZvcm0uZGlmZnVzZSwgbWF0ZXJpYWxVbmlmb3JtLm9wYWNpdHkgKTtcclxuICAgICAgIC8vIFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XHJcbiAgICAgICAgdmFyIHJlZmxlY3RlZExpZ2h0OlJlZmxlY3RlZExpZ2h0O1xyXG4gICAgICAgIHZhciB0b3RhbEVtaXNzaXZlUmFkaWFuY2U6dmVjMzxmMzI+ID0gbWF0ZXJpYWxVbmlmb3JtLmVtaXNzaXZlO1xyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RFWFRVUkV9XHJcbiAgICAgICAgICAgIHZhciBzYW1wbGVkRGlmZnVzZUNvbG9yOnZlYzQ8ZjMyPiA9dGV4dHVyZVNhbXBsZShiYXNlVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdik7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuREVDT0RFX1ZJREVPX1RFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBzYW1wbGVkRGlmZnVzZUNvbG9yID0gdmVjNDxmMzI+KCBtaXgoIHBvdyggc2FtcGxlZERpZmZ1c2VDb2xvci5yZ2IgKiAwLjk0Nzg2NzI5ODYgKyB2ZWMzPGYzMj4oIDAuMDUyMTMyNzAxNCApLCB2ZWMzPGYzMj4oIDIuNCApICksIHNhbXBsZWREaWZmdXNlQ29sb3IucmdiICogMC4wNzczOTkzODA4LCB2ZWMzPGYzMj4oIGxlc3NUaGFuRXF1YWwoIHNhbXBsZWREaWZmdXNlQ29sb3IucmdiLCB2ZWMzPGYzMj4oIDAuMDQwNDUgKSApICkgKSwgc2FtcGxlZERpZmZ1c2VDb2xvci53ICk7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgZGlmZnVzZUNvbG9yICo9IHNhbXBsZWREaWZmdXNlQ29sb3I7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgIHZhciByb3VnaG5lc3NGYWN0b3I6ZjMyID0gbWF0ZXJpYWxVbmlmb3JtLnJvdWdobmVzcztcclxuICAgIFxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1JPVUdITkVTU1RFWFRVUkV9XHJcbiAgICAgICAgICAgIGxldCB0ZXhlbFJvdWdobmVzczp2ZWM0PGYzMj49dGV4dHVyZVNhbXBsZShyb3VnaG5lc3NUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KTtcclxuICAgICAgICAgICAgcm91Z2huZXNzRmFjdG9yICo9IHRleGVsUm91Z2huZXNzLmc7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgIHZhciBtZXRhbG5lc3NGYWN0b3I6ZjMyID0gbWF0ZXJpYWxVbmlmb3JtLm1ldGFsbmVzcztcclxuICAgIFxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX01FVEFMTkVTU1RFWFRVUkV9XHJcbiAgICAgICAgICAgIGxldCB0ZXhlbE1ldGFsbmVzczp2ZWM0PGYzMj4gPXRleHR1cmVTYW1wbGUobWV0YWxuZXNzVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdik7XHJcbiAgICAgICAgICAgIG1ldGFsbmVzc0ZhY3RvciAqPSB0ZXhlbE1ldGFsbmVzcy5iO1xyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICBsZXQgZmFjZURpcmVjdGlvbjpmMzIgPXNlbGVjdCgtMS4wLDEuMCxpbnB1dC5pc19mcm9udCk7XHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5GTEFUX1NIQURFRH1cclxuICAgICAgICAgICAgbGV0IGZkeDp2ZWMzPGYzMj4gPSBkcGR4KCBpbnB1dC52Vmlld1Bvc2l0aW9uICk7XHJcbiAgICAgICAgICAgIGxldCBmZHk6dmVjMzxmMzI+ID0gZHBkeSggaW5wdXQudlZpZXdQb3NpdGlvbiApO1xyXG4gICAgICAgICAgICBsZXQgbm9ybWFsOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggY3Jvc3MoIGZkeCwgZmR5ICkgKTtcclxuICAgICAgICAjZWxzZVxyXG4gICAgICAgICAgICBsZXQgbm9ybWFsOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggaW5wdXQudk5vcm1hbCApO1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLkRPVUJMRV9TSURFRH1cclxuICAgICAgICAgICAgICAgIG5vcm1hbCA9IG5vcm1hbCAqIGZhY2VEaXJlY3Rpb247XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UQU5HRU5UfVxyXG4gICAgICAgICAgICAgICAgbGV0IHRhbmdlbnQ6dmVjMzxmMzI+ID0gbm9ybWFsaXplKCBpbnB1dC52VGFuZ2VudCApO1xyXG4gICAgICAgICAgICAgICAgbGV0IGJpdGFuZ2VudDp2ZWMzPGYzMj4gPSBub3JtYWxpemUoIGlucHV0LnZCaXRhbmdlbnQgKTtcclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuRE9VQkxFX1NJREVEfVxyXG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnQgPSB0YW5nZW50ICogZmFjZURpcmVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBiaXRhbmdlbnQgPSBiaXRhbmdlbnQgKiBmYWNlRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICAgICAjaWYgJHtcclxuICAgICAgICAgICAgICAgICAgZGVmaW5lcy5UQU5HRU5UU1BBQ0VfTk9STUFMVEVYVFVSRSB8fFxyXG4gICAgICAgICAgICAgICAgICBkZWZpbmVzLlVTRV9DTEVBUkNPQVRfTk9STUFMVEVYVFVSRVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2VEJOOm1hdDN4MzxmMzI+ID0gbWF0M3gzPGYzMj4oIHRhbmdlbnQsIGJpdGFuZ2VudCwgbm9ybWFsICk7XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICBcclxuICAgICAgICBsZXQgZ2VvbWV0cnlOb3JtYWw6dmVjMzxmMzI+ID0gbm9ybWFsO1xyXG5cclxuICAgICAgICAjaWYgJHtkZWZpbmVzLk9CSkVDVFNQQUNFX05PUk1BTFRFWFRVUkV9XHJcbiAgICAgICAgICAgIG5vcm1hbCA9dGV4dHVyZVNhbXBsZShub3JtYWxUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KS54eXogKiAyLjAgLSAxLjA7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuRkxJUF9TSURFRH1cclxuICAgICAgICAgICAgICAgIG5vcm1hbCA9IC0gbm9ybWFsO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5ET1VCTEVfU0lERUR9XHJcbiAgICAgICAgICAgICAgICBub3JtYWwgPSBub3JtYWwgKiBmYWNlRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgIG5vcm1hbCA9IG5vcm1hbGl6ZShtYXRlcmlhbFVuaWZvcm0ubm9ybWFsTWF0cml4ICogbm9ybWFsICk7XHJcblxyXG4gICAgICAgICAgICAjZWxpZiAke2RlZmluZXMuVEFOR0VOVFNQQUNFX05PUk1BTFRFWFRVUkV9XHJcbiAgICAgICAgICAgIGxldCB0ZW1wTWFwTjp2ZWMzPGYzMj4gPXRleHR1cmVTYW1wbGUobm9ybWFsVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdikueHl6ICogMi4wIC0gMS4wO1xyXG4gICAgICAgICAgICBsZXQgbWFwTjp2ZWMzPGYzMj4gPXRlbXBNYXBOLnh5ICo9IG1hdGVyaWFsVW5pZm9ybS5ub3JtYWxTY2FsZTtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEFOR0VOVH1cclxuICAgICAgICAgICAgICAgIG5vcm1hbCA9IG5vcm1hbGl6ZSggdlRCTiAqIG1hcE4gKTtcclxuICAgICAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgICAgIG5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtIGlucHV0LnZWaWV3UG9zaXRpb24sIG5vcm1hbCwgbWFwTiwgZmFjZURpcmVjdGlvbiApO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICNlbGlmICR7ZGVmaW5lcy5VU0VfQlVNUFRFWFRVUkV9XHJcblxyXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gcGVydHVyYk5vcm1hbEFyYiggLSBpbnB1dC52Vmlld1Bvc2l0aW9uLCBub3JtYWwsIGRIZHh5X2Z3ZCgpLCBmYWNlRGlyZWN0aW9uICk7XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cclxuICAgICAgICAgICAgdmFyIGNsZWFyY29hdE5vcm1hbDp2ZWMzPGYzMj4gPSBnZW9tZXRyeU5vcm1hbDtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVRfTk9STUFMVEVYVFVSRX1cclxuICAgICAgICAgICAgdmFyIGNsZWFyY29hdE1hcE46dmVjMzxmMzI+ID10ZXh0dXJlU2FtcGxlKGNsZWFyY29hdE5vcm1hbFRleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpLnh5eiAqIDIuMCAtIDEuMDtcclxuICAgICAgICAgICAgY2xlYXJjb2F0TWFwTi54eSAqPSBtYXRlcmlhbFVuaWZvcm0uY2xlYXJjb2F0Tm9ybWFsU2NhbGU7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RBTkdFTlR9XHJcbiAgICAgICAgICAgICAgICBjbGVhcmNvYXROb3JtYWwgPSBub3JtYWxpemUoIHZUQk4gKiBjbGVhcmNvYXRNYXBOICk7XHJcbiAgICAgICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgICAgICBjbGVhcmNvYXROb3JtYWwgPSBwZXJ0dXJiTm9ybWFsMkFyYiggLSBpbnB1dC52Vmlld1Bvc2l0aW9uLCBjbGVhcmNvYXROb3JtYWwsIGNsZWFyY29hdE1hcE4sIGZhY2VEaXJlY3Rpb24gKTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRU1JU1NJVkVURVhUVVJFfVxyXG4gICAgICAgICAgICBsZXQgZW1pc3NpdmVDb2xvcjp2ZWM0PGYzMj4gPXRleHR1cmVTYW1wbGUoZW1pc3NpdmVUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KTtcclxuICAgICAgICAgICAgdG90YWxFbWlzc2l2ZVJhZGlhbmNlICo9IGVtaXNzaXZlQ29sb3IucmdiO1xyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICB2YXIgbWF0ZXJpYWw6UGh5c2ljYWxNYXRlcmlhbDtcclxuICAgICAgICBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiICogKCAxLjAgLSBtZXRhbG5lc3NGYWN0b3IgKTtcclxuICAgICAgICBsZXQgZHh5OnZlYzM8ZjMyPiA9IG1heCggYWJzKCBkcGR4KCBnZW9tZXRyeU5vcm1hbCApICksIGFicyggZHBkeSggZ2VvbWV0cnlOb3JtYWwgKSApICk7XHJcbiAgICAgICAgbGV0IGdlb21ldHJ5Um91Z2huZXNzOmYzMiA9IG1heCggbWF4KCBkeHkueCwgZHh5LnkgKSwgZHh5LnogKTtcclxuICAgICAgICBtYXRlcmlhbC5yb3VnaG5lc3MgPSBtYXgoIHJvdWdobmVzc0ZhY3RvciwgMC4wNTI1ICk7XHJcbiAgICAgICAgbWF0ZXJpYWwucm91Z2huZXNzICs9IGdlb21ldHJ5Um91Z2huZXNzO1xyXG4gICAgICAgIG1hdGVyaWFsLnJvdWdobmVzcyA9IG1pbiggbWF0ZXJpYWwucm91Z2huZXNzLCAxLjAgKTtcclxuXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5JT1J9XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmlvciA9IG1hdGVyaWFsVW5pZm9ybS5pb3I7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuU1BFQ1VMQVJ9XHJcbiAgICAgICAgICAgICAgICBsZXQgc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3I6ZjMyID0gbWF0ZXJpYWxVbmlmb3JtLnNwZWN1bGFySW50ZW5zaXR5O1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwZWN1bGFyQ29sb3JGYWN0b3I6dmVjMzxmMzI+ID0gbWF0ZXJpYWxVbmlmb3JtLnNwZWN1bGFyQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TUEVDVUxBUklOVEVOU0lUWVRFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICAgICAgc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IgKj10ZXh0dXJlU2FtcGxlKHNwZWN1bGFySW50ZW5zaXR5VGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdikuYTtcclxuICAgICAgICAgICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NQRUNVTEFSQ09MT1JURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgICAgIHNwZWN1bGFyQ29sb3JGYWN0b3IgKj10ZXh0dXJlU2FtcGxlKHNwZWN1bGFyQ29sb3JUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KS5yZ2I7XHJcbiAgICAgICAgICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5zcGVjdWxhckY5MCA9IG1peCggc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IsIDEuMCwgbWV0YWxuZXNzRmFjdG9yICk7XHJcbiAgICAgICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgICAgICBsZXQgc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3I6ZjMyID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwZWN1bGFyQ29sb3JGYWN0b3I6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCAxLjAgKTtcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyRjkwID0gMS4wO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggbWluKCBwb3cyKCAoIG1hdGVyaWFsLmlvciAtIDEuMCApIC8gKCBtYXRlcmlhbC5pb3IgKyAxLjAgKSApICogc3BlY3VsYXJDb2xvckZhY3RvciwgdmVjMyggMS4wICkgKSAqIHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yLCBkaWZmdXNlQ29sb3IucmdiLCBtZXRhbG5lc3NGYWN0b3IgKTtcclxuICAgICAgICAjZWxzZVxyXG4gICAgICAgICAgICBtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzPGYzMj4oIDAuMDQgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyRjkwID0gMS4wO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cclxuICAgICAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0ID0gbWF0ZXJpYWxVbmlmb3JtLmNsZWFyY29hdDtcclxuICAgICAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gbWF0ZXJpYWxVbmlmb3JtLmNsZWFyY29hdFJvdWdobmVzcztcclxuICAgICAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0RjAgPSB2ZWMzPGYzMj4oIDAuMDQgKTtcclxuICAgICAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0RjkwID0gMS4wO1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVRURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0ICo9dGV4dHVyZVNhbXBsZShjbGVhcmNvYXRUZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KS54O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUX1JPVUdITkVTU1RFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKj10ZXh0dXJlU2FtcGxlKGNsZWFyY29hdFJvdWdobmVzc1RleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpLnk7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICBtYXRlcmlhbC5jbGVhcmNvYXQgPSBzYXR1cmF0ZSggbWF0ZXJpYWwuY2xlYXJjb2F0ICk7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IG1heCggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCAwLjA1MjUgKTtcclxuICAgICAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICs9IGdlb21ldHJ5Um91Z2huZXNzO1xyXG4gICAgICAgICAgICBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBtaW4oIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcywgMS4wICk7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0V9XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmlyaWRlc2NlbmNlID0gbWF0ZXJpYWxVbmlmb3JtLmlyaWRlc2NlbmNlO1xyXG4gICAgICAgICAgICBtYXRlcmlhbC5pcmlkZXNjZW5jZUlPUiA9IG1hdGVyaWFsVW5pZm9ybS5pcmlkZXNjZW5jZUlPUjtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSVJJREVTQ0VOQ0VURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuaXJpZGVzY2VuY2UgKj10ZXh0dXJlU2FtcGxlKGlyaWRlc2NlbmNlVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdikucjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lSSURFU0NFTkNFX1RISUNLTkVTU1RFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzcyA9IChtYXRlcmlhbFVuaWZvcm0uaXJpZGVzY2VuY2VUaGlja25lc3NNYXhpbXVtIC0gbWF0ZXJpYWxVbmlmb3JtLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWluaW11bSkgKiB0ZXh0dXJlU2FtcGxlKGlyaWRlc2NlbmNlVGhpY2tuZXNzVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdikuZyArIG1hdGVyaWFsVW5pZm9ybS5pcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW07XHJcbiAgICAgICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzcyA9IG1hdGVyaWFsVW5pZm9ybS5pcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW07XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOfVxyXG4gICAgICAgICAgICBtYXRlcmlhbC5zaGVlbkNvbG9yID0gbWF0ZXJpYWxVbmlmb3JtLnNoZWVuQ29sb3I7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOQ09MT1JURVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuc2hlZW5Db2xvciAqPXRleHR1cmVTYW1wbGUoc2hlZW5Db2xvclRleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpLnJnYjtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzID0gY2xhbXAoIG1hdGVyaWFsVW5pZm9ybS5zaGVlblJvdWdobmVzcywgMC4wNywgMS4wICk7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NIRUVOUk9VR0hORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzICo9dGV4dHVyZVNhbXBsZShzaGVlblJvdWdobmVzc1RleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYpLmE7XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBnZW9tZXRyeTpHZW9tZXRyaWNDb250ZXh0O1xyXG4gICAgICAgIGdlb21ldHJ5LnBvc2l0aW9uID0gLSBpbnB1dC52Vmlld1Bvc2l0aW9uO1xyXG4gICAgICAgIGdlb21ldHJ5Lm5vcm1hbCA9IG5vcm1hbDtcclxuICAgICAgIC8vIGdlb21ldHJ5LnZpZXdEaXIgPSAoIGlzT3J0aG9ncmFwaGljICkgPyB2ZWMzKCAwLCAwLCAxICkgOiBub3JtYWxpemUoIGlucHV0LnZWaWV3UG9zaXRpb24gKTtcclxuICAgICAgICBnZW9tZXRyeS52aWV3RGlyID0gbm9ybWFsaXplKCBpbnB1dC52Vmlld1Bvc2l0aW9uKTsgXHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cclxuICAgICAgICAgICAgZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsID0gY2xlYXJjb2F0Tm9ybWFsO1xyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JUklERVNDRU5DRX1cclxuICAgICAgICAgICAgbGV0IGRvdE5WaTpmMzIgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xyXG4gICAgICAgICAgICBpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzID09IDAuMCApIHtcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmlyaWRlc2NlbmNlID0gMC4wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPSBzYXR1cmF0ZSggbWF0ZXJpYWwuaXJpZGVzY2VuY2UgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlID4gMC4wICkge1xyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsID0gZXZhbElyaWRlc2NlbmNlKCAxLjAsIG1hdGVyaWFsLmlyaWRlc2NlbmNlSU9SLCBkb3ROVmksIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICk7XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5pcmlkZXNjZW5jZUYwID0gU2NobGlja190b19GMCggbWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsLCAxLjAsIGRvdE5WaSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgIHZhciBpYmxJcnJhZGlhbmNlOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggMC4wICk7XHJcbiAgICAgICAgdmFyIGlycmFkaWFuY2U6dmVjMzxmMzI+ID0gZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZShjb21tb25MaWdodHNQYXJtcy5hbWJpZW50KTtcclxuICAgICAgICAvL2lycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmUsIGdlb21ldHJ5Lm5vcm1hbCxzeXN0ZW1Vbmlmb3JtLnZpZXdNYXRyaXggKTtcclxuXHJcbiAgICAgICAgdmFyIHJhZGlhbmNlOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggMC4wICk7XHJcbiAgICAgICAgdmFyIGNsZWFyY29hdFJhZGlhbmNlOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggMC4wICk7XHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0xJR0hUVEVYVFVSRX1cclxuICAgICAgICAgICAgbGV0IGxpZ2h0TWFwVGV4ZWw6dmVjNDxmMzI+ID10ZXh0dXJlU2FtcGxlKGxpZ2h0VGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdjIpO1xyXG4gICAgICAgICAgICBsZXQgbGlnaHRNYXBJcnJhZGlhbmNlOnZlYzM8ZjMyPiA9IGxpZ2h0TWFwVGV4ZWwucmdiICogbWF0ZXJpYWxVbmlmb3JtLmxpZ2h0VGV4dHVyZUludGVuc2l0eTtcclxuICAgICAgICAgICAgaXJyYWRpYW5jZSArPSBsaWdodE1hcElycmFkaWFuY2U7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgLy8mJiBkZWZpbmVzLlNUQU5EQVJEJiZkZWZpbmVzLkVOVlRFWFRVUkVfVFlQRV9DVUJFX1VWXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRU5WVEVYVFVSRX0gXHJcbiAgICAgICAgICAgIGlibElycmFkaWFuY2UgKz0gZ2V0SUJMSXJyYWRpYW5jZSggZ2VvbWV0cnkubm9ybWFsLGJhc2VTYW1wbGVyLHN5c3RlbVVuaWZvcm0udmlld01hdHJpeCApO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0VOVlRFWFRVUkV9XHJcbiAgICAgICAgICAgIHJhZGlhbmNlICs9IGdldElCTFJhZGlhbmNlKCBnZW9tZXRyeS52aWV3RGlyLGJhc2VTYW1wbGVyLHN5c3RlbVVuaWZvcm0udmlld01hdHJpeCwgZ2VvbWV0cnkubm9ybWFsLCBtYXRlcmlhbFVuaWZvcm0ucm91Z2huZXNzICk7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NMRUFSQ09BVH1cclxuICAgICAgICAgICAgICAgIGNsZWFyY29hdFJhZGlhbmNlICs9IGdldElCTFJhZGlhbmNlKCBnZW9tZXRyeS52aWV3RGlyLGJhc2VTYW1wbGVyLHN5c3RlbVVuaWZvcm0udmlld01hdHJpeCwgZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgLy/nm7TmjqXlhYnnhadcclxuICAgICAgICAgICAgbGV0IGRpclJlZmxlY3RlZExpZ2h0OlJlZmxlY3RlZExpZ2h0PSBwYXJzZUxpZ2h0cyhnZW9tZXRyeSxtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz1kaXJSZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlO1xyXG4gICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPWRpclJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyO1xyXG4gICAgICAgIC8v6Ze05o6l5ryr5Y+N5bCEXHJcbiAgICAgICAgICAgIGxldCBpbmRpcmVjdERpZmZ1c2VMaWdodDpSZWZsZWN0ZWRMaWdodD0gUkVfSW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsKCBpcnJhZGlhbmNlLCBnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9aW5kaXJlY3REaWZmdXNlTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xyXG4gICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPWluZGlyZWN0RGlmZnVzZUxpZ2h0LmluZGlyZWN0U3BlY3VsYXI7XHJcbiAgICAgICAgLy/pl7TmjqXpq5jlhYlcclxuICAgICAgICAgICAgbGV0IGluZGlyZWN0U3BlY3VsYXJMaWdodDpSZWZsZWN0ZWRMaWdodD1SRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKCByYWRpYW5jZSwgaWJsSXJyYWRpYW5jZSwgY2xlYXJjb2F0UmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz1pbmRpcmVjdFNwZWN1bGFyTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xyXG4gICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPWluZGlyZWN0U3BlY3VsYXJMaWdodC5pbmRpcmVjdFNwZWN1bGFyO1xyXG4gICAgICAgIC8v546v5aKD5YWJ6YGu6JS9XHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQU9URVhUVVJFfVxyXG4gICAgICAgICAgICBsZXQgYW1iaWVudE9jY2x1c2lvbjpmMzIgPSAodGV4dHVyZVNhbXBsZShhb1RleHR1cmUsIGJhc2VTYW1wbGVyLCBpbnB1dC52VXYyKS5yIC0gMS4wICkgKiBtYXRlcmlhbFVuaWZvcm0uYW9UZXh0dXJlSW50ZW5zaXR5ICsgMS4wO1xyXG5cclxuICAgICAgICAgICAgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IGFtYmllbnRPY2NsdXNpb247XHJcbiAgICAgICAgICAgIC8vJiZkZWZpbmVzLlNUQU5EQVJEXHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX0VOVlRFWFRVUkV9IFxyXG4gICAgICAgICAgICAgICAgbGV0IGRvdE5WOmYzMiA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XHJcbiAgICAgICAgICAgICAgICByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICo9IGNvbXB1dGVTcGVjdWxhck9jY2x1c2lvbiggZG90TlYsIGFtYmllbnRPY2NsdXNpb24sIG1hdGVyaWFsLnJvdWdobmVzcyApO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgdmFyIHRvdGFsRGlmZnVzZTp2ZWMzPGYzMj4gPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xyXG4gICAgICAgIHZhciB0b3RhbFNwZWN1bGFyOnZlYzM8ZjMyPiA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhcjtcclxuICAgICAgICAvL+mAj+WwhFxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RSQU5TTUlTU0lPTn1cclxuICAgICAgICAgICAgbWF0ZXJpYWwudHJhbnNtaXNzaW9uID0gbWF0ZXJpYWxVbmlmb3JtLnRyYW5zbWlzc2lvbjtcclxuICAgICAgICAgICAgbWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGEgPSAxLjA7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLnRoaWNrbmVzcyA9IG1hdGVyaWFsVW5pZm9ybS50aGlja25lc3M7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmF0dGVudWF0aW9uRGlzdGFuY2UgPSBtYXRlcmlhbFVuaWZvcm0uYXR0ZW51YXRpb25EaXN0YW5jZTtcclxuICAgICAgICAgICAgbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciA9IG1hdGVyaWFsVW5pZm9ybS5hdHRlbnVhdGlvbkNvbG9yO1xyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UUkFOU01JU1NJT05URVhUVVJFfVxyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwudHJhbnNtaXNzaW9uICo9dGV4dHVyZVNhbXBsZSh0cmFuc21pc3Npb25UZXh0dXJlLCBiYXNlU2FtcGxlciwgaW5wdXQudlV2KS5yO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEhJQ0tORVNTVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLnRoaWNrbmVzcyAqPXRleHR1cmVTYW1wbGUodGhpY2tuZXNzVGV4dHVyZSwgYmFzZVNhbXBsZXIsIGlucHV0LnZVdikuZztcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgIGxldCBwb3M6dmVjMzxmMzI+ID0gdldvcmxkUG9zaXRpb247XHJcbiAgICAgICAgICAgIGxldCB2OnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZSggY2FtZXJhUG9zaXRpb24gLSBwb3MgKTtcclxuICAgICAgICAgICAgbGV0IG46dmVjMzxmMzI+ID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCBzeXN0ZW1Vbmlmb3JtLnZpZXdNYXRyaXggKTtcclxuICAgICAgICAgICAgbGV0IHRyYW5zbWlzc2lvbjp2ZWM0PGYzMj4gPSBnZXRJQkxWb2x1bWVSZWZyYWN0aW9uKFxyXG4gICAgICAgICAgICBuLCB2LCBtYXRlcmlhbC5yb3VnaG5lc3MsIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsIHBvcywgbW9kZWxNYXRyaXgsIHN5c3RlbVVuaWZvcm0udmlld01hdHJpeCwgc3lzdGVtVW5pZm9ybS5wcm9qZWN0aW9uTWF0cml4LCBtYXRlcmlhbC5pb3IsIG1hdGVyaWFsLnRoaWNrbmVzcywgbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciwgbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZSApO1xyXG4gICAgICAgICAgICBtYXRlcmlhbC50cmFuc21pc3Npb25BbHBoYSA9IG1peCggbWF0ZXJpYWwudHJhbnNtaXNzaW9uQWxwaGEsIHRyYW5zbWlzc2lvbi5hLCBtYXRlcmlhbC50cmFuc21pc3Npb24gKTtcclxuICAgICAgICAgICAgdG90YWxEaWZmdXNlID0gbWl4KCB0b3RhbERpZmZ1c2UsIHRyYW5zbWlzc2lvbi5yZ2IsIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiApO1xyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICBsZXQgb3V0Z29pbmdMaWdodDp2ZWMzPGYzMj4gPSB0b3RhbERpZmZ1c2UgKyB0b3RhbFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xyXG5cclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TSEVFTn1cclxuICAgICAgICAgICAgbGV0IHNoZWVuRW5lcmd5Q29tcDpmMzIgPSAxLjAgLSAwLjE1NyAqIG1heDMoIG1hdGVyaWFsLnNoZWVuQ29sb3IgKTtcclxuICAgICAgICAgICAgb3V0Z29pbmdMaWdodCA9IG91dGdvaW5nTGlnaHQgKiBzaGVlbkVuZXJneUNvbXAgKyBzaGVlblNwZWN1bGFyO1xyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DTEVBUkNPQVR9XHJcbiAgICAgICAgICAgIGxldCBkb3ROVmNjOmYzMiA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XHJcbiAgICAgICAgICAgIGxldCBGY2M6dmVjMzxmMzI+ID0gRl9TY2hsaWNrKCBtYXRlcmlhbC5jbGVhcmNvYXRGMCwgbWF0ZXJpYWwuY2xlYXJjb2F0RjkwLCBkb3ROVmNjICk7XHJcbiAgICAgICAgICAgIG91dGdvaW5nTGlnaHQgPSBvdXRnb2luZ0xpZ2h0ICogKCAxLjAgLSBtYXRlcmlhbC5jbGVhcmNvYXQgKiBGY2MgKSArIGNsZWFyY29hdFNwZWN1bGFyICogbWF0ZXJpYWwuY2xlYXJjb2F0O1xyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UUkFOU01JU1NJT059XHJcbiAgICAgICAgICAgIGRpZmZ1c2VDb2xvci5hICo9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbkFscGhhICsgMC4xO1xyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICB2YXIgZmlubmFsQ29sb3I6dmVjNDxmMzI+O1xyXG4gICAgICAgIGZpbm5hbENvbG9yID0gdmVjNDxmMzI+KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xyXG4gICAgICAgICNpZiAke2RlZmluZXMuVE9ORV9NQVBQSU5HfVxyXG4gICAgICAgICAgIGZpbm5hbENvbG9yLnJnYiA9IHRvbmVNYXBwaW5nKCBmaW5uYWxDb2xvci5yZ2IsbWF0ZXJpYWxVbmlmb3JtLnRvbmVNYXBwaW5nRXhwb3N1cmUgKTtcclxuICAgICAgICAjZW5kaWZcclxuXHJcbiAgICAgICAgICBmaW5uYWxDb2xvciA9IGxpbmVhclRvT3V0cHV0VGV4ZWwoIGZpbm5hbENvbG9yKTtcclxuXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5QUkVNVUxUSVBMSUVEX0FMUEhBfVxyXG4gICAgICAgICAgICBmaW5uYWxDb2xvci5yZ2IgKj0gZmlubmFsQ29sb3IuYTtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLkRJVEhFUklOR31cclxuICAgICAgICAgICAgZmlubmFsQ29sb3IucmdiID0gZGl0aGVyaW5nKCBmaW5uYWxDb2xvci5yZ2IgKTtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICByZXR1cm4gZmlubmFsQ29sb3I7XHJcbiAgICB9YDtcclxufVxyXG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBiclZlcnQoZGVmaW5lcykge1xyXG4gIHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxyXG4gICAgI2luY2x1ZGUgPHBiclN0cnVjdD5cclxuICAgIHN0cnVjdCBWZXJ0ZXhPdXRwdXQge1xyXG4gICAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxyXG4gICAgICAgIEBsb2NhdGlvbigwKSB2VXY6IHZlYzI8ZjMyPixcclxuICAgICAgICBAbG9jYXRpb24oMSkgdlZpZXdQb3NpdGlvbjogdmVjMzxmMzI+LCAvLyBWZWN0b3IgZnJvbSB2ZXJ0ZXggdG8gY2FtZXJhLlxyXG4gICAgICAgIEBsb2NhdGlvbigyKSB2V29ybGRQb3NpdGlvbjogdmVjMzxmMzI+LFxyXG4gICAgICAgIEBsb2NhdGlvbigzKSB2Tm9ybWFsOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgLy8g5Y+v6YCJXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTElHSFRURVhUVVJFIHx8IGRlZmluZXMuVVNFX0FPVEVYVFVSRX1cclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy52VXYyT3V0TG9jYXRpb259KSB2VXYyOiB2ZWMyPGYzMj4sXHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NPTE9SX0FMUEhBfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnZDb2xvck91dExvY2F0aW9ufSkgdkNvbG9yOiB2ZWM0PGYzMj4sXHJcbiAgICAgICAgI2VsaWYgJHtkZWZpbmVzLlVTRV9DT0xPUiB8fCBkZWZpbmVzLlVTRV9JTlNUQU5DSU5HX0NPTE9SfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnZDb2xvck91dExvY2F0aW9ufSkgdkNvbG9yOiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RBTkdFTlR9XHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMudlRhbmdlbnRPdXRMb2NhdGlvbn0pIHZUYW5nZW50OiB2ZWMzPGYzMj4sXHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMudkJpdGFuZ2VudE91dExvY2F0aW9ufSkgdkJpdGFuZ2VudDogdmVjMzxmMzI+LFxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgfTtcclxuICAgIHN0cnVjdCBHbG9iYWxVbmlmb3JtIHtcclxuICAgICAgICBwcm9qZWN0aW9uTWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICB2aWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcclxuICAgICAgICBpbnZlcnNlVmlld01hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgICAgICAgY2FtZXJhUG9zaXRpb246IHZlYzM8ZjMyPixcclxuICAgIH07XHJcblxyXG4gICAgLy90ZXh0dXJlIGFuZCBzYW1wbGVyXHJcbiAgICAvLyBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLnNhbXBsZXJCaW5kaW5nfSkgdmFyIGJhc2VTYW1wbGVyOiBzYW1wbGVyO1xyXG4gICAgI2lmICR7ZGVmaW5lcy5VU0VfU0tJTk5JTkd9XHJcbiAgICAgICAgLy91bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBib25lVGV4dHVyZTtcclxuICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtcclxuICAgICAgICAgIGRlZmluZXMuYm9uZVRleHR1cmVCaW5kaW5nXHJcbiAgICAgICAgfSkgdmFyIGJvbmVUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XHJcbiAgICAjZW5kaWZcclxuXHJcbiAgICAjaWYgJHtkZWZpbmVzLlVTRV9ESVNQTEFDRU1FTlRURVhUVVJFfVxyXG4gICAgICAgIC8vdW5pZm9ybSBzYW1wbGVyMkQgZGlzcGxhY2VtZW50TWFwO1xyXG4gICAgICAgIEBncm91cCgwKSBAYmluZGluZygke1xyXG4gICAgICAgICAgZGVmaW5lcy5kaXNwbGFjZW1lbnRUZXh0dXJlQmluZGluZ1xyXG4gICAgICAgIH0pIHZhciBkaXNwbGFjZW1lbnRNYXA6IHRleHR1cmVfMmQ8ZjMyPjtcclxuICAgICNlbmRpZlxyXG5cclxuICAgICNpZiAke2RlZmluZXMuTU9SUEhUQVJHRVRTX1RFWFRVUkV9XHJcbiAgICAgICAgLy91bmlmb3JtIHNhbXBsZXIyREFycmF5IG1vcnBoVGFyZ2V0c1RleHR1cmU7XHJcbiAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7XHJcbiAgICAgICAgICBkZWZpbmVzLm1vcnBoVGFyZ2V0c1RleHR1cmVCaW5kaW5nXHJcbiAgICAgICAgfSkgdmFyIG1vcnBoVGFyZ2V0c1RleHR1cmU6IHRleHR1cmVfMmRfYXJyYXk8ZjMyPjtcclxuICAgICNlbmRpZlxyXG5cclxuICAgIHN0cnVjdCBWZXJ0ZXhJbnB1dCB7XHJcbiAgICAgICAgQGxvY2F0aW9uKDApIHBvc2l0aW9uOiB2ZWMzPGYzMj4sICBcclxuXHJcbiAgICAgICAgQGxvY2F0aW9uKDEpIG5vcm1hbDogdmVjMzxmMzI+LFxyXG5cclxuICAgICAgICBAbG9jYXRpb24oMikgdXY6IHZlYzI8ZjMyPixcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9MSUdIVFRFWFRVUkUgfHwgZGVmaW5lcy5VU0VfQU9URVhUVVJFfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnV2MkxvY2F0aW9ufSkgdXYyOnZlYzI8ZjMyPixcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JTlNUQU5DSU5HfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtcclxuICAgICAgICAgICAgICBkZWZpbmVzLmluc3RhbmNlTWF0cml4TG9jYXRpb25cclxuICAgICAgICAgICAgfSkgaW5zdGFuY2VNYXRyaXg6bWF0NHg0PGYzMj4sXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSU5TVEFOQ0lOR19DT0xPUn1cclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5pbnN0YW5jZUNvbG9yTG9jYXRpb259KSBpbnN0YW5jZUNvbG9yOnZlYzM8ZjMyPixcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICBcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UQU5HRU5UfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLnRhbmdlbnRMb2NhdGlvbn0pIHRhbmdlbnQ6dmVjNDxmMzI+LFxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0NPTE9SX0FMUEhBfVxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLmNvbG9yTG9jYXRpb259KSBjb2xvcjp2ZWM0PGYzMj4sXHJcbiAgICAgICAgI2VsaWYgJHtkZWZpbmVzLlVTRV9DT0xPUn1cclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5jb2xvckxvY2F0aW9ufSkgY29sb3I6dmVjMzxmMzI+LFxyXG4gICAgICAgICNlbmRpZlxyXG5cclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NT1JQSFRBUkdFVFMgJiYgIWRlZmluZXMuTU9SUEhUQVJHRVRTX1RFWFRVUkV9XHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMubW9ycGhUYXJnZXQwTG9jYXRpb259KSBtb3JwaFRhcmdldDA6dmVjMzxmMzI+LFxyXG5cclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5tb3JwaFRhcmdldDFMb2NhdGlvbn0pIG1vcnBoVGFyZ2V0MTp2ZWMzPGYzMj4sXHJcblxyXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtkZWZpbmVzLm1vcnBoVGFyZ2V0MkxvY2F0aW9ufSkgbW9ycGhUYXJnZXQyOnZlYzM8ZjMyPixcclxuXHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMubW9ycGhUYXJnZXQzTG9jYXRpb259KSBtb3JwaFRhcmdldDM6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NT1JQSE5PUk1BTFN9XHJcbiAgICAgICAgICAgICAgICBAbG9jYXRpb24oJHtcclxuICAgICAgICAgICAgICAgICAgZGVmaW5lcy5tb3JwaE5vcm1hbDBMb2NhdGlvblxyXG4gICAgICAgICAgICAgICAgfSkgbW9ycGhOb3JtYWwwOnZlYzM8ZjMyPixcclxuXHJcbiAgICAgICAgICAgICAgICBAbG9jYXRpb24oJHtcclxuICAgICAgICAgICAgICAgICAgZGVmaW5lcy5tb3JwaE5vcm1hbDFMb2NhdGlvblxyXG4gICAgICAgICAgICAgICAgfSkgbW9ycGhOb3JtYWwxOnZlYzM8ZjMyPixcclxuXHJcbiAgICAgICAgICAgICAgICBAbG9jYXRpb24oJHtcclxuICAgICAgICAgICAgICAgICAgZGVmaW5lcy5tb3JwaE5vcm1hbDJMb2NhdGlvblxyXG4gICAgICAgICAgICAgICAgfSkgbW9ycGhOb3JtYWwyOnZlYzM8ZjMyPixcclxuXHJcbiAgICAgICAgICAgICAgICBAbG9jYXRpb24oJHtcclxuICAgICAgICAgICAgICAgICAgZGVmaW5lcy5tb3JwaE5vcm1hbDNMb2NhdGlvblxyXG4gICAgICAgICAgICAgICAgfSkgbW9ycGhOb3JtYWwzOnZlYzM8ZjMyPixcclxuICAgICAgICAgICAgI2Vsc2VcclxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigke1xyXG4gICAgICAgICAgICAgICAgICBkZWZpbmVzLm1vcnBoVGFyZ2V0NExvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB9KSBtb3JwaFRhcmdldDQ6dmVjMzxmMzI+LFxyXG5cclxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigke1xyXG4gICAgICAgICAgICAgICAgICBkZWZpbmVzLm1vcnBoVGFyZ2V0NUxvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB9KSBtb3JwaFRhcmdldDU6dmVjMzxmMzI+LFxyXG5cclxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigke1xyXG4gICAgICAgICAgICAgICAgICBkZWZpbmVzLm1vcnBoVGFyZ2V0NkxvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB9KSBtb3JwaFRhcmdldDY6dmVjMzxmMzI+LFxyXG5cclxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbigke1xyXG4gICAgICAgICAgICAgICAgICBkZWZpbmVzLm1vcnBoVGFyZ2V0N0xvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB9KSBtb3JwaFRhcmdldDc6dmVjMzxmMzI+LFxyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TS0lOTklOR31cclxuICAgICAgICAgICAgQGxvY2F0aW9uKCR7ZGVmaW5lcy5za2luSW5kZXhMb2NhdGlvbn0pIHNraW5JbmRleDp2ZWM0PGYzMj4sXHJcbiAgICAgICAgICAgIEBsb2NhdGlvbigke2RlZmluZXMuc2tpbldlaWdodExvY2F0aW9ufSkgc2tpbldlaWdodDp2ZWM0PGYzMj4sXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgfVxyXG5cclxuICAgICNpZiAke2RlZmluZXMuTU9SUEhUQVJHRVRTX1RFWFRVUkV9XHJcbiAgICAgICAgZm4gZ2V0TW9ycGgoIHZlcnRleEluZGV4OnUzMiwgbW9ycGhUYXJnZXRJbmRleDp1MzIsb2Zmc2V0OnUzMiApLT52ZWM0PGYzMj4ge1xyXG4gICAgICAgICAgICBsZXQgdGV4ZWxJbmRleDp1MzIgPSB2ZXJ0ZXhJbmRleCAqIE1PUlBIVEFSR0VUU19URVhUVVJFX1NUUklERSArIG9mZnNldDtcclxuICAgICAgICAgICAgbGV0IHk6dTMyID0gdGV4ZWxJbmRleCAvIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldHNUZXh0dXJlU2l6ZS54O1xyXG4gICAgICAgICAgICBsZXQgeDp1MzIgPSB0ZXhlbEluZGV4IC0geSAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldHNUZXh0dXJlU2l6ZS54O1xyXG4gICAgICAgICAgICBsZXQgbW9ycGhVVjp2ZWMzPHUzMj4gPSB2ZWMzPHUzMj4oIHgsIHksIG1vcnBoVGFyZ2V0SW5kZXggKTtcclxuICAgICAgICAgICAgLy90ZXh0dXJlTG9hZFxyXG4gICAgICAgICAgICAvL3JldHVybiB0ZXhlbEZldGNoKCBtb3JwaFRhcmdldHNUZXh0dXJlLCBtb3JwaFVWLCAwICk7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlTG9hZCggbW9ycGhUYXJnZXRzVGV4dHVyZSwgbW9ycGhVViwgMCApO1xyXG4gICAgICAgIH1cclxuICAgICNlbmRpZlxyXG4gICAgI2lmICR7ZGVmaW5lcy5VU0VfU0tJTk5JTkd9XHJcbiAgICAgICAgZm4gZ2V0Qm9uZU1hdHJpeCggaTpmMzIgKS0+bWF0NHg0PGYzMj4ge1xyXG4gICAgICAgICAgICBsZXQgajpmMzIgPSBpICogNC4wO1xyXG4gICAgICAgICAgICBsZXQgeDpmMzIgPSBqJWYzMiggbWF0ZXJpYWxVbmlmb3JtLmJvbmVUZXh0dXJlU2l6ZSApO1xyXG4gICAgICAgICAgICBsZXQgeTpmMzIgPSBmbG9vciggaiAvIGYzMiggbWF0ZXJpYWxVbmlmb3JtLmJvbmVUZXh0dXJlU2l6ZSApICk7XHJcbiAgICAgICAgICAgIGxldCBkeDpmMzIgPSAxLjAgLyBmMzIoIG1hdGVyaWFsVW5pZm9ybS5ib25lVGV4dHVyZVNpemUgKTtcclxuICAgICAgICAgICAgbGV0IGR5OmYzMiA9IDEuMCAvIGYzMiggbWF0ZXJpYWxVbmlmb3JtLmJvbmVUZXh0dXJlU2l6ZSApO1xyXG4gICAgICAgICAgICB5ID0gZHkgKiAoIHkgKyAwLjUgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCB2MTp2ZWM0PGYzMj4gPSB0ZXh0dXJlU2FtcGxlKGJvbmVUZXh0dXJlLCBiYXNlU2FtcGxlciwgdmVjMjxmMzI+KCBkeCAqICggeCArIDAuNSApLCB5ICkgKTtcclxuICAgICAgICAgICAgbGV0IHYyOnZlYzQ8ZjMyPiA9IHRleHR1cmVTYW1wbGUoYm9uZVRleHR1cmUsIGJhc2VTYW1wbGVyLCB2ZWMyPGYzMj4oIGR4ICogKCB4ICsgMS41ICksIHkgKSApO1xyXG4gICAgICAgICAgICBsZXQgdjM6dmVjNDxmMzI+ID0gdGV4dHVyZVNhbXBsZShib25lVGV4dHVyZSwgYmFzZVNhbXBsZXIsIHZlYzI8ZjMyPiggZHggKiAoIHggKyAyLjUgKSwgeSApICk7XHJcbiAgICAgICAgICAgIGxldCB2NDp2ZWM0PGYzMj4gPSB0ZXh0dXJlU2FtcGxlKGJvbmVUZXh0dXJlLCBiYXNlU2FtcGxlciwgdmVjMjxmMzI+KCBkeCAqICggeCArIDMuNSApLCB5ICkgKTtcclxuICAgICAgICAgICAgbGV0IGJvbmU6bWF0NHg0PGYzMj4gPSBtYXQ0eDQ8ZjMyPiggdjEsIHYyLCB2MywgdjQgKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJvbmU7XHJcbiAgICAgICAgfVxyXG4gICAgI2VuZGlmXHJcblxyXG4gICAgQGJpbmRpbmcoMCkgQGdyb3VwKDApIHZhcjx1bmlmb3JtPiBtYXRlcmlhbFVuaWZvcm0gOiBNYXRlcmlhbFVuaWZvcm07XHJcbiAgICBAYmluZGluZygwKSBAZ3JvdXAoMSkgdmFyPHVuaWZvcm0+IGdsb2JhbFVuaWZvcm0gOiBHbG9iYWxVbmlmb3JtO1xyXG4gICAgQHZlcnRleFxyXG4gICAgZm4gbWFpbihpbnB1dDpWZXJ0ZXhJbnB1dCktPlZlcnRleE91dHB1dCB7XHJcbiAgICAgICAgdmFyIHZlcnRleE91dHB1dDpWZXJ0ZXhPdXRwdXQ7XHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEVYVFVSRX1cclxuICAgICAgICAgICAgdmVydGV4T3V0cHV0LnZVdiA9IGlucHV0LnV2O1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0xJR0hUVEVYVFVSRSB8fCBkZWZpbmVzLlVTRV9BT1RFWFRVUkV9XHJcbiAgICAgICAgICAgIHZlcnRleE91dHB1dC52VXYyIGlucHV0LnV2MjtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DT0xPUl9BTFBIQX1cclxuICAgICAgICAgICAgdmVydGV4T3V0cHV0LnZDb2xvciA9IHZlYzQoIDEuMCApO1xyXG4gICAgICAgICAgICAjZWxpZiAke2RlZmluZXMuVVNFX0NPTE9SIHx8IGRlZmluZXMuVVNFX0lOU1RBTkNJTkdfQ09MT1J9XHJcbiAgICAgICAgICAgIHZlcnRleE91dHB1dC52Q29sb3IgPSB2ZWMzKCAxLjAgKTtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DT0xPUn1cclxuICAgICAgICAgICAgdmVydGV4T3V0cHV0LnZDb2xvciAqPSBpbnB1dC5jb2xvcjtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JTlNUQU5DSU5HX0NPTE9SfVxyXG4gICAgICAgICAgICB2ZXJ0ZXhPdXRwdXQudkNvbG9yLnh5eiAqPSBpbnB1dC5pbnN0YW5jZUNvbG9yLnh5ejtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NT1JQSENPTE9SUyAmJiBkZWZpbmVzLk1PUlBIVEFSR0VUU19URVhUVVJFfVxyXG4gICAgICAgICAgICB2ZXJ0ZXhPdXRwdXQudkNvbG9yICo9IG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgOiB1MzIgPSAwdTsgaSA8IG1hdGVyaWFsVW5pZm9ybS5NT1JQSFRBUkdFVFNfQ09VTlQ7IGkgPSBpICsgMXUgKSB7XHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9DT0xPUl9BTFBIQX1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhID0gMC4wICkgdmVydGV4T3V0cHV0LnZDb2xvciArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDIgKSAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXTtcclxuICAgICAgICAgICAgICAgICAgICAjZWxpZiAke2RlZmluZXMuVVNFX0NPTE9SfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICEgPSAwLjAgKSB2ZXJ0ZXhPdXRwdXQudkNvbG9yICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMiApLnJnYiAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXTtcclxuICAgICAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgdmFyIG9iamVjdE5vcm1hbDp2ZWMzPGYzMj4gPSB2ZWMzPGYzMj4oaW5wdXQubm9ybWFsKTtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UQU5HRU5UfVxyXG4gICAgICAgICAgICBsZXQgb2JqZWN0VGFuZ2VudDp2ZWMzPGYzMj4gPSB2ZWMzPGYzMj4oIGlucHV0LnRhbmdlbnQueHl6ICk7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTU9SUEhOT1JNQUxTfVxyXG4gICAgICAgICAgICBvYmplY3ROb3JtYWwgKj0gbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5NT1JQSFRBUkdFVFNfVEVYVFVSRX1cclxuICAgICAgICAgICAgICAgIGZvciAoIGxldCBpIDogdTMyID0gMHU7IGkgPCBtYXRlcmlhbFVuaWZvcm0uTU9SUEhUQVJHRVRTX0NPVU5UOyBpID0gaSArIDF1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gISA9IDAuMCApIG9iamVjdE5vcm1hbCArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDEgKS54eXogKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgICAgICBvYmplY3ROb3JtYWwgKz0gbW9ycGhOb3JtYWwwICogbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMCBdO1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0Tm9ybWFsICs9IG1vcnBoTm9ybWFsMSAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcclxuICAgICAgICAgICAgICAgIG9iamVjdE5vcm1hbCArPSBtb3JwaE5vcm1hbDIgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XHJcbiAgICAgICAgICAgICAgICBvYmplY3ROb3JtYWwgKz0gbW9ycGhOb3JtYWwzICogbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMyBdO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TS0lOTklOR31cclxuICAgICAgICAgICAgbGV0IGJvbmVNYXRYOm1hdDR4NDxmMzI+ID0gZ2V0Qm9uZU1hdHJpeCggaW5wdXQuc2tpbkluZGV4LnggKTtcclxuICAgICAgICAgICAgbGV0IGJvbmVNYXRZOm1hdDR4NDxmMzI+ID0gZ2V0Qm9uZU1hdHJpeCggaW5wdXQuc2tpbkluZGV4LnkgKTtcclxuICAgICAgICAgICAgbGV0IGJvbmVNYXRaOm1hdDR4NDxmMzI+ID0gZ2V0Qm9uZU1hdHJpeCggaW5wdXQuc2tpbkluZGV4LnogKTtcclxuICAgICAgICAgICAgbGV0IGJvbmVNYXRXOm1hdDR4NDxmMzI+ID0gZ2V0Qm9uZU1hdHJpeCggaW5wdXQuc2tpbkluZGV4LncgKTtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9TS0lOTklOR31cclxuICAgICAgICAgICAgbGV0IHNraW5NYXRyaXg6bWF0NHg0PGYzMj4gPSBtYXQ0eDQ8ZjMyPiggMC4wICk7XHJcbiAgICAgICAgICAgIHNraW5NYXRyaXggKz0gaW5wdXQuc2tpbldlaWdodC54ICogYm9uZU1hdFg7XHJcbiAgICAgICAgICAgIHNraW5NYXRyaXggKz0gaW5wdXQuc2tpbldlaWdodC55ICogYm9uZU1hdFk7XHJcbiAgICAgICAgICAgIHNraW5NYXRyaXggKz0gaW5wdXQuc2tpbldlaWdodC56ICogYm9uZU1hdFo7XHJcbiAgICAgICAgICAgIHNraW5NYXRyaXggKz0gaW5wdXQuc2tpbldlaWdodC53ICogYm9uZU1hdFc7XHJcbiAgICAgICAgICAgIHNraW5NYXRyaXggPSBtYXRlcmlhbFVuaWZvcm0uYmluZE1hdHJpeEludmVyc2UgKiBza2luTWF0cml4ICogbWF0ZXJpYWxVbmlmb3JtLmJpbmRNYXRyaXg7XHJcbiAgICAgICAgICAgIG9iamVjdE5vcm1hbCA9IHZlYzQ8ZjMyPiggc2tpbk1hdHJpeCAqIHZlYzQ8ZjMyPiggb2JqZWN0Tm9ybWFsLCAwLjAgKSApLnh5ejtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEFOR0VOVH1cclxuICAgICAgICAgICAgICAgIG9iamVjdFRhbmdlbnQgPSB2ZWM0PGYzMj4oIHNraW5NYXRyaXggKiB2ZWM0PGYzMj4oIG9iamVjdFRhbmdlbnQsIDAuMCApICkueHl6O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICB2YXIgdHJhbnNmb3JtZWROb3JtYWw6dmVjMzxmMzI+ID0gb2JqZWN0Tm9ybWFsO1xyXG4gICAgICAgIC8vIHRyYW5zZm9ybWVkTm9ybWFsKz12ZWMzPGYzMj4oMC4wKTtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JTlNUQU5DSU5HfVxyXG4gICAgICAgICAgICBsZXQgbTptYXQzeDM8ZjMyPiA9IG1hdDN4MzxmMzI+KCBpbnB1dC5pbnN0YW5jZU1hdHJpeCApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm1lZE5vcm1hbCAvPSB2ZWMzPGYzMj4oIGRvdCggbVsgMCBdLCBtWyAwIF0gKSwgZG90KCBtWyAxIF0sIG1bIDEgXSApLCBkb3QoIG1bIDIgXSwgbVsgMiBdICkgKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtZWROb3JtYWwgPSBtICogdHJhbnNmb3JtZWROb3JtYWw7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgdHJhbnNmb3JtZWROb3JtYWwgPSBtYXRlcmlhbFVuaWZvcm0ubm9ybWFsTWF0cml4ICogdHJhbnNmb3JtZWROb3JtYWw7XHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5GTElQX1NJREVEfVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1lZE5vcm1hbCA9IC0gdHJhbnNmb3JtZWROb3JtYWw7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVEFOR0VOVH1cclxuICAgICAgICAgICAgbGV0IHRyYW5zZm9ybWVkVGFuZ2VudDp2ZWMzPGYzMj4gPSAoZ2xvYmFsVW5pZm9ybS52aWV3TWF0cml4Km1hdGVyaWFsVW5pZm9ybS5tb2RlbE1hdHJpeCAqIHZlYzQ8ZjMyPiggb2JqZWN0VGFuZ2VudCwgMC4wICkgKS54eXo7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuRkxJUF9TSURFRH1cclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkVGFuZ2VudCA9IC0gdHJhbnNmb3JtZWRUYW5nZW50O1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICB2ZXJ0ZXhPdXRwdXQudk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLkZMQVRfU0hBREVEfVxyXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UQU5HRU5UfVxyXG4gICAgICAgICAgICAgICAgdlRhbmdlbnQgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkVGFuZ2VudCApO1xyXG4gICAgICAgICAgICAgICAgdkJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiBpbnB1dC50YW5nZW50LncgKTtcclxuICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgbGV0IHRyYW5zZm9ybWVkOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPiggaW5wdXQucG9zaXRpb24gKTtcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NT1JQSFRBUkdFVFN9XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkICo9IG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XHJcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuTU9SUEhUQVJHRVRTX1RFWFRVUkV9XHJcbiAgICAgICAgICAgICAgICBmb3IgKCBsZXQgaSA6IHUzMiA9IDB1OyBpIDwgbWF0ZXJpYWxVbmlmb3JtLk1PUlBIVEFSR0VUU19DT1VOVDsgaSA9IGkgKyAxdSApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhID0gMC4wICkgdHJhbnNmb3JtZWQgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAwICkueHl6ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZCArPSBpbnB1dC5tb3JwaFRhcmdldDAgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZCArPSBpbnB1dC5tb3JwaFRhcmdldDEgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAxIF07XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZCArPSBpbnB1dC5tb3JwaFRhcmdldDIgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZCArPSBpbnB1dC5tb3JwaFRhcmdldDMgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XHJcbiAgICAgICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NT1JQSE5PUk1BTFN9XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtZWQgKz0gaW5wdXQubW9ycGhUYXJnZXQ0ICogbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNCBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkICs9IGlucHV0Lm1vcnBoVGFyZ2V0NSAqIG1hdGVyaWFsVW5pZm9ybS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIDUgXTtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZCArPSBpbnB1dC5tb3JwaFRhcmdldDYgKiBtYXRlcmlhbFVuaWZvcm0ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA2IF07XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtZWQgKz0gaW5wdXQubW9ycGhUYXJnZXQ3ICogbWF0ZXJpYWxVbmlmb3JtLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNyBdO1xyXG4gICAgICAgICAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1NLSU5OSU5HfVxyXG4gICAgICAgICAgICBsZXQgc2tpblZlcnRleDp2ZWM0PGYzMj4gPSBtYXRlcmlhbFVuaWZvcm0uYmluZE1hdHJpeCAqIHZlYzQ8ZjMyPiggdHJhbnNmb3JtZWQsIDEuMCApO1xyXG4gICAgICAgICAgICBsZXQgc2tpbm5lZDp2ZWM0PGYzMj4gPSB2ZWM0PGYzMj4oIDAuMCApO1xyXG4gICAgICAgICAgICBza2lubmVkICs9IGJvbmVNYXRYICogc2tpblZlcnRleCAqIGlucHV0LnNraW5XZWlnaHQueDtcclxuICAgICAgICAgICAgc2tpbm5lZCArPSBib25lTWF0WSAqIHNraW5WZXJ0ZXggKiBpbnB1dC5za2luV2VpZ2h0Lnk7XHJcbiAgICAgICAgICAgIHNraW5uZWQgKz0gYm9uZU1hdFogKiBza2luVmVydGV4ICogaW5wdXQuc2tpbldlaWdodC56O1xyXG4gICAgICAgICAgICBza2lubmVkICs9IGJvbmVNYXRXICogc2tpblZlcnRleCAqIGlucHV0LnNraW5XZWlnaHQudztcclxuICAgICAgICAgICAgdHJhbnNmb3JtZWQgPSAoIG1hdGVyaWFsVW5pZm9ybS5iaW5kTWF0cml4SW52ZXJzZSAqIHNraW5uZWQgKS54eXo7XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRElTUExBQ0VNRU5UVEVYVFVSRX0gXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkICs9IG5vcm1hbGl6ZSggb2JqZWN0Tm9ybWFsICkgKiAodGV4dHVyZVNhbXBsZShkaXNwbGFjZW1lbnRNYXAsIGJhc2VTYW1wbGVyLCB2VXYpLnggKiBtYXRlcmlhbFVuaWZvcm0uZGlzcGxhY2VtZW50U2NhbGUgKyBtYXRlcmlhbFVuaWZvcm0uZGlzcGxhY2VtZW50QmlhcyApO1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIHZhciBtdlBvc2l0aW9uOnZlYzQ8ZjMyPiA9IHZlYzQ8ZjMyPiggdHJhbnNmb3JtZWQsIDEuMCApO1xyXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0lOU1RBTkNJTkd9XHJcbiAgICAgICAgICAgIG12UG9zaXRpb24gPSBpbnB1dC5pbnN0YW5jZU1hdHJpeCAqIG12UG9zaXRpb247XHJcbiAgICAgICAgI2VuZGlmXHJcbiAgICAgICAgbXZQb3NpdGlvbiA9IGdsb2JhbFVuaWZvcm0udmlld01hdHJpeCptYXRlcmlhbFVuaWZvcm0ubW9kZWxNYXRyaXggKiBtdlBvc2l0aW9uO1xyXG4gICAgICAgIHZlcnRleE91dHB1dC5wb3NpdGlvbiA9IGdsb2JhbFVuaWZvcm0ucHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XHJcbiAgICAgICAgdmVydGV4T3V0cHV0LnZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6L212UG9zaXRpb24udztcclxuICAgICAgICAjaWYgJHtcclxuICAgICAgICAgIGRlZmluZXMuVVNFX0VOVlRFWFRVUkUgfHwgZGVmaW5lcy5ESVNUQU5DRSB8fCBkZWZpbmVzLlVTRV9UUkFOU01JU1NJT05cclxuICAgICAgICB9IFxyXG4gICAgICAgICAgICB2YXIgd29ybGRQb3NpdGlvbjp2ZWM0PGYzMj4gPSB2ZWM0PGYzMj4oIHRyYW5zZm9ybWVkLCAxLjAgKTtcclxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfSU5TVEFOQ0lOR31cclxuICAgICAgICAgICAgICAgIHdvcmxkUG9zaXRpb24gPSBpbnB1dC5pbnN0YW5jZU1hdHJpeCAqIHdvcmxkUG9zaXRpb247XHJcbiAgICAgICAgICAgICNlbmRpZlxyXG4gICAgICAgICAgICB3b3JsZFBvc2l0aW9uID0gbWF0ZXJpYWxVbmlmb3JtLm1vZGVsTWF0cml4ICogd29ybGRQb3NpdGlvbjtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9UUkFOU01JU1NJT059XHJcbiAgICAgICAgICAgIHZlcnRleE91dHB1dC52V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xyXG4gICAgICAgICNlbmRpZlxyXG4gICAgICAgIHJldHVybiB2ZXJ0ZXhPdXRwdXQ7XHJcbiAgICB9XHJcbiAgICBgO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNreUJveEZyYWcoZGVmaW5lcykge1xyXG4gIHJldHVybiBgXHJcbiAgICBmbiBsZXNzVGhhbkVxdWFsKGE6dmVjMzxmMzI+LGI6dmVjMzxmMzI+KS0+dmVjMzxmMzI+e1xyXG4gICAgICAgIGxldCB4VmFsdWU6ZjMyPXNlbGVjdChiLngsYS54LGEueDw9Yi54KTtcclxuICAgICAgICBsZXQgeVZhbHVlOmYzMj1zZWxlY3QoYi55LGEueSxhLnk8PWIueSk7XHJcbiAgICAgICAgbGV0IHpWYWx1ZTpmMzI9c2VsZWN0KGIueixhLnosYS56PD1iLnopO1xyXG4gICAgICAgIHJldHVybiB2ZWMzPGYzMj4oeFZhbHVlLHlWYWx1ZSx6VmFsdWUpOyAgICBcclxuICAgICB9XHJcbiAgICBmbiBMaW5lYXJUb3NSR0IoIHZhbHVlOnZlYzQ8ZjMyPiApLT52ZWM0PGYzMj4ge1xyXG4gICAgICAgIHJldHVybiB2ZWM0PGYzMj4oIG1peCggcG93KCB2YWx1ZS5yZ2IsIHZlYzM8ZjMyPiggMC40MTY2NiApICkgKiAxLjA1NSAtIHZlYzM8ZjMyPiggMC4wNTUgKSwgdmFsdWUucmdiICogMTIuOTIsIHZlYzM8ZjMyPiggbGVzc1RoYW5FcXVhbCggdmFsdWUucmdiLCB2ZWMzPGYzMj4oIDAuMDAzMTMwOCApICkgKSApLCB2YWx1ZS5hICk7XHJcbiAgICB9XHJcbiAgc3RydWN0IEZyYWdtZW50SW5wdXQge1xyXG4gICAgQGxvY2F0aW9uKDApIHRleENvb3JkIDogdmVjMzxmMzI+XHJcbiAgfTtcclxuICBAZ3JvdXAoMCkgQGJpbmRpbmcoMikgdmFyIGRlZmF1bHRTYW1wbGVyOiBzYW1wbGVyO1xyXG4gIEBncm91cCgwKSBAYmluZGluZygxKSB2YXIgc2t5Ym94VGV4dHVyZTogdGV4dHVyZV9jdWJlPGYzMj47XHJcbiAgQGZyYWdtZW50XHJcbiAgZm4gbWFpbihpbnB1dCA6IEZyYWdtZW50SW5wdXQpIC0+IEBsb2NhdGlvbigwKSB2ZWM0PGYzMj4ge1xyXG4gICAgbGV0IGNvbG9yID0gdGV4dHVyZVNhbXBsZShza3lib3hUZXh0dXJlLCBkZWZhdWx0U2FtcGxlciwgaW5wdXQudGV4Q29vcmQpO1xyXG4gICAgcmV0dXJuIExpbmVhclRvc1JHQihjb2xvcik7XHJcbiAgfVxyXG5gO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNreUJveFZlcnQoZGVmaW5lcykge1xyXG4gIHJldHVybiBgXHJcbiAgIHN0cnVjdCBTeXN0ZW1Vbmlmb3JtIHtcclxuICAgICAgIHByb2plY3Rpb25NYXRyaXg6IG1hdDR4NDxmMzI+LFxyXG4gICAgICAgdmlld01hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgICAgICBpbnZlcnNlVmlld01hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiAgICAgICBjYW1lcmFQb3NpdGlvbjogdmVjMzxmMzI+LFxyXG4gICB9OyBcclxuICAgc3RydWN0IE1hdGVyaWFsVW5pZm9ybSB7XHJcbiAgICBtb2RlbE1hdHJpeDogbWF0NHg0PGYzMj4sXHJcbiB9XHJcbiAgIEBiaW5kaW5nKDApIEBncm91cCgwKSB2YXI8dW5pZm9ybT4gc2VsZlVuaWZvcm0gOiBNYXRlcmlhbFVuaWZvcm07XHJcbiAgIEBiaW5kaW5nKDApIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gc3lzdGVtVW5pZm9ybSA6IFN5c3RlbVVuaWZvcm07XHJcbiAgICAgc3RydWN0IFZlcnRleElucHV0IHtcclxuICAgICAgIEBsb2NhdGlvbigwKSBwb3NpdGlvbiA6IHZlYzM8ZjMyPixcclxuICAgICB9O1xyXG4gICAgIHN0cnVjdCBWZXJ0ZXhPdXRwdXQge1xyXG4gICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uIDogdmVjNDxmMzI+LFxyXG4gICAgICAgQGxvY2F0aW9uKDApIHRleENvb3JkIDogdmVjMzxmMzI+LFxyXG4gICAgIH07XHJcbiAgICAgQHZlcnRleFxyXG4gICAgIGZuIG1haW4oaW5wdXQgOiBWZXJ0ZXhJbnB1dCkgLT4gVmVydGV4T3V0cHV0IHtcclxuICAgICAgIHZhciBvdXRwdXQgOiBWZXJ0ZXhPdXRwdXQ7XHJcbiAgICAgICBvdXRwdXQudGV4Q29vcmQgPSBpbnB1dC5wb3NpdGlvbi54eXo7XHJcbiAgICAgICB2YXIgbW9kZWxWaWV3ID0gc3lzdGVtVW5pZm9ybS52aWV3TWF0cml4O1xyXG4gICAgICAgLy8gRHJvcCB0aGUgdHJhbnNsYXRpb24gcG9ydGlvbiBvZiB0aGUgbW9kZWxWaWV3IG1hdHJpeFxyXG4gICAgICAgbW9kZWxWaWV3WzNdID0gdmVjNCgwLjAsIDAuMCwgMC4wLCBtb2RlbFZpZXdbM10udyk7XHJcbiAgICAgICBvdXRwdXQucG9zaXRpb24gPSBzeXN0ZW1Vbmlmb3JtLnByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXcgKiB2ZWM0PGYzMj4oaW5wdXQucG9zaXRpb24sMS4wKTtcclxuICAgICAgIC8vIFJldHVybmluZyB0aGUgVyBjb21wb25lbnQgZm9yIGJvdGggWiBhbmQgVyBmb3JjZXMgdGhlIGdlb21ldHJ5IGRlcHRoIHRvXHJcbiAgICAgICAvLyB0aGUgZmFyIHBsYW5lLiBXaGVuIGNvbWJpbmVkIHdpdGggYSBkZXB0aCBmdW5jIG9mIFwibGVzcy1lcXVhbFwiIHRoaXMgbWFrZXNcclxuICAgICAgIC8vIHRoZSBza3kgd3JpdGUgdG8gYW55IGRlcHRoIGZyYWdtZW50IHRoYXQgaGFzIG5vdCBiZWVuIHdyaXR0ZW4gdG8geWV0LlxyXG4gICAgICAgb3V0cHV0LnBvc2l0aW9uID0gb3V0cHV0LnBvc2l0aW9uLnh5d3c7XHJcbiAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgIH1cclxuICAgYDtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFkRnJhZyhkZWZpbmVzKSB7XHJcbiAgcmV0dXJuIGBcclxuICAgIEBncm91cCgwKSBAYmluZGluZygyKSB2YXIgYmFzZVNhbXBsZXI6IHNhbXBsZXI7XHJcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoMSkgdmFyIGNvbG9yVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xyXG4gICAgc3RydWN0IFZlcnRleE91dHB1dCB7XHJcbiAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uOiB2ZWM0PGYzMj4sXHJcbiAgICAgICAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyPGYzMj4sXHJcbiAgICB9O1xyXG4gICAgQGZyYWdtZW50XHJcbiAgICBmbiBtYWluKGlucHV0OlZlcnRleE91dHB1dCkgLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XHJcbiAgICAgIHJldHVybiB0ZXh0dXJlU2FtcGxlKGNvbG9yVGV4dHVyZSwgYmFzZVNhbXBsZXIsIHZlYzI8ZjMyPihpbnB1dC51di54LDEuMC1pbnB1dC51di55KSk7XHJcbiAgICB9XHJcbiAgICBgO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YWRWZXJ0KGRlZmluZXMpIHtcclxuICByZXR1cm4gYFxyXG4gICAgc3RydWN0IFZlcnRleElucHV0IHtcclxuICAgICAgICAgQGxvY2F0aW9uKDApIHBvc2l0aW9uOiB2ZWMyPGYzMj4sICAgICAgIFxyXG4gICAgfVxyXG4gICAgc3RydWN0IFZlcnRleE91dHB1dCB7XHJcbiAgICAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxyXG4gICAgICAgICBAbG9jYXRpb24oMCkgdXY6IHZlYzI8ZjMyPixcclxuICAgICB9O1xyXG4gICAgQHZlcnRleFxyXG4gICAgZm4gbWFpbihpbnB1dDogVmVydGV4SW5wdXQpIC0+IFZlcnRleE91dHB1dCB7XHJcbiAgICAgdmFyIG91dHB1dDpWZXJ0ZXhPdXRwdXQ7XHJcbiAgICAgb3V0cHV0LnV2ID0gaW5wdXQucG9zaXRpb24gKiAwLjUgKyAwLjU7XHJcbiAgICAgb3V0cHV0LnBvc2l0aW9uID0gdmVjNDxmMzI+KGlucHV0LnBvc2l0aW9uLCAwLjAsIDEuMCk7O1xyXG4gICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9XHJcbiAgICBgO1xyXG59XHJcbiIsIi8qXG4gKiBAQXV0aG9yOiBqdW53ZWkuZ3UganVud2VpLmd1QGppZHVhdXRvLmNvbVxuICogQERhdGU6IDIwMjMtMDEtMTggMTA6NTM6MDhcbiAqIEBMYXN0RWRpdG9yczoganVud2VpLmd1IGp1bndlaS5ndUBqaWR1YXV0by5jb21cbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjMtMDItMTYgMTc6NTk6MDFcbiAqIEBGaWxlUGF0aDogXFxHRW5naW5lXFxzcmNcXHNoYWRlclxcbWF0ZXJpYWxcXHBicl92cy50c1xuICogQERlc2NyaXB0aW9uOiDov5nmmK/pu5jorqTorr7nva4s6K+36K6+572uYGN1c3RvbU1hZGVgLCDmiZPlvIBrb3JvRmlsZUhlYWRlcuafpeeci+mFjee9riDov5vooYzorr7nva46IGh0dHBzOi8vZ2l0aHViLmNvbS9PQktvcm8xL2tvcm8xRmlsZUhlYWRlci93aWtpLyVFOSU4NSU4RCVFNyVCRCVBRVxuICovXG5pbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBicl92cyhkZWZpbmVzKSB7XG5cdHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxuICAgc3RydWN0IE1hdGVyaWFsVW5pZm9ybSB7XG4gICAgICAgIG1vZGVsTWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgICAgY29sb3I6IHZlYzM8ZjMyPixcbiAgICAgICAgb3BhY2l0eTpmMzIsXG4gICAgICAgIG5vcm1hbE1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgIGVtaXNzaXZlOnZlYzM8ZjMyPixcbiAgICAgICAgbWV0YWxsaWM6ZjMyLFxuICAgICAgICByb3VnaG5lc3M6ZjMyLFxuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9OT1JNQUxURVhUVVJFfVxuICAgICAgICAgICAgbm9ybWFsVGV4dHVyZVNjYWxlOnZlYzI8ZjMyPixcbiAgICAgICAgI2VuZGlmXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0FPVEVYVFVSRX1cbiAgICAgICAgICAgIG9jY2x1c2lvblN0cmVuZ3RoOmYzMixcbiAgICAgICAgI2VuZGlmXG4gICAgICAgIC8vICNpZiAke2RlZmluZXMuSEFTX1NLSU59IFxuICAgICAgICAvLyAgICAgam9pbnRNYXRyaXhDb3VudDpmMzIsXG4gICAgICAgIC8vICAgICBqb2ludE1hdHJpeHM6YXJyYXk8bWF0NHg0PixcbiAgICAgICAgLy8gI2VuZGlmXG4gICB9XG5cbiAgIHN0cnVjdCBTeXN0ZW1Vbmlmb3JtIHtcbiAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgIHZpZXdNYXRyaXg6IG1hdDR4NDxmMzI+LFxuICAgICAgICBpbnZlcnNlVmlld01hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgIGNhbWVyYVBvc2l0aW9uOiB2ZWMzPGYzMj4sXG4gICB9OyBcbiAgIFxuICAgc3RydWN0IFZlcnRleElucHV0IHtcbiAgICAgICAgQGxvY2F0aW9uKDApIHBvc2l0aW9uOiB2ZWMzPGYzMj4sICAgICAgIFxuICAgICAgICBAbG9jYXRpb24oMSkgbm9ybWFsOiB2ZWMzPGYzMj4sXG4gICAgICAgIEBsb2NhdGlvbigyKSB1djogdmVjMjxmMzI+LFxuICAgfVxuLy8gICAgaWZkZWYgSEFTX1NLSU5cbi8vICAgIGxheW91dChsb2NhdGlvbiA9IEpPSU5UU18wX0xPQ0FUSU9OKSBpbiB2ZWM0IGpvaW50MDtcbi8vICAgIGxheW91dChsb2NhdGlvbiA9IFdFSUdIVFNfMF9MT0NBVElPTikgaW4gdmVjNCB3ZWlnaHQwO1xuLy8gICAgaWZkZWYgU0tJTl9WRUM4XG4vLyAgICBsYXlvdXQobG9jYXRpb24gPSBKT0lOVFNfMV9MT0NBVElPTikgaW4gdmVjNCBqb2ludDE7XG4vLyAgICBsYXlvdXQobG9jYXRpb24gPSBXRUlHSFRTXzFfTE9DQVRJT04pIGluIHZlYzQgd2VpZ2h0MTtcbi8vICAgIGVuZGlmXG4vLyAgICBlbmRpZlxuICAgXG4gICBcbiAgICBzdHJ1Y3QgVmVydGV4T3V0cHV0IHtcbiAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uOnZlYzQ8ZjMyPixcbiAgICAgICAgQGxvY2F0aW9uKDApIHdvcmxkUG9zOnZlYzM8ZjMyPixcbiAgICAgICAgQGxvY2F0aW9uKDEpIG5vcm1hbDp2ZWMzPGYzMj4sXG4gICAgICAgIEBsb2NhdGlvbigyKSB1djp2ZWMyPGYzMj5cbiAgICB9ICBcblxuICAgIEBiaW5kaW5nKDApIEBncm91cCgwKSB2YXI8dW5pZm9ybT4gbWF0ZXJpYWxVbmlmb3JtIDogTWF0ZXJpYWxVbmlmb3JtO1xuICAgIEBiaW5kaW5nKDApIEBncm91cCgxKSB2YXI8dW5pZm9ybT4gc3lzdGVtVW5pZm9ybSA6IFN5c3RlbVVuaWZvcm07XG4gICAgQHZlcnRleFxuICAgZm4gbWFpbihpbnB1dDogVmVydGV4SW5wdXQpLT4gVmVydGV4T3V0cHV0XG4gICB7XG4gICAgICAgI2lmICR7ZGVmaW5lcy5IQVNfU0tJTn0gXG4gICAgICAgICAgICBtYXQ0IHNraW5NYXRyaXggPSBcbiAgICAgICAgICAgICAgICAgICB3ZWlnaHQwLnggKiB1X2pvaW50TWF0cml4Lm1hdHJpeFtpbnQoam9pbnQwLngpXSArXG4gICAgICAgICAgICAgICAgICAgd2VpZ2h0MC55ICogdV9qb2ludE1hdHJpeC5tYXRyaXhbaW50KGpvaW50MC55KV0gK1xuICAgICAgICAgICAgICAgICAgIHdlaWdodDAueiAqIHVfam9pbnRNYXRyaXgubWF0cml4W2ludChqb2ludDAueildICtcbiAgICAgICAgICAgICAgICAgICB3ZWlnaHQwLncgKiB1X2pvaW50TWF0cml4Lm1hdHJpeFtpbnQoam9pbnQwLncpXTtcbiAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5TS0lOX1ZFQzh9IFxuICAgICAgICAgICAgICAgc2tpbk1hdHJpeCArPVxuICAgICAgICAgICAgICAgICAgIHdlaWdodDEueCAqIHVfam9pbnRNYXRyaXgubWF0cml4W2ludChqb2ludDEueCldICtcbiAgICAgICAgICAgICAgICAgICB3ZWlnaHQxLnkgKiB1X2pvaW50TWF0cml4Lm1hdHJpeFtpbnQoam9pbnQxLnkpXSArXG4gICAgICAgICAgICAgICAgICAgd2VpZ2h0MS56ICogdV9qb2ludE1hdHJpeC5tYXRyaXhbaW50KGpvaW50MS56KV0gK1xuICAgICAgICAgICAgICAgICAgIHdlaWdodDEudyAqIHVfam9pbnRNYXRyaXgubWF0cml4W2ludChqb2ludDEudyldO1xuICAgICAgICAgICAjZW5kaWZcbiAgICAgICAgI2VuZGlmXG4gICAgICAgIHZhciBvdXRwdXQ6IFZlcnRleE91dHB1dDtcbiAgICAgICAgb3V0cHV0LnV2ID0gaW5wdXQudXY7XG4gICBcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5IQVNfU0tJTn0gXG4gICAgICAgICAgICBvdXRwdXQubm9ybWFsID0gbm9ybWFsaXplKChtYXRlcmlhbFVuaWZvcm0ubm9ybWFsTWF0cml4ICogdHJhbnNwb3NlKGludmVyc2Uoc2tpbk1hdHJpeCkpICogdmVjNDxmMzI+KGlucHV0Lm5vcm1hbCwgMC4wKSkueHl6KTtcbiAgICAgICAgICAgIGxldCBwb3M6dmVjNDxmMzI+ID0gc3lzdGVtVW5pZm9ybS52aWV3TWF0cml4ICptYXRlcmlhbFVuaWZvcm0ubW9kZWxNYXRyaXgqc2tpbk1hdHJpeCAqIHZlYzQ8ZjMyPihpbnB1dC5wb3NpdGlvbiwgMS4wKTtcbiAgICAgICAgICAgIG91dHB1dC5wb3NpdGlvbiA9IHN5c3RlbVVuaWZvcm0ucHJvamVjdGlvbk1hdHJpeCAqIHN5c3RlbVVuaWZvcm0udmlld01hdHJpeCptYXRlcmlhbFVuaWZvcm0ubW9kZWxNYXRyaXggKiBza2luTWF0cml4ICogdmVjNDxmMzI+KGlucHV0LnBvc2l0aW9uLDEuMCk7XG4gICAgICAgICNlbHNlXG4gICAgICAgICAgICBsZXQgdk5vcm1hbFZpZXcgPSBtYXRlcmlhbFVuaWZvcm0ubm9ybWFsTWF0cml4ICogdmVjNDxmMzI+KGlucHV0Lm5vcm1hbCwwLjApO1xuICAgICAgICAgICAgb3V0cHV0Lm5vcm1hbCA9ICB2Tm9ybWFsVmlldy54eXo7XG4gICAgICAgICAgICBsZXQgcG9zOnZlYzQ8ZjMyPj1zeXN0ZW1Vbmlmb3JtLnZpZXdNYXRyaXggKm1hdGVyaWFsVW5pZm9ybS5tb2RlbE1hdHJpeCp2ZWM0PGYzMj4oaW5wdXQucG9zaXRpb24sIDEuMCk7XG4gICAgICAgICAgICBvdXRwdXQucG9zaXRpb24gPSBzeXN0ZW1Vbmlmb3JtLnByb2plY3Rpb25NYXRyaXggKiBzeXN0ZW1Vbmlmb3JtLnZpZXdNYXRyaXggKm1hdGVyaWFsVW5pZm9ybS5tb2RlbE1hdHJpeCogdmVjNDxmMzI+KGlucHV0LnBvc2l0aW9uLCAxLjApO1xuICAgICAgICAjZW5kaWYgICAgICBcbiAgICAgICAgLy8gb3V0cHV0LndvcmxkUG9zID0gcG9zLnh5ei9wb3MudzsgXG4gICAgICAgIGxldCBtb2RlbFBvcz1tYXRlcmlhbFVuaWZvcm0ubW9kZWxNYXRyaXggKnZlYzQ8ZjMyPihpbnB1dC5wb3NpdGlvbiwxLjApO1xuICAgICAgICBvdXRwdXQud29ybGRQb3MgPSBtb2RlbFBvcy54eXovbW9kZWxQb3MudztcbiAgICAgICAgcmV0dXJuIG91dHB1dDsgICBcbiAgIH1cbiAgIGA7XG59XG4iLCJpbXBvcnQgeyB3Z3NsUGFyc2VEZWZpbmVzIH0gZnJvbSBcIi4uL1dnc2xQcmVwcm9jZXNzb3JcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBicl9mcyhkZWZpbmVzKSB7XG5cdHJldHVybiB3Z3NsUGFyc2VEZWZpbmVzYFxuICAgICAgICAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi1XZWJHTC1QQlIvYmxvYi9tYXN0ZXIvc2hhZGVycy9wYnItZnJhZy5nbHNsXG4gICAgICAgICNpbmNsdWRlIDxwYnJVdGlscz5cbiAgICAgICAgI2luY2x1ZGUgPGxpZ2h0PlxuICAgICAgICAjaW5jbHVkZSA8YnJkZj5cbiAgICAgICAgc3RydWN0IE1hdGVyaWFsVW5pZm9ybSB7XG4gICAgICAgICAgICBtb2RlbE1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgICAgICBjb2xvcjogdmVjMzxmMzI+LFxuICAgICAgICAgICAgb3BhY2l0eTpmMzIsXG4gICAgICAgICAgICBub3JtYWxNYXRyaXg6IG1hdDN4MzxmMzI+LFxuICAgICAgICAgICAgZW1pc3NpdmU6dmVjMzxmMzI+LFxuICAgICAgICAgICAgbWV0YWxsaWM6ZjMyLFxuICAgICAgICAgICAgcm91Z2huZXNzOmYzMixcbiAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX05PUk1BTFRFWFRVUkV9XG4gICAgICAgICAgICAgICAgbm9ybWFsVGV4dHVyZVNjYWxlOnZlYzI8ZjMyPixcbiAgICAgICAgICAgICNlbmRpZlxuICAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQU9URVhUVVJFfVxuICAgICAgICAgICAgICAgIG9jY2x1c2lvblN0cmVuZ3RoOmYzMixcbiAgICAgICAgICAgICNlbmRpZlxuICAgICAgICAgfVxuICAgICAgICAgc3RydWN0IFN5c3RlbVVuaWZvcm0ge1xuICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogbWF0NHg0PGYzMj4sXG4gICAgICAgICAgICB2aWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgICAgICAgIGludmVyc2VWaWV3TWF0cml4OiBtYXQ0eDQ8ZjMyPixcbiAgICAgICAgICAgIGNhbWVyYVBvc2l0aW9uOiB2ZWMzPGYzMj4sXG4gICAgICAgIH07IFxuICAgICAgICBzdHJ1Y3QgVmVydElucHV0IHtcbiAgICAgICAgICAgIEBsb2NhdGlvbigwKSB3b3JsZFBvczp2ZWMzPGYzMj4sXG4gICAgICAgICAgICBAbG9jYXRpb24oMSkgbm9ybWFsOnZlYzM8ZjMyPixcbiAgICAgICAgICAgIEBsb2NhdGlvbigyKSB1djp2ZWMyPGYzMj5cbiAgICAgICAgfSAgICBcbiAgICAgICAgc3RydWN0IFBCUkluZm9cbiAgICAgICAge1xuICAgICAgICAgICAgTmRvdEw6ZjMyLCAgICAgICAgICAgICAgICAgLy8gY29zIGFuZ2xlIGJldHdlZW4gbm9ybWFsIGFuZCBsaWdodCBkaXJlY3Rpb25cbiAgICAgICAgICAgIE5kb3RWOmYzMiwgICAgICAgICAgICAgICAgICAvLyBjb3MgYW5nbGUgYmV0d2VlbiBub3JtYWwgYW5kIHZpZXcgZGlyZWN0aW9uXG4gICAgICAgICAgICBOZG90SDpmMzIsICAgICAgICAgICAgICAgICAgLy8gY29zIGFuZ2xlIGJldHdlZW4gbm9ybWFsIGFuZCBoYWxmIHZlY3RvclxuICAgICAgICAgICAgTGRvdEg6ZjMyLCAgICAgICAgICAgICAgICAgIC8vIGNvcyBhbmdsZSBiZXR3ZWVuIGxpZ2h0IGRpcmVjdGlvbiBhbmQgaGFsZiB2ZWN0b3JcbiAgICAgICAgICAgIFZkb3RIOmYzMiwgICAgICAgICAgICAgICAgICAvLyBjb3MgYW5nbGUgYmV0d2VlbiB2aWV3IGRpcmVjdGlvbiBhbmQgaGFsZiB2ZWN0b3JcbiAgICAgICAgICAgIHBlcmNlcHR1YWxSb3VnaG5lc3M6ZjMyLCAgICAvLyByb3VnaG5lc3MgdmFsdWUsIGFzIGF1dGhvcmVkIGJ5IHRoZSBtb2RlbCBjcmVhdG9yIChpbnB1dCB0byBzaGFkZXIpXG4gICAgICAgICAgICBtZXRhbG5lc3M6ZjMyLCAgICAgICAgICAgICAgLy8gbWV0YWxsaWMgdmFsdWUgYXQgdGhlIHN1cmZhY2VcbiAgICAgICAgICAgIHJlZmxlY3RhbmNlMDp2ZWMzPGYzMj4sICAgICAgICAgICAvLyBmdWxsIHJlZmxlY3RhbmNlIGNvbG9yIChub3JtYWwgaW5jaWRlbmNlIGFuZ2xlKVxuICAgICAgICAgICAgcmVmbGVjdGFuY2U5MDp2ZWMzPGYzMj4sICAgICAgICAgICAvLyByZWZsZWN0YW5jZSBjb2xvciBhdCBncmF6aW5nIGFuZ2xlXG4gICAgICAgICAgICBhbHBoYVJvdWdobmVzczpmMzIsICAgICAgICAgLy8gcm91Z2huZXNzIG1hcHBlZCB0byBhIG1vcmUgbGluZWFyIGNoYW5nZSBpbiB0aGUgcm91Z2huZXNzIChwcm9wb3NlZCBieSBbMl0pXG4gICAgICAgICAgICBkaWZmdXNlQ29sb3I6dmVjMzxmMzI+LCAgICAgICAgICAgIC8vIGNvbG9yIGNvbnRyaWJ1dGlvbiBmcm9tIGRpZmZ1c2UgbGlnaHRpbmdcbiAgICAgICAgICAgIHNwZWN1bGFyQ29sb3I6dmVjMzxmMzI+LCAgICAgICAgICAgLy8gY29sb3IgY29udHJpYnV0aW9uIGZyb20gc3BlY3VsYXIgbGlnaHRpbmdcbiAgICAgICAgfTtcbiAgICAgICAgc3RydWN0IFBoeXNpY2FsTWF0ZXJpYWwge1xuICAgICAgICAgICAgZGlmZnVzZUNvbG9yOnZlYzM8ZjMyPixcbiAgICAgICAgICAgIHJvdWdobmVzczpmMzIsXG4gICAgICAgICAgICBzcGVjdWxhckNvbG9yOnZlYzM8ZjMyPixcbiAgICAgICAgICAgIHNwZWN1bGFyRjkwOmYzMixcbiAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQ0xFQVJDT0FUfVxuICAgICAgICAgICAgICAgY2xlYXJjb2F0OmYzMixcbiAgICAgICAgICAgICAgIGNsZWFyY29hdFJvdWdobmVzczpmMzIsXG4gICAgICAgICAgICAgICBjbGVhcmNvYXRGMDp2ZWMzPGYzMj4sXG4gICAgICAgICAgICAgICBjbGVhcmNvYXRGOTA6ZjMyLFxuICAgICAgICAgICAjZW5kaWZcblxuICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9JUklERVNDRU5DRX1cbiAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlOmYzMixcbiAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlSU9SOmYzMixcbiAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlVGhpY2tuZXNzOmYzMixcbiAgICAgICAgICAgICAgIGlyaWRlc2NlbmNlRnJlc25lbDp2ZWMzPGYzMj4sXG4gICAgICAgICAgICAgICBpcmlkZXNjZW5jZUYwOnZlYzM8ZjMyPixcbiAgICAgICAgICAgI2VuZGlmXG5cbiAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfU0hFRU59XG4gICAgICAgICAgICAgICBzaGVlbkNvbG9yOnZlYzM8ZjMyPixcbiAgICAgICAgICAgICAgIHNoZWVuUm91Z2huZXNzOmYzMixcbiAgICAgICAgICAgI2VuZGlmXG5cbiAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5JT1J9XG4gICAgICAgICAgICAgICAgaW9yOmYzMixcbiAgICAgICAgICAgI2VuZGlmXG5cbiAgICAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfVFJBTlNNSVNTSU9OfVxuICAgICAgICAgICAgICAgdHJhbnNtaXNzaW9uOmYzMixcbiAgICAgICAgICAgICAgIHRyYW5zbWlzc2lvbkFscGhhOmYzMixcbiAgICAgICAgICAgICAgIHRoaWNrbmVzczpmMzIsXG4gICAgICAgICAgICAgICBhdHRlbnVhdGlvbkRpc3RhbmNlOmYzMixcbiAgICAgICAgICAgICAgIGF0dGVudWF0aW9uQ29sb3I6dmVjMzxmMzI+LFxuICAgICAgICAgICAjZW5kaWZcbiAgICAgICB9O1xuICAgICAgICBjb25zdCBNX1BJOmYzMiA9IDMuMTQxNTkyNjUzNTg5NzkzO1xuICAgICAgICBjb25zdCBjX01pblJvdWdobmVzczpmMzIgPSAwLjA0O1xuICAgICAgICBAYmluZGluZygwKSBAZ3JvdXAoMCkgdmFyPHVuaWZvcm0+IG1hdGVyaWFsVW5pZm9ybSA6IE1hdGVyaWFsVW5pZm9ybTtcbiAgICAgICAgQGJpbmRpbmcoMCkgQGdyb3VwKDEpIHZhcjx1bmlmb3JtPiBzeXN0ZW1Vbmlmb3JtIDogU3lzdGVtVW5pZm9ybTtcbiAgICAgICAgLy8gSUJMXG4gICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuZGlmZnVzZUVudlRleHR1cmVCaW5kaW5nfSkgdmFyIGRpZmZ1c2VFbnZTYW1wbGVyOiB0ZXh0dXJlX2N1YmU8ZjMyPjtcbiAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5zcGVjdWxhckVudlRleHR1cmVCaW5kaW5nfSkgdmFyIHNwZWN1bGFyRW52U2FtcGxlcjogdGV4dHVyZV9jdWJlPGYzMj47XG4gICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYmFzZVNhbXBsZXJCaW5kaW5nfSkgdmFyIGRlZmF1bHRTYW1wbGVyOiBzYW1wbGVyO1xuICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLmJyZGZUZXh0dXJlQmluZGluZ30pIHZhciBicmRmTFVUOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RFWFRVUkV9XG4gICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYmFzZVRleHR1cmVCaW5kaW5nfSkgdmFyIGJhc2VDb2xvclRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICAgICAgI2VuZGlmXG4gICAgICAgIC8vIG5vcm1hbCBtYXBcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfTk9STUFMVEVYVFVSRX1cbiAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoJHtkZWZpbmVzLm5vcm1hbFRleHR1cmVCaW5kaW5nfSkgdmFyIG5vcm1hbFRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICAgICAgI2VuZGlmXG5cbiAgICAgICAgLy8gZW1taXN2ZSBtYXBcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfRU1JU1NJVkVURVhUVVJFfVxuICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKCR7ZGVmaW5lcy5lbWlzc2l2ZVRleHR1cmVCaW5kaW5nfSkgdmFyIHVfZW1pc3NpdmVUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICNlbmRpZlxuXG4gICAgICAgIC8vIG1ldGFsIHJvdWdobmVzc1xuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9NRVRBTE5FU1NURVhUVVJFfVxuICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMubWV0YWxuZXNzUm91Z2huZXNzVGV4dHVyZUJpbmRpbmd9KSB2YXIgbWV0YWxuZXNzUm91Z2huZXNzVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xuICAgICAgICAjZW5kaWZcbiAgICAgICAgLy8gb2NjbHVzaW9uIHRleHR1cmVcbiAgICAgICAgI2lmICR7ZGVmaW5lcy5VU0VfQU9URVhUVVJFfVxuICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygke2RlZmluZXMuYW9UZXh0dXJlQmluZGluZ30pIHZhciBhb1RleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICAgICAgI2VuZGlmXG5cbiAgICAgICAgLy8gRmluZCB0aGUgbm9ybWFsIGZvciB0aGlzIGZyYWdtZW50LCBwdWxsaW5nIGVpdGhlciBmcm9tIGEgcHJlZGVmaW5lZCBub3JtYWwgbWFwXG4gICAgICAgIC8vIG9yIGZyb20gdGhlIGludGVycG9sYXRlZCBtZXNoIG5vcm1hbCBhbmQgdGFuZ2VudCBhdHRyaWJ1dGVzLlxuICAgICAgICBmbiBnZXROb3JtYWwoaW5wdXQ6VmVydElucHV0XG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9OT1JNQUxURVhUVVJFfVxuICAgICAgICAgICAgLG5vcm1hbFRleHR1cmU6dGV4dHVyZV8yZDxmMzI+LGRlZmF1bHRTYW1wbGVyOnNhbXBsZXJcbiAgICAgICAgICAgICNlbmRpZlxuICAgICAgICAgICAgKS0+dmVjMzxmMzI+XG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSB0YW5nZW50IHNwYWNlIG1hdHJpeFxuICAgICAgICAgICAgbGV0IHBvc19keDp2ZWMzPGYzMj4gPSBkcGR4KGlucHV0LndvcmxkUG9zKTtcbiAgICAgICAgICAgIGxldCBwb3NfZHk6dmVjMzxmMzI+ID0gZHBkeShpbnB1dC53b3JsZFBvcyk7XG4gICAgICAgICAgICBsZXQgdGV4X2R4OnZlYzM8ZjMyPiA9IGRwZHgodmVjMzxmMzI+KGlucHV0LnV2LCAwLjApKTtcbiAgICAgICAgICAgIGxldCB0ZXhfZHk6dmVjMzxmMzI+ID0gZHBkeSh2ZWMzPGYzMj4oaW5wdXQudXYsIDAuMCkpO1xuICAgICAgICAgICAgdmFyIHQ6dmVjMzxmMzI+ID0gKHRleF9keS55ICogcG9zX2R4IC0gdGV4X2R4LnkgKiBwb3NfZHkpIC8gKHRleF9keC54ICogdGV4X2R5LnkgLSB0ZXhfZHkueCAqIHRleF9keC55KTtcbiAgICAgICAgICAgIGxldCBuZyA9IGlucHV0Lm5vcm1hbDtcbiAgICAgICAgICAgIHQgPSBub3JtYWxpemUodCAtIG5nICogZG90KG5nLCB0KSk7XG4gICAgICAgICAgICBsZXQgYjp2ZWMzPGYzMj4gPSBub3JtYWxpemUoY3Jvc3MobmcsIHQpKTtcbiAgICAgICAgICAgIGxldCB0Ym46bWF0M3gzPGYzMj4gPSBtYXQzeDM8ZjMyPih0LCBiLCBuZyk7XG4gICAgICAgIC8vIFRPRE86IFRBTkdFTlRTXG4gICAgICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9OT1JNQUxURVhUVVJFfVxuICAgICAgICAgICAgICAgIHZhciBuOnZlYzM8ZjMyPiA9IHRleHR1cmVTYW1wbGUobm9ybWFsVGV4dHVyZSxkZWZhdWx0U2FtcGxlciwgaW5wdXQudXYpLnJnYjtcbiAgICAgICAgICAgICAgICBuID0gbm9ybWFsaXplKHRibiAqICgoMi4wICogbiAtIDEuMCkgKiB2ZWMzPGYzMj4obWF0ZXJpYWxVbmlmb3JtLm5vcm1hbFRleHR1cmVTY2FsZSwgMS4wKSkpO1xuICAgICAgICAgICAgI2Vsc2VcbiAgICAgICAgICAgICAgICB2YXIgbjp2ZWMzPGYzMj4gPSB0Ym5bMl0ueHl6O1xuICAgICAgICAgICAgI2VuZGlmXG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZuIGdldElCTENvbnRyaWJ1dGlvbiggcGJySW5wdXRzOlBCUkluZm8sIG46dmVjMzxmMzI+LCByZWZsZWN0aW9uOnZlYzM8ZjMyPixicmRmTFVUOnRleHR1cmVfMmQ8ZjMyPixzcGVjdWxhckVudlNhbXBsZXI6dGV4dHVyZV9jdWJlPGYzMj4sZGlmZnVzZUVudlNhbXBsZXI6dGV4dHVyZV9jdWJlPGYzMj4sZGVmYXVsdFNhbXBsZXI6c2FtcGxlciktPnZlYzM8ZjMyPlxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgbWlwQ291bnQ6ZjMyID0gMTAuMDsgLy8gcmVzb2x1dGlvbiBvZiAyNTZ4MjU2XG4gICAgICAgICAgICBsZXQgbG9kOmYzMiA9IChwYnJJbnB1dHMucGVyY2VwdHVhbFJvdWdobmVzcyAqIG1pcENvdW50KTtcbiAgICAgICAgICAgIC8vIHJldHJpZXZlIGEgc2NhbGUgYW5kIGJpYXMgdG8gRjAuIFNlZSBbMV0sIEZpZ3VyZSAzXG4gICAgICAgICAgICBsZXQgYnJkZjp2ZWMzPGYzMj4gPSB0ZXh0dXJlU2FtcGxlKGJyZGZMVVQsIGRlZmF1bHRTYW1wbGVyLHZlYzI8ZjMyPihwYnJJbnB1dHMuTmRvdFYsIDEuMCAtIHBicklucHV0cy5wZXJjZXB0dWFsUm91Z2huZXNzKSkucmdiO1xuICAgICAgICAgICAgbGV0IGRpZmZ1c2VMaWdodDp2ZWMzPGYzMj4gPSB0ZXh0dXJlU2FtcGxlKGRpZmZ1c2VFbnZTYW1wbGVyLGRlZmF1bHRTYW1wbGVyLCBuKS5yZ2I7XG4gICAgICAgICAgICBsZXQgc3BlY3VsYXJMaWdodDp2ZWMzPGYzMj4gPSB0ZXh0dXJlU2FtcGxlTGV2ZWwoc3BlY3VsYXJFbnZTYW1wbGVyLGRlZmF1bHRTYW1wbGVyLCByZWZsZWN0aW9uLCBsb2QpLnJnYjtcbiAgICAgICAgICAgIGxldCBkaWZmdXNlOnZlYzM8ZjMyPiA9IGRpZmZ1c2VMaWdodCAqIHBicklucHV0cy5kaWZmdXNlQ29sb3I7XG4gICAgICAgICAgICBsZXQgc3BlY3VsYXI6dmVjMzxmMzI+ID0gc3BlY3VsYXJMaWdodCAqIChwYnJJbnB1dHMuc3BlY3VsYXJDb2xvciAqIGJyZGYueCArIGJyZGYueSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkaWZmdXNlICsgc3BlY3VsYXI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCYXNpYyBMYW1iZXJ0aWFuIGRpZmZ1c2VcbiAgICAgICAgLy8gSW1wbGVtZW50YXRpb24gZnJvbSBMYW1iZXJ0J3MgUGhvdG9tZXRyaWEgaHR0cHM6Ly9hcmNoaXZlLm9yZy9kZXRhaWxzL2xhbWJlcnRzcGhvdG9tZTAwbGFtYmdvb2dcbiAgICAgICAgLy8gU2VlIGFsc28gWzFdLCBFcXVhdGlvbiAxXG4gICAgICAgIGZuIGRpZmZ1c2UocGJySW5wdXRzOlBCUkluZm8pLT52ZWMzPGYzMj5cbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHBicklucHV0cy5kaWZmdXNlQ29sb3IgLyBNX1BJO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGVxdWF0aW9uIG1vZGVscyB0aGUgRnJlc25lbCByZWZsZWN0YW5jZSB0ZXJtIG9mIHRoZSBzcGVjIGVxdWF0aW9uIChha2EgRigpKVxuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiBvZiBmcmVzbmVsIGZyb20gWzRdLCBFcXVhdGlvbiAxNVxuICAgICAgICBmbiBzcGVjdWxhclJlZmxlY3Rpb24ocGJySW5wdXRzOlBCUkluZm8pLT52ZWMzPGYzMj5cbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHBicklucHV0cy5yZWZsZWN0YW5jZTAgKyAocGJySW5wdXRzLnJlZmxlY3RhbmNlOTAgLSBwYnJJbnB1dHMucmVmbGVjdGFuY2UwKSAqIHBvdyhjbGFtcCgxLjAgLSBwYnJJbnB1dHMuVmRvdEgsIDAuMCwgMS4wKSwgNS4wKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gVGhpcyBjYWxjdWxhdGVzIHRoZSBzcGVjdWxhciBnZW9tZXRyaWMgYXR0ZW51YXRpb24gKGFrYSBHKCkpLFxuICAgICAgICAvLyB3aGVyZSByb3VnaGVyIG1hdGVyaWFsIHdpbGwgcmVmbGVjdCBsZXNzIGxpZ2h0IGJhY2sgdG8gdGhlIHZpZXdlci5cbiAgICAgICAgLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiBbMV0gRXF1YXRpb24gNCwgYW5kIHdlIGFkb3B0IHRoZWlyIG1vZGlmaWNhdGlvbnMgdG9cbiAgICAgICAgLy8gYWxwaGFSb3VnaG5lc3MgYXMgaW5wdXQgYXMgb3JpZ2luYWxseSBwcm9wb3NlZCBpbiBbMl0uXG4gICAgICAgIGZuIGdlb21ldHJpY09jY2x1c2lvbiggcGJySW5wdXRzOlBCUkluZm8pLT5mMzJcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IE5kb3RMOmYzMiA9IHBicklucHV0cy5OZG90TDtcbiAgICAgICAgICAgIGxldCBOZG90VjpmMzIgPSBwYnJJbnB1dHMuTmRvdFY7XG4gICAgICAgICAgICBsZXQgcjpmMzIgPSBwYnJJbnB1dHMuYWxwaGFSb3VnaG5lc3M7XG5cbiAgICAgICAgICAgIGxldCBhdHRlbnVhdGlvbkw6ZjMyID0gMi4wICogTmRvdEwgLyAoTmRvdEwgKyBzcXJ0KHIgKiByICsgKDEuMCAtIHIgKiByKSAqIChOZG90TCAqIE5kb3RMKSkpO1xuICAgICAgICAgICAgbGV0IGF0dGVudWF0aW9uViA6ZjMyPSAyLjAgKiBOZG90ViAvIChOZG90ViArIHNxcnQociAqIHIgKyAoMS4wIC0gciAqIHIpICogKE5kb3RWICogTmRvdFYpKSk7XG4gICAgICAgICAgICByZXR1cm4gYXR0ZW51YXRpb25MICogYXR0ZW51YXRpb25WO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGVxdWF0aW9uKHMpIG1vZGVsIHRoZSBkaXN0cmlidXRpb24gb2YgbWljcm9mYWNldCBub3JtYWxzIGFjcm9zcyB0aGUgYXJlYSBiZWluZyBkcmF3biAoYWthIEQoKSlcbiAgICAgICAgLy8gSW1wbGVtZW50YXRpb24gZnJvbSBcIkF2ZXJhZ2UgSXJyZWd1bGFyaXR5IFJlcHJlc2VudGF0aW9uIG9mIGEgUm91Z2hlbmVkIFN1cmZhY2UgZm9yIFJheSBSZWZsZWN0aW9uXCIgYnkgVC4gUy4gVHJvd2JyaWRnZSwgYW5kIEsuIFAuIFJlaXR6XG4gICAgICAgIC8vIEZvbGxvd3MgdGhlIGRpc3RyaWJ1dGlvbiBmdW5jdGlvbiByZWNvbW1lbmRlZCBpbiB0aGUgU0lHR1JBUEggMjAxMyBjb3Vyc2Ugbm90ZXMgZnJvbSBFUElDIEdhbWVzIFsxXSwgRXF1YXRpb24gMy5cbiAgICAgICAgZm4gbWljcm9mYWNldERpc3RyaWJ1dGlvbiggcGJySW5wdXRzOlBCUkluZm8pLT5mMzJcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHJvdWdobmVzc1NxOmYzMiA9IHBicklucHV0cy5hbHBoYVJvdWdobmVzcyAqIHBicklucHV0cy5hbHBoYVJvdWdobmVzcztcbiAgICAgICAgICAgIGxldCBmOmYzMiA9IChwYnJJbnB1dHMuTmRvdEggKiByb3VnaG5lc3NTcSAtIHBicklucHV0cy5OZG90SCkgKiBwYnJJbnB1dHMuTmRvdEggKyAxLjA7XG4gICAgICAgICAgICByZXR1cm4gcm91Z2huZXNzU3EgLyAoTV9QSSAqIGYgKiBmKTtcbiAgICAgICAgfVxuICAgICAgICBAZnJhZ21lbnRcbiAgICAgICAgZm4gbWFpbihpbnB1dDpWZXJ0SW5wdXQpIC0+IEBsb2NhdGlvbigwKSB2ZWM0PGYzMj4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBwZXJjZXB0dWFsUm91Z2huZXNzOmYzMiA9IG1hdGVyaWFsVW5pZm9ybS5yb3VnaG5lc3M7XG4gICAgICAgICAgICB2YXIgbWV0YWxsaWM6ZjMyID0gbWF0ZXJpYWxVbmlmb3JtLm1ldGFsbGljO1xuXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX01FVEFMTkVTU1RFWFRVUkV9XG4gICAgICAgICAgICAvLyBSb3VnaG5lc3MgaXMgc3RvcmVkIGluIHRoZSAnZycgY2hhbm5lbCwgbWV0YWxsaWMgaXMgc3RvcmVkIGluIHRoZSAnYicgY2hhbm5lbC5cbiAgICAgICAgICAgIC8vIFRoaXMgbGF5b3V0IGludGVudGlvbmFsbHkgcmVzZXJ2ZXMgdGhlICdyJyBjaGFubmVsIGZvciAob3B0aW9uYWwpIG9jY2x1c2lvbiBtYXAgZGF0YVxuICAgICAgICAgICAgbGV0IG1yU2FtcGxlOnZlYzQ8ZjMyPiA9IHRleHR1cmVTYW1wbGUobWV0YWxuZXNzUm91Z2huZXNzVGV4dHVyZSxkZWZhdWx0U2FtcGxlciwgaW5wdXQudXYpO1xuICAgICAgICAgICAgcGVyY2VwdHVhbFJvdWdobmVzcyA9IG1yU2FtcGxlLmcgKiBwZXJjZXB0dWFsUm91Z2huZXNzO1xuICAgICAgICAgICAgbWV0YWxsaWMgPSBtclNhbXBsZS5iICogbWV0YWxsaWM7XG4gICAgICAgICNlbmRpZlxuICAgICAgICAgICAgcGVyY2VwdHVhbFJvdWdobmVzcyA9IGNsYW1wKHBlcmNlcHR1YWxSb3VnaG5lc3MsIGNfTWluUm91Z2huZXNzLCAxLjApO1xuICAgICAgICAgICAgbWV0YWxsaWMgPSBjbGFtcChtZXRhbGxpYywgMC4wLCAxLjApO1xuICAgICAgICAgICAgLy8gUm91Z2huZXNzIGlzIGF1dGhvcmVkIGFzIHBlcmNlcHR1YWwgcm91Z2huZXNzOyBhcyBpcyBjb252ZW50aW9uLFxuICAgICAgICAgICAgLy8gY29udmVydCB0byBtYXRlcmlhbCByb3VnaG5lc3MgYnkgc3F1YXJpbmcgdGhlIHBlcmNlcHR1YWwgcm91Z2huZXNzIFsyXS5cbiAgICAgICAgICAgIGxldCBhbHBoYVJvdWdobmVzczpmMzIgPSBwZXJjZXB0dWFsUm91Z2huZXNzICogcGVyY2VwdHVhbFJvdWdobmVzcztcblxuXG4gICAgICAgICAgICAvLyBUaGUgYWxiZWRvIG1heSBiZSBkZWZpbmVkIGZyb20gYSBiYXNlIHRleHR1cmUgb3IgYSBmbGF0IGNvbG9yXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX1RFWFRVUkV9XG4gICAgICAgICAgICBsZXQgYmFzZUNvbG9yOnZlYzQ8ZjMyPiA9IHRleHR1cmVTYW1wbGUoYmFzZUNvbG9yVGV4dHVyZSxkZWZhdWx0U2FtcGxlciwgaW5wdXQudXYpIDtcbiAgICAgICAgI2Vsc2VcbiAgICAgICAgICAgIGxldCBiYXNlQ29sb3I6dmVjNDxmMzI+ID0gdmVjNDxmMzI+KG1hdGVyaWFsVW5pZm9ybS5jb2xvciwxLjApO1xuICAgICAgICAjZW5kaWZcbiAgICAgICAgICAgIGxldCBmMDp2ZWMzPGYzMj4gPSB2ZWMzPGYzMj4oMC4wNCk7XG4gICAgICAgICAgICB2YXIgZGlmZnVzZUNvbG9yOnZlYzM8ZjMyPiA9IGJhc2VDb2xvci5yZ2IgKiAodmVjMzxmMzI+KDEuMCkgLSBmMCk7XG4gICAgICAgICAgICBkaWZmdXNlQ29sb3IgKj0gMS4wIC0gbWV0YWxsaWM7XG4gICAgICAgICAgICBsZXQgc3BlY3VsYXJDb2xvcjp2ZWMzPGYzMj4gPSBtaXgoZjAsIGJhc2VDb2xvci5yZ2IsIG1ldGFsbGljKTtcblxuICAgICAgICAgICAgLy8gQ29tcHV0ZSByZWZsZWN0YW5jZS5cbiAgICAgICAgICAgIGxldCByZWZsZWN0YW5jZTpmMzIgPSBtYXgobWF4KHNwZWN1bGFyQ29sb3Iuciwgc3BlY3VsYXJDb2xvci5nKSwgc3BlY3VsYXJDb2xvci5iKTtcblxuXG4gICAgICAgICAgICAvLyBGb3IgdHlwaWNhbCBpbmNpZGVudCByZWZsZWN0YW5jZSByYW5nZSAoYmV0d2VlbiA0JSB0byAxMDAlKSBzZXQgdGhlIGdyYXppbmcgcmVmbGVjdGFuY2UgdG8gMTAwJSBmb3IgdHlwaWNhbCBmcmVzbmVsIGVmZmVjdC5cbiAgICAgICAgICAgIC8vIEZvciB2ZXJ5IGxvdyByZWZsZWN0YW5jZSByYW5nZSBvbiBoaWdobHkgZGlmZnVzZSBvYmplY3RzIChiZWxvdyA0JSksIGluY3JlbWVudGFsbHkgcmVkdWNlIGdyYXppbmcgcmVmbGVjYW5jZSB0byAwJS5cbiAgICAgICAgICAgIGxldCByZWZsZWN0YW5jZTkwOmYzMiA9IGNsYW1wKHJlZmxlY3RhbmNlICogMjUuMCwgMC4wLCAxLjApO1xuICAgICAgICAgICAgbGV0IHNwZWN1bGFyRW52aXJvbm1lbnRSMDp2ZWMzPGYzMj4gPSBzcGVjdWxhckNvbG9yLnJnYjtcbiAgICAgICAgICAgIGxldCBzcGVjdWxhckVudmlyb25tZW50UjkwOnZlYzM8ZjMyPiA9IHZlYzM8ZjMyPigxLjAsIDEuMCwgMS4wKSAqIHJlZmxlY3RhbmNlOTA7XG4gICAgIFxuICAgICAgICAgICAgICAgICNpZiAke2RlZmluZXMuVVNFX05PUk1BTFRFWFRVUkV9XG4gICAgICAgICAgICAgICAgbGV0IG46dmVjMzxmMzI+ID0gZ2V0Tm9ybWFsKGlucHV0LG5vcm1hbFRleHR1cmUsZGVmYXVsdFNhbXBsZXIpOyAgXG4gICAgICAgICAgICAgICAgI2Vsc2VcbiAgICAgICAgICAgICAgICBsZXQgbjp2ZWMzPGYzMj4gPSBnZXROb3JtYWwoaW5wdXQpO1xuICAgICAgICAgICAgICAgICNlbmRpZlxuXG4gICAgICAgICAgICAvL2xldCBuOnZlYzM8ZjMyPiA9IGdldE5vcm1hbChpbnB1dCxub3JtYWxUZXh0dXJlLGRlZmF1bHRTYW1wbGVyKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vcm1hbCBhdCBzdXJmYWNlIHBvaW50XG4gICAgICAgICAgICAvLyB2ZWMzIHYgPSB2ZWMzKCAwLjAsIDAuMCwgMS4wICk7ICAgICAgICAvLyBWZWN0b3IgZnJvbSBzdXJmYWNlIHBvaW50IHRvIGNhbWVyYVxuICAgICAgICAgICAgbGV0IHY6dmVjMzxmMzI+ID1ub3JtYWxpemUoc3lzdGVtVW5pZm9ybS5jYW1lcmFQb3NpdGlvbiAtIGlucHV0LndvcmxkUG9zKTsgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlY3RvciBmcm9tIHN1cmZhY2UgcG9pbnQgdG8gY2FtZXJhXG4gICAgICAgICAgICAvLyB2ZWMzIGwgPSBub3JtYWxpemUodV9MaWdodERpcmVjdGlvbik7ICAgICAgICAgICAgIC8vIFZlY3RvciBmcm9tIHN1cmZhY2UgcG9pbnQgdG8gbGlnaHRcbiAgICAgICAgICAgIGxldCBsOnZlYzM8ZjMyPiA9bm9ybWFsaXplKHZlYzM8ZjMyPigwLjAsMC4wLCAxLjAgKSk7IFxuICAgICAgICAgICAgICAgICAgICAgIC8vIFZlY3RvciBmcm9tIHN1cmZhY2UgcG9pbnQgdG8gbGlnaHRcbiAgICAgICAgICAgIGxldCBoOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZShsK3YpOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFsZiB2ZWN0b3IgYmV0d2VlbiBib3RoIGwgYW5kIHZcbiAgICAgICAgICAgIHZhciByZWZsZWN0aW9uOnZlYzM8ZjMyPiA9IG5vcm1hbGl6ZShyZWZsZWN0KHYsIG4pKTtcbiAgICAgICAgICAgIC8vIHJlZmxlY3Rpb24ueCA9IC1yZWZsZWN0aW9uLng7XG4gICAgICAgICAgICBsZXQgTmRvdEw6ZjMyID0gY2xhbXAoZG90KG4sIGwpLCAwLjAwMSwgMS4wKTtcbiAgICAgICAgICAgIGxldCBOZG90VjpmMzIgPSBhYnMoZG90KG4sIHYpKSArIDAuMDAxO1xuICAgICAgICAgICAgbGV0IE5kb3RIOmYzMiA9IGNsYW1wKGRvdChuLCBoKSwgMC4wLCAxLjApO1xuICAgICAgICAgICAgbGV0IExkb3RIOmYzMiA9IGNsYW1wKGRvdChsLCBoKSwgMC4wLCAxLjApO1xuICAgICAgICAgICAgbGV0IFZkb3RIOmYzMiA9IGNsYW1wKGRvdCh2LCBoKSwgMC4wLCAxLjApO1xuXG4gICAgICAgICAgICB2YXIgcGJySW5wdXRzOlBCUkluZm87XG4gICAgICAgICAgICBwYnJJbnB1dHMuTmRvdEw9TmRvdEw7XG4gICAgICAgICAgICBwYnJJbnB1dHMuTmRvdFY9TmRvdFY7XG4gICAgICAgICAgICBwYnJJbnB1dHMuTmRvdEg9TmRvdEg7XG4gICAgICAgICAgICBwYnJJbnB1dHMuTGRvdEg9TGRvdEg7XG4gICAgICAgICAgICBwYnJJbnB1dHMuVmRvdEg9VmRvdEg7XG4gICAgICAgICAgICBwYnJJbnB1dHMucGVyY2VwdHVhbFJvdWdobmVzcz1wZXJjZXB0dWFsUm91Z2huZXNzO1xuICAgICAgICAgICAgcGJySW5wdXRzLm1ldGFsbmVzcz1tZXRhbGxpYztcbiAgICAgICAgICAgIHBicklucHV0cy5yZWZsZWN0YW5jZTA9c3BlY3VsYXJFbnZpcm9ubWVudFIwO1xuICAgICAgICAgICAgcGJySW5wdXRzLnJlZmxlY3RhbmNlOTA9c3BlY3VsYXJFbnZpcm9ubWVudFI5MDtcbiAgICAgICAgICAgIHBicklucHV0cy5hbHBoYVJvdWdobmVzcz1hbHBoYVJvdWdobmVzcztcbiAgICAgICAgICAgIHBicklucHV0cy5kaWZmdXNlQ29sb3I9ZGlmZnVzZUNvbG9yO1xuICAgICAgICAgICAgcGJySW5wdXRzLnNwZWN1bGFyQ29sb3I9c3BlY3VsYXJDb2xvcjtcblxuICAgICAgICAgICAgdmFyIG1hdGVyaWFsOlBoeXNpY2FsTWF0ZXJpYWw7XG4gICAgICAgICAgICBtYXRlcmlhbC5kaWZmdXNlQ29sb3I9ZGlmZnVzZUNvbG9yKiggMS4wIC0gbWV0YWxsaWMgKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLnJvdWdobmVzcz1wZXJjZXB0dWFsUm91Z2huZXNzO1xuICAgICAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvcj1zcGVjdWxhckNvbG9yO1xuICAgICAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXJGOTA9cmVmbGVjdGFuY2U5MDtcblxuICAgICAgICAgICAgdmFyIGdlb21ldHJ5Okdlb21ldHJ5O1xuICAgICAgICAgICAgZ2VvbWV0cnkubm9ybWFsPW47XG4gICAgICAgICAgICBnZW9tZXRyeS52aWV3RGlyPW5vcm1hbGl6ZShzeXN0ZW1Vbmlmb3JtLmNhbWVyYVBvc2l0aW9uIC0gaW5wdXQud29ybGRQb3MpO1xuICAgICAgICAgICAgZ2VvbWV0cnkucG9zaXRpb249aW5wdXQud29ybGRQb3M7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHNoYWRpbmcgdGVybXMgZm9yIHRoZSBtaWNyb2ZhY2V0IHNwZWN1bGFyIHNoYWRpbmcgbW9kZWxcbiAgICAgICAgICAgIGxldCBGOnZlYzM8ZjMyPiA9IHNwZWN1bGFyUmVmbGVjdGlvbihwYnJJbnB1dHMpO1xuICAgICAgICAgICAgbGV0IEc6ZjMyID0gZ2VvbWV0cmljT2NjbHVzaW9uKHBicklucHV0cyk7XG4gICAgICAgICAgICBsZXQgRDpmMzIgPSBtaWNyb2ZhY2V0RGlzdHJpYnV0aW9uKHBicklucHV0cyk7XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGF0aW9uIG9mIGFuYWx5dGljYWwgbGlnaHRpbmcgY29udHJpYnV0aW9uXG4gICAgICAgICAgICBsZXQgZGlmZnVzZUNvbnRyaWI6dmVjMzxmMzI+ID0gKDEuMCAtIEYpICogZGlmZnVzZShwYnJJbnB1dHMpO1xuICAgICAgICAgICAgbGV0IHNwZWNDb250cmliOnZlYzM8ZjMyPiA9IG1heCh2ZWMzPGYzMj4oMC4wKSwgRiAqIEcgKiBEIC8gKDQuMCAqIE5kb3RMICogTmRvdFYpKTtcbiAgICAgICAgICAgIC8vIHZlYzMgY29sb3IgPSBOZG90TCAqIHVfTGlnaHRDb2xvciAqIChkaWZmdXNlQ29udHJpYiArIHNwZWNDb250cmliKTtcbiAgICAgICAgICAgIC8vdmFyIGNvbG9yID0gTmRvdEwgKiAoZGlmZnVzZUNvbnRyaWIgKyBzcGVjQ29udHJpYik7ICAgIC8vIGFzc3VtZSBsaWdodCBjb2xvciB2ZWMzKDEsIDEsIDEpXG4gICAgICAgICAgICB2YXIgcmVmbGVjdGVkTGlnaHQ9cGFyc2VMaWdodHMoZ2VvbWV0cnksbWF0ZXJpYWwpO1xuICAgICAgICAgICAgdmFyIGNvbG9yPXJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UrcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXI7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgbGlnaHRpbmcgY29udHJpYnV0aW9uIGZyb20gaW1hZ2UgYmFzZWQgbGlnaHRpbmcgc291cmNlIChJQkwpXG4gICAgICAgICAgICAvLyBVU0VfSUJMXG4gICAgICAgIGNvbG9yICs9IGdldElCTENvbnRyaWJ1dGlvbihwYnJJbnB1dHMsIG4sIHJlZmxlY3Rpb24sYnJkZkxVVCxzcGVjdWxhckVudlNhbXBsZXIsZGlmZnVzZUVudlNhbXBsZXIsZGVmYXVsdFNhbXBsZXIpO1xuXG5cbiAgICAgICAgLy8gQXBwbHkgb3B0aW9uYWwgUEJSIHRlcm1zIGZvciBhZGRpdGlvbmFsIChvcHRpb25hbCkgc2hhZGluZ1xuICAgICAgICAjaWYgJHtkZWZpbmVzLlVTRV9BT1RFWFRVUkV9XG4gICAgICAgICAgICBsZXQgYW86ZjMyID0gdGV4dHVyZVNhbXBsZShhb1RleHR1cmUsZGVmYXVsdFNhbXBsZXIsIGlucHV0LnV2KS5yO1xuICAgICAgICAgICAgY29sb3IgPSBtaXgoY29sb3IsIGNvbG9yICogYW8sIG1hdGVyaWFsVW5pZm9ybS5vY2NsdXNpb25TdHJlbmd0aCk7XG4gICAgICAgICNlbmRpZlxuXG4gICAgICAgICNpZiAke2RlZmluZXMuVVNFX0VNSVNTSVZFVEVYVFVSRX1cbiAgICAgICAgICAgIGxldCBlbWlzc2l2ZTp2ZWMzPGYzMj4gPSB0ZXh0dXJlU2FtcGxlKHVfZW1pc3NpdmVUZXh0dXJlLCBkZWZhdWx0U2FtcGxlcixpbnB1dC51dikucmdiIDtcbiAgICAgICAgICAgIGNvbG9yICs9IGVtaXNzaXZlO1xuICAgICAgICAjZW5kaWZcbiAgICAgICByZXR1cm4gdmVjNDxmMzI+KGNvbG9yLnh5eiwgYmFzZUNvbG9yLmEpO1xuICAgIH1cbiAgIGA7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCbHVyKGRlZmluZXMpIHtcblx0cmV0dXJuIGBcbiAgICBzdHJ1Y3QgRnJhZ0lucHV0IHtcbiAgICAgICAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyPGYzMj4sXG4gICAgfVxuICAgIHN0cnVjdCBCbHVyVW5pZm9ybXMge1xuICAgICAgICBkaXJlY3Rpb246dmVjMjxmMzI+LFxuICAgIH1cbiAgICBmbiBnYXVzc2lhblBkZih4OmYzMiwgc2lnbWE6ZjMyKS0+ZjMyIHtcbiAgICAgICAgcmV0dXJuIDAuMzk4OTQgKiBleHAoIC0wLjUgKiB4ICogeC8oIHNpZ21hICogc2lnbWEpKS9zaWdtYTtcbiAgICB9XG4gICAgQGdyb3VwKDApIEBiaW5kaW5nKDApICB2YXI8dW5pZm9ybT4gYmx1clVuaWZvcm1zIDogQmx1clVuaWZvcm1zO1xuICAgIEBncm91cCgwKSBAYmluZGluZyh7e3REaWZmdXNlQmluZGluZ319KSB2YXIgdERpZmZ1c2U6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoe3t0U2FtcGxlckJpbmRpbmd9fSkgdmFyIHRTYW1wbGVyOiBzYW1wbGVyO1xuICAgIEBmcmFnbWVudFxuICAgIGZuIG1haW4oaW5wdXQ6RnJhZ0lucHV0KSAtPiBAbG9jYXRpb24oMCkgdmVjNDxmMzI+IHtcbiAgICAgICAgbGV0IGludlNpemU6dmVjMjxmMzI+ID0gdmVjMjxmMzI+KDEuMCwxLjApIC8gdmVjMjxmMzI+KHRleHR1cmVEaW1lbnNpb25zKHREaWZmdXNlKSk7XG4gICAgICAgIGxldCBmU2lnbWE6ZjMyID1mMzIoJHtkZWZpbmVzLlNJR01BfSk7XG4gICAgICAgIHZhciB3ZWlnaHRTdW06ZjMyID0gZ2F1c3NpYW5QZGYoMC4wLCBmU2lnbWEpO1xuICAgICAgICBsZXQgYmFzZUNvbG9yPXRleHR1cmVTYW1wbGUodERpZmZ1c2UsIHRTYW1wbGVyLCBpbnB1dC51dik7XG4gICAgICAgIHZhciBkaWZmdXNlU3VtOnZlYzM8ZjMyPiA9IGJhc2VDb2xvci5yZ2IgKiB3ZWlnaHRTdW07XG4gICAgICAgIGxldCB1dk9mZnNldDp2ZWMyPGYzMj4gPSBibHVyVW5pZm9ybXMuZGlyZWN0aW9uICogaW52U2l6ZTtcbiAgICAgICAgZm9yKCB2YXIgaSA6IHUzMiA9IDE7IGkgPCAke2RlZmluZXMuS0VSTkVMX1JBRElVU307aSA9IGkgKyAxICkge1xuICAgICAgICAgICAgbGV0IHg6ZjMyID0gZjMyKGkpO1xuICAgICAgICAgICAgbGV0IHc6ZjMyID0gZ2F1c3NpYW5QZGYoeCwgZlNpZ21hKTtcbiAgICAgICAgICAgIGxldCBzYW1wbGUxOnZlYzM8ZjMyPj10ZXh0dXJlU2FtcGxlKHREaWZmdXNlLCB0U2FtcGxlciwgaW5wdXQudXYrIHV2T2Zmc2V0KngpLnJnYjtcbiAgICAgICAgICAgIGxldCBzYW1wbGUyOnZlYzM8ZjMyPj10ZXh0dXJlU2FtcGxlKHREaWZmdXNlLCB0U2FtcGxlciwgaW5wdXQudXYtIHV2T2Zmc2V0KngpLnJnYjtcbiAgICAgICAgICAgIGRpZmZ1c2VTdW0gPWRpZmZ1c2VTdW0rIChzYW1wbGUyK3NhbXBsZTIpKiB3O1xuICAgICAgICAgICAgd2VpZ2h0U3VtICs9IDIuMCAqIHc7XG4gICAgICAgIH1cbiAgICAgICAgZGlmZnVzZVN1bS89d2VpZ2h0U3VtO1xuICAgICAgcmV0dXJuIHZlYzQ8ZjMyPihkaWZmdXNlU3VtLGJhc2VDb2xvci5hKTtcbiAgICB9XG4gIGA7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMdW1pbm9zaXR5SGlnaChkZWZpbmVzKSB7XG5cdHJldHVybiBgXG4gICAgc3RydWN0IEx1bWlub3NpdHlVbmlmb3Jtc3tcbiAgICAgICAgbHVtaW5vc2l0eVRocmVzaG9sZDpmMzIsXG4gICAgICAgIHNtb290aFdpZHRoOmYzMixcbiAgICAgICAgZGVmYXVsdENvbG9yOnZlYzM8ZjMyPixcbiAgICAgICAgZGVmYXVsdE9wYWNpdHk6ZjMyLFxuICAgIH1cbiAgICBzdHJ1Y3QgRnJhZ0lucHV0IHtcbiAgICAgICAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyPGYzMj4sXG4gICAgfTtcbiAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoMCkgIHZhcjx1bmlmb3JtPiBsdW1pbm9zaXR5VW5pZm9ybXMgOiBMdW1pbm9zaXR5VW5pZm9ybXM7XG4gICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7dERpZmZ1c2VCaW5kaW5nfX0pIHZhciB0RGlmZnVzZTogdGV4dHVyZV8yZDxmMzI+O1xuICAgIEBncm91cCgwKSBAYmluZGluZyh7e3RTYW1wbGVyQmluZGluZ319KSB2YXIgdFNhbXBsZXI6IHNhbXBsZXI7XG4gICAgQGZyYWdtZW50XG4gICAgZm4gbWFpbihpbnB1dDpGcmFnSW5wdXQpLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XG5cbiAgICAgICAgbGV0IHRleGVsOnZlYzQ8ZjMyPiA9IHRleHR1cmVTYW1wbGUodERpZmZ1c2UsIHRTYW1wbGVyLCBpbnB1dC51dik7XG5cbiAgICAgICAgbGV0IGx1bWE6dmVjMzxmMzI+ID0gdmVjMzxmMzI+KCAwLjI5OSwwLjU4NywwLjExNCApO1xuXG4gICAgICAgIGxldCB2OmYzMiA9IGRvdCggdGV4ZWwueHl6LCBsdW1hICk7XG5cbiAgICAgICAgbGV0IG91dHB1dENvbG9yOnZlYzQ8ZjMyPiA9IHZlYzQ8ZjMyPiggbHVtaW5vc2l0eVVuaWZvcm1zLmRlZmF1bHRDb2xvci5yZ2IsIGx1bWlub3NpdHlVbmlmb3Jtcy5kZWZhdWx0T3BhY2l0eSApO1xuXG4gICAgICAgIGxldCBhbHBoYTpmMzIgPSBzbW9vdGhzdGVwKCBsdW1pbm9zaXR5VW5pZm9ybXMubHVtaW5vc2l0eVRocmVzaG9sZCwgbHVtaW5vc2l0eVVuaWZvcm1zLmx1bWlub3NpdHlUaHJlc2hvbGQgKyBsdW1pbm9zaXR5VW5pZm9ybXMuc21vb3RoV2lkdGgsIHYgKTtcblxuICAgICAgIHJldHVybiBtaXgoIG91dHB1dENvbG9yLCB0ZXhlbCwgYWxwaGEgKTtcbiAgICB9XG4gICAgYDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJsZW5kRnJhZyhkZWZpbmVzKSB7XG5cdHJldHVybiBgXG4gICAgc3RydWN0IEZyYWdJbnB1dCB7XG4gICAgICAgIEBsb2NhdGlvbigwKSB1djogdmVjMjxmMzI+LFxuICAgIH07XG4gICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7dERpZmZ1c2VCaW5kaW5nfX0pIHZhciB0RGlmZnVzZTogdGV4dHVyZV8yZDxmMzI+O1xuICAgIEBncm91cCgwKSBAYmluZGluZyh7e2Jhc2VDb2xvclRleHR1cmVCaW5kaW5nfX0pIHZhciBiYXNlQ29sb3JUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7dFNhbXBsZXJCaW5kaW5nfX0pIHZhciB0U2FtcGxlcjogc2FtcGxlcjtcbiAgICBAZnJhZ21lbnRcbiAgICBmbiBtYWluKGlucHV0OkZyYWdJbnB1dCkgLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XG4gICAgICAgIGxldCBwb3N0Q29sb3I6dmVjNDxmMzI+ID0gdGV4dHVyZVNhbXBsZSh0RGlmZnVzZSwgdFNhbXBsZXIsIGlucHV0LnV2KTtcbiAgICAgICAgbGV0IGJhc2VDb2xvcjp2ZWM0PGYzMj4gPSB0ZXh0dXJlU2FtcGxlKGJhc2VDb2xvclRleHR1cmUsIHRTYW1wbGVyLCBpbnB1dC51dik7XG4gICAgICByZXR1cm4gYmFzZUNvbG9yK3Bvc3RDb2xvcjtcbiAgICB9ICAgXG4gICAgYDtcbn1cbiIsImltcG9ydCBTaGFkZXJDaHVuayBmcm9tIFwiLi9zaGFkZXJDaHVuay9TaGFkZXJDaHVua1wiO1xuaW1wb3J0IHBob25nVmVydCBmcm9tIFwiLi9tYXRlcmlhbC9waG9uZ1ZlcnRcIjtcbmltcG9ydCBwaG9uZ0ZyYWcgZnJvbSBcIi4vbWF0ZXJpYWwvcGhvbmdGcmFnXCI7XG5pbXBvcnQgY29sb3JGcmFnIGZyb20gXCIuL21hdGVyaWFsL2NvbG9yRnJhZ1wiO1xuaW1wb3J0IGNvbG9yVmVydCBmcm9tIFwiLi9tYXRlcmlhbC9jb2xvclZlcnRcIjtcbmltcG9ydCBwYnJGcmFnIGZyb20gXCIuL21hdGVyaWFsL3BickZyYWdcIjtcbmltcG9ydCBwYnJWZXJ0IGZyb20gXCIuL21hdGVyaWFsL3BiclZlcnRcIjtcbmltcG9ydCBza3lCb3hGcmFnIGZyb20gXCIuL21hdGVyaWFsL3NreUJveEZyYWdcIjtcbmltcG9ydCBza3lCb3hWZXJ0IGZyb20gXCIuL21hdGVyaWFsL3NreUJveFZlcnRcIjtcbmltcG9ydCBxdWFkRnJhZyBmcm9tIFwiLi9tYXRlcmlhbC9xdWFkRnJhZ1wiO1xuaW1wb3J0IHF1YWRWZXJ0IGZyb20gXCIuL21hdGVyaWFsL3F1YWRWZXJ0XCI7XG5pbXBvcnQgcGJyX3ZzIGZyb20gXCIuL21hdGVyaWFsL3Bicl92c1wiO1xuaW1wb3J0IHBicl9mcyBmcm9tIFwiLi9tYXRlcmlhbC9wYnJfZnNcIjtcbmltcG9ydCBCbHVyIGZyb20gXCIuL3Bvc3RQcm9jZXNzL2Jsb29tL0JsdXJcIjtcbmltcG9ydCBMdW1pbm9zaXR5SGlnaCBmcm9tIFwiLi9wb3N0UHJvY2Vzcy9ibG9vbS9MdW1pbm9zaXR5SGlnaFwiO1xuaW1wb3J0IGJsZW5kRnJhZyBmcm9tIFwiLi9wb3N0UHJvY2Vzcy9ibGVuZC9ibGVuZEZyYWdcIjtcblxuZnVuY3Rpb24gcmVkdWNlQ29tbWEoc2hhZGVyKSB7XG5cdC8v5a+55omA5pyJ55qEaW5jbHVkZeWkhOeQhlxuXHRjb25zdCBzdHIgPSByZXNvbHZlSW5jbHVkZXMoc2hhZGVyKTtcblx0cmV0dXJuIHN0cjtcbn1cbmNvbnN0IGluY2x1ZGVQYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcbmxldCBjdXJyZW50RGVmaW5lcyA9IHt9O1xuY29uc3Qgc2hhZGVycyA9IHtcblx0cGhvbmc6IHtcblx0XHRmcmFnOiBwaG9uZ0ZyYWcsXG5cdFx0dmVydDogcGhvbmdWZXJ0XG5cdH0sXG5cdGNvbG9yOiB7XG5cdFx0ZnJhZzogY29sb3JGcmFnLFxuXHRcdHZlcnQ6IGNvbG9yVmVydFxuXHR9LFxuXHRwYnI6IHtcblx0XHRmcmFnOiBwYnJGcmFnLFxuXHRcdHZlcnQ6IHBiclZlcnRcblx0fSxcblx0c2t5Ym94OiB7XG5cdFx0ZnJhZzogc2t5Qm94RnJhZyxcblx0XHR2ZXJ0OiBza3lCb3hWZXJ0XG5cdH0sXG5cdHJlc29sdmU6IHtcblx0XHRmcmFnOiBxdWFkRnJhZyxcblx0XHR2ZXJ0OiBxdWFkVmVydFxuXHR9LFxuXHRwYnJfbWF0OiB7XG5cdFx0ZnJhZzogcGJyX2ZzLFxuXHRcdHZlcnQ6IHBicl92c1xuXHR9LFxuXHRibHVyOiB7XG5cdFx0ZnJhZzogQmx1cixcblx0XHR2ZXJ0OiBxdWFkVmVydFxuXHR9LFxuXHRsdW1pbm9zaXR5SGlnaDoge1xuXHRcdGZyYWc6IEx1bWlub3NpdHlIaWdoLFxuXHRcdHZlcnQ6IHF1YWRWZXJ0XG5cdH0sXG5cdGJsZW5kOiB7XG5cdFx0ZnJhZzogYmxlbmRGcmFnLFxuXHRcdHZlcnQ6IHF1YWRWZXJ0XG5cdH1cbn07XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmNsdWRlcyhzdHJpbmcpIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKGluY2x1ZGVQYXR0ZXJuLCBpbmNsdWRlUmVwbGFjZXIpO1xufVxuXG5mdW5jdGlvbiBpbmNsdWRlUmVwbGFjZXIobWF0Y2gsIGluY2x1ZGUpIHtcblx0Y29uc3QgZXhjdXRlID0gU2hhZGVyQ2h1bmtbaW5jbHVkZV07XG5cdGlmIChleGN1dGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihgQ2FuIG5vdCByZXNvbHZlICNpbmNsdWRlIDwke2luY2x1ZGV9PmApO1xuXHR9XG5cdGNvbnN0IHJlc3VsdCA9IGV4Y3V0ZShjdXJyZW50RGVmaW5lcyk7XG5cdHJldHVybiByZXNvbHZlSW5jbHVkZXMocmVzdWx0KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZlcnRGcmFnKHR5cGUsIGRlZmluZXMgPSB7fSkge1xuXHRjb25zdCBleGN1dGVGdW5jID0gc2hhZGVyc1t0eXBlXTtcblx0Y3VycmVudERlZmluZXMgPSBkZWZpbmVzO1xuXHRyZXR1cm4ge1xuXHRcdHZlcnQ6IHJlZHVjZUNvbW1hKGV4Y3V0ZUZ1bmMudmVydChjdXJyZW50RGVmaW5lcykpLFxuXHRcdGZyYWc6IHJlZHVjZUNvbW1hKGV4Y3V0ZUZ1bmMuZnJhZyhjdXJyZW50RGVmaW5lcykpXG5cdH07XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZhbHVlIGZyb20gXCIuLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcbmltcG9ydCBnZXRWZXJ0RnJhZyBmcm9tIFwiLi9TaGFkZXJzXCI7XG5leHBvcnQgaW50ZXJmYWNlIEdQVVNoYWRlck1vZHVsZU9iamVjdCB7XG5cdHZlcnQ6IEdQVVNoYWRlck1vZHVsZTtcblx0ZnJhZzogR1BVU2hhZGVyTW9kdWxlO1xufVxuZXhwb3J0IGNsYXNzIFNoYWRlclNvdXJjZSB7XG5cdHZlcnRFbnRyeVBvaW50Pzogc3RyaW5nO1xuXHRmcmFnRW50cnlQb2ludD86IHN0cmluZztcblx0dmVydD86IHN0cmluZztcblx0ZnJhZz86IHN0cmluZztcblx0Y29tcHV0ZT86IHN0cmluZztcblx0Y29tcHV0ZU1haW4/OiBzdHJpbmc7XG5cdGRlZmluZXM/OiB7fTtcblx0ZGlydHk6IGJvb2xlYW47XG5cdHJlbmRlcjogYm9vbGVhbjtcblx0dHlwZTogc3RyaW5nO1xuXHRwcml2YXRlIF91aWQ6IHN0cmluZztcblx0cHJpdmF0ZSBjdXN0b206IGJvb2xlYW47XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblx0XHR0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGU7XG5cdFx0dGhpcy5kZWZpbmVzID0gb3B0aW9ucy5kZWZpbmVzO1xuXHRcdHRoaXMuY3VzdG9tID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuY3VzdG9tLCBmYWxzZSk7XG5cdFx0dGhpcy5kaXJ0eSA9IHRydWU7XG5cdFx0aWYgKG9wdGlvbnMucmVuZGVyKSB7XG5cdFx0XHR0aGlzLnJlbmRlciA9IHRydWU7XG5cdFx0XHR0aGlzLnZlcnRFbnRyeVBvaW50ID0gb3B0aW9ucy52ZXJ0TWFpbiB8fCBcIm1haW5cIjtcblx0XHRcdHRoaXMuZnJhZ0VudHJ5UG9pbnQgPSBvcHRpb25zLmZyYWdNYWluIHx8IFwibWFpblwiO1xuXHRcdFx0dGhpcy52ZXJ0ID0gb3B0aW9ucy52ZXJ0IHx8IHVuZGVmaW5lZDtcblx0XHRcdHRoaXMuZnJhZyA9IG9wdGlvbnMuZnJhZyB8fCB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY29tcHV0ZSA9IG9wdGlvbnMuY29tcHV0ZSB8fCB1bmRlZmluZWQ7XG5cdFx0XHR0aGlzLmNvbXB1dGVNYWluID0gb3B0aW9ucy5jb21wdXRlTWFpbiB8fCBcIm1haW5cIjtcblx0XHR9XG5cdH1cblx0Z2V0IHVpZCgpIHtcblx0XHR0aGlzLl91aWQgPSB0aGlzLnR5cGUuY29uY2F0KEpTT04uc3RyaW5naWZ5KHRoaXMuZGVmaW5lcykpO1xuXHRcdHJldHVybiB0aGlzLl91aWQ7XG5cdH1cblx0cHJpdmF0ZSB1cGRhdGVTaGFkZXJTdHIoKSB7XG5cdFx0aWYgKHRoaXMuY3VzdG9tKSB7XG5cdFx0XHRpZiAodGhpcy5jb21wdXRlKSB7XG5cdFx0XHRcdHRoaXMuY29tcHV0ZSA9IFNoYWRlclNvdXJjZS5jb21waWxlQ3VzdG9tU2hhZGVyKHRoaXMuY29tcHV0ZSwgdGhpcy5kZWZpbmVzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMudmVydCA9IFNoYWRlclNvdXJjZS5jb21waWxlQ3VzdG9tU2hhZGVyKHRoaXMudmVydCwgdGhpcy5kZWZpbmVzKTtcblx0XHRcdFx0dGhpcy5mcmFnID0gU2hhZGVyU291cmNlLmNvbXBpbGVDdXN0b21TaGFkZXIodGhpcy5mcmFnLCB0aGlzLmRlZmluZXMpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBzb3VyY2UgPSBnZXRWZXJ0RnJhZyh0aGlzLnR5cGUsIHRoaXMuZGVmaW5lcyk7XG5cblx0XHRcdHRoaXMudmVydCA9IHNvdXJjZS52ZXJ0O1xuXHRcdFx0dGhpcy5mcmFnID0gc291cmNlLmZyYWc7XG5cdFx0fVxuXHR9XG5cdHB1YmxpYyBzZXREZWZpbmVzKGRlZmluZXMpIHtcblx0XHR0aGlzLmRpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLmRlZmluZXMgPSBPYmplY3QuYXNzaWduKHRoaXMuZGVmaW5lcywgZGVmaW5lcyk7XG5cdH1cblx0Y3JlYXRlU2hhZGVyTW9kdWxlKGRldmljZTogR1BVRGV2aWNlKTogeyB2ZXJ0OiBHUFVTaGFkZXJNb2R1bGU7IGZyYWc6IEdQVVNoYWRlck1vZHVsZSB9IHwgR1BVU2hhZGVyTW9kdWxlIHtcblx0XHRpZiAodGhpcy5kaXJ0eSkge1xuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTdHIoKTtcblx0XHRcdHRoaXMuZGlydHkgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKHRoaXMucmVuZGVyKSB7XG5cdFx0XHRjb25zdCB2ZXJ0ID0gdGhpcy52ZXJ0XG5cdFx0XHRcdD8gZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG5cdFx0XHRcdFx0XHRjb2RlOiB0aGlzLnZlcnRcblx0XHRcdFx0ICB9KVxuXHRcdFx0XHQ6IHVuZGVmaW5lZDtcblx0XHRcdGNvbnN0IGZyYWcgPSB0aGlzLmZyYWdcblx0XHRcdFx0PyBkZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHtcblx0XHRcdFx0XHRcdGNvZGU6IHRoaXMuZnJhZ1xuXHRcdFx0XHQgIH0pXG5cdFx0XHRcdDogdW5kZWZpbmVkO1xuXHRcdFx0cmV0dXJuIHsgdmVydCwgZnJhZyB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBjb21wdXRlID0gZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG5cdFx0XHRcdGNvZGU6IHRoaXMuY29tcHV0ZVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gY29tcHV0ZTtcblx0XHR9XG5cdH1cblx0c3RhdGljIHJlcGxhY2VNYWluKHNvdXJjZTogc3RyaW5nLCByZW5hbWVkTWFpbjogc3RyaW5nKSB7XG5cdFx0cmVuYW1lZE1haW4gPSBgdm9pZCAke3JlbmFtZWRNYWlufSgpYDtcblx0XHRyZXR1cm4gc291cmNlLnJlcGxhY2UoL3ZvaWRcXHMrbWFpblxccypcXChcXHMqKD86dm9pZCk/XFxzKlxcKS9nLCByZW5hbWVkTWFpbik7XG5cdH1cblx0c3RhdGljIGNvbXBpbGVDdXN0b21TaGFkZXIodGVtcGxhdGUsIGRlZmluZXMpOiBzdHJpbmcge1xuXHRcdGNvbnN0IHJlZyA9IC9cXHtcXHsoXFx3KylcXH1cXH0vO1xuXHRcdGlmIChyZWcudGVzdCh0ZW1wbGF0ZSkpIHtcblx0XHRcdGNvbnN0IG5hbWUgPSByZWcuZXhlYyh0ZW1wbGF0ZSlbMV07XG5cdFx0XHR0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UocmVnLCBkZWZpbmVzW25hbWVdKTtcblx0XHRcdHJldHVybiBTaGFkZXJTb3VyY2UuY29tcGlsZUN1c3RvbVNoYWRlcih0ZW1wbGF0ZSwgZGVmaW5lcyk7XG5cdFx0fVxuXHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0fVxufVxuIiwiaW1wb3J0IHsgRGVwdGhTdGVuY2lsLCBSZW5kZXJTdGF0ZSwgVGFyZ2V0LCBQcmltaXRpdmUgfSBmcm9tIFwiLi4vcmVuZGVyL1JlbmRlclN0YXRlXCI7XG5pbXBvcnQgU2FtcGxlciBmcm9tIFwiLi4vcmVuZGVyL1NhbXBsZXJcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9yZW5kZXIvVGV4dHVyZVwiO1xuaW1wb3J0IHsgU2hhZGVyU291cmNlIH0gZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJTb3VyY2VcIjtcbmltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi4vY29yZS9GcmFtZVN0YXRlXCI7XG5pbXBvcnQgQ29sb3IgZnJvbSBcIi4uL21hdGgvQ29sb3JcIjtcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi4vbWVzaC9NZXNoXCI7XG5pbXBvcnQgU2hhZGVyRGF0YSBmcm9tIFwiLi4vcmVuZGVyL1NoYWRlckRhdGFcIjtcbmltcG9ydCB7IEN1bGxNb2RlLCBQcmltaXRpdmVUb3BvbG9neSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5leHBvcnQgY2xhc3MgTWF0ZXJpYWwge1xuXHRwdWJsaWMgc2hhZGVyRGF0YTogU2hhZGVyRGF0YTtcblxuXHRjb2xvcj86IENvbG9yO1xuXG5cdGJhc2VTYW1wbGVyPzogU2FtcGxlcjtcblxuXHRiYXNlVGV4dHVyZT86IFRleHR1cmU7XG5cblx0dHlwZTogc3RyaW5nO1xuXG5cdGxhYmVsOiBzdHJpbmc7XG5cblx0c2hhZGVyU291cmNlOiBTaGFkZXJTb3VyY2U7XG5cblx0dHJhbnNwYXJlbnQ6IGJvb2xlYW47XG5cblx0ZGlydHk6IGJvb2xlYW47XG5cblx0bGlnaHQ6IGJvb2xlYW47XG5cblx0cHJpdmF0ZSBfZW1pc3NpdmU6IENvbG9yO1xuXG5cdHByaXZhdGUgX29wYWNpdHk6IG51bWJlcjtcblxuXHRwcml2YXRlIF9lbWlzc2l2ZUludGVuc2l0eTogbnVtYmVyO1xuXG5cdHByaXZhdGUgX2RpZmZ1c2U6IENvbG9yO1xuXG5cdHByaXZhdGUgX3JlbmRlclN0YXRlOiBSZW5kZXJTdGF0ZTtcblxuXHRwcml2YXRlIF9kb3VibGVTaWRlZDogYm9vbGVhbjtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmxhYmVsID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMudHlwZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmJhc2VUZXh0dXJlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuYmFzZVNhbXBsZXIgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5fZGlmZnVzZSA9IG5ldyBDb2xvcigwLjAsIDAuMCwgMC4wKTtcblx0XHR0aGlzLl9vcGFjaXR5ID0gMS4wO1xuXHRcdC8vQnVmZmVyXG5cdFx0dGhpcy5zaGFkZXJEYXRhID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuc2hhZGVyU291cmNlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuZGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX2VtaXNzaXZlID0gbmV3IENvbG9yKDAuMCwgMC4wLCAwKTtcblx0XHR0aGlzLl9lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcblx0XHR0aGlzLl9kb3VibGVTaWRlZCA9IHRydWU7XG5cdFx0dGhpcy5saWdodCA9IGZhbHNlO1xuXHRcdHRoaXMuaW5pdCgpO1xuXHR9XG5cdHB1YmxpYyBzZXQgd2lyZWZyYW1lKHZhbHVlOiBCb29sZWFuKSB7XG5cdFx0dGhpcy5yZW5kZXJTdGF0ZS5wcmltaXRpdmUudG9wb2xvZ3kgPSB2YWx1ZSA/IFByaW1pdGl2ZVRvcG9sb2d5LkxpbmVMaXN0IDogUHJpbWl0aXZlVG9wb2xvZ3kuVHJpYW5nbGVMaXN0O1xuXHR9XG5cdHB1YmxpYyBnZXQgZG91YmxlU2lkZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RvdWJsZVNpZGVkO1xuXHR9XG5cdHB1YmxpYyBzZXQgZG91YmxlU2lkZWQodmFsdWU6IGJvb2xlYW4pIHtcblx0XHR0aGlzLl9yZW5kZXJTdGF0ZS5wcmltaXRpdmUuY3VsbE1vZGUgPSB2YWx1ZSA/IEN1bGxNb2RlLk5vbmUgOiBDdWxsTW9kZS5CYWNrO1xuXHRcdHRoaXMuX2RvdWJsZVNpZGVkID0gdmFsdWU7XG5cdH1cblx0cHVibGljIGdldCByZW5kZXJTdGF0ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fcmVuZGVyU3RhdGU7XG5cdH1cblx0cHVibGljIHNldCByZW5kZXJTdGF0ZSh2YWx1ZTogUmVuZGVyU3RhdGUpIHtcblx0XHR0aGlzLl9yZW5kZXJTdGF0ZSA9IHZhbHVlO1xuXHR9XG5cdHB1YmxpYyBnZXQgZGlmZnVzZSgpOiBDb2xvciB7XG5cdFx0cmV0dXJuIHRoaXMuX2RpZmZ1c2U7XG5cdH1cblx0cHVibGljIHNldCBkaWZmdXNlKHY6IENvbG9yKSB7XG5cdFx0dGhpcy5fZGlmZnVzZSA9IHY7XG5cdH1cblx0cHVibGljIGdldCBlbWlzc2l2ZSgpOiBDb2xvciB7XG5cdFx0cmV0dXJuIHRoaXMuX2VtaXNzaXZlO1xuXHR9XG5cdHB1YmxpYyBzZXQgZW1pc3NpdmUodjogQ29sb3IpIHtcblx0XHR0aGlzLl9lbWlzc2l2ZSA9IHY7XG5cdH1cblx0cHVibGljIGdldCBlbWlzc2l2ZUludGVuc2l0eSgpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLl9lbWlzc2l2ZUludGVuc2l0eTtcblx0fVxuXHRwdWJsaWMgc2V0IGVtaXNzaXZlSW50ZW5zaXR5KHY6IG51bWJlcikge1xuXHRcdHRoaXMuX2VtaXNzaXZlSW50ZW5zaXR5ID0gdjtcblx0fVxuXHRwdWJsaWMgZ2V0IG9wYWNpdHkoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fb3BhY2l0eTtcblx0fVxuXHRwdWJsaWMgc2V0IG9wYWNpdHkodjogbnVtYmVyKSB7XG5cdFx0dGhpcy5fb3BhY2l0eSA9IHY7XG5cdH1cblx0b25CZWZvcmVSZW5kZXIoKSB7fVxuXG5cdG9uQmVmb3JlQ29tcGlsZSgpIHt9XG5cblx0dXBkYXRlKGZyYW1lU3RhdGU/OiBGcmFtZVN0YXRlLCBtZXNoPzogTWVzaCkge31cblx0cHJvdGVjdGVkIGNyZWF0ZVNoYWRlckRhdGEobWVzaDogTWVzaCwgZnJhbWVTdGF0ZT86IEZyYW1lU3RhdGUpIHtcblx0XHR0aGlzLnNoYWRlckRhdGEgPSBuZXcgU2hhZGVyRGF0YSh0aGlzLnR5cGUsIDApO1xuXHR9XG5cdHByaXZhdGUgaW5pdCgpIHtcblx0XHQvL+m7mOiupOa4suafk+eKtuaAgVxuXHRcdGNvbnN0IHByaW1pdGl2ZSA9IG5ldyBQcmltaXRpdmUoKTtcblx0XHRjb25zdCB0YXJnZXQgPSBuZXcgVGFyZ2V0KCk7XG5cdFx0Y29uc3QgZGVwdGhTdGVuY2lsID0gbmV3IERlcHRoU3RlbmNpbCgpO1xuXHRcdHRoaXMuX3JlbmRlclN0YXRlID0gbmV3IFJlbmRlclN0YXRlKCk7XG5cdFx0dGhpcy5fcmVuZGVyU3RhdGUucHJpbWl0aXZlID0gcHJpbWl0aXZlO1xuXHRcdHRoaXMuX3JlbmRlclN0YXRlLnRhcmdldHMgPSBbdGFyZ2V0XTtcblx0XHR0aGlzLl9yZW5kZXJTdGF0ZS5kZXB0aFN0ZW5jaWwgPSBkZXB0aFN0ZW5jaWw7XG5cdH1cblx0cHVibGljIGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5sYWJlbCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5iYXNlVGV4dHVyZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmJhc2VTYW1wbGVyID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuY29sb3IgPSB1bmRlZmluZWQ7XG5cdH1cbn1cbiIsImltcG9ydCB7IFNoYWRlclNvdXJjZSB9IGZyb20gXCIuLi9zaGFkZXIvU2hhZGVyU291cmNlXCI7XHJcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4vTWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgTWVzaCB9IGZyb20gXCIuLi9tZXNoL01lc2hcIjtcclxuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGVcIjtcclxuaW1wb3J0IFVuaWZvcm1CdWZmZXIgZnJvbSBcIi4uL3JlbmRlci9Vbmlmb3JtQnVmZmVyXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbG9yTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy50eXBlID0gXCJjb2xvclwiO1xyXG4gICAgdGhpcy5zaGFkZXJTb3VyY2UgPSBuZXcgU2hhZGVyU291cmNlKHtcclxuICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICByZW5kZXI6IHRydWUsXHJcbiAgICAgIGRlZmluZXM6IHt9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHVwZGF0ZShmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBtZXNoOiBNZXNoKSB7XHJcbiAgICBpZiAoIXRoaXMuc2hhZGVyRGF0YSkgdGhpcy5jcmVhdGVTaGFkZXJEYXRhKG1lc2gpO1xyXG4gICAgY29uc3QgdW5pZm9ybUJ1ZmZlciA9IG5ldyBVbmlmb3JtQnVmZmVyKCk7XHJcbiAgICB1bmlmb3JtQnVmZmVyLnNldE1hdHJpeDQoXCJtb2RlbE1hdHJpeFwiLCAoKSA9PiB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnNoYWRlckRhdGEuc2V0VW5pZm9ybUJ1ZmZlcihcImNvbG9yXCIsIHVuaWZvcm1CdWZmZXIpO1xyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBqdW53ZWkuZ3UganVud2VpLmd1QGppZHVhdXRvLmNvbVxyXG4gKiBARGF0ZTogMjAyMi0xMS0xMyAxNzoyNzo0MFxyXG4gKiBATGFzdEVkaXRvcnM6IGp1bndlaS5ndSBqdW53ZWkuZ3VAamlkdWF1dG8uY29tXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjMtMDEtMzAgMTA6MjE6MjhcclxuICogQEZpbGVQYXRoOiBcXEdFbmdpbmVcXHNyY1xcbWVzaFxcQXhlcy50c1xyXG4gKiBARGVzY3JpcHRpb246IOi/meaYr+m7mOiupOiuvue9rizor7forr7nva5gY3VzdG9tTWFkZWAsIOaJk+W8gGtvcm9GaWxlSGVhZGVy5p+l55yL6YWN572uIOi/m+ihjOiuvue9rjogaHR0cHM6Ly9naXRodWIuY29tL09CS29ybzEva29ybzFGaWxlSGVhZGVyL3dpa2kvJUU5JTg1JThEJUU3JUJEJUFFXHJcbiAqL1xyXG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBQcmltaXRpdmVUb3BvbG9neSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XHJcbmltcG9ydCBHZW9tZXRyeSBmcm9tIFwiLi4vZ2VvbWV0cnkvR2VvbWV0cnlcIjtcclxuaW1wb3J0IENvbG9yTWF0ZXJpYWwgZnJvbSBcIi4uL21hdGVyaWFsL0NvbG9yTWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgRmxvYXQzMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlXCI7XHJcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi9NZXNoXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF4ZXMgZXh0ZW5kcyBNZXNoIHtcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgbWF0ZXJpYWw6IENvbG9yTWF0ZXJpYWw7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5kaXN0YW5jZVRvQ2FtZXJhID0gMTA7XHJcbiAgICB0aGlzLm1hdGVyaWFsID0gbmV3IENvbG9yTWF0ZXJpYWwoKTtcclxuICAgIHRoaXMubWF0ZXJpYWwud2lyZWZyYW1lID0gdHJ1ZTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuICB1cGRhdGUoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSkge1xyXG4gICAgdGhpcy51cGRhdGVNYXRyaXgoKTtcclxuICAgIHRoaXMubWF0ZXJpYWwudXBkYXRlKGZyYW1lU3RhdGUsIHRoaXMpO1xyXG4gICAgZnJhbWVTdGF0ZS5yZW5kZXJRdWV1ZS5vcGFxdWUucHVzaCh0aGlzKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBpbml0KCkge1xyXG4gICAgY29uc3QgcG9zaXRpb24gPSBbMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMV07XHJcbiAgICBjb25zdCBjb2xvcnMgPSBbXHJcbiAgICAgIDEsIDAsIDAsIDEsIDEsIDAuNSwgMC41LCAxLCAwLCAxLCAwLCAxLCAwLjUsIDEsIDAuNSwgMSwgMCwgMCwgMSwgMSwgMC41LFxyXG4gICAgICAwLjUsIDEsIDEsXHJcbiAgICBdO1xyXG4gICAgY29uc3QgaW5kaWNlcyA9IFswLCAxLCAyLCAzLCA0LCA1XTtcclxuICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnkoe30pO1xyXG4gICAgdGhpcy5nZW9tZXRyeS5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBwb3NpdGlvbiwgMykpO1xyXG4gICAgdGhpcy5nZW9tZXRyeS5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJjb2xvclwiLCBjb2xvcnMsIDQpKTtcclxuICAgIHRoaXMuZ2VvbWV0cnkuc2V0SW5kaWNlKGluZGljZXMpO1xyXG4gICAgdGhpcy5nZW9tZXRyeS5jb3VudCA9IGluZGljZXMubGVuZ3RoO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcclxuaW1wb3J0IEdlb21ldHJ5IGZyb20gXCIuL0dlb21ldHJ5XCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNreUJveEdlb21ldHJ5IGV4dGVuZHMgR2VvbWV0cnkge1xyXG4gIHBvc2l0aW9uOiBudW1iZXJbXTtcclxuICBpbmRpY2VzOiBudW1iZXJbXTtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKHt9KTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuICBwdWJsaWMgdXBkYXRlKGZyYW1lU3RhdGUpIHtcclxuICAgIGNvbnN0IHsgZGV2aWNlIH0gPSBmcmFtZVN0YXRlLmNvbnRleHQ7XHJcbiAgfVxyXG4gIHB1YmxpYyBpbml0KCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtcclxuICAgICAgMS4wLFxyXG4gICAgICAxLjAsXHJcbiAgICAgIDEuMCwgLy8gMFxyXG4gICAgICAtMS4wLFxyXG4gICAgICAxLjAsXHJcbiAgICAgIDEuMCwgLy8gMVxyXG4gICAgICAxLjAsXHJcbiAgICAgIC0xLjAsXHJcbiAgICAgIDEuMCwgLy8gMlxyXG4gICAgICAtMS4wLFxyXG4gICAgICAtMS4wLFxyXG4gICAgICAxLjAsIC8vIDNcclxuICAgICAgMS4wLFxyXG4gICAgICAxLjAsXHJcbiAgICAgIC0xLjAsIC8vIDRcclxuICAgICAgLTEuMCxcclxuICAgICAgMS4wLFxyXG4gICAgICAtMS4wLCAvLyA1XHJcbiAgICAgIDEuMCxcclxuICAgICAgLTEuMCxcclxuICAgICAgLTEuMCwgLy8gNlxyXG4gICAgICAtMS4wLFxyXG4gICAgICAtMS4wLFxyXG4gICAgICAtMS4wLCAvLyA3XHJcbiAgICBdO1xyXG4gICAgdGhpcy5pbmRpY2VzID0gW1xyXG4gICAgICAvLyBQb3NYIChSaWdodClcclxuICAgICAgMCwgMiwgNCwgNiwgNCwgMixcclxuXHJcbiAgICAgIC8vIE5lZ1ggKExlZnQpXHJcbiAgICAgIDUsIDMsIDEsIDMsIDUsIDcsXHJcblxyXG4gICAgICAvLyBQb3NZIChUb3ApXHJcbiAgICAgIDQsIDEsIDAsIDEsIDQsIDUsXHJcblxyXG4gICAgICAvLyBOZWdZIChCb3R0b20pXHJcbiAgICAgIDIsIDMsIDYsIDcsIDYsIDMsXHJcblxyXG4gICAgICAvLyBQb3NaIChGcm9udClcclxuICAgICAgMCwgMSwgMiwgMywgMiwgMSxcclxuXHJcbiAgICAgIC8vIE5lZ1ogKEJhY2spXHJcbiAgICAgIDYsIDUsIDQsIDUsIDYsIDcsXHJcbiAgICBdO1xyXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCB0aGlzLnBvc2l0aW9uLCAzKSk7XHJcbiAgICB0aGlzLnNldEluZGljZSh0aGlzLmluZGljZXMpO1xyXG4gICAgdGhpcy5jb3VudCA9IHRoaXMuaW5kaWNlcy5sZW5ndGg7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBTYW1wbGVyIGZyb20gXCIuLi9yZW5kZXIvU2FtcGxlclwiO1xyXG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIEN1YmVUZXh0dXJlTG9hZGVyKHVybHMpIHtcclxuICBjb25zdCBwcm9taXNlcyA9IHVybHMubWFwKChzcmMpID0+IHtcclxuICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICBpbWcuc3JjID0gc3JjO1xyXG4gICAgcmV0dXJuIGltZy5kZWNvZGUoKS50aGVuKCgpID0+IGNyZWF0ZUltYWdlQml0bWFwKGltZykpO1xyXG4gIH0pO1xyXG4gIGNvbnN0IGltYWdlcyA9IGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuICBhd2FpdCBQcm9taXNlLmFsbChpbWFnZXMpO1xyXG4gIGNvbnN0IGJhc2VTYW1wbGVyID0gbmV3IFNhbXBsZXIoe1xyXG4gICAgbWFnRmlsdGVyOiBcImxpbmVhclwiLFxyXG4gICAgbWluRmlsdGVyOiBcImxpbmVhclwiLFxyXG4gIH0pO1xyXG4gIGNvbnN0IGRhdGEgPSBpbWFnZXMubWFwKChpbWFnZSwgaSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc291cmNlOiBpbWFnZSxcclxuICAgICAgd2lkdGg6IGltYWdlLndpZHRoLFxyXG4gICAgICBoZWlnaHQ6IGltYWdlLmhlaWdodCxcclxuICAgICAgZGVwdGg6IDEsXHJcbiAgICAgIHg6IDAsXHJcbiAgICAgIHk6IDAsXHJcbiAgICAgIHo6IGksXHJcbiAgICB9O1xyXG4gIH0pO1xyXG4gIGNvbnN0IGJhc2VUZXh0dXJlID0gbmV3IFRleHR1cmUoe1xyXG4gICAgc2l6ZToge1xyXG4gICAgICB3aWR0aDogaW1hZ2VzWzBdLndpZHRoLFxyXG4gICAgICBoZWlnaHQ6IGltYWdlc1swXS5oZWlnaHQsXHJcbiAgICAgIGRlcHRoOiA2LFxyXG4gICAgfSxcclxuICAgIGZvcm1hdDogXCJyZ2JhOHVub3JtXCIsXHJcbiAgICB1c2FnZTpcclxuICAgICAgR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyB8XHJcbiAgICAgIEdQVVRleHR1cmVVc2FnZS5DT1BZX0RTVCB8XHJcbiAgICAgIEdQVVRleHR1cmVVc2FnZS5SRU5ERVJfQVRUQUNITUVOVCxcclxuICAgIHNhbXBsZXI6IGJhc2VTYW1wbGVyLFxyXG4gICAgZGF0YSxcclxuICAgIHZpZXdGb3JtYXRzOiBcImN1YmVcIixcclxuICAgIG1pcExldmVsQ291bnQ6IDYsXHJcbiAgICBuZWVkTWlwTWFwOiB0cnVlLFxyXG4gIH0pO1xyXG4gIHJldHVybiB7XHJcbiAgICB0ZXh0dXJlOiBiYXNlVGV4dHVyZSxcclxuICAgIHNhbXBsZXI6IGJhc2VTYW1wbGVyLFxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgU2hhZGVyU291cmNlIH0gZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJTb3VyY2VcIjtcclxuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tIFwiLi9NYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xyXG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBDb21wYXJlRnVuY3Rpb24sIFRleHR1cmVGb3JtYXQgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xyXG5pbXBvcnQgQ3ViZVRleHR1cmVMb2FkZXIgZnJvbSBcIi4uL2xvYWRlci9DdWJlVGV4dHVyZUxvYWRlclwiO1xyXG5pbXBvcnQgVW5pZm9ybUJ1ZmZlciBmcm9tIFwiLi4vcmVuZGVyL1VuaWZvcm1CdWZmZXJcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2t5Qm94TWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XHJcbiAgaW1hZ2VzOiBhbnlbXTtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnR5cGUgPSBcInNreWJveFwiO1xyXG4gICAgdGhpcy5zaGFkZXJTb3VyY2UgPSBuZXcgU2hhZGVyU291cmNlKHtcclxuICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICByZW5kZXI6IHRydWUsXHJcbiAgICAgIGRlZmluZXM6IHt9LFxyXG4gICAgfSk7XHJcbiAgICB0aGlzLmltYWdlcyA9IFtdO1xyXG4gICAgdGhpcy5yZW5kZXJTdGF0ZS5kZXB0aFN0ZW5jaWwuZGVwdGhXcml0ZUVuYWJsZWQgPSBmYWxzZTtcclxuICAgIHRoaXMucmVuZGVyU3RhdGUuZGVwdGhTdGVuY2lsLmRlcHRoQ29tcGFyZSA9IENvbXBhcmVGdW5jdGlvbi5MZXNzRXF1YWw7XHJcbiAgICAvLyB0aGlzLnJlbmRlclN0YXRlLmRlcHRoU3RlbmNpbFxyXG4gICAgLy8gdGhpcy5kZXB0aFN0ZW5jaWwgPSB7XHJcbiAgICAvLyAgIGRlcHRoV3JpdGVFbmFibGVkOiBmYWxzZSxcclxuICAgIC8vICAgZGVwdGhDb21wYXJlOiBDb21wYXJlRnVuY3Rpb24uTGVzc0VxdWFsLFxyXG4gICAgLy8gICBmb3JtYXQ6IFRleHR1cmVGb3JtYXQuRGVwdGgyNFBsdXMsXHJcbiAgICAvLyB9O1xyXG4gIH1cclxuICBhc3luYyBsb2FkVGV4dHVyZSh1cmxzKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBDdWJlVGV4dHVyZUxvYWRlcih1cmxzKTtcclxuICAgIHRoaXMuYmFzZVRleHR1cmUgPSByZXN1bHQudGV4dHVyZTtcclxuICAgIHRoaXMuYmFzZVNhbXBsZXIgPSByZXN1bHQuc2FtcGxlcjtcclxuICB9XHJcbiAgdXBkYXRlKGZyYW1lU3RhdGU6IEZyYW1lU3RhdGUsIG1lc2g6IE1lc2gpIHtcclxuICAgIGlmICghdGhpcy5zaGFkZXJEYXRhKSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlU2hhZGVyRGF0YShtZXNoKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJvdGVjdGVkIGNyZWF0ZVNoYWRlckRhdGEobWVzaDogTWVzaCkge1xyXG4gICAgc3VwZXIuY3JlYXRlU2hhZGVyRGF0YShtZXNoKTtcclxuICAgIGNvbnN0IHVuaWZvcm1CdWZmZXIgPSBuZXcgVW5pZm9ybUJ1ZmZlcigpO1xyXG4gICAgdW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXg0KFwibW9kZWxNYXRyaXhcIiwgKCkgPT4ge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5zaGFkZXJEYXRhLnNldFVuaWZvcm1CdWZmZXIoXCJza3lcIiwgdW5pZm9ybUJ1ZmZlcik7XHJcbiAgICB0aGlzLnNoYWRlckRhdGEuc2V0VGV4dHVyZShcImJhc2VUZXh0dXJlXCIsIHRoaXMuYmFzZVRleHR1cmUpO1xyXG4gICAgdGhpcy5zaGFkZXJEYXRhLnNldFNhbXBsZXIoXCJiYXNlU2FtcGxlclwiLCB0aGlzLmJhc2VTYW1wbGVyKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGVcIjtcclxuaW1wb3J0IFNreUJveEdlb21ldHJ5IGZyb20gXCIuLi9nZW9tZXRyeS9Ta3lCb3hHZW9tZXRyeVwiO1xyXG5pbXBvcnQgU2t5Qm94TWF0ZXJpYWwgZnJvbSBcIi4uL21hdGVyaWFsL1NreUJveE1hdGVyaWFsXCI7XHJcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi9NZXNoXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNreUJveCBleHRlbmRzIE1lc2gge1xyXG4gIHR5cGU6IHN0cmluZztcclxuICBtYXRlcmlhbDogU2t5Qm94TWF0ZXJpYWw7XHJcbiAgaXNTa3lCb3g6IGJvb2xlYW47XHJcbiAgY29uc3RydWN0b3IodXJscz86IEFycmF5PHN0cmluZz4pIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmRpc3RhbmNlVG9DYW1lcmEgPSAxMDtcclxuICAgIHRoaXMubWF0ZXJpYWwgPSBuZXcgU2t5Qm94TWF0ZXJpYWwoKTtcclxuICAgIGlmICh1cmxzKSB0aGlzLm1hdGVyaWFsLmxvYWRUZXh0dXJlKHVybHMpO1xyXG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBTa3lCb3hHZW9tZXRyeSgpO1xyXG4gICAgdGhpcy5pc1NreUJveCA9IHRydWU7XHJcbiAgfVxyXG4gIHVwZGF0ZShmcmFtZVN0YXRlOiBGcmFtZVN0YXRlKSB7XHJcbiAgICB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xyXG4gICAgdGhpcy5nZW9tZXRyeS51cGRhdGUoZnJhbWVTdGF0ZSk7XHJcbiAgICB0aGlzLm1hdGVyaWFsLnVwZGF0ZShmcmFtZVN0YXRlLCB0aGlzKTtcclxuICAgIGZyYW1lU3RhdGUucmVuZGVyUXVldWUucHJlLnB1c2godGhpcyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuXHJcbi8qKlxyXG4gKiBUd28gdGltZXMgUEkuXHJcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxyXG4gKi9cclxuY29uc3QgVEFVID0gTWF0aC5QSSAqIDI7XHJcblxyXG4vKipcclxuICogVHdvIHRpbWVzIFBJLlxyXG4gKiBAY29uc3RhbnQge251bWJlcn1cclxuICovXHJcbmNvbnN0IEhBTEZfUEkgPSBNYXRoLlBJIC8gMjtcclxuXHJcbi8qKlxyXG4gKiBTcXVhcmUgcm9vdCBvZiAyLlxyXG4gKiBAY29uc3RhbnQge251bWJlcn1cclxuICovXHJcbmNvbnN0IFNRUlQyID0gTWF0aC5zcXJ0KDIpO1xyXG5cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhIHZlY3RvciAzLlxyXG4gKiBAcGFyYW0ge251bWJlcltdfSB2IFZlY3RvciAzIGFycmF5XHJcbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gTm9ybWFsaXplZCB2ZWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZSh2KSB7XHJcbiAgY29uc3QgbCA9IDEgLyAoTWF0aC5zcXJ0KHZbMF0gKiB2WzBdICsgdlsxXSAqIHZbMV0gKyB2WzJdICogdlsyXSkgfHwgMSk7XHJcbiAgdlswXSAqPSBsO1xyXG4gIHZbMV0gKj0gbDtcclxuICB2WzJdICo9IGw7XHJcbiAgcmV0dXJuIHY7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbnN1cmUgZmlyc3QgYXJndW1lbnQgcGFzc2VkIHRvIHRoZSBwcmltaXRpdmUgZnVuY3Rpb25zIGlzIGFuIG9iamVjdFxyXG4gKiBAcGFyYW0gey4uLip9IGFyZ3NcclxuICovXHJcbmZ1bmN0aW9uIGNoZWNrQXJndW1lbnRzKGFyZ3MpIHtcclxuICBjb25zdCBhcmd1bWVudFR5cGUgPSB0eXBlb2YgYXJnc1swXTtcclxuICBpZiAoYXJndW1lbnRUeXBlICE9PSBcIm9iamVjdFwiICYmIGFyZ3VtZW50VHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0LlwiKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxubGV0IFRZUEVEX0FSUkFZX1RZUEU7XHJcblxyXG4vKipcclxuICogRW5mb3JjZSBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIGZvciBjZWxsc1xyXG4gKiBAcGFyYW0geyhDbGFzczxVaW50OEFycmF5PnxDbGFzczxVaW50MTZBcnJheT58Q2xhc3M8VWludDMyQXJyYXk+KX0gdHlwZVxyXG4gKi9cclxuZnVuY3Rpb24gc2V0VHlwZWRBcnJheVR5cGUodHlwZSkge1xyXG4gIFRZUEVEX0FSUkFZX1RZUEUgPSB0eXBlO1xyXG59XHJcblxyXG4vKipcclxuICogU2VsZWN0IGNlbGxzIHR5cGVkIGFycmF5IGZyb20gYSBzaXplIGRldGVybWluZWQgYnkgYW1vdW50IG9mIHZlcnRpY2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBUaGUgbWF4IHZhbHVlIGV4cGVjdGVkXHJcbiAqIEByZXR1cm5zIHsoVWludDhBcnJheXxVaW50MTZBcnJheXxVaW50MzJBcnJheSl9XHJcbiAqIEBzZWUgW01ETiBUeXBlZEFycmF5IG9iamVjdHNde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1R5cGVkQXJyYXkjdHlwZWRhcnJheV9vYmplY3RzfVxyXG4gKi9cclxuY29uc3QgZ2V0Q2VsbHNUeXBlZEFycmF5ID0gKHNpemUpID0+XHJcbiAgVFlQRURfQVJSQVlfVFlQRSB8fFxyXG4gIChzaXplIDw9IDI1NSA/IFVpbnQ4QXJyYXkgOiBzaXplIDw9IDY1NTM1ID8gVWludDE2QXJyYXkgOiBVaW50MzJBcnJheSk7XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IFRNUCA9IFswLCAwLCAwXTtcclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgUExBTkVfRElSRUNUSU9OUyA9IHtcclxuICB6OiBbMCwgMSwgMiwgMSwgLTEsIDFdLFxyXG4gIFwiLXpcIjogWzAsIDEsIDIsIC0xLCAtMSwgLTFdLFxyXG4gIFwiLXhcIjogWzIsIDEsIDAsIDEsIC0xLCAtMV0sXHJcbiAgeDogWzIsIDEsIDAsIC0xLCAtMSwgMV0sXHJcbiAgeTogWzAsIDIsIDEsIDEsIDEsIDFdLFxyXG4gIFwiLXlcIjogWzAsIDIsIDEsIDEsIC0xLCAtMV0sXHJcbn07XHJcblxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNvbXB1dGVQbGFuZShcclxuICBnZW9tZXRyeSxcclxuICBpbmRpY2VzLFxyXG4gIHN1LFxyXG4gIHN2LFxyXG4gIG51LFxyXG4gIG52LFxyXG4gIGRpcmVjdGlvbiA9IFwielwiLFxyXG4gIHB3ID0gMCxcclxuICBxdWFkcyA9IGZhbHNlLFxyXG4gIHV2U2NhbGUgPSBbMSwgMV0sXHJcbiAgdXZPZmZzZXQgPSBbMCwgMF0sXHJcbiAgY2VudGVyID0gWzAsIDAsIDBdLFxyXG4gIGNjdyA9IHRydWVcclxuKSB7XHJcbiAgY29uc3QgeyBwb3NpdGlvbnMsIG5vcm1hbHMsIHV2cywgY2VsbHMgfSA9IGdlb21ldHJ5O1xyXG4gIGNvbnN0IFt1LCB2LCB3LCBmbGlwVSwgZmxpcFYsIG5vcm1hbF0gPSBQTEFORV9ESVJFQ1RJT05TW2RpcmVjdGlvbl07XHJcblxyXG4gIGNvbnN0IHZlcnRleE9mZnNldCA9IGluZGljZXMudmVydGV4O1xyXG5cclxuICBmb3IgKGxldCBqID0gMDsgaiA8PSBudjsgaisrKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBudTsgaSsrKSB7XHJcbiAgICAgIHBvc2l0aW9uc1tpbmRpY2VzLnZlcnRleCAqIDMgKyB1XSA9XHJcbiAgICAgICAgKC1zdSAvIDIgKyAoaSAqIHN1KSAvIG51KSAqIGZsaXBVICsgY2VudGVyW3VdO1xyXG4gICAgICBwb3NpdGlvbnNbaW5kaWNlcy52ZXJ0ZXggKiAzICsgdl0gPVxyXG4gICAgICAgICgtc3YgLyAyICsgKGogKiBzdikgLyBudikgKiBmbGlwViArIGNlbnRlclt2XTtcclxuICAgICAgcG9zaXRpb25zW2luZGljZXMudmVydGV4ICogMyArIHddID0gcHcgKyBjZW50ZXJbd107XHJcblxyXG4gICAgICBub3JtYWxzW2luZGljZXMudmVydGV4ICogMyArIHddID0gbm9ybWFsO1xyXG5cclxuICAgICAgdXZzW2luZGljZXMudmVydGV4ICogMl0gPSAoaSAvIG51KSAqIHV2U2NhbGVbMF0gKyB1dk9mZnNldFswXTtcclxuICAgICAgdXZzW2luZGljZXMudmVydGV4ICogMiArIDFdID0gKDEgLSBqIC8gbnYpICogdXZTY2FsZVsxXSArIHV2T2Zmc2V0WzFdO1xyXG5cclxuICAgICAgaW5kaWNlcy52ZXJ0ZXgrKztcclxuXHJcbiAgICAgIGlmIChqIDwgbnYgJiYgaSA8IG51KSB7XHJcbiAgICAgICAgY29uc3QgbiA9IHZlcnRleE9mZnNldCArIGogKiAobnUgKyAxKSArIGk7XHJcbiAgICAgICAgaWYgKHF1YWRzKSB7XHJcbiAgICAgICAgICBjb25zdCBvID0gdmVydGV4T2Zmc2V0ICsgKGogKyAxKSAqIChudSArIDEpICsgaTtcclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbF0gPSBuO1xyXG4gICAgICAgICAgY2VsbHNbaW5kaWNlcy5jZWxsICsgMV0gPSBvO1xyXG4gICAgICAgICAgY2VsbHNbaW5kaWNlcy5jZWxsICsgMl0gPSBvICsgMTtcclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbCArIDNdID0gbiArIDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbF0gPSBuO1xyXG4gICAgICAgICAgY2VsbHNbaW5kaWNlcy5jZWxsICsgKGNjdyA/IDEgOiAyKV0gPSBuICsgbnUgKyAxO1xyXG4gICAgICAgICAgY2VsbHNbaW5kaWNlcy5jZWxsICsgKGNjdyA/IDIgOiAxKV0gPSBuICsgbnUgKyAyO1xyXG5cclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbCArIDNdID0gbjtcclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbCArIChjY3cgPyA0IDogNSldID0gbiArIG51ICsgMjtcclxuICAgICAgICAgIGNlbGxzW2luZGljZXMuY2VsbCArIChjY3cgPyA1IDogNCldID0gbiArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluZGljZXMuY2VsbCArPSBxdWFkcyA/IDQgOiA2O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZ2VvbWV0cnk7XHJcbn1cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEN1YmVPcHRpb25zXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc3g9MV1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtzeT1zeF1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtzej1zeF1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtueD0xXVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW255PW54XVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW256PW54XVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUN1YmUoe1xyXG4gIHN4ID0gMSxcclxuICBzeSA9IDEsXHJcbiAgc3ogPSAxLFxyXG4gIG54ID0gMSxcclxuICBueSA9IDEsXHJcbiAgbnogPSAxLFxyXG59ID0ge30pIHtcclxuICBjaGVja0FyZ3VtZW50cyhhcmd1bWVudHMpO1xyXG5cclxuICBjb25zdCBzaXplID1cclxuICAgIChueCArIDEpICogKG55ICsgMSkgKiAyICsgKG54ICsgMSkgKiAobnogKyAxKSAqIDIgKyAobnogKyAxKSAqIChueSArIDEpICogMjtcclxuXHJcbiAgY29uc3QgZ2VvbWV0cnkgPSB7XHJcbiAgICBwb3NpdGlvbnM6IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpLFxyXG4gICAgbm9ybWFsczogbmV3IEZsb2F0MzJBcnJheShzaXplICogMyksXHJcbiAgICB1dnM6IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDIpLFxyXG4gICAgY2VsbHM6IG5ldyAoZ2V0Q2VsbHNUeXBlZEFycmF5KHNpemUpKShcclxuICAgICAgKG54ICogbnkgKiAyICsgbnggKiBueiAqIDIgKyBueiAqIG55ICogMikgKiA2XHJcbiAgICApLFxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGhhbGZTWCA9IHN4ICogMC41O1xyXG4gIGNvbnN0IGhhbGZTWSA9IHN5ICogMC41O1xyXG4gIGNvbnN0IGhhbGZTWiA9IHN6ICogMC41O1xyXG5cclxuICBjb25zdCBpbmRpY2VzID0geyB2ZXJ0ZXg6IDAsIGNlbGw6IDAgfTtcclxuXHJcbiAgY29tcHV0ZVBsYW5lKGdlb21ldHJ5LCBpbmRpY2VzLCBzeCwgc3ksIG54LCBueSwgXCJ6XCIsIGhhbGZTWik7XHJcbiAgY29tcHV0ZVBsYW5lKGdlb21ldHJ5LCBpbmRpY2VzLCBzeCwgc3ksIG54LCBueSwgXCItelwiLCAtaGFsZlNaKTtcclxuICBjb21wdXRlUGxhbmUoZ2VvbWV0cnksIGluZGljZXMsIHN6LCBzeSwgbnosIG55LCBcIi14XCIsIC1oYWxmU1gpO1xyXG4gIGNvbXB1dGVQbGFuZShnZW9tZXRyeSwgaW5kaWNlcywgc3osIHN5LCBueiwgbnksIFwieFwiLCBoYWxmU1gpO1xyXG4gIGNvbXB1dGVQbGFuZShnZW9tZXRyeSwgaW5kaWNlcywgc3gsIHN6LCBueCwgbnosIFwieVwiLCBoYWxmU1kpO1xyXG4gIGNvbXB1dGVQbGFuZShnZW9tZXRyeSwgaW5kaWNlcywgc3gsIHN6LCBueCwgbnosIFwiLXlcIiwgLWhhbGZTWSk7XHJcblxyXG4gIHJldHVybiBnZW9tZXRyeTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEVsbGlwc29pZE9wdGlvbnNcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtyYWRpdXM9MC41XVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW254PTMyXVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW255PTE2XVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3J4PTFdXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbcng9MC41XVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3J6PXJ5XVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3RoZXRhPU1hdGguUEldXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdGhldGFPZmZzZXQ9MF1cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtwaGk9VEFVXVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3BoaU9mZnNldD0wXVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlRWxsaXBzb2lkKHtcclxuICByYWRpdXMgPSAxLFxyXG4gIG54ID0gMzIsXHJcbiAgbnkgPSAxNixcclxuICByeCA9IDAuNSxcclxuICByeSA9IDAuMjUsXHJcbiAgcnogPSByeSxcclxuICB0aGV0YSA9IE1hdGguUEksXHJcbiAgdGhldGFPZmZzZXQgPSAwLFxyXG4gIHBoaSA9IFRBVSxcclxuICBwaGlPZmZzZXQgPSAwLFxyXG59ID0ge30pIHtcclxuICBjaGVja0FyZ3VtZW50cyhhcmd1bWVudHMpO1xyXG5cclxuICBjb25zdCBzaXplID0gKG55ICsgMSkgKiAobnggKyAxKTtcclxuXHJcbiAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShzaXplICogMyk7XHJcbiAgY29uc3Qgbm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpO1xyXG4gIGNvbnN0IHV2cyA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDIpO1xyXG4gIGNvbnN0IGNlbGxzID0gbmV3IChnZXRDZWxsc1R5cGVkQXJyYXkoc2l6ZSkpKG55ICogbnggKiA2KTtcclxuXHJcbiAgbGV0IHZlcnRleEluZGV4ID0gMDtcclxuICBsZXQgY2VsbEluZGV4ID0gMDtcclxuXHJcbiAgZm9yIChsZXQgeSA9IDA7IHkgPD0gbnk7IHkrKykge1xyXG4gICAgY29uc3QgdiA9IHkgLyBueTtcclxuICAgIGNvbnN0IHQgPSB2ICogdGhldGEgKyB0aGV0YU9mZnNldDtcclxuICAgIGNvbnN0IGNvc1RoZXRhID0gTWF0aC5jb3ModCk7XHJcbiAgICBjb25zdCBzaW5UaGV0YSA9IE1hdGguc2luKHQpO1xyXG5cclxuICAgIGZvciAobGV0IHggPSAwOyB4IDw9IG54OyB4KyspIHtcclxuICAgICAgY29uc3QgdSA9IHggLyBueDtcclxuICAgICAgY29uc3QgcCA9IHUgKiBwaGkgKyBwaGlPZmZzZXQ7XHJcbiAgICAgIGNvbnN0IGNvc1BoaSA9IE1hdGguY29zKHApO1xyXG4gICAgICBjb25zdCBzaW5QaGkgPSBNYXRoLnNpbihwKTtcclxuXHJcbiAgICAgIFRNUFswXSA9IC1yeCAqIGNvc1BoaSAqIHNpblRoZXRhO1xyXG4gICAgICBUTVBbMV0gPSAtcnkgKiBjb3NUaGV0YTtcclxuICAgICAgVE1QWzJdID0gcnogKiBzaW5QaGkgKiBzaW5UaGV0YTtcclxuXHJcbiAgICAgIHBvc2l0aW9uc1t2ZXJ0ZXhJbmRleCAqIDNdID0gcmFkaXVzICogVE1QWzBdO1xyXG4gICAgICBwb3NpdGlvbnNbdmVydGV4SW5kZXggKiAzICsgMV0gPSByYWRpdXMgKiBUTVBbMV07XHJcbiAgICAgIHBvc2l0aW9uc1t2ZXJ0ZXhJbmRleCAqIDMgKyAyXSA9IHJhZGl1cyAqIFRNUFsyXTtcclxuXHJcbiAgICAgIG5vcm1hbGl6ZShUTVApO1xyXG5cclxuICAgICAgbm9ybWFsc1t2ZXJ0ZXhJbmRleCAqIDNdID0gVE1QWzBdO1xyXG4gICAgICBub3JtYWxzW3ZlcnRleEluZGV4ICogMyArIDFdID0gVE1QWzFdO1xyXG4gICAgICBub3JtYWxzW3ZlcnRleEluZGV4ICogMyArIDJdID0gVE1QWzJdO1xyXG5cclxuICAgICAgdXZzW3ZlcnRleEluZGV4ICogMl0gPSB1O1xyXG4gICAgICB1dnNbdmVydGV4SW5kZXggKiAyICsgMV0gPSB2O1xyXG5cclxuICAgICAgdmVydGV4SW5kZXgrKztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoeSA+IDApIHtcclxuICAgICAgZm9yIChsZXQgaSA9IHZlcnRleEluZGV4IC0gMiAqIChueCArIDEpOyBpICsgbnggKyAyIDwgdmVydGV4SW5kZXg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGEgPSBpO1xyXG4gICAgICAgIGNvbnN0IGIgPSBpICsgMTtcclxuICAgICAgICBjb25zdCBjID0gaSArIG54ICsgMTtcclxuICAgICAgICBjb25zdCBkID0gaSArIG54ICsgMjtcclxuICAgICAgICBjZWxsc1tjZWxsSW5kZXhdID0gYTtcclxuICAgICAgICBjZWxsc1tjZWxsSW5kZXggKyAxXSA9IGI7XHJcbiAgICAgICAgY2VsbHNbY2VsbEluZGV4ICsgMl0gPSBjO1xyXG5cclxuICAgICAgICBjZWxsc1tjZWxsSW5kZXggKyAzXSA9IGM7XHJcbiAgICAgICAgY2VsbHNbY2VsbEluZGV4ICsgNF0gPSBiO1xyXG4gICAgICAgIGNlbGxzW2NlbGxJbmRleCArIDVdID0gZDtcclxuXHJcbiAgICAgICAgY2VsbEluZGV4ICs9IDY7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBwb3NpdGlvbnMsXHJcbiAgICBub3JtYWxzLFxyXG4gICAgdXZzLFxyXG4gICAgY2VsbHMsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJveChvcHRpb25zKSB7XHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gIGxldCBkaW1lbnNpb25zID0gb3B0aW9ucy5kaW1lbnNpb25zIHx8IFsxLCAxLCAxXTtcclxuICBsZXQgcG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uIHx8IFtcclxuICAgIC1kaW1lbnNpb25zWzBdIC8gMixcclxuICAgIC1kaW1lbnNpb25zWzFdIC8gMixcclxuICAgIC1kaW1lbnNpb25zWzJdIC8gMixcclxuICBdO1xyXG4gIGxldCB4ID0gcG9zaXRpb25bMF07XHJcbiAgbGV0IHkgPSBwb3NpdGlvblsxXTtcclxuICBsZXQgeiA9IHBvc2l0aW9uWzJdO1xyXG4gIGxldCB3aWR0aCA9IGRpbWVuc2lvbnNbMF07XHJcbiAgbGV0IGhlaWdodCA9IGRpbWVuc2lvbnNbMV07XHJcbiAgbGV0IGRlcHRoID0gZGltZW5zaW9uc1syXTtcclxuXHJcbiAgbGV0IGZibCA9IHsgeDogeCwgeTogeSwgejogeiArIGRlcHRoIH07XHJcbiAgbGV0IGZiciA9IHsgeDogeCArIHdpZHRoLCB5OiB5LCB6OiB6ICsgZGVwdGggfTtcclxuICBsZXQgZnRsID0geyB4OiB4LCB5OiB5ICsgaGVpZ2h0LCB6OiB6ICsgZGVwdGggfTtcclxuICBsZXQgZnRyID0geyB4OiB4ICsgd2lkdGgsIHk6IHkgKyBoZWlnaHQsIHo6IHogKyBkZXB0aCB9O1xyXG4gIGxldCBiYmwgPSB7IHg6IHgsIHk6IHksIHo6IHogfTtcclxuICBsZXQgYmJyID0geyB4OiB4ICsgd2lkdGgsIHk6IHksIHo6IHogfTtcclxuICBsZXQgYnRsID0geyB4OiB4LCB5OiB5ICsgaGVpZ2h0LCB6OiB6IH07XHJcbiAgbGV0IGJ0ciA9IHsgeDogeCArIHdpZHRoLCB5OiB5ICsgaGVpZ2h0LCB6OiB6IH07XHJcblxyXG4gIGxldCBwb3NpdGlvbnMgPSBbXHJcbiAgICAvL2Zyb250XHJcbiAgICBmYmwueCxcclxuICAgIGZibC55LFxyXG4gICAgZmJsLnosXHJcbiAgICBmYnIueCxcclxuICAgIGZici55LFxyXG4gICAgZmJyLnosXHJcbiAgICBmdGwueCxcclxuICAgIGZ0bC55LFxyXG4gICAgZnRsLnosXHJcbiAgICBmdGwueCxcclxuICAgIGZ0bC55LFxyXG4gICAgZnRsLnosXHJcbiAgICBmYnIueCxcclxuICAgIGZici55LFxyXG4gICAgZmJyLnosXHJcbiAgICBmdHIueCxcclxuICAgIGZ0ci55LFxyXG4gICAgZnRyLnosXHJcblxyXG4gICAgLy9yaWdodFxyXG4gICAgZmJyLngsXHJcbiAgICBmYnIueSxcclxuICAgIGZici56LFxyXG4gICAgYmJyLngsXHJcbiAgICBiYnIueSxcclxuICAgIGJici56LFxyXG4gICAgZnRyLngsXHJcbiAgICBmdHIueSxcclxuICAgIGZ0ci56LFxyXG4gICAgZnRyLngsXHJcbiAgICBmdHIueSxcclxuICAgIGZ0ci56LFxyXG4gICAgYmJyLngsXHJcbiAgICBiYnIueSxcclxuICAgIGJici56LFxyXG4gICAgYnRyLngsXHJcbiAgICBidHIueSxcclxuICAgIGJ0ci56LFxyXG5cclxuICAgIC8vYmFja1xyXG4gICAgZmJyLngsXHJcbiAgICBiYnIueSxcclxuICAgIGJici56LFxyXG4gICAgYmJsLngsXHJcbiAgICBiYmwueSxcclxuICAgIGJibC56LFxyXG4gICAgYnRyLngsXHJcbiAgICBidHIueSxcclxuICAgIGJ0ci56LFxyXG4gICAgYnRyLngsXHJcbiAgICBidHIueSxcclxuICAgIGJ0ci56LFxyXG4gICAgYmJsLngsXHJcbiAgICBiYmwueSxcclxuICAgIGJibC56LFxyXG4gICAgYnRsLngsXHJcbiAgICBidGwueSxcclxuICAgIGJ0bC56LFxyXG5cclxuICAgIC8vbGVmdFxyXG4gICAgYmJsLngsXHJcbiAgICBiYmwueSxcclxuICAgIGJibC56LFxyXG4gICAgZmJsLngsXHJcbiAgICBmYmwueSxcclxuICAgIGZibC56LFxyXG4gICAgYnRsLngsXHJcbiAgICBidGwueSxcclxuICAgIGJ0bC56LFxyXG4gICAgYnRsLngsXHJcbiAgICBidGwueSxcclxuICAgIGJ0bC56LFxyXG4gICAgZmJsLngsXHJcbiAgICBmYmwueSxcclxuICAgIGZibC56LFxyXG4gICAgZnRsLngsXHJcbiAgICBmdGwueSxcclxuICAgIGZ0bC56LFxyXG5cclxuICAgIC8vdG9wXHJcbiAgICBmdGwueCxcclxuICAgIGZ0bC55LFxyXG4gICAgZnRsLnosXHJcbiAgICBmdHIueCxcclxuICAgIGZ0ci55LFxyXG4gICAgZnRyLnosXHJcbiAgICBidGwueCxcclxuICAgIGJ0bC55LFxyXG4gICAgYnRsLnosXHJcbiAgICBidGwueCxcclxuICAgIGJ0bC55LFxyXG4gICAgYnRsLnosXHJcbiAgICBmdHIueCxcclxuICAgIGZ0ci55LFxyXG4gICAgZnRyLnosXHJcbiAgICBidHIueCxcclxuICAgIGJ0ci55LFxyXG4gICAgYnRyLnosXHJcblxyXG4gICAgLy9ib3R0b21cclxuICAgIGJibC54LFxyXG4gICAgYmJsLnksXHJcbiAgICBiYmwueixcclxuICAgIGJici54LFxyXG4gICAgYmJyLnksXHJcbiAgICBiYnIueixcclxuICAgIGZibC54LFxyXG4gICAgZmJsLnksXHJcbiAgICBmYmwueixcclxuICAgIGZibC54LFxyXG4gICAgZmJsLnksXHJcbiAgICBmYmwueixcclxuICAgIGJici54LFxyXG4gICAgYmJyLnksXHJcbiAgICBiYnIueixcclxuICAgIGZici54LFxyXG4gICAgZmJyLnksXHJcbiAgICBmYnIueixcclxuICBdO1xyXG5cclxuICBsZXQgdXZzID0gW1xyXG4gICAgLy9mcm9udFxyXG4gICAgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMSwgMSwgMCwgMSwgMSxcclxuXHJcbiAgICAvL3JpZ2h0XHJcbiAgICAwLCAwLCAxLCAwLCAwLCAxLCAwLCAxLCAxLCAwLCAxLCAxLFxyXG5cclxuICAgIC8vYmFja1xyXG4gICAgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMSwgMSwgMCwgMSwgMSxcclxuXHJcbiAgICAvL2xlZnRcclxuICAgIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDEsIDEsIDAsIDEsIDEsXHJcblxyXG4gICAgLy90b3BcclxuICAgIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDEsIDEsIDAsIDEsIDEsXHJcblxyXG4gICAgLy9ib3R0b21cclxuICAgIDAsIDAsIDEsIDAsIDAsIDEsIDAsIDEsIDEsIDAsIDEsIDEsXHJcbiAgXTtcclxuXHJcbiAgbGV0IG5vcm1hbHMgPSBbXHJcbiAgICAvLyBmcm9udFxyXG4gICAgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSxcclxuXHJcbiAgICAvLyByaWdodFxyXG4gICAgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCxcclxuXHJcbiAgICAvLyBiYWNrXHJcbiAgICAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsIC0xLFxyXG5cclxuICAgIC8vIGxlZnRcclxuICAgIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsXHJcblxyXG4gICAgLy8gdG9wXHJcbiAgICAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLFxyXG5cclxuICAgIC8vIGJvdHRvbVxyXG4gICAgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMSwgMCxcclxuICBdO1xyXG4gIHJldHVybiB7XHJcbiAgICBwb3NpdGlvbnM6IHBvc2l0aW9ucyxcclxuICAgIG5vcm1hbHM6IG5vcm1hbHMsXHJcbiAgICB1dnM6IHV2cyxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3BoZXJlKG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgbGV0IGxvbmdCYW5kcyA9IG9wdGlvbnMubG9uZ0JhbmRzIHx8IDMyO1xyXG4gIGxldCBsYXRCYW5kcyA9IG9wdGlvbnMubGF0QmFuZHMgfHwgMzI7XHJcbiAgbGV0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzIHx8IDE7XHJcbiAgbGV0IGxhdF9zdGVwID0gTWF0aC5QSSAvIGxhdEJhbmRzO1xyXG4gIGxldCBsb25nX3N0ZXAgPSAoMiAqIE1hdGguUEkpIC8gbG9uZ0JhbmRzO1xyXG4gIGxldCBudW1fcG9zaXRpb25zID0gbG9uZ0JhbmRzICogbGF0QmFuZHMgKiA0O1xyXG4gIGxldCBudW1faW5kaWNlcyA9IGxvbmdCYW5kcyAqIGxhdEJhbmRzICogNjtcclxuICBsZXQgbGF0X2FuZ2xlLCBsb25nX2FuZ2xlO1xyXG4gIGxldCBwb3NpdGlvbnMgPSBuZXcgQXJyYXkobnVtX3Bvc2l0aW9ucyAqIDMpO1xyXG4gIGxldCBub3JtYWxzID0gbmV3IEFycmF5KG51bV9wb3NpdGlvbnMgKiAzKTtcclxuICBsZXQgdXZzID0gbmV3IEFycmF5KG51bV9wb3NpdGlvbnMgKiAyKTtcclxuICBsZXQgaW5kaWNlcyA9IG5ldyBBcnJheShudW1faW5kaWNlcyk7XHJcbiAgbGV0IHgxLCB4MiwgeDMsIHg0LCB5MSwgeTIsIHoxLCB6MiwgejMsIHo0LCB1MSwgdTIsIHYxLCB2MjtcclxuICBsZXQgaSwgajtcclxuICBsZXQgayA9IDAsXHJcbiAgICBsID0gMDtcclxuICBsZXQgdmksIHRpO1xyXG5cclxuICBmb3IgKGkgPSAwOyBpIDwgbGF0QmFuZHM7IGkrKykge1xyXG4gICAgbGF0X2FuZ2xlID0gaSAqIGxhdF9zdGVwO1xyXG4gICAgeTEgPSBNYXRoLmNvcyhsYXRfYW5nbGUpO1xyXG4gICAgeTIgPSBNYXRoLmNvcyhsYXRfYW5nbGUgKyBsYXRfc3RlcCk7XHJcbiAgICBmb3IgKGogPSAwOyBqIDwgbG9uZ0JhbmRzOyBqKyspIHtcclxuICAgICAgbG9uZ19hbmdsZSA9IGogKiBsb25nX3N0ZXA7XHJcbiAgICAgIHgxID0gTWF0aC5zaW4obGF0X2FuZ2xlKSAqIE1hdGguY29zKGxvbmdfYW5nbGUpO1xyXG4gICAgICB4MiA9IE1hdGguc2luKGxhdF9hbmdsZSkgKiBNYXRoLmNvcyhsb25nX2FuZ2xlICsgbG9uZ19zdGVwKTtcclxuICAgICAgeDMgPSBNYXRoLnNpbihsYXRfYW5nbGUgKyBsYXRfc3RlcCkgKiBNYXRoLmNvcyhsb25nX2FuZ2xlKTtcclxuICAgICAgeDQgPSBNYXRoLnNpbihsYXRfYW5nbGUgKyBsYXRfc3RlcCkgKiBNYXRoLmNvcyhsb25nX2FuZ2xlICsgbG9uZ19zdGVwKTtcclxuICAgICAgejEgPSBNYXRoLnNpbihsYXRfYW5nbGUpICogTWF0aC5zaW4obG9uZ19hbmdsZSk7XHJcbiAgICAgIHoyID0gTWF0aC5zaW4obGF0X2FuZ2xlKSAqIE1hdGguc2luKGxvbmdfYW5nbGUgKyBsb25nX3N0ZXApO1xyXG4gICAgICB6MyA9IE1hdGguc2luKGxhdF9hbmdsZSArIGxhdF9zdGVwKSAqIE1hdGguc2luKGxvbmdfYW5nbGUpO1xyXG4gICAgICB6NCA9IE1hdGguc2luKGxhdF9hbmdsZSArIGxhdF9zdGVwKSAqIE1hdGguc2luKGxvbmdfYW5nbGUgKyBsb25nX3N0ZXApO1xyXG4gICAgICB1MSA9IDEgLSBqIC8gbG9uZ0JhbmRzO1xyXG4gICAgICB1MiA9IDEgLSAoaiArIDEpIC8gbG9uZ0JhbmRzO1xyXG4gICAgICB2MSA9IDEgLSBpIC8gbGF0QmFuZHM7XHJcbiAgICAgIHYyID0gMSAtIChpICsgMSkgLyBsYXRCYW5kcztcclxuICAgICAgdmkgPSBrICogMztcclxuICAgICAgdGkgPSBrICogMjtcclxuXHJcbiAgICAgIHBvc2l0aW9uc1t2aV0gPSB4MSAqIHJhZGl1cztcclxuICAgICAgcG9zaXRpb25zW3ZpICsgMV0gPSB5MSAqIHJhZGl1cztcclxuICAgICAgcG9zaXRpb25zW3ZpICsgMl0gPSB6MSAqIHJhZGl1czsgLy92MFxyXG5cclxuICAgICAgcG9zaXRpb25zW3ZpICsgM10gPSB4MiAqIHJhZGl1cztcclxuICAgICAgcG9zaXRpb25zW3ZpICsgNF0gPSB5MSAqIHJhZGl1cztcclxuICAgICAgcG9zaXRpb25zW3ZpICsgNV0gPSB6MiAqIHJhZGl1czsgLy92MVxyXG5cclxuICAgICAgcG9zaXRpb25zW3ZpICsgNl0gPSB4MyAqIHJhZGl1cztcclxuICAgICAgcG9zaXRpb25zW3ZpICsgN10gPSB5MiAqIHJhZGl1cztcclxuICAgICAgcG9zaXRpb25zW3ZpICsgOF0gPSB6MyAqIHJhZGl1czsgLy8gdjJcclxuXHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDldID0geDQgKiByYWRpdXM7XHJcbiAgICAgIHBvc2l0aW9uc1t2aSArIDEwXSA9IHkyICogcmFkaXVzO1xyXG4gICAgICBwb3NpdGlvbnNbdmkgKyAxMV0gPSB6NCAqIHJhZGl1czsgLy8gdjNcclxuXHJcbiAgICAgIG5vcm1hbHNbdmldID0geDE7XHJcbiAgICAgIG5vcm1hbHNbdmkgKyAxXSA9IHkxO1xyXG4gICAgICBub3JtYWxzW3ZpICsgMl0gPSB6MTtcclxuXHJcbiAgICAgIG5vcm1hbHNbdmkgKyAzXSA9IHgyO1xyXG4gICAgICBub3JtYWxzW3ZpICsgNF0gPSB5MTtcclxuICAgICAgbm9ybWFsc1t2aSArIDVdID0gejI7XHJcblxyXG4gICAgICBub3JtYWxzW3ZpICsgNl0gPSB4MztcclxuICAgICAgbm9ybWFsc1t2aSArIDddID0geTI7XHJcbiAgICAgIG5vcm1hbHNbdmkgKyA4XSA9IHozO1xyXG5cclxuICAgICAgbm9ybWFsc1t2aSArIDldID0geDQ7XHJcbiAgICAgIG5vcm1hbHNbdmkgKyAxMF0gPSB5MjtcclxuICAgICAgbm9ybWFsc1t2aSArIDExXSA9IHo0O1xyXG5cclxuICAgICAgdXZzW3RpXSA9IHUxO1xyXG4gICAgICB1dnNbdGkgKyAxXSA9IHYxO1xyXG5cclxuICAgICAgdXZzW3RpICsgMl0gPSB1MjtcclxuICAgICAgdXZzW3RpICsgM10gPSB2MTtcclxuXHJcbiAgICAgIHV2c1t0aSArIDRdID0gdTE7XHJcbiAgICAgIHV2c1t0aSArIDVdID0gdjI7XHJcblxyXG4gICAgICB1dnNbdGkgKyA2XSA9IHUyO1xyXG4gICAgICB1dnNbdGkgKyA3XSA9IHYyO1xyXG5cclxuICAgICAgaW5kaWNlc1tsXSA9IGs7XHJcbiAgICAgIGluZGljZXNbbCArIDFdID0gayArIDE7XHJcbiAgICAgIGluZGljZXNbbCArIDJdID0gayArIDI7XHJcbiAgICAgIGluZGljZXNbbCArIDNdID0gayArIDI7XHJcbiAgICAgIGluZGljZXNbbCArIDRdID0gayArIDE7XHJcbiAgICAgIGluZGljZXNbbCArIDVdID0gayArIDM7XHJcblxyXG4gICAgICBrICs9IDQ7XHJcbiAgICAgIGwgKz0gNjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBwb3NpdGlvbnM6IHBvc2l0aW9ucyxcclxuICAgIG5vcm1hbHM6IG5vcm1hbHMsXHJcbiAgICB1dnM6IHV2cyxcclxuICAgIGluZGljZXM6IGluZGljZXMsXHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcclxuaW1wb3J0IHsgY3JlYXRlU3BoZXJlIH0gZnJvbSBcIi4uL3V0aWxzL0dlb21ldHJ5VXRpbHNcIjtcclxuaW1wb3J0IEdlb21ldHJ5IGZyb20gXCIuL0dlb21ldHJ5XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcGhlcmVHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5IHtcclxuXHRub3JtYWxzOiBudW1iZXJbXTtcclxuXHR1dnM6IG51bWJlcltdO1xyXG5cdHBvc2l0aW9uczogbnVtYmVyW107XHJcblx0aW5kaWNlczogbnVtYmVyW107XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRzdXBlcih7fSk7XHJcblx0XHR0aGlzLnR5cGUgPSBcInNwaGVyZVwiO1xyXG5cdFx0dGhpcy5pbml0KCk7XHJcblx0fVxyXG5cdHByaXZhdGUgaW5pdCgpIHtcclxuXHRcdGNvbnN0IHsgcG9zaXRpb25zLCBub3JtYWxzLCB1dnMsIGluZGljZXMgfSA9IGNyZWF0ZVNwaGVyZSh7fSk7XHJcblx0XHR0aGlzLnBvc2l0aW9ucyA9IHBvc2l0aW9ucztcclxuXHRcdHRoaXMubm9ybWFscyA9IG5vcm1hbHM7XHJcblx0XHR0aGlzLnV2cyA9IHV2cztcclxuXHRcdHRoaXMuaW5kaWNlcyA9IGluZGljZXM7XHJcblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSh0aGlzLnBvc2l0aW9ucyk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHRoaXMucG9zaXRpb25zLCAzKSk7XHJcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcIm5vcm1hbFwiLCB0aGlzLm5vcm1hbHMsIDMpKTtcclxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwidXZcIiwgdGhpcy51dnMsIDIpKTtcclxuXHJcblx0XHR0aGlzLnNldEluZGljZSh0aGlzLmluZGljZXMpO1xyXG5cdFx0dGhpcy5jb3VudCA9IHRoaXMuaW5kaWNlcy5sZW5ndGg7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCBHZW9tZXRyeSBmcm9tIFwiLi9HZW9tZXRyeVwiO1xyXG5pbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcclxuaW1wb3J0IHsgY3JlYXRlQm94IH0gZnJvbSBcIi4uL3V0aWxzL0dlb21ldHJ5VXRpbHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm94R2VvbWV0cnkgZXh0ZW5kcyBHZW9tZXRyeSB7XHJcbiAgbm9ybWFsOiBudW1iZXJbXTtcclxuICB1djogbnVtYmVyW107XHJcbiAgcG9zaXRpb246IG51bWJlcltdO1xyXG4gIGluZGljZXM6IG51bWJlcltdO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHdpZHRoOiBudW1iZXIgPSAxMCxcclxuICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlciA9IDEwLFxyXG4gICAgcHVibGljIGRlcHRoOiBudW1iZXIgPSAxMFxyXG4gICkge1xyXG4gICAgc3VwZXIoe30pO1xyXG4gICAgdGhpcy50eXBlID0gXCJib3hcIjtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuICBwcml2YXRlIGluaXQoKSB7XHJcbiAgICAvL2dlbmVyYXRlIHBvcyB1diBub3JtYWwgc28gb25cclxuICAgIGNvbnN0IHsgcG9zaXRpb25zLCBub3JtYWxzLCB1dnMgfSA9IGNyZWF0ZUJveCh7XHJcbiAgICAgIGRpbWVuc2lvbnM6IFt0aGlzLmRlcHRoLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodF0sXHJcbiAgICB9KTtcclxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbnM7XHJcbiAgICB0aGlzLm5vcm1hbCA9IG5vcm1hbHM7XHJcbiAgICB0aGlzLnV2ID0gdXZzO1xyXG4gICAgdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUodGhpcy5wb3NpdGlvbik7XHJcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHRoaXMucG9zaXRpb24sIDMpKTtcclxuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwibm9ybWFsXCIsIHRoaXMubm9ybWFsLCAzKSk7XHJcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInV2XCIsIHRoaXMudXYsIDIpKTtcclxuICAgIHRoaXMuY291bnQgPSAzNjtcclxuICB9XHJcbiAgcHVibGljIHVwZGF0ZShmcmFtZVN0YXRlKSB7fVxyXG4gIGRlc3Ryb3koKSB7fVxyXG59XHJcbiIsImltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuaW1wb3J0IHsgRmxvYXQzMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlXCI7XHJcbmltcG9ydCBHZW9tZXRyeSBmcm9tIFwiLi9HZW9tZXRyeVwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb3J1c0tub3RHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5IHtcclxuICBpbmRpY2VzOiBBcnJheTxudW1iZXI+O1xyXG4gIHZlcnRpY2VzOiBBcnJheTxudW1iZXI+O1xyXG4gIG5vcm1hbHM6IEFycmF5PG51bWJlcj47XHJcbiAgdXZzOiBBcnJheTxudW1iZXI+O1xyXG4gIHJhZGl1czogbnVtYmVyO1xyXG4gIHR1YmU6IG51bWJlcjtcclxuICB0dWJ1bGFyU2VnbWVudHM6IG51bWJlcjtcclxuICByYWRpYWxTZWdtZW50czogbnVtYmVyO1xyXG4gIHA6IG51bWJlcjtcclxuICBxOiBudW1iZXI7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByYWRpdXM6IG51bWJlciA9IDEsXHJcbiAgICB0dWJlOiBudW1iZXIgPSAwLjQsXHJcbiAgICB0dWJ1bGFyU2VnbWVudHM6IG51bWJlciA9IDY0LFxyXG4gICAgcmFkaWFsU2VnbWVudHM6IG51bWJlciA9IDgsXHJcbiAgICBwOiBudW1iZXIgPSAyLFxyXG4gICAgcTogbnVtYmVyID0gM1xyXG4gICkge1xyXG4gICAgc3VwZXIoe30pO1xyXG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XHJcbiAgICB0aGlzLnR1YmUgPSB0dWJlO1xyXG4gICAgdGhpcy50dWJ1bGFyU2VnbWVudHMgPSB0dWJ1bGFyU2VnbWVudHM7XHJcbiAgICB0aGlzLnJhZGlhbFNlZ21lbnRzID0gcmFkaWFsU2VnbWVudHM7XHJcbiAgICB0aGlzLnAgPSBwO1xyXG4gICAgdGhpcy5xID0gcTtcclxuICAgIHRoaXMuaW5kaWNlcyA9IFtdO1xyXG4gICAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xyXG4gICAgdGhpcy5ub3JtYWxzID0gW107XHJcbiAgICB0aGlzLnV2cyA9IFtdO1xyXG4gICAgdGhpcy5jcmVhdGVHZW9tZXRyeSgpO1xyXG4gICAgdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUodGhpcy52ZXJ0aWNlcyk7XHJcbiAgICB0aGlzLmluaXQoKTtcclxuICB9XHJcbiAgcHVibGljIHVwZGF0ZShmcmFtZVN0YXRlKSB7XHJcbiAgICBjb25zdCB7IGRldmljZSB9ID0gZnJhbWVTdGF0ZS5jb250ZXh0O1xyXG4gIH1cclxuICBwcml2YXRlIGluaXQoKSB7XHJcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHRoaXMudmVydGljZXMsIDMpKTtcclxuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwibm9ybWFsXCIsIHRoaXMubm9ybWFscywgMykpO1xyXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJ1dlwiLCB0aGlzLnV2cywgMikpO1xyXG4gICAgdGhpcy5zZXRJbmRpY2UodGhpcy5pbmRpY2VzKTtcclxuICAgIHRoaXMuY291bnQgPSB0aGlzLmluZGljZXMubGVuZ3RoO1xyXG4gIH1cclxuICBwcml2YXRlIGNyZWF0ZUdlb21ldHJ5KCkge1xyXG4gICAgY29uc3QgdHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vcih0aGlzLnR1YnVsYXJTZWdtZW50cyk7XHJcbiAgICBjb25zdCByYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IodGhpcy5yYWRpYWxTZWdtZW50cyk7XHJcbiAgICAvLyBoZWxwZXIgdmFyaWFibGVzXHJcblxyXG4gICAgY29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG4gICAgY29uc3QgUDEgPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgY29uc3QgUDIgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuICAgIGNvbnN0IEIgPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgY29uc3QgVCA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICBjb25zdCBOID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbiAgICAvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyArK2kpIHtcclxuICAgICAgLy8gdGhlIHJhZGlhbiBcInVcIiBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlIG9mIHRoZSBjdXJyZW50IHR1YnVsYXIgc2VnbWVudFxyXG5cclxuICAgICAgY29uc3QgdSA9IChpIC8gdHVidWxhclNlZ21lbnRzKSAqIHRoaXMucCAqIE1hdGguUEkgKiAyO1xyXG5cclxuICAgICAgLy8gbm93IHdlIGNhbGN1bGF0ZSB0d28gcG9pbnRzLiBQMSBpcyBvdXIgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgY3VydmUsIFAyIGlzIGEgbGl0dGxlIGZhcnRoZXIgYWhlYWQuXHJcbiAgICAgIC8vIHRoZXNlIHBvaW50cyBhcmUgdXNlZCB0byBjcmVhdGUgYSBzcGVjaWFsIFwiY29vcmRpbmF0ZSBzcGFjZVwiLCB3aGljaCBpcyBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0IHZlcnRleCBwb3NpdGlvbnNcclxuXHJcbiAgICAgIGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSh1LCB0aGlzLnAsIHRoaXMucSwgdGhpcy5yYWRpdXMsIFAxKTtcclxuICAgICAgY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKHUgKyAwLjAxLCB0aGlzLnAsIHRoaXMucSwgdGhpcy5yYWRpdXMsIFAyKTtcclxuXHJcbiAgICAgIC8vIGNhbGN1bGF0ZSBvcnRob25vcm1hbCBiYXNpc1xyXG5cclxuICAgICAgVmVjdG9yMy5zdWJ0cmFjdChQMiwgUDEsIFQpO1xyXG4gICAgICAvLyBULnN1YlZlY3RvcnMoIFAyLCBQMSApO1xyXG4gICAgICBWZWN0b3IzLmFkZChQMiwgUDEsIE4pO1xyXG4gICAgICAvLyBOLmFkZFZlY3RvcnMoIFAyLCBQMSApO1xyXG4gICAgICBWZWN0b3IzLmNyb3NzKFQsIE4sIEIpO1xyXG4gICAgICAvL0IuY3Jvc3NWZWN0b3JzKCBULCBOICk7XHJcbiAgICAgIFZlY3RvcjMuY3Jvc3MoQiwgVCwgTik7XHJcbiAgICAgIC8vIE4uY3Jvc3NWZWN0b3JzKCBCLCBUICk7XHJcblxyXG4gICAgICAvLyBub3JtYWxpemUgQiwgTi4gVCBjYW4gYmUgaWdub3JlZCwgd2UgZG9uJ3QgdXNlIGl0XHJcblxyXG4gICAgICBCLm5vcm1hbGl6ZSgpO1xyXG4gICAgICBOLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7ICsraikge1xyXG4gICAgICAgIC8vIG5vdyBjYWxjdWxhdGUgdGhlIHZlcnRpY2VzLiB0aGV5IGFyZSBub3RoaW5nIG1vcmUgdGhhbiBhbiBleHRydXNpb24gb2YgdGhlIHRvcnVzIGN1cnZlLlxyXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZXh0cnVkZSBhIHNoYXBlIGluIHRoZSB4eS1wbGFuZSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxjdWxhdGUgYSB6LXZhbHVlLlxyXG5cclxuICAgICAgICBjb25zdCB2ID0gKGogLyByYWRpYWxTZWdtZW50cykgKiBNYXRoLlBJICogMjtcclxuICAgICAgICBjb25zdCBjeCA9IC10aGlzLnR1YmUgKiBNYXRoLmNvcyh2KTtcclxuICAgICAgICBjb25zdCBjeSA9IHRoaXMudHViZSAqIE1hdGguc2luKHYpO1xyXG5cclxuICAgICAgICAvLyBub3cgY2FsY3VsYXRlIHRoZSBmaW5hbCB2ZXJ0ZXggcG9zaXRpb24uXHJcbiAgICAgICAgLy8gZmlyc3Qgd2Ugb3JpZW50IHRoZSBleHRydXNpb24gd2l0aCBvdXIgYmFzaXMgdmVjdG9ycywgdGhlbiB3ZSBhZGQgaXQgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlXHJcblxyXG4gICAgICAgIHZlcnRleC54ID0gUDEueCArIChjeCAqIE4ueCArIGN5ICogQi54KTtcclxuICAgICAgICB2ZXJ0ZXgueSA9IFAxLnkgKyAoY3ggKiBOLnkgKyBjeSAqIEIueSk7XHJcbiAgICAgICAgdmVydGV4LnogPSBQMS56ICsgKGN4ICogTi56ICsgY3kgKiBCLnopO1xyXG5cclxuICAgICAgICB0aGlzLnZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XHJcblxyXG4gICAgICAgIC8vIG5vcm1hbCAoUDEgaXMgYWx3YXlzIHRoZSBjZW50ZXIvb3JpZ2luIG9mIHRoZSBleHRydXNpb24sIHRodXMgd2UgY2FuIHVzZSBpdCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbClcclxuICAgICAgICBWZWN0b3IzLnN1YnRyYWN0KHZlcnRleCwgUDEsIG5vcm1hbCk7XHJcbiAgICAgICAgbm9ybWFsLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLm5vcm1hbHMucHVzaChub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56KTtcclxuXHJcbiAgICAgICAgLy8gdXZcclxuXHJcbiAgICAgICAgdGhpcy51dnMucHVzaChpIC8gdHVidWxhclNlZ21lbnRzKTtcclxuICAgICAgICB0aGlzLnV2cy5wdXNoKGogLyByYWRpYWxTZWdtZW50cyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBnZW5lcmF0ZSBpbmRpY2VzXHJcblxyXG4gICAgZm9yIChsZXQgaiA9IDE7IGogPD0gdHVidWxhclNlZ21lbnRzOyBqKyspIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gcmFkaWFsU2VnbWVudHM7IGkrKykge1xyXG4gICAgICAgIC8vIGluZGljZXNcclxuXHJcbiAgICAgICAgY29uc3QgYSA9IChyYWRpYWxTZWdtZW50cyArIDEpICogKGogLSAxKSArIChpIC0gMSk7XHJcbiAgICAgICAgY29uc3QgYiA9IChyYWRpYWxTZWdtZW50cyArIDEpICogaiArIChpIC0gMSk7XHJcbiAgICAgICAgY29uc3QgYyA9IChyYWRpYWxTZWdtZW50cyArIDEpICogaiArIGk7XHJcbiAgICAgICAgY29uc3QgZCA9IChyYWRpYWxTZWdtZW50cyArIDEpICogKGogLSAxKSArIGk7XHJcblxyXG4gICAgICAgIC8vIGZhY2VzXHJcblxyXG4gICAgICAgIHRoaXMuaW5kaWNlcy5wdXNoKGEsIGIsIGQpO1xyXG4gICAgICAgIHRoaXMuaW5kaWNlcy5wdXNoKGIsIGMsIGQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSh1LCBwLCBxLCByYWRpdXMsIHBvc2l0aW9uKSB7XHJcbiAgY29uc3QgY3UgPSBNYXRoLmNvcyh1KTtcclxuICBjb25zdCBzdSA9IE1hdGguc2luKHUpO1xyXG4gIGNvbnN0IHF1T3ZlclAgPSAocSAvIHApICogdTtcclxuICBjb25zdCBjcyA9IE1hdGguY29zKHF1T3ZlclApO1xyXG5cclxuICBwb3NpdGlvbi54ID0gcmFkaXVzICogKDIgKyBjcykgKiAwLjUgKiBjdTtcclxuICBwb3NpdGlvbi55ID0gcmFkaXVzICogKDIgKyBjcykgKiBzdSAqIDAuNTtcclxuICBwb3NpdGlvbi56ID0gcmFkaXVzICogTWF0aC5zaW4ocXVPdmVyUCkgKiAwLjU7XHJcbn1cclxuIiwiaW1wb3J0IEdlb21ldHJ5IGZyb20gXCIuL0dlb21ldHJ5XCI7XG5pbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYW5lR2VvbWV0cnkgZXh0ZW5kcyBHZW9tZXRyeSB7XG5cdG5vcm1hbDogbnVtYmVyW107XG5cdHV2OiBudW1iZXJbXTtcblx0cG9zaXRpb246IG51bWJlcltdO1xuXHRpbmRpY2VzOiBudW1iZXJbXTtcblx0Y29uc3RydWN0b3IocHVibGljIHdpZHRoOiBudW1iZXIgPSAxMCwgcHVibGljIGhlaWdodDogbnVtYmVyID0gMTApIHtcblx0XHRzdXBlcih7fSk7XG5cdFx0dGhpcy50eXBlID0gXCJwbGFuZUdlb21ldHJ5XCI7XG5cdFx0dGhpcy5pbml0KCk7XG5cdH1cblx0cHJpdmF0ZSBpbml0KCkge1xuXHRcdC8vZ2VuZXJhdGUgcG9zIHV2IG5vcm1hbCBzbyBvblxuXHRcdGNvbnN0IHsgaW5kaWNlcywgbm9ybWFscywgdXZzLCB2ZXJ0aWNlcyB9ID0gdGhpcy5jcmVhdGVHcmlkKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblx0XHR0aGlzLnBvc2l0aW9uID0gdmVydGljZXM7XG5cdFx0dGhpcy5ub3JtYWwgPSBub3JtYWxzO1xuXHRcdHRoaXMudXYgPSB1dnM7XG5cdFx0dGhpcy5pbmRpY2VzID0gaW5kaWNlcztcblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSh0aGlzLnBvc2l0aW9uKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHRoaXMucG9zaXRpb24sIDMpKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZShuZXcgRmxvYXQzMkF0dHJpYnV0ZShcIm5vcm1hbFwiLCB0aGlzLm5vcm1hbCwgMykpO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwidXZcIiwgdGhpcy51diwgMikpO1xuXHRcdHRoaXMuc2V0SW5kaWNlKGluZGljZXMpO1xuXHRcdHRoaXMuY291bnQgPSB0aGlzLmluZGljZXMubGVuZ3RoO1xuXHRcdC8vIHRoaXMuY291bnQgPSAzNjtcblx0fVxuXHRwdWJsaWMgdXBkYXRlKGZyYW1lU3RhdGUpIHt9XG5cdHByaXZhdGUgY3JlYXRlR3JpZCh3aWR0aDogbnVtYmVyID0gMSwgaGVpZ2h0OiBudW1iZXIgPSAxLCB3aWR0aFNlZ21lbnRzOiBudW1iZXIgPSAxLCBoZWlnaHRTZWdtZW50czogbnVtYmVyID0gMSkge1xuXHRcdGNvbnN0IHdpZHRoX2hhbGYgPSB3aWR0aCAvIDI7XG5cdFx0Y29uc3QgaGVpZ2h0X2hhbGYgPSBoZWlnaHQgLyAyO1xuXG5cdFx0Y29uc3QgZ3JpZFggPSBNYXRoLmZsb29yKHdpZHRoU2VnbWVudHMpO1xuXHRcdGNvbnN0IGdyaWRZID0gTWF0aC5mbG9vcihoZWlnaHRTZWdtZW50cyk7XG5cblx0XHRjb25zdCBncmlkWDEgPSBncmlkWCArIDE7XG5cdFx0Y29uc3QgZ3JpZFkxID0gZ3JpZFkgKyAxO1xuXG5cdFx0Y29uc3Qgc2VnbWVudF93aWR0aCA9IHdpZHRoIC8gZ3JpZFg7XG5cdFx0Y29uc3Qgc2VnbWVudF9oZWlnaHQgPSBoZWlnaHQgLyBncmlkWTtcblxuXHRcdC8vXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHRmb3IgKGxldCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSsrKSB7XG5cdFx0XHRjb25zdCB5ID0gaXkgKiBzZWdtZW50X2hlaWdodCAtIGhlaWdodF9oYWxmO1xuXG5cdFx0XHRmb3IgKGxldCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCsrKSB7XG5cdFx0XHRcdGNvbnN0IHggPSBpeCAqIHNlZ21lbnRfd2lkdGggLSB3aWR0aF9oYWxmO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goeCwgLXksIDApO1xuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCgwLCAwLCAxKTtcblxuXHRcdFx0XHR1dnMucHVzaChpeCAvIGdyaWRYKTtcblx0XHRcdFx0dXZzLnB1c2goMSAtIGl5IC8gZ3JpZFkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAobGV0IGl5ID0gMDsgaXkgPCBncmlkWTsgaXkrKykge1xuXHRcdFx0Zm9yIChsZXQgaXggPSAwOyBpeCA8IGdyaWRYOyBpeCsrKSB7XG5cdFx0XHRcdGNvbnN0IGEgPSBpeCArIGdyaWRYMSAqIGl5O1xuXHRcdFx0XHRjb25zdCBiID0gaXggKyBncmlkWDEgKiAoaXkgKyAxKTtcblx0XHRcdFx0Y29uc3QgYyA9IGl4ICsgMSArIGdyaWRYMSAqIChpeSArIDEpO1xuXHRcdFx0XHRjb25zdCBkID0gaXggKyAxICsgZ3JpZFgxICogaXk7XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKGEsIGIsIGQpO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goYiwgYywgZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB7IGluZGljZXMsIG5vcm1hbHMsIHV2cywgdmVydGljZXMgfTtcblx0fVxuXHRkZXN0cm95KCkge31cbn1cbiIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4vTWF0ZXJpYWxcIjtcbmltcG9ydCB7IFNoYWRlclNvdXJjZSB9IGZyb20gXCIuLi9zaGFkZXIvU2hhZGVyU291cmNlXCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGVcIjtcbmltcG9ydCBDb2xvciBmcm9tIFwiLi4vbWF0aC9Db2xvclwiO1xuaW1wb3J0IFVuaWZvcm1CdWZmZXIgZnJvbSBcIi4uL3JlbmRlci9Vbmlmb3JtQnVmZmVyXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaG9uZ01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXHRzcGVjdWxhcjogQ29sb3I7XG5cdHNoaW5pbmVzczogbnVtYmVyO1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9IFwicGhvbmdcIjtcblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKDEuMCwgMC4wLCAwLjApO1xuXHRcdHRoaXMuc2hhZGVyU291cmNlID0gbmV3IFNoYWRlclNvdXJjZSh7XG5cdFx0XHR0eXBlOiB0aGlzLnR5cGUsXG5cdFx0XHRyZW5kZXI6IHRydWUsXG5cdFx0XHRkZWZpbmVzOiB7XG5cdFx0XHRcdG1hdGVyaWFsUGhvbmc6IHRydWVcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLmxpZ2h0ID0gdHJ1ZTtcblx0XHR0aGlzLnNwZWN1bGFyID0gbmV3IENvbG9yKDEuMCwgMS4wLCAxLjApO1xuXHRcdHRoaXMuc2hpbmluZXNzID0gMzAuMDtcblx0XHR0aGlzLmJhc2VUZXh0dXJlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuYmFzZVNhbXBsZXIgPSB1bmRlZmluZWQ7XG5cdH1cblx0dXBkYXRlKGZyYW1lU3RhdGU6IEZyYW1lU3RhdGUsIG1lc2g6IE1lc2gpIHtcblx0XHRpZiAoIXRoaXMuc2hhZGVyRGF0YSkgdGhpcy5jcmVhdGVTaGFkZXJEYXRhKG1lc2gpO1xuXHR9XG5cdHByb3RlY3RlZCBjcmVhdGVTaGFkZXJEYXRhKG1lc2g/OiBNZXNoKSB7XG5cdFx0c3VwZXIuY3JlYXRlU2hhZGVyRGF0YShtZXNoKTtcblx0XHRjb25zdCB1bmlmb3JtQnVmZmVyID0gbmV3IFVuaWZvcm1CdWZmZXIoKTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldE1hdHJpeDQoXCJtb2RlbE1hdHJpeFwiLCAoKSA9PiB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9KTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldENvbG9yKFwiY29sb3JcIiwgdGhpcyk7XG5cdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdChcIm9wYWNpdHlcIiwgdGhpcyk7XG5cdFx0dW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXg0KFwibm9ybWFsTXRyaXhcIiwgKCkgPT4ge1xuXHRcdFx0cmV0dXJuIG1lc2gubm9ybWFsTWF0cml4O1xuXHRcdH0pO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0Q29sb3IoXCJlbWlzc2l2ZVwiLCB0aGlzKTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0KFwic2hpbmluZXNzXCIsIHRoaXMpO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0Q29sb3IoXCJzcGVjdWxhclwiLCB0aGlzKTtcblx0XHR0aGlzLnNoYWRlckRhdGEuc2V0VW5pZm9ybUJ1ZmZlcihcInBob25nXCIsIHVuaWZvcm1CdWZmZXIpO1xuXHRcdGlmICh0aGlzLmJhc2VUZXh0dXJlKSB7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0RGVmaW5lKFwiYmFzZVRleHR1cmVcIiwgdHJ1ZSk7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0VGV4dHVyZShcImJhc2VUZXh0dXJlXCIsIHRoaXMuYmFzZVRleHR1cmUpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5iYXNlU2FtcGxlcikgdGhpcy5zaGFkZXJEYXRhLnNldFNhbXBsZXIoXCJzYW1wbGVyXCIsIHRoaXMuYmFzZVNhbXBsZXIpO1xuXHR9XG5cdGRlc3Ryb3koKSB7fVxufVxuIiwiZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERlc3Ryb3lzIGFuIG9iamVjdC4gIEVhY2ggb2YgdGhlIG9iamVjdCdzIGZ1bmN0aW9ucywgaW5jbHVkaW5nIGZ1bmN0aW9ucyBpbiBpdHMgcHJvdG90eXBlLFxyXG4gKiBpcyByZXBsYWNlZCB3aXRoIGEgZnVuY3Rpb24gdGhhdCB0aHJvd3MgYSB7QGxpbmsgRGV2ZWxvcGVyRXJyb3J9LCBleGNlcHQgZm9yIHRoZSBvYmplY3Qnc1xyXG4gKiA8Y29kZT5pc0Rlc3Ryb3llZDwvY29kZT4gZnVuY3Rpb24sIHdoaWNoIGlzIHNldCB0byBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyA8Y29kZT50cnVlPC9jb2RlPi5cclxuICogVGhlIG9iamVjdCdzIHByb3BlcnRpZXMgYXJlIHJlbW92ZWQgd2l0aCA8Y29kZT5kZWxldGU8L2NvZGU+LlxyXG4gKiA8YnIgLz48YnIgLz5cclxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBob2xkIG5hdGl2ZSByZXNvdXJjZXMsIGUuZy4sIFdlYkdMIHJlc291cmNlcywgd2hpY2hcclxuICogbmVlZCB0byBiZSBleHBsaWNpdGx5IHJlbGVhc2VkLiAgQ2xpZW50IGNvZGUgY2FsbHMgYW4gb2JqZWN0J3MgPGNvZGU+ZGVzdHJveTwvY29kZT4gZnVuY3Rpb24sXHJcbiAqIHdoaWNoIHRoZW4gcmVsZWFzZXMgdGhlIG5hdGl2ZSByZXNvdXJjZSBhbmQgY2FsbHMgPGNvZGU+ZGVzdHJveU9iamVjdDwvY29kZT4gdG8gcHV0IGl0c2VsZlxyXG4gKiBpbiBhIGRlc3Ryb3llZCBzdGF0ZS5cclxuICpcclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBkZXN0cm95LlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gW21lc3NhZ2VdIFRoZSBtZXNzYWdlIHRvIGluY2x1ZGUgaW4gdGhlIGV4Y2VwdGlvbiB0aGF0IGlzIHRocm93biBpZlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgZGVzdHJveWVkIG9iamVjdCdzIGZ1bmN0aW9uIGlzIGNhbGxlZC5cclxuICpcclxuICpcclxuICogQGV4YW1wbGVcclxuICogLy8gSG93IGEgdGV4dHVyZSB3b3VsZCBkZXN0cm95IGl0c2VsZi5cclxuICogdGhpcy5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gKiAgICAgX2dsLmRlbGV0ZVRleHR1cmUoX3RleHR1cmUpO1xyXG4gKiAgICAgcmV0dXJuIENlc2l1bS5kZXN0cm95T2JqZWN0KHRoaXMpO1xyXG4gKiB9O1xyXG4gKlxyXG4gKiBAc2VlIERldmVsb3BlckVycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveU9iamVjdChvYmplY3QpIHtcclxuICAvLyBtZXNzYWdlID1tZXNzYWdlfHxcIlRoaXMgb2JqZWN0IHdhcyBkZXN0cm95ZWQsIGkuZS4sIGRlc3Ryb3koKSB3YXMgY2FsbGVkLlwiO1xyXG5cclxuICBmdW5jdGlvbiB0aHJvd09uRGVzdHJveWVkKCkge1xyXG4gICAgLy8+PmluY2x1ZGVTdGFydCgnZGVidWcnLCBwcmFnbWFzLmRlYnVnKTtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgb2JqZWN0IHdhcyBkZXN0cm95ZWQsIGkuZS4sIGRlc3Ryb3koKSB3YXMgY2FsbGVkLlwiKTtcclxuICAgIC8vdGhyb3cgbmV3IERldmVsb3BlckVycm9yKG1lc3NhZ2UpO1xyXG4gICAgLy8+PmluY2x1ZGVFbmQoJ2RlYnVnJyk7XHJcbiAgfVxyXG5cclxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqZWN0W2tleV0gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICBvYmplY3Rba2V5XSA9IHRocm93T25EZXN0cm95ZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvYmplY3QuaXNEZXN0cm95ZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbiIsImltcG9ydCBTYW1wbGVyIGZyb20gXCIuLi9yZW5kZXIvU2FtcGxlclwiO1xyXG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcclxuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcclxuaW1wb3J0IHsgZGVzdHJveU9iamVjdCB9IGZyb20gXCIuLi91dGlscy9kZXN0cm95T2JqZWN0XCI7XHJcbnR5cGUgVGV4dHVyZUNhY2hlUHJvcCA9IHtcclxuICB0ZXh0dXJlOiBUZXh0dXJlO1xyXG4gIGNvdW50OiBudW1iZXI7XHJcbn07XHJcbmNsYXNzIFRleHR1cmVDYWNoZSB7XHJcbiAgcHVibGljIGRlZmF1bHRTYW1wbGVyOiBTYW1wbGVyO1xyXG4gIHByaXZhdGUgX251bWJlck9mVGV4dHVyZXM6IG51bWJlcjtcclxuICBwcml2YXRlIF90ZXh0dXJlczogTWFwPHN0cmluZywgVGV4dHVyZUNhY2hlUHJvcD47XHJcbiAgcHJpdmF0ZSBfdGV4dHVyZXNUb1JlbGVhc2U6IE1hcDxzdHJpbmcsIFRleHR1cmVDYWNoZVByb3A+O1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fbnVtYmVyT2ZUZXh0dXJlcyA9IDA7XHJcbiAgICB0aGlzLl90ZXh0dXJlcyA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMuX251bWJlck9mVGV4dHVyZXMgPSAwO1xyXG4gICAgdGhpcy5fdGV4dHVyZXNUb1JlbGVhc2UgPSBuZXcgTWFwKCk7XHJcbiAgICB0aGlzLmRlZmF1bHRTYW1wbGVyID0gbmV3IFNhbXBsZXIoe1xyXG4gICAgICBtYWdGaWx0ZXI6IFwibGluZWFyXCIsXHJcbiAgICAgIG1pbkZpbHRlcjogXCJsaW5lYXJcIixcclxuICAgICAgYWRkcmVzc01vZGVVOiBcInJlcGVhdFwiLFxyXG4gICAgICBhZGRyZXNzTW9kZVY6IFwicmVwZWF0XCIsXHJcbiAgICB9KTtcclxuICB9XHJcbiAgZ2V0IG51bWJlck9mVGV4dHVyZXMoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9udW1iZXJPZlRleHR1cmVzO1xyXG4gIH1cclxuICBnZXRUZXh0dXJlKGtleXdvcmQpIHtcclxuICAgIGNvbnN0IGNhY2hlZFRleHR1cmUgPSB0aGlzLl90ZXh0dXJlcy5nZXQoa2V5d29yZCk7XHJcbiAgICBpZiAoIWRlZmluZWQoY2FjaGVkVGV4dHVyZSkpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIC8vIE5vIGxvbmdlciB3YW50IHRvIHJlbGVhc2UgdGhpcyBpZiBpdCB3YXMgcHJldmlvdXNseSByZWxlYXNlZC5cclxuICAgIGRlbGV0ZSB0aGlzLl90ZXh0dXJlc1RvUmVsZWFzZVtrZXl3b3JkXTtcclxuXHJcbiAgICArK2NhY2hlZFRleHR1cmUuY291bnQ7XHJcbiAgICByZXR1cm4gY2FjaGVkVGV4dHVyZS50ZXh0dXJlO1xyXG4gIH1cclxuICBhZGRUZXh0dXJlKGtleXdvcmQsIHRleHR1cmUpIHtcclxuICAgIGNvbnN0IGNhY2hlZFRleHR1cmUgPSB7XHJcbiAgICAgIHRleHR1cmU6IHRleHR1cmUsXHJcbiAgICAgIGNvdW50OiAxLFxyXG4gICAgfTtcclxuXHJcbiAgICB0ZXh0dXJlLmZpbmFsRGVzdHJveSA9IHRleHR1cmUuZGVzdHJveTtcclxuXHJcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgIHRleHR1cmUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKC0tY2FjaGVkVGV4dHVyZS5jb3VudCA9PT0gMCkge1xyXG4gICAgICAgIHRoYXQuX3RleHR1cmVzVG9SZWxlYXNlLnNldChrZXl3b3JkLCBjYWNoZWRUZXh0dXJlKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl90ZXh0dXJlcy5zZXQoa2V5d29yZCwgY2FjaGVkVGV4dHVyZSk7XHJcbiAgICArK3RoaXMuX251bWJlck9mVGV4dHVyZXM7XHJcbiAgfVxyXG4gIHJlbGVhc2VkVGV4dHVyZXMoKSB7XHJcbiAgICB0aGlzLl90ZXh0dXJlc1RvUmVsZWFzZS5mb3JFYWNoKChjYWNoZVRleHR1cmUpID0+IHtcclxuICAgICAgY2FjaGVUZXh0dXJlLnRleHR1cmU/LmZpbmFsRGVzdHJveSgpO1xyXG4gICAgICAtLXRoaXMuX251bWJlck9mVGV4dHVyZXM7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl90ZXh0dXJlc1RvUmVsZWFzZS5jbGVhcigpO1xyXG4gIH1cclxuICBkZXN0cm95KCkge1xyXG4gICAgdGhpcy5fdGV4dHVyZXMuZm9yRWFjaCgoY2FjaGVkVGV4dHVyZSkgPT4ge1xyXG4gICAgICBjYWNoZWRUZXh0dXJlLnRleHR1cmU/LmZpbmFsRGVzdHJveSgpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGVzdHJveU9iamVjdCh0aGlzKTtcclxuICB9XHJcbn1cclxuY29uc3QgdGV4dHVyZUNhY2hlID0gbmV3IFRleHR1cmVDYWNoZSgpO1xyXG5leHBvcnQgZGVmYXVsdCB0ZXh0dXJlQ2FjaGU7XHJcbiIsImltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi4vY29yZS9GcmFtZVN0YXRlXCI7XG5pbXBvcnQgVmVjdG9yMiBmcm9tIFwiLi4vbWF0aC9WZWN0b3IyXCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuL01hdGVyaWFsXCI7XG5pbXBvcnQgeyBTaGFkZXJTb3VyY2UgfSBmcm9tIFwiLi4vc2hhZGVyL1NoYWRlclNvdXJjZVwiO1xuaW1wb3J0IHsgQ3VsbE1vZGUgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IHRleHR1cmVDYWNoZSBmcm9tIFwiLi4vY29yZS9UZXh0dXJlQ2FjaGVcIjtcbmltcG9ydCBVbmlmb3JtQnVmZmVyIGZyb20gXCIuLi9yZW5kZXIvVW5pZm9ybUJ1ZmZlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYnJNYXQgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cdHB1YmxpYyBkaWZmdXNlRW52VGV4dHVyZTogVGV4dHVyZTtcblxuXHRwdWJsaWMgc3BlY3VsYXJFbnZUZXh0dXJlOiBUZXh0dXJlO1xuXG5cdHB1YmxpYyBicmRmVGV4dHVyZTogVGV4dHVyZTtcblxuXHRwdWJsaWMgbm9ybWFsVGV4dHVyZTogVGV4dHVyZTtcblxuXHRwdWJsaWMgYW9UZXh0dXJlOiBUZXh0dXJlO1xuXG5cdHB1YmxpYyBlbWlzc2l2ZVRleHR1cmU6IFRleHR1cmU7XG5cblx0cHVibGljIG1ldGFsbmVzc1JvdWdobmVzc1RleHR1cmU6IFRleHR1cmU7XG5cblx0cHJpdmF0ZSBfcm91Z2huZXNzOiBudW1iZXI7XG5cblx0cHJpdmF0ZSBfbWV0YWxuZXNzOiBudW1iZXI7XG5cblx0cHJpdmF0ZSBfYW9UZXh0dXJlSW50ZW5zaXR5OiBudW1iZXI7XG5cblx0cHJpdmF0ZSBfbm9ybWFsU2NhbGU6IFZlY3RvcjI7XG5cblx0cHVibGljIGdldCByb3VnaG5lc3MoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fcm91Z2huZXNzO1xuXHR9XG5cdHB1YmxpYyBzZXQgcm91Z2huZXNzKHZhbHVlKSB7XG5cdFx0dGhpcy5fcm91Z2huZXNzID0gdmFsdWU7XG5cdH1cblx0cHVibGljIGdldCBtZXRhbG5lc3MoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fbWV0YWxuZXNzO1xuXHR9XG5cdHB1YmxpYyBzZXQgbWV0YWxuZXNzKHY6IG51bWJlcikge1xuXHRcdHRoaXMuX21ldGFsbmVzcyA9IHY7XG5cdH1cblx0cHVibGljIGdldCBhb1RleHR1cmVJbnRlbnNpdHkoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fYW9UZXh0dXJlSW50ZW5zaXR5O1xuXHR9XG5cdHB1YmxpYyBzZXQgYW9UZXh0dXJlSW50ZW5zaXR5KHY6IG51bWJlcikge1xuXHRcdHRoaXMuX2FvVGV4dHVyZUludGVuc2l0eSA9IHY7XG5cdH1cblx0cHVibGljIGdldCBub3JtYWxTY2FsZSgpOiBWZWN0b3IyIHtcblx0XHRpZiAodGhpcy5yZW5kZXJTdGF0ZSAmJiB0aGlzLnJlbmRlclN0YXRlLnByaW1pdGl2ZSkge1xuXHRcdFx0aWYgKHRoaXMucmVuZGVyU3RhdGUucHJpbWl0aXZlLmN1bGxNb2RlID09IEN1bGxNb2RlLkJhY2spIHtcblx0XHRcdFx0cmV0dXJuIFZlY3RvcjIubmVnYXRlKHRoaXMuX25vcm1hbFNjYWxlLCBuZXcgVmVjdG9yMigpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX25vcm1hbFNjYWxlO1xuXHR9XG5cdHB1YmxpYyBzZXQgbm9ybWFsU2NhbGUodjogVmVjdG9yMikge1xuXHRcdHRoaXMuX25vcm1hbFNjYWxlID0gdjtcblx0fVxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9IFwicGJyX21hdFwiO1xuXG5cdFx0dGhpcy5fcm91Z2huZXNzID0gMC4xO1xuXG5cdFx0dGhpcy5fbWV0YWxuZXNzID0gMC4xO1xuXG5cdFx0dGhpcy5fYW9UZXh0dXJlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMubGlnaHQgPSB0cnVlO1xuXHRcdHRoaXMuX25vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoMSwgMSk7XG5cblx0XHR0aGlzLnNoYWRlclNvdXJjZSA9IG5ldyBTaGFkZXJTb3VyY2Uoe1xuXHRcdFx0dHlwZTogdGhpcy50eXBlLFxuXHRcdFx0cmVuZGVyOiB0cnVlLFxuXHRcdFx0ZGVmaW5lczoge1xuXHRcdFx0XHRtYXRlcmlhbFBicjogdHJ1ZVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdHVwZGF0ZShmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBtZXNoOiBNZXNoKSB7XG5cdFx0aWYgKCF0aGlzLnNoYWRlckRhdGEpIHtcblx0XHRcdHRoaXMuY3JlYXRlU2hhZGVyRGF0YShtZXNoLCBmcmFtZVN0YXRlKTtcblx0XHR9XG5cdH1cblx0cHJvdGVjdGVkIGNyZWF0ZVNoYWRlckRhdGEobWVzaDogTWVzaCwgZnJhbWVTdGF0ZT86IEZyYW1lU3RhdGUpIHtcblx0XHRzdXBlci5jcmVhdGVTaGFkZXJEYXRhKG1lc2gpO1xuXHRcdGNvbnN0IHVuaWZvcm1CdWZmZXIgPSBuZXcgVW5pZm9ybUJ1ZmZlcigpO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0TWF0cml4NChcIm1vZGVsTWF0cml4XCIsICgpID0+IHtcblx0XHRcdHJldHVybiBtZXNoLm1vZGVsTWF0cml4O1xuXHRcdH0pO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0Q29sb3IoXCJkaWZmdXNlXCIsIHRoaXMpO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0RmxvYXQoXCJvcGFjaXR5XCIsIHRoaXMpO1xuXHRcdHVuaWZvcm1CdWZmZXIuc2V0TWF0cml4MyhcIm5vcm1hbE10cml4XCIsICgpID0+IHtcblx0XHRcdHJldHVybiBtZXNoLm5vcm1hbE1hdHJpeDtcblx0XHR9KTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldENvbG9yKFwiZW1pc3NpdmVcIiwgdGhpcyk7XG5cdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdChcIm1ldGFsbmVzc1wiLCB0aGlzKTtcblx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0KFwicm91Z2huZXNzXCIsIHRoaXMpO1xuXHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRVbmlmb3JtQnVmZmVyKFwicGJyXCIsIHVuaWZvcm1CdWZmZXIpO1xuXHRcdHRoaXMuYnJkZlRleHR1cmUgPSB0ZXh0dXJlQ2FjaGUuZ2V0VGV4dHVyZShcImJyZGZcIik7XG5cdFx0dGhpcy5kaWZmdXNlRW52VGV4dHVyZSA9IHRleHR1cmVDYWNoZS5nZXRUZXh0dXJlKFwiZGlmZnVzZVwiKTtcblx0XHR0aGlzLnNwZWN1bGFyRW52VGV4dHVyZSA9IHRleHR1cmVDYWNoZS5nZXRUZXh0dXJlKFwic3BlY3VsYXJcIik7XG5cdFx0aWYgKHRoaXMuYmFzZVRleHR1cmUpIHtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXREZWZpbmUoXCJVU0VfVEVYVFVSRVwiLCB0cnVlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwiYmFzZVRleHR1cmVcIiwgdGhpcy5iYXNlVGV4dHVyZSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLm1ldGFsbmVzc1JvdWdobmVzc1RleHR1cmUpIHtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXREZWZpbmUoXCJVU0VfTUVUQUxORVNTVEVYVFVSRVwiLCB0cnVlKTtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwibWV0YWxuZXNzUm91Z2huZXNzVGV4dHVyZVwiLCB0aGlzLm1ldGFsbmVzc1JvdWdobmVzc1RleHR1cmUpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5ub3JtYWxUZXh0dXJlKSB7XG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0VmVjMihcIm5vcm1hbFNjYWxlXCIsIHRoaXMpO1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldERlZmluZShcIlVTRV9OT1JNQUxURVhUVVJFXCIsIHRydWUpO1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldFRleHR1cmUoXCJub3JtYWxUZXh0dXJlXCIsIHRoaXMubm9ybWFsVGV4dHVyZSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmFvVGV4dHVyZSkge1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldERlZmluZShcIlVTRV9BT1RFWFRVUkVcIiwgdHJ1ZSk7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0VGV4dHVyZShcImFvVGV4dHVyZVwiLCB0aGlzLmFvVGV4dHVyZSk7XG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0KFwiYW9UZXh0dXJlSW50ZW5zaXR5XCIsIHRoaXMpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5lbWlzc2l2ZVRleHR1cmUpIHtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXREZWZpbmUoXCJVU0VfRU1JU1NJVkVURVhUVVJFXCIsIHRydWUpO1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldFRleHR1cmUoXCJlbWlzc2l2ZVRleHR1cmVcIiwgdGhpcy5lbWlzc2l2ZVRleHR1cmUpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5zcGVjdWxhckVudlRleHR1cmUpIHtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwic3BlY3VsYXJFbnZUZXh0dXJlXCIsIHRoaXMuc3BlY3VsYXJFbnZUZXh0dXJlKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuZGlmZnVzZUVudlRleHR1cmUpIHtcblx0XHRcdHRoaXMuc2hhZGVyRGF0YS5zZXRUZXh0dXJlKFwiZGlmZnVzZUVudlRleHR1cmVcIiwgdGhpcy5kaWZmdXNlRW52VGV4dHVyZSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmJyZGZUZXh0dXJlKSB7XG5cdFx0XHR0aGlzLnNoYWRlckRhdGEuc2V0VGV4dHVyZShcImJyZGZUZXh0dXJlXCIsIHRoaXMuYnJkZlRleHR1cmUpO1xuXHRcdH1cblx0XHR0aGlzLnNoYWRlckRhdGEuc2V0U2FtcGxlcihcImJhc2VTYW1wbGVyXCIsIHRoaXMuYmFzZVNhbXBsZXIpO1xuXHR9XG5cdGRlc3Ryb3koKSB7fVxufVxuIiwiZXhwb3J0IGNsYXNzIEV2ZW50RGlzcGF0Y2hlciB7XHJcbiAgcHJpdmF0ZSBfbGlzdGVuZXJzOiB7fTtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcclxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcblxyXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xyXG5cclxuICAgIGlmIChsaXN0ZW5lcnNbdHlwZV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGlzdGVuZXJzW3R5cGVdLmluZGV4T2YobGlzdGVuZXIpID09PSAtMSkge1xyXG4gICAgICBsaXN0ZW5lcnNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYXNFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgbGlzdGVuZXJzW3R5cGVdICE9PSB1bmRlZmluZWQgJiYgbGlzdGVuZXJzW3R5cGVdLmluZGV4T2YobGlzdGVuZXIpICE9PSAtMVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcclxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcclxuICAgIGNvbnN0IGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lcnNbdHlwZV07XHJcblxyXG4gICAgaWYgKGxpc3RlbmVyQXJyYXkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVyQXJyYXkuaW5kZXhPZihsaXN0ZW5lcik7XHJcblxyXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgbGlzdGVuZXJBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwYXRjaEV2ZW50KGV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcbiAgICBjb25zdCBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJzW2V2ZW50LnR5cGVdO1xyXG5cclxuICAgIGlmIChsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgZXZlbnQudGFyZ2V0ID0gdGhpcztcclxuXHJcbiAgICAgIGNvbnN0IGFycmF5ID0gbGlzdGVuZXJBcnJheS5zbGljZSgwKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgYXJyYXlbaV0uY2FsbCh0aGlzLCBldmVudCk7XHJcbiAgICAgIH1cclxuICAgICAgZXZlbnQudGFyZ2V0ID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IENhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0NhbWVyYVwiO1xyXG5pbXBvcnQgeyBDb21wdXRlIH0gZnJvbSBcIi4uL2NvbXB1dGUvQ29tcHV0ZVwiO1xyXG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuLi9tYXRlcmlhbC9NYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xyXG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi4vcmVuZGVyL0NvbnRleHRcIjtcclxuaW1wb3J0IERyYXdDb21tYW5kIGZyb20gXCIuLi9yZW5kZXIvRHJhd0NvbW1hbmRcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyUXVldWUge1xyXG5cdHB1YmxpYyBwcmU6IEFycmF5PE1lc2g+O1xyXG5cdHB1YmxpYyBvcGFxdWU6IEFycmF5PE1lc2g+O1xyXG5cdHB1YmxpYyB0cmFuc3BhcmVudDogQXJyYXk8TWVzaD47XHJcblx0cHVibGljIGNvbXB1dGVzOiBBcnJheTxDb21wdXRlPjtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMucHJlID0gW107XHJcblx0XHR0aGlzLm9wYXF1ZSA9IFtdO1xyXG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IFtdO1xyXG5cdFx0dGhpcy5jb21wdXRlcyA9IFtdO1xyXG5cdH1cclxuXHRzb3J0KCkge1xyXG5cdFx0UmVuZGVyUXVldWUuc29ydCh0aGlzLm9wYXF1ZSwgMCwgdGhpcy5vcGFxdWUubGVuZ3RoLCBSZW5kZXJRdWV1ZS5fY29tcGFyZUZyb21OZWFyVG9GYXIpO1xyXG5cdFx0UmVuZGVyUXVldWUuc29ydCh0aGlzLnRyYW5zcGFyZW50LCAwLCB0aGlzLnRyYW5zcGFyZW50Lmxlbmd0aCwgUmVuZGVyUXVldWUuX2NvbXBhcmVGcm9tRmFyVG9OZWFyKTtcclxuXHR9XHJcblx0b3BhcXVlUmVuZGVyKGNhbWVyYTogQ2FtZXJhLCBjb250ZXh0OiBDb250ZXh0LCBwYXNzRW5jb2Rlcj86IEdQVVJlbmRlclBhc3NFbmNvZGVyLCByZXBsYWNlTWF0ZXJpYWw/OiBNYXRlcmlhbCkge1xyXG5cdFx0dGhpcy5vcGFxdWUubWFwKChtZXNoKSA9PiB7XHJcblx0XHRcdG1lc2guYmVmb3JlUmVuZGVyKCk7XHJcblx0XHRcdFJlbmRlclF1ZXVlLmV4Y3V0ZUNvbW1hbmQobWVzaC5nZXREcmF3Q29tbWFuZChyZXBsYWNlTWF0ZXJpYWwpLCBjb250ZXh0LCBwYXNzRW5jb2RlciwgY2FtZXJhKTtcclxuXHRcdFx0bWVzaC5hZnRlclJlbmRlcigpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHRyYW5zcGFyZW50UmVuZGVyKFxyXG5cdFx0Y2FtZXJhOiBDYW1lcmEsXHJcblx0XHRjb250ZXh0OiBDb250ZXh0LFxyXG5cdFx0cGFzc0VuY29kZXI/OiBHUFVSZW5kZXJQYXNzRW5jb2RlcixcclxuXHRcdHJlcGxhY2VNYXRlcmlhbD86IE1hdGVyaWFsXHJcblx0KSB7XHJcblx0XHR0aGlzLnRyYW5zcGFyZW50Lm1hcCgobWVzaCkgPT4ge1xyXG5cdFx0XHRtZXNoLmJlZm9yZVJlbmRlcigpO1xyXG5cdFx0XHRSZW5kZXJRdWV1ZS5leGN1dGVDb21tYW5kKG1lc2guZ2V0RHJhd0NvbW1hbmQocmVwbGFjZU1hdGVyaWFsKSwgY29udGV4dCwgcGFzc0VuY29kZXIsIGNhbWVyYSk7XHJcblx0XHRcdG1lc2guYWZ0ZXJSZW5kZXIoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRjb21wdXRlUmVuZGVyKGNvbnRleHQ6IENvbnRleHQsIHBhc3NFbmNvZGVyPzogR1BVQ29tcHV0ZVBhc3NFbmNvZGVyKSB7XHJcblx0XHR0aGlzLmNvbXB1dGVzLm1hcCgoY29tcHV0ZSkgPT4ge1xyXG5cdFx0XHRSZW5kZXJRdWV1ZS5leGN1dGVDb21wdXRlKGNvbXB1dGUuZ2V0Q29tbWFuZCgpLCBjb250ZXh0LCBwYXNzRW5jb2Rlcik7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0cHJlUmVuZGVyKGNhbWVyYTogQ2FtZXJhLCBjb250ZXh0OiBDb250ZXh0LCBwYXNzRW5jb2Rlcj86IEdQVVJlbmRlclBhc3NFbmNvZGVyLCByZXBsYWNlTWF0ZXJpYWw/OiBNYXRlcmlhbCkge1xyXG5cdFx0dGhpcy5wcmUubWFwKChtZXNoKSA9PiB7XHJcblx0XHRcdG1lc2guYmVmb3JlUmVuZGVyKCk7XHJcblx0XHRcdFJlbmRlclF1ZXVlLmV4Y3V0ZUNvbW1hbmQobWVzaC5nZXREcmF3Q29tbWFuZCgpLCBjb250ZXh0LCBwYXNzRW5jb2RlciwgY2FtZXJhKTtcclxuXHRcdFx0bWVzaC5hZnRlclJlbmRlcigpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHN0YXRpYyBleGN1dGVDb21tYW5kKGNvbW1hbmQ6IERyYXdDb21tYW5kLCBjb250ZXh0PzogQ29udGV4dCwgcGFzc0VuY29kZXI/OiBHUFVSZW5kZXJQYXNzRW5jb2RlciwgY2FtZXJhPzogQ2FtZXJhKSB7XHJcblx0XHRpZiAoY29tbWFuZC5yZW5kZXJUYXJnZXQpIHtcclxuXHRcdFx0Y29uc3QgY3VycmVudFJlbmRlclBhc3NFbmNvZGVyID0gY29tbWFuZC5yZW5kZXJUYXJnZXQuYmVnaW5SZW5kZXJQYXNzRW5jb2Rlcihjb250ZXh0KTtcclxuXHRcdFx0Y29udGV4dC5yZW5kZXIoY29tbWFuZCwgY3VycmVudFJlbmRlclBhc3NFbmNvZGVyLCBjYW1lcmEpO1xyXG5cdFx0XHRjb21tYW5kLnJlbmRlclRhcmdldC5lbmRSZW5kZXJQYXNzRW5jb2RlcigpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y29udGV4dC5yZW5kZXIoY29tbWFuZCwgcGFzc0VuY29kZXIsIGNhbWVyYSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHN0YXRpYyBleGN1dGVDb21wdXRlKGNvbW1hbmQ6IERyYXdDb21tYW5kLCBjb250ZXh0PzogQ29udGV4dCwgcGFzc0VuY29kZXI/OiBHUFVDb21wdXRlUGFzc0VuY29kZXIpIHtcclxuXHRcdGNvbnRleHQuY29tcHV0ZShjb21tYW5kLCBwYXNzRW5jb2Rlcik7XHJcblx0fVxyXG5cdHJlc2V0KCkge1xyXG5cdFx0dGhpcy5wcmUgPSBbXTtcclxuXHRcdHRoaXMub3BhcXVlID0gW107XHJcblx0XHR0aGlzLnRyYW5zcGFyZW50ID0gW107XHJcblx0XHR0aGlzLmNvbXB1dGVzID0gW107XHJcblx0fVxyXG5cdHN0YXRpYyBfY29tcGFyZUZyb21OZWFyVG9GYXIoYTogTWVzaCwgYjogTWVzaCk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkgfHwgYS5kaXN0YW5jZVRvQ2FtZXJhIC0gYi5kaXN0YW5jZVRvQ2FtZXJhO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIF9jb21wYXJlRnJvbUZhclRvTmVhcihhOiBNZXNoLCBiOiBNZXNoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eSB8fCBiLmRpc3RhbmNlVG9DYW1lcmEgLSBhLmRpc3RhbmNlVG9DYW1lcmE7XHJcblx0fVxyXG5cdC8vYWNjb3JkaW5nIHRvIGNhbWVyYSBkaXN0YW5jZVxyXG5cdHN0YXRpYyBzb3J0PFQ+KGluc2F0bmNlOiBUW10sIGZyb206IG51bWJlciwgdG86IG51bWJlciwgY29tcGFyZUZ1bmM6IEZ1bmN0aW9uKTogdm9pZCB7XHJcblx0XHRSZW5kZXJRdWV1ZS5fcXVpY2tTb3J0KGluc2F0bmNlLCBmcm9tLCB0bywgY29tcGFyZUZ1bmMpO1xyXG5cdH1cclxuXHQvL2Zyb20gaHR0cHM6Ly9naXRodWIuY29tL29hc2lzLWVuZ2luZS9lbmdpbmUvYmxvYi9tYWluL3BhY2thZ2VzL2NvcmUvc3JjL1JlbmRlclBpcGVsaW5lL1JlbmRlclF1ZXVlLnRzXHJcblx0cHJpdmF0ZSBzdGF0aWMgX3F1aWNrU29ydDxUPihhOiBUW10sIGZyb206IG51bWJlciwgdG86IG51bWJlciwgY29tcGFyZUZ1bmM6IEZ1bmN0aW9uKTogdm9pZCB7XHJcblx0XHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0XHQvLyBJbnNlcnRpb24gc29ydCBpcyBmYXN0ZXIgZm9yIHNob3J0IGFycmF5cy5cclxuXHRcdFx0aWYgKHRvIC0gZnJvbSA8PSAxMCkge1xyXG5cdFx0XHRcdFJlbmRlclF1ZXVlLl9pbnNlcnRpb25Tb3J0KGEsIGZyb20sIHRvLCBjb21wYXJlRnVuYyk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnN0IHRoaXJkX2luZGV4ID0gKGZyb20gKyB0bykgPj4gMTtcclxuXHRcdFx0Ly8gRmluZCBhIHBpdm90IGFzIHRoZSBtZWRpYW4gb2YgZmlyc3QsIGxhc3QgYW5kIG1pZGRsZSBlbGVtZW50LlxyXG5cdFx0XHRsZXQgdjAgPSBhW2Zyb21dO1xyXG5cdFx0XHRsZXQgdjEgPSBhW3RvIC0gMV07XHJcblx0XHRcdGxldCB2MiA9IGFbdGhpcmRfaW5kZXhdO1xyXG5cdFx0XHRjb25zdCBjMDEgPSBjb21wYXJlRnVuYyh2MCwgdjEpO1xyXG5cdFx0XHRpZiAoYzAxID4gMCkge1xyXG5cdFx0XHRcdC8vIHYxIDwgdjAsIHNvIHN3YXAgdGhlbS5cclxuXHRcdFx0XHRjb25zdCB0bXAgPSB2MDtcclxuXHRcdFx0XHR2MCA9IHYxO1xyXG5cdFx0XHRcdHYxID0gdG1wO1xyXG5cdFx0XHR9IC8vIHYwIDw9IHYxLlxyXG5cdFx0XHRjb25zdCBjMDIgPSBjb21wYXJlRnVuYyh2MCwgdjIpO1xyXG5cdFx0XHRpZiAoYzAyID49IDApIHtcclxuXHRcdFx0XHQvLyB2MiA8PSB2MCA8PSB2MS5cclxuXHRcdFx0XHRjb25zdCB0bXAgPSB2MDtcclxuXHRcdFx0XHR2MCA9IHYyO1xyXG5cdFx0XHRcdHYyID0gdjE7XHJcblx0XHRcdFx0djEgPSB0bXA7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gdjAgPD0gdjEgJiYgdjAgPCB2MlxyXG5cdFx0XHRcdGNvbnN0IGMxMiA9IGNvbXBhcmVGdW5jKHYxLCB2Mik7XHJcblx0XHRcdFx0aWYgKGMxMiA+IDApIHtcclxuXHRcdFx0XHRcdC8vIHYwIDw9IHYyIDwgdjFcclxuXHRcdFx0XHRcdGNvbnN0IHRtcCA9IHYxO1xyXG5cdFx0XHRcdFx0djEgPSB2MjtcclxuXHRcdFx0XHRcdHYyID0gdG1wO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHQvLyB2MCA8PSB2MSA8PSB2MlxyXG5cdFx0XHRhW2Zyb21dID0gdjA7XHJcblx0XHRcdGFbdG8gLSAxXSA9IHYyO1xyXG5cdFx0XHRjb25zdCBwaXZvdCA9IHYxO1xyXG5cdFx0XHRsZXQgbG93X2VuZCA9IGZyb20gKyAxOyAvLyBVcHBlciBib3VuZCBvZiBlbGVtZW50cyBsb3dlciB0aGFuIHBpdm90LlxyXG5cdFx0XHRsZXQgaGlnaF9zdGFydCA9IHRvIC0gMTsgLy8gTG93ZXIgYm91bmQgb2YgZWxlbWVudHMgZ3JlYXRlciB0aGFuIHBpdm90LlxyXG5cdFx0XHRhW3RoaXJkX2luZGV4XSA9IGFbbG93X2VuZF07XHJcblx0XHRcdGFbbG93X2VuZF0gPSBwaXZvdDtcclxuXHJcblx0XHRcdC8vIEZyb20gbG93X2VuZCB0byBpIGFyZSBlbGVtZW50cyBlcXVhbCB0byBwaXZvdC5cclxuXHRcdFx0Ly8gRnJvbSBpIHRvIGhpZ2hfc3RhcnQgYXJlIGVsZW1lbnRzIHRoYXQgaGF2ZW4ndCBiZWVuIGNvbXBhcmVkIHlldC5cclxuXHRcdFx0cGFydGl0aW9uOiBmb3IgKGxldCBpID0gbG93X2VuZCArIDE7IGkgPCBoaWdoX3N0YXJ0OyBpKyspIHtcclxuXHRcdFx0XHRsZXQgZWxlbWVudCA9IGFbaV07XHJcblx0XHRcdFx0bGV0IG9yZGVyID0gY29tcGFyZUZ1bmMoZWxlbWVudCwgcGl2b3QpO1xyXG5cdFx0XHRcdGlmIChvcmRlciA8IDApIHtcclxuXHRcdFx0XHRcdGFbaV0gPSBhW2xvd19lbmRdO1xyXG5cdFx0XHRcdFx0YVtsb3dfZW5kXSA9IGVsZW1lbnQ7XHJcblx0XHRcdFx0XHRsb3dfZW5kKys7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChvcmRlciA+IDApIHtcclxuXHRcdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdFx0aGlnaF9zdGFydC0tO1xyXG5cdFx0XHRcdFx0XHRpZiAoaGlnaF9zdGFydCA9PSBpKSBicmVhayBwYXJ0aXRpb247XHJcblx0XHRcdFx0XHRcdGNvbnN0IHRvcF9lbGVtID0gYVtoaWdoX3N0YXJ0XTtcclxuXHRcdFx0XHRcdFx0b3JkZXIgPSBjb21wYXJlRnVuYyh0b3BfZWxlbSwgcGl2b3QpO1xyXG5cdFx0XHRcdFx0fSB3aGlsZSAob3JkZXIgPiAwKTtcclxuXHRcdFx0XHRcdGFbaV0gPSBhW2hpZ2hfc3RhcnRdO1xyXG5cdFx0XHRcdFx0YVtoaWdoX3N0YXJ0XSA9IGVsZW1lbnQ7XHJcblx0XHRcdFx0XHRpZiAob3JkZXIgPCAwKSB7XHJcblx0XHRcdFx0XHRcdGVsZW1lbnQgPSBhW2ldO1xyXG5cdFx0XHRcdFx0XHRhW2ldID0gYVtsb3dfZW5kXTtcclxuXHRcdFx0XHRcdFx0YVtsb3dfZW5kXSA9IGVsZW1lbnQ7XHJcblx0XHRcdFx0XHRcdGxvd19lbmQrKztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHRvIC0gaGlnaF9zdGFydCA8IGxvd19lbmQgLSBmcm9tKSB7XHJcblx0XHRcdFx0dGhpcy5fcXVpY2tTb3J0KGEsIGhpZ2hfc3RhcnQsIHRvLCBjb21wYXJlRnVuYyk7XHJcblx0XHRcdFx0dG8gPSBsb3dfZW5kO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuX3F1aWNrU29ydChhLCBmcm9tLCBsb3dfZW5kLCBjb21wYXJlRnVuYyk7XHJcblx0XHRcdFx0ZnJvbSA9IGhpZ2hfc3RhcnQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cHJpdmF0ZSBzdGF0aWMgX2luc2VydGlvblNvcnQ8VD4oYTogVFtdLCBmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIsIGNvbXBhcmVGdW5jOiBGdW5jdGlvbik6IHZvaWQge1xyXG5cdFx0Zm9yIChsZXQgaSA9IGZyb20gKyAxOyBpIDwgdG87IGkrKykge1xyXG5cdFx0XHRsZXQgajtcclxuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGFbaV07XHJcblx0XHRcdGZvciAoaiA9IGkgLSAxOyBqID49IGZyb207IGotLSkge1xyXG5cdFx0XHRcdGNvbnN0IHRtcCA9IGFbal07XHJcblx0XHRcdFx0Y29uc3Qgb3JkZXIgPSBjb21wYXJlRnVuYyh0bXAsIGVsZW1lbnQpO1xyXG5cdFx0XHRcdGlmIChvcmRlciA+IDApIHtcclxuXHRcdFx0XHRcdGFbaiArIDFdID0gdG1wO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0YVtqICsgMV0gPSBlbGVtZW50O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgQ29udGV4dCBmcm9tIFwiLi4vcmVuZGVyL0NvbnRleHRcIjtcbmltcG9ydCBQYXNzIGZyb20gXCIuLi9wYXNzL1Bhc3NcIjtcbmltcG9ydCBjb21iaW5lIGZyb20gXCIuLi91dGlscy9jb21iaW5lXCI7XG5pbXBvcnQgQ3VsbGluZ1ZvbHVtZSBmcm9tIFwiLi9DdWxsaW5nVm9sdW1lXCI7XG5pbXBvcnQgUmVuZGVyUXVldWUgZnJvbSBcIi4vUmVuZGVyUXVldWVcIjtcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcbmV4cG9ydCBjbGFzcyBGcmFtZVN0YXRlIHtcblx0cHVibGljIHBhc3M6IFBhc3M7XG5cdHB1YmxpYyByZW5kZXJRdWV1ZTogUmVuZGVyUXVldWU7XG5cdHB1YmxpYyBkcmF3Q2FsbG51bXM6IG51bWJlcjtcblx0cHVibGljIGdlb21ldHJ5TWVtb3J5OiBudW1iZXI7XG5cdHB1YmxpYyB0ZXh0dXJlTWVtb3J5OiBudW1iZXI7XG5cdHB1YmxpYyBmcmFtZU51bWJlcjogbnVtYmVyO1xuXHRwdWJsaWMgY3VsbGluZ1ZvbHVtZTogQ3VsbGluZ1ZvbHVtZTtcblx0cHVibGljIGRlZmluZXNEaXJ0eTogYm9vbGVhbjtcblx0cHVibGljIHZpZXdwb3J0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9O1xuXHRwcml2YXRlIF9kZWZpbmVzOiB7fTtcblx0Y29uc3RydWN0b3IocHVibGljIGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHR0aGlzLnJlbmRlclF1ZXVlID0gbmV3IFJlbmRlclF1ZXVlKCk7XG5cdFx0dGhpcy5nZW9tZXRyeU1lbW9yeSA9IDA7XG5cdFx0dGhpcy50ZXh0dXJlTWVtb3J5ID0gMDtcblx0XHR0aGlzLmZyYW1lTnVtYmVyID0gMDtcblx0XHR0aGlzLl9kZWZpbmVzID0ge307XG5cdFx0dGhpcy5kZWZpbmVzRGlydHkgPSB0cnVlO1xuXHR9XG5cdGdldCBkZWZpbmVzKCkge1xuXHRcdHJldHVybiB0aGlzLl9kZWZpbmVzO1xuXHR9XG5cdHNldCBkZWZpbmVzKHZhbHVlKSB7XG5cdFx0dGhpcy5kZWZpbmVzRGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX2RlZmluZXMgPSBjb21iaW5lKHZhbHVlLCB0aGlzLl9kZWZpbmVzLCBmYWxzZSk7XG5cdH1cblx0dXBkYXRlKGNhbWVyYTogQ2FtZXJhKSB7XG5cdFx0dGhpcy5yZW5kZXJRdWV1ZS5yZXNldCgpO1xuXHRcdHRoaXMuY3VsbGluZ1ZvbHVtZSA9IGNhbWVyYS5nZXRDdWxsaW5nVm9sdW1lKCk7XG5cdFx0dGhpcy5mcmFtZU51bWJlciArPSAxO1xuXHR9XG59XG4iLCJmdW5jdGlvbiBjcmVhdGVHdWlkKCkge1xyXG4gIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxyXG4gIHJldHVybiBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcclxuICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDA7XHJcbiAgICBjb25zdCB2ID0gYyA9PT0gXCJ4XCIgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xyXG4gIH0pO1xyXG59XHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUd1aWQ7XHJcbiIsImltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi4vbWVzaC9NZXNoXCI7XG5pbXBvcnQgY3JlYXRlR3VpZCBmcm9tIFwiLi4vdXRpbHMvY3JlYXRlR3VpZFwiO1xuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcbmltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi9GcmFtZVN0YXRlXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmltaXRpdmVNYW5nZXIge1xuXHRwcml2YXRlIF9saXN0OiBhbnlbXTtcblx0cHJpdmF0ZSBfZ3VpZDogYW55O1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLl9saXN0ID0gW107XG5cdFx0dGhpcy5fZ3VpZCA9IGNyZWF0ZUd1aWQoKTtcblx0fVxuXHRnZXQgbGVuZ3RoKCkge1xuXHRcdHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aDtcblx0fVxuXHR1cGRhdGUoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSwgY2FtZXJhOiBDYW1lcmEpIHtcblx0XHR0aGlzLl9saXN0LmZvckVhY2goKHByaW1pdGl2ZSkgPT4ge1xuXHRcdFx0cHJpbWl0aXZlLnVwZGF0ZShmcmFtZVN0YXRlLCBjYW1lcmEpO1xuXHRcdH0pO1xuXHR9XG5cdGFkZChpbnN0YW5jZTogTWVzaCwgaW5kZXg/OiBudW1iZXIpIHtcblx0XHRjb25zdCBoYXNJbmRleCA9IGRlZmluZWQoaW5kZXgpO1xuXHRcdGlmICghZGVmaW5lZChpbnN0YW5jZSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImluc3RhbmNlIGlzIHJlcXVpcmVkLlwiKTtcblx0XHR9XG5cdFx0aWYgKGhhc0luZGV4KSB7XG5cdFx0XHRpZiAoaW5kZXggPCAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImluZGV4IG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHplcm8uXCIpO1xuXHRcdFx0fSBlbHNlIGlmIChpbmRleCA+IHRoaXMuX2xpc3QubGVuZ3RoKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImluZGV4IG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBudW1iZXIgb2YgcHJpbWl0aXZlcy5cIik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IGV4dGVybmFsID0gKGluc3RhbmNlLl9leHRlcm5hbCA9IGluc3RhbmNlLl9leHRlcm5hbCB8fCB7fSk7XG5cdFx0Y29uc3QgY29tcG9zaXRlcyA9IChleHRlcm5hbC5fY29tcG9zaXRlcyA9IGV4dGVybmFsLl9jb21wb3NpdGVzIHx8IHt9KTtcblx0XHRjb21wb3NpdGVzW3RoaXMuX2d1aWRdID0ge1xuXHRcdFx0Y29sbGVjdGlvbjogdGhpc1xuXHRcdH07XG5cdFx0aWYgKCFoYXNJbmRleCkge1xuXHRcdFx0dGhpcy5fbGlzdC5wdXNoKGluc3RhbmNlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fbGlzdC5zcGxpY2UoaW5kZXgsIDAsIGluc3RhbmNlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5zdGFuY2U7XG5cdH1cblx0cmVtb3ZlKGluc3RhbmNlKSB7XG5cdFx0aWYgKHRoaXMuY29udGFpbnMoaW5zdGFuY2UpKSB7XG5cdFx0XHRjb25zdCBpbmRleCA9IHRoaXMuX2xpc3QuaW5kZXhPZihpbnN0YW5jZSk7XG5cdFx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRcdHRoaXMuX2xpc3Quc3BsaWNlKGluZGV4LCAxKTtcblxuXHRcdFx0XHRkZWxldGUgaW5zdGFuY2UuX2V4dGVybmFsLl9jb21wb3NpdGVzW3RoaXMuX2d1aWRdO1xuXHRcdFx0XHRpbnN0YW5jZS5kZXN0cm95KCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Y29udGFpbnMoaW5zdGFuY2UpIHtcblx0XHRyZXR1cm4gISEoXG5cdFx0XHRkZWZpbmVkKGluc3RhbmNlKSAmJlxuXHRcdFx0aW5zdGFuY2UuX2V4dGVybmFsICYmXG5cdFx0XHRpbnN0YW5jZS5fZXh0ZXJuYWwuX2NvbXBvc2l0ZXMgJiZcblx0XHRcdGluc3RhbmNlLl9leHRlcm5hbC5fY29tcG9zaXRlc1t0aGlzLl9ndWlkXVxuXHRcdCk7XG5cdH1cbn1cbiIsImltcG9ydCBSZW5kZXJUYXJnZXQgZnJvbSBcIi4uL3JlbmRlci9SZW5kZXJUYXJnZXQuanNcIjtcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4uL21hdGVyaWFsL01hdGVyaWFsLmpzXCI7XG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi4vcmVuZGVyL0NvbnRleHQuanNcIjtcbmltcG9ydCB7IFRhcmdldCB9IGZyb20gXCIuLi9yZW5kZXIvUmVuZGVyU3RhdGVcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9yZW5kZXIvVGV4dHVyZS5qc1wiO1xuaW1wb3J0IFJlbmRlclF1ZXVlIGZyb20gXCIuLi9jb3JlL1JlbmRlclF1ZXVlLmpzXCI7XG5pbXBvcnQgeyBMaWdodCB9IGZyb20gXCIuLi9saWdodC9MaWdodC5qc1wiO1xuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGUuanNcIjtcblxuY2xhc3MgUGFzcyB7XG5cdHB1YmxpYyByZW5kZXJUYXJnZXQ6IFJlbmRlclRhcmdldDtcblx0cHVibGljIGNvbXB1dGVUYXJnZXQ6IFJlbmRlclRhcmdldDtcblx0cHVibGljIGNvbnRleHQ6IENvbnRleHQ7XG5cdHB1YmxpYyBvdmVycmlkZU1hdGVyaWFsPzogTWF0ZXJpYWw7XG5cdHB1YmxpYyBjb2xvclRhcmdldHM/OiBBcnJheTxUYXJnZXQ+O1xuXHRwdWJsaWMgcGFzc1JlbmRlckVuY29kZXI6IEdQVVJlbmRlclBhc3NFbmNvZGVyIHwgbnVsbDtcblx0cHVibGljIHBhc3NDb21wdXRlRW5jb2RlcjogR1BVQ29tcHV0ZVBhc3NFbmNvZGVyO1xuXHRjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcblx0fVxuXHRyZW5kZXIoZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZSk6IHZvaWQge31cblx0YmVmb3JlUmVuZGVyKCkge1xuXHRcdHRoaXMucGFzc1JlbmRlckVuY29kZXIgPSB0aGlzLnJlbmRlclRhcmdldC5iZWdpblJlbmRlclBhc3NFbmNvZGVyKHRoaXMuY29udGV4dCk7XG5cdFx0aWYgKHRoaXMuY29tcHV0ZVRhcmdldCkgdGhpcy5wYXNzQ29tcHV0ZUVuY29kZXIgPSB0aGlzLmNvbXB1dGVUYXJnZXQuYmVnaW5Db21wdXRlUGFzc0VuY29kZXIodGhpcy5jb250ZXh0KTtcblx0fVxuXHRnZXRDb2xvclRleHR1cmUoaW5kZXg6IG51bWJlciA9IDApOiBUZXh0dXJlIHtcblx0XHRyZXR1cm4gdGhpcy5yZW5kZXJUYXJnZXQuZ2V0Q29sb3JUZXh0dXJlKGluZGV4KSBhcyBUZXh0dXJlO1xuXHR9XG5cdGdldERlcHRoVGV4dHVyZSgpOiBUZXh0dXJlIHwgeyBncHVUZXh0dXJlOiBHUFVUZXh0dXJlIH0ge1xuXHRcdHJldHVybiB0aGlzLnJlbmRlclRhcmdldC5nZXREZXB0aFRleHR1cmUoKTtcblx0fVxuXHRhZnRlclJlbmRlcigpIHtcblx0XHR0aGlzLnJlbmRlclRhcmdldC5lbmRSZW5kZXJQYXNzRW5jb2RlcigpO1xuXHRcdGlmICh0aGlzLmNvbXB1dGVUYXJnZXQpIHRoaXMuY29tcHV0ZVRhcmdldC5lbmRDb21wdXRlUGFzc0VuY29kZXIoKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXNzO1xuIiwiaW1wb3J0IHsgUGFzc1R5cGUgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xuaW1wb3J0IEF0dGFjaG1lbnQgZnJvbSBcIi4vQXR0YWNobWVudFwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vQ29udGV4dFwiO1xuaW1wb3J0IFF1ZXJ5U2V0IGZyb20gXCIuL1F1ZXJ5U2V0XCI7XG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi9UZXh0dXJlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlclRhcmdldCB7XG5cdHB1YmxpYyBjb250ZXh0OiBDb250ZXh0O1xuXHRwcml2YXRlIF9yZW5kZXJQYXNzRGVzY3JpcHRvcjogR1BVUmVuZGVyUGFzc0Rlc2NyaXB0b3I7XG5cdHByaXZhdGUgcmVuZGVyRW5jb2RlcjogR1BVUmVuZGVyUGFzc0VuY29kZXI7XG5cdHByaXZhdGUgY29tbWFuZEVuY29kZXI6IEdQVUNvbW1hbmRFbmNvZGVyIHwgbnVsbDtcblx0cHJpdmF0ZSBjb21wdXRlRW5jb2RlcjogR1BVQ29tcHV0ZVBhc3NFbmNvZGVyO1xuXHR0ZXh0dXJlOiBhbnk7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHB1YmxpYyB0eXBlOiBQYXNzVHlwZSxcblx0XHRwdWJsaWMgY29sb3JBdHRhY2htZW50czogQXR0YWNobWVudFtdLFxuXHRcdHB1YmxpYyBkZXB0aEF0dGFjaG1lbnQ/OiBBdHRhY2htZW50LFxuXHRcdHB1YmxpYyBzdGVuY2lsQXR0YWNobWVudD86IEF0dGFjaG1lbnQsXG5cdFx0cHVibGljIHF1ZXJ5U2V0PzogUXVlcnlTZXRcblx0KSB7XG5cdFx0dGhpcy5yZW5kZXJFbmNvZGVyID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuY29tcHV0ZUVuY29kZXIgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5fcmVuZGVyUGFzc0Rlc2NyaXB0b3IgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5jb21tYW5kRW5jb2RlciA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmNvbnRleHQgPSB1bmRlZmluZWQ7XG5cdH1cblx0Z2V0IHJlbmRlclBhc3NEZXNjcmlwdG9yKCkge1xuXHRcdHRoaXMuX3JlbmRlclBhc3NEZXNjcmlwdG9yID0gdGhpcy5nZXRSZW5kZXJQYXNzRGVzY3JpcHRvcigpO1xuXHRcdHJldHVybiB0aGlzLl9yZW5kZXJQYXNzRGVzY3JpcHRvcjtcblx0fVxuXHRwdWJsaWMgZ2V0Q29sb3JUZXh0dXJlKGluZGV4OiBudW1iZXIgPSAwKTogVGV4dHVyZSB7XG5cdFx0Y29uc3QgY29sQXR0ID0gdGhpcy5jb2xvckF0dGFjaG1lbnRzW2luZGV4XTtcblx0XHRpZiAoY29sQXR0KSB7XG5cdFx0XHRyZXR1cm4gY29sQXR0LnRleHR1cmUgYXMgVGV4dHVyZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9XG5cdHB1YmxpYyBnZXREZXB0aFRleHR1cmUoKTogVGV4dHVyZSB7XG5cdFx0aWYgKHRoaXMuZGVwdGhBdHRhY2htZW50KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kZXB0aEF0dGFjaG1lbnQudGV4dHVyZSBhcyBUZXh0dXJlO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIGdldFJlbmRlclBhc3NEZXNjcmlwdG9yKCk6IEdQVVJlbmRlclBhc3NEZXNjcmlwdG9yIHwgbnVsbCB7XG5cdFx0dGhpcy5kZXB0aEF0dGFjaG1lbnQ/LnRleHR1cmU/LnVwZGF0ZSh0aGlzLmNvbnRleHQpO1xuXHRcdHJldHVybiB7XG5cdFx0XHQuLi4odGhpcy5jb2xvckF0dGFjaG1lbnRzICYmIHtcblx0XHRcdFx0Y29sb3JBdHRhY2htZW50czogdGhpcy5jb2xvckF0dGFjaG1lbnRzLm1hcCgoY29sb3JBdHRhY2htZW50KSA9PiB7XG5cdFx0XHRcdFx0Y29sb3JBdHRhY2htZW50Py50ZXh0dXJlPy51cGRhdGUgJiYgY29sb3JBdHRhY2htZW50Py50ZXh0dXJlPy51cGRhdGUodGhpcy5jb250ZXh0KTtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dmlldzpcblx0XHRcdFx0XHRcdFx0Ly/mmoLml7bov5nkuYjlhplcblx0XHRcdFx0XHRcdFx0Y29sb3JBdHRhY2htZW50LnRleHR1cmUudGV4dHVyZVZpZXcgfHwgdW5kZWZpbmVkLFxuXHRcdFx0XHRcdFx0cmVzb2x2ZVRhcmdldDpcblx0XHRcdFx0XHRcdFx0Y29sb3JBdHRhY2htZW50LnJlc29sdmVUYXJnZXQgIT0gdW5kZWZpbmVkXG5cdFx0XHRcdFx0XHRcdFx0PyBjb2xvckF0dGFjaG1lbnQucmVzb2x2ZVRhcmdldC50ZXh0dXJlVmlld1xuXHRcdFx0XHRcdFx0XHRcdDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdFx0Y2xlYXJWYWx1ZTogY29sb3JBdHRhY2htZW50LnZhbHVlLFxuXHRcdFx0XHRcdFx0bG9hZE9wOiBjb2xvckF0dGFjaG1lbnQub3AsXG5cdFx0XHRcdFx0XHRzdG9yZU9wOiBjb2xvckF0dGFjaG1lbnQuc3RvcmVPcFxuXHRcdFx0XHRcdH0gYXMgR1BVUmVuZGVyUGFzc0NvbG9yQXR0YWNobWVudDtcblx0XHRcdFx0fSlcblx0XHRcdH0pLFxuXHRcdFx0Li4uKCh0aGlzLmRlcHRoQXR0YWNobWVudCB8fCB0aGlzLnN0ZW5jaWxBdHRhY2htZW50KSAmJiB7XG5cdFx0XHRcdGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQ6IHtcblx0XHRcdFx0XHR2aWV3OiB0aGlzLmRlcHRoQXR0YWNobWVudD8udGV4dHVyZT8udGV4dHVyZVZpZXcgfHwgdW5kZWZpbmVkLFxuXHRcdFx0XHRcdGRlcHRoTG9hZE9wOiB0aGlzLmRlcHRoQXR0YWNobWVudD8ub3AgfHwgXCJjbGVhclwiLFxuXHRcdFx0XHRcdGRlcHRoQ2xlYXJWYWx1ZTogdGhpcy5kZXB0aEF0dGFjaG1lbnQ/LnZhbHVlIHx8IDEuMCxcblx0XHRcdFx0XHRkZXB0aFN0b3JlT3A6IHRoaXMuZGVwdGhBdHRhY2htZW50Py5zdG9yZU9wIHx8IFwic3RvcmVcIlxuXHRcdFx0XHRcdC8vIHN0ZW5jaWxMb2FkT3A6IHRoaXMuc3RlbmNpbEF0dGFjaG1lbnQ/Lm9wIHx8IFwiY2xlYXJcIixcblx0XHRcdFx0XHQvLyBzdGVuY2lsQ2xlYXJWYWx1ZTogdGhpcy5zdGVuY2lsQXR0YWNobWVudD8udmFsdWUgfHwgMCxcblx0XHRcdFx0XHQvLyBzdGVuY2lsU3RvcmVPcDogdGhpcy5zdGVuY2lsQXR0YWNobWVudD8uc3RvcmVPcCB8fCBcInN0b3JlXCIsXG5cdFx0XHRcdH0gYXMgR1BVUmVuZGVyUGFzc0RlcHRoU3RlbmNpbEF0dGFjaG1lbnRcblx0XHRcdH0pXG5cdFx0fTtcblx0fVxuXG5cdHB1YmxpYyBiZWdpblJlbmRlclBhc3NFbmNvZGVyKGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHRpZiAoIXRoaXMuY29udGV4dCkgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblx0XHRjb25zdCB7IGRldmljZSB9ID0gdGhpcy5jb250ZXh0O1xuXHRcdHRoaXMuY29tbWFuZEVuY29kZXIgPSBkZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcblx0XHR0aGlzLnJlbmRlckVuY29kZXIgPSB0aGlzLmNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyh0aGlzLnJlbmRlclBhc3NEZXNjcmlwdG9yKTtcblx0XHRyZXR1cm4gdGhpcy5yZW5kZXJFbmNvZGVyO1xuXHR9XG5cdHB1YmxpYyBlbmRSZW5kZXJQYXNzRW5jb2RlcigpIHtcblx0XHR0aGlzLnJlbmRlckVuY29kZXI/LmVuZCgpO1xuXHRcdHRoaXMuY29udGV4dC5kZXZpY2UucXVldWUuc3VibWl0KFt0aGlzLmNvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XG5cdFx0dGhpcy5jb21tYW5kRW5jb2RlciA9IG51bGw7XG5cdFx0dGhpcy5yZW5kZXJFbmNvZGVyID0gbnVsbDtcblx0fVxuXHRwdWJsaWMgYmVnaW5Db21wdXRlUGFzc0VuY29kZXIoY29udGV4dDogQ29udGV4dCkge1xuXHRcdGlmICghdGhpcy5jb250ZXh0KSB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXHRcdGNvbnN0IHsgZGV2aWNlIH0gPSB0aGlzLmNvbnRleHQ7XG5cdFx0dGhpcy5jb21tYW5kRW5jb2RlciA9IGRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuXHRcdHRoaXMuY29tcHV0ZUVuY29kZXIgPSB0aGlzLmNvbW1hbmRFbmNvZGVyLmJlZ2luQ29tcHV0ZVBhc3MoKTtcblx0XHRyZXR1cm4gdGhpcy5jb21wdXRlRW5jb2Rlcjtcblx0fVxuXHRwdWJsaWMgZW5kQ29tcHV0ZVBhc3NFbmNvZGVyKCkge1xuXHRcdHRoaXMuY29tcHV0ZUVuY29kZXI/LmVuZCgpO1xuXHRcdHRoaXMuY29udGV4dC5kZXZpY2UucXVldWUuc3VibWl0KFt0aGlzLmNvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XG5cdFx0dGhpcy5jb21tYW5kRW5jb2RlciA9IG51bGw7XG5cdFx0dGhpcy5yZW5kZXJFbmNvZGVyID0gbnVsbDtcblx0fVxuXHRwdWJsaWMgc2V0U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZGVwdGg/OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy5jb2xvckF0dGFjaG1lbnRzKSB7XG5cdFx0XHR0aGlzLmNvbG9yQXR0YWNobWVudHMubWFwKChjb2xvckF0dGFjaG1lbnQpID0+IHtcblx0XHRcdFx0aWYgKGNvbG9yQXR0YWNobWVudC50ZXh0dXJlKSB7XG5cdFx0XHRcdFx0Y29sb3JBdHRhY2htZW50LnRleHR1cmUuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0LCBkZXB0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAodGhpcy5kZXB0aEF0dGFjaG1lbnQudGV4dHVyZSkgdGhpcy5kZXB0aEF0dGFjaG1lbnQudGV4dHVyZS5zZXRTaXplKHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0fVxuXHRkZXN0cm95KCkge1xuXHRcdGlmICh0aGlzLmNvbG9yQXR0YWNobWVudHMpIHtcblx0XHRcdHRoaXMuY29sb3JBdHRhY2htZW50cy5tYXAoKGNvbG9yQXR0YWNobWVudCkgPT4ge1xuXHRcdFx0XHRpZiAoY29sb3JBdHRhY2htZW50LnRleHR1cmUpIHtcblx0XHRcdFx0XHRjb2xvckF0dGFjaG1lbnQudGV4dHVyZS5kZXN0cm95KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAodGhpcy5kZXB0aEF0dGFjaG1lbnQudGV4dHVyZSkgdGhpcy5kZXB0aEF0dGFjaG1lbnQudGV4dHVyZS5kZXN0cm95KCk7XG5cdH1cbn1cbiIsImltcG9ydCBBdHRhY2htZW50IGZyb20gXCIuLi9yZW5kZXIvQXR0YWNobWVudFwiO1xuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4uL3JlbmRlci9Db250ZXh0XCI7XG5pbXBvcnQgUGFzcyBmcm9tIFwiLi9QYXNzXCI7XG5pbXBvcnQgUmVuZGVyVGFyZ2V0IGZyb20gXCIuLi9yZW5kZXIvUmVuZGVyVGFyZ2V0XCI7XG5pbXBvcnQgRHJhd0NvbW1hbmQgZnJvbSBcIi4uL3JlbmRlci9EcmF3Q29tbWFuZFwiO1xuaW1wb3J0IFJlbmRlclF1ZXVlIGZyb20gXCIuLi9jb3JlL1JlbmRlclF1ZXVlXCI7XG5pbXBvcnQgeyBUZXh0dXJlRm9ybWF0LCBUZXh0dXJlVXNhZ2UgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5pbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvQ2FtZXJhXCI7XG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgQmFzaWNQYXNzIGV4dGVuZHMgUGFzcyB7XG5cdHNreWJveERyYXdDb21hbmQ6IERyYXdDb21tYW5kO1xuXHRjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0c3VwZXIoY29udGV4dCk7XG5cdFx0dGhpcy5pbml0KGNvbnRleHQpO1xuXHR9XG5cdHJlbmRlcihmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBjYW1lcmE/OiBDYW1lcmEpIHtcblx0XHRjb25zdCB7IHJlbmRlclF1ZXVlIH0gPSBmcmFtZVN0YXRlO1xuXG5cdFx0cmVuZGVyUXVldWUuc29ydCgpO1xuXHRcdHJlbmRlclF1ZXVlLnByZVJlbmRlcihjYW1lcmEsIHRoaXMuY29udGV4dCwgdGhpcy5wYXNzUmVuZGVyRW5jb2Rlcik7XG5cdFx0cmVuZGVyUXVldWUudHJhbnNwYXJlbnRSZW5kZXIoY2FtZXJhLCB0aGlzLmNvbnRleHQsIHRoaXMucGFzc1JlbmRlckVuY29kZXIpO1xuXHRcdHJlbmRlclF1ZXVlLm9wYXF1ZVJlbmRlcihjYW1lcmEsIHRoaXMuY29udGV4dCwgdGhpcy5wYXNzUmVuZGVyRW5jb2Rlcik7XG5cdH1cblx0cHJpdmF0ZSBpbml0KGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHR0aGlzLmNyZWF0ZVJlbmRlclRhcmdldChjb250ZXh0KTtcblx0fVxuXHRwcml2YXRlIGNyZWF0ZVJlbmRlclRhcmdldChjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0Y29uc3QgY29sb3JUZXh0dXJlID0gbmV3IFRleHR1cmUoe1xuXHRcdFx0c2l6ZTogdGhpcy5jb250ZXh0LnByZXNlbnRhdGlvblNpemUsXG5cdFx0XHRmb3JtYXQ6IHRoaXMuY29udGV4dC5wcmVzZW50YXRpb25Gb3JtYXQsXG5cdFx0XHR1c2FnZTogVGV4dHVyZVVzYWdlLlJlbmRlckF0dGFjaG1lbnQgfCBUZXh0dXJlVXNhZ2UuVGV4dHVyZUJpbmRpbmdcblx0XHR9KTtcblx0XHRjb25zdCBkZXB0aFRleHR1cmUgPSBuZXcgVGV4dHVyZSh7XG5cdFx0XHRzaXplOiB0aGlzLmNvbnRleHQucHJlc2VudGF0aW9uU2l6ZSxcblx0XHRcdGZvcm1hdDogVGV4dHVyZUZvcm1hdC5EZXB0aDI0UGx1cyxcblx0XHRcdHVzYWdlOiBUZXh0dXJlVXNhZ2UuUmVuZGVyQXR0YWNobWVudFxuXHRcdH0pO1xuXHRcdGNvbnN0IGNvbG9yQXR0YWNobWVudCA9IG5ldyBBdHRhY2htZW50KHsgcjogMC4wLCBnOiAwLjAsIGI6IDAuMCwgYTogMC4wIH0sIHsgdGV4dHVyZTogY29sb3JUZXh0dXJlIH0pO1xuXHRcdGNvbnN0IGRlcHRoQXR0YWNobWVudCA9IG5ldyBBdHRhY2htZW50KDEuMCwgeyB0ZXh0dXJlOiBkZXB0aFRleHR1cmUgfSk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQgPSBuZXcgUmVuZGVyVGFyZ2V0KFwicmVuZGVyXCIsIFtjb2xvckF0dGFjaG1lbnRdLCBkZXB0aEF0dGFjaG1lbnQpO1xuXHR9XG59XG4iLCJpbXBvcnQgQXR0YWNobWVudCBmcm9tIFwiLi4vcmVuZGVyL0F0dGFjaG1lbnRcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuLi9yZW5kZXIvQ29udGV4dFwiO1xuaW1wb3J0IFBhc3MgZnJvbSBcIi4vUGFzc1wiO1xuaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tIFwiLi4vcmVuZGVyL1JlbmRlclRhcmdldFwiO1xuaW1wb3J0IERyYXdDb21tYW5kIGZyb20gXCIuLi9yZW5kZXIvRHJhd0NvbW1hbmRcIjtcbmltcG9ydCBSZW5kZXJRdWV1ZSBmcm9tIFwiLi4vY29yZS9SZW5kZXJRdWV1ZVwiO1xuaW1wb3J0IHsgVGV4dHVyZUZvcm1hdCwgVGV4dHVyZVVzYWdlIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9yZW5kZXIvVGV4dHVyZVwiO1xuaW1wb3J0IENhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0NhbWVyYVwiO1xuaW1wb3J0IHsgTGlnaHQgfSBmcm9tIFwiLi4vbGlnaHQvTGlnaHRcIjtcbmltcG9ydCB7IEJhc2VTaGFkb3cgfSBmcm9tIFwiLi4vbGlnaHQvc2hhZG93cy9CYXNlU2hhZG93XCI7XG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4uL2NvcmUvRnJhbWVTdGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgU2hhZG93UGFzcyBleHRlbmRzIFBhc3Mge1xuXHRjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0c3VwZXIoY29udGV4dCk7XG5cdFx0dGhpcy5pbml0KGNvbnRleHQpO1xuXHR9XG5cblx0YmVmb3JlUmVuZGVyKCk6IHZvaWQge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHJlbmRlcihmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBjYW1lcmE/OiBDYW1lcmEpIHtcblx0XHRjb25zdCB7IHJlbmRlclF1ZXVlLCBjb250ZXh0IH0gPSBmcmFtZVN0YXRlO1xuXHRcdGNvbnN0IGxpZ2h0cyA9IGNvbnRleHQubGlnaHRNYW5nZXIuZ2V0QWxsTGlnaHRzKCk7XG5cdFx0aWYgKGxpZ2h0cy5sZW5ndGggPT09IDApIHJldHVybjtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGlnaHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBsaWdodCA9IGxpZ2h0c1tpXTtcblx0XHRcdGNvbnN0IHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblx0XHRcdHRoaXMuc2V0UmVuZGVyVGFyZ2V0KHNoYWRvdyk7XG5cdFx0XHRzdXBlci5iZWZvcmVSZW5kZXIoKTtcblxuXHRcdFx0cmVuZGVyUXVldWUuc29ydCgpO1xuXHRcdFx0cmVuZGVyUXVldWUucHJlUmVuZGVyKGNhbWVyYSwgdGhpcy5jb250ZXh0LCB0aGlzLnBhc3NSZW5kZXJFbmNvZGVyKTtcblx0XHRcdHJlbmRlclF1ZXVlLnRyYW5zcGFyZW50UmVuZGVyKGNhbWVyYSwgdGhpcy5jb250ZXh0LCB0aGlzLnBhc3NSZW5kZXJFbmNvZGVyKTtcblx0XHRcdHJlbmRlclF1ZXVlLm9wYXF1ZVJlbmRlcihjYW1lcmEsIHRoaXMuY29udGV4dCwgdGhpcy5wYXNzUmVuZGVyRW5jb2Rlcik7XG5cdFx0fVxuXHR9XG5cblx0YWZ0ZXJSZW5kZXIoKTogdm9pZCB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0cHJpdmF0ZSBzZXRSZW5kZXJUYXJnZXQoc2hhZG93OiBCYXNlU2hhZG93KSB7XG5cdFx0Y29uc3Qgc2hhZG93TWFwVGV4dHVyZSA9IHNoYWRvdy5nZXRTaGFkb3dNYXBUZXh0dXJlKCk7XG5cdFx0Y29uc3QgZGVwdGhBdHRhY2htZW50ID0gbmV3IEF0dGFjaG1lbnQoMS4wLCB7IHRleHR1cmU6IHNoYWRvd01hcFRleHR1cmUgfSk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQuZGVwdGhBdHRhY2htZW50ID0gZGVwdGhBdHRhY2htZW50O1xuXHR9XG5cblx0cHJpdmF0ZSBpbml0KGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHR0aGlzLmNyZWF0ZVJlbmRlclRhcmdldChjb250ZXh0KTtcblx0fVxuXHRwcml2YXRlIGNyZWF0ZVJlbmRlclRhcmdldChjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQgPSBuZXcgUmVuZGVyVGFyZ2V0KFwicmVuZGVyXCIsIFtdKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgSVVuaWZvcm0sIFVuaWZvcm1zIH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVVHlwZXNcIjtcbmltcG9ydCBTaGFkZXJEYXRhIGZyb20gXCIuLi9yZW5kZXIvU2hhZGVyRGF0YVwiO1xuaW1wb3J0IFVuaWZvcm1CdWZmZXIgZnJvbSBcIi4uL3JlbmRlci9Vbmlmb3JtQnVmZmVyXCI7XG5jb25zdCB1bmlmb3JtQXJyYXlOYW1lcyA9IFtcImZsb2F0LWFycmF5XCIsIFwidmVjMi1hcnJheVwiLCBcInZlYzMtYXJyYXlcIiwgXCJ2ZWM0LWFycmF5XCJdO1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQ29udGFpbkZsb2F0VHlwZSh1bmlmb3Jtcykge1xuXHRsZXQgcmVzdWx0ID0gMDtcblx0bGV0IGhhc0FycmF5dHlwZSA9IGZhbHNlO1xuXHRjb25zdCB1bmlmb3Jtc05hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModW5pZm9ybXMpO1xuXHR1bmlmb3Jtc05hbWVzLm1hcCgodW5pZm9ybXNOYW1lKSA9PiB7XG5cdFx0aWYgKHVuaWZvcm1zW3VuaWZvcm1zTmFtZV0udHlwZSA9PSBcInRleHR1cmVcIiB8fCB1bmlmb3Jtc1t1bmlmb3Jtc05hbWVdLnR5cGUgPT0gXCJzYW1wbGVyXCIpIHtcblx0XHRcdHJlc3VsdCArPSAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHVuaWZvcm1BcnJheU5hbWVzLmZpbmQoKG5hbWUpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gbmFtZSA9PT0gdW5pZm9ybXNbdW5pZm9ybXNOYW1lXS50eXBlO1xuXHRcdFx0XHR9KVxuXHRcdFx0KSB7XG5cdFx0XHRcdGhhc0FycmF5dHlwZSA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgKz0gMTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4ge1xuXHRcdGhhc0Zsb2F0OiByZXN1bHQsXG5cdFx0aGFzQXJyYXl0eXBlXG5cdH07XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkVW5pZm9ybVRvU2hhZGVyRGF0YShcblx0bmFtZTogc3RyaW5nLFxuXHR1bmlmb3JtOiBJVW5pZm9ybSxcblx0dW5pZm9ybXM6IFVuaWZvcm1zLFxuXHRzaGFkZXJEYXRhOiBTaGFkZXJEYXRhLFxuXHR1bmlmb3JtQnVmZmVyPzogVW5pZm9ybUJ1ZmZlclxuKSB7XG5cdHN3aXRjaCAodW5pZm9ybS50eXBlKSB7XG5cdFx0Y2FzZSBcImZsb2F0XCI6XG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0KG5hbWUsICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHVuaWZvcm1zW25hbWVdLnZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwidmVjMlwiOlxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdFZlYzIobmFtZSwgKCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XG5cdFx0XHR9KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJ2ZWMzXCI6XG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0VmVjMyhuYW1lLCAoKSA9PiB7XG5cdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcblx0XHRcdH0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImNvbG9yXCI6XG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldENvbG9yKG5hbWUsICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHVuaWZvcm1zW25hbWVdLnZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwidmVjNFwiOlxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRGbG9hdFZlYzQobmFtZSwgKCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XG5cdFx0XHR9KTtcblx0XHRjYXNlIFwibWF0MlwiOlxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXgyKG5hbWUsICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHVuaWZvcm1zW25hbWVdLnZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwibWF0M1wiOlxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXgzKG5hbWUsICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHVuaWZvcm1zW25hbWVdLnZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0Y2FzZSBcIm1hdDRcIjpcblx0XHRcdHVuaWZvcm1CdWZmZXIuc2V0TWF0cml4NChuYW1lLCAoKSA9PiB7XG5cdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcblx0XHRcdH0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImZsb2F0LWFycmF5XCI6XG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldEZsb2F0QXJyYXkoXG5cdFx0XHRcdG5hbWUsXG5cdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHVuaWZvcm1zW25hbWVdLnZhbHVlLmxlbmd0aFxuXHRcdFx0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJ2ZWMyLWFycmF5XCI6XG5cdFx0XHR1bmlmb3JtQnVmZmVyLnNldFZlYzJBcnJheShcblx0XHRcdFx0bmFtZSxcblx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiB1bmlmb3Jtc1tuYW1lXS52YWx1ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dW5pZm9ybXNbbmFtZV0udmFsdWUubGVuZ3RoXG5cdFx0XHQpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcInZlYzMtYXJyYXlcIjpcblx0XHRcdHVuaWZvcm1CdWZmZXIuc2V0VmVjM0FycmF5KFxuXHRcdFx0XHRuYW1lLFxuXHRcdFx0XHQoKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHVuaWZvcm1zW25hbWVdLnZhbHVlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR1bmlmb3Jtc1tuYW1lXS52YWx1ZS5sZW5ndGhcblx0XHRcdCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwidmVjNC1hcnJheVwiOlxuXHRcdFx0dW5pZm9ybUJ1ZmZlci5zZXRWZWM0QXJyYXkoXG5cdFx0XHRcdG5hbWUsXG5cdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHVuaWZvcm1zW25hbWVdLnZhbHVlLmxlbmd0aFxuXHRcdFx0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJ0ZXh0dXJlXCI6XG5cdFx0XHRzaGFkZXJEYXRhLnNldFRleHR1cmUobmFtZSwgKCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XG5cdFx0XHR9KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJzYW1wbGVyXCI6XG5cdFx0XHRzaGFkZXJEYXRhLnNldFNhbXBsZXIobmFtZSwgKCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gdW5pZm9ybXNbbmFtZV0udmFsdWU7XG5cdFx0XHR9KTtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJub3QgbWF0Y2ggdW5pZnJvbSB0eXBlXCIpO1xuXHRcdFx0YnJlYWs7XG5cdH1cbn1cbiIsImltcG9ydCB7IEZyYW1lU3RhdGUgfSBmcm9tIFwiLi4vY29yZS9GcmFtZVN0YXRlXCI7XG5pbXBvcnQgeyBCdWZmZXJVc2FnZSB9IGZyb20gXCIuLi9jb3JlL1dlYkdQVUNvbnN0YW50XCI7XG5pbXBvcnQgeyBJVW5pZm9ybSwgU2hhZGVyTWF0ZXJpYWxQYXJtcywgVW5pZm9ybXMgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gXCIuLi9tZXNoL01lc2hcIjtcbmltcG9ydCBVbmlmb3JtQnVmZmVyIGZyb20gXCIuLi9yZW5kZXIvVW5pZm9ybUJ1ZmZlclwiO1xuaW1wb3J0IHsgU2hhZGVyU291cmNlIH0gZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJTb3VyY2VcIjtcbmltcG9ydCBkZWZhdWx0VmFsdWUgZnJvbSBcIi4uL3V0aWxzL2RlZmF1bHRWYWx1ZVwiO1xuaW1wb3J0IHsgYWRkVW5pZm9ybVRvU2hhZGVyRGF0YSwgY2hlY2tDb250YWluRmxvYXRUeXBlIH0gZnJvbSBcIi4uL3V0aWxzL3VuaWZvcm1VdGlsc1wiO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tIFwiLi9NYXRlcmlhbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZXJNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblx0dW5pZm9ybXM6IFVuaWZvcm1zO1xuXHR1bmlmb3JtQnVmZmVyOiBVbmlmb3JtQnVmZmVyO1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zOiBTaGFkZXJNYXRlcmlhbFBhcm1zKSB7XG5cdFx0c3VwZXIoKTtcblx0XHRjb25zdCB7IHR5cGUsIGZyYWcsIHZlcnQsIGRlZmluZXMgfSA9IG9wdGlvbnM7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0XHR0aGlzLnNoYWRlclNvdXJjZSA9IG5ldyBTaGFkZXJTb3VyY2Uoe1xuXHRcdFx0dHlwZSxcblx0XHRcdGZyYWcsXG5cdFx0XHR2ZXJ0LFxuXHRcdFx0Y3VzdG9tOiB0cnVlLFxuXHRcdFx0ZGVmaW5lczogZGVmYXVsdFZhbHVlKGRlZmluZXMsIHt9KSxcblx0XHRcdHJlbmRlcjogdHJ1ZVxuXHRcdH0pO1xuXHRcdHRoaXMudW5pZm9ybXMgPSBvcHRpb25zLnVuaWZvcm1zO1xuXHRcdHRoaXMudW5pZm9ybUJ1ZmZlciA9IHVuZGVmaW5lZDtcblx0fVxuXHR1cGRhdGUoZnJhbWVTdGF0ZT86IEZyYW1lU3RhdGUsIG1lc2g/OiBNZXNoKSB7XG5cdFx0aWYgKCF0aGlzLnNoYWRlckRhdGEpIHRoaXMuY3JlYXRlU2hhZGVyRGF0YShtZXNoKTtcblx0fVxuXHRwcm90ZWN0ZWQgY3JlYXRlU2hhZGVyRGF0YShtZXNoPzogTWVzaCkge1xuXHRcdHN1cGVyLmNyZWF0ZVNoYWRlckRhdGEobWVzaCk7XG5cdFx0bGV0IHJlc3VsdCA9IGNoZWNrQ29udGFpbkZsb2F0VHlwZSh0aGlzLnVuaWZvcm1zKTtcblx0XHRpZiAocmVzdWx0Lmhhc0Zsb2F0KSB7XG5cdFx0XHR0aGlzLnVuaWZvcm1CdWZmZXIgPSByZXN1bHQuaGFzQXJyYXl0eXBlXG5cdFx0XHRcdD8gbmV3IFVuaWZvcm1CdWZmZXIoXCJyZWFkLW9ubHktc3RvcmFnZVwiLCBCdWZmZXJVc2FnZS5TdG9yYWdlIHwgQnVmZmVyVXNhZ2UuQ29weURzdClcblx0XHRcdFx0OiBuZXcgVW5pZm9ybUJ1ZmZlcigpO1xuXHRcdFx0dGhpcy5zaGFkZXJEYXRhLnNldFVuaWZvcm1CdWZmZXIodGhpcy50eXBlLCB0aGlzLnVuaWZvcm1CdWZmZXIpO1xuXHRcdH1cblx0XHRjb25zdCB1bmlmb3Jtc05hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy51bmlmb3Jtcyk7XG5cdFx0dW5pZm9ybXNOYW1lcy5tYXAoKHVuaWZvcm1zTmFtZSkgPT4ge1xuXHRcdFx0YWRkVW5pZm9ybVRvU2hhZGVyRGF0YShcblx0XHRcdFx0dW5pZm9ybXNOYW1lLFxuXHRcdFx0XHR0aGlzLnVuaWZvcm1zW3VuaWZvcm1zTmFtZV0sXG5cdFx0XHRcdHRoaXMudW5pZm9ybXMsXG5cdFx0XHRcdHRoaXMuc2hhZGVyRGF0YSxcblx0XHRcdFx0dGhpcy51bmlmb3JtQnVmZmVyXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBUZXh0dXJlRm9ybWF0LCBUZXh0dXJlVXNhZ2UgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IEdlb21ldHJ5IGZyb20gXCIuLi9nZW9tZXRyeS9HZW9tZXRyeVwiO1xuaW1wb3J0IFNoYWRlck1hdGVyaWFsIGZyb20gXCIuLi9tYXRlcmlhbC9TaGFkZXJNYXRlcmlhbFwiO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gXCIuLi9tZXNoL01lc2hcIjtcbmltcG9ydCBBdHRhY2htZW50IGZyb20gXCIuLi9yZW5kZXIvQXR0YWNobWVudFwiO1xuaW1wb3J0IHsgRmxvYXQzMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlXCI7XG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi4vcmVuZGVyL0NvbnRleHRcIjtcbmltcG9ydCBSZW5kZXJUYXJnZXQgZnJvbSBcIi4uL3JlbmRlci9SZW5kZXJUYXJnZXRcIjtcbmltcG9ydCBTYW1wbGVyIGZyb20gXCIuLi9yZW5kZXIvU2FtcGxlclwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5pbXBvcnQgZ2V0VmVydEZyYWcgZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJzXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNvbHZlRnJhbWUge1xuXHRjYW52YXNSZW5kZXJUYXJnZXQ6IFJlbmRlclRhcmdldDtcblx0bWF0ZXJpYWw6IFNoYWRlck1hdGVyaWFsO1xuXHRnZW9tZXRyeTogR2VvbWV0cnk7XG5cdHF1YWRNZXNoOiBNZXNoO1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KHt9KTtcblx0XHR0aGlzLmdlb21ldHJ5LnNldEF0dHJpYnV0ZShcblx0XHRcdG5ldyBGbG9hdDMyQXR0cmlidXRlKFwicG9zaXRpb25cIiwgWy0xLjAsIDEuMCwgLTEuMCwgLTEuMCwgMS4wLCAtMS4wLCAxLjAsIC0xLjAsIDEuMCwgMS4wLCAtMS4wLCAxLjBdLCAyKVxuXHRcdCk7XG5cdFx0dGhpcy5nZW9tZXRyeS5jb3VudCA9IDY7XG5cdFx0Y29uc3Qgc2hhZGVyID0gZ2V0VmVydEZyYWcoXCJyZXNvbHZlXCIsIHt9KTtcblx0XHR0aGlzLm1hdGVyaWFsID0gbmV3IFNoYWRlck1hdGVyaWFsKHtcblx0XHRcdHR5cGU6IFwicmVzb2x2ZVwiLFxuXHRcdFx0ZnJhZzogc2hhZGVyLmZyYWcsXG5cdFx0XHR2ZXJ0OiBzaGFkZXIudmVydCxcblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdHRleHR1cmU6IHtcblx0XHRcdFx0XHR0eXBlOiBcInRleHR1cmVcIixcblx0XHRcdFx0XHR2YWx1ZTogdW5kZWZpbmVkXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNhbXBsZXI6IHtcblx0XHRcdFx0XHR0eXBlOiBcInNhbXBsZXJcIixcblx0XHRcdFx0XHR2YWx1ZTogbmV3IFNhbXBsZXIoe1xuXHRcdFx0XHRcdFx0bWFnRmlsdGVyOiBcImxpbmVhclwiLFxuXHRcdFx0XHRcdFx0bWluRmlsdGVyOiBcImxpbmVhclwiXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMucXVhZE1lc2ggPSBuZXcgTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsKTtcblx0fVxuXHRyZW5kZXIoY29udGV4dDogQ29udGV4dCwgY29sb3JUZXh0dXJlPzogVGV4dHVyZSkge1xuXHRcdGlmICghdGhpcy5jYW52YXNSZW5kZXJUYXJnZXQpIHRoaXMuaW5pdFJlbmRlclRhcmdldChjb250ZXh0KTtcblx0XHQvLyB0aGlzLm1hdGVyaWFsXG5cdFx0dGhpcy5tYXRlcmlhbC51bmlmb3Jtcy50ZXh0dXJlLnZhbHVlID0gY29sb3JUZXh0dXJlO1xuXG5cdFx0dGhpcy5jYW52YXNSZW5kZXJUYXJnZXQuY29sb3JBdHRhY2htZW50c1swXS50ZXh0dXJlID0ge1xuXHRcdFx0dGV4dHVyZVZpZXc6IGNvbnRleHQuY29udGV4dC5nZXRDdXJyZW50VGV4dHVyZSgpLmNyZWF0ZVZpZXcoKVxuXHRcdH0gYXMgdW5rbm93biBhcyBUZXh0dXJlO1xuXHRcdHRoaXMubWF0ZXJpYWwudXBkYXRlKHVuZGVmaW5lZCwgdGhpcy5xdWFkTWVzaCk7XG5cblx0XHRjb25zdCBkcmF3Q29tYW5kID0gdGhpcy5xdWFkTWVzaC5nZXREcmF3Q29tbWFuZCgpO1xuXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclBhc3NFbmNvZGVyID0gdGhpcy5jYW52YXNSZW5kZXJUYXJnZXQuYmVnaW5SZW5kZXJQYXNzRW5jb2Rlcihjb250ZXh0KTtcblxuXHRcdGNvbnRleHQucmVuZGVyKGRyYXdDb21hbmQsIGN1cnJlbnRSZW5kZXJQYXNzRW5jb2Rlcik7XG5cblx0XHR0aGlzLmNhbnZhc1JlbmRlclRhcmdldC5lbmRSZW5kZXJQYXNzRW5jb2RlcigpO1xuXHR9XG5cdHByaXZhdGUgaW5pdFJlbmRlclRhcmdldChjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0Y29uc3QgY29sb3JBdHRhY2htZW50ID0gbmV3IEF0dGFjaG1lbnQoXG5cdFx0XHR7IHI6IDAuMCwgZzogMC4wLCBiOiAwLjAsIGE6IDAgfSxcblx0XHRcdHtcblx0XHRcdFx0dGV4dHVyZToge1xuXHRcdFx0XHRcdHRleHR1cmVWaWV3OiB1bmRlZmluZWRcblx0XHRcdFx0fSBhcyB1bmtub3duIGFzIFRleHR1cmVcblx0XHRcdH1cblx0XHQpO1xuXHRcdGNvbnN0IGRlcHRoVGV4dHVyZSA9IG5ldyBUZXh0dXJlKHtcblx0XHRcdHNpemU6IGNvbnRleHQucHJlc2VudGF0aW9uU2l6ZSxcblx0XHRcdGZvcm1hdDogVGV4dHVyZUZvcm1hdC5EZXB0aDI0UGx1cyxcblx0XHRcdHVzYWdlOiBUZXh0dXJlVXNhZ2UuUmVuZGVyQXR0YWNobWVudFxuXHRcdH0pO1xuXHRcdGNvbnN0IGRlcHRoQXR0YWNobWVudCA9IG5ldyBBdHRhY2htZW50KDEuMCwgeyB0ZXh0dXJlOiBkZXB0aFRleHR1cmUgfSk7XG5cdFx0dGhpcy5jYW52YXNSZW5kZXJUYXJnZXQgPSBuZXcgUmVuZGVyVGFyZ2V0KFwicmVuZGVyXCIsIFtjb2xvckF0dGFjaG1lbnRdLCBkZXB0aEF0dGFjaG1lbnQpO1xuXHR9XG59XG4iLCJpbXBvcnQgQ29udGV4dCBmcm9tIFwiLi4vcmVuZGVyL0NvbnRleHRcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9yZW5kZXIvVGV4dHVyZVwiO1xuaW1wb3J0IFBvc3RFZmZlY3QgZnJvbSBcIi4vUG9zdEVmZmVjdFwiO1xuaW1wb3J0IFJlc29sdmVGcmFtZSBmcm9tIFwiLi9SZXNvbHZlRnJhbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdEVmZmVjdENvbGxlY3Rpb24ge1xuXHRwcml2YXRlIF9wb3N0RWZmZWN0czogTWFwPHN0cmluZywgUG9zdEVmZmVjdD47XG5cdHB1YmxpYyBjdXJyZW50Q29sb3JUZXh0dXJlOiBUZXh0dXJlO1xuXHRwcml2YXRlIHJlc29sdmVGcmFtZTogUmVzb2x2ZUZyYW1lO1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLl9wb3N0RWZmZWN0cyA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLmN1cnJlbnRDb2xvclRleHR1cmUgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5yZXNvbHZlRnJhbWUgPSBuZXcgUmVzb2x2ZUZyYW1lKCk7XG5cdH1cblx0YWRkKHBvc3RFZmZlY3Q6IFBvc3RFZmZlY3QpIHtcblx0XHR0aGlzLl9wb3N0RWZmZWN0cy5zZXQocG9zdEVmZmVjdC5pZCwgcG9zdEVmZmVjdCk7XG5cdH1cblx0cmVtb3ZlKHBvc3RFZmZlY3Q6IFBvc3RFZmZlY3QpIHtcblx0XHR0aGlzLl9wb3N0RWZmZWN0cy5kZWxldGUocG9zdEVmZmVjdC5pZCk7XG5cdFx0cG9zdEVmZmVjdC5kZXN0cm95KCk7XG5cdH1cblx0cmVuZGVyKGNvbnRleHQ6IENvbnRleHQsIGNvbG9yVGV4dHVyZTogVGV4dHVyZSk6IHZvaWQge1xuXHRcdHRoaXMuY3VycmVudENvbG9yVGV4dHVyZSA9IGNvbG9yVGV4dHVyZTtcblx0XHR0aGlzLl9wb3N0RWZmZWN0cy5mb3JFYWNoKChwb3N0RWZmZWN0KSA9PiB7XG5cdFx0XHR0aGlzLmN1cnJlbnRDb2xvclRleHR1cmUgPSBwb3N0RWZmZWN0LnJlbmRlcihjb250ZXh0LCB0aGlzLmN1cnJlbnRDb2xvclRleHR1cmUpO1xuXHRcdH0pO1xuXHRcdHRoaXMucmVzb2x2ZUZyYW1lLnJlbmRlcihjb250ZXh0LCB0aGlzLmN1cnJlbnRDb2xvclRleHR1cmUpO1xuXHR9XG5cdHByaXZhdGUgcG9zdEVmZmVjdHNTb3J0KCkge1xuXHRcdC8vdGhpcy5fcG9zdEVmZmVjdHMuc29ydCgpXG5cdH1cbn1cbiIsImltcG9ydCBDb250ZXh0IGZyb20gXCIuLi9yZW5kZXIvQ29udGV4dFwiO1xuaW1wb3J0IHsgQmFzaWNQYXNzIH0gZnJvbSBcIi4uL3Bhc3MvQmFzaWNQYXNzXCI7XG5pbXBvcnQgSUJhc2VSZW5kZXJMaW5lIGZyb20gXCIuL0lCYXNlUmVuZGVyTGluZVwiO1xuaW1wb3J0IHsgRnJhbWVTdGF0ZSB9IGZyb20gXCIuLi9jb3JlL0ZyYW1lU3RhdGVcIjtcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcbmltcG9ydCB7IFNoYWRvd1Bhc3MgfSBmcm9tIFwiLi4vcGFzcy9TaGFkb3dQYXNzXCI7XG5pbXBvcnQgUG9zdEVmZmVjdENvbGxlY3Rpb24gZnJvbSBcIi4uL3Bvc3QtcHJvY2Vzcy9Qb3N0RWZmZWN0Q29sbGVjdGlvblwiO1xuaW1wb3J0IEJsb29tUG9zdEVmZmVjdCBmcm9tIFwiLi4vcG9zdC1wcm9jZXNzL0Jsb29tUG9zdEVmZmVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3J3YXJkUmVuZGVyTGluZSBpbXBsZW1lbnRzIElCYXNlUmVuZGVyTGluZSB7XG5cdHByaXZhdGUgYmFzaWNQYXNzOiBCYXNpY1Bhc3M7XG5cdHByaXZhdGUgcG9zdEVmZmVjdENvbGxlY3Rpb246IFBvc3RFZmZlY3RDb2xsZWN0aW9uO1xuXHRwcm90ZWN0ZWQgc2hhZG93UGFzczogU2hhZG93UGFzcztcblx0Y29uc3RydWN0b3IocHVibGljIGNvbnRleHQ6IENvbnRleHQpIHtcblx0XHR0aGlzLmJhc2ljUGFzcyA9IG5ldyBCYXNpY1Bhc3MoY29udGV4dCk7XG5cdFx0dGhpcy5zaGFkb3dQYXNzID0gbmV3IFNoYWRvd1Bhc3MoY29udGV4dCk7XG5cdFx0dGhpcy5wb3N0RWZmZWN0Q29sbGVjdGlvbiA9IG5ldyBQb3N0RWZmZWN0Q29sbGVjdGlvbigpO1xuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY29udGV4dC5wcmVzZW50YXRpb25TaXplO1xuXHRcdC8vIGNvbnN0IGJsb29tPW5ldyBCbG9vbVBvc3RFZmZlY3Qoe1xuXHRcdC8vIFx0d2lkdGgsXG5cdFx0Ly8gXHRoZWlnaHQsXG5cdFx0Ly8gXHRzdHJlbmd0aDowLjMsXG5cdFx0Ly8gXHRyYWRpdXM6MC4zLFxuXHRcdC8vIFx0dGhyZXNob2xkOjAuNVxuXHRcdC8vIH0pO1xuXHRcdC8vIHRoaXMucG9zdEVmZmVjdENvbGxlY3Rpb24uYWRkKGJsb29tKVxuXHR9XG5cdHJlbmRlcihmcmFtZVN0YXRlOiBGcmFtZVN0YXRlLCBjYW1lcmE/OiBDYW1lcmEpIHtcblx0XHQvLyB0aGlzLnNoYWRvd1Bhc3MuYmVmb3JlUmVuZGVyKCk7XG5cdFx0Ly8gdGhpcy5zaGFkb3dQYXNzLnJlbmRlcihmcmFtZVN0YXRlLCBjYW1lcmEpO1xuXHRcdC8vIHRoaXMuc2hhZG93UGFzcy5hZnRlclJlbmRlcigpO1xuXG5cdFx0dGhpcy5iYXNpY1Bhc3MuYmVmb3JlUmVuZGVyKCk7XG5cdFx0dGhpcy5iYXNpY1Bhc3MucmVuZGVyKGZyYW1lU3RhdGUsIGNhbWVyYSk7XG5cdFx0dGhpcy5iYXNpY1Bhc3MuYWZ0ZXJSZW5kZXIoKTtcblx0XHR0aGlzLnBvc3RFZmZlY3RDb2xsZWN0aW9uLnJlbmRlcihmcmFtZVN0YXRlLmNvbnRleHQsIHRoaXMuYmFzaWNQYXNzLmdldENvbG9yVGV4dHVyZSgwKSk7XG5cdH1cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLmJhc2ljUGFzcyA9IHVuZGVmaW5lZDtcblx0fVxufVxuIiwiaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XHJcblxyXG4vKlxyXG4gKiBAQXV0aG9yOiBqdW53ZWkuZ3UganVud2VpLmd1QGppZHVhdXRvLmNvbVxyXG4gKiBARGF0ZTogMjAyMy0wMS0xOCAxNzozNjowNlxyXG4gKiBATGFzdEVkaXRvcnM6IGp1bndlaS5ndSBqdW53ZWkuZ3VAamlkdWF1dG8uY29tXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjMtMDEtMTkgMTQ6MzY6MDVcclxuICogQEZpbGVQYXRoOiBcXEdFbmdpbmVcXHNyY1xcdXRpbHNcXHV0aWxzLnRzXHJcbiAqIEBEZXNjcmlwdGlvbjog6L+Z5piv6buY6K6k6K6+572uLOivt+iuvue9rmBjdXN0b21NYWRlYCwg5omT5byAa29yb0ZpbGVIZWFkZXLmn6XnnIvphY3nva4g6L+b6KGM6K6+572uOiBodHRwczovL2dpdGh1Yi5jb20vT0JLb3JvMS9rb3JvMUZpbGVIZWFkZXIvd2lraS8lRTklODUlOEQlRTclQkQlQUVcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkUGJyVGV4dHVyZShicmRmLCBkaWZmdXNlLCBzcGVjdWxhcikge1xyXG4gIGlmICghYnJkZikgcmV0dXJuO1xyXG4gIGNvbnN0IGJyZGZUZXh0dXJlID0gYXdhaXQgbG9hZFRleHR1cmUoYnJkZik7XHJcbiAgY29uc3QgZGlmZnVzZVRleHR1cmUgPSBhd2FpdCBsb2FkQ3ViZVRleHR1cmUoZGlmZnVzZSk7XHJcbiAgY29uc3Qgc3BlY3VsYXJUZXh0dXJlID0gYXdhaXQgbG9hZEN1YmVUZXh0dXJlKHNwZWN1bGFyKTtcclxuICByZXR1cm4ge1xyXG4gICAgYnJkZlRleHR1cmUsXHJcbiAgICBkaWZmdXNlVGV4dHVyZSxcclxuICAgIHNwZWN1bGFyVGV4dHVyZSxcclxuICB9O1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkQ3ViZVRleHR1cmUodXJscykge1xyXG4gIGNvbnN0IHByb21pc2VzID0gdXJscy5tYXAoKHNyYykgPT4ge1xyXG4gICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgIGltZy5zcmMgPSBzcmM7XHJcbiAgICByZXR1cm4gaW1nLmRlY29kZSgpLnRoZW4oKCkgPT4gY3JlYXRlSW1hZ2VCaXRtYXAoaW1nKSk7XHJcbiAgfSk7XHJcbiAgY29uc3QgaW1hZ2VzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gIGF3YWl0IFByb21pc2UuYWxsKGltYWdlcyk7XHJcbiAgY29uc3QgZGF0YSA9IGltYWdlcy5tYXAoKGltYWdlLCBpKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzb3VyY2U6IGltYWdlLFxyXG4gICAgICB3aWR0aDogaW1hZ2Uud2lkdGgsXHJcbiAgICAgIGhlaWdodDogaW1hZ2UuaGVpZ2h0LFxyXG4gICAgICBkZXB0aDogMSxcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMCxcclxuICAgICAgejogaSxcclxuICAgIH07XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG5ldyBUZXh0dXJlKHtcclxuICAgIHNpemU6IHtcclxuICAgICAgd2lkdGg6IGltYWdlc1swXS53aWR0aCxcclxuICAgICAgaGVpZ2h0OiBpbWFnZXNbMF0uaGVpZ2h0LFxyXG4gICAgICBkZXB0aDogNixcclxuICAgIH0sXHJcbiAgICBmb3JtYXQ6IFwicmdiYTh1bm9ybVwiLFxyXG4gICAgdXNhZ2U6XHJcbiAgICAgIEdQVVRleHR1cmVVc2FnZS5URVhUVVJFX0JJTkRJTkcgfFxyXG4gICAgICBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9EU1QgfFxyXG4gICAgICBHUFVUZXh0dXJlVXNhZ2UuUkVOREVSX0FUVEFDSE1FTlQsXHJcbiAgICBkYXRhLFxyXG4gICAgdmlld0Zvcm1hdHM6IFwiY3ViZVwiLFxyXG4gICAgbWlwTGV2ZWxDb3VudDogNixcclxuICAgIG5lZWRNaXBNYXA6IHRydWUsXHJcbiAgfSk7XHJcbn1cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRUZXh0dXJlKHVybCkge1xyXG4gIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgaW1nLnNyYyA9IHVybDtcclxuICBhd2FpdCBpbWcuZGVjb2RlKCk7XHJcbiAgY29uc3QgaW1hZ2VCaXRtYXAgPSBhd2FpdCBjcmVhdGVJbWFnZUJpdG1hcChpbWcpO1xyXG4gIGNvbnN0IGJhc2VUZXh0dXJlID0gbmV3IFRleHR1cmUoe1xyXG4gICAgc2l6ZTogeyB3aWR0aDogaW1hZ2VCaXRtYXAud2lkdGgsIGhlaWdodDogaW1hZ2VCaXRtYXAuaGVpZ2h0LCBkZXB0aDogMSB9LFxyXG4gICAgZGF0YToge1xyXG4gICAgICBzb3VyY2U6IGltYWdlQml0bWFwLFxyXG4gICAgfSxcclxuICAgIGZvcm1hdDogXCJyZ2JhOHVub3JtXCIsXHJcbiAgfSk7XHJcbiAgcmV0dXJuIGJhc2VUZXh0dXJlO1xyXG59XHJcbiIsImltcG9ydCBQZXJzcGVjdGl2ZUNhbWVyYSBmcm9tIFwiLi9jYW1lcmEvUGVyc3BlY3RpdmVDYW1lcmFcIjtcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCIuL2NvcmUvRXZlbnREaXNwYXRjaGVyXCI7XG5pbXBvcnQgeyBGcmFtZVN0YXRlIH0gZnJvbSBcIi4vY29yZS9GcmFtZVN0YXRlXCI7XG5pbXBvcnQgUHJpbWl0aXZlTWFuZ2VyIGZyb20gXCIuL2NvcmUvUHJpbWl0aXZlTWFuZ2VyXCI7XG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9yZW5kZXIvQ29udGV4dFwiO1xuaW1wb3J0IEZvcndhcmRSZW5kZXJMaW5lIGZyb20gXCIuL3JlbmRlcnBpcGVsaW5lL0ZvcndhcmRSZW5kZXJMaW5lXCI7XG5pbXBvcnQgSUJhc2VSZW5kZXJMaW5lIGZyb20gXCIuL3JlbmRlcnBpcGVsaW5lL0lCYXNlUmVuZGVyTGluZVwiO1xuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi91dGlscy9kZWZhdWx0VmFsdWVcIjtcbmltcG9ydCB7IGxvYWRQYnJUZXh0dXJlIH0gZnJvbSBcIi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB0ZXh0dXJlQ2FjaGUgZnJvbSBcIi4vY29yZS9UZXh0dXJlQ2FjaGVcIjtcblxuZXhwb3J0IGNsYXNzIFNjZW5lIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblx0cHJpbWl0aXZlTWFuZ2VyOiBQcmltaXRpdmVNYW5nZXI7XG5cdGNhbWVyYTogUGVyc3BlY3RpdmVDYW1lcmE7XG5cdGNvbnRleHQ6IENvbnRleHQ7XG5cdHJlcXVlc3RBZGFwdGVyOiB7fTtcblx0ZGV2aWNlRGVzY3JpcHRvcjoge307XG5cdHByZXNlbnRhdGlvbkNvbnRleHREZXNjcmlwdG9yOiB7fTtcblx0Y29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcblx0ZnJhbWVTdGF0ZTogRnJhbWVTdGF0ZTtcblx0Y3VycmVudFJlbmRlclBpcGVsaW5lOiBJQmFzZVJlbmRlckxpbmU7XG5cdHZpZXdwb3J0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9O1xuXHRwcml2YXRlIHJlYWR5OiBib29sZWFuO1xuXHRwcml2YXRlIGJyZGZVcmw6IHN0cmluZztcblx0cHJpdmF0ZSBzcGVjdWxhckVudlVybHM6IEFycmF5PHN0cmluZz47XG5cdHByaXZhdGUgZGlmZnVzZUVudlVybHM6IEFycmF5PHN0cmluZz47XG5cdHByaXZhdGUgaW5pdGVkOiBib29sZWFuO1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLmNvbnRhaW5lciA9XG5cdFx0XHRvcHRpb25zLmNvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxEaXZFbGVtZW50XG5cdFx0XHRcdD8gb3B0aW9ucy5jb250YWluZXJcblx0XHRcdFx0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvcHRpb25zLmNvbnRhaW5lcik7XG5cdFx0dGhpcy5wcmltaXRpdmVNYW5nZXIgPSBuZXcgUHJpbWl0aXZlTWFuZ2VyKCk7XG5cdFx0dGhpcy5jb250ZXh0ID0gbmV3IENvbnRleHQoe1xuXHRcdFx0Y2FudmFzOiBudWxsLFxuXHRcdFx0Y29udGFpbmVyOiB0aGlzLmNvbnRhaW5lcixcblx0XHRcdHBpeGVsUmF0aW86IDFcblx0XHR9KTtcblx0XHR0aGlzLmJyZGZVcmwgPSBkZWZhdWx0VmFsdWUob3B0aW9ucy5icmRmVXJsLCB1bmRlZmluZWQpO1xuXHRcdHRoaXMuc3BlY3VsYXJFbnZVcmxzID0gZGVmYXVsdFZhbHVlKG9wdGlvbnMuc3BlY3VsYXJFbnZVcmxzLCBbXSk7XG5cdFx0dGhpcy5kaWZmdXNlRW52VXJscyA9IGRlZmF1bHRWYWx1ZShvcHRpb25zLmRpZmZ1c2VFbnZVcmxzLCBbXSk7XG5cdFx0dGhpcy5yZXF1ZXN0QWRhcHRlciA9IG9wdGlvbnMucmVxdWVzdEFkYXB0ZXIgfHwge307XG5cdFx0dGhpcy5kZXZpY2VEZXNjcmlwdG9yID0gb3B0aW9ucy5kZXZpY2VEZXNjcmlwdG9yIHx8IHt9O1xuXHRcdHRoaXMucHJlc2VudGF0aW9uQ29udGV4dERlc2NyaXB0b3IgPSBvcHRpb25zLnByZXNlbnRhdGlvbkNvbnRleHREZXNjcmlwdG9yO1xuXHRcdHRoaXMucmVhZHkgPSBmYWxzZTtcblx0XHR0aGlzLmluaXRlZCA9IGZhbHNlO1xuXHRcdC8vdGhpcy5pbml0KCk7XG5cdH1cblx0cHJpdmF0ZSBhc3luYyBpbml0KCkge1xuXHRcdGF3YWl0IHRoaXMuY29udGV4dC5pbml0KHRoaXMucmVxdWVzdEFkYXB0ZXIsIHRoaXMuZGV2aWNlRGVzY3JpcHRvciwgdGhpcy5wcmVzZW50YXRpb25Db250ZXh0RGVzY3JpcHRvcik7XG5cdFx0dGhpcy5jdXJyZW50UmVuZGVyUGlwZWxpbmUgPSBuZXcgRm9yd2FyZFJlbmRlckxpbmUodGhpcy5jb250ZXh0KTtcblx0XHR0aGlzLmZyYW1lU3RhdGUgPSBuZXcgRnJhbWVTdGF0ZSh0aGlzLmNvbnRleHQpO1xuXHRcdHRoaXMudmlld3BvcnQgPSB7XG5cdFx0XHR4OiAwLFxuXHRcdFx0eTogMCxcblx0XHRcdHdpZHRoOiB0aGlzLmNvbnRleHQucHJlc2VudGF0aW9uU2l6ZS53aWR0aCxcblx0XHRcdGhlaWdodDogdGhpcy5jb250ZXh0LnByZXNlbnRhdGlvblNpemUuaGVpZ2h0XG5cdFx0fTtcblx0XHRpZiAodGhpcy5icmRmVXJsKSB7XG5cdFx0XHRjb25zdCB7IGJyZGZUZXh0dXJlLCBkaWZmdXNlVGV4dHVyZSwgc3BlY3VsYXJUZXh0dXJlIH0gPSBhd2FpdCBsb2FkUGJyVGV4dHVyZShcblx0XHRcdFx0dGhpcy5icmRmVXJsLFxuXHRcdFx0XHR0aGlzLmRpZmZ1c2VFbnZVcmxzLFxuXHRcdFx0XHR0aGlzLnNwZWN1bGFyRW52VXJsc1xuXHRcdFx0KTtcblx0XHRcdHRleHR1cmVDYWNoZS5hZGRUZXh0dXJlKFwiYnJkZlwiLCBicmRmVGV4dHVyZSk7XG5cdFx0XHR0ZXh0dXJlQ2FjaGUuYWRkVGV4dHVyZShcImRpZmZ1c2VcIiwgZGlmZnVzZVRleHR1cmUpO1xuXHRcdFx0dGV4dHVyZUNhY2hlLmFkZFRleHR1cmUoXCJzcGVjdWxhclwiLCBzcGVjdWxhclRleHR1cmUpO1xuXHRcdH1cblx0XHR0aGlzLnJlYWR5ID0gdHJ1ZTtcblx0fVxuXHRhZGQoaW5zdGFuY2UpIHtcblx0XHRpZiAoaW5zdGFuY2UudHlwZSA9PT0gXCJwcmltaXRpdmVcIiAmJiAhdGhpcy5wcmltaXRpdmVNYW5nZXIuY29udGFpbnMoaW5zdGFuY2UpKSB7XG5cdFx0XHR0aGlzLnByaW1pdGl2ZU1hbmdlci5hZGQoaW5zdGFuY2UpO1xuXHRcdH1cblx0fVxuXHRhZGRQb3N0RWZmZWN0KCkge31cblx0YWRkTGlnaHQobGlnaHQpIHtcblx0XHR0aGlzLmNvbnRleHQubGlnaHRNYW5nZXIuYWRkKGxpZ2h0KTtcblx0fVxuXHRzZXRDYW1lcmEoY2FtZXJhKSB7XG5cdFx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cdH1cblx0cmVtb3ZlKGluc3RhbmNlKSB7XG5cdFx0aWYgKGluc3RhbmNlLnR5cGUgPT09IFwicHJpbWl0aXZlXCIgJiYgIXRoaXMucHJpbWl0aXZlTWFuZ2VyLmNvbnRhaW5zKGluc3RhbmNlKSkge1xuXHRcdFx0dGhpcy5wcmltaXRpdmVNYW5nZXIucmVtb3ZlKGluc3RhbmNlKTtcblx0XHR9XG5cdH1cblx0Z2V0UHJpbWl0aXZlQnlJZCgpIHt9XG5cdGFzeW5jIHJlbmRlcigpIHtcblx0XHRpZiAoIXRoaXMuaW5pdGVkKSB7XG5cdFx0XHR0aGlzLmluaXRlZCA9IHRydWU7XG5cdFx0XHRhd2FpdCB0aGlzLmluaXQoKTtcblx0XHR9XG5cdFx0dGhpcy51cGRhdGUoKTtcblx0fVxuXHRwcml2YXRlIHVwZGF0ZSgpIHtcblx0XHRpZiAoIXRoaXMucmVhZHkpIHJldHVybjtcblx0XHQvL+mHiuaUvue6ueeQhlxuXHRcdHRleHR1cmVDYWNoZS5yZWxlYXNlZFRleHR1cmVzKCk7XG5cdFx0Ly/mm7TmlrDnm7jmnLpcblx0XHR0aGlzLmZyYW1lU3RhdGUudmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0O1xuXHRcdHRoaXMuZnJhbWVTdGF0ZS51cGRhdGUodGhpcy5jYW1lcmEpO1xuXHRcdC8v5pu05paw54Gv5YWJXG5cdFx0dGhpcy5jb250ZXh0LmxpZ2h0TWFuZ2VyLnVwZGF0ZSh0aGlzLmZyYW1lU3RhdGUsIHRoaXMuY2FtZXJhKTtcblx0XHQvL3VwZGF0ZSBwcmltaXRpdmUgYW5kIHNlbGVjdFxuXHRcdHRoaXMucHJpbWl0aXZlTWFuZ2VyLnVwZGF0ZSh0aGlzLmZyYW1lU3RhdGUsIHRoaXMuY2FtZXJhKTtcblx0XHQvL3NlbGN0IHJlbmRlclBpcGVsaW5lXG5cdFx0dGhpcy5jdXJyZW50UmVuZGVyUGlwZWxpbmUucmVuZGVyKHRoaXMuZnJhbWVTdGF0ZSwgdGhpcy5jYW1lcmEpO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBUZXh0dXJlRm9ybWF0IH0gZnJvbSBcIi4uL2NvcmUvV2ViR1BVQ29uc3RhbnRcIjtcbmltcG9ydCBHZW9tZXRyeSBmcm9tIFwiLi4vZ2VvbWV0cnkvR2VvbWV0cnlcIjtcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi4vbWVzaC9NZXNoXCI7XG5pbXBvcnQgeyBGbG9hdDMyQXR0cmlidXRlIH0gZnJvbSBcIi4uL3JlbmRlci9BdHRyaWJ1dGVcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuLi9yZW5kZXIvQ29udGV4dFwiO1xuaW1wb3J0IHsgUHJpbWl0aXZlLCBSZW5kZXJTdGF0ZSwgVGFyZ2V0IH0gZnJvbSBcIi4uL3JlbmRlci9SZW5kZXJTdGF0ZVwiO1xuaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tIFwiLi4vcmVuZGVyL1JlbmRlclRhcmdldFwiO1xuaW1wb3J0IFNhbXBsZXIgZnJvbSBcIi4uL3JlbmRlci9TYW1wbGVyXCI7XG5pbXBvcnQgVGV4dHVyZSBmcm9tIFwiLi4vcmVuZGVyL1RleHR1cmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdEVmZmVjdCB7XG5cdHdpZHRoOiBudW1iZXI7XG5cblx0aGVpZ2h0OiBudW1iZXI7XG5cblx0ZGVmYXVsdFNhbXBsZXI6IFNhbXBsZXI7XG5cblx0cmVzb2x2ZVRvQ2FudmFzOiBib29sZWFuO1xuXG5cdGN1cnJlbnRSZW5kZXJUYXJnZXQ6IFJlbmRlclRhcmdldDtcblxuXHRmdWxsU2NyZWVuUXVhZDogTWVzaDtcblxuXHRyZW5kZXJTdGF0ZTogUmVuZGVyU3RhdGU7XG5cblx0aWQ6IHN0cmluZztcblxuXHRwcmlvcml0eTogbnVtYmVyO1xuXG5cdGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBpZDogc3RyaW5nKSB7XG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdHRoaXMuaW5pdERlZmF1bHRQYXJtcygpO1xuXHRcdHRoaXMuaWQgPSBpZDtcblx0XHR0aGlzLnByaW9yaXR5ID0gMDtcblx0fVxuXHRzZXRTaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBkZXB0aD86IG51bWJlcikge31cblx0cmVuZGVyKGNvbnRleHQ6IENvbnRleHQsIGNvbG9yVGV4dHVyZTogVGV4dHVyZSk6IFRleHR1cmUge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdGRlc3Ryb3koKSB7fVxuXHRwcm90ZWN0ZWQgcmVuZGVyTWVzaChjb250ZXh0OiBDb250ZXh0KSB7XG5cdFx0dGhpcy5mdWxsU2NyZWVuUXVhZC5tYXRlcmlhbC5kaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5mdWxsU2NyZWVuUXVhZC5tYXRlcmlhbC51cGRhdGUoKTtcblx0XHRjb25zdCBkcmF3Q29tYW5kID0gdGhpcy5mdWxsU2NyZWVuUXVhZC5nZXREcmF3Q29tbWFuZCgpO1xuXHRcdGNvbnN0IGN1cnJlbnRSZW5kZXJQYXNzRW5jb2RlciA9IHRoaXMuY3VycmVudFJlbmRlclRhcmdldC5iZWdpblJlbmRlclBhc3NFbmNvZGVyKGNvbnRleHQpO1xuXHRcdGNvbnRleHQucmVuZGVyKGRyYXdDb21hbmQsIGN1cnJlbnRSZW5kZXJQYXNzRW5jb2Rlcik7XG5cdFx0dGhpcy5jdXJyZW50UmVuZGVyVGFyZ2V0LmVuZFJlbmRlclBhc3NFbmNvZGVyKCk7XG5cdH1cblx0cHJpdmF0ZSBpbml0RGVmYXVsdFBhcm1zKCkge1xuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KHt9KTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXG5cdFx0XHRuZXcgRmxvYXQzMkF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIFstMS4wLCAxLjAsIC0xLjAsIC0xLjAsIDEuMCwgLTEuMCwgMS4wLCAtMS4wLCAxLjAsIDEuMCwgLTEuMCwgMS4wXSwgMilcblx0XHQpO1xuXHRcdGdlb21ldHJ5LmNvdW50ID0gNjtcblx0XHQvL3JzXG5cdFx0Y29uc3QgcHJpbWl0aXZlID0gbmV3IFByaW1pdGl2ZSgpO1xuXHRcdGNvbnN0IHRhcmdldCA9IG5ldyBUYXJnZXQoKTtcblx0XHQvLyB0YXJnZXQuZm9ybWF0PVRleHR1cmVGb3JtYXQuUkdCQThVbm9ybVxuXHRcdGNvbnN0IHJlbmRlclN0YXRlID0gbmV3IFJlbmRlclN0YXRlKCk7XG5cdFx0cmVuZGVyU3RhdGUucHJpbWl0aXZlID0gcHJpbWl0aXZlO1xuXHRcdHJlbmRlclN0YXRlLnRhcmdldHMgPSBbdGFyZ2V0XTtcblx0XHR0aGlzLnJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGU7XG5cdFx0dGhpcy5mdWxsU2NyZWVuUXVhZCA9IG5ldyBNZXNoKGdlb21ldHJ5KTtcblxuXHRcdHRoaXMuZGVmYXVsdFNhbXBsZXIgPSBuZXcgU2FtcGxlcigpO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBUZXh0dXJlRm9ybWF0LCBUZXh0dXJlVXNhZ2UgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IHsgVW5pZm9ybXMgfSBmcm9tIFwiLi4vY29yZS9XZWJHUFVUeXBlc1wiO1xuaW1wb3J0IFNoYWRlck1hdGVyaWFsIGZyb20gXCIuLi9tYXRlcmlhbC9TaGFkZXJNYXRlcmlhbFwiO1xuaW1wb3J0IENvbG9yIGZyb20gXCIuLi9tYXRoL0NvbG9yXCI7XG5pbXBvcnQgVmVjdG9yMiBmcm9tIFwiLi4vbWF0aC9WZWN0b3IyXCI7XG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgQXR0YWNobWVudCBmcm9tIFwiLi4vcmVuZGVyL0F0dGFjaG1lbnRcIjtcbmltcG9ydCBDb250ZXh0IGZyb20gXCIuLi9yZW5kZXIvQ29udGV4dFwiO1xuaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tIFwiLi4vcmVuZGVyL1JlbmRlclRhcmdldFwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uL3JlbmRlci9UZXh0dXJlXCI7XG5pbXBvcnQgZ2V0VmVydEZyYWcgZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJzXCI7XG5pbXBvcnQgUG9zdEVmZmVjdCBmcm9tIFwiLi9Qb3N0RWZmZWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJsb29tUG9zdEVmZmVjdCBleHRlbmRzIFBvc3RFZmZlY3Qge1xuXHRzdGF0aWMgQmx1ckRpcmVjdGlvblggPSBuZXcgVmVjdG9yMigxLjAsIDAuMCk7XG5cdHN0YXRpYyBCbHVyRGlyZWN0aW9uWSA9IG5ldyBWZWN0b3IyKDAuMCwgMS4wKTtcblx0c3RyZW5ndGg6IG51bWJlcjtcblx0cmFkaXVzOiBudW1iZXI7XG5cdHRocmVzaG9sZDogbnVtYmVyO1xuXHRyZW5kZXJUYXJnZXRzSG9yaXpvbnRhbDogUmVuZGVyVGFyZ2V0W107XG5cdHJlbmRlclRhcmdldHNWZXJ0aWNhbDogUmVuZGVyVGFyZ2V0W107XG5cdG5NaXBzOiBudW1iZXI7XG5cdHJlbmRlclRhcmdldEJyaWdodDogUmVuZGVyVGFyZ2V0O1xuXHRtYXRlcmlhbEhpZ2hQYXNzRmlsdGVyOiBTaGFkZXJNYXRlcmlhbDtcblx0aGlnaFBhc3NVbmlmb3JtczogVW5pZm9ybXM7XG5cdGNvbXBvc2l0ZU1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbDtcblx0c2VwYXJhYmxlQmx1ck1hdGVyaWFsczogU2hhZGVyTWF0ZXJpYWxbXTtcblx0c2VwYXJhYmxlQmx1cllNYXRlcmlhbHM6IFNoYWRlck1hdGVyaWFsW107XG5cdGJsZW5kVW5pZm9ybXM6IFVuaWZvcm1zO1xuXHRibGVuZE1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbDtcblx0YmxlbmRUYXJnZXQ6IFJlbmRlclRhcmdldDtcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zOiBCbG9vbVBvc3RFZmZlY3RQcm9wcykge1xuXHRcdHN1cGVyKG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0LCBcImJsb29tXCIpO1xuXHRcdHRoaXMuc3RyZW5ndGggPSBvcHRpb25zLnN0cmVuZ3RoO1xuXHRcdHRoaXMucmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG5cdFx0dGhpcy50aHJlc2hvbGQgPSBvcHRpb25zLnRocmVzaG9sZDtcblx0XHR0aGlzLmluaXQoKTtcblx0fVxuXHRzZXRTaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBkZXB0aD86IG51bWJlcik6IHZvaWQge31cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLnJlbmRlclRhcmdldEJyaWdodC5kZXN0cm95KCk7XG5cdH1cblx0cmVuZGVyKGNvbnRleHQ6IENvbnRleHQsIGNvbG9yVGV4dHVyZTogVGV4dHVyZSk6IFRleHR1cmUge1xuXHRcdC8vIDEuIEV4dHJhY3QgQnJpZ2h0IEFyZWFzXG5cdFx0dGhpcy5jdXJyZW50UmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXRCcmlnaHQ7XG5cdFx0dGhpcy5oaWdoUGFzc1VuaWZvcm1zLnREaWZmdXNlLnZhbHVlID0gY29sb3JUZXh0dXJlO1xuXHRcdHRoaXMuZnVsbFNjcmVlblF1YWQubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsSGlnaFBhc3NGaWx0ZXI7XG5cdFx0dGhpcy5yZW5kZXJNZXNoKGNvbnRleHQpO1xuXHRcdC8vIDIuIEJsdXIgQWxsIHRoZSBtaXBzIHByb2dyZXNzaXZlbHlcblx0XHRsZXQgaW5wdXRSZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldEJyaWdodDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubk1pcHM7IGkrKykge1xuXHRcdFx0dGhpcy5mdWxsU2NyZWVuUXVhZC5tYXRlcmlhbCA9IHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsc1tpXTtcblxuXHRcdFx0dGhpcy5zZXBhcmFibGVCbHVyTWF0ZXJpYWxzW2ldLnVuaWZvcm1zLnREaWZmdXNlLnZhbHVlID0gaW5wdXRSZW5kZXJUYXJnZXQuZ2V0Q29sb3JUZXh0dXJlKCk7XG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbHNbaV0udW5pZm9ybXMuZGlyZWN0aW9uLnZhbHVlID0gQmxvb21Qb3N0RWZmZWN0LkJsdXJEaXJlY3Rpb25YO1xuXHRcdFx0dGhpcy5jdXJyZW50UmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXRzSG9yaXpvbnRhbFtpXTtcblxuXHRcdFx0dGhpcy5yZW5kZXJNZXNoKGNvbnRleHQpO1xuXHRcdFx0dGhpcy5mdWxsU2NyZWVuUXVhZC5tYXRlcmlhbCA9IHRoaXMuc2VwYXJhYmxlQmx1cllNYXRlcmlhbHNbaV07XG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJZTWF0ZXJpYWxzW2ldLnVuaWZvcm1zLnREaWZmdXNlLnZhbHVlID0gdGhpcy5yZW5kZXJUYXJnZXRzSG9yaXpvbnRhbFtpXS5nZXRDb2xvclRleHR1cmUoKTtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1cllNYXRlcmlhbHNbaV0udW5pZm9ybXMuZGlyZWN0aW9uLnZhbHVlID0gQmxvb21Qb3N0RWZmZWN0LkJsdXJEaXJlY3Rpb25ZO1xuXHRcdFx0dGhpcy5jdXJyZW50UmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbaV07XG5cblx0XHRcdHRoaXMucmVuZGVyTWVzaChjb250ZXh0KTtcblxuXHRcdFx0aW5wdXRSZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFtpXTtcblx0XHR9XG5cdFx0Ly8gQ29tcG9zaXRlIEFsbCB0aGUgbWlwc1xuXHRcdHRoaXMuZnVsbFNjcmVlblF1YWQubWF0ZXJpYWwgPSB0aGlzLmNvbXBvc2l0ZU1hdGVyaWFsO1xuXHRcdHRoaXMuY3VycmVudFJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyVGFyZ2V0c0hvcml6b250YWxbMF07XG5cdFx0dGhpcy5yZW5kZXJNZXNoKGNvbnRleHQpO1xuXHRcdC8vYmxlbmRcblx0XHR0aGlzLmJsZW5kVW5pZm9ybXMuYmFzZUNvbG9yVGV4dHVyZS52YWx1ZSA9IGNvbG9yVGV4dHVyZTtcblx0XHR0aGlzLmZ1bGxTY3JlZW5RdWFkLm1hdGVyaWFsID0gdGhpcy5ibGVuZE1hdGVyaWFsO1xuXHRcdHRoaXMuY3VycmVudFJlbmRlclRhcmdldCA9IHRoaXMuYmxlbmRUYXJnZXQ7XG5cdFx0dGhpcy5yZW5kZXJNZXNoKGNvbnRleHQpO1xuXHRcdHJldHVybiB0aGlzLmN1cnJlbnRSZW5kZXJUYXJnZXQuZ2V0Q29sb3JUZXh0dXJlKCk7XG5cdH1cblx0cHJpdmF0ZSBpbml0KCkge1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0c0hvcml6b250YWwgPSBbXTtcblx0XHR0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbCA9IFtdO1xuXHRcdHRoaXMubk1pcHMgPSA1O1xuXHRcdGxldCByZXN4ID0gTWF0aC5yb3VuZCh0aGlzLndpZHRoIC8gMik7XG5cdFx0bGV0IHJlc3kgPSBNYXRoLnJvdW5kKHRoaXMuaGVpZ2h0IC8gMik7XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldEJyaWdodCA9IG5ldyBSZW5kZXJUYXJnZXQoXCJyZW5kZXJcIiwgW3RoaXMuY3JlYXRlQ29sb3JBdHRhY2htZW50KHJlc3gsIHJlc3kpXSk7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubk1pcHM7IGkrKykge1xuXHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0SG9yaXpvbmFsID0gbmV3IFJlbmRlclRhcmdldChcInJlbmRlclwiLCBbdGhpcy5jcmVhdGVDb2xvckF0dGFjaG1lbnQocmVzeCwgcmVzeSldKTtcblx0XHRcdHRoaXMucmVuZGVyVGFyZ2V0c0hvcml6b250YWwucHVzaChyZW5kZXJUYXJnZXRIb3Jpem9uYWwpO1xuXHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0VmVydGljYWwgPSBuZXcgUmVuZGVyVGFyZ2V0KFwicmVuZGVyXCIsIFt0aGlzLmNyZWF0ZUNvbG9yQXR0YWNobWVudChyZXN4LCByZXN5KV0pO1xuXHRcdFx0dGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWwucHVzaChyZW5kZXJUYXJnZXRWZXJ0aWNhbCk7XG5cdFx0XHRyZXN4ID0gTWF0aC5yb3VuZChyZXN4IC8gMik7XG5cdFx0XHRyZXN5ID0gTWF0aC5yb3VuZChyZXN5IC8gMik7XG5cdFx0fVxuXHRcdC8vIGx1bWlub3NpdHkgaGlnaCBwYXNzIG1hdGVyaWFsXG5cdFx0dGhpcy5oaWdoUGFzc1VuaWZvcm1zID0ge1xuXHRcdFx0dERpZmZ1c2U6IHsgdHlwZTogXCJ0ZXh0dXJlXCIsIHZhbHVlOiBudWxsIH0sXG5cdFx0XHR0U2FtcGxlcjoge1xuXHRcdFx0XHR0eXBlOiBcInNhbXBsZXJcIixcblx0XHRcdFx0dmFsdWU6IHRoaXMuZGVmYXVsdFNhbXBsZXJcblx0XHRcdH0sXG5cdFx0XHRsdW1pbm9zaXR5VGhyZXNob2w6IHsgdHlwZTogXCJmbG9hdFwiLCB2YWx1ZTogdGhpcy50aHJlc2hvbGQgfSxcblx0XHRcdHNtb290aFdpZHRoOiB7IHR5cGU6IFwiZmxvYXRcIiwgdmFsdWU6IDAuMDEgfSxcblx0XHRcdGRlZmF1bHRDb2xvcjogeyB0eXBlOiBcImNvbG9yXCIsIHZhbHVlOiBuZXcgQ29sb3IoMC4wLCAwLCAwKSB9LFxuXHRcdFx0ZGVmYXVsdE9wYWNpdHk6IHsgdHlwZTogXCJmbG9hdFwiLCB2YWx1ZTogMS4wIH1cblx0XHR9O1xuXHRcdGNvbnN0IHNoYWRlciA9IGdldFZlcnRGcmFnKFwibHVtaW5vc2l0eUhpZ2hcIiwge30pO1xuXHRcdHRoaXMubWF0ZXJpYWxIaWdoUGFzc0ZpbHRlciA9IG5ldyBTaGFkZXJNYXRlcmlhbCh7XG5cdFx0XHR0eXBlOiBcImJsb29tXCIsXG5cdFx0XHR1bmlmb3JtczogdGhpcy5oaWdoUGFzc1VuaWZvcm1zLFxuXHRcdFx0dmVydDogc2hhZGVyLnZlcnQsXG5cdFx0XHRmcmFnOiBzaGFkZXIuZnJhZ1xuXHRcdH0pO1xuXHRcdC8vIEdhdXNzaWFuIEJsdXIgTWF0ZXJpYWxzXG5cdFx0dGhpcy5tYXRlcmlhbEhpZ2hQYXNzRmlsdGVyLnJlbmRlclN0YXRlID0gdGhpcy5yZW5kZXJTdGF0ZTtcblx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbHMgPSBbXTtcblx0XHR0aGlzLnNlcGFyYWJsZUJsdXJZTWF0ZXJpYWxzID0gW107XG5cdFx0Y29uc3Qga2VybmVsU2l6ZUFycmF5ID0gWzMsIDUsIDcsIDksIDExXTtcblx0XHRyZXN4ID0gTWF0aC5yb3VuZCh0aGlzLndpZHRoIC8gMik7XG5cdFx0cmVzeSA9IE1hdGgucm91bmQodGhpcy5oZWlnaHQgLyAyKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uTWlwczsgaSsrKSB7XG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbHMucHVzaCh0aGlzLmdldFNlcGVyYWJsZUJsdXJNYXRlcmlhbChrZXJuZWxTaXplQXJyYXlbaV0sIFwiQmx1ck1hdGVyaWFsXCIgKyBpKSk7XG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJZTWF0ZXJpYWxzLnB1c2godGhpcy5nZXRTZXBlcmFibGVCbHVyTWF0ZXJpYWwoa2VybmVsU2l6ZUFycmF5W2ldLCBcIkJsdXJNYXRlcmlhbFlcIiArIGkpKTtcblx0XHRcdHJlc3ggPSBNYXRoLnJvdW5kKHJlc3ggLyAyKTtcblxuXHRcdFx0cmVzeSA9IE1hdGgucm91bmQocmVzeSAvIDIpO1xuXHRcdH1cblx0XHQvLyBDb21wb3NpdGUgbWF0ZXJpYWxcblx0XHR0aGlzLmNvbXBvc2l0ZU1hdGVyaWFsID0gdGhpcy5nZXRDb21wb3NpdGVNYXRlcmlhbCh0aGlzLm5NaXBzLCBcImNvbXBvc2l0ZU1hdGVyaWFsXCIpO1xuXHRcdHRoaXMuY29tcG9zaXRlTWF0ZXJpYWwucmVuZGVyU3RhdGUgPSB0aGlzLnJlbmRlclN0YXRlO1xuXHRcdHRoaXMuYmxlbmRVbmlmb3JtcyA9IHtcblx0XHRcdHREaWZmdXNlOiB7IHR5cGU6IFwidGV4dHVyZVwiLCB2YWx1ZTogdGhpcy5yZW5kZXJUYXJnZXRzSG9yaXpvbnRhbFswXS5nZXRDb2xvclRleHR1cmUoKSB9LFxuXHRcdFx0YmFzZUNvbG9yVGV4dHVyZTogeyB0eXBlOiBcInRleHR1cmVcIiwgdmFsdWU6IG51bGwgfSxcblx0XHRcdHRTYW1wbGVyOiB7XG5cdFx0XHRcdHR5cGU6IFwic2FtcGxlclwiLFxuXHRcdFx0XHR2YWx1ZTogdGhpcy5kZWZhdWx0U2FtcGxlclxuXHRcdFx0fVxuXHRcdH07XG5cdFx0Y29uc3QgYmxlbmRTaGFkZXIgPSBnZXRWZXJ0RnJhZyhcImJsZW5kXCIsIHt9KTtcblx0XHR0aGlzLmJsZW5kTWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoe1xuXHRcdFx0dHlwZTogXCJwb3N0QmxlbmRcIixcblx0XHRcdHVuaWZvcm1zOiB0aGlzLmJsZW5kVW5pZm9ybXMsXG5cdFx0XHR2ZXJ0OiBibGVuZFNoYWRlci52ZXJ0LFxuXHRcdFx0ZnJhZzogYmxlbmRTaGFkZXIuZnJhZ1xuXHRcdH0pO1xuXHRcdHRoaXMuYmxlbmRNYXRlcmlhbC5yZW5kZXJTdGF0ZSA9IHRoaXMucmVuZGVyU3RhdGU7XG5cdFx0dGhpcy5ibGVuZFRhcmdldCA9IG5ldyBSZW5kZXJUYXJnZXQoXCJyZW5kZXJcIiwgW3RoaXMuY3JlYXRlQ29sb3JBdHRhY2htZW50KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KV0pO1xuXHR9XG5cdHByaXZhdGUgY3JlYXRlQ29sb3JBdHRhY2htZW50KHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogQXR0YWNobWVudCB7XG5cdFx0Y29uc3QgY29sb3JUZXh0dXJlID0gbmV3IFRleHR1cmUoe1xuXHRcdFx0c2l6ZTogeyB3aWR0aCwgaGVpZ2h0LCBkZXB0aDogMSB9LFxuXHRcdFx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0LkJHUkE4VW5vcm0sXG5cdFx0XHR1c2FnZTogVGV4dHVyZVVzYWdlLlJlbmRlckF0dGFjaG1lbnQgfCBUZXh0dXJlVXNhZ2UuVGV4dHVyZUJpbmRpbmdcblx0XHR9KTtcblx0XHRjb25zdCBjb2xvckF0dGFjaG1lbnQgPSBuZXcgQXR0YWNobWVudCh7IHI6IDAuMCwgZzogMC4wLCBiOiAwLjAsIGE6IDAuMCB9LCB7IHRleHR1cmU6IGNvbG9yVGV4dHVyZSB9KTtcblx0XHRyZXR1cm4gY29sb3JBdHRhY2htZW50O1xuXHR9XG5cdHByaXZhdGUgZ2V0Q29tcG9zaXRlTWF0ZXJpYWwobk1pcHM6IG51bWJlciwgdHlwZSk6IFNoYWRlck1hdGVyaWFsIHtcblx0XHQvL0B0cy1ub2NoZWNrXG5cdFx0cmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCh7XG5cdFx0XHR0eXBlLFxuXHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0Ymx1clRleHR1cmUxOiB7IHR5cGU6IFwidGV4dHVyZVwiLCB2YWx1ZTogdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbMF0uZ2V0Q29sb3JUZXh0dXJlKCkgfSxcblx0XHRcdFx0Ymx1clRleHR1cmUyOiB7IHR5cGU6IFwidGV4dHVyZVwiLCB2YWx1ZTogdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbMV0uZ2V0Q29sb3JUZXh0dXJlKCkgfSxcblx0XHRcdFx0Ymx1clRleHR1cmUzOiB7IHR5cGU6IFwidGV4dHVyZVwiLCB2YWx1ZTogdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbMl0uZ2V0Q29sb3JUZXh0dXJlKCkgfSxcblx0XHRcdFx0Ymx1clRleHR1cmU0OiB7IHR5cGU6IFwidGV4dHVyZVwiLCB2YWx1ZTogdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbM10uZ2V0Q29sb3JUZXh0dXJlKCkgfSxcblx0XHRcdFx0Ymx1clRleHR1cmU1OiB7IHR5cGU6IFwidGV4dHVyZVwiLCB2YWx1ZTogdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbNF0uZ2V0Q29sb3JUZXh0dXJlKCkgfSxcblx0XHRcdFx0dFNhbXBsZXI6IHtcblx0XHRcdFx0XHR0eXBlOiBcInNhbXBsZXJcIixcblx0XHRcdFx0XHR2YWx1ZTogdGhpcy5kZWZhdWx0U2FtcGxlclxuXHRcdFx0XHR9LFxuXHRcdFx0XHRibG9vbVN0cmVuZ3RoOiB7IHR5cGU6IFwiZmxvYXRcIiwgdmFsdWU6IHRoaXMuc3RyZW5ndGggfSxcblx0XHRcdFx0Ymxvb21SYWRpdXM6IHsgdHlwZTogXCJmbG9hdFwiLCB2YWx1ZTogdGhpcy5yYWRpdXMgfSxcblx0XHRcdFx0Ymxvb21GYWN0b3JzOiB7IHR5cGU6IFwiZmxvYXQtYXJyYXlcIiwgdmFsdWU6IFsxLjAsIDAuOCwgMC42LCAwLjQsIDAuMl0gfSxcblx0XHRcdFx0Ymxvb21UaW50Q29sb3JzOiB7XG5cdFx0XHRcdFx0dHlwZTogXCJ2ZWMzLWFycmF5XCIsXG5cdFx0XHRcdFx0dmFsdWU6IFtcblx0XHRcdFx0XHRcdG5ldyBWZWN0b3IzKDEsIDEsIDEpLFxuXHRcdFx0XHRcdFx0bmV3IFZlY3RvcjMoMSwgMSwgMSksXG5cdFx0XHRcdFx0XHRuZXcgVmVjdG9yMygxLCAxLCAxKSxcblx0XHRcdFx0XHRcdG5ldyBWZWN0b3IzKDEsIDEsIDEpLFxuXHRcdFx0XHRcdFx0bmV3IFZlY3RvcjMoMSwgMSwgMSlcblx0XHRcdFx0XHRdXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdHZlcnQ6IGBcbiAgICAgICAgICAgICAgc3RydWN0IFZlcnRleElucHV0IHtcbiAgICAgICAgICAgICAgICAgICAgQGxvY2F0aW9uKDApIHBvc2l0aW9uOiB2ZWMyPGYzMj4sICAgICAgIFxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgc3RydWN0IFZlcnRleE91dHB1dCB7XG4gICAgICAgICAgICAgICAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxuICAgICAgICAgICAgICAgICAgICBAbG9jYXRpb24oMCkgdXY6IHZlYzI8ZjMyPixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgQHZlcnRleFxuICAgICAgICAgICAgICAgZm4gbWFpbihpbnB1dDogVmVydGV4SW5wdXQpIC0+IFZlcnRleE91dHB1dCB7XG4gICAgICAgICAgICAgICAgdmFyIG91dHB1dDpWZXJ0ZXhPdXRwdXQ7XG4gICAgICAgICAgICAgICAgb3V0cHV0LnV2ID0gaW5wdXQucG9zaXRpb24gKiAwLjUgKyAwLjU7XG4gICAgICAgICAgICAgICAgb3V0cHV0LnBvc2l0aW9uID0gdmVjNDxmMzI+KGlucHV0LnBvc2l0aW9uLCAwLjAsIDEuMCk7O1xuICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYCxcblxuXHRcdFx0ZnJhZzogYFxuICAgICAgICAgICAgICAgIHN0cnVjdCBGcmFnSW5wdXQge1xuICAgICAgICAgICAgICAgICAgICBAbG9jYXRpb24oMCkgdXY6IHZlYzI8ZjMyPixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHN0cnVjdCBCbG9vbVVuaWZvcm1ze1xuICAgICAgICAgICAgICAgICAgICBibG9vbVN0cmVuZ3RoOmYzMixcbiAgICAgICAgICAgICAgICAgICAgYmxvb21SYWRpdXM6ZjMyLFxuICAgICAgICAgICAgICAgICAgICBibG9vbUZhY3RvcnMgOiBhcnJheTxmMzIsNT4sXG4gICAgICAgICAgICAgICAgICAgIGJsb29tVGludENvbG9ycyA6IGFycmF5PHZlYzM8ZjMyPiw1PlxuICAgICAgICAgICAgICAgIH0gIFxuICAgICAgICAgICAgICAgIEBncm91cCgwKSBAYmluZGluZygwKSAgdmFyPHN0b3JhZ2UsIHJlYWQ+IGJsb29tVW5pZm9ybXMgOiBCbG9vbVVuaWZvcm1zO1xuXG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7Ymx1clRleHR1cmUxQmluZGluZ319KSB2YXIgYmx1clRleHR1cmUxOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7Ymx1clRleHR1cmUyQmluZGluZ319KSB2YXIgYmx1clRleHR1cmUyOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7Ymx1clRleHR1cmUzQmluZGluZ319KSB2YXIgYmx1clRleHR1cmUzOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7Ymx1clRleHR1cmU0QmluZGluZ319KSB2YXIgYmx1clRleHR1cmU0OiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7Ymx1clRleHR1cmU1QmluZGluZ319KSB2YXIgYmx1clRleHR1cmU1OiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKHt7dFNhbXBsZXJCaW5kaW5nfX0pIHZhciB0U2FtcGxlcjogc2FtcGxlcjtcblxuXHRcdFx0XHRmbiBsZXJwQmxvb21GYWN0b3IoZmFjdG9yOmYzMiktPmYzMiB7XG5cdFx0XHRcdFx0bGV0IG1pcnJvckZhY3RvcjpmMzIgPSAxLjIgLSBmYWN0b3I7XG5cdFx0XHRcdFx0cmV0dXJuIG1peChmYWN0b3IsIG1pcnJvckZhY3RvciwgYmxvb21Vbmlmb3Jtcy5ibG9vbVJhZGl1cyk7XG5cdFx0XHRcdH1cbiAgICAgICAgICAgICAgICBAZnJhZ21lbnRcblx0XHRcdFx0Zm4gbWFpbihpbnB1dDpGcmFnSW5wdXQpLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiAge1xuXHRcdFx0XHRcdHJldHVybiBibG9vbVVuaWZvcm1zLmJsb29tU3RyZW5ndGggKiAoIGxlcnBCbG9vbUZhY3RvcihibG9vbVVuaWZvcm1zLmJsb29tRmFjdG9yc1swXSkgKiB2ZWM0KGJsb29tVW5pZm9ybXMuYmxvb21UaW50Q29sb3JzWzBdLCAxLjApICogdGV4dHVyZVNhbXBsZShibHVyVGV4dHVyZTEsIHRTYW1wbGVyLCBpbnB1dC51dikgK1xuXHRcdFx0XHRcdFx0bGVycEJsb29tRmFjdG9yKGJsb29tVW5pZm9ybXMuYmxvb21GYWN0b3JzWzFdKSAqIHZlYzQ8ZjMyPihibG9vbVVuaWZvcm1zLmJsb29tVGludENvbG9yc1sxXSwgMS4wKSAqIHRleHR1cmVTYW1wbGUoYmx1clRleHR1cmUyLCB0U2FtcGxlciwgaW5wdXQudXYpICtcblx0XHRcdFx0XHRcdGxlcnBCbG9vbUZhY3RvcihibG9vbVVuaWZvcm1zLmJsb29tRmFjdG9yc1syXSkgKiB2ZWM0PGYzMj4oYmxvb21Vbmlmb3Jtcy5ibG9vbVRpbnRDb2xvcnNbMl0sIDEuMCkgKiB0ZXh0dXJlU2FtcGxlKGJsdXJUZXh0dXJlMywgdFNhbXBsZXIsIGlucHV0LnV2KSArXG5cdFx0XHRcdFx0XHRsZXJwQmxvb21GYWN0b3IoYmxvb21Vbmlmb3Jtcy5ibG9vbUZhY3RvcnNbM10pICogdmVjNDxmMzI+KGJsb29tVW5pZm9ybXMuYmxvb21UaW50Q29sb3JzWzNdLCAxLjApICogdGV4dHVyZVNhbXBsZShibHVyVGV4dHVyZTQsIHRTYW1wbGVyLCBpbnB1dC51dikgK1xuXHRcdFx0XHRcdFx0bGVycEJsb29tRmFjdG9yKGJsb29tVW5pZm9ybXMuYmxvb21GYWN0b3JzWzRdKSAqIHZlYzQ8ZjMyPihibG9vbVVuaWZvcm1zLmJsb29tVGludENvbG9yc1s0XSwgMS4wKSAqIHRleHR1cmVTYW1wbGUoYmx1clRleHR1cmU1LCB0U2FtcGxlciwgaW5wdXQudXYpICk7XG5cdFx0XHRcdH1gXG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBnZXRTZXBlcmFibGVCbHVyTWF0ZXJpYWwoa2VybmVsUmFkaXVzLCB0eXBlKSB7XG5cdFx0Y29uc3Qgc2hhZGVyID0gZ2V0VmVydEZyYWcoXCJibHVyXCIsIHtcblx0XHRcdEtFUk5FTF9SQURJVVM6IGtlcm5lbFJhZGl1cyxcblx0XHRcdFNJR01BOiBrZXJuZWxSYWRpdXNcblx0XHR9KTtcblx0XHRjb25zdCBtYXQgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoe1xuXHRcdFx0dHlwZSxcblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdHREaWZmdXNlOiB7IHR5cGU6IFwidGV4dHVyZVwiLCB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0XHRkaXJlY3Rpb246IHsgdHlwZTogXCJ2ZWMyXCIsIHZhbHVlOiBuZXcgVmVjdG9yMigwLjAsIDAuMCkgfSxcblx0XHRcdFx0dFNhbXBsZXI6IHtcblx0XHRcdFx0XHR0eXBlOiBcInNhbXBsZXJcIixcblx0XHRcdFx0XHR2YWx1ZTogdGhpcy5kZWZhdWx0U2FtcGxlclxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHR2ZXJ0OiBzaGFkZXIudmVydCxcblxuXHRcdFx0ZnJhZzogc2hhZGVyLmZyYWdcblx0XHR9KTtcblx0XHRtYXQucmVuZGVyU3RhdGUgPSB0aGlzLnJlbmRlclN0YXRlO1xuXHRcdHJldHVybiBtYXQ7XG5cdH1cbn1cblxudHlwZSBCbG9vbVBvc3RFZmZlY3RQcm9wcyA9IHtcblx0d2lkdGg6IG51bWJlcjtcblx0aGVpZ2h0OiBudW1iZXI7XG5cdHN0cmVuZ3RoOiBudW1iZXI7XG5cdHJhZGl1czogbnVtYmVyO1xuXHR0aHJlc2hvbGQ6IG51bWJlcjtcbn07XG4iLCJpbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi9WZWN0b3IzXCI7XHJcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuL1ZlY3RvcjRcIjtcclxuaW1wb3J0IGRlZmluZWQgZnJvbSBcIi4uL3V0aWxzL2RlZmluZWRcIjtcclxuaW1wb3J0IEdNYXRoIGZyb20gXCIuL01hdGhcIjtcclxuaW1wb3J0IE1hdHJpeDQgZnJvbSBcIi4vTWF0cml4NFwiO1xyXG5cclxuLyoqXHJcbiAqIEEgcGxhbmUgaW4gSGVzc2lhbiBOb3JtYWwgRm9ybSBkZWZpbmVkIGJ5XHJcbiAqIDxwcmU+XHJcbiAqIGF4ICsgYnkgKyBjeiArIGQgPSAwXHJcbiAqIDwvcHJlPlxyXG4gKiB3aGVyZSAoYSwgYiwgYykgaXMgdGhlIHBsYW5lJ3MgPGNvZGU+bm9ybWFsPC9jb2RlPiwgZCBpcyB0aGUgc2lnbmVkXHJcbiAqIDxjb2RlPmRpc3RhbmNlPC9jb2RlPiB0byB0aGUgcGxhbmUsIGFuZCAoeCwgeSwgeikgaXMgYW55IHBvaW50IG9uXHJcbiAqIHRoZSBwbGFuZS5cclxuICpcclxuICogQGFsaWFzIFBsYW5lXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge1ZlY3RvcjN9IG5vcm1hbCBUaGUgcGxhbmUncyBub3JtYWwgKG5vcm1hbGl6ZWQpLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gZGlzdGFuY2UgVGhlIHNob3J0ZXN0IGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiB0byB0aGUgcGxhbmUuICBUaGUgc2lnbiBvZlxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBUaGUgcGxhbmUgeD0wXHJcbiAqIGNvbnN0IHBsYW5lID0gbmV3IFBsYW5lKFZlY3RvcjMuVU5JVF9YLCAwLjApO1xyXG4gKlxyXG4gKiBAZXhjZXB0aW9uIHtEZXZlbG9wZXJFcnJvcn0gTm9ybWFsIG11c3QgYmUgbm9ybWFsaXplZFxyXG4gKi9cclxuY2xhc3MgUGxhbmUge1xyXG4gIG5vcm1hbDogVmVjdG9yMztcclxuICBkaXN0YW5jZTogbnVtYmVyO1xyXG4gIHB1YmxpYyBzdGF0aWMgT1JJR0lOX1hZX1BMQU5FID0gT2JqZWN0LmZyZWV6ZShuZXcgUGxhbmUoVmVjdG9yMy5VTklUX1osIDAuMCkpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIE9SSUdJTl9ZWl9QTEFORSA9IE9iamVjdC5mcmVlemUobmV3IFBsYW5lKFZlY3RvcjMuVU5JVF9YLCAwLjApKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBPUklHSU5fWlhfUExBTkUgPSBPYmplY3QuZnJlZXplKG5ldyBQbGFuZShWZWN0b3IzLlVOSVRfWSwgMC4wKSk7XHJcbiAgY29uc3RydWN0b3Iobm9ybWFsOiBWZWN0b3IzLCBkaXN0YW5jZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLm5vcm1hbCA9IFZlY3RvcjMuY2xvbmUobm9ybWFsKTtcclxuXHJcbiAgICB0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgfVxyXG4gIG5vcm1hbGl6ZSgpIHtcclxuICAgIGNvbnN0IGludmVyc2VOb3JtYWxMZW5ndGggPSAxLjAgLyB0aGlzLm5vcm1hbC5sZW5ndGgoKTtcclxuICAgIHRoaXMubm9ybWFsID0gVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKFxyXG4gICAgICB0aGlzLm5vcm1hbCxcclxuICAgICAgaW52ZXJzZU5vcm1hbExlbmd0aCxcclxuICAgICAgdGhpcy5ub3JtYWxcclxuICAgICk7XHJcbiAgICB0aGlzLmRpc3RhbmNlICo9IGludmVyc2VOb3JtYWxMZW5ndGg7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tUG9pbnROb3JtYWwoXHJcbiAgICBwb2ludDogVmVjdG9yMyxcclxuICAgIG5vcm1hbDogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogUGxhbmVcclxuICApOiBQbGFuZSB7XHJcbiAgICBpZiAoIUdNYXRoLmVxdWFsc0Vwc2lsb24oVmVjdG9yMy5tYWduaXR1ZGUobm9ybWFsKSwgMS4wLCBHTWF0aC5FUFNJTE9ONikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9ybWFsIG11c3QgYmUgbm9ybWFsaXplZC5cIik7XHJcbiAgICB9XHJcbiAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcclxuXHJcbiAgICBjb25zdCBkaXN0YW5jZSA9IC1WZWN0b3IzLmRvdChub3JtYWwsIHBvaW50KTtcclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IFBsYW5lKG5vcm1hbCwgZGlzdGFuY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIFZlY3RvcjMuY2xvbmUobm9ybWFsLCByZXN1bHQubm9ybWFsKTtcclxuICAgIHJlc3VsdC5kaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tVmVjdG9yNChjb2VmZmljaWVudHM6IFZlY3RvcjQsIHJlc3VsdDogUGxhbmUpOiBQbGFuZSB7XHJcbiAgICBjb25zdCBub3JtYWwgPSBWZWN0b3IzLmZyb21WZWN0b3I0KGNvZWZmaWNpZW50cywgc2NyYXRjaE5vcm1hbCk7XHJcbiAgICBjb25zdCBkaXN0YW5jZSA9IGNvZWZmaWNpZW50cy53O1xyXG5cclxuICAgIC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XHJcbiAgICBpZiAoIUdNYXRoLmVxdWFsc0Vwc2lsb24oVmVjdG9yMy5tYWduaXR1ZGUobm9ybWFsKSwgMS4wLCBHTWF0aC5FUFNJTE9ONikpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9ybWFsIG11c3QgYmUgbm9ybWFsaXplZC5cIik7XHJcbiAgICB9XHJcbiAgICAvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcclxuXHJcbiAgICBpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICByZXR1cm4gbmV3IFBsYW5lKG5vcm1hbCwgZGlzdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgVmVjdG9yMy5jbG9uZShub3JtYWwsIHJlc3VsdC5ub3JtYWwpO1xyXG4gICAgcmVzdWx0LmRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFBvaW50RGlzdGFuY2UocGxhbmU6IFBsYW5lLCBwb2ludDogVmVjdG9yMyk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMy5kb3QocGxhbmUubm9ybWFsLCBwb2ludCkgKyBwbGFuZS5kaXN0YW5jZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcm9qZWN0UG9pbnRPbnRvUGxhbmUoXHJcbiAgICBwbGFuZTogUGxhbmUsXHJcbiAgICBwb2ludDogVmVjdG9yMyxcclxuICAgIHJlc3VsdDogVmVjdG9yM1xyXG4gICk6IFZlY3RvcjMge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmVzdWx0ID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwcm9qZWN0ZWRQb2ludCA9IHBvaW50IC0gKG5vcm1hbC5wb2ludCArIHNjYWxlKSAqIG5vcm1hbFxyXG4gICAgY29uc3QgcG9pbnREaXN0YW5jZSA9IFBsYW5lLmdldFBvaW50RGlzdGFuY2UocGxhbmUsIHBvaW50KTtcclxuICAgIGNvbnN0IHNjYWxlZE5vcm1hbCA9IFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihcclxuICAgICAgcGxhbmUubm9ybWFsLFxyXG4gICAgICBwb2ludERpc3RhbmNlLFxyXG4gICAgICBzY3JhdGNoQ2FydGVzaWFuXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBWZWN0b3IzLnN1YnRyYWN0KHBvaW50LCBzY2FsZWROb3JtYWwsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdHJhbnNmb3JtKHBsYW5lOiBQbGFuZSwgdHJhbnNmb3JtOiBNYXRyaXg0LCByZXN1bHQ6IFBsYW5lKTogUGxhbmUge1xyXG4gICAgY29uc3Qgbm9ybWFsID0gcGxhbmUubm9ybWFsO1xyXG4gICAgY29uc3QgZGlzdGFuY2UgPSBwbGFuZS5kaXN0YW5jZTtcclxuICAgIGNvbnN0IGludmVyc2VUcmFuc3Bvc2UgPSBNYXRyaXg0LmludmVyc2VUcmFuc3Bvc2UoXHJcbiAgICAgIHRyYW5zZm9ybSxcclxuICAgICAgc2NyYXRjaEludmVyc2VUcmFuc3Bvc2VcclxuICAgICk7XHJcbiAgICBsZXQgcGxhbmVBc0NhcnRlc2lhbjQgPSBWZWN0b3I0LmZyb21FbGVtZW50cyhcclxuICAgICAgbm9ybWFsLngsXHJcbiAgICAgIG5vcm1hbC55LFxyXG4gICAgICBub3JtYWwueixcclxuICAgICAgZGlzdGFuY2UsXHJcbiAgICAgIHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjRcclxuICAgICk7XHJcbiAgICBwbGFuZUFzQ2FydGVzaWFuNCA9IE1hdHJpeDQubXVsdGlwbHlCeVZlY3RvcihcclxuICAgICAgaW52ZXJzZVRyYW5zcG9zZSxcclxuICAgICAgcGxhbmVBc0NhcnRlc2lhbjQsXHJcbiAgICAgIHBsYW5lQXNDYXJ0ZXNpYW40XHJcbiAgICApO1xyXG5cclxuICAgIC8vIENvbnZlcnQgdGhlIHRyYW5zZm9ybWVkIHBsYW5lIHRvIEhlc3NpYW4gTm9ybWFsIEZvcm1cclxuICAgIGNvbnN0IHRyYW5zZm9ybWVkTm9ybWFsID0gVmVjdG9yMy5mcm9tVmVjdG9yNChcclxuICAgICAgcGxhbmVBc0NhcnRlc2lhbjQsXHJcbiAgICAgIHNjcmF0Y2hUcmFuc2Zvcm1Ob3JtYWxcclxuICAgICk7XHJcblxyXG4gICAgcGxhbmVBc0NhcnRlc2lhbjQgPSBWZWN0b3I0LmRpdmlkZUJ5U2NhbGFyKFxyXG4gICAgICBwbGFuZUFzQ2FydGVzaWFuNCxcclxuICAgICAgVmVjdG9yMy5tYWduaXR1ZGUodHJhbnNmb3JtZWROb3JtYWwpLFxyXG4gICAgICBwbGFuZUFzQ2FydGVzaWFuNFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gUGxhbmUuZnJvbVZlY3RvcjQocGxhbmVBc0NhcnRlc2lhbjQsIHJlc3VsdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2xvbmUocGxhbmU6IFBsYW5lLCByZXN1bHQ6IFBsYW5lKTogUGxhbmUge1xyXG4gICAgaWYgKCFkZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBQbGFuZShwbGFuZS5ub3JtYWwsIHBsYW5lLmRpc3RhbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICBWZWN0b3IzLmNsb25lKHBsYW5lLm5vcm1hbCwgcmVzdWx0Lm5vcm1hbCk7XHJcbiAgICByZXN1bHQuZGlzdGFuY2UgPSBwbGFuZS5kaXN0YW5jZTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGVxdWFscyhsZWZ0OiBQbGFuZSwgcmlnaHQ6IFBsYW5lKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBsZWZ0LmRpc3RhbmNlID09PSByaWdodC5kaXN0YW5jZSAmJlxyXG4gICAgICBWZWN0b3IzLmVxdWFscyhsZWZ0Lm5vcm1hbCwgcmlnaHQubm9ybWFsKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuY29uc3Qgc2NyYXRjaE5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcbmNvbnN0IHNjcmF0Y2hDYXJ0ZXNpYW4gPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY3JhdGNoSW52ZXJzZVRyYW5zcG9zZSA9IG5ldyBNYXRyaXg0KCk7XHJcbmNvbnN0IHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjQgPSBuZXcgVmVjdG9yNCgpO1xyXG5jb25zdCBzY3JhdGNoVHJhbnNmb3JtTm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBsYW5lO1xyXG4iLCJpbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XHJcbmltcG9ydCBWZWN0b3I0IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjRcIjtcclxuaW1wb3J0IGRlZmF1bHRWYWx1ZSBmcm9tIFwiLi4vdXRpbHMvZGVmYXVsdFZhbHVlXCI7XHJcbmltcG9ydCBkZWZpbmVkIGZyb20gXCIuLi91dGlscy9kZWZpbmVkXCI7XHJcbmltcG9ydCBJbnRlcnNlY3QgZnJvbSBcIi4vSW50ZXJzZWN0XCI7XHJcbmltcG9ydCBQbGFuZSBmcm9tIFwiLi4vbWF0aC9QbGFuZVwiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBjdWxsaW5nIHZvbHVtZSBkZWZpbmVkIGJ5IHBsYW5lcy5cclxuICpcclxuICogQGFsaWFzIEN1bGxpbmdWb2x1bWVcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7VmVjdG9yNFtdfSBbcGxhbmVzXSBBbiBhcnJheSBvZiBjbGlwcGluZyBwbGFuZXMuXHJcbiAqL1xyXG5jbGFzcyBDdWxsaW5nVm9sdW1lIHtcclxuXHRwbGFuZXM6IFBsYW5lW107XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgTUFTS19PVVRTSURFID0gMHhmZmZmZmZmZjtcclxuXHJcblx0cHVibGljIHN0YXRpYyBNQVNLX0lOU0lERSA9IDB4MDAwMDAwMDA7XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgTUFTS19JTkRFVEVSTUlOQVRFID0gMHg3ZmZmZmZmZjtcclxuXHJcblx0Y29uc3RydWN0b3IocGxhbmVzPzogUGxhbmVbXSkge1xyXG5cdFx0dGhpcy5wbGFuZXMgPSBkZWZhdWx0VmFsdWUocGxhbmVzLCBbXHJcblx0XHRcdG5ldyBQbGFuZShWZWN0b3IzLlVOSVRfWiwgMC4wKSxcclxuXHRcdFx0bmV3IFBsYW5lKFZlY3RvcjMuVU5JVF9aLCAwLjApLFxyXG5cdFx0XHRuZXcgUGxhbmUoVmVjdG9yMy5VTklUX1osIDAuMCksXHJcblx0XHRcdG5ldyBQbGFuZShWZWN0b3IzLlVOSVRfWiwgMC4wKSxcclxuXHRcdFx0bmV3IFBsYW5lKFZlY3RvcjMuVU5JVF9aLCAwLjApLFxyXG5cdFx0XHRuZXcgUGxhbmUoVmVjdG9yMy5VTklUX1osIDAuMClcclxuXHRcdF0pO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3RzIGEgY3VsbGluZyB2b2x1bWUgZnJvbSBhIGJvdW5kaW5nIHNwaGVyZS4gQ3JlYXRlcyBzaXggcGxhbmVzIHRoYXQgY3JlYXRlIGEgYm94IGNvbnRhaW5pbmcgdGhlIHNwaGVyZS5cclxuXHQgKiBUaGUgcGxhbmVzIGFyZSBhbGlnbmVkIHRvIHRoZSB4LCB5LCBhbmQgeiBheGVzIGluIHdvcmxkIGNvb3JkaW5hdGVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtCb3VuZGluZ1NwaGVyZX0gYm91bmRpbmdTcGhlcmUgVGhlIGJvdW5kaW5nIHNwaGVyZSB1c2VkIHRvIGNyZWF0ZSB0aGUgY3VsbGluZyB2b2x1bWUuXHJcblx0ICogQHBhcmFtIHtDdWxsaW5nVm9sdW1lfSBbcmVzdWx0XSBUaGUgb2JqZWN0IG9udG8gd2hpY2ggdG8gc3RvcmUgdGhlIHJlc3VsdC5cclxuXHQgKiBAcmV0dXJucyB7Q3VsbGluZ1ZvbHVtZX0gVGhlIGN1bGxpbmcgdm9sdW1lIGNyZWF0ZWQgZnJvbSB0aGUgYm91bmRpbmcgc3BoZXJlLlxyXG5cdCAqL1xyXG5cdHN0YXRpYyBmcm9tQm91bmRpbmdTcGhlcmUoYm91bmRpbmdTcGhlcmUsIHJlc3VsdCkge1xyXG5cdFx0aWYgKCFkZWZpbmVkKGJvdW5kaW5nU3BoZXJlKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJib3VuZGluZ1NwaGVyZSBpcyByZXF1aXJlZC5cIik7XHJcblx0XHR9XHJcblx0XHRpZiAoIWRlZmluZWQocmVzdWx0KSkge1xyXG5cdFx0XHRyZXN1bHQgPSBuZXcgQ3VsbGluZ1ZvbHVtZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGxlbmd0aCA9IGZhY2VzLmxlbmd0aDtcclxuXHRcdGNvbnN0IHBsYW5lcyA9IHJlc3VsdC5wbGFuZXM7XHJcblx0XHRwbGFuZXMubGVuZ3RoID0gMiAqIGxlbmd0aDtcclxuXHJcblx0XHRjb25zdCBjZW50ZXIgPSBib3VuZGluZ1NwaGVyZS5jZW50ZXI7XHJcblx0XHRjb25zdCByYWRpdXMgPSBib3VuZGluZ1NwaGVyZS5yYWRpdXM7XHJcblxyXG5cdFx0bGV0IHBsYW5lSW5kZXggPSAwO1xyXG5cclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0Y29uc3QgZmFjZU5vcm1hbCA9IGZhY2VzW2ldO1xyXG5cclxuXHRcdFx0bGV0IHBsYW5lMCA9IHBsYW5lc1twbGFuZUluZGV4XTtcclxuXHRcdFx0bGV0IHBsYW5lMSA9IHBsYW5lc1twbGFuZUluZGV4ICsgMV07XHJcblxyXG5cdFx0XHRpZiAoIWRlZmluZWQocGxhbmUwKSkge1xyXG5cdFx0XHRcdHBsYW5lMCA9IHBsYW5lc1twbGFuZUluZGV4XSA9IG5ldyBWZWN0b3I0KCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFkZWZpbmVkKHBsYW5lMSkpIHtcclxuXHRcdFx0XHRwbGFuZTEgPSBwbGFuZXNbcGxhbmVJbmRleCArIDFdID0gbmV3IFZlY3RvcjQoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0VmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGZhY2VOb3JtYWwsIC1yYWRpdXMsIHNjcmF0Y2hQbGFuZUNlbnRlcik7XHJcblx0XHRcdFZlY3RvcjMuYWRkKGNlbnRlciwgc2NyYXRjaFBsYW5lQ2VudGVyLCBzY3JhdGNoUGxhbmVDZW50ZXIpO1xyXG5cclxuXHRcdFx0cGxhbmUwLnggPSBmYWNlTm9ybWFsLng7XHJcblx0XHRcdHBsYW5lMC55ID0gZmFjZU5vcm1hbC55O1xyXG5cdFx0XHRwbGFuZTAueiA9IGZhY2VOb3JtYWwuejtcclxuXHRcdFx0cGxhbmUwLncgPSAtVmVjdG9yMy5kb3QoZmFjZU5vcm1hbCwgc2NyYXRjaFBsYW5lQ2VudGVyKTtcclxuXHJcblx0XHRcdFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihmYWNlTm9ybWFsLCByYWRpdXMsIHNjcmF0Y2hQbGFuZUNlbnRlcik7XHJcblx0XHRcdFZlY3RvcjMuYWRkKGNlbnRlciwgc2NyYXRjaFBsYW5lQ2VudGVyLCBzY3JhdGNoUGxhbmVDZW50ZXIpO1xyXG5cclxuXHRcdFx0cGxhbmUxLnggPSAtZmFjZU5vcm1hbC54O1xyXG5cdFx0XHRwbGFuZTEueSA9IC1mYWNlTm9ybWFsLnk7XHJcblx0XHRcdHBsYW5lMS56ID0gLWZhY2VOb3JtYWwuejtcclxuXHRcdFx0cGxhbmUxLncgPSAtVmVjdG9yMy5kb3QoVmVjdG9yMy5uZWdhdGUoZmFjZU5vcm1hbCwgc2NyYXRjaFBsYW5lTm9ybWFsKSwgc2NyYXRjaFBsYW5lQ2VudGVyKTtcclxuXHJcblx0XHRcdHBsYW5lSW5kZXggKz0gMjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBib3VuZGluZyB2b2x1bWUgaW50ZXJzZWN0cyB0aGUgY3VsbGluZyB2b2x1bWUuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge09iamVjdH0gYm91bmRpbmdWb2x1bWUgVGhlIGJvdW5kaW5nIHZvbHVtZSB3aG9zZSBpbnRlcnNlY3Rpb24gd2l0aCB0aGUgY3VsbGluZyB2b2x1bWUgaXMgdG8gYmUgdGVzdGVkLlxyXG5cdCAqIEByZXR1cm5zIHtJbnRlcnNlY3R9ICBJbnRlcnNlY3QuT1VUU0lERSwgSW50ZXJzZWN0LklOVEVSU0VDVElORywgb3IgSW50ZXJzZWN0LklOU0lERS5cclxuXHQgKi9cclxuXHRjb21wdXRlVmlzaWJpbGl0eShib3VuZGluZ1ZvbHVtZSkge1xyXG5cdFx0aWYgKCFkZWZpbmVkKGJvdW5kaW5nVm9sdW1lKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJib3VuZGluZ1ZvbHVtZSBpcyByZXF1aXJlZC5cIik7XHJcblx0XHR9XHJcblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcclxuXHRcdGxldCBpbnRlcnNlY3RpbmcgPSBmYWxzZTtcclxuXHRcdGZvciAobGV0IGsgPSAwLCBsZW4gPSBwbGFuZXMubGVuZ3RoOyBrIDwgbGVuOyArK2spIHtcclxuXHRcdFx0Y29uc3QgcmVzdWx0ID0gYm91bmRpbmdWb2x1bWUuaW50ZXJzZWN0UGxhbmUocGxhbmVzW2tdKTtcclxuXHRcdFx0aWYgKHJlc3VsdCA9PT0gSW50ZXJzZWN0Lk9VVFNJREUpIHtcclxuXHRcdFx0XHRyZXR1cm4gSW50ZXJzZWN0Lk9VVFNJREU7XHJcblx0XHRcdH0gZWxzZSBpZiAocmVzdWx0ID09PSBJbnRlcnNlY3QuSU5URVJTRUNUSU5HKSB7XHJcblx0XHRcdFx0aW50ZXJzZWN0aW5nID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpbnRlcnNlY3RpbmcgPyBJbnRlcnNlY3QuSU5URVJTRUNUSU5HIDogSW50ZXJzZWN0LklOU0lERTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIERldGVybWluZXMgd2hldGhlciBhIGJvdW5kaW5nIHZvbHVtZSBpbnRlcnNlY3RzIHRoZSBjdWxsaW5nIHZvbHVtZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBib3VuZGluZ1ZvbHVtZSBUaGUgYm91bmRpbmcgdm9sdW1lIHdob3NlIGludGVyc2VjdGlvbiB3aXRoIHRoZSBjdWxsaW5nIHZvbHVtZSBpcyB0byBiZSB0ZXN0ZWQuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBhcmVudFBsYW5lTWFzayBBIGJpdCBtYXNrIGZyb20gdGhlIGJvdW5kaW5nVm9sdW1lJ3MgcGFyZW50J3MgY2hlY2sgYWdhaW5zdCB0aGUgc2FtZSBjdWxsaW5nXHJcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWUsIHN1Y2ggdGhhdCBpZiAocGxhbmVNYXNrICYgKDEgPDwgcGxhbmVJbmRleCkgPT09IDApLCBmb3IgayA8IDMxLCB0aGVuXHJcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcGFyZW50IChhbmQgdGhlcmVmb3JlIHRoaXMpIHZvbHVtZSBpcyBjb21wbGV0ZWx5IGluc2lkZSBwbGFuZVtwbGFuZUluZGV4XVxyXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgcGxhbmUgY2hlY2sgY2FuIGJlIHNraXBwZWQuXHJcblx0ICogQHJldHVybnMge051bWJlcn0gQSBwbGFuZSBtYXNrIGFzIGRlc2NyaWJlZCBhYm92ZSAod2hpY2ggY2FuIGJlIGFwcGxpZWQgdG8gdGhpcyBib3VuZGluZ1ZvbHVtZSdzIGNoaWxkcmVuKS5cclxuXHQgKlxyXG5cdCAqIEBwcml2YXRlXHJcblx0ICovXHJcblx0Y29tcHV0ZVZpc2liaWxpdHlXaXRoUGxhbmVNYXNrKGJvdW5kaW5nVm9sdW1lLCBwYXJlbnRQbGFuZU1hc2spIHtcclxuXHRcdC8vPj5pbmNsdWRlU3RhcnQoJ2RlYnVnJywgcHJhZ21hcy5kZWJ1Zyk7XHJcblx0XHRpZiAoIWRlZmluZWQoYm91bmRpbmdWb2x1bWUpKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImJvdW5kaW5nVm9sdW1lIGlzIHJlcXVpcmVkLlwiKTtcclxuXHRcdH1cclxuXHRcdGlmICghZGVmaW5lZChwYXJlbnRQbGFuZU1hc2spKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcInBhcmVudFBsYW5lTWFzayBpcyByZXF1aXJlZC5cIik7XHJcblx0XHR9XHJcblx0XHQvLz4+aW5jbHVkZUVuZCgnZGVidWcnKTtcclxuXHJcblx0XHRpZiAocGFyZW50UGxhbmVNYXNrID09PSBDdWxsaW5nVm9sdW1lLk1BU0tfT1VUU0lERSB8fCBwYXJlbnRQbGFuZU1hc2sgPT09IEN1bGxpbmdWb2x1bWUuTUFTS19JTlNJREUpIHtcclxuXHRcdFx0Ly8gcGFyZW50IGlzIGNvbXBsZXRlbHkgb3V0c2lkZSBvciBjb21wbGV0ZWx5IGluc2lkZSwgc28gdGhpcyBjaGlsZCBpcyBhcyB3ZWxsLlxyXG5cdFx0XHRyZXR1cm4gcGFyZW50UGxhbmVNYXNrO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN0YXJ0IHdpdGggTUFTS19JTlNJREUgKGFsbCB6ZXJvcykgc28gdGhhdCBhZnRlciB0aGUgbG9vcCwgdGhlIHJldHVybiB2YWx1ZSBjYW4gYmUgY29tcGFyZWQgd2l0aCBNQVNLX0lOU0lERS5cclxuXHRcdC8vIChCZWNhdXNlIGlmIHRoZXJlIGFyZSBmZXdlciB0aGFuIDMxIHBsYW5lcywgdGhlIHVwcGVyIGJpdHMgd29udCBiZSBjaGFuZ2VkLilcclxuXHRcdGxldCBtYXNrID0gQ3VsbGluZ1ZvbHVtZS5NQVNLX0lOU0lERTtcclxuXHJcblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcclxuXHRcdGZvciAobGV0IGsgPSAwLCBsZW4gPSBwbGFuZXMubGVuZ3RoOyBrIDwgbGVuOyArK2spIHtcclxuXHRcdFx0Ly8gRm9yIGsgZ3JlYXRlciB0aGFuIDMxIChzaW5jZSAzMSBpcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgSU5TSURFL0lOVEVSU0VDVElORyBiaXRzIHdlIGNhbiBzdG9yZSksIHNraXAgdGhlIG9wdGltaXphdGlvbi5cclxuXHRcdFx0Y29uc3QgZmxhZyA9IGsgPCAzMSA/IDEgPDwgayA6IDA7XHJcblx0XHRcdGlmIChrIDwgMzEgJiYgKHBhcmVudFBsYW5lTWFzayAmIGZsYWcpID09PSAwKSB7XHJcblx0XHRcdFx0Ly8gYm91bmRpbmdWb2x1bWUgaXMga25vd24gdG8gYmUgSU5TSURFIHRoaXMgcGxhbmUuXHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcdFx0c2NyYXRjaFBsYW5lcy5zZXQocGxhbmVzW2tdLm5vcm1hbC54LCBwbGFuZXNba10ubm9ybWFsLnksIHBsYW5lc1trXS5ub3JtYWwueiwgcGxhbmVzW2tdLmRpc3RhbmNlKTtcclxuXHRcdFx0Y29uc3QgcmVzdWx0ID0gYm91bmRpbmdWb2x1bWUuaW50ZXJzZWN0UGxhbmUoUGxhbmUuZnJvbVZlY3RvcjQoc2NyYXRjaFBsYW5lcywgc2NyYXRjaFBsYW5lKSk7XHJcblx0XHRcdGlmIChyZXN1bHQgPT09IEludGVyc2VjdC5PVVRTSURFKSB7XHJcblx0XHRcdFx0cmV0dXJuIEN1bGxpbmdWb2x1bWUuTUFTS19PVVRTSURFO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHJlc3VsdCA9PT0gSW50ZXJzZWN0LklOVEVSU0VDVElORykge1xyXG5cdFx0XHRcdG1hc2sgfD0gZmxhZztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYXNrO1xyXG5cdH1cclxufVxyXG5cclxuY29uc3QgZmFjZXMgPSBbbmV3IFZlY3RvcjMoKSwgbmV3IFZlY3RvcjMoKSwgbmV3IFZlY3RvcjMoKV07XHJcblZlY3RvcjMuY2xvbmUoVmVjdG9yMy5VTklUX1gsIGZhY2VzWzBdKTtcclxuVmVjdG9yMy5jbG9uZShWZWN0b3IzLlVOSVRfWSwgZmFjZXNbMV0pO1xyXG5WZWN0b3IzLmNsb25lKFZlY3RvcjMuVU5JVF9aLCBmYWNlc1syXSk7XHJcblxyXG5jb25zdCBzY3JhdGNoUGxhbmVDZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY3JhdGNoUGxhbmVOb3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5jb25zdCBzY3JhdGNoUGxhbmVzID0gbmV3IFZlY3RvcjQoKTtcclxuY29uc3Qgc2NyYXRjaFBsYW5lID0gbmV3IFBsYW5lKG5ldyBWZWN0b3IzKDEuMCwgMC4wLCAwLjApLCAwLjApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ3VsbGluZ1ZvbHVtZTtcclxuIiwiaW1wb3J0IEN1bGxpbmdWb2x1bWUgZnJvbSBcIi4uL2NvcmUvQ3VsbGluZ1ZvbHVtZVwiO1xyXG5pbXBvcnQgUmVuZGVyT2JqZWN0IGZyb20gXCIuLi9jb3JlL1JlbmRlck9iamVjdFwiO1xyXG5pbXBvcnQgTWF0cml4NCBmcm9tIFwiLi4vbWF0aC9NYXRyaXg0XCI7XHJcbmltcG9ydCBQbGFuZSBmcm9tIFwiLi4vbWF0aC9QbGFuZVwiO1xyXG5pbXBvcnQgVmVjdG9yMyBmcm9tIFwiLi4vbWF0aC9WZWN0b3IzXCI7XHJcbmltcG9ydCBTaGFkZXJEYXRhIGZyb20gXCIuLi9yZW5kZXIvU2hhZGVyRGF0YVwiO1xyXG5pbXBvcnQgVW5pZm9ybUJ1ZmZlciBmcm9tIFwiLi4vcmVuZGVyL1VuaWZvcm1CdWZmZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbWVyYSBleHRlbmRzIFJlbmRlck9iamVjdCB7XHJcbiAgcHJpdmF0ZSBfdmlld01hdHJpeDogTWF0cml4NDtcclxuICBwcm90ZWN0ZWQgX3Byb2plY3Rpb25NYXRyaXg6IE1hdHJpeDQ7XHJcbiAgY3VsbGluZ1ZvbHVtZTogQ3VsbGluZ1ZvbHVtZTtcclxuICBwcm9qZWN0TWF0cml4RGlydHk6IGJvb2xlYW47XHJcbiAgc2hhZGVyRGF0YTogU2hhZGVyRGF0YTtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLl92aWV3TWF0cml4ID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5pc0NhbWVyYSA9IHRydWU7XHJcbiAgICB0aGlzLmN1bGxpbmdWb2x1bWUgPSBuZXcgQ3VsbGluZ1ZvbHVtZSgpO1xyXG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcbiAgICB0aGlzLnByb2plY3RNYXRyaXhEaXJ0eSA9IHRydWU7XHJcbiAgICB0aGlzLmNyZWF0ZVNoYWRlckRhdGEoKTtcclxuICB9XHJcbiAgZ2V0IHZpZXdNYXRyaXgoKSB7XHJcbiAgICB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xyXG4gICAgTWF0cml4NC5pbnZlcnNlKHRoaXMubW9kZWxNYXRyaXgsIHRoaXMuX3ZpZXdNYXRyaXgpO1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdNYXRyaXg7XHJcbiAgfVxyXG4gIGdldCBwcm9qZWN0aW9uTWF0cml4KCkge1xyXG4gICAgdGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICByZXR1cm4gdGhpcy5fcHJvamVjdGlvbk1hdHJpeDtcclxuICB9XHJcbiAgZ2V0IGludmVyc2VWaWV3TWF0cml4KCkge1xyXG4gICAgdGhpcy51cGRhdGVNYXRyaXgoKTtcclxuICAgIHJldHVybiB0aGlzLm1vZGVsTWF0cml4O1xyXG4gIH1cclxuICBwdWJsaWMgdXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHt9XHJcbiAgLyoqXHJcbiAgICogZ2V0IGEgY3VsbGluZyB2b2x1bWUgZm9yIHRoaXMgZnJ1c3R1bS5cclxuICAgKi9cclxuICBnZXRDdWxsaW5nVm9sdW1lKCkge1xyXG4gICAgY29uc3QgY2xvbmVWaWV3TWF0cml4ID0gdGhpcy52aWV3TWF0cml4LmNsb25lKG5ldyBNYXRyaXg0KCkpO1xyXG4gICAgY29uc3QgdnBNYXRyaXggPSBNYXRyaXg0Lm11bHRpcGx5KFxyXG4gICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXgsXHJcbiAgICAgIGNsb25lVmlld01hdHJpeCxcclxuICAgICAgbmV3IE1hdHJpeDQoKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHBsYW5lcyA9IHRoaXMuY3VsbGluZ1ZvbHVtZS5wbGFuZXM7XHJcbiAgICBjb25zdCBtZSA9IHZwTWF0cml4O1xyXG4gICAgY29uc3QgbWUwID0gbWVbMF0sXHJcbiAgICAgIG1lMSA9IG1lWzFdLFxyXG4gICAgICBtZTIgPSBtZVsyXSxcclxuICAgICAgbWUzID0gbWVbM107XHJcbiAgICBjb25zdCBtZTQgPSBtZVs0XSxcclxuICAgICAgbWU1ID0gbWVbNV0sXHJcbiAgICAgIG1lNiA9IG1lWzZdLFxyXG4gICAgICBtZTcgPSBtZVs3XTtcclxuICAgIGNvbnN0IG1lOCA9IG1lWzhdLFxyXG4gICAgICBtZTkgPSBtZVs5XSxcclxuICAgICAgbWUxMCA9IG1lWzEwXSxcclxuICAgICAgbWUxMSA9IG1lWzExXTtcclxuICAgIGNvbnN0IG1lMTIgPSBtZVsxMl0sXHJcbiAgICAgIG1lMTMgPSBtZVsxM10sXHJcbiAgICAgIG1lMTQgPSBtZVsxNF0sXHJcbiAgICAgIG1lMTUgPSBtZVsxNV07XHJcbiAgICBwbGFuZXNbMF0gPSBuZXcgUGxhbmUoXHJcbiAgICAgIG5ldyBWZWN0b3IzKG1lMyAtIG1lMCwgbWU3IC0gbWU0LCBtZTExIC0gbWU4KSxcclxuICAgICAgbWUxNSAtIG1lMTJcclxuICAgICk7XHJcbiAgICBwbGFuZXNbMF0ubm9ybWFsaXplKCk7XHJcbiAgICBwbGFuZXNbMV0gPSBuZXcgUGxhbmUoXHJcbiAgICAgIG5ldyBWZWN0b3IzKG1lMyArIG1lMCwgbWU3ICsgbWU0LCBtZTExICsgbWU4KSxcclxuICAgICAgbWUxNSArIG1lMTJcclxuICAgICk7XHJcbiAgICBwbGFuZXNbMV0ubm9ybWFsaXplKCk7XHJcblxyXG4gICAgcGxhbmVzWzJdID0gbmV3IFBsYW5lKFxyXG4gICAgICBuZXcgVmVjdG9yMyhtZTMgKyBtZTEsIG1lNyArIG1lNSwgbWUxMSArIG1lOSksXHJcbiAgICAgIG1lMTUgKyBtZTEzXHJcbiAgICApO1xyXG4gICAgcGxhbmVzWzJdLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgIHBsYW5lc1szXSA9IG5ldyBQbGFuZShcclxuICAgICAgbmV3IFZlY3RvcjMobWUzIC0gbWUxLCBtZTcgLSBtZTUsIG1lMTEgLSBtZTkpLFxyXG4gICAgICBtZTE1IC0gbWUxM1xyXG4gICAgKTtcclxuICAgIHBsYW5lc1szXS5ub3JtYWxpemUoKTtcclxuXHJcbiAgICBwbGFuZXNbNF0gPSBuZXcgUGxhbmUoXHJcbiAgICAgIG5ldyBWZWN0b3IzKG1lMyAtIG1lMiwgbWU3IC0gbWU2LCBtZTExIC0gbWUxMCksXHJcbiAgICAgIG1lMTUgLSBtZTE0XHJcbiAgICApO1xyXG4gICAgcGxhbmVzWzRdLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgIHBsYW5lc1s1XSA9IG5ldyBQbGFuZShcclxuICAgICAgbmV3IFZlY3RvcjMobWUzICsgbWUyLCBtZTcgKyBtZTYsIG1lMTEgKyBtZTEwKSxcclxuICAgICAgbWUxNSArIG1lMTRcclxuICAgICk7XHJcbiAgICBwbGFuZXNbNV0ubm9ybWFsaXplKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuY3VsbGluZ1ZvbHVtZTtcclxuICB9XHJcbiAgcHJpdmF0ZSBjcmVhdGVTaGFkZXJEYXRhKCkge1xyXG4gICAgdGhpcy5zaGFkZXJEYXRhID0gbmV3IFNoYWRlckRhdGEoXCJjYW1lcmFcIiwgMCwgMSwgMSk7XHJcbiAgICBjb25zdCB1bmlmb3JtQnVmZmVyID0gbmV3IFVuaWZvcm1CdWZmZXIoKTtcclxuICAgIHVuaWZvcm1CdWZmZXIuc2V0TWF0cml4NChcInByb2plY3Rpb25NYXRyaXhcIiwgKCkgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5wcm9qZWN0aW9uTWF0cml4O1xyXG4gICAgfSk7XHJcbiAgICB1bmlmb3JtQnVmZmVyLnNldE1hdHJpeDQoXCJ2aWV3TWF0cml4XCIsICgpID0+IHtcclxuICAgICAgcmV0dXJuIHRoaXMudmlld01hdHJpeDtcclxuICAgIH0pO1xyXG4gICAgdW5pZm9ybUJ1ZmZlci5zZXRNYXRyaXg0KFwiaW52ZXJzZVZpZXdNYXRyaXhcIiwgKCkgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5pbnZlcnNlVmlld01hdHJpeDtcclxuICAgIH0pO1xyXG4gICAgdW5pZm9ybUJ1ZmZlci5zZXRGbG9hdFZlYzMoXCJwb3NpdGlvblwiLCAoKSA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnNoYWRlckRhdGEuc2V0VW5pZm9ybUJ1ZmZlcihcImNhbWVyYVwiLCB1bmlmb3JtQnVmZmVyKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEN1bGxpbmdWb2x1bWUgZnJvbSBcIi4uL2NvcmUvQ3VsbGluZ1ZvbHVtZVwiO1xyXG5pbXBvcnQgR01hdGggZnJvbSBcIi4uL21hdGgvTWF0aFwiO1xyXG5pbXBvcnQgTWF0cml4NCBmcm9tIFwiLi4vbWF0aC9NYXRyaXg0XCI7XHJcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4vQ2FtZXJhXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcnNwZWN0aXZlQ2FtZXJhIGV4dGVuZHMgQ2FtZXJhIHtcclxuICB4T2Zmc2V0OiBudW1iZXI7XHJcbiAgeU9mZnNldDogbnVtYmVyO1xyXG4gIGN1bGxpbmdWb2x1bWU6IGFueTtcclxuICBwcml2YXRlIF9hc3BlY3Q6IG51bWJlcjtcclxuICBwcml2YXRlIF9mb3Y6IG51bWJlcjtcclxuICBoZWlnaHQ6IG51bWJlcjtcclxuICB3aWR0aDogbnVtYmVyO1xyXG4gIGlzUGVyc3BlY3RpdmVDYW1lcmE6IGJvb2xlYW47XHJcbiAgbmVhcjogbnVtYmVyO1xyXG4gIGZhcjogbnVtYmVyO1xyXG4gIHRvcDogbnVtYmVyO1xyXG4gIGxlZnQ6IG51bWJlcjtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGZvdjogbnVtYmVyID0gNTAsXHJcbiAgICBhc3BlY3Q6IG51bWJlciA9IDEsXHJcbiAgICBuZWFyOiBudW1iZXIgPSAwLjEsXHJcbiAgICBmYXI6IG51bWJlciA9IDIwMDBcclxuICApIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLl9hc3BlY3QgPSBhc3BlY3Q7XHJcbiAgICB0aGlzLmZvdiA9IGZvdjtcclxuICAgIHRoaXMubmVhciA9IG5lYXI7XHJcbiAgICB0aGlzLmZhciA9IGZhcjtcclxuICAgIHRoaXMueE9mZnNldCA9IDA7XHJcbiAgICB0aGlzLnlPZmZzZXQgPSAwO1xyXG4gICAgdGhpcy5wcm9qZWN0TWF0cml4RGlydHkgPSB0cnVlO1xyXG4gICAgdGhpcy51cGRhdGVDYW1lcmFQYXJtcygpO1xyXG4gICAgdGhpcy5jdWxsaW5nVm9sdW1lID0gbmV3IEN1bGxpbmdWb2x1bWUoKTtcclxuICAgIHRoaXMuaXNQZXJzcGVjdGl2ZUNhbWVyYSA9IHRydWU7XHJcbiAgfVxyXG4gIGdldCBhc3BlY3QoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9hc3BlY3Q7XHJcbiAgfVxyXG5cclxuICBzZXQgYXNwZWN0KHY6IG51bWJlcikge1xyXG4gICAgdGhpcy5wcm9qZWN0TWF0cml4RGlydHkgPSB0cnVlO1xyXG4gICAgdGhpcy5fYXNwZWN0ID0gdjtcclxuICB9XHJcbiAgZ2V0IGZvdigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZvdjtcclxuICB9XHJcblxyXG4gIHNldCBmb3YodjogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnByb2plY3RNYXRyaXhEaXJ0eSA9IHRydWU7XHJcbiAgICB0aGlzLl9mb3YgPSB2O1xyXG4gIH1cclxuICBwcml2YXRlIHVwZGF0ZUNhbWVyYVBhcm1zKCkge1xyXG4gICAgdGhpcy50b3AgPSB0aGlzLm5lYXIgKiBNYXRoLnRhbigwLjUgKiBHTWF0aC5SQURJQU5TX1BFUl9ERUdSRUUgKiB0aGlzLmZvdik7XHJcbiAgICB0aGlzLmhlaWdodCA9IDIgKiB0aGlzLnRvcDtcclxuICAgIHRoaXMud2lkdGggPSB0aGlzLmFzcGVjdCAqIHRoaXMuaGVpZ2h0O1xyXG4gICAgdGhpcy5sZWZ0ID0gLTAuNSAqIHRoaXMud2lkdGg7XHJcbiAgfVxyXG4gIHB1YmxpYyB1cGRhdGVQcm9qZWN0aW9uTWF0cml4KCkge1xyXG4gICAgaWYgKHRoaXMucHJvamVjdE1hdHJpeERpcnR5KSB7XHJcbiAgICAgIHRoaXMudXBkYXRlQ2FtZXJhUGFybXMoKTtcclxuICAgICAgdGhpcy5fcHJvamVjdGlvbk1hdHJpeCA9IE1hdHJpeDQubWFrZVBlcnNwZWN0aXZlKFxyXG4gICAgICAgIHRoaXMubGVmdCxcclxuICAgICAgICB0aGlzLmxlZnQgKyB0aGlzLndpZHRoLFxyXG4gICAgICAgIHRoaXMudG9wLFxyXG4gICAgICAgIHRoaXMudG9wIC0gdGhpcy5oZWlnaHQsXHJcbiAgICAgICAgdGhpcy5uZWFyLFxyXG4gICAgICAgIHRoaXMuZmFyXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMucHJvamVjdE1hdHJpeERpcnR5ID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcbmltcG9ydCBSZW5kZXJPYmplY3QgZnJvbSBcIi4uL2NvcmUvUmVuZGVyT2JqZWN0XCI7XG5pbXBvcnQgQ29sb3IgZnJvbSBcIi4uL21hdGgvQ29sb3JcIjtcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IEJhc2VTaGFkb3cgfSBmcm9tIFwiLi9zaGFkb3dzL0Jhc2VTaGFkb3dcIjtcblxuZXhwb3J0IGNsYXNzIExpZ2h0IHtcblx0cHJpdmF0ZSBfY29sb3I6IFZlY3RvcjM7XG5cdHR5cGU6IHN0cmluZztcblx0cHJpdmF0ZSBfaW50ZW5zaXR5OiBudW1iZXI7XG5cdGRpcnR5OiBib29sZWFuO1xuXHRjb2xvckRpcnR5OiBib29sZWFuO1xuXHRpbnRlbnNpdHlEaXJ0eTogYm9vbGVhbjtcblx0cHJpdmF0ZSBfcG9zaXRpb246IFZlY3RvcjM7XG5cdHBvc2l0aW9uRGlydHk6IGJvb2xlYW47XG5cdHB1YmxpYyBfc2hhZG93OiBCYXNlU2hhZG93O1xuXHRwdWJsaWMgcG9zaXRpb25WQzogVmVjdG9yMztcblxuXHRjb25zdHJ1Y3Rvcihjb2xvcjogVmVjdG9yMywgaW50ZW5zaXR5OiBudW1iZXIpIHtcblx0XHR0aGlzLl9jb2xvciA9IFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihjb2xvciwgaW50ZW5zaXR5LCBuZXcgVmVjdG9yMygpKTtcblx0XHR0aGlzLl9pbnRlbnNpdHkgPSBpbnRlbnNpdHk7XG5cdFx0dGhpcy5fcG9zaXRpb24gPSBuZXcgVmVjdG9yMygwLCAwLCAwKTtcblx0XHR0aGlzLnBvc2l0aW9uRGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuY29sb3JEaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5pbnRlbnNpdHlEaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5fc2hhZG93ID0gbnVsbDtcblx0fVxuXG5cdGdldCBwb3NpdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcG9zaXRpb247XG5cdH1cblxuXHRzZXQgcG9zaXRpb24odmFsdWUpIHtcblx0XHR0aGlzLnBvc2l0aW9uRGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX3Bvc2l0aW9uID0gdmFsdWU7XG5cdH1cblxuXHRnZXQgY29sb3IoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbG9yO1xuXHR9XG5cblx0c2V0IGNvbG9yKHZhbHVlKSB7XG5cdFx0dGhpcy5jb2xvckRpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLl9jb2xvciA9IHZhbHVlO1xuXHR9XG5cblx0c2V0IGludGVuc2l0eSh2YWx1ZSkge1xuXHRcdHRoaXMuY29sb3IgPSBWZWN0b3IzLm11bHRpcGx5QnlTY2FsYXIodGhpcy5jb2xvciwgdmFsdWUsIG5ldyBWZWN0b3IzKCkpO1xuXHRcdHRoaXMuaW50ZW5zaXR5RGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX2ludGVuc2l0eSA9IHZhbHVlO1xuXHR9XG5cblx0Z2V0IGludGVuc2l0eSgpIHtcblx0XHRyZXR1cm4gdGhpcy5faW50ZW5zaXR5O1xuXHR9XG5cblx0Z2V0IHNoYWRvdygpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2hhZG93O1xuXHR9XG5cblx0c2V0IHNoYWRvdyh2YWx1ZSkge1xuXHRcdHRoaXMuX3NoYWRvdyA9IHZhbHVlO1xuXHR9XG5cblx0dXBkYXRlKGNhbWVyYTogQ2FtZXJhKSB7XG5cdFx0Y29uc3Qgdmlld01hdHJpeCA9IGNhbWVyYS52aWV3TWF0cml4O1xuXHRcdGxldCBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb24uY2xvbmUoKTtcblx0XHQvLyBwb3NpdGlvbiA9IHBvc2l0aW9uLmFwcGx5TWF0cml4NCh2aWV3TWF0cml4KTtcblx0XHR0aGlzLnBvc2l0aW9uVkMgPSBwb3NpdGlvbjtcblx0fVxufVxuIiwiaW1wb3J0IENhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0NhbWVyYVwiO1xuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgTGlnaHQgfSBmcm9tIFwiLi9MaWdodFwiO1xuXG5leHBvcnQgY2xhc3MgU3BvdExpZ2h0IGV4dGVuZHMgTGlnaHQge1xuXHRwcml2YXRlIF9kaXN0YW5jZTogbnVtYmVyO1xuXHRwcml2YXRlIF9hbmdsZTogbnVtYmVyO1xuXHRwcml2YXRlIF9wZW51bWJyYTogbnVtYmVyO1xuXHRwcml2YXRlIF9kZWNheTogbnVtYmVyO1xuXHRkZWNheURpcnR5OiBib29sZWFuO1xuXHRkaXN0YW5jZURpcnR5OiBib29sZWFuO1xuXHRwcml2YXRlIF9jb25lQ29zOiBudW1iZXI7XG5cdHByaXZhdGUgX3BlbnVtYnJhQ29zOiBudW1iZXI7XG5cdGNvbmVDb3NEaXJ0eTogYm9vbGVhbjtcblx0cGVudW1icmFEaXJ0eTogYm9vbGVhbjtcblx0YW5nbGVEaXJ0eTogYm9vbGVhbjtcblx0cGVudW1icmFDb3NEaXJ0eTogYm9vbGVhbjtcblx0cHVibGljIGRpcnRlY3RWQzogVmVjdG9yMztcblx0ZGlydGVjdERpcnR5OiBib29sZWFuO1xuXHRwcml2YXRlIF90YXJnZXQ6IFZlY3RvcjM7XG5cdGNvbnN0cnVjdG9yKGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlID0gMCwgYW5nbGUgPSA2MCwgcGVudW1icmEgPSA2MCwgZGVjYXkgPSAxKSB7XG5cdFx0c3VwZXIoY29sb3IsIGludGVuc2l0eSk7XG5cdFx0dGhpcy5fZGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHR0aGlzLl9hbmdsZSA9IChhbmdsZSAvIDE4MCkgKiBNYXRoLlBJO1xuXHRcdHRoaXMuX3BlbnVtYnJhID0gKHBlbnVtYnJhIC8gMTgwKSAqIE1hdGguUEk7XG5cdFx0dGhpcy5fZGVjYXkgPSBkZWNheTtcblx0XHR0aGlzLnR5cGUgPSBcInNwb3RcIjtcblx0XHR0aGlzLl90YXJnZXQgPSBuZXcgVmVjdG9yMygwLCAwLCAwKTtcblx0XHR0aGlzLmRpcnRlY3REaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5hbmdsZURpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLnBlbnVtYnJhRGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuZGlzdGFuY2VEaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5kZWNheURpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLmNvbmVDb3NEaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5wZW51bWJyYUNvc0RpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLnVwZGF0ZUNvbmVDb3NPclBlbnVtYnJhQ29zKCk7XG5cdH1cblx0c2V0IHRhcmdldCh2YWx1ZSkge1xuXHRcdHRoaXMuZGlydGVjdERpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLl90YXJnZXQgPSB2YWx1ZTtcblx0fVxuXHRnZXQgZGlyZWN0aW9uYWwoKSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRWZWN0b3IzLnN1YnRyYWN0KHRoaXMucG9zaXRpb24sIHRoaXMuX3RhcmdldCwgcmVzdWx0KTtcblx0XHRyZXR1cm4gVmVjdG9yMy5ub3JtYWxpemUocmVzdWx0LCBuZXcgVmVjdG9yMygpKTtcblx0fVxuXHRnZXQgYW5nbGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2FuZ2xlO1xuXHR9XG5cdHNldCBhbmdsZSh2YWx1ZSkge1xuXHRcdHRoaXMuYW5nbGVEaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5fYW5nbGUgPSAodmFsdWUgLyAxODApICogTWF0aC5QSTtcblx0XHR0aGlzLnVwZGF0ZUNvbmVDb3NPclBlbnVtYnJhQ29zKCk7XG5cdH1cblx0Z2V0IHBlbnVtYnJhKCkge1xuXHRcdHJldHVybiB0aGlzLl9wZW51bWJyYTtcblx0fVxuXHRzZXQgcGVudW1icmEodmFsdWUpIHtcblx0XHR0aGlzLnBlbnVtYnJhRGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX3BlbnVtYnJhID0gKHZhbHVlIC8gMTgwKSAqIE1hdGguUEk7XG5cdFx0dGhpcy51cGRhdGVDb25lQ29zT3JQZW51bWJyYUNvcygpO1xuXHR9XG5cdHNldCBkaXN0YW5jZSh2YWx1ZSkge1xuXHRcdHRoaXMuZGlzdGFuY2VEaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5fZGlzdGFuY2UgPSB2YWx1ZTtcblx0fVxuXHRnZXQgZGlzdGFuY2UoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2Rpc3RhbmNlO1xuXHR9XG5cdHNldCBkZWNheSh2YWx1ZSkge1xuXHRcdHRoaXMuZGVjYXlEaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5fZGVjYXkgPSB2YWx1ZTtcblx0fVxuXHRnZXQgZGVjYXkoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RlY2F5O1xuXHR9XG5cdHNldCBjb25lQ29zKHZhbHVlKSB7XG5cdFx0dGhpcy5jb25lQ29zRGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX2NvbmVDb3MgPSB2YWx1ZTtcblx0fVxuXHRnZXQgY29uZUNvcygpIHtcblx0XHRyZXR1cm4gdGhpcy5fY29uZUNvcztcblx0fVxuXHRzZXQgcGVudW1icmFDb3ModmFsdWUpIHtcblx0XHR0aGlzLnBlbnVtYnJhQ29zRGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX3BlbnVtYnJhQ29zID0gdmFsdWU7XG5cdH1cblx0Z2V0IHBlbnVtYnJhQ29zKCkge1xuXHRcdHJldHVybiB0aGlzLl9wZW51bWJyYUNvcztcblx0fVxuXHRwcml2YXRlIHVwZGF0ZUNvbmVDb3NPclBlbnVtYnJhQ29zKCkge1xuXHRcdHRoaXMuX2NvbmVDb3MgPSBNYXRoLmNvcyh0aGlzLmFuZ2xlKTtcblx0XHR0aGlzLl9wZW51bWJyYUNvcyA9IE1hdGguY29zKHRoaXMuYW5nbGUgKyB0aGlzLnBlbnVtYnJhKTtcblx0fVxuXHR1cGRhdGUoY2FtZXJhOiBDYW1lcmEpOiB2b2lkIHtcblx0XHRzdXBlci51cGRhdGUoY2FtZXJhKTtcblx0XHRsZXQgZGlyZWN0aW9uYWwgPSB0aGlzLmRpcmVjdGlvbmFsLmNsb25lKCk7XG5cdFx0Y29uc3Qgdmlld01hdHJpeCA9IGNhbWVyYS52aWV3TWF0cml4O1xuXHRcdC8vdGhpcy5kaXJ0ZWN0VkMgPSBkaXJlY3Rpb25hbC50cmFuc2Zvcm1EaXJlY3Rpb24odmlld01hdHJpeCk7XG5cdFx0dGhpcy5kaXJ0ZWN0VkMgPSBkaXJlY3Rpb25hbDtcblx0fVxufVxuLy91bmlmb3JtXG4vLyBjb2xvcjoge30sXG4vLyBwb3NpdGlvbjoge30sXG4vLyBkaXJlY3Rpb246IHt9LFxuLy8gZGlzdGFuY2U6IHt9LFxuLy8gY29uZUNvczoge30sXG4vLyBwZW51bWJyYUNvczoge30sXG4vLyBkZWNheToge31cbiIsImltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4uL0xpZ2h0XCI7XG5pbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi8uLi9jYW1lcmEvQ2FtZXJhXCI7XG5pbXBvcnQgeyBUZXh0dXJlRm9ybWF0LCBUZXh0dXJlVXNhZ2UgfSBmcm9tIFwiLi4vLi4vY29yZS9XZWJHUFVDb25zdGFudFwiO1xuaW1wb3J0IFRleHR1cmUgZnJvbSBcIi4uLy4uL3JlbmRlci9UZXh0dXJlXCI7XG5cbmV4cG9ydCBjbGFzcyBCYXNlU2hhZG93IHtcblx0cHJvdGVjdGVkIF9zaGFkb3dNYXBTaXplOiBudW1iZXI7XG5cdHByb3RlY3RlZCBfY2FtZXJhOiBDYW1lcmE7XG5cdHByb3RlY3RlZCBfc2hhZG93TWFwOiBUZXh0dXJlO1xuXG5cdGNvbnN0cnVjdG9yKHNoYWRvd01hcFNpemU6IG51bWJlciwgY2FtZXJhOiBDYW1lcmEpIHtcblx0XHR0aGlzLl9zaGFkb3dNYXBTaXplID0gc2hhZG93TWFwU2l6ZTtcblx0XHR0aGlzLl9jYW1lcmEgPSBjYW1lcmE7XG5cblx0XHR0aGlzLl9pbml0KCk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0U2hhZG93TWFwVGV4dHVyZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2hhZG93TWFwO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9pbml0KCkge1xuXHRcdHRoaXMuX2luaXRTaGFkb3dNYXBUZXh0dXJlKCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2luaXRTaGFkb3dNYXBUZXh0dXJlKCkge1xuXHRcdHRoaXMuX2NyZWF0ZVNoYWRvd01hcFRleHR1cmUoKTtcblx0fVxuXG5cdHByb3RlY3RlZCBfY3JlYXRlU2hhZG93TWFwVGV4dHVyZSgpIHtcblx0XHR0aGlzLl9zaGFkb3dNYXAgPSBuZXcgVGV4dHVyZSh7XG5cdFx0XHRzaXplOiB7XG5cdFx0XHRcdHdpZHRoOiB0aGlzLl9zaGFkb3dNYXBTaXplLFxuXHRcdFx0XHRoZWlnaHQ6IHRoaXMuX3NoYWRvd01hcFNpemUsXG5cdFx0XHRcdGRlcHRoOiAxXG5cdFx0XHR9LFxuXHRcdFx0Zm9ybWF0OiBUZXh0dXJlRm9ybWF0LkRlcHRoMzJGbG9hdCxcblx0XHRcdHVzYWdlOiBUZXh0dXJlVXNhZ2UuUmVuZGVyQXR0YWNobWVudCB8IFRleHR1cmVVc2FnZS5UZXh0dXJlQmluZGluZ1xuXHRcdH0pO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBMaWdodCB9IGZyb20gXCIuLi9MaWdodFwiO1xuaW1wb3J0IHsgQmFzZVNoYWRvdyB9IGZyb20gXCIuL0Jhc2VTaGFkb3dcIjtcbmltcG9ydCBQZXJzcGVjdGl2ZUNhbWVyYSBmcm9tIFwiLi4vLi4vY2FtZXJhL1BlcnNwZWN0aXZlQ2FtZXJhXCI7XG5cbmV4cG9ydCBjbGFzcyBQb2ludExpZ2h0U2hhZG93IGV4dGVuZHMgQmFzZVNoYWRvdyB7XG5cdHB1YmxpYyB0eXBlOiBzdHJpbmc7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdGNvbnN0IGNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSg5MCwgMSwgMC41LCA1MDApO1xuXHRcdHN1cGVyKDEwMjQsIGNhbWVyYSk7XG5cdFx0dGhpcy50eXBlID0gXCJwb2ludExpZ2h0U2hhZG93XCI7XG5cdH1cbn1cbiIsImltcG9ydCBDb2xvciBmcm9tIFwiLi4vbWF0aC9Db2xvclwiO1xuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgTGlnaHQgfSBmcm9tIFwiLi9MaWdodFwiO1xuaW1wb3J0IHsgUG9pbnRMaWdodFNoYWRvdyB9IGZyb20gXCIuL3NoYWRvd3MvUG9pbnRMaWdodFNoYWRvd1wiO1xuXG5leHBvcnQgY2xhc3MgUG9pbnRMaWdodCBleHRlbmRzIExpZ2h0IHtcblx0cHJpdmF0ZSBfZGlzdGFuY2U6IG51bWJlcjtcblx0cHJpdmF0ZSBfZGVjYXk6IG51bWJlcjtcblx0ZGlzdGFuY2VEaXJ0eTogYm9vbGVhbjtcblx0ZGVjYXlEaXJ0eTogYm9vbGVhbjtcblx0Y29uc3RydWN0b3IoXG5cdFx0Y29sb3I6IFZlY3RvcjMsXG5cdFx0aW50ZW5zaXR5OiBudW1iZXIsXG5cdFx0ZGlzdGFuY2U6IG51bWJlciA9IDAsXG5cdFx0ZGVjYXk6IG51bWJlciA9IDEsXG5cdFx0b3BlblNoYWRvdzogQm9vbGVhbiA9IHRydWVcblx0KSB7XG5cdFx0c3VwZXIoY29sb3IsIGludGVuc2l0eSk7XG5cdFx0dGhpcy5fZGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHR0aGlzLl9kZWNheSA9IGRlY2F5O1xuXHRcdHRoaXMuZGlzdGFuY2VEaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5kZWNheURpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLnR5cGUgPSBcInBvaW50XCI7XG5cdFx0aWYgKG9wZW5TaGFkb3cpIHRoaXMuc2hhZG93ID0gbmV3IFBvaW50TGlnaHRTaGFkb3coKTtcblx0fVxuXHRzZXQgZGlzdGFuY2UodmFsdWUpIHtcblx0XHR0aGlzLmRpc3RhbmNlRGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX2Rpc3RhbmNlID0gdmFsdWU7XG5cdH1cblx0Z2V0IGRpc3RhbmNlKCkge1xuXHRcdHJldHVybiB0aGlzLl9kaXN0YW5jZTtcblx0fVxuXHRzZXQgZGVjYXkodmFsdWUpIHtcblx0XHR0aGlzLmRlY2F5RGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX2RlY2F5ID0gdmFsdWU7XG5cdH1cblx0Z2V0IGRlY2F5KCkge1xuXHRcdHJldHVybiB0aGlzLl9kZWNheTtcblx0fVxufVxuLy91bmlmb3JtXG4vLyBjb2xvcjoge30sXG4vLyBwb3NpdGlvbjoge30sXG4vLyBkZWNheToge30sXG4vLyBkaXN0YW5jZToge31cbiIsImltcG9ydCBNYXRyaXg0IGZyb20gXCIuLi9tYXRoL01hdHJpeDRcIjtcclxuaW1wb3J0IENhbWVyYSBmcm9tIFwiLi9DYW1lcmFcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3J0aG9ncmFwaGljQ2FtZXJhIGV4dGVuZHMgQ2FtZXJhIHtcclxuICBwcml2YXRlIHJpZ2h0OiBudW1iZXI7XHJcbiAgaXNPcnRob2dyYXBoaWNDYW1lcmE6IGJvb2xlYW47XHJcbiAgYm90dG9tOiBudW1iZXI7XHJcbiAgbGVmdDogbnVtYmVyO1xyXG4gIG5lYXI6IG51bWJlcjtcclxuICBmYXI6IG51bWJlcjtcclxuICB0b3A6IG51bWJlcjtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGxlZnQ6IG51bWJlciA9IC0xLFxyXG4gICAgcmlnaHQ6IG51bWJlciA9IDEsXHJcbiAgICB0b3A6IG51bWJlciA9IDEsXHJcbiAgICBib3R0b206IG51bWJlciA9IC0xLFxyXG4gICAgbmVhcjogbnVtYmVyID0gMC4xLFxyXG4gICAgZmFyOiBudW1iZXIgPSAyMDAwXHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5uZWFyID0gbmVhcjtcclxuICAgIHRoaXMuZmFyID0gZmFyO1xyXG4gICAgdGhpcy5sZWZ0ID0gbGVmdDtcclxuICAgIHRoaXMudG9wID0gdG9wO1xyXG4gICAgdGhpcy5ib3R0b20gPSBib3R0b207XHJcbiAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XHJcbiAgICB0aGlzLmlzT3J0aG9ncmFwaGljQ2FtZXJhID0gdHJ1ZTtcclxuICB9XHJcbiAgcHJpdmF0ZSB1cGRhdGVDYW1lcmFQYXJtcygpIHtcclxuICAgIGNvbnN0IGR4ID0gKHRoaXMucmlnaHQgLSB0aGlzLmxlZnQpIC8gMjtcclxuICAgIGNvbnN0IGR5ID0gKHRoaXMudG9wIC0gdGhpcy5ib3R0b20pIC8gMjtcclxuICAgIGNvbnN0IGN4ID0gKHRoaXMucmlnaHQgKyB0aGlzLmxlZnQpIC8gMjtcclxuICAgIGNvbnN0IGN5ID0gKHRoaXMudG9wICsgdGhpcy5ib3R0b20pIC8gMjtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGxlZnQ6IGN4IC0gZHgsXHJcbiAgICAgIHJpZ2h0OiBjeCArIGR4LFxyXG4gICAgICB0b3A6IGN5ICsgZHksXHJcbiAgICAgIGJvdHRvbTogY3kgLSBkeSxcclxuICAgIH07XHJcbiAgfVxyXG4gIHB1YmxpYyB1cGRhdGVQcm9qZWN0aW9uTWF0cml4KCkge1xyXG4gICAgaWYgKHRoaXMucHJvamVjdE1hdHJpeERpcnR5KSB7XHJcbiAgICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tIH0gPSB0aGlzLnVwZGF0ZUNhbWVyYVBhcm1zKCk7XHJcbiAgICAgIHRoaXMuX3Byb2plY3Rpb25NYXRyaXggPSBNYXRyaXg0Lm1ha2VPcnRob2dyYXBoaWMoXHJcbiAgICAgICAgbGVmdCxcclxuICAgICAgICByaWdodCxcclxuICAgICAgICB0b3AsXHJcbiAgICAgICAgYm90dG9tLFxyXG4gICAgICAgIHRoaXMubmVhcixcclxuICAgICAgICB0aGlzLmZhclxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLnByb2plY3RNYXRyaXhEaXJ0eSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBMaWdodCB9IGZyb20gXCIuLi9MaWdodFwiO1xuaW1wb3J0IHsgQmFzZVNoYWRvdyB9IGZyb20gXCIuL0Jhc2VTaGFkb3dcIjtcbmltcG9ydCBPcnRob2dyYXBoaWNDYW1lcmEgZnJvbSBcIi4uLy4uL2NhbWVyYS9PcnRob2dyYXBoaWNDYW1lcmFcIjtcblxuZXhwb3J0IGNsYXNzIERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZXh0ZW5kcyBCYXNlU2hhZG93IHtcblx0cHVibGljIHR5cGU6IHN0cmluZztcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0Y29uc3QgY2FtZXJhID0gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSgtNSwgNSwgNSwgLTUsIDAuNSwgNTAwKTtcblx0XHRzdXBlcigxMDI0LCBjYW1lcmEpO1xuXHRcdHRoaXMudHlwZSA9IFwiZGlyZWN0aW9uYWxMaWdodFNoYWRvd1wiO1xuXHR9XG59XG4iLCJpbXBvcnQgQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvQ2FtZXJhXCI7XG5pbXBvcnQgQ29sb3IgZnJvbSBcIi4uL21hdGgvQ29sb3JcIjtcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4vTGlnaHRcIjtcbmltcG9ydCB7IERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgfSBmcm9tIFwiLi9zaGFkb3dzL0RpcmVjdGlvbmFsTGlnaHRTaGFkb3dcIjtcblxuZXhwb3J0IGNsYXNzIERpcmVjdGlvbmFsTGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cdHByaXZhdGUgX2RpcmVjdGlvbmFsOiBWZWN0b3IzO1xuXHRkaXJ0ZWN0RGlydHk6IGJvb2xlYW47XG5cdHB1YmxpYyBkaXJ0ZWN0VkM6IFZlY3RvcjM7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNvbG9yOiBWZWN0b3IzLFxuXHRcdGludGVuc2l0eTogbnVtYmVyLFxuXHRcdGRpcmVjdGlvbmFsOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoMSwgMSwgMCksXG5cdFx0b3BlblNoYWRvdzogQm9vbGVhbiA9IHRydWVcblx0KSB7XG5cdFx0c3VwZXIoY29sb3IsIGludGVuc2l0eSk7XG5cdFx0dGhpcy50eXBlID0gXCJkaXJlY3Rpb25hbFwiO1xuXHRcdHRoaXMuX2RpcmVjdGlvbmFsID0gZGlyZWN0aW9uYWw7XG5cdFx0dGhpcy5kaXJ0ZWN0RGlydHkgPSB0cnVlO1xuXHRcdGlmIChvcGVuU2hhZG93KSB0aGlzLnNoYWRvdyA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0U2hhZG93KCk7XG5cdH1cblx0c2V0IGRpcmVjdGlvbmFsKHZhbHVlKSB7XG5cdFx0dGhpcy5kaXJ0ZWN0RGlydHkgPSB0cnVlO1xuXHRcdHRoaXMuX2RpcmVjdGlvbmFsID0gdmFsdWU7XG5cdH1cblx0Z2V0IGRpcmVjdGlvbmFsKCkge1xuXHRcdHJldHVybiBWZWN0b3IzLm5vcm1hbGl6ZSh0aGlzLl9kaXJlY3Rpb25hbCwgbmV3IFZlY3RvcjMoKSk7XG5cdH1cblx0dXBkYXRlKGNhbWVyYTogQ2FtZXJhKTogdm9pZCB7XG5cdFx0c3VwZXIudXBkYXRlKGNhbWVyYSk7XG5cdFx0bGV0IGRpcmVjdGlvbmFsID0gdGhpcy5kaXJlY3Rpb25hbC5jbG9uZSgpO1xuXHRcdGNvbnN0IHZpZXdNYXRyaXggPSBjYW1lcmEudmlld01hdHJpeDtcblx0XHQvLyB0aGlzLmRpcnRlY3RWQyA9IGRpcmVjdGlvbmFsLnRyYW5zZm9ybURpcmVjdGlvbih2aWV3TWF0cml4KTtcblx0XHR0aGlzLmRpcnRlY3RWQyA9IGRpcmVjdGlvbmFsLm5vcm1hbGl6ZSgpO1xuXHR9XG59XG4vL3VuaWZvcm1cbi8vIGRpcmVjdGlvbjoge30sXG4vLyBjb2xvcjoge31cbiIsImltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tIFwiLi4vbWF0aC9RdWF0ZXJuaW9uXCI7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvVmVjdG9yM1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKG51bTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpIHtcclxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobnVtLCBtaW4pLCBtYXgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9GbG9hdChudW06IG51bWJlciB8IHVuZGVmaW5lZCwgZGVmYXVsdFZhbHVlID0gMSkge1xyXG4gIGNvbnN0IG4gPSBudW0gIT09IHVuZGVmaW5lZCA/IG51bSA6IGRlZmF1bHRWYWx1ZTtcclxuICBpZiAoTnVtYmVyLmlzSW50ZWdlcihuKSkge1xyXG4gICAgcmV0dXJuIGAke259LjBgO1xyXG4gIH1cclxuICByZXR1cm4gbjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVHlwZWRBcnJheSA9XHJcbiAgfCBJbnQ4QXJyYXlcclxuICB8IFVpbnQ4QXJyYXlcclxuICB8IEludDE2QXJyYXlcclxuICB8IFVpbnQxNkFycmF5XHJcbiAgfCBVaW50MzJBcnJheVxyXG4gIHwgRmxvYXQzMkFycmF5O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5ld1R5cGVkQXJyYXkoXHJcbiAgdHlwZTogbnVtYmVyLFxyXG4gIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXHJcbiAgYnl0ZU9mZnNldDogbnVtYmVyLFxyXG4gIGxlbmd0aDogbnVtYmVyXHJcbikge1xyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSA1MTIwOlxyXG4gICAgICByZXR1cm4gbmV3IEludDhBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XHJcbiAgICBjYXNlIDUxMjE6XHJcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XHJcbiAgICBjYXNlIDUxMjI6XHJcbiAgICAgIHJldHVybiBuZXcgSW50MTZBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XHJcbiAgICBjYXNlIDUxMjM6XHJcbiAgICAgIHJldHVybiBuZXcgVWludDE2QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xyXG4gICAgY2FzZSA1MTI1OlxyXG4gICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcclxuICAgIGNhc2UgNTEyNjpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjb21wb25lbnQgdHlwZVwiKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0luZGljZXMoYXJyYXk6IFR5cGVkQXJyYXkpOiBVaW50MTZBcnJheSB8IFVpbnQzMkFycmF5IHtcclxuICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50MTZBcnJheSB8fCBhcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5KSB7XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbiAgfVxyXG4gIGxldCB0b0FycmF5O1xyXG4gIGlmIChhcnJheSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkge1xyXG4gICAgdG9BcnJheSA9IG5ldyBVaW50MzJBcnJheShhcnJheS5sZW5ndGgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0b0FycmF5ID0gbmV3IFVpbnQxNkFycmF5KGFycmF5Lmxlbmd0aCk7XHJcbiAgfVxyXG4gIGFycmF5LmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICB0b0FycmF5W2luZGV4XSA9IGVsZW1lbnQ7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHRvQXJyYXk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBqb2luQXJyYXkoYXJyYXlzOiBBcnJheTxGbG9hdDMyQXJyYXk+KSB7XHJcbiAgbGV0IGxlbmd0aCA9IDA7XHJcbiAgYXJyYXlzLmZvckVhY2goKGFycmF5KSA9PiB7XHJcbiAgICBsZW5ndGggKz0gYXJyYXkubGVuZ3RoO1xyXG4gIH0pO1xyXG4gIGNvbnN0IGpvaW5lZCA9IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKTtcclxuICBsZW5ndGggPSAwO1xyXG4gIGFycmF5cy5mb3JFYWNoKChhcnJheSkgPT4ge1xyXG4gICAgam9pbmVkLnNldChhcnJheSwgbGVuZ3RoKTtcclxuICAgIGxlbmd0aCArPSBhcnJheS5sZW5ndGg7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGpvaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdQVUJ1ZmZlcihcclxuICBhcnJheTogVHlwZWRBcnJheSxcclxuICB1c2FnZTogbnVtYmVyLFxyXG4gIGRldmljZTogR1BVRGV2aWNlXHJcbikge1xyXG4gIGNvbnN0IGJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xyXG4gICAgc2l6ZTogKGFycmF5LmJ5dGVMZW5ndGggKyAzKSAmIH4zLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcclxuICAgIHVzYWdlLFxyXG4gICAgbWFwcGVkQXRDcmVhdGlvbjogdHJ1ZSxcclxuICB9KTtcclxuICBsZXQgd3JpdGVBcmFyeTtcclxuICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpIHtcclxuICAgIHdyaXRlQXJhcnkgPSBuZXcgSW50OEFycmF5KGJ1ZmZlci5nZXRNYXBwZWRSYW5nZSgpKTtcclxuICB9IGVsc2UgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xyXG4gICAgd3JpdGVBcmFyeSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlci5nZXRNYXBwZWRSYW5nZSgpKTtcclxuICB9IGVsc2UgaWYgKGFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSkge1xyXG4gICAgd3JpdGVBcmFyeSA9IG5ldyBJbnQxNkFycmF5KGJ1ZmZlci5nZXRNYXBwZWRSYW5nZSgpKTtcclxuICB9IGVsc2UgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkpIHtcclxuICAgIHdyaXRlQXJhcnkgPSBuZXcgVWludDE2QXJyYXkoYnVmZmVyLmdldE1hcHBlZFJhbmdlKCkpO1xyXG4gIH0gZWxzZSBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSkge1xyXG4gICAgd3JpdGVBcmFyeSA9IG5ldyBVaW50MzJBcnJheShidWZmZXIuZ2V0TWFwcGVkUmFuZ2UoKSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHdyaXRlQXJhcnkgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5nZXRNYXBwZWRSYW5nZSgpKTtcclxuICB9XHJcbiAgd3JpdGVBcmFyeS5zZXQoYXJyYXkpO1xyXG4gIGJ1ZmZlci51bm1hcCgpO1xyXG4gIHJldHVybiBidWZmZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZU5vcm1hbHMoXHJcbiAgaW5kaWNlczogVHlwZWRBcnJheSB8IG51bGwsXHJcbiAgcG9zaXRpb25zOiBUeXBlZEFycmF5XHJcbikge1xyXG4gIGNvbnN0IG5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KHBvc2l0aW9ucy5sZW5ndGgpO1xyXG4gIGNvbnN0IHZlcnRleENvdW50ID0gaW5kaWNlcyA/IGluZGljZXMubGVuZ3RoIDogcG9zaXRpb25zLmxlbmd0aDtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRleENvdW50OyBpICs9IDMpIHtcclxuICAgIGNvbnN0IHRyaUluZGljZXMgPSBbXTtcclxuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgMzsgbiArPSAxKSB7XHJcbiAgICAgIGlmIChpbmRpY2VzKSB7XHJcbiAgICAgICAgdHJpSW5kaWNlcy5wdXNoKGluZGljZXNbaSArIG5dKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0cmlJbmRpY2VzLnB1c2goaSArIG4pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCB0cmlhbmdsZSA9IHRyaUluZGljZXMubWFwKCh2ZXJ0ZXhJbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBpbmRleCA9IHZlcnRleEluZGV4ICogMztcclxuICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKFxyXG4gICAgICAgIHBvc2l0aW9uc1tpbmRleF0sXHJcbiAgICAgICAgcG9zaXRpb25zW2luZGV4ICsgMV0sXHJcbiAgICAgICAgcG9zaXRpb25zW2luZGV4ICsgMl1cclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgZHYxID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIFZlY3RvcjMuc3VidHJhY3QodHJpYW5nbGVbMV0sIHRyaWFuZ2xlWzBdLCBkdjEpO1xyXG4gICAgY29uc3QgZHYyID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIFZlY3RvcjMuc3VidHJhY3QodHJpYW5nbGVbMl0sIHRyaWFuZ2xlWzBdLCBkdjIpO1xyXG4gICAgY29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIFZlY3RvcjMuY3Jvc3MoZHYxLm5vcm1hbGl6ZSgpLCBkdjIubm9ybWFsaXplKCksIG5vcm1hbCk7XHJcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IDM7IG4gKz0gMSkge1xyXG4gICAgICBjb25zdCBpbmRleCA9IChpICsgbikgKiAzO1xyXG4gICAgICBub3JtYWxzW2luZGV4ICsgMF0gKz0gbm9ybWFsLng7XHJcbiAgICAgIG5vcm1hbHNbaW5kZXggKyAxXSArPSBub3JtYWwueTtcclxuICAgICAgbm9ybWFsc1tpbmRleCArIDJdICs9IG5vcm1hbC56O1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbm9ybWFscztcclxufVxyXG5cclxuLy8gZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVGFuZ2VudHMoXHJcbi8vICAgaW5kaWNlczogVHlwZWRBcnJheSB8IG51bGwsXHJcbi8vICAgcG9zaXRpb25zOiBUeXBlZEFycmF5LFxyXG4vLyAgIG5vcm1hbHM6IFR5cGVkQXJyYXksXHJcbi8vICAgdXZzOiBUeXBlZEFycmF5XHJcbi8vICkge1xyXG4vLyAgIGNvbnN0IHRhbmdlbnRzID0gbmV3IEZsb2F0MzJBcnJheSgobm9ybWFscy5sZW5ndGggLyAzKSAqIDQpO1xyXG4vLyAgIGNvbnN0IHZlcnRleENvdW50ID0gaW5kaWNlcyA/IGluZGljZXMubGVuZ3RoIDogcG9zaXRpb25zLmxlbmd0aDtcclxuLy8gICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRleENvdW50OyBpICs9IDMpIHtcclxuLy8gICAgIGNvbnN0IHRyaUluZGljZXMgPSBbXTtcclxuLy8gICAgIGZvciAobGV0IG4gPSAwOyBuIDwgMzsgbiArPSAxKSB7XHJcbi8vICAgICAgIGlmIChpbmRpY2VzKSB7XHJcbi8vICAgICAgICAgdHJpSW5kaWNlcy5wdXNoKGluZGljZXNbaSArIG5dKTtcclxuLy8gICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICB0cmlJbmRpY2VzLnB1c2goaSArIG4pO1xyXG4vLyAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vICAgICBjb25zdCBwb3MgPSB0cmlJbmRpY2VzLm1hcCgodmVydGV4SW5kZXgpID0+IHtcclxuLy8gICAgICAgY29uc3QgaW5kZXggPSB2ZXJ0ZXhJbmRleCAqIDM7XHJcbi8vICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhcclxuLy8gICAgICAgICBwb3NpdGlvbnNbaW5kZXhdLFxyXG4vLyAgICAgICAgIHBvc2l0aW9uc1tpbmRleCArIDFdLFxyXG4vLyAgICAgICAgIHBvc2l0aW9uc1tpbmRleCArIDJdXHJcbi8vICAgICAgICk7XHJcbi8vICAgICB9KTtcclxuLy8gICAgIGNvbnN0IHV2ID0gdHJpSW5kaWNlcy5tYXAoKHZlcnRleEluZGV4KSA9PiB7XHJcbi8vICAgICAgIGNvbnN0IGluZGV4ID0gdmVydGV4SW5kZXggKiAyO1xyXG4vLyAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodXZzIVtpbmRleF0sIHV2cyFbaW5kZXggKyAxXSk7XHJcbi8vICAgICB9KTtcclxuXHJcbi8vICAgICBsZXQgZHYxID0gbmV3IFZlY3RvcjMoKTtcclxuLy8gICAgIFZlY3RvcjMuc3VidHJhY3QocG9zWzFdLCBwb3NbMF0sIGR2MSk7XHJcbi8vICAgICBsZXQgZHYyID0gbmV3IFZlY3RvcjMoKTtcclxuLy8gICAgIFZlY3RvcjMuc3VidHJhY3QocG9zWzJdLCBwb3NbMF0sIGR2Mik7XHJcbi8vICAgICBjb25zdCBkdXYxID0gbmV3IFZlY3RvcjMoKTtcclxuLy8gICAgIFZlY3RvcjMuc3VidHJhY3QodXZbMV0sIHV2WzBdLCBkdXYxKTtcclxuLy8gICAgIGNvbnN0IGR1djIgPSBuZXcgVmVjdG9yMygpO1xyXG4vLyAgICAgVmVjdG9yMy5zdWJ0cmFjdCh1dlsyXSwgdXZbMF0sIGR1djIpO1xyXG5cclxuLy8gICAgIGNvbnN0IHRhbmdlbnQgPSBuZXcgVmVjdG9yMygpO1xyXG4vLyAgICAgVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGR2MSwgZHV2MS55LCBkdjEpO1xyXG4vLyAgICAgVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGR2MiwgZHV2Mi55LCBkdjIpO1xyXG4vLyAgICAgVmVjdG9yMy5zdWJ0cmFjdChkdjEsIGR2MiwgdGFuZ2VudCk7XHJcblxyXG4vLyAgICAgVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKFxyXG4vLyAgICAgICB0YW5nZW50LFxyXG4vLyAgICAgICBkdXYyLnkgKiBkdXYxLnggLSBkdXYxLnkgKiBkdXYyLngsXHJcbi8vICAgICAgIHRhbmdlbnRcclxuLy8gICAgICk7XHJcblxyXG4vLyAgICAgdGFuZ2VudC5ub3JtYWxpemUoKTtcclxuLy8gICAgIGZvciAobGV0IG4gPSAwOyBuIDwgMzsgbiArPSAxKSB7XHJcbi8vICAgICAgIGNvbnN0IGluZGV4ID0gKGkgKyBuKSAqIDQ7XHJcblxyXG4vLyAgICAgICB0YW5nZW50c1tpbmRleCArIDBdICs9IHRhbmdlbnQueDtcclxuLy8gICAgICAgdGFuZ2VudHNbaW5kZXggKyAxXSArPSB0YW5nZW50Lnk7XHJcbi8vICAgICAgIHRhbmdlbnRzW2luZGV4ICsgMl0gKz0gdGFuZ2VudC56O1xyXG4vLyAgICAgICB0YW5nZW50c1tpbmRleCArIDNdID0gMTtcclxuLy8gICAgIH1cclxuLy8gICB9XHJcbi8vICAgcmV0dXJuIHRhbmdlbnRzO1xyXG4vLyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dHVyZXMobWF0ZXJpYWw6IGFueSkge1xyXG4gIGNvbnN0IHsgYmFzZUNvbG9yVGV4dHVyZSwgbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlIH0gPVxyXG4gICAgbWF0ZXJpYWwucGJyTWV0YWxsaWNSb3VnaG5lc3M7XHJcbiAgY29uc3QgeyBub3JtYWxUZXh0dXJlLCBvY2NsdXNpb25UZXh0dXJlLCBlbWlzc2l2ZVRleHR1cmUgfSA9IG1hdGVyaWFsO1xyXG4gIHJldHVybiBbXHJcbiAgICBiYXNlQ29sb3JUZXh0dXJlLFxyXG4gICAgbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLFxyXG4gICAgbm9ybWFsVGV4dHVyZSxcclxuICAgIG9jY2x1c2lvblRleHR1cmUsXHJcbiAgICBlbWlzc2l2ZVRleHR1cmUsXHJcbiAgXTtcclxufVxyXG5cclxuZnVuY3Rpb24gbGVycChhOiBudW1iZXIsIGI6IG51bWJlciwgeDogbnVtYmVyKSB7XHJcbiAgaWYgKHggPCBhKSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcbiAgaWYgKHggPiBiKSB7XHJcbiAgICByZXR1cm4gMTtcclxuICB9XHJcbiAgcmV0dXJuICh4IC0gYSkgLyAoYiAtIGEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJwUXVhdChcclxuICBpbnB1dDogVHlwZWRBcnJheSxcclxuICBvOiBUeXBlZEFycmF5LFxyXG4gIHRpbWU6IG51bWJlcixcclxuICBtZXRob2Q6IHN0cmluZ1xyXG4pIHtcclxuICBsZXQgaW5kZXggPSAxO1xyXG4gIHdoaWxlIChpbmRleCA8IGlucHV0Lmxlbmd0aCAtIDEgJiYgdGltZSA+PSBpbnB1dFtpbmRleF0pIHtcclxuICAgIGluZGV4ICs9IDE7XHJcbiAgfVxyXG4gIGNvbnN0IHQgPSBsZXJwKGlucHV0W2luZGV4IC0gMV0sIGlucHV0W2luZGV4XSwgdGltZSk7XHJcblxyXG4gIGlmIChtZXRob2QgPT09IFwiQ1VCSUNTUExJTkVcIikge1xyXG4gICAgY29uc3QgdGQgPSBpbnB1dFtpbmRleF0gLSBpbnB1dFtpbmRleCAtIDFdO1xyXG4gICAgY29uc3QgdDIgPSB0ICogdDtcclxuICAgIGNvbnN0IHQzID0gdDIgKiB0O1xyXG4gICAgY29uc3QgaSA9IDEyICogaW5kZXg7XHJcblxyXG4gICAgY29uc3QgdjAgPSBuZXcgUXVhdGVybmlvbihvW2kgLSA4XSwgb1tpIC0gN10sIG9baSAtIDZdLCBvW2kgLSA1XSk7XHJcbiAgICBjb25zdCBiMCA9IG5ldyBRdWF0ZXJuaW9uKG9baSAtIDRdLCBvW2kgLSAzXSwgb1tpIC0gMl0sIG9baSAtIDFdKTtcclxuICAgIGNvbnN0IHYxID0gbmV3IFF1YXRlcm5pb24ob1tpICsgNF0sIG9baSArIDVdLCBvW2kgKyA2XSwgb1tpICsgN10pO1xyXG4gICAgY29uc3QgYTEgPSBuZXcgUXVhdGVybmlvbihvW2ldLCBvW2kgKyAxXSwgb1tpICsgMl0sIG9baSArIDNdKTtcclxuICAgIFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcih2MCwgMiAqIHQzIC0gMyAqIHQyICsgMSwgdjApO1xyXG4gICAgUXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKGIwLCB0ZCAqICh0MyAtIDIgKiB0MiArIHQpLCBiMCk7XHJcbiAgICBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIodjEsIC0yICogdDMgKyAzICogdDIsIHYxKTtcclxuICAgIFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihhMSwgdGQgKiAodDMgLSB0MiksIGExKTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUXVhdGVybmlvbigpO1xyXG4gICAgUXVhdGVybmlvbi5hZGQocmVzdWx0LCB2MCwgcmVzdWx0KTtcclxuICAgIFF1YXRlcm5pb24uYWRkKHJlc3VsdCwgYjAsIHJlc3VsdCk7XHJcbiAgICBRdWF0ZXJuaW9uLmFkZChyZXN1bHQsIHYxLCByZXN1bHQpO1xyXG4gICAgUXVhdGVybmlvbi5hZGQocmVzdWx0LCBhMSwgcmVzdWx0KTtcclxuICAgIFF1YXRlcm5pb24ubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBjb25zdCBxID0gW107XHJcbiAgZm9yIChsZXQgbiA9IC0xOyBuIDwgMTsgbiArPSAxKSB7XHJcbiAgICBjb25zdCBpID0gNCAqIChpbmRleCArIG4pO1xyXG4gICAgcS5wdXNoKG5ldyBRdWF0ZXJuaW9uKG9baV0sIG9baSArIDFdLCBvW2kgKyAyXSwgb1tpICsgM10pKTtcclxuICB9XHJcblxyXG4gIGlmIChtZXRob2QgPT09IFwiU1RFUFwiKSB7XHJcbiAgICByZXR1cm4gdCA8IDEgPyBxWzBdIDogcVsxXTtcclxuICB9XHJcbiAgY29uc3QgcmVzdWx0ID0gbmV3IFF1YXRlcm5pb24oKTtcclxuICBRdWF0ZXJuaW9uLnNsZXJwKHFbMF0sIHFbMV0sIHQsIHJlc3VsdCk7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGludGVycFZlYzMoXHJcbiAgaW5wdXQ6IFR5cGVkQXJyYXksXHJcbiAgb3V0cHV0OiBUeXBlZEFycmF5LFxyXG4gIHRpbWU6IG51bWJlcixcclxuICBtZXRob2Q6IHN0cmluZ1xyXG4pIHtcclxuICBsZXQgaW5kZXggPSAxO1xyXG4gIHdoaWxlIChpbmRleCA8IGlucHV0Lmxlbmd0aCAtIDEgJiYgdGltZSA+PSBpbnB1dFtpbmRleF0pIHtcclxuICAgIGluZGV4ICs9IDE7XHJcbiAgfVxyXG4gIGNvbnN0IHQgPSBsZXJwKGlucHV0W2luZGV4IC0gMV0sIGlucHV0W2luZGV4XSwgdGltZSk7XHJcblxyXG4gIGlmIChtZXRob2QgPT09IFwiQ1VCSUNTUExJTkVcIikge1xyXG4gICAgY29uc3QgdGQgPSBpbnB1dFtpbmRleF0gLSBpbnB1dFtpbmRleCAtIDFdO1xyXG4gICAgY29uc3QgdDIgPSB0ICogdDtcclxuICAgIGNvbnN0IHQzID0gdDIgKiB0O1xyXG4gICAgY29uc3QgaSA9IDkgKiBpbmRleDtcclxuICAgIGNvbnN0IHYwID0gbmV3IFZlY3RvcjMob3V0cHV0W2kgLSA2XSwgb3V0cHV0W2kgLSA1XSwgb3V0cHV0W2kgLSA0XSk7XHJcbiAgICBjb25zdCBiMCA9IG5ldyBWZWN0b3IzKG91dHB1dFtpIC0gM10sIG91dHB1dFtpIC0gMl0sIG91dHB1dFtpIC0gMV0pO1xyXG4gICAgY29uc3QgdjEgPSBuZXcgVmVjdG9yMyhvdXRwdXRbaSArIDNdLCBvdXRwdXRbaSArIDRdLCBvdXRwdXRbaSArIDVdKTtcclxuICAgIGNvbnN0IGExID0gbmV3IFZlY3RvcjMob3V0cHV0W2ldLCBvdXRwdXRbaSArIDFdLCBvdXRwdXRbaSArIDJdKTtcclxuICAgIFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcih2MCwgMiAqIHQzIC0gMyAqIHQyICsgMSwgdjApO1xyXG4gICAgVmVjdG9yMy5tdWx0aXBseUJ5U2NhbGFyKGIwLCB0ZCAqICh0MyAtIDIgKiB0MiArIHQpLCBiMCk7XHJcbiAgICBWZWN0b3IzLm11bHRpcGx5QnlTY2FsYXIodjEsIC0yICogdDMgKyAzICogdDIsIHYxKTtcclxuICAgIFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihhMSwgdGQgKiAodDMgLSB0MiksIGExKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICBWZWN0b3IzLmFkZChyZXN1bHQsIHYwLCByZXN1bHQpO1xyXG4gICAgVmVjdG9yMy5hZGQocmVzdWx0LCBiMCwgcmVzdWx0KTtcclxuICAgIFZlY3RvcjMuYWRkKHJlc3VsdCwgdjEsIHJlc3VsdCk7XHJcbiAgICBWZWN0b3IzLmFkZChyZXN1bHQsIGExLCByZXN1bHQpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGNvbnN0IHYgPSBbXTtcclxuICBmb3IgKGxldCBuID0gLTE7IG4gPCAxOyBuICs9IDEpIHtcclxuICAgIGNvbnN0IGkgPSAzICogKGluZGV4ICsgbik7XHJcbiAgICB2LnB1c2gobmV3IFZlY3RvcjMob3V0cHV0W2ldLCBvdXRwdXRbaSArIDFdLCBvdXRwdXRbaSArIDJdKSk7XHJcbiAgfVxyXG5cclxuICBpZiAobWV0aG9kID09PSBcIlNURVBcIikge1xyXG4gICAgcmV0dXJuIHQgPCAxID8gdlswXSA6IHZbMV07XHJcbiAgfVxyXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgcmV0dXJuIFZlY3RvcjMubGVycCh2WzBdLCB2WzFdLCB0LCByZXN1bHQpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2x0ZkVudW06IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIH0gPSB7XHJcbiAgU0NBTEFSOiAxLFxyXG4gIFZFQzI6IDIsXHJcbiAgVkVDMzogMyxcclxuICBWRUM0OiA0LFxyXG4gIE1BVDI6IDQsXHJcbiAgTUFUMzogOSxcclxuICBNQVQ0OiAxNixcclxuICA1MTIwOiAxLFxyXG4gIDUxMjE6IDEsXHJcbiAgNTEyMjogMixcclxuICA1MTIzOiAyLFxyXG4gIDUxMjU6IDQsXHJcbiAgNTEyNjogNCxcclxuICA5NzI4OiBcIm5lYXJlc3RcIixcclxuICA5NzI5OiBcImxpbmVhclwiLFxyXG4gIDk5ODQ6IFwibGluZWFyXCIsXHJcbiAgOTk4NTogXCJsaW5lYXJcIixcclxuICA5OTg2OiBcImxpbmVhclwiLFxyXG4gIDk5ODc6IFwibGluZWFyXCIsXHJcbiAgMzMwNzE6IFwiY2xhbXAtdG8tZWRnZVwiLFxyXG4gIDMzNjQ4OiBcIm1pcnJvci1yZXBlYXRcIixcclxuICAxMDQ5NzogXCJyZXBlYXRcIixcclxufTtcclxuIiwiaW1wb3J0IEdlb21ldHJ5IGZyb20gXCIuLi9nZW9tZXRyeS9HZW9tZXRyeVwiO1xuaW1wb3J0IFBick1hdCBmcm9tIFwiLi4vbWF0ZXJpYWwvUGJyTWF0XCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL21lc2gvTWVzaFwiO1xuaW1wb3J0IHsgRmxvYXQzMkF0dHJpYnV0ZSB9IGZyb20gXCIuLi9yZW5kZXIvQXR0cmlidXRlXCI7XG5pbXBvcnQgU2FtcGxlciBmcm9tIFwiLi4vcmVuZGVyL1NhbXBsZXJcIjtcbmltcG9ydCBUZXh0dXJlIGZyb20gXCIuLi9yZW5kZXIvVGV4dHVyZVwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVOb3JtYWxzLCBnZXRUZXh0dXJlcywgZ2x0ZkVudW0sIG5ld1R5cGVkQXJyYXksIHRvSW5kaWNlcywgVHlwZWRBcnJheSB9IGZyb20gXCIuLi91dGlscy9nbHRmVXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgR0xURlByaW1pdGl2ZSA9IHtcblx0dmVydGV4Q291bnQ6IG51bWJlcjtcblx0aW5kaWNlczogVWludDE2QXJyYXkgfCBVaW50MzJBcnJheSB8IG51bGw7XG5cdHBvc2l0aW9uczogVHlwZWRBcnJheTtcblx0bm9ybWFsczogVHlwZWRBcnJheTtcblx0dXZzOiBUeXBlZEFycmF5IHwgbnVsbDtcblx0dXYxczogVHlwZWRBcnJheSB8IG51bGw7XG5cdHRhbmdlbnRzOiBUeXBlZEFycmF5IHwgbnVsbDtcblx0Y29sb3JzOiBUeXBlZEFycmF5IHwgbnVsbDtcblx0bWF0ZXJpYWw6IGFueTtcblx0Ym91bmRpbmdCb3g6IHtcblx0XHRtYXg6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblx0XHRtaW46IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblx0fTtcbn07XG5cbmV4cG9ydCB0eXBlIEdMVEZNZXNoID0gQXJyYXk8R0xURlByaW1pdGl2ZT47XG5cbmV4cG9ydCB0eXBlIEdMVEZBbmltYXRpb24gPSB7XG5cdGNoYW5uZWxzOiBBcnJheTx7XG5cdFx0aW5wdXQ6IFR5cGVkQXJyYXk7XG5cdFx0b3V0cHV0OiBUeXBlZEFycmF5O1xuXHRcdGludGVycG9sYXRpb246IHN0cmluZztcblx0XHRub2RlOiBudW1iZXI7XG5cdFx0cGF0aDogc3RyaW5nO1xuXHR9Pjtcblx0bGVuZ3RoOiBudW1iZXI7XG59O1xuXG5leHBvcnQgY2xhc3MgR0xURiB7XG5cdHNjZW5lczogQXJyYXk8YW55PjtcblxuXHRkZWZhdWx0U2NlbmU6IG51bWJlcjtcblxuXHRub2RlczogQXJyYXk8YW55PjtcblxuXHRjYW1lcmFzOiBBcnJheTxhbnk+O1xuXG5cdG1lc2hlczogQXJyYXk8YW55PjtcblxuXHRpbWFnZXM6IEFycmF5PEltYWdlQml0bWFwPjtcblxuXHRhbmltYXRpb25zOiBBcnJheTxHTFRGQW5pbWF0aW9uPjtcblxuXHRjb25zdHJ1Y3Rvcihqc29uOiBhbnksIGJ1ZmZlcnM6IEFycmF5PEFycmF5QnVmZmVyPiwgaW1hZ2VzOiBBcnJheTxJbWFnZUJpdG1hcD4sIGdsYk9mZnNldCA9IDApIHtcblx0XHR0aGlzLnNjZW5lcyA9IGpzb24uc2NlbmVzO1xuXHRcdHRoaXMuZGVmYXVsdFNjZW5lID0ganNvbi5zY2VuZSB8fCAwO1xuXHRcdHRoaXMubm9kZXMgPSBqc29uLm5vZGVzO1xuXHRcdHRoaXMuY2FtZXJhcyA9IGpzb24uY2FtZXJhcyB8fCBbXTtcblx0XHR0aGlzLmltYWdlcyA9IGltYWdlcztcblxuXHRcdGZ1bmN0aW9uIGdldFNhbXBsZXIoc2FtcGxlckpzb246IGFueSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0bWFnRmlsdGVyOiBnbHRmRW51bVtzYW1wbGVySnNvbi5tYWdGaWx0ZXIgfHwgOTcyOV0gYXMgR1BVRmlsdGVyTW9kZSxcblx0XHRcdFx0bWluRmlsdGVyOiBnbHRmRW51bVtzYW1wbGVySnNvbi5taW5GaWx0ZXIgfHwgOTcyOV0gYXMgR1BVRmlsdGVyTW9kZSxcblx0XHRcdFx0YWRkcmVzc01vZGVVOiBnbHRmRW51bVtzYW1wbGVySnNvbi53cmFwUyB8fCAxMDQ5N10gYXMgR1BVQWRkcmVzc01vZGUsXG5cdFx0XHRcdGFkZHJlc3NNb2RlVjogZ2x0ZkVudW1bc2FtcGxlckpzb24ud3JhcFQgfHwgMTA0OTddIGFzIEdQVUFkZHJlc3NNb2RlXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRjb25zdCBzYW1wbGVycyA9IGpzb24uc2FtcGxlcnMgPyAoanNvbi5zYW1wbGVycyBhcyBBcnJheTxhbnk+KS5tYXAoKHNhbXBsZXIpID0+IGdldFNhbXBsZXIoc2FtcGxlcikpIDogW107XG5cdFx0Y29uc3QgZGVmYXVsdFNhbXBsZXIgPSBnZXRTYW1wbGVyKHt9KTtcblxuXHRcdGNvbnN0IHRleHR1cmVzID0ganNvbi50ZXh0dXJlc1xuXHRcdFx0PyAoanNvbi50ZXh0dXJlcyBhcyBBcnJheTxhbnk+KS5tYXAoKHRleHR1cmUpID0+IHtcblx0XHRcdFx0XHR0ZXh0dXJlLnNhbXBsZXIgPSB0ZXh0dXJlLnNhbXBsZXIgIT09IHVuZGVmaW5lZCA/IHNhbXBsZXJzW3RleHR1cmUuc2FtcGxlcl0gOiBkZWZhdWx0U2FtcGxlcjtcblx0XHRcdFx0XHRyZXR1cm4gdGV4dHVyZTtcblx0XHRcdCAgfSlcblx0XHRcdDogW107XG5cblx0XHRjb25zdCBtYXRlcmlhbHMgPSBqc29uLm1hdGVyaWFsc1xuXHRcdFx0PyAoanNvbi5tYXRlcmlhbHMgYXMgQXJyYXk8YW55PikubWFwKChtYXRlcmlhbCkgPT4ge1xuXHRcdFx0XHRcdGlmICghbWF0ZXJpYWwucGJyTWV0YWxsaWNSb3VnaG5lc3MpIHtcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnBick1ldGFsbGljUm91Z2huZXNzID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGdldFRleHR1cmVzKG1hdGVyaWFsKS5mb3JFYWNoKCh0ZXh0dXJlKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAodGV4dHVyZSkge1xuXHRcdFx0XHRcdFx0XHR0ZXh0dXJlLnNvdXJjZSA9IHRleHR1cmVzW3RleHR1cmUuaW5kZXhdLnNvdXJjZTtcblx0XHRcdFx0XHRcdFx0dGV4dHVyZS5zYW1wbGVyID0gdGV4dHVyZXNbdGV4dHVyZS5pbmRleF0uc2FtcGxlcjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXR1cm4gbWF0ZXJpYWw7XG5cdFx0XHQgIH0pXG5cdFx0XHQ6IFtdO1xuXHRcdGNvbnN0IGRlZmF1bHRNYXRlcmlhbCA9IHsgcGJyTWV0YWxsaWNSb3VnaG5lc3M6IHt9IH07XG5cblx0XHRmdW5jdGlvbiBnZXRCdWZmZXJWaWV3KGFjY2Vzc29yOiBhbnksIG46IG51bWJlcikge1xuXHRcdFx0Y29uc3QgYnVmZmVyVmlldyA9IGpzb24uYnVmZmVyVmlld3NbYWNjZXNzb3IuYnVmZmVyVmlld107XG5cdFx0XHRjb25zdCBvZmZzZXQgPSAoYnVmZmVyVmlldy5ieXRlT2Zmc2V0IHx8IDApICsgKGFjY2Vzc29yLmJ5dGVPZmZzZXQgfHwgMCk7XG5cdFx0XHRjb25zdCBzdHJpZGUgPSBNYXRoLm1heChidWZmZXJWaWV3LmJ5dGVTdHJpZGUgLyA0IHx8IDAsIG4pO1xuXHRcdFx0bGV0IGFycmF5ID0gbmV3VHlwZWRBcnJheShcblx0XHRcdFx0YWNjZXNzb3IuY29tcG9uZW50VHlwZSxcblx0XHRcdFx0YnVmZmVyc1tidWZmZXJWaWV3LmJ1ZmZlcl0sXG5cdFx0XHRcdGJ1ZmZlclZpZXcuYnVmZmVyID09PSAwID8gb2Zmc2V0ICsgZ2xiT2Zmc2V0IDogb2Zmc2V0LFxuXHRcdFx0XHQoYWNjZXNzb3IuY291bnQgLSAxKSAqIHN0cmlkZSArIG5cblx0XHRcdCk7XG5cblx0XHRcdGlmIChzdHJpZGUgPiBuKSB7XG5cdFx0XHRcdGNvbnN0IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yIGFzIHtcblx0XHRcdFx0XHRuZXcgKC4uLmFyZ3M6IGFueSk6IFR5cGVkQXJyYXk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdGNvbnN0IHN0cmlkZWQgPSBuZXcgVHlwZWRBcnJheUNvbnN0cnVjdG9yKGFjY2Vzc29yLmNvdW50ICogbik7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IHN0cmlkZWQubGVuZ3RoOyBpICs9IG4sIGogKz0gc3RyaWRlKSB7XG5cdFx0XHRcdFx0Zm9yIChsZXQgayA9IDA7IGsgPCBuOyBrICs9IDEpIHtcblx0XHRcdFx0XHRcdHN0cmlkZWRbaSArIGtdID0gYXJyYXlbaiArIGtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRhcnJheSA9IHN0cmlkZWQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYXJyYXk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgYWNjZXNzb3JzID0gKGpzb24uYWNjZXNzb3JzIGFzIEFycmF5PGFueT4pLm1hcCgoYWNjZXNzb3IpID0+IHtcblx0XHRcdGNvbnN0IG4gPSBnbHRmRW51bVthY2Nlc3Nvci50eXBlXSBhcyBudW1iZXI7XG5cdFx0XHRsZXQgYXJyYXk7XG5cdFx0XHRpZiAoYWNjZXNzb3IuYnVmZmVyVmlldyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGFycmF5ID0gbmV3VHlwZWRBcnJheShcblx0XHRcdFx0XHRhY2Nlc3Nvci5jb21wb25lbnRUeXBlLFxuXHRcdFx0XHRcdG5ldyBBcnJheUJ1ZmZlcihuICogYWNjZXNzb3IuY291bnQgKiAoZ2x0ZkVudW1bYWNjZXNzb3IuY29tcG9uZW50VHlwZV0gYXMgbnVtYmVyKSksXG5cdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRhY2Nlc3Nvci5jb3VudCAqIG5cblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGFycmF5ID0gZ2V0QnVmZmVyVmlldyhhY2Nlc3Nvciwgbik7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChhY2Nlc3Nvci5zcGFyc2UpIHtcblx0XHRcdFx0YWNjZXNzb3Iuc3BhcnNlLmluZGljZXMuY291bnQgPSBhY2Nlc3Nvci5zcGFyc2UuY291bnQ7XG5cdFx0XHRcdGFjY2Vzc29yLnNwYXJzZS52YWx1ZXMuY291bnQgPSBhY2Nlc3Nvci5zcGFyc2UuY291bnQ7XG5cdFx0XHRcdGFjY2Vzc29yLnNwYXJzZS52YWx1ZXMuY29tcG9uZW50VHlwZSA9IGFjY2Vzc29yLmNvbXBvbmVudFR5cGU7XG5cdFx0XHRcdGNvbnN0IGluZGljZXMgPSBnZXRCdWZmZXJWaWV3KGFjY2Vzc29yLnNwYXJzZS5pbmRpY2VzLCAxKTtcblx0XHRcdFx0Y29uc3QgdmFsdWVzID0gZ2V0QnVmZmVyVmlldyhhY2Nlc3Nvci5zcGFyc2UudmFsdWVzLCBuKTtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhY2Nlc3Nvci5zcGFyc2UuY291bnQ7IGkgKz0gMSkge1xuXHRcdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbjsgaiArPSAxKSB7XG5cdFx0XHRcdFx0XHRhcnJheVtpbmRpY2VzW2ldICogbiArIGpdID0gdmFsdWVzW2kgKiBuICsgal07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhcnJheTtcblx0XHR9KTtcblxuXHRcdHRoaXMubWVzaGVzID0gKGpzb24ubWVzaGVzIGFzIEFycmF5PGFueT4pLm1hcCgobWVzaCkgPT5cblx0XHRcdChtZXNoLnByaW1pdGl2ZXMgYXMgQXJyYXk8YW55PikubWFwKChwcmltaXRpdmUpID0+IHtcblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBwcmltaXRpdmUubWF0ZXJpYWwgIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsc1twcmltaXRpdmUubWF0ZXJpYWxdIDogZGVmYXVsdE1hdGVyaWFsO1xuXG5cdFx0XHRcdGxldCBpbmRpY2VzID0gbnVsbDtcblx0XHRcdFx0bGV0IHZlcnRleENvdW50O1xuXHRcdFx0XHRpZiAocHJpbWl0aXZlLmluZGljZXMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGluZGljZXMgPSB0b0luZGljZXMoYWNjZXNzb3JzW3ByaW1pdGl2ZS5pbmRpY2VzXSk7XG5cdFx0XHRcdFx0dmVydGV4Q291bnQgPSBqc29uLmFjY2Vzc29yc1twcmltaXRpdmUuaW5kaWNlc10uY291bnQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmVydGV4Q291bnQgPSBqc29uLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5QT1NJVElPTl0uY291bnQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbnMgPSBhY2Nlc3NvcnNbcHJpbWl0aXZlLmF0dHJpYnV0ZXMuUE9TSVRJT05dO1xuXHRcdFx0XHRjb25zdCB7IG1heCwgbWluIH0gPSBqc29uLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5QT1NJVElPTl07XG5cdFx0XHRcdGNvbnN0IGJvdW5kaW5nQm94ID0geyBtYXgsIG1pbiB9O1xuXG5cdFx0XHRcdGxldCBub3JtYWxzO1xuXHRcdFx0XHRpZiAocHJpbWl0aXZlLmF0dHJpYnV0ZXMuTk9STUFMICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRub3JtYWxzID0gYWNjZXNzb3JzW3ByaW1pdGl2ZS5hdHRyaWJ1dGVzLk5PUk1BTF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bm9ybWFscyA9IGdlbmVyYXRlTm9ybWFscyhpbmRpY2VzLCBwb3NpdGlvbnMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IHV2cyA9IG51bGw7XG5cdFx0XHRcdGlmIChwcmltaXRpdmUuYXR0cmlidXRlcy5URVhDT09SRF8wICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHR1dnMgPSBhY2Nlc3NvcnNbcHJpbWl0aXZlLmF0dHJpYnV0ZXMuVEVYQ09PUkRfMF07XG5cdFx0XHRcdH1cblx0XHRcdFx0bGV0IHV2MXMgPSBudWxsO1xuXHRcdFx0XHRpZiAocHJpbWl0aXZlLmF0dHJpYnV0ZXMuVEVYQ09PUkRfMSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0dXYxcyA9IGFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5URVhDT09SRF8xXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCB0YW5nZW50cyA9IG51bGw7XG5cdFx0XHRcdGlmIChwcmltaXRpdmUuYXR0cmlidXRlcy5UQU5HRU5UICE9PSB1bmRlZmluZWQgJiYgcHJpbWl0aXZlLmF0dHJpYnV0ZXMuTk9STUFMICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHR0YW5nZW50cyA9IGFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5UQU5HRU5UXTtcblx0XHRcdFx0fSBlbHNlIGlmIChtYXRlcmlhbC5ub3JtYWxUZXh0dXJlKSB7XG5cdFx0XHRcdFx0Ly90YW5nZW50cyA9IGdlbmVyYXRlVGFuZ2VudHMoaW5kaWNlcywgcG9zaXRpb25zLCBub3JtYWxzLCB1dnMhKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCBjb2xvcnMgPSBudWxsO1xuXHRcdFx0XHRpZiAocHJpbWl0aXZlLmF0dHJpYnV0ZXMuQ09MT1JfMCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0Y29sb3JzID0gYWNjZXNzb3JzW3ByaW1pdGl2ZS5hdHRyaWJ1dGVzLkNPTE9SXzBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBnZW5lcmF0ZU1lc2goXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dmVydGV4Q291bnQsXG5cdFx0XHRcdFx0XHRpbmRpY2VzLFxuXHRcdFx0XHRcdFx0cG9zaXRpb25zLFxuXHRcdFx0XHRcdFx0bm9ybWFscyxcblx0XHRcdFx0XHRcdHV2cyxcblx0XHRcdFx0XHRcdHV2MXMsXG5cdFx0XHRcdFx0XHR0YW5nZW50cyxcblx0XHRcdFx0XHRcdGNvbG9ycyxcblx0XHRcdFx0XHRcdG1hdGVyaWFsLFxuXHRcdFx0XHRcdFx0Ym91bmRpbmdCb3hcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHRoaXMuaW1hZ2VzXG5cdFx0XHRcdCk7XG5cdFx0XHRcdC8vIHJldHVybiB7XG5cdFx0XHRcdC8vICAgdmVydGV4Q291bnQsXG5cdFx0XHRcdC8vICAgaW5kaWNlcyxcblx0XHRcdFx0Ly8gICBwb3NpdGlvbnMsXG5cdFx0XHRcdC8vICAgbm9ybWFscyxcblx0XHRcdFx0Ly8gICB1dnMsXG5cdFx0XHRcdC8vICAgdXYxcyxcblx0XHRcdFx0Ly8gICB0YW5nZW50cyxcblx0XHRcdFx0Ly8gICBjb2xvcnMsXG5cdFx0XHRcdC8vICAgbWF0ZXJpYWwsXG5cdFx0XHRcdC8vICAgYm91bmRpbmdCb3gsXG5cdFx0XHRcdC8vIH07XG5cdFx0XHR9KVxuXHRcdCk7XG5cblx0XHR0aGlzLmFuaW1hdGlvbnMgPVxuXHRcdFx0KGpzb24uYW5pbWF0aW9ucyBhcyBBcnJheTxhbnk+KT8ubWFwKChhbmltYXRpb24pID0+IHtcblx0XHRcdFx0Y29uc3QgY2hhbm5lbHMgPSAoYW5pbWF0aW9uLmNoYW5uZWxzIGFzIEFycmF5PGFueT4pLm1hcCgoeyBzYW1wbGVyLCB0YXJnZXQgfSkgPT4gKHtcblx0XHRcdFx0XHRpbnB1dDogYWNjZXNzb3JzW2FuaW1hdGlvbi5zYW1wbGVyc1tzYW1wbGVyXS5pbnB1dF0sXG5cdFx0XHRcdFx0b3V0cHV0OiBhY2Nlc3NvcnNbYW5pbWF0aW9uLnNhbXBsZXJzW3NhbXBsZXJdLm91dHB1dF0sXG5cdFx0XHRcdFx0aW50ZXJwb2xhdGlvbjogYW5pbWF0aW9uLnNhbXBsZXJzW3NhbXBsZXJdLmludGVycG9sYXRpb24gfHwgXCJMSU5FQVJcIixcblx0XHRcdFx0XHRub2RlOiB0YXJnZXQubm9kZSxcblx0XHRcdFx0XHRwYXRoOiB0YXJnZXQucGF0aFxuXHRcdFx0XHR9KSk7XG5cdFx0XHRcdGNvbnN0IGxlbmd0aCA9IGNoYW5uZWxzLnJlZHVjZSgoYWNjLCB7IGlucHV0IH0pID0+IE1hdGgubWF4KGFjYywgaW5wdXRbaW5wdXQubGVuZ3RoIC0gMV0pLCAwKTtcblx0XHRcdFx0cmV0dXJuIHsgY2hhbm5lbHMsIGxlbmd0aCB9O1xuXHRcdFx0fSkgfHwgW107XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZEdMVEZPYmplY3QoanNvbjogYW55LCB1cmw6IHN0cmluZywgZ2xiT2Zmc2V0ID0gMCwgYmluPzogQXJyYXlCdWZmZXIpIHtcblx0Y29uc3QgZGlyID0gdXJsLnN1YnN0cmluZygwLCB1cmwubGFzdEluZGV4T2YoXCIvXCIpKTtcblx0Y29uc3QgaW1hZ2VzOiBBcnJheTxJbWFnZUJpdG1hcD4gPSBbXTtcblx0bGV0IGxvYWRFeHRlcm5hbEltYWdlczogUHJvbWlzZTxhbnk+ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdGlmIChqc29uLmltYWdlcykge1xuXHRcdGxvYWRFeHRlcm5hbEltYWdlcyA9IFByb21pc2UuYWxsKFxuXHRcdFx0anNvbi5pbWFnZXMubWFwKGFzeW5jIChpbWFnZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdGlmIChpbWFnZS51cmkpIHtcblx0XHRcdFx0XHRjb25zdCBpbWFnZVVybCA9IGltYWdlLnVyaS5zbGljZSgwLCA1KSA9PT0gXCJkYXRhOlwiID8gaW1hZ2UudXJpIDogYCR7ZGlyfS8ke2ltYWdlLnVyaX1gO1xuXHRcdFx0XHRcdGltYWdlc1tpbmRleF0gPSBhd2FpdCBmZXRjaChpbWFnZVVybClcblx0XHRcdFx0XHRcdC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuYmxvYigpKVxuXHRcdFx0XHRcdFx0LnRoZW4oKGJsb2IpID0+XG5cdFx0XHRcdFx0XHRcdGNyZWF0ZUltYWdlQml0bWFwKGJsb2IsIHtcblx0XHRcdFx0XHRcdFx0XHRjb2xvclNwYWNlQ29udmVyc2lvbjogXCJub25lXCJcblx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0KTtcblx0fVxuXG5cdGNvbnN0IGJ1ZmZlcnM6IEFycmF5PEFycmF5QnVmZmVyPiA9IFtdO1xuXHRhd2FpdCBQcm9taXNlLmFsbChcblx0XHRqc29uLmJ1ZmZlcnMubWFwKChidWZmZXI6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuXHRcdFx0aWYgKCFidWZmZXIudXJpKSB7XG5cdFx0XHRcdGlmIChpbmRleCAhPT0gMCkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImJ1ZmZlciB1cmkgdW5kZWZpbmVkXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJ1ZmZlcnNbaW5kZXhdID0gYmluITtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgYnVmZmVyVXJsID0gYnVmZmVyLnVyaS5zbGljZSgwLCA1KSA9PT0gXCJkYXRhOlwiID8gYnVmZmVyLnVyaSA6IGAke2Rpcn0vJHtidWZmZXIudXJpfWA7XG5cdFx0XHRyZXR1cm4gZmV0Y2goYnVmZmVyVXJsKVxuXHRcdFx0XHQudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG5cdFx0XHRcdC50aGVuKChhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXIpID0+IHtcblx0XHRcdFx0XHRidWZmZXJzW2luZGV4XSA9IGFycmF5QnVmZmVyO1xuXHRcdFx0XHR9KTtcblx0XHR9KVxuXHQpO1xuXG5cdGxldCBsb2FkSW50ZXJuYWxJbWFnZXM6IFByb21pc2U8YW55PiA9IFByb21pc2UucmVzb2x2ZSgpO1xuXHRpZiAoanNvbi5pbWFnZXMpIHtcblx0XHRsb2FkSW50ZXJuYWxJbWFnZXMgPSBQcm9taXNlLmFsbChcblx0XHRcdGpzb24uaW1hZ2VzLm1hcChhc3luYyAoaW1hZ2U6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRpZiAoaW1hZ2UuYnVmZmVyVmlldyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0Y29uc3QgeyBidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGggfSA9IGpzb24uYnVmZmVyVmlld3NbaW1hZ2UuYnVmZmVyVmlld107XG5cdFx0XHRcdFx0Y29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheShcblx0XHRcdFx0XHRcdGJ1ZmZlcnNbYnVmZmVyXSxcblx0XHRcdFx0XHRcdGJ1ZmZlciA9PT0gMCA/IGJ5dGVPZmZzZXQgKyBnbGJPZmZzZXQgOiBieXRlT2Zmc2V0LFxuXHRcdFx0XHRcdFx0Ynl0ZUxlbmd0aFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0bGV0IHR5cGU7XG5cdFx0XHRcdFx0aWYgKGltYWdlLm1pbWVUeXBlKSB7XG5cdFx0XHRcdFx0XHR0eXBlID0gaW1hZ2UubWltZVR5cGU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHR5cGUgPSBhcnJheVswXSA9PT0gMHhmZiA/IFwiaW1hZ2UvanBlZ1wiIDogXCJpbWFnZS9wbmdcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29uc3QgYmxvYiA9IG5ldyBCbG9iKFthcnJheV0sIHsgdHlwZSB9KTtcblx0XHRcdFx0XHRpbWFnZXNbaW5kZXhdID0gYXdhaXQgY3JlYXRlSW1hZ2VCaXRtYXAoYmxvYiwge1xuXHRcdFx0XHRcdFx0Y29sb3JTcGFjZUNvbnZlcnNpb246IFwibm9uZVwiXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0KTtcblx0fVxuXG5cdGF3YWl0IFByb21pc2UuYWxsKFtsb2FkRXh0ZXJuYWxJbWFnZXMsIGxvYWRJbnRlcm5hbEltYWdlc10pO1xuXHRyZXR1cm4gbmV3IEdMVEYoanNvbiwgYnVmZmVycywgaW1hZ2VzLCBnbGJPZmZzZXQpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEdMVEYodXJsOiBzdHJpbmcpIHtcblx0Y29uc3QgZXh0ID0gdXJsLnNwbGl0KFwiLlwiKS5wb3AoKTtcblx0aWYgKGV4dCA9PT0gXCJnbHRmXCIpIHtcblx0XHRjb25zdCBqc29uID0gYXdhaXQgZmV0Y2godXJsKS50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKTtcblx0XHRyZXR1cm4gbG9hZEdMVEZPYmplY3QoanNvbiwgdXJsKTtcblx0fVxuXHRjb25zdCBnbGIgPSBhd2FpdCBmZXRjaCh1cmwpLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKTtcblx0Y29uc3QganNvbkxlbmd0aCA9IG5ldyBVaW50MzJBcnJheShnbGIsIDEyLCAxKVswXTtcblx0Y29uc3QganNvbkNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZ2xiLCAyMCwganNvbkxlbmd0aCk7XG5cdGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpLmRlY29kZShqc29uQ2h1bmspKTtcblx0cmV0dXJuIGxvYWRHTFRGT2JqZWN0KGpzb24sIHVybCwgMjggKyBqc29uTGVuZ3RoLCBnbGIpO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVNZXNoKG9wdGlvbnMsIGltYWdlcykge1xuXHRjb25zdCB7IHZlcnRleENvdW50LCBpbmRpY2VzLCBwb3NpdGlvbnMsIG5vcm1hbHMsIHV2cywgdXYxcywgdGFuZ2VudHMsIGNvbG9ycywgbWF0ZXJpYWwsIGJvdW5kaW5nQm94IH0gPSBvcHRpb25zO1xuXHRjb25zdCB7IGVtaXNzaXZlRmFjdG9yLCBlbWlzc2l2ZVRleHR1cmUsIG5hbWUsIG5vcm1hbFRleHR1cmUsIG9jY2x1c2lvblRleHR1cmUsIHBick1ldGFsbGljUm91Z2huZXNzIH0gPSBtYXRlcmlhbDtcblx0Y29uc3QgZ2VvID0gbmV3IEdlb21ldHJ5KHt9KTtcblx0aWYgKGluZGljZXMpIGdlby5zZXRJbmRpY2UoQXJyYXkuZnJvbShpbmRpY2VzKSk7XG5cdGlmIChwb3NpdGlvbnMpIGdlby5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBBcnJheS5mcm9tKHBvc2l0aW9ucyksIDMpKTtcblx0aWYgKG5vcm1hbHMpIGdlby5zZXRBdHRyaWJ1dGUobmV3IEZsb2F0MzJBdHRyaWJ1dGUoXCJub3JtYWxcIiwgQXJyYXkuZnJvbShub3JtYWxzKSwgMykpO1xuXHRpZiAodXZzKSBnZW8uc2V0QXR0cmlidXRlKG5ldyBGbG9hdDMyQXR0cmlidXRlKFwidXZcIiwgQXJyYXkuZnJvbSh1dnMpLCAyKSk7XG5cdGdlby5jb21wdXRlQm91bmRpbmdTcGhlcmUoQXJyYXkuZnJvbShwb3NpdGlvbnMpKTtcblx0Z2VvLmNvdW50ID0gdmVydGV4Q291bnQ7XG5cdGNvbnN0IG1hdCA9IG5ldyBQYnJNYXQoKTtcblx0aWYgKG5vcm1hbFRleHR1cmUpIG1hdC5ub3JtYWxUZXh0dXJlID0gZ2VuZXJhdGVUZXh0dXJlKG5vcm1hbFRleHR1cmUsIGltYWdlcyk7XG5cdGlmIChvY2NsdXNpb25UZXh0dXJlKSBtYXQuYW9UZXh0dXJlID0gZ2VuZXJhdGVUZXh0dXJlKG9jY2x1c2lvblRleHR1cmUsIGltYWdlcyk7XG5cdGlmIChlbWlzc2l2ZVRleHR1cmUpIG1hdC5lbWlzc2l2ZVRleHR1cmUgPSBnZW5lcmF0ZVRleHR1cmUoZW1pc3NpdmVUZXh0dXJlLCBpbWFnZXMpO1xuXHRpZiAocGJyTWV0YWxsaWNSb3VnaG5lc3M/LmJhc2VDb2xvclRleHR1cmUpXG5cdFx0bWF0LmJhc2VUZXh0dXJlID0gZ2VuZXJhdGVUZXh0dXJlKHBick1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUsIGltYWdlcyk7XG5cdGlmIChwYnJNZXRhbGxpY1JvdWdobmVzcz8ubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlKVxuXHRcdG1hdC5tZXRhbG5lc3NSb3VnaG5lc3NUZXh0dXJlID0gZ2VuZXJhdGVUZXh0dXJlKHBick1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSwgaW1hZ2VzKTtcblx0bWF0LmJhc2VTYW1wbGVyID0gbmV3IFNhbXBsZXIoe1xuXHRcdG1hZ0ZpbHRlcjogXCJsaW5lYXJcIixcblx0XHRtaW5GaWx0ZXI6IFwibGluZWFyXCIsXG5cdFx0YWRkcmVzc01vZGVVOiBcInJlcGVhdFwiLFxuXHRcdGFkZHJlc3NNb2RlVjogXCJyZXBlYXRcIlxuXHR9KTtcblx0bWF0LnJvdWdobmVzcyA9IDAuMztcblx0bWF0Lm1ldGFsbmVzcyA9IDEuMDtcblx0Y29uc3QgbWVzaCA9IG5ldyBNZXNoKGdlbywgbWF0KTtcblx0cmV0dXJuIG1lc2g7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVRleHR1cmUodGV4dHVyZSwgaW1hZ2VzKSB7XG5cdGNvbnN0IHsgc2FtcGxlciwgaW5kZXggfSA9IHRleHR1cmU7XG5cdHJldHVybiBuZXcgVGV4dHVyZSh7XG5cdFx0c2l6ZToge1xuXHRcdFx0d2lkdGg6IGltYWdlc1tpbmRleF0ud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGltYWdlc1tpbmRleF0uaGVpZ2h0LFxuXHRcdFx0ZGVwdGg6IDFcblx0XHR9LFxuXHRcdGRhdGE6IHtcblx0XHRcdHNvdXJjZTogaW1hZ2VzW2luZGV4XVxuXHRcdH0sXG5cdFx0Zm9ybWF0OiBcInJnYmE4dW5vcm1cIixcblx0XHR1c2FnZTogR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyB8IEdQVVRleHR1cmVVc2FnZS5DT1BZX0RTVCB8IEdQVVRleHR1cmVVc2FnZS5SRU5ERVJfQVRUQUNITUVOVFxuXHR9KTtcbn1cbiIsImltcG9ydCBHTWF0aCBmcm9tIFwiLi9NYXRoLmpzXCI7XHJcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuL1ZlY3RvcjMuanNcIjtcclxuLy9mcm9tIHRocmVlLmpzXHJcbmNsYXNzIFNwaGVyaWNhbCB7XHJcbiAgcmFkaXVzOiBudW1iZXI7XHJcbiAgcGhpOiBudW1iZXI7XHJcbiAgdGhldGE6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocmFkaXVzID0gMSwgcGhpID0gMCwgdGhldGEgPSAwKSB7XHJcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuICAgIHRoaXMucGhpID0gcGhpOyAvLyBwb2xhciBhbmdsZVxyXG4gICAgdGhpcy50aGV0YSA9IHRoZXRhOyAvLyBhemltdXRoYWwgYW5nbGVcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgc2V0KHJhZGl1czogbnVtYmVyLCBwaGk6IG51bWJlciwgdGhldGE6IG51bWJlcik6IFNwaGVyaWNhbCB7XHJcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuICAgIHRoaXMucGhpID0gcGhpO1xyXG4gICAgdGhpcy50aGV0YSA9IHRoZXRhO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBjb3B5KG90aGVyOiBTcGhlcmljYWwpOiBTcGhlcmljYWwge1xyXG4gICAgdGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XHJcbiAgICB0aGlzLnBoaSA9IG90aGVyLnBoaTtcclxuICAgIHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgLy8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZW4gRVBTIGFuZCBQSS1FUFNcclxuICBtYWtlU2FmZSgpOiBTcGhlcmljYWwge1xyXG4gICAgY29uc3QgRVBTID0gMC4wMDAwMDE7XHJcbiAgICB0aGlzLnBoaSA9IE1hdGgubWF4KEVQUywgTWF0aC5taW4oTWF0aC5QSSAtIEVQUywgdGhpcy5waGkpKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHNldEZyb21WZWN0b3IzKHY6IFZlY3RvcjMpOiBTcGhlcmljYWwge1xyXG4gICAgcmV0dXJuIHRoaXMuc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyh2LngsIHYueSwgdi56KTtcclxuICB9XHJcbiAgc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogU3BoZXJpY2FsIHtcclxuICAgIHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XHJcblxyXG4gICAgaWYgKHRoaXMucmFkaXVzID09PSAwKSB7XHJcbiAgICAgIHRoaXMudGhldGEgPSAwO1xyXG4gICAgICB0aGlzLnBoaSA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnRoZXRhID0gTWF0aC5hdGFuMih4LCB6KTtcclxuICAgICAgdGhpcy5waGkgPSBNYXRoLmFjb3MoR01hdGguY2xhbXAoeSAvIHRoaXMucmFkaXVzLCAtMSwgMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgY2xvbmUoKTogU3BoZXJpY2FsIHtcclxuICAgIHJldHVybiBuZXcgU3BoZXJpY2FsKHRoaXMucmFkaXVzLCB0aGlzLnBoaSwgdGhpcy50aGV0YSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBTcGhlcmljYWwgfTtcclxuIiwiaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcIi4uL2NvcmUvRXZlbnREaXNwYXRjaGVyXCI7XHJcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tIFwiLi4vbWF0aC9RdWF0ZXJuaW9uXCI7XHJcbmltcG9ydCB7IFNwaGVyaWNhbCB9IGZyb20gXCIuLi9tYXRoL1NwaGVyaWNhbFwiO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tIFwiLi4vbWF0aC9WZWN0b3IyXCI7XHJcbmltcG9ydCBWZWN0b3IzIGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuLy9mcm9tIHRocmVlLmpzXHJcblxyXG5jb25zdCBfY2hhbmdlRXZlbnQgPSB7IHR5cGU6IFwiY2hhbmdlXCIgfTtcclxuY29uc3QgX3N0YXJ0RXZlbnQgPSB7IHR5cGU6IFwic3RhcnRcIiB9O1xyXG5jb25zdCBfZW5kRXZlbnQgPSB7IHR5cGU6IFwiZW5kXCIgfTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9yYml0Q29udHJvbCBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XHJcbiAgZG9tRWxlbWVudDogYW55O1xyXG4gIG9iamVjdDogYW55O1xyXG4gIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgdGFyZ2V0OiBhbnk7XHJcbiAgbWluRGlzdGFuY2U6IG51bWJlcjtcclxuICBtYXhEaXN0YW5jZTogbnVtYmVyO1xyXG4gIG1pblpvb206IG51bWJlcjtcclxuICBtYXhab29tOiBudW1iZXI7XHJcbiAgbWluUG9sYXJBbmdsZTogbnVtYmVyO1xyXG4gIG1heFBvbGFyQW5nbGU6IG51bWJlcjtcclxuICBtaW5BemltdXRoQW5nbGU6IG51bWJlcjtcclxuICBtYXhBemltdXRoQW5nbGU6IG51bWJlcjtcclxuICBlbmFibGVEYW1waW5nOiBib29sZWFuO1xyXG4gIGRhbXBpbmdGYWN0b3I6IG51bWJlcjtcclxuICBlbmFibGVab29tOiBib29sZWFuO1xyXG4gIHpvb21TcGVlZDogbnVtYmVyO1xyXG4gIGVuYWJsZVJvdGF0ZTogYm9vbGVhbjtcclxuICByb3RhdGVTcGVlZDogbnVtYmVyO1xyXG4gIGVuYWJsZVBhbjogYm9vbGVhbjtcclxuICBwYW5TcGVlZDogbnVtYmVyO1xyXG4gIHNjcmVlblNwYWNlUGFubmluZzogYm9vbGVhbjtcclxuICBrZXlQYW5TcGVlZDogbnVtYmVyO1xyXG4gIGF1dG9Sb3RhdGU6IGJvb2xlYW47XHJcbiAgYXV0b1JvdGF0ZVNwZWVkOiBudW1iZXI7XHJcbiAga2V5czogeyBMRUZUOiBzdHJpbmc7IFVQOiBzdHJpbmc7IFJJR0hUOiBzdHJpbmc7IEJPVFRPTTogc3RyaW5nIH07XHJcbiAgbW91c2VCdXR0b25zOiB7IExFRlQ6IGFueTsgTUlERExFOiBhbnk7IFJJR0hUOiBhbnkgfTtcclxuICB0b3VjaGVzOiB7IE9ORTogYW55OyBUV086IGFueSB9O1xyXG4gIHRhcmdldDA6IGFueTtcclxuICBwb3NpdGlvbjA6IGFueTtcclxuICB6b29tMDogYW55O1xyXG4gIHByaXZhdGUgX2RvbUVsZW1lbnRLZXlFdmVudHM6IGFueTtcclxuICBzcGhlcmljYWw6IGFueTtcclxuICBvblBvaW50ZXJNb3ZlOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICBvblBvaW50ZXJVcDogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XHJcbiAgb25Db250ZXh0TWVudTogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XHJcbiAgb25Qb2ludGVyRG93bjogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XHJcbiAgb25Nb3VzZVdoZWVsOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICBvbktleURvd246IChldmVudDogYW55KSA9PiB2b2lkO1xyXG4gIGdldEF1dG9Sb3RhdGlvbkFuZ2xlOiAoKSA9PiBudW1iZXI7XHJcbiAgdXBkYXRlOiAoKSA9PiBib29sZWFuO1xyXG4gIGNvbnN0cnVjdG9yKG9iamVjdCwgZG9tRWxlbWVudCkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBpZiAoZG9tRWxlbWVudCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ09yYml0Q29udHJvbHM6IFRoZSBzZWNvbmQgcGFyYW1ldGVyIFwiZG9tRWxlbWVudFwiIGlzIG5vdyBtYW5kYXRvcnkuJ1xyXG4gICAgICApO1xyXG4gICAgaWYgKGRvbUVsZW1lbnQgPT09IGRvY3VtZW50KVxyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdPcmJpdENvbnRyb2xzOiBcImRvY3VtZW50XCIgc2hvdWxkIG5vdCBiZSB1c2VkIGFzIHRoZSB0YXJnZXQgXCJkb21FbGVtZW50XCIuIFBsZWFzZSB1c2UgXCJyZW5kZXJlci5kb21FbGVtZW50XCIgaW5zdGVhZC4nXHJcbiAgICAgICk7XHJcblxyXG4gICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBkb21FbGVtZW50O1xyXG4gICAgdGhpcy5kb21FbGVtZW50LnN0eWxlLnRvdWNoQWN0aW9uID0gXCJub25lXCI7IC8vIGRpc2FibGUgdG91Y2ggc2Nyb2xsXHJcblxyXG4gICAgLy8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdGhpcyBjb250cm9sXHJcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIC8vIFwidGFyZ2V0XCIgc2V0cyB0aGUgbG9jYXRpb24gb2YgZm9jdXMsIHdoZXJlIHRoZSBvYmplY3Qgb3JiaXRzIGFyb3VuZFxyXG4gICAgdGhpcy50YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuICAgIC8vIEhvdyBmYXIgeW91IGNhbiBkb2xseSBpbiBhbmQgb3V0ICggUGVyc3BlY3RpdmVDYW1lcmEgb25seSApXHJcbiAgICB0aGlzLm1pbkRpc3RhbmNlID0gMDtcclxuICAgIHRoaXMubWF4RGlzdGFuY2UgPSBJbmZpbml0eTtcclxuXHJcbiAgICAvLyBIb3cgZmFyIHlvdSBjYW4gem9vbSBpbiBhbmQgb3V0ICggT3J0aG9ncmFwaGljQ2FtZXJhIG9ubHkgKVxyXG4gICAgdGhpcy5taW5ab29tID0gMDtcclxuICAgIHRoaXMubWF4Wm9vbSA9IEluZmluaXR5O1xyXG5cclxuICAgIC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCB2ZXJ0aWNhbGx5LCB1cHBlciBhbmQgbG93ZXIgbGltaXRzLlxyXG4gICAgLy8gUmFuZ2UgaXMgMCB0byBNYXRoLlBJIHJhZGlhbnMuXHJcbiAgICB0aGlzLm1pblBvbGFyQW5nbGUgPSAwOyAvLyByYWRpYW5zXHJcbiAgICB0aGlzLm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJOyAvLyByYWRpYW5zXHJcblxyXG4gICAgLy8gSG93IGZhciB5b3UgY2FuIG9yYml0IGhvcml6b250YWxseSwgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cy5cclxuICAgIC8vIElmIHNldCwgdGhlIGludGVydmFsIFsgbWluLCBtYXggXSBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIFsgLSAyIFBJLCAyIFBJIF0sIHdpdGggKCBtYXggLSBtaW4gPCAyIFBJIClcclxuICAgIHRoaXMubWluQXppbXV0aEFuZ2xlID0gLUluZmluaXR5OyAvLyByYWRpYW5zXHJcbiAgICB0aGlzLm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5OyAvLyByYWRpYW5zXHJcblxyXG4gICAgLy8gU2V0IHRvIHRydWUgdG8gZW5hYmxlIGRhbXBpbmcgKGluZXJ0aWEpXHJcbiAgICAvLyBJZiBkYW1waW5nIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxyXG4gICAgdGhpcy5lbmFibGVEYW1waW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLmRhbXBpbmdGYWN0b3IgPSAwLjA1O1xyXG5cclxuICAgIC8vIFRoaXMgb3B0aW9uIGFjdHVhbGx5IGVuYWJsZXMgZG9sbHlpbmcgaW4gYW5kIG91dDsgbGVmdCBhcyBcInpvb21cIiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXHJcbiAgICAvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB6b29taW5nXHJcbiAgICB0aGlzLmVuYWJsZVpvb20gPSB0cnVlO1xyXG4gICAgdGhpcy56b29tU3BlZWQgPSAxLjA7XHJcblxyXG4gICAgLy8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcm90YXRpbmdcclxuICAgIHRoaXMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcclxuICAgIHRoaXMucm90YXRlU3BlZWQgPSAxLjA7XHJcblxyXG4gICAgLy8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcGFubmluZ1xyXG4gICAgdGhpcy5lbmFibGVQYW4gPSB0cnVlO1xyXG4gICAgdGhpcy5wYW5TcGVlZCA9IDEuMDtcclxuICAgIHRoaXMuc2NyZWVuU3BhY2VQYW5uaW5nID0gZmFsc2U7IC8vIGlmIGZhbHNlLCBwYW4gb3J0aG9nb25hbCB0byB3b3JsZC1zcGFjZSBkaXJlY3Rpb24gY2FtZXJhLnVwXHJcbiAgICB0aGlzLmtleVBhblNwZWVkID0gNy4wOyAvLyBwaXhlbHMgbW92ZWQgcGVyIGFycm93IGtleSBwdXNoXHJcblxyXG4gICAgLy8gU2V0IHRvIHRydWUgdG8gYXV0b21hdGljYWxseSByb3RhdGUgYXJvdW5kIHRoZSB0YXJnZXRcclxuICAgIC8vIElmIGF1dG8tcm90YXRlIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxyXG4gICAgdGhpcy5hdXRvUm90YXRlID0gZmFsc2U7XHJcbiAgICB0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgb3JiaXQgd2hlbiBmcHMgaXMgNjBcclxuXHJcbiAgICAvLyBUaGUgZm91ciBhcnJvdyBrZXlzXHJcbiAgICB0aGlzLmtleXMgPSB7XHJcbiAgICAgIExFRlQ6IFwiQXJyb3dMZWZ0XCIsXHJcbiAgICAgIFVQOiBcIkFycm93VXBcIixcclxuICAgICAgUklHSFQ6IFwiQXJyb3dSaWdodFwiLFxyXG4gICAgICBCT1RUT006IFwiQXJyb3dEb3duXCIsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE1vdXNlIGJ1dHRvbnNcclxuICAgIHRoaXMubW91c2VCdXR0b25zID0ge1xyXG4gICAgICBMRUZUOiBNT1VTRS5ST1RBVEUsXHJcbiAgICAgIE1JRERMRTogTU9VU0UuRE9MTFksXHJcbiAgICAgIFJJR0hUOiBNT1VTRS5QQU4sXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRvdWNoIGZpbmdlcnNcclxuICAgIHRoaXMudG91Y2hlcyA9IHsgT05FOiBUT1VDSC5ST1RBVEUsIFRXTzogVE9VQ0guRE9MTFlfUEFOIH07XHJcblxyXG4gICAgLy8gZm9yIHJlc2V0XHJcbiAgICB0aGlzLnRhcmdldDAgPSB0aGlzLnRhcmdldC5jbG9uZSgpO1xyXG4gICAgdGhpcy5wb3NpdGlvbjAgPSB0aGlzLm9iamVjdC5wb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgdGhpcy56b29tMCA9IHRoaXMub2JqZWN0Lnpvb207XHJcblxyXG4gICAgLy8gdGhlIHRhcmdldCBET00gZWxlbWVudCBmb3Iga2V5IGV2ZW50c1xyXG4gICAgdGhpcy5fZG9tRWxlbWVudEtleUV2ZW50cyA9IG51bGw7XHJcblxyXG4gICAgLy9cclxuICAgIC8vIHB1YmxpYyBtZXRob2RzXHJcbiAgICAvL1xyXG4gICAgLy8gdGhpcyBtZXRob2QgaXMgZXhwb3NlZCwgYnV0IHBlcmhhcHMgaXQgd291bGQgYmUgYmV0dGVyIGlmIHdlIGNhbiBtYWtlIGl0IHByaXZhdGUuLi5cclxuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgdGhpcy51cGRhdGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zdCBvZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICAvLyBzbyBjYW1lcmEudXAgaXMgdGhlIG9yYml0IGF4aXNcclxuICAgICAgY29uc3QgcXVhdCA9IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RnJvbVVuaXRWZWN0b3JzKFxyXG4gICAgICAgIHRoYXQub2JqZWN0LnVwLFxyXG4gICAgICAgIG5ldyBWZWN0b3IzKDAsIDEsIDApXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHF1YXRJbnZlcnNlID0gcXVhdC5jbG9uZSgpLmludmVydCgpO1xyXG5cclxuICAgICAgY29uc3QgbGFzdFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgY29uc3QgbGFzdFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cclxuICAgICAgY29uc3QgdHdvUEkgPSAyICogTWF0aC5QSTtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoYXQub2JqZWN0LnBvc2l0aW9uO1xyXG5cclxuICAgICAgICBvZmZzZXQuY29weShwb3NpdGlvbikuc3VidHJhY3QodGhhdC50YXJnZXQpO1xyXG5cclxuICAgICAgICAvLyByb3RhdGUgb2Zmc2V0IHRvIFwieS1heGlzLWlzLXVwXCIgc3BhY2VcclxuICAgICAgICBvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXQpO1xyXG5cclxuICAgICAgICAvLyBhbmdsZSBmcm9tIHotYXhpcyBhcm91bmQgeS1heGlzXHJcbiAgICAgICAgc3BoZXJpY2FsLnNldEZyb21WZWN0b3IzKG9mZnNldCk7XHJcblxyXG4gICAgICAgIGlmICh0aGF0LmF1dG9Sb3RhdGUgJiYgc3RhdGUgPT09IFNUQVRFLk5PTkUpIHtcclxuICAgICAgICAgIHJvdGF0ZUxlZnQodGhhdC5nZXRBdXRvUm90YXRpb25BbmdsZSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGF0LmVuYWJsZURhbXBpbmcpIHtcclxuICAgICAgICAgIHNwaGVyaWNhbC50aGV0YSArPSBzcGhlcmljYWxEZWx0YS50aGV0YSAqIHRoYXQuZGFtcGluZ0ZhY3RvcjtcclxuICAgICAgICAgIHNwaGVyaWNhbC5waGkgKz0gc3BoZXJpY2FsRGVsdGEucGhpICogdGhhdC5kYW1waW5nRmFjdG9yO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzcGhlcmljYWwudGhldGEgKz0gc3BoZXJpY2FsRGVsdGEudGhldGE7XHJcbiAgICAgICAgICBzcGhlcmljYWwucGhpICs9IHNwaGVyaWNhbERlbHRhLnBoaTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlc3RyaWN0IHRoZXRhIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcclxuXHJcbiAgICAgICAgbGV0IG1pbiA9IHRoYXQubWluQXppbXV0aEFuZ2xlO1xyXG4gICAgICAgIGxldCBtYXggPSB0aGF0Lm1heEF6aW11dGhBbmdsZTtcclxuXHJcbiAgICAgICAgaWYgKGlzRmluaXRlKG1pbikgJiYgaXNGaW5pdGUobWF4KSkge1xyXG4gICAgICAgICAgaWYgKG1pbiA8IC1NYXRoLlBJKSBtaW4gKz0gdHdvUEk7XHJcbiAgICAgICAgICBlbHNlIGlmIChtaW4gPiBNYXRoLlBJKSBtaW4gLT0gdHdvUEk7XHJcblxyXG4gICAgICAgICAgaWYgKG1heCA8IC1NYXRoLlBJKSBtYXggKz0gdHdvUEk7XHJcbiAgICAgICAgICBlbHNlIGlmIChtYXggPiBNYXRoLlBJKSBtYXggLT0gdHdvUEk7XHJcblxyXG4gICAgICAgICAgaWYgKG1pbiA8PSBtYXgpIHtcclxuICAgICAgICAgICAgc3BoZXJpY2FsLnRoZXRhID0gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHNwaGVyaWNhbC50aGV0YSkpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3BoZXJpY2FsLnRoZXRhID1cclxuICAgICAgICAgICAgICBzcGhlcmljYWwudGhldGEgPiAobWluICsgbWF4KSAvIDJcclxuICAgICAgICAgICAgICAgID8gTWF0aC5tYXgobWluLCBzcGhlcmljYWwudGhldGEpXHJcbiAgICAgICAgICAgICAgICA6IE1hdGgubWluKG1heCwgc3BoZXJpY2FsLnRoZXRhKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXHJcbiAgICAgICAgc3BoZXJpY2FsLnBoaSA9IE1hdGgubWF4KFxyXG4gICAgICAgICAgdGhhdC5taW5Qb2xhckFuZ2xlLFxyXG4gICAgICAgICAgTWF0aC5taW4odGhhdC5tYXhQb2xhckFuZ2xlLCBzcGhlcmljYWwucGhpKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHNwaGVyaWNhbC5tYWtlU2FmZSgpO1xyXG5cclxuICAgICAgICBzcGhlcmljYWwucmFkaXVzICo9IHNjYWxlO1xyXG5cclxuICAgICAgICAvLyByZXN0cmljdCByYWRpdXMgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gICAgICAgIHNwaGVyaWNhbC5yYWRpdXMgPSBNYXRoLm1heChcclxuICAgICAgICAgIHRoYXQubWluRGlzdGFuY2UsXHJcbiAgICAgICAgICBNYXRoLm1pbih0aGF0Lm1heERpc3RhbmNlLCBzcGhlcmljYWwucmFkaXVzKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIG1vdmUgdGFyZ2V0IHRvIHBhbm5lZCBsb2NhdGlvblxyXG5cclxuICAgICAgICBpZiAodGhhdC5lbmFibGVEYW1waW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICB0aGF0LnRhcmdldC5hZGRTY2FsZWRWZWN0b3IocGFuT2Zmc2V0LCB0aGF0LmRhbXBpbmdGYWN0b3IpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGF0LnRhcmdldC5hZGQocGFuT2Zmc2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgVmVjdG9yMy5mcm9tU3BoZXJpY2FsKHNwaGVyaWNhbCwgb2Zmc2V0KTtcclxuICAgICAgICAvLyByb3RhdGUgb2Zmc2V0IGJhY2sgdG8gXCJjYW1lcmEtdXAtdmVjdG9yLWlzLXVwXCIgc3BhY2VcclxuICAgICAgICBvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXRJbnZlcnNlKTtcclxuXHJcbiAgICAgICAgcG9zaXRpb24uY29weSh0aGF0LnRhcmdldCkuYWRkKG9mZnNldCk7XHJcblxyXG4gICAgICAgIHRoYXQub2JqZWN0Lmxvb2tBdCh0aGF0LnRhcmdldC54LCB0aGF0LnRhcmdldC55LCB0aGF0LnRhcmdldC56KTtcclxuXHJcbiAgICAgICAgaWYgKHRoYXQuZW5hYmxlRGFtcGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgc3BoZXJpY2FsRGVsdGEudGhldGEgKj0gMSAtIHRoYXQuZGFtcGluZ0ZhY3RvcjtcclxuICAgICAgICAgIHNwaGVyaWNhbERlbHRhLnBoaSAqPSAxIC0gdGhhdC5kYW1waW5nRmFjdG9yO1xyXG5cclxuICAgICAgICAgIFZlY3RvcjMubXVsdGlwbHlCeVNjYWxhcihcclxuICAgICAgICAgICAgcGFuT2Zmc2V0LFxyXG4gICAgICAgICAgICAxIC0gdGhhdC5kYW1waW5nRmFjdG9yLFxyXG4gICAgICAgICAgICBwYW5PZmZzZXRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICAvLyBwYW5PZmZzZXQubXVsdGlwbHlTY2FsYXIoIDEgLSB0aGlzLmRhbXBpbmdGYWN0b3IgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3BoZXJpY2FsRGVsdGEuc2V0KDAsIDAsIDApO1xyXG5cclxuICAgICAgICAgIHBhbk9mZnNldC5zZXQoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzY2FsZSA9IDE7XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZSBjb25kaXRpb24gaXM6XHJcbiAgICAgICAgLy8gbWluKGNhbWVyYSBkaXNwbGFjZW1lbnQsIGNhbWVyYSByb3RhdGlvbiBpbiByYWRpYW5zKV4yID4gRVBTXHJcbiAgICAgICAgLy8gdXNpbmcgc21hbGwtYW5nbGUgYXBwcm94aW1hdGlvbiBjb3MoeC8yKSA9IDEgLSB4XjIgLyA4XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHpvb21DaGFuZ2VkIHx8XHJcbiAgICAgICAgICBWZWN0b3IzLmRpc3RhbmNlU3F1YXJlZChsYXN0UG9zaXRpb24sIHRoYXQub2JqZWN0LnBvc2l0aW9uKSA+IEVQUyB8fFxyXG4gICAgICAgICAgOCAqICgxIC0gbGFzdFF1YXRlcm5pb24uZG90KHRoYXQub2JqZWN0LnF1YXRlcm5pb24pKSA+IEVQU1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgdGhhdC5kaXNwYXRjaEV2ZW50KF9jaGFuZ2VFdmVudCk7XHJcblxyXG4gICAgICAgICAgLy9sYXN0UG9zaXRpb24uY29weSggdGhpcy5vYmplY3QucG9zaXRpb24gKTtcclxuICAgICAgICAgIFZlY3RvcjMuY2xvbmUodGhhdC5vYmplY3QucG9zaXRpb24sIGxhc3RQb3NpdGlvbik7XHJcbiAgICAgICAgICBRdWF0ZXJuaW9uLmNsb25lKHRoYXQub2JqZWN0LnF1YXRlcm5pb24sIGxhc3RRdWF0ZXJuaW9uKTtcclxuICAgICAgICAgIC8vbGFzdFF1YXRlcm5pb24uY29weSggdGhpcy5vYmplY3QucXVhdGVybmlvbiApO1xyXG4gICAgICAgICAgem9vbUNoYW5nZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfTtcclxuICAgIH0pKCk7XHJcbiAgICB0aGlzLmluaXQoKTtcclxuICB9XHJcbiAgZ2V0UG9sYXJBbmdsZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnNwaGVyaWNhbC5waGk7XHJcbiAgfVxyXG4gIGdldEF6aW11dGhhbEFuZ2xlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3BoZXJpY2FsLnRoZXRhO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlzdGFuY2UoKSB7XHJcbiAgICByZXR1cm4gVmVjdG9yMy5kaXN0YW5jZSh0aGlzLm9iamVjdC5wb3NpdGlvbiwgdGhpcy50YXJnZXQpO1xyXG4gIH1cclxuXHJcbiAgbGlzdGVuVG9LZXlFdmVudHMoZG9tRWxlbWVudCkge1xyXG4gICAgZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLm9uS2V5RG93bik7XHJcbiAgICB0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzID0gZG9tRWxlbWVudDtcclxuICB9XHJcblxyXG4gIHNhdmVTdGF0ZSgpIHtcclxuICAgIFZlY3RvcjMuY2xvbmUodGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0MCk7XHJcbiAgICAvL3RoaXMudGFyZ2V0MC5jb3B5KCB0aGlzLnRhcmdldCApO1xyXG4gICAgVmVjdG9yMy5jbG9uZSh0aGlzLm9iamVjdC5wb3NpdGlvbiwgdGhpcy5wb3NpdGlvbjApO1xyXG4gICAgLy90aGlzLnBvc2l0aW9uMC5jb3B5KCB0aGlzLm9iamVjdC5wb3NpdGlvbiApO1xyXG4gICAgdGhpcy56b29tMCA9IHRoaXMub2JqZWN0Lnpvb207XHJcbiAgfVxyXG5cclxuICByZXNldCgpIHtcclxuICAgIFZlY3RvcjMuY2xvbmUodGhpcy50YXJnZXQwLCB0aGlzLnRhcmdldCk7XHJcbiAgICAvL3RoaXMudGFyZ2V0LmNvcHkoIHRoaXMudGFyZ2V0MCApO1xyXG4gICAgVmVjdG9yMy5jbG9uZSh0aGlzLnBvc2l0aW9uMCwgdGhpcy5vYmplY3QucG9zaXRpb24pO1xyXG4gICAgLy90aGlzLm9iamVjdC5wb3NpdGlvbi5jb3B5KCB0aGlzLnBvc2l0aW9uMCApO1xyXG4gICAgdGhpcy5vYmplY3Quem9vbSA9IHRoaXMuem9vbTA7XHJcblxyXG4gICAgdGhpcy5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KF9jaGFuZ2VFdmVudCk7XHJcblxyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXQoKSB7XHJcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgIGNvbnN0IHBhbkxlZnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zdCB2ID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBhbkxlZnQoZGlzdGFuY2UsIG9iamVjdE1hdHJpeCkge1xyXG4gICAgICAgIHYuc2V0RnJvbU1hdHJpeENvbHVtbihvYmplY3RNYXRyaXgsIDApOyAvLyBnZXQgWCBjb2x1bW4gb2Ygb2JqZWN0TWF0cml4XHJcbiAgICAgICAgdi5tdWx0aXBseUJ5U2NhbGFyKC1kaXN0YW5jZSk7XHJcbiAgICAgICAgcGFuT2Zmc2V0LmFkZCh2KTtcclxuICAgICAgfTtcclxuICAgIH0pKCk7XHJcbiAgICBjb25zdCBwYW5VcCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IHBhblVwViA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiBwYW5VcChkaXN0YW5jZSwgb2JqZWN0TWF0cml4KSB7XHJcbiAgICAgICAgaWYgKHRoYXQuc2NyZWVuU3BhY2VQYW5uaW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICBwYW5VcFYuc2V0RnJvbU1hdHJpeENvbHVtbihvYmplY3RNYXRyaXgsIDEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwYW5VcFYuc2V0RnJvbU1hdHJpeENvbHVtbihvYmplY3RNYXRyaXgsIDApO1xyXG4gICAgICAgICAgLy9wYW5VcFYuY3Jvc3NWZWN0b3JzKCB0aGlzLm9iamVjdC51cCwgcGFuVXBWICk7XHJcbiAgICAgICAgICBWZWN0b3IzLmNyb3NzKHRoYXQub2JqZWN0LnVwLCBwYW5VcFYsIHBhblVwVik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYW5VcFYubXVsdGlwbHlCeVNjYWxhcihkaXN0YW5jZSk7XHJcblxyXG4gICAgICAgIHBhbk9mZnNldC5hZGQocGFuVXBWKTtcclxuICAgICAgfTtcclxuICAgIH0pKCk7XHJcbiAgICAvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcclxuICAgIGNvbnN0IHBhbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IG9mZnNldCA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiBwYW4oZGVsdGFYLCBkZWx0YVkpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhhdC5kb21FbGVtZW50O1xyXG4gICAgICAgIGlmICh0aGF0Lm9iamVjdC5pc1BlcnNwZWN0aXZlQ2FtZXJhKSB7XHJcbiAgICAgICAgICAvLyBwZXJzcGVjdGl2ZVxyXG4gICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGF0Lm9iamVjdC5wb3NpdGlvbjtcclxuICAgICAgICAgIG9mZnNldC5jb3B5KHBvc2l0aW9uKS5zdWJ0cmFjdCh0aGF0LnRhcmdldCk7XHJcbiAgICAgICAgICBsZXQgdGFyZ2V0RGlzdGFuY2UgPSBvZmZzZXQubGVuZ3RoKCk7XHJcblxyXG4gICAgICAgICAgLy8gaGFsZiBvZiB0aGUgZm92IGlzIGNlbnRlciB0byB0b3Agb2Ygc2NyZWVuXHJcbiAgICAgICAgICB0YXJnZXREaXN0YW5jZSAqPSBNYXRoLnRhbigoKHRoYXQub2JqZWN0LmZvdiAvIDIpICogTWF0aC5QSSkgLyAxODAuMCk7XHJcblxyXG4gICAgICAgICAgLy8gd2UgdXNlIG9ubHkgY2xpZW50SGVpZ2h0IGhlcmUgc28gYXNwZWN0IHJhdGlvIGRvZXMgbm90IGRpc3RvcnQgc3BlZWRcclxuICAgICAgICAgIHBhbkxlZnQoXHJcbiAgICAgICAgICAgICgyICogZGVsdGFYICogdGFyZ2V0RGlzdGFuY2UpIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsXHJcbiAgICAgICAgICAgIHRoYXQub2JqZWN0Lm1vZGVsTWF0cml4XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgcGFuVXAoXHJcbiAgICAgICAgICAgICgyICogZGVsdGFZICogdGFyZ2V0RGlzdGFuY2UpIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsXHJcbiAgICAgICAgICAgIHRoYXQub2JqZWN0Lm1vZGVsTWF0cml4XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhhdC5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEpIHtcclxuICAgICAgICAgIC8vIG9ydGhvZ3JhcGhpY1xyXG4gICAgICAgICAgcGFuTGVmdChcclxuICAgICAgICAgICAgKGRlbHRhWCAqICh0aGF0Lm9iamVjdC5yaWdodCAtIHRoYXQub2JqZWN0LmxlZnQpKSAvXHJcbiAgICAgICAgICAgICAgdGhhdC5vYmplY3Quem9vbSAvXHJcbiAgICAgICAgICAgICAgZWxlbWVudC5jbGllbnRXaWR0aCxcclxuICAgICAgICAgICAgdGhhdC5vYmplY3QubW9kZWxNYXRyaXhcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBwYW5VcChcclxuICAgICAgICAgICAgKGRlbHRhWSAqICh0aGF0Lm9iamVjdC50b3AgLSB0aGF0Lm9iamVjdC5ib3R0b20pKSAvXHJcbiAgICAgICAgICAgICAgdGhhdC5vYmplY3Quem9vbSAvXHJcbiAgICAgICAgICAgICAgZWxlbWVudC5jbGllbnRIZWlnaHQsXHJcbiAgICAgICAgICAgIHRoYXQub2JqZWN0Lm1vZGVsTWF0cml4XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBjYW1lcmEgbmVpdGhlciBvcnRob2dyYXBoaWMgbm9yIHBlcnNwZWN0aXZlXHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICAgIFwiV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlIC0gcGFuIGRpc2FibGVkLlwiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgdGhhdC5lbmFibGVQYW4gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9KSgpO1xyXG4gICAgY29uc3QgZG9sbHlPdXQgPSAoZG9sbHlTY2FsZSkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5vYmplY3QuaXNQZXJzcGVjdGl2ZUNhbWVyYSkge1xyXG4gICAgICAgIHNjYWxlIC89IGRvbGx5U2NhbGU7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEpIHtcclxuICAgICAgICB0aGlzLm9iamVjdC56b29tID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICB0aGlzLm1pblpvb20sXHJcbiAgICAgICAgICBNYXRoLm1pbih0aGlzLm1heFpvb20sIHRoaXMub2JqZWN0Lnpvb20gKiBkb2xseVNjYWxlKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gICAgICAgIHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICBcIldBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlWm9vbSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGRvbGx5SW4gPSAoZG9sbHlTY2FsZSkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5vYmplY3QuaXNQZXJzcGVjdGl2ZUNhbWVyYSkge1xyXG4gICAgICAgIHNjYWxlICo9IGRvbGx5U2NhbGU7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEpIHtcclxuICAgICAgICB0aGlzLm9iamVjdC56b29tID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICB0aGlzLm1pblpvb20sXHJcbiAgICAgICAgICBNYXRoLm1pbih0aGlzLm1heFpvb20sIHRoaXMub2JqZWN0Lnpvb20gLyBkb2xseVNjYWxlKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gICAgICAgIHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICBcIldBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlWm9vbSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaGFuZGxlTW91c2VNb3ZlUm90YXRlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIHJvdGF0ZUVuZC5zZXQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XHJcblxyXG4gICAgICBWZWN0b3IyLnN1YnRyYWN0KHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQsIHJvdGF0ZURlbHRhKTtcclxuICAgICAgVmVjdG9yMi5tdWx0aXBseUJ5U2NhbGFyKHJvdGF0ZURlbHRhLCB0aGlzLnJvdGF0ZVNwZWVkLCByb3RhdGVEZWx0YSk7XHJcbiAgICAgIC8vcm90YXRlRGVsdGEuc3ViVmVjdG9ycyggcm90YXRlRW5kLCByb3RhdGVTdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnJvdGF0ZVNwZWVkICk7XHJcblxyXG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5kb21FbGVtZW50O1xyXG5cclxuICAgICAgcm90YXRlTGVmdCgoMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS54KSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0KTsgLy8geWVzLCBoZWlnaHRcclxuXHJcbiAgICAgIHJvdGF0ZVVwKCgyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnkpIC8gZWxlbWVudC5jbGllbnRIZWlnaHQpO1xyXG5cclxuICAgICAgVmVjdG9yMi5jbG9uZShyb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0KTtcclxuICAgICAgLy9yb3RhdGVTdGFydC5jb3B5KCByb3RhdGVFbmQgKTtcclxuXHJcbiAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZU1vdXNlTW92ZURvbGx5ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGRvbGx5RW5kLnNldChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxuXHJcbiAgICAgIFZlY3RvcjIuc3VidHJhY3QoZG9sbHlFbmQsIGRvbGx5U3RhcnQsIGRvbGx5RGVsdGEpO1xyXG4gICAgICAvLyBkb2xseURlbHRhLnN1YlZlY3RvcnMoIGRvbGx5RW5kLCBkb2xseVN0YXJ0ICk7XHJcblxyXG4gICAgICBpZiAoZG9sbHlEZWx0YS55ID4gMCkge1xyXG4gICAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgfSBlbHNlIGlmIChkb2xseURlbHRhLnkgPCAwKSB7XHJcbiAgICAgICAgZG9sbHlJbihnZXRab29tU2NhbGUoKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFZlY3RvcjIuY2xvbmUoZG9sbHlFbmQsIGRvbGx5U3RhcnQpO1xyXG4gICAgICAvLyBkb2xseVN0YXJ0LmNvcHkoIGRvbGx5RW5kICk7XHJcblxyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVNb3VzZU1vdmVQYW4gPSAoZXZlbnQpID0+IHtcclxuICAgICAgcGFuRW5kLnNldChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxuXHJcbiAgICAgIFZlY3RvcjIuc3VidHJhY3QocGFuRW5kLCBwYW5TdGFydCwgcGFuRGVsdGEpO1xyXG4gICAgICBWZWN0b3IyLm11bHRpcGx5QnlTY2FsYXIocGFuRGVsdGEsIHRoaXMucGFuU3BlZWQsIHBhbkRlbHRhKTtcclxuICAgICAgLy9wYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHRoaXMucGFuU3BlZWQgKTtcclxuXHJcbiAgICAgIHBhbihwYW5EZWx0YS54LCBwYW5EZWx0YS55KTtcclxuXHJcbiAgICAgIFZlY3RvcjIuY2xvbmUocGFuRW5kLCBwYW5TdGFydCk7XHJcbiAgICAgIC8vcGFuU3RhcnQuY29weSggcGFuRW5kICk7XHJcblxyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVNb3VzZVdoZWVsID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChldmVudC5kZWx0YVkgPCAwKSB7XHJcbiAgICAgICAgZG9sbHlJbihnZXRab29tU2NhbGUoKSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQuZGVsdGFZID4gMCkge1xyXG4gICAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xyXG4gICAgICBsZXQgbmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuXHJcbiAgICAgIHN3aXRjaCAoZXZlbnQuY29kZSkge1xyXG4gICAgICAgIGNhc2UgdGhpcy5rZXlzLlVQOlxyXG4gICAgICAgICAgcGFuKDAsIHRoaXMua2V5UGFuU3BlZWQpO1xyXG4gICAgICAgICAgbmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgdGhpcy5rZXlzLkJPVFRPTTpcclxuICAgICAgICAgIHBhbigwLCAtdGhpcy5rZXlQYW5TcGVlZCk7XHJcbiAgICAgICAgICBuZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSB0aGlzLmtleXMuTEVGVDpcclxuICAgICAgICAgIHBhbih0aGlzLmtleVBhblNwZWVkLCAwKTtcclxuICAgICAgICAgIG5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIHRoaXMua2V5cy5SSUdIVDpcclxuICAgICAgICAgIHBhbigtdGhpcy5rZXlQYW5TcGVlZCwgMCk7XHJcbiAgICAgICAgICBuZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5lZWRzVXBkYXRlKSB7XHJcbiAgICAgICAgLy8gcHJldmVudCB0aGUgYnJvd3NlciBmcm9tIHNjcm9sbGluZyBvbiBjdXJzb3Iga2V5c1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlVG91Y2hTdGFydERvbGx5UGFuID0gKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbmFibGVab29tKSBoYW5kbGVUb3VjaFN0YXJ0RG9sbHkoKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmVuYWJsZVBhbikgaGFuZGxlVG91Y2hTdGFydFBhbigpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnREb2xseVJvdGF0ZSA9ICgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuZW5hYmxlWm9vbSkgaGFuZGxlVG91Y2hTdGFydERvbGx5KCk7XHJcblxyXG4gICAgICBpZiAodGhpcy5lbmFibGVSb3RhdGUpIGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlUm90YXRlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChwb2ludGVycy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgIHJvdGF0ZUVuZC5zZXQoZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFNlY29uZFBvaW50ZXJQb3NpdGlvbihldmVudCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHggPSAwLjUgKiAoZXZlbnQucGFnZVggKyBwb3NpdGlvbi54KTtcclxuICAgICAgICBjb25zdCB5ID0gMC41ICogKGV2ZW50LnBhZ2VZICsgcG9zaXRpb24ueSk7XHJcblxyXG4gICAgICAgIHJvdGF0ZUVuZC5zZXQoeCwgeSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFZlY3RvcjIuc3VidHJhY3Qocm90YXRlRW5kLCByb3RhdGVTdGFydCwgcm90YXRlRGVsdGEpO1xyXG4gICAgICBWZWN0b3IyLm11bHRpcGx5QnlTY2FsYXIocm90YXRlRGVsdGEsIHRoaXMucm90YXRlU3BlZWQsIHJvdGF0ZURlbHRhKTtcclxuICAgICAgLy9yb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCByb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHRoaXMucm90YXRlU3BlZWQgKTtcclxuXHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQ7XHJcblxyXG4gICAgICByb3RhdGVMZWZ0KCgyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLngpIC8gZWxlbWVudC5jbGllbnRIZWlnaHQpOyAvLyB5ZXMsIGhlaWdodFxyXG5cclxuICAgICAgcm90YXRlVXAoKDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueSkgLyBlbGVtZW50LmNsaWVudEhlaWdodCk7XHJcbiAgICAgIFZlY3RvcjIuY2xvbmUocm90YXRlRW5kLCByb3RhdGVTdGFydCk7XHJcbiAgICAgIC8vcm90YXRlU3RhcnQuY29weSggcm90YXRlRW5kICk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZVRvdWNoTW92ZVBhbiA9IChldmVudCkgPT4ge1xyXG4gICAgICBpZiAocG9pbnRlcnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgcGFuRW5kLnNldChldmVudC5wYWdlWCwgZXZlbnQucGFnZVkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKGV2ZW50KTtcclxuXHJcbiAgICAgICAgY29uc3QgeCA9IDAuNSAqIChldmVudC5wYWdlWCArIHBvc2l0aW9uLngpO1xyXG4gICAgICAgIGNvbnN0IHkgPSAwLjUgKiAoZXZlbnQucGFnZVkgKyBwb3NpdGlvbi55KTtcclxuXHJcbiAgICAgICAgcGFuRW5kLnNldCh4LCB5KTtcclxuICAgICAgfVxyXG4gICAgICBWZWN0b3IyLnN1YnRyYWN0KHBhbkVuZCwgcGFuU3RhcnQsIHBhbkRlbHRhKTtcclxuICAgICAgVmVjdG9yMi5tdWx0aXBseUJ5U2NhbGFyKHBhbkRlbHRhLCB0aGlzLnBhblNwZWVkLCBwYW5EZWx0YSk7XHJcblxyXG4gICAgICAvL3BhbkRlbHRhLnN1YlZlY3RvcnMoIHBhbkVuZCwgcGFuU3RhcnQgKS5tdWx0aXBseVNjYWxhciggdGhpcy5wYW5TcGVlZCApO1xyXG5cclxuICAgICAgcGFuKHBhbkRlbHRhLngsIHBhbkRlbHRhLnkpO1xyXG5cclxuICAgICAgVmVjdG9yMi5jbG9uZShwYW5FbmQsIHBhblN0YXJ0KTtcclxuICAgICAgLy8gcGFuU3RhcnQuY29weSggcGFuRW5kICk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZVRvdWNoTW92ZURvbGx5ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKGV2ZW50KTtcclxuXHJcbiAgICAgIGNvbnN0IGR4ID0gZXZlbnQucGFnZVggLSBwb3NpdGlvbi54O1xyXG4gICAgICBjb25zdCBkeSA9IGV2ZW50LnBhZ2VZIC0gcG9zaXRpb24ueTtcclxuXHJcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcclxuXHJcbiAgICAgIGRvbGx5RW5kLnNldCgwLCBkaXN0YW5jZSk7XHJcblxyXG4gICAgICBkb2xseURlbHRhLnNldCgwLCBNYXRoLnBvdyhkb2xseUVuZC55IC8gZG9sbHlTdGFydC55LCB0aGlzLnpvb21TcGVlZCkpO1xyXG5cclxuICAgICAgZG9sbHlPdXQoZG9sbHlEZWx0YS55KTtcclxuXHJcbiAgICAgIFZlY3RvcjIuY2xvbmUoZG9sbHlFbmQsIGRvbGx5U3RhcnQpO1xyXG4gICAgICAvL2RvbGx5U3RhcnQuY29weSggZG9sbHlFbmQgKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlRG9sbHlQYW4gPSAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKHRoaXMuZW5hYmxlWm9vbSkgaGFuZGxlVG91Y2hNb3ZlRG9sbHkoZXZlbnQpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuZW5hYmxlUGFuKSBoYW5kbGVUb3VjaE1vdmVQYW4oZXZlbnQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVUb3VjaE1vdmVEb2xseVJvdGF0ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbmFibGVab29tKSBoYW5kbGVUb3VjaE1vdmVEb2xseShldmVudCk7XHJcblxyXG4gICAgICBpZiAodGhpcy5lbmFibGVSb3RhdGUpIGhhbmRsZVRvdWNoTW92ZVJvdGF0ZShldmVudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vXHJcbiAgICAvLyBldmVudCBoYW5kbGVycyAtIEZTTTogbGlzdGVuIGZvciBldmVudHMgYW5kIHJlc2V0IHN0YXRlXHJcbiAgICAvL1xyXG5cclxuICAgIHRoaXMub25Qb2ludGVyRG93biA9IChldmVudCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbmFibGVkID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgaWYgKHBvaW50ZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5zZXRQb2ludGVyQ2FwdHVyZShldmVudC5wb2ludGVySWQpO1xyXG5cclxuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMub25Qb2ludGVyTW92ZSk7XHJcbiAgICAgICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgdGhpcy5vblBvaW50ZXJVcCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vXHJcblxyXG4gICAgICBhZGRQb2ludGVyKGV2ZW50KTtcclxuXHJcbiAgICAgIGlmIChldmVudC5wb2ludGVyVHlwZSA9PT0gXCJ0b3VjaFwiKSB7XHJcbiAgICAgICAgb25Ub3VjaFN0YXJ0KGV2ZW50KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvbk1vdXNlRG93bihldmVudCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5vblBvaW50ZXJNb3ZlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmVuYWJsZWQgPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICBpZiAoZXZlbnQucG9pbnRlclR5cGUgPT09IFwidG91Y2hcIikge1xyXG4gICAgICAgIG9uVG91Y2hNb3ZlKGV2ZW50KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvbk1vdXNlTW92ZShldmVudCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5vblBvaW50ZXJVcCA9IChldmVudCkgPT4ge1xyXG4gICAgICByZW1vdmVQb2ludGVyKGV2ZW50KTtcclxuXHJcbiAgICAgIGlmIChwb2ludGVycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICB0aGlzLmRvbUVsZW1lbnQucmVsZWFzZVBvaW50ZXJDYXB0dXJlKGV2ZW50LnBvaW50ZXJJZCk7XHJcblxyXG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5vblBvaW50ZXJNb3ZlKTtcclxuICAgICAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLm9uUG9pbnRlclVwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KF9lbmRFdmVudCk7XHJcblxyXG4gICAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG9uTW91c2VEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGxldCBtb3VzZUFjdGlvbjtcclxuXHJcbiAgICAgIHN3aXRjaCAoZXZlbnQuYnV0dG9uKSB7XHJcbiAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgbW91c2VBY3Rpb24gPSB0aGlzLm1vdXNlQnV0dG9ucy5MRUZUO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgIG1vdXNlQWN0aW9uID0gdGhpcy5tb3VzZUJ1dHRvbnMuTUlERExFO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgIG1vdXNlQWN0aW9uID0gdGhpcy5tb3VzZUJ1dHRvbnMuUklHSFQ7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIG1vdXNlQWN0aW9uID0gLTE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN3aXRjaCAobW91c2VBY3Rpb24pIHtcclxuICAgICAgICBjYXNlIE1PVVNFLkRPTExZOlxyXG4gICAgICAgICAgaWYgKHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICBoYW5kbGVNb3VzZURvd25Eb2xseShldmVudCk7XHJcblxyXG4gICAgICAgICAgc3RhdGUgPSBTVEFURS5ET0xMWTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBNT1VTRS5ST1RBVEU6XHJcbiAgICAgICAgICBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVBhbiA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGhhbmRsZU1vdXNlRG93blBhbihldmVudCk7XHJcblxyXG4gICAgICAgICAgICBzdGF0ZSA9IFNUQVRFLlBBTjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGhhbmRsZU1vdXNlRG93blJvdGF0ZShldmVudCk7XHJcblxyXG4gICAgICAgICAgICBzdGF0ZSA9IFNUQVRFLlJPVEFURTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBNT1VTRS5QQU46XHJcbiAgICAgICAgICBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGhhbmRsZU1vdXNlRG93blJvdGF0ZShldmVudCk7XHJcblxyXG4gICAgICAgICAgICBzdGF0ZSA9IFNUQVRFLlJPVEFURTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVBhbiA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGhhbmRsZU1vdXNlRG93blBhbihldmVudCk7XHJcblxyXG4gICAgICAgICAgICBzdGF0ZSA9IFNUQVRFLlBBTjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHN0YXRlICE9PSBTVEFURS5OT05FKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KF9zdGFydEV2ZW50KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBvbk1vdXNlTW92ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICBzd2l0Y2ggKHN0YXRlKSB7XHJcbiAgICAgICAgY2FzZSBTVEFURS5ST1RBVEU6XHJcbiAgICAgICAgICBpZiAodGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgaGFuZGxlTW91c2VNb3ZlUm90YXRlKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBTVEFURS5ET0xMWTpcclxuICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVpvb20gPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgaGFuZGxlTW91c2VNb3ZlRG9sbHkoZXZlbnQpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFNUQVRFLlBBTjpcclxuICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVBhbiA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICBoYW5kbGVNb3VzZU1vdmVQYW4oZXZlbnQpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMub25Nb3VzZVdoZWVsID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLmVuYWJsZWQgPT09IGZhbHNlIHx8XHJcbiAgICAgICAgdGhpcy5lbmFibGVab29tID09PSBmYWxzZSB8fFxyXG4gICAgICAgIHN0YXRlICE9PSBTVEFURS5OT05FXHJcbiAgICAgIClcclxuICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KF9zdGFydEV2ZW50KTtcclxuXHJcbiAgICAgIGhhbmRsZU1vdXNlV2hlZWwoZXZlbnQpO1xyXG5cclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KF9lbmRFdmVudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMub25LZXlEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmVuYWJsZWQgPT09IGZhbHNlIHx8IHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgaGFuZGxlS2V5RG93bihldmVudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG9uVG91Y2hTdGFydCA9IChldmVudCkgPT4ge1xyXG4gICAgICB0cmFja1BvaW50ZXIoZXZlbnQpO1xyXG5cclxuICAgICAgc3dpdGNoIChwb2ludGVycy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMudG91Y2hlcy5PTkUpIHtcclxuICAgICAgICAgICAgY2FzZSBUT1VDSC5ST1RBVEU6XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICBoYW5kbGVUb3VjaFN0YXJ0Um90YXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgIHN0YXRlID0gU1RBVEUuVE9VQ0hfUk9UQVRFO1xyXG5cclxuICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgVE9VQ0guUEFOOlxyXG4gICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVBhbiA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgaGFuZGxlVG91Y2hTdGFydFBhbigpO1xyXG5cclxuICAgICAgICAgICAgICBzdGF0ZSA9IFNUQVRFLlRPVUNIX1BBTjtcclxuXHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgc3dpdGNoICh0aGlzLnRvdWNoZXMuVFdPKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVE9VQ0guRE9MTFlfUEFOOlxyXG4gICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVpvb20gPT09IGZhbHNlICYmIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICBoYW5kbGVUb3VjaFN0YXJ0RG9sbHlQYW4oKTtcclxuXHJcbiAgICAgICAgICAgICAgc3RhdGUgPSBTVEFURS5UT1VDSF9ET0xMWV9QQU47XHJcblxyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBUT1VDSC5ET0xMWV9ST1RBVEU6XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICBoYW5kbGVUb3VjaFN0YXJ0RG9sbHlSb3RhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgc3RhdGUgPSBTVEFURS5UT1VDSF9ET0xMWV9ST1RBVEU7XHJcblxyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzdGF0ZSAhPT0gU1RBVEUuTk9ORSkge1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChfc3RhcnRFdmVudCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb25Ub3VjaE1vdmUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgdHJhY2tQb2ludGVyKGV2ZW50KTtcclxuXHJcbiAgICAgIHN3aXRjaCAoc3RhdGUpIHtcclxuICAgICAgICBjYXNlIFNUQVRFLlRPVUNIX1JPVEFURTpcclxuICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICBoYW5kbGVUb3VjaE1vdmVSb3RhdGUoZXZlbnQpO1xyXG5cclxuICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgU1RBVEUuVE9VQ0hfUEFOOlxyXG4gICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGhhbmRsZVRvdWNoTW92ZVBhbihldmVudCk7XHJcblxyXG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBTVEFURS5UT1VDSF9ET0xMWV9QQU46XHJcbiAgICAgICAgICBpZiAodGhpcy5lbmFibGVab29tID09PSBmYWxzZSAmJiB0aGlzLmVuYWJsZVBhbiA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICBoYW5kbGVUb3VjaE1vdmVEb2xseVBhbihldmVudCk7XHJcblxyXG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBTVEFURS5UT1VDSF9ET0xMWV9ST1RBVEU6XHJcbiAgICAgICAgICBpZiAodGhpcy5lbmFibGVab29tID09PSBmYWxzZSAmJiB0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICBoYW5kbGVUb3VjaE1vdmVEb2xseVJvdGF0ZShldmVudCk7XHJcblxyXG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm9uQ29udGV4dE1lbnUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5nZXRBdXRvUm90YXRpb25BbmdsZSA9ICgpID0+IHtcclxuICAgICAgcmV0dXJuICgoMiAqIE1hdGguUEkpIC8gNjAgLyA2MCkgKiB0aGlzLmF1dG9Sb3RhdGVTcGVlZDtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZ2V0Wm9vbVNjYWxlID0gKCkgPT4ge1xyXG4gICAgICByZXR1cm4gTWF0aC5wb3coMC45NSwgdGhpcy56b29tU3BlZWQpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy5vbkNvbnRleHRNZW51KTtcclxuXHJcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMub25Qb2ludGVyRG93bik7XHJcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJjYW5jZWxcIiwgb25Qb2ludGVyQ2FuY2VsKTtcclxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy5vbk1vdXNlV2hlZWwsIHtcclxuICAgICAgcGFzc2l2ZTogZmFsc2UsXHJcbiAgICB9KTtcclxuICB9XHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy5vbkNvbnRleHRNZW51KTtcclxuXHJcbiAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMub25Qb2ludGVyRG93bik7XHJcbiAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJjYW5jZWxcIiwgb25Qb2ludGVyQ2FuY2VsKTtcclxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy5vbk1vdXNlV2hlZWwpO1xyXG5cclxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5vblBvaW50ZXJNb3ZlKTtcclxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMub25Qb2ludGVyVXApO1xyXG5cclxuICAgIGlmICh0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vdGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7IC8vIHNob3VsZCB0aGlzIGJlIGFkZGVkIGhlcmU/XHJcbiAgfVxyXG59XHJcbmNvbnN0IFNUQVRFID0ge1xyXG4gIE5PTkU6IC0xLFxyXG4gIFJPVEFURTogMCxcclxuICBET0xMWTogMSxcclxuICBQQU46IDIsXHJcbiAgVE9VQ0hfUk9UQVRFOiAzLFxyXG4gIFRPVUNIX1BBTjogNCxcclxuICBUT1VDSF9ET0xMWV9QQU46IDUsXHJcbiAgVE9VQ0hfRE9MTFlfUk9UQVRFOiA2LFxyXG59O1xyXG5cclxubGV0IHN0YXRlID0gU1RBVEUuTk9ORTtcclxuXHJcbmNvbnN0IEVQUyA9IDAuMDAwMDAxO1xyXG5cclxuLy8gY3VycmVudCBwb3NpdGlvbiBpbiBzcGhlcmljYWwgY29vcmRpbmF0ZXNcclxuY29uc3Qgc3BoZXJpY2FsID0gbmV3IFNwaGVyaWNhbCgpO1xyXG5jb25zdCBzcGhlcmljYWxEZWx0YSA9IG5ldyBTcGhlcmljYWwoKTtcclxuXHJcbmxldCBzY2FsZSA9IDE7XHJcbmNvbnN0IHBhbk9mZnNldCA9IG5ldyBWZWN0b3IzKCk7XHJcbmxldCB6b29tQ2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuY29uc3Qgcm90YXRlU3RhcnQgPSBuZXcgVmVjdG9yMigpO1xyXG5jb25zdCByb3RhdGVFbmQgPSBuZXcgVmVjdG9yMigpO1xyXG5jb25zdCByb3RhdGVEZWx0YSA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5jb25zdCBwYW5TdGFydCA9IG5ldyBWZWN0b3IyKCk7XHJcbmNvbnN0IHBhbkVuZCA9IG5ldyBWZWN0b3IyKCk7XHJcbmNvbnN0IHBhbkRlbHRhID0gbmV3IFZlY3RvcjIoKTtcclxuXHJcbmNvbnN0IGRvbGx5U3RhcnQgPSBuZXcgVmVjdG9yMigpO1xyXG5jb25zdCBkb2xseUVuZCA9IG5ldyBWZWN0b3IyKCk7XHJcbmNvbnN0IGRvbGx5RGVsdGEgPSBuZXcgVmVjdG9yMigpO1xyXG5cclxuY29uc3QgcG9pbnRlcnMgPSBbXTtcclxuY29uc3QgcG9pbnRlclBvc2l0aW9ucyA9IHt9O1xyXG5leHBvcnQgZW51bSBNT1VTRSB7XHJcbiAgTEVGVCA9IDAsXHJcbiAgTUlERExFID0gMSxcclxuICBSSUdIVCA9IDIsXHJcbiAgUk9UQVRFID0gMCxcclxuICBET0xMWSA9IDEsXHJcbiAgUEFOID0gMixcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVE9VQ0gge1xyXG4gIFJPVEFURSxcclxuICBQQU4sXHJcbiAgRE9MTFlfUEFOLFxyXG4gIERPTExZX1JPVEFURSxcclxufVxyXG5mdW5jdGlvbiByb3RhdGVMZWZ0KGFuZ2xlKSB7XHJcbiAgc3BoZXJpY2FsRGVsdGEudGhldGEgLT0gYW5nbGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJvdGF0ZVVwKGFuZ2xlKSB7XHJcbiAgc3BoZXJpY2FsRGVsdGEucGhpIC09IGFuZ2xlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRQb2ludGVyKGV2ZW50KSB7XHJcbiAgcG9pbnRlcnMucHVzaChldmVudCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVBvaW50ZXIoZXZlbnQpIHtcclxuICBkZWxldGUgcG9pbnRlclBvc2l0aW9uc1tldmVudC5wb2ludGVySWRdO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAocG9pbnRlcnNbaV0ucG9pbnRlcklkID09IGV2ZW50LnBvaW50ZXJJZCkge1xyXG4gICAgICBwb2ludGVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyYWNrUG9pbnRlcihldmVudCkge1xyXG4gIGxldCBwb3NpdGlvbiA9IHBvaW50ZXJQb3NpdGlvbnNbZXZlbnQucG9pbnRlcklkXTtcclxuXHJcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgIHBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcclxuICAgIHBvaW50ZXJQb3NpdGlvbnNbZXZlbnQucG9pbnRlcklkXSA9IHBvc2l0aW9uO1xyXG4gIH1cclxuXHJcbiAgcG9zaXRpb24uc2V0KGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFNlY29uZFBvaW50ZXJQb3NpdGlvbihldmVudCkge1xyXG4gIGNvbnN0IHBvaW50ZXIgPVxyXG4gICAgZXZlbnQucG9pbnRlcklkID09PSBwb2ludGVyc1swXS5wb2ludGVySWQgPyBwb2ludGVyc1sxXSA6IHBvaW50ZXJzWzBdO1xyXG5cclxuICByZXR1cm4gcG9pbnRlclBvc2l0aW9uc1twb2ludGVyLnBvaW50ZXJJZF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93blJvdGF0ZShldmVudCkge1xyXG4gIHJvdGF0ZVN0YXJ0LnNldChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duRG9sbHkoZXZlbnQpIHtcclxuICBkb2xseVN0YXJ0LnNldChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duUGFuKGV2ZW50KSB7XHJcbiAgcGFuU3RhcnQuc2V0KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG59XHJcbmZ1bmN0aW9uIG9uUG9pbnRlckNhbmNlbChldmVudCkge1xyXG4gIHJlbW92ZVBvaW50ZXIoZXZlbnQpO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoKSB7XHJcbiAgaWYgKHBvaW50ZXJzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgcm90YXRlU3RhcnQuc2V0KHBvaW50ZXJzWzBdLnBhZ2VYLCBwb2ludGVyc1swXS5wYWdlWSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IHggPSAwLjUgKiAocG9pbnRlcnNbMF0ucGFnZVggKyBwb2ludGVyc1sxXS5wYWdlWCk7XHJcbiAgICBjb25zdCB5ID0gMC41ICogKHBvaW50ZXJzWzBdLnBhZ2VZICsgcG9pbnRlcnNbMV0ucGFnZVkpO1xyXG5cclxuICAgIHJvdGF0ZVN0YXJ0LnNldCh4LCB5KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnRQYW4oKSB7XHJcbiAgaWYgKHBvaW50ZXJzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgcGFuU3RhcnQuc2V0KHBvaW50ZXJzWzBdLnBhZ2VYLCBwb2ludGVyc1swXS5wYWdlWSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IHggPSAwLjUgKiAocG9pbnRlcnNbMF0ucGFnZVggKyBwb2ludGVyc1sxXS5wYWdlWCk7XHJcbiAgICBjb25zdCB5ID0gMC41ICogKHBvaW50ZXJzWzBdLnBhZ2VZICsgcG9pbnRlcnNbMV0ucGFnZVkpO1xyXG5cclxuICAgIHBhblN0YXJ0LnNldCh4LCB5KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnREb2xseSgpIHtcclxuICBjb25zdCBkeCA9IHBvaW50ZXJzWzBdLnBhZ2VYIC0gcG9pbnRlcnNbMV0ucGFnZVg7XHJcbiAgY29uc3QgZHkgPSBwb2ludGVyc1swXS5wYWdlWSAtIHBvaW50ZXJzWzFdLnBhZ2VZO1xyXG5cclxuICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcblxyXG4gIGRvbGx5U3RhcnQuc2V0KDAsIGRpc3RhbmNlKTtcclxufVxyXG4iXSwibmFtZXMiOlsiTWVyc2VubmVUd2lzdGVyIiwiZGlzdGFuY2VTY3JhdGNoIiwibGVycFNjcmF0Y2giLCJhbmdsZUJldHdlZW5TY3JhdGNoIiwiYW5nbGVCZXR3ZWVuU2NyYXRjaDIiLCJtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoIiwic2NhbGVTY3JhdGNoMSIsInNjcmF0Y2hDb2x1bW4iLCJzY2FsZVNjcmF0Y2gzIiwic2NhbGVTY3JhdGNoNCIsInNjYWxlU2NyYXRjaDUiLCJzY3JhdGNoVHJhbnNwb3NlTWF0cml4IiwiSW50ZXJzZWN0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsSUFBWSxvQkFFWCxDQUFBO0FBRkQsQ0FBQSxVQUFZLG9CQUFvQixFQUFBO0FBQzlCLElBQUEsb0JBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxNQUFhLENBQUE7QUFDZixDQUFDLEVBRlcsb0JBQW9CLEtBQXBCLG9CQUFvQixHQUUvQixFQUFBLENBQUEsQ0FBQSxDQUFBO0FBRUQ7QUFDQTtBQUNBLElBQVksZUFHWCxDQUFBO0FBSEQsQ0FBQSxVQUFZLGVBQWUsRUFBQTtBQUN6QixJQUFBLGVBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxXQUFzQixDQUFBO0FBQ3RCLElBQUEsZUFBQSxDQUFBLGlCQUFBLENBQUEsR0FBQSxrQkFBb0MsQ0FBQTtBQUN0QyxDQUFDLEVBSFcsZUFBZSxLQUFmLGVBQWUsR0FHMUIsRUFBQSxDQUFBLENBQUEsQ0FBQTtBQUVEO0FBQ0EsSUFBWSxXQVdYLENBQUE7QUFYRCxDQUFBLFVBQVksV0FBVyxFQUFBO0FBQ3JCLElBQUEsV0FBQSxDQUFBLGtCQUFBLENBQUEsR0FBQSxvQkFBdUMsQ0FBQTtBQUN2QyxJQUFBLFdBQUEsQ0FBQSxzQkFBQSxDQUFBLEdBQUEsdUJBQThDLENBQUE7QUFDOUMsSUFBQSxXQUFBLENBQUEsc0JBQUEsQ0FBQSxHQUFBLHVCQUE4QyxDQUFBO0FBQzlDLElBQUEsV0FBQSxDQUFBLHNCQUFBLENBQUEsR0FBQSx3QkFB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QixDQUFBO0FBQ3JCLElBQUEsWUFBQSxDQUFBLFVBQUEsQ0FBQSxHQUFBLFVBQXFCLENBQUE7QUFDckIsSUFBQSxZQUFBLENBQUEsV0FBQSxDQUFBLEdBQUEsV0FBdUIsQ0FBQTtBQUN2QixJQUFBLFlBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxXQUF1QixDQUFBO0FBQ3ZCLElBQUEsWUFBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLFdBQXVCLENBQUE7QUFDdkIsSUFBQSxZQUFBLENBQUEsV0FBQSxDQUFBLEdBQUEsV0FBdUIsQ0FBQTtBQUN2QixJQUFBLFlBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxXQUF1QixDQUFBO0FBQ3ZCLElBQUEsWUFBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLFdBQXVCLENBQUE7QUFDdkIsSUFBQSxZQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsU0FBbUIsQ0FBQTtBQUNuQixJQUFBLFlBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxXQUF1QixDQUFBO0FBQ3ZCLElBQUEsWUFBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLFdBQXVCLENBQUE7QUFDdkIsSUFBQSxZQUFBLENBQUEsV0FBQSxDQUFBLEdBQUEsV0FBdUIsQ0FBQTtBQUN2QixJQUFBLFlBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxRQUFpQixDQUFBO0FBQ2pCLElBQUEsWUFBQSxDQUFBLFVBQUEsQ0FBQSxHQUFBLFVBQXFCLENBQUE7QUFDckIsSUFBQSxZQUFBLENBQUEsVUFBQSxDQUFBLEdBQUEsVUFBcUIsQ0FBQTtBQUNyQixJQUFBLFlBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxVQUFxQixDQUFBO0FBQ3JCLElBQUEsWUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLFFBQWlCLENBQUE7QUFDakIsSUFBQSxZQUFBLENBQUEsVUFBQSxDQUFBLEdBQUEsVUFBcUIsQ0FBQTtBQUNyQixJQUFBLFlBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxVQUFxQixDQUFBO0FBQ3JCLElBQUEsWUFBQSxDQUFBLFVBQUEsQ0FBQSxHQUFBLFVBQXFCLENBQUE7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YSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsRUFBRTtBQUNGLE1BQU07QUFDTixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsRUFBRTtBQUNGLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxlQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsRUFBRTtBQUNsRCxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QixDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRTtBQUMvQyxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDN0QsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsTUFBTSxFQUFFLElBQUksVUFBVSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLElBQUksVUFBVTtBQUN2RyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCO0FBQ0EsRUFBRTtBQUNGLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsU0FBUyxRQUFRLEVBQUUsVUFBVSxFQUFFO0FBQ3pFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNiLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1YsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztBQUMvQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2hCLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDO0FBQzlDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxNQUFNLEVBQUUsSUFBSSxPQUFPLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQztBQUMzRyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEIsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDWCxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN6RCxFQUFFLElBQUksQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLEVBQUU7QUFDRixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMxQixFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxNQUFNLEVBQUUsSUFBSSxVQUFVLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsSUFBSSxVQUFVLENBQUM7QUFDL0csSUFBSSxDQUFDLENBQUM7QUFDTixFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BCLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDTixFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN6RCxFQUFFO0FBQ0Y7QUFDQSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0FBQ3pCLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxlQUFlLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxXQUFXO0FBQ2xELENBQUMsSUFBSSxDQUFDLENBQUM7QUFDUCxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0M7QUFDQTtBQUNBLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDekIsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNUO0FBQ0EsRUFBRSxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QjtBQUNBLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7QUFDbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDakUsR0FBRztBQUNILEVBQUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7QUFDMUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLEdBQUc7QUFDSCxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3ZFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNyRTtBQUNBLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDZixFQUFFO0FBQ0Y7QUFDQSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCO0FBQ0E7QUFDQSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQztBQUM1QixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksVUFBVSxDQUFDO0FBQzdCLENB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QUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFbEMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLFdBQVcsQ0FBQyxNQUFlLEVBQUUsTUFBZSxFQUFBO1FBQ2xELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFQyxlQUFhLENBQUMsQ0FBQztBQUV0RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUVoQyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sUUFBUSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsTUFBZSxFQUFBO1FBQzdELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU1RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLEdBQUcsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFFLE1BQWUsRUFBQTtBQUN4RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxRQUFRLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxNQUFlLEVBQUE7QUFDN0QsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sZ0JBQWdCLENBQUMsTUFBZSxFQUFFLFNBQWtCLEVBQUUsTUFBZSxFQUFBO0FBQzNFLFFBQUEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDNUQsUUFBQSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUU1RCxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFB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QyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2RTtBQUNELElBQUEsWUFBWSxDQUFDLE1BQWUsRUFBQTtBQUMxQixRQUFBLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQ2QsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDYixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7QUFDakIsUUFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEQsUUFBQSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0RCxRQUFBLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RELFFBQUEsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkQsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0QsSUFBQSxZQUFZLENBQUMsTUFBZSxFQUFBO0FBQzFCLFFBQUEsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFDWixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFDVixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNELElBQUEsa0JBQWtCLENBQUMsTUFBeUIsRUFBQTtBQUMxQyxRQUFBLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQ2QsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDYixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDakIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekMsUUFBQSxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztLQUN6QjtJQUNELFNBQVMsR0FBQTtBQUNQLFFBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUIsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBRUQsSUFBQSxNQUFNLENBQUMsS0FBYyxFQUFBO1FBQ25CLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDcEM7QUFFRCxJQUFBLGFBQWEsQ0FDWCxLQUFjLEVBQ2Qsa0JBQTBCLENBQUMsRUFDM0Isa0JBQTBCLENBQUMsRUFBQTtBQUUzQixRQUFBLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxlQUFlLENBQUMsQ0FBQztLQUM3RTtJQUVELFFBQVEsR0FBQTtBQUNOLFFBQUEsT0FBTyxDQUFJLENBQUEsRUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFLLEVBQUEsRUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFLLEVBQUEsRUFBQSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7S0FDNUM7SUFDRCxtQkFBbUIsQ0FBQyxTQUFvQixFQUFFLEtBQWEsRUFBQTtRQUNyRCxJQUFJLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQixRQUFBLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDRCxJQUFBLE9BQU8sV0FBVyxDQUFDLElBQWEsRUFBRSxNQUFlLEVBQUE7QUFDL0MsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbEIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLGFBQWEsQ0FBQyxTQUFvQixFQUFFLE1BQWUsRUFBQTtBQUN4RCxRQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDcEIsWUFBQSxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUN4QixTQUFBO1FBQ0QsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsU0FBUyxDQUFDO1FBQ3pDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUNsQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUVELE9BQU8sWUFBWSxDQUNqQixDQUFTLEVBQ1QsQ0FBUyxFQUNULENBQVMsRUFDVCxNQUFlLEVBQUE7QUFFZixRQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzdCLFNBQUE7QUFFRCxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxPQUFPLEtBQUssQ0FBQyxTQUFrQixFQUFFLE1BQWtCLEdBQUEsSUFBSSxPQUFPLEVBQUUsRUFBQTtBQUM5RCxRQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDdkIsWUFBQSxPQUFPLFNBQVMsQ0FBQztBQUNsQixTQUFBO0FBQ0QsUUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ3BCLFlBQUEsT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNELFNBQUE7QUFFRCxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxPQUFPLGdCQUFnQixDQUFDLFNBQWtCLEVBQUE7QUFDeEMsUUFBQSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4RDtJQUVELE9BQU8sZ0JBQWdCLENBQUMsU0FBa0IsRUFBQTtBQUN4QyxRQUFBLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hEO0FBRUQsSUFBQSxPQUFPLGtCQUFrQixDQUN2QixLQUFjLEVBQ2QsTUFBZSxFQUNmLE1BQWUsRUFBQTtBQUVmLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXZDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxrQkFBa0IsQ0FDdkIsS0FBYyxFQUNkLE1BQWUsRUFDZixNQUFlLEVBQUE7QUFFZixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxPQUFPLEtBQUssQ0FDVixLQUFjLEVBQ2QsR0FBWSxFQUNaLEdBQVksRUFDWixNQUFlLEVBQUE7QUFFZixRQUFBLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxRQUFBLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxRQUFBLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU3QyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFYixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxPQUFPLGdCQUFnQixDQUFDLFNBQWtCLEVBQUE7QUFDeEMsUUFBQSxRQUNFLFNBQVMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDekIsWUFBQSxTQUFTLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQ3pCLFlBQUEsU0FBUyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxFQUN6QjtLQUNIO0lBRUQsT0FBTyxTQUFTLENBQUMsU0FBa0IsRUFBQTtRQUNqQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDdkQ7QUFFRCxJQUFBLE9BQU8sUUFBUSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUE7UUFDM0MsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFVCxpQkFBZSxDQUFDLENBQUM7QUFDL0MsUUFBQSxPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUNBLGlCQUFlLENBQUMsQ0FBQztLQUMzQztBQUVELElBQUEsT0FBTyxlQUFlLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBQTtRQUNsRCxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUVBLGlCQUFlLENBQUMsQ0FBQztBQUMvQyxRQUFBLE9BQU8sT0FBTyxDQUFDLGdCQUFnQixDQUFDQSxpQkFBZSxDQUFDLENBQUM7S0FDbEQ7QUFFRCxJQUFBLE9BQU8sU0FBUyxDQUFDLFNBQWtCLEVBQUUsTUFBZSxFQUFBO1FBQ2xELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFL0MsTUFBTSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUNuQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7UUFFbkMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN6RCxZQUFBLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztBQUN0RCxTQUFBO0FBRUQsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLEdBQUcsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFBO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDL0Q7QUFFRCxJQUFBLE9BQU8sa0JBQWtCLENBQ3ZCLElBQWEsRUFDYixLQUFjLEVBQ2QsTUFBZSxFQUFBO1FBRWYsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDNUIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLGdCQUFnQixDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsTUFBZSxFQUFBO1FBQ3BFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzVCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxHQUFHLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxNQUFlLEVBQUE7UUFDdkQsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDNUIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLFFBQVEsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFFLE1BQWUsRUFBQTtRQUM1RCxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM1QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7QUFFRCxJQUFBLE9BQU8sZ0JBQWdCLENBQ3JCLFNBQWtCLEVBQ2xCLE1BQWMsRUFDZCxNQUFlLEVBQUE7UUFFZixNQUFNLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDaEMsTUFBTSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUNoQyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7QUFFRCxJQUFBLE9BQU8sY0FBYyxDQUNuQixTQUFrQixFQUNsQixNQUFjLEVBQ2QsTUFBZSxFQUFBO1FBRWYsTUFBTSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUNoQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7QUFDaEMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLE1BQU0sQ0FBQyxTQUFrQixFQUFFLE1BQWUsRUFBQTtBQUMvQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7QUFFRCxJQUFBLE9BQU8sR0FBRyxDQUFDLFNBQWtCLEVBQUUsTUFBZSxFQUFBO1FBQzVDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUVELE9BQU8sSUFBSSxDQUNULEtBQWMsRUFDZCxHQUFZLEVBQ1osQ0FBUyxFQUNULE1BQWUsRUFBQTtRQUVmLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFQyxhQUFXLENBQUMsQ0FBQztBQUM5QyxRQUFBLE1BQU0sR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDQSxhQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2pEO0FBRUQsSUFBQSxPQUFPLFlBQVksQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFBO0FBQy9DLFFBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztBQUM3QyxRQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDL0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3RFLFFBQUEsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FDNUIsT0FBTyxDQUFDLEtBQUssQ0FDWCxtQkFBbUIsRUFDbkIsb0JBQW9CLEVBQ3BCLG1CQUFtQixDQUNwQixDQUNGLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2pDO0FBRUQsSUFBQSxPQUFPLGtCQUFrQixDQUFDLFNBQWtCLEVBQUUsTUFBZSxFQUFBO1FBQzNELE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLHlCQUF5QixDQUFDLENBQUM7QUFDbEUsUUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUVsQixRQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ2QsWUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDZCxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2hELGFBQUE7QUFBTSxpQkFBQTtnQkFDTCxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2hELGFBQUE7QUFDRixTQUFBO0FBQU0sYUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNyQixNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2hELFNBQUE7QUFBTSxhQUFBO1lBQ0wsTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRCxTQUFBO0FBRUQsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLGFBQWEsQ0FBQyxDQUFVLEVBQUUsQ0FBVSxFQUFFLE1BQWUsRUFBQTtBQUMxRCxRQUFBLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDcEQ7QUFFRCxJQUFBLE9BQU8sTUFBTSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUE7UUFDekMsUUFDRSxJQUFJLEtBQUssS0FBSzthQUNiLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNkLGdCQUFBLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUM7QUFDbEIsZ0JBQUEsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztnQkFDbEIsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ3JCO0tBQ0g7QUFFRDs7QUFFRztBQUNILElBQUEsT0FBTyxXQUFXLENBQ2hCLFNBQWtCLEVBQ2xCLEtBQWUsRUFDZixNQUFjLEVBQUE7UUFFZCxRQUNFLFNBQVMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUM3QixTQUFTLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLFNBQVMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFDakM7S0FDSDtJQUVELE9BQU8sYUFBYSxDQUNsQixJQUFhLEVBQ2IsS0FBYyxFQUNkLGVBQTBCLEdBQUEsQ0FBQyxFQUMzQixlQUFBLEdBQTBCLENBQUMsRUFBQTtRQUUzQixRQUNFLElBQUksS0FBSyxLQUFLO2FBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDWixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ2QsZ0JBQUEsS0FBSyxDQUFDLGFBQWEsQ0FDakIsSUFBSSxDQUFDLENBQUMsRUFDTixLQUFLLENBQUMsQ0FBQyxFQUNQLGVBQWUsRUFDZixlQUFlLENBQ2hCO0FBQ0QsZ0JBQUEsS0FBSyxDQUFDLGFBQWEsQ0FDakIsSUFBSSxDQUFDLENBQUMsRUFDTixLQUFLLENBQUMsQ0FBQyxFQUNQLGVBQWUsRUFDZixlQUFlLENBQ2hCO0FBQ0QsZ0JBQUEsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUFFLGVBQWUsQ0FBQyxDQUFDLEVBQ3pFO0tBQ0g7QUFFRCxJQUFBLE9BQU8sS0FBSyxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsTUFBZSxFQUFBO0FBQ3pELFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNyQixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDckIsUUFBQSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXZCLE1BQU0sQ0FBQyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUMxQyxNQUFNLENBQUMsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUM7UUFDMUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBRTFDLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjs7QUEzZGEsT0FBQSxDQUFBLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUVqRCxPQUFBLENBQUEsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRWhELE9BQUEsQ0FBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFbkQsT0FBQSxDQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUVuRCxPQUFBLENBQUEsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBcWQxRCxPQUFBLENBQUEsUUFBUSxHQUFHLFVBQ2hCLElBQWEsRUFDYixLQUFjLEVBQ2QsTUFBZSxFQUFBO0FBRWYsSUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztBQUNwQyxJQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO0FBQ3BDLElBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUM7QUFFcEMsSUFBQSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFSixNQUFNRCxpQkFBZSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDdEMsTUFBTUMsYUFBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDbEMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQzFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUMzQyxNQUFNLHlCQUF5QixHQUFHLElBQUksT0FBTyxFQUFFOztBQ2hmL0M7Ozs7Ozs7Ozs7O0FBV0c7QUFDSCxNQUFNLE9BQU8sQ0FBQTtBQUNYLElBQUEsV0FBQSxDQUNFLFdBQVcsR0FBRyxDQUFDLEVBQ2YsV0FBVyxHQUFHLENBQUMsRUFDZixXQUFXLEdBQUcsQ0FBQyxFQUNmLFdBQVcsR0FBRyxDQUFDLEVBQ2YsV0FBVyxHQUFHLENBQUMsRUFDZixXQUFXLEdBQUcsQ0FBQyxFQUNmLFdBQVcsR0FBRyxDQUFDLEVBQ2YsV0FBVyxHQUFHLENBQUMsRUFDZixXQUFXLEdBQUcsQ0FBQyxFQUFBO0FBRWYsUUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN0QixRQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDdEIsUUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN0QixRQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDdEIsUUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN0QixRQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7S0FDdkI7QUFDRCxJQUFBLGNBQWMsQ0FBQyxNQUFlLEVBQUE7UUFDNUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckIsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0QsSUFBQSxlQUFlLENBQUMsT0FBZ0IsRUFBQTtBQUM5QixRQUFBLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsUUFBQSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1QixRQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlCLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUVELElBQUEsT0FBTyxLQUFLLENBQUMsTUFBMEIsRUFBRSxNQUFlLEVBQUE7QUFDdEQsUUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ3BCLFlBQUEsT0FBTyxTQUFTLENBQUM7QUFDbEIsU0FBQTtBQUNELFFBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNwQixPQUFPLElBQUksT0FBTyxDQUNoQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FDVixDQUFDO0FBQ0gsU0FBQTtRQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxvQkFBb0IsQ0FDekIsTUFBcUIsRUFDckIsTUFBZ0IsRUFBQTtBQUVoQixRQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDcEIsWUFBQSxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUN4QixTQUFBO1FBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUN0QztBQUVELElBQUEsT0FBTyxpQkFBaUIsQ0FBQyxNQUFxQixFQUFFLE1BQWdCLEVBQUE7QUFDOUQsUUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxPQUFPLENBQ2hCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUNWLENBQUM7QUFDSCxTQUFBO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLGNBQWMsQ0FBQyxVQUFzQixFQUFFLE1BQWdCLEVBQUE7UUFDNUQsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdkMsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdkMsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFD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RyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBRTlDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBRXBDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxRQUFRLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTtBQUM5QyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FDMUIsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUMsZUFBYSxDQUFDLENBQ3JFLENBQUM7QUFDRixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FDMUIsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUEsZUFBYSxDQUFDLENBQ3JFLENBQUM7QUFDRixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FDMUIsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUEsZUFBYSxDQUFDLENBQ3JFLENBQUM7QUFDRixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxPQUFPLGVBQWUsQ0FBQyxNQUFlLEVBQUE7QUFDcEMsUUFBQSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRUMsZUFBYSxDQUFDLENBQUM7QUFDeEMsUUFBQSxPQUFPLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQ0EsZUFBYSxDQUFDLENBQUM7S0FDaEQ7QUFFRCxJQUFBLE9BQU8sV0FBVyxDQUNoQixNQUFlLEVBQ2YsUUFBaUIsRUFDakIsTUFBZSxFQUFBO1FBRWYsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUVDLGVBQWEsQ0FBQyxDQUFDO0FBRXRELFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRWxDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxXQUFXLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTtRQUNqRCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRUMsZUFBYSxDQUFDLENBQUM7QUFFdEQsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFaEMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLFFBQVEsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFFLE1BQWUsRUFBQTtBQUM1RCxRQUFBLE1BQU0sV0FBVyxHQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9ELFFBQUEsTUFBTSxXQUFXLEdBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0QsUUFBQSxNQUFNLFdBQVcsR0FDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUUvRCxRQUFBLE1BQU0sV0FBVyxHQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9ELFFBQUEsTUFBTSxXQUFXLEdBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0QsUUFBQSxNQUFNLFdBQVcsR0FDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUUvRCxRQUFBLE1BQU0sV0FBVyxHQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9ELFFBQUEsTUFBTSxXQUFXLEdBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0QsUUFBQSxNQUFNLFdBQVcsR0FDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUUvRCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7QUFFRCxJQUFBLE9BQU8sR0FBRyxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsTUFBZSxFQUFBO0FBQ3ZELFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxRQUFRLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxNQUFlLEVBQUE7QUFDNUQsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLGdCQUFnQixDQUNyQixNQUFlLEVBQ2YsU0FBa0IsRUFDbEIsTUFBZSxFQUFBO0FBRWYsUUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFdkIsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDM0QsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDM0QsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFM0QsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0FBRUQsSUFBQSxPQUFPLGdCQUFnQixDQUNyQixNQUFlLEVBQ2YsTUFBYyxFQUNkLE1BQWUsRUFBQTtRQUVmLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQy9CLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUVELElBQUEsT0FBTyxlQUFlLENBQ3BCLE1BQWUsRUFDZixLQUFjLEVBQ2QsTUFBZSxFQUFBO0FBRWYsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcs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QyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFaEMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBRUQsT0FBTyxXQUFXLENBQUMsTUFBZSxFQUFBO0FBQ2hDLFFBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXRCLFFBQ0UsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUM3QixHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1lBQzdCLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFDN0I7S0FDSDtBQUVELElBQUEsT0FBTyxPQUFPLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTtBQUM3QyxRQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztRQUdoRCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtBQUM1QyxZQUFBLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUM3QyxTQUFBOztRQUdELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdB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SUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV2QyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFFRCxPQUFPLEtBQUssQ0FDVixLQUFjLEVBQ2QsR0FBWSxFQUNaLEdBQVksRUFDWixNQUFlLEVBQUE7QUFFZixRQUFBLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxRQUFBLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxRQUFBLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxRQUFBLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU3QyxRQUFBLE1B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QyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFakIsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNaO0lBQ0QsUUFBUSxHQUFBO1FBQ1AsUUFDQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxFQUFBLEVBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFLLEVBQUEsRUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFLLEdBQUEsQ0FBQTtBQUNyRCxZQUFBLENBQUEsQ0FBQSxFQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBSyxFQUFBLEVBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxFQUFBLEVBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFLLEdBQUEsQ0FBQTtBQUNyRCxZQUFBLENBQUEsQ0FBQSxFQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBSyxFQUFBLEVBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQSxFQUFBLEVBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFLLEdBQUEsQ0FBQTtZQUN0RCxDQUFJLENBQUEsRUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUEsRUFBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUssRUFBQSxFQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBRyxDQUFBLENBQUEsRUFDbkQ7S0FDRjtBQUNELElBQUEsT0FBTyxLQUFLLENBQUMsTUFBMEIsRUFBRSxNQUFlLEVBQUE7QUFDdkQsUUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ3JCLFlBQUEsT0FBTyxTQUFTLENBQUM7QUFDakIsU0FBQTtBQUNELFFBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUNyQixZQUFBLE9BQU8sSUFBSSxPQUFPLENBQ2pCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFDVixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQ1YsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQ1YsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUNWLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUNWLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FDVixDQUFDO0FBQ0YsU0FBQTtRQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFD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Q0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRW5DLE1BQU0sR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFNUIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM1QixNQUFNLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMvQixNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRTVCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDNUIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM1QixNQUFNLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUUvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMs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LENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDMUMsUUFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxNQUFNLEtBQUssR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM5QixRQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxLQUFLLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUV2QyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7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O2dCQUNULE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNULE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ1QsTUFBTSxDQUFDLEVBQUUsQ0FBQztnQkFDVixNQUFNLENBQUMsRUFBRSxDQUFDO2dCQUNWLE1BQU0sQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxDQUFDLEVBQUUsQ0FBQztnQkFDVixNQUFNLENBQUMsRUFBRSxDQUFDO2dCQUNWLE1BQU0sQ0FBQyxFQUFFLENBQUM7YUFDVixDQUFDO0FBQ0YsU0FBQTtRQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4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QUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXRCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDcEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDdEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXhCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxRQUFRLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTtBQUMvQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDbkcsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQ25HLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUNwRyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7SUFFRCxPQUFPLGVBQWUsQ0FBQyxNQUFlLEVBQUE7QUFDckMsUUFBQSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztBQUN4QyxRQUFBLE9BQU8sT0FBTyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQy9DO0FBRUQsSUFBQSxPQUFPLFdBQVcsQ0FBQyxNQUFlLEVBQUUsUUFBaUIsRUFBRSxNQUFlLEVBQUE7UUFDckUsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFFdEQsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV0QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXRCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV4QixRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sV0FBVyxDQUFDLE1BQWUsRUFBRSxNQUFlLEVBQUE7UUFDbEQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFFdEQsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFakMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLFFBQVEsQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFFLE1BQWUsRUFBQTtBQUM3RCxRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQixRQUFBLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUUxQixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdkYsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3ZGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUN4RixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFFeEYsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3ZGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUN2RixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDeEYsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBRXhGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUN6RixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDekYsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE9BQU8sR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBQzFGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUUxRixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDM0YsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBQzNGLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLE1BQU0sR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUM1RixRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxNQUFNLEdBQUcsT0FBTyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFFNUYsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN6QixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDekIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN6QixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDekIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3pCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxHQUFHLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxNQUFlLEVBQUE7QUFDeEQsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLE9BQU8sUUFBUSxDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsTUFBZSxFQUFBO0FBQzdELFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLHNCQUFzQixDQUFDLElBQWEsRUFBRSxLQUFjLEVBQUUsTUFBZSxFQUFBO0FBQzNFLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXhCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRTFCLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUM7QUFDckUsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNyRSxRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBRXRFLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUM7QUFDckUsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNyRSxRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxN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QUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRTFCLFFBQUEsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQUEsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTVCLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUM7QUFDckUsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNyRSxRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBRXRFLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUM7QUFDckUsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNyRSxRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBRXRFLFFBQUEsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDdEUsUUFBQSxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE9BQU8sQ0FBQztBQUN0RSxRQUFBLE1BQU0sV0FBVyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBRXZFLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNoQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDaEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDekIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLHFCQUFxQixDQUFDLE1BQWUsRUFBRSxXQUFvQixFQUFFLE1BQWUsRUFBQTtBQUNsRixRQUFBLE1BQU0sQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUV4QixNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV2RSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxlQUFlLENBQUMsTUFBZSxFQUFFLEtBQWMsRUFBRSxNQUFlLEVBQUE7QUFDdEUsUUFBQSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7O1FBR3ZCLElBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUU7WUFDdkQsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyQyxTQUFBO1FBRUQsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxD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QUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUV2QixRQUFBLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDN0UsUUFBQSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzdFLFFBQUEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUM5RSxRQUFBLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFOUUsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyx1QkFBdUIsQ0FBQyxNQUFlLEVBQUUsU0FBa0IsRUFBRSxNQUFlLEVBQUE7QUFDbEYsUUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFdkIsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDM0QsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDM0QsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFNUQsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLGVBQWUsQ0FBQyxNQUFlLEVBQUUsU0FBa0IsRUFBRSxNQUFlLEVBQUE7QUFDMUUsUUFBQSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFBLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFdkIsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFekUsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDYixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLGdCQUFnQixDQUFDLE1BQWUsRUFBRSxNQUFjLEVBQUUsTUFBZSxFQUFBO1FBQ3ZFLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQ2pDLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxNQUFNLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTtRQUM3QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLFNBQVMsQ0FBQyxNQUFlLEVBQUUsTUFBZSxFQUFBO0FBQ2hELFFBQUEsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLFFBQUEsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTVCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNwQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDcEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNyQixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDckIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLEdBQUcsQ0FBQyxNQUFlLEVBQUUsTUFBZSxFQUFBO0FBQzFDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFbEMsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLE1BQU0sQ0FBQyxJQUFhLEVBQUUsS0FBYyxFQUFBOzs7OztRQUsxQyxRQUNDLElBQUksS0FBSyxLQUFLO2FBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDYixPQUFPLENBQUMsS0FBSyxDQUFDOztBQUVkLGdCQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3RCLGdCQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQ3RCLGdCQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDOztBQUV0QixnQkFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixnQkFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixnQkFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixnQkFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixnQkFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixnQkFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixnQkFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixnQkFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixnQkFBQSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUUsQ0FBQzs7QUFFdEIsZ0JBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDcEIsZ0JBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDcEIsZ0JBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDdkI7S0FDRjtBQUVELElBQUEsT0FBTyxhQUFhLENBQUMsSUFBYSxFQUFFLEtBQWMsRUFBRSxPQUFlLEVBQUE7QUFDbEUsUUFBQSxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVuQyxRQUNDLElBQUksS0FBSyxLQUFLO2FBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDYixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ2QsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTztBQUN2QyxnQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPO0FBQ3ZDLGdCQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU87QUFDdkMsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTztBQUN2QyxnQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPO0FBQ3ZDLGdCQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU87QUFDdkMsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTztBQUN2QyxnQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPO0FBQ3ZDLGdCQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU87QUFDdkMsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTztBQUN2QyxnQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxPQUFPO0FBQ3pDLGdCQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLE9BQU87QUFDekMsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksT0FBTztBQUN6QyxnQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxPQUFPO0FBQ3pDLGdCQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLE9BQU87QUFDekMsZ0JBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLEVBQzFDO0tBQ0Y7QUFFRCxJQUFBLE9BQU8sY0FBYyxDQUFDLE1BQWUsRUFBRSxNQUFlLEVBQUE7QUFDckQsUUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0QixRQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RCLFFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEIsUUFBQSxPQUFPLE1BQU0sQ0FBQztLQUNkO0FBRUQsSUFBQSxPQUFPLFVBQVUsQ0FBQyxNQUFlLEVBQUUsTUFBZSxFQUFBO1FBQ2pELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxPQUFPLENBQUMsTUFBZSxFQUFFLE1BQWUsRUFBQTs7Ozs7QUFLOUMsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekIsUUFBQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekIsUUFBQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekIsUUFBQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7O0FBR3pCLFFBQUEsSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFBLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDekIsUUFBQSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLFFBQUEsSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFBLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFBQSxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLFFBQUEsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUN4QixRQUFBLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDekIsUUFBQSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLFFBQUEsSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFBLElBQUksS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7QUFDekIsUUFBQSxJQUFJLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDOztRQUd6QixNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2pHLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDakcsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNuRyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ25HLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDakcsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNqRyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ25HLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7O0FBR25HLFFBQUEsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBQSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFBLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ25CLFFBQUEsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBQSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFBLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ25CLFFBQUEsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBQSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFBLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ25CLFFBQUEsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBQSxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNwQixRQUFBLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDOztRQUdwQixNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3ZHLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDdkcsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQztRQUMxRyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzFHLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDdEcsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN0RyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksSUFBSSxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3RHLE1BQU0sS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7O0FBR3RHLFFBQUEsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVoRSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRTs7O0FBR3BDLFlBQUEsSUFDQyxPQUFPLENBQUMsYUFBYSxDQUNwQixPQUFPLENBQUMsVUFBVSxD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LENBQUMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDekIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUN6QixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLFFBQUEsT0FBTyxNQUFNLENBQUM7S0FDZDtBQUVELElBQUEsT0FBTyxxQkFBcUIsQ0FBQyxNQUFlLEVBQUUsTUFBZSxFQUFBOzs7Ozs7QUFPNUQsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsUUFBQSxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFNUIsUUFBQSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEIsUUFBQSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFdEIsUUFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUcsT0FBTyxHQUFHLEVBQUUsR0FBRyxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ3RELFFBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHLE9BQU8sR0FBRyxFQUFFLEdBQUcsT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUN0RCxRQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRyxPQUFPLEdBQUcsRUFBRSxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFFdkQsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3BCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNwQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDcEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNwQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDcEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3BCLFFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNoQixRQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDcEIsUUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3BCLFFBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUN0QixRQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDakIsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsUUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcs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QUFBLFVBQVUsQ0FBQyxJQUFZLEVBQUUsS0FBaUMsRUFBRSxPQUFnQixFQUFBO0FBQzNFLFFBQUEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFBRSxPQUFPO0FBQ3JDLFFBQUEsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0UsUUFBQSxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDbEMsUUFBQSxJQUFJLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUM7S0FDcEM7QUFDRCxJQUFBLFVBQVUsQ0FBQyxJQUFZLEVBQUUsS0FBaUMsRUFBRSxPQUFnQixFQUFBO0FBQzNFLFFBQUEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFBRSxPQUFPO0FBQ3JDLFFBQUEsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0UsUUFBQSxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDbEMsUUFBQSxJQUFJLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUM7S0FDcEM7SUFDRCxt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Q0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEMsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0QsSUFBQSxJQUFJLENBQUMsS0FBSyxFQUFBO0FBQ1IsUUFBQSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUMsUUFBQSxPQUFPLENBQUMsQ0FBQztLQUNWO0lBQ0QsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUE7QUFDWCxRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNELElBQUEsSUFBSSxDQUFDLEtBQUssRUFBQTtBQUNSLFFBQUEsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM5QyxRQUFBLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBQTtBQUNYLFFBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUMsUUFBQSxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0QsSUFBQSxJQUFJLENBQUMsS0FBSyxFQUFBO0FBQ1IsUUFBQSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlDLFFBQUEsT0FBTyxDQUFDLENBQUM7S0FDVjtBQUNELElBQUEsSUFBSSxDQUFDLEtBQUssRUFBQTtBQUNSLFFBQUEsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFD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QUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDbEIsUUFBQSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQ2xCLFFBQUEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztLQUNuQixDQUFDO0FBQ0YsSUFBQSxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsSUFBQSxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsSUFBQSxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsSUFBQSxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsSUFBQSxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsSUFBQSxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFMUIsSUFBQSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDO0FBQ3ZDLElBQUEsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUM7QUFDL0MsSUFBQSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQztJQUNoRCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUM7QUFDeEQsSUFBQSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDL0IsSUFBQSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3ZDLElBQUEsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUN4QyxJQUFBLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBRWhELElBQUEsSUFBSSxTQUFTLEdBQUc7O0FBRWQsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDOztBQUdMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQzs7QUFHTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7O0FBR0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDOztBQUdMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQzs7QUFHTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFDTCxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLFFBQUEsR0FBRyxDQUFDLENBQUM7S0FDTixDQUFDO0FBRUYsSUFBQSxJQUFJLEdBQUcsR0FBRzs7UUFFUixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7O1FBR2xDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7UUFHbEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDOztRQUdsQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7O1FBR2xDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7UUFHbEMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ25DLENBQUM7QUFFRixJQUFBLElBQUksT0FBTyxHQUFHOztBQUVaLFFBQUEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDOztBQUdwRCxRQUFBLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7QUFHcEQsUUFBQSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7O0FBRzFELFFBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDOztBQUcxRCxRQUFBLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7QUFHcEQsUUFBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDM0QsQ0FBQztJQUNGLE9BQU87QUFDTCxRQUFBLFNBQVMsRUFBRSxTQUFTO0FBQ3BCLFFBQUEsT0FBTyxFQUFFLE9BQU87QUFDaEIsUUFBQSxHQUFHLEVBQUUsR0FBRztLQUNULENBQUM7QUFDSixDQUFDO0FBRUssU0FBVSxZQUFZLENBQUMsT0FBTyxFQUFBO0FBQ2xDLElBQUEsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7QUFFeEIsSUFBQSxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztBQUN4QyxJQUFBLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO0FBQ3RDLElBQUEsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFDakMsSUFBQSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQztJQUNsQyxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQztBQUMxQyxJQUFBLElBQUksYUFBYSxHQUFHLFNBQVMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLElBQUEsSUFBSSxXQUFXLEdBQUcsU0FBUyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDM0MsSUFBSSxTQUFTLEVBQUUsVUFBVSxDQUFDO0lBQzFCLElBQUksU0FBUyxHQUFHLElBQUksS0FBSyxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3QyxJQUFJLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsSUFBSSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLElBQUEsSUFBSSxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQzNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNULElBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNQLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDUixJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFFWCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUM3QixRQUFBLFNBQVMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO0FBQ3pCLFFBQUEsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDekIsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzlCLFlBQUEsVUFBVSxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDM0IsWUFBQSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2hELFlBQUEsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDNUQsWUFBQSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMzRCxZQUFBLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztBQUN2RSxZQUFBLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDaEQsWUFBQSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztBQUM1RCxZQUFBLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzNELFlBQUEsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZFLFlBQUEsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDO1lBQ3ZCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQztBQUM3QixZQUFBLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztZQUN0QixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUM7QUFDNUIsWUFBQSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFlBQUEsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFWCxZQUFBLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO1lBQzVCLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztZQUNoQyxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7WUFFaEMsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO1lBQ2hDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztZQUNoQyxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7WUFFaEMsU0FB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
